<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Parrot - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Parrot - Quick Guide - When we feed our program into conventional Perl, it is first compiled into an internal representation, or bytecode; this bytecode is then fed into almost separa"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/parrot/parrot_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#7ca500;
}
a.demo {
    background:#7ca500;
}
li.heading {
    background:#7ca500;
}
.course-box{background:#7ca500}
.home-intro-sub p{color:#7ca500}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/parrot/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/parrot/images/parrot-mini-logo.jpg" alt="Parrot - PERL Virtual Machine" />
</div>
<ul class="toc chapters">
<li class="heading">Parrot Tutorial</li>
<li><a class="left" target="_top" href="/parrot/index.htm">Parrot - Home</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_overview.htm" >Parrot - Overview</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_installation.htm" >Parrot - Installation</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_instructions.htm" >Parrot - Instructions</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_garbage.htm" >Parrot - Garbage Collection</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_datatype.htm" >Parrot - Datatypes</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_registers.htm" >Parrot -  Registers</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_operations.htm" >Parrot - Operations</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_branches.htm" >Parrot - Branches</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Parrot Examples</li>
<li><a class="left" target="_top" href="/parrot/parrot_examples.htm" >Parrot - Examples</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Parrot Resources</li>
<li><a class="left" target="_top" href="/parrot/parrot_quick_guide.htm" >Parrot - Quick Guide</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_resources.htm" >Parrot - Useful Resources</a></li>
<li><a class="left" target="_top" href="/parrot/parrot_discussion.htm" >Parrot - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Parrot - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/parrot/parrot_examples.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/parrot/parrot_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>What is Parrot</h1>
<p>When we feed our program into conventional Perl, it is first compiled into an internal representation, or bytecode; this bytecode is then fed into almost separate subsystem inside Perl to be interpreted. So there are two distinct phases of Perl's operation:</p>
<ul class="list">
<li><p>Compilation to bytecode and</p></li> 
<li><p>Interpretation of bytecode.</p></li>
</ul>
<p>This is not unique to Perl. Other languages following this design include Python, Ruby, Tcl and even Java.</p>
<p>We also know that there is a Java Virtual Machine (JVM) which is a platform independent execution environment that converts Java bytecode into machine language and executes it. If you understand this concept then you will understand Parrot.</p>
<p><b>Parrot</b> is a virtual machine designed to efficiently compile and execute bytecode for interpreted languages. Parrot is the target for the final Perl 6 compiler, and is used as a backend for Pugs, as well as variety of other languages like Tcl, Ruby, Python etc.</p>
<p>Parrot has been written  using most popular language "C".</p>
<h1>Parrot Installation</h1>
<p>Before we start, let's download one latest copy of Parrot and install it on our machine.</p>
<p>Parrot download link is available in<a href="http://www.parrot.org/source.html" rel="nofollow" target="blank"> Parrot CVS Snapshot</a>. Download the latest version of Parrot and to install it follow the following steps:</p>
<ul class="list">
<li><p>Unzip and untar the downloaded file.</p></li>
<li><p>Make sure you already have Perl 5 installed on your machine.</p></li>
<li><p>Now do the following:</p></li>
</ul>
<pre class="prettyprint notranslate">
% cd parrot
% perl Configure.pl
Parrot Configure
Copyright (C) 2001 Yet Another Society
Since you're running this script, you obviously have
Perl 5 -- I'll be pulling some defaults from its configuration.
...
</pre>
<ul class="list">
<li><p>You'll then be asked a series of questions about your local configuration; you can almost always hit return/enter for each one.</p></li> 
<li><p>Finally, you'll be told to type - make <i>test_prog,</i> and Parrot will successfully build the test interpreter.</p></li>
<li><p>Now you should run some tests; so type 'make test' and you should see a readout like the following:</p></li> 
</ul>
<pre class="prettyprint notranslate">
perl t/harness
t/op/basic.....ok,1/2 skipped:label constants unimplemented in
assembler
t/op/string....ok, 1/4 skipped:  I'm unable to write it!
All tests successful, 2 subtests skipped.
Files=2, Tests=6,......
</pre>    
<p>By the time you read this, there could be more tests, and some of those which skipped might not skip, but make sure that none of them should fail!</p>
<p>Once you have a parrot executable installed, you can check out the various types of examples given in <a href="/parrot/parrot_examples.htm">Parrot 'Examples'</a> section. Also you can check out the examples directory in the parrot repository.</p>
<h1>Parrot Instructions Format</h1>
<p>Parrot can currently accept instructions to execute in four forms. PIR (Parrot Intermediate Representation) is designed to be written by people and generated by compilers. It hides away some low-level details, such as the way parameters are passed to functions.</p>
<p>PASM (Parrot Assembly) is a level below PIR - it is still human readable/writable and can be generated by a compiler, but the author has to take care of details such as calling conventions and register allocation. PAST (Parrot Abstract Syntax Tree) enables Parrot to accept an abstract syntax tree style input - useful for those writing compilers.</p>
<p>All of the above forms of input are automatically converted inside Parrot to PBC (Parrot Bytecode). This is much like machine code, but understood by the Parrot interpreter.</p>
<p>It is not intended to be human-readable or human-writable, but unlike the other forms execution can start immediately without the need for an assembly phase. Parrot bytecode is platform independent.</p>
<h2>The instruction set</h2>
<p>The Parrot instruction set includes arithmetic and logical operators, compare and branch/jump (for implementing loops, if...then constructs, etc.), finding and storing global and lexical variables, working with classes and objects, calling subroutines and methods along with their parameters, I/O, threads and more.</p>
<h1>Garbage Collection in Parrot</h1>
<p>Like Java Virtual Machine, Parrot also keep you free from worrying about memory de-allocation.</p>
<ul class="list">
<li><p>Parrot provides garbage collection.</p></li>
<li><p>Parrot programs do not need to free memory explicitly.</p></li>
<li><p>Allocated memory will be freed when it is no longer in use i.e. no longer referenced.</p></li>
<li><p>Parrot Garbage Collector runs periodically to take care of unwanted  memory.</p></li>
</ul>
<h1>Parrot Datatypes</h1>
<p>The Parrot CPU has four basic data types:</p> 
<ul class="list">
<li><p><b>IV</b></p>
<p>An integer type; guaranteed to be wide enough to hold a pointer.</p></li>
<li><p><b>NV</b></p>
<p>An architecture-independent floating-point type.</p></li>
<li><p><b>STRING </b></p>
<p>An abstracted, encoding-independent string type.</p></li>
<li><p><b>PMC </b></p>
<p>A scalar.</p></li>
</ul>
<p>The first three types are pretty much self-explanatory; the final type - Parrot Magic Cookies, are slightly more difficult to understand.</p>
<h2>What are PMCs?</h2>
<p>PMC stands for Parrot Magic Cookie. PMCs represent any complex data structure or type, including aggregate data types (arrays, hash tables, etc.). A PMC can implement its own behavior for arithmetic, logical and string operations performed on it, allowing for language-specific behavior to be introduced. PMCs can be built in to the Parrot executable or dynamically loaded when they are needed.</p>
<h1>Parrot Registers</h1>
<p>The current Perl 5 virtual machine is a stack machine. It communicate values between operations by keeping them on a stack. Operations load values onto the stack, do whatever they need to do and put the result back onto the stack. This is easy to work with, but it is slow.</p>
<p>To add two numbers together, you need to perform three stack pushes and two stack pops. Worse, the stack has to grow at runtime, and that means allocating memory just when you don't want to be allocating it.</p>
<p>So Parrot is going to break the established tradition for virtual machines, and use a register architecture, more akin to the architecture of a real hardware CPU. This has another advantage. We can use all the existing literature on how to write compilers and optimizers for register-based CPUs for our software CPU!</p>
<p>Parrot has specialist registers for each type: 32 IV registers, 32 NV registers, 32 string registers and 32 PMC registers. In Parrot assembler, these are named I1...I32, N1...N32, S1...S32, P1...P32 respectively.</p>
<p>Now let's look at some assembler. We can set these registers with the set operator:</p>
<pre class="prettyprint notranslate">
	set I1, 10
	set N1, 3.1415
	set S1, "Hello, Parrot"
</pre>
<p>All Parrot ops have the same format: the name of the operator, the destination register and then the operands.</p>
<h1>Parrot Operations</h1>
<p>There are a variety of operations you can perform. For instance, we can print out the contents of a register or a constant:</p>
<pre class="prettyprint notranslate">
set I1, 10
print "The contents of register I1 is: "
print I1
print "\n"
</pre>
<p>The above instructions will result in <i>The contents of register I1 is: 10</i></p>
<p>We can perform mathematical operations on registers:</p>
<pre class="prettyprint notranslate">
# Add the contents of I2 to the contents of I1
add I1, I1, I2
# Multiply I2 by I4 and store in I3
mul I3, I2, I4
# Increment I1 by one
inc I1
# Decrement N3 by 1.5
dec N3, 1.5
</pre>
<p>We can even perform some simple string manipulation:</p>
<pre class="prettyprint notranslate">
set S1, "fish"
set S2, "bone"
concat S1, S2       # S1 is now "fishbone"
set S3, "w"
substr S4, S1, 1, 7
concat S3, S4       # S3 is now "wishbone"
length I1, S3       # I1 is now 8
</pre>
<h1>Parrot Branches</h1>
<p>Code gets a little boring without flow control; for starters, Parrot knows about branching and labels. The branch op is equivalent to Perl's goto:</p>
<pre class="prettyprint notranslate">
         branch TERRY
JOHN:    print "fjords\n"
         branch END
MICHAEL: print " pining"
         branch GRAHAM
TERRY:   print "It's"
         branch MICHAEL
GRAHAM:  print " for the "
         branch JOHN
END:     end
</pre>
<p>It can also perform simple tests to see whether a register contains a true value:</p>
<pre class="prettyprint notranslate">
	      set I1, 12
         set I2, 5
         mod I3, I2, I2
         if I3, REMAIND, DIVISOR
REMAIND: print "5 divides 12 with remainder "
         print I3
         branch DONE
DIVISOR: print "5 is an integer divisor of 12"
DONE:    print "\n"
         end
</pre>
<p>Here's what that would look like in Perl, for comparison:</p>
<pre class="prettyprint notranslate">
    $i1 = 12;
    $i2 = 5;
    $i3 = $i1 % $i2;
    if ($i3) {
      print "5 divides 12 with remainder ";
      print $i3;
    } else {
      print "5 is an integer divisor of 12";
    }
    print "\n";
    exit;
</pre> 
<h2>Parrot Operator</h2>
<p>We have the full range of numeric comparators: eq, ne, lt, gt, le and ge. Note that you can't use these operators on arguments of disparate types; you may even need to add the suffix _i or _n to the op, to tell it what type of argument you are using, although the assembler ought to divine this for you, by the time you read this.</p>
<h1>Parrot Programming Examples</h1>
<p>Parrot programing is similar to assembly language programing  and you get a chance to work at lower level. Here is the list of programming examples to make you aware of the various aspects of Parrot Programming.</p>
<ul class="list">
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_hello_world" >Classic Hello world!</a></li>
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_registers" >Using registers</a></li>
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_squares" >Summing squares</a></li>
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_fibonacci" >Fibonacci Numbers</a></li>
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_factorial" >Computing factorial</a></li>
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_pbc" >Compiling to PBC</a></li>
<li><a target="_top" href="/parrot/parrot_examples.htm#parrot_pir" >PIR vs. PASM </a></li>
</ul>
<h2><a name="parrot_hello_world">Classic Hello world!</a></h2>
<p>Create a file called hello.pir that contains the following code:</p>
<pre class="prettyprint notranslate">
  .sub _main
      print "Hello world!\n"
      end
  .end
</pre>
<p>Then run it by typing:</p>
<pre class="prettyprint notranslate">
  parrot hello.pir
</pre>
<p>As expected, this will display the text 'Hello world!' on the console, followed by a new line (due to the \n).</p>
<p>In this above example, '.sub _main' states that the instructions that follow make up a subroutine named '_main', until a '.end' is encountered. The second line contains the print instruction. In this case, we are calling the variant of the instruction that accepts a constant string. The assembler takes care of deciding which variant of the instruction to use for us. The third line contains the 'end' instruction, which causes the interpreter to terminate.</p>
<h2><a name="parrot_registers">Using Registers</a></h2>
<p>We can modify hello.pir to first store the string Hello world!\n in a register and then use that register with the print instruction.</p>
<pre class="prettyprint notranslate">
  .sub _main
      set S1, "Hello world!\n"
      print S1
      end
  .end
</pre>
<p>Here we have stated exactly which register to use. However, by replacing S1 with $S1 we can delegate the choice of which register to use to Parrot. It is also possible to use an = notation instead of writing the set instruction.</p>
<pre class="prettyprint notranslate">
  .sub _main
      $S0 = "Hello world!\n"
      print $S0
      end
  .end
</pre>
<p>To make PIR even more readable, named registers can be used. These are later mapped to real numbered registers.</p>
<pre class="prettyprint notranslate">
  .sub _main
      .local string hello
      hello = "Hello world!\n"
      print hello
      end
  .end
</pre>
<p>The '.local' directive indicates that the named register is only needed inside the current compilation unit (that is, between .sub and .end). Following '.local' is a type. This can be int (for I registers), float (for N registers), string (for S registers), pmc (for P registers) or the name of a PMC type.</p>
<h2><a name="parrot_squares">Summing squares</a></h2>
<p>This example introduces some more instructions and PIR syntax. Lines starting with a # are comments.</P>
<pre class="prettyprint notranslate">
  .sub _main
      # State the number of squares to sum.
      .local int maxnum
      maxnum = 10

      # Some named registers we'll use. 
      # Note how we can declare many
      # registers of the same type on one line.
      .local int i, total, temp
      total = 0

      # Loop to do the sum.
      i = 1
  loop:
      temp = i * i
      total += temp
      inc i
      if i &lt;= maxnum goto loop

      # Output result.
      print "The sum of the first "
      print maxnum
      print " squares is "
      print total
      print ".\n"
      end
  .end
</pre>
<p>PIR provides a bit of syntactic sugar that makes it look more high level than assembly. For example:</p>
<pre class="prettyprint notranslate">
  temp = i * i
</pre>
<p>Is just another way of writing the more assembly-ish:</p>
<pre class="prettyprint notranslate">
  mul temp, i, i
</pre>
<p>And:</p>
<pre class="prettyprint notranslate">
 if i &lt;= maxnum goto loop
</pre>
<p>Is the same as:</p>
<pre class="prettyprint notranslate">
le i, maxnum, loop
</pre>
<p>And:</p>
<pre class="prettyprint notranslate">
  total += temp
</pre>
<p>Is the same as:</p>
<pre class="prettyprint notranslate">
add total, temp
</pre>
<p>As a rule, whenever a Parrot instruction modifies the contents of a register, that will be the first register when writing the instruction in assembly form.</p>
<p>As is usual in assembly languages, loops and selections are implemented in terms of conditional branch statements and labels, as shown above. Assembly programming is one place where using goto is not a bad form!</p>
<h2><a name="parrot_fibonacci">Fibonacci Numbers</a></h2>
<p>The Fibonacci series is defined like this: take two numbers, 1 and 1. Then repeatedly add together the last two numbers in the series to make the next one: 1, 1, 2, 3, 5, 8, 13, and so on. The Fibonacci number fib(n) is the n'th number in the series. Here's a simple Parrot assembler program that finds the first 20 Fibonacci numbers:</p>
<pre class="prettyprint notranslate">
# Some simple code to print some Fibonacci numbers

        print   "The first 20 fibonacci numbers are:\n"
        set     I1, 0
        set     I2, 20
        set     I3, 1
        set     I4, 1
REDO:   eq      I1, I2, DONE, NEXT
NEXT:   set     I5, I4
        add     I4, I3, I4
        set     I3, I5
        print   I3
        print   "\n"
        inc     I1
        branch  REDO
DONE:   end
</pre>
<p>This is the equivalent code in Perl:</p>
<pre class="prettyprint notranslate">
        print "The first 20 fibonacci numbers are:\n";
        my $i = 0;
        my $target = 20;
        my $a = 1;
        my $b = 1;
        until ($i == $target) {
           my $num = $b;
           $b += $a;
           $a = $num;
           print $a,"\n";
           $i++;
        }
</pre>
<p><b>NOTE:</b> As a fine point of interest, one of the shortest and certainly the most beautiful ways of printing out a Fibonacci series in Perl is perl -le '$b=1; print $a+=$b while print $b+=$a'.</p>
<h2><a name="parrot_factorial">Recursively computing factorial</a></h2>
<p>In this example we define a factorial function and recursively call it to compute factorial.</p>
<pre class="prettyprint notranslate">
 .sub _fact
      # Get input parameter.
      .param int n

      # return (n &gt; 1 ? n * _fact(n - 1) : 1)
      .local int result

      if n &gt; 1 goto recurse
      result = 1
      goto return

  recurse:
      $I0 = n - 1
      result = _fact($I0)
      result *= n

  return:
      .return (result)
  .end


  .sub _main :main
      .local int f, i

      # We'll do factorial 0 to 10.
      i = 0
  loop:
      f = _fact(i)

      print "Factorial of "
      print i
      print " is "
      print f
      print ".\n"

      inc i
      if i &lt;= 10 goto loop

      # That's it.
      end
  .end
</pre>
<p>Let's look at the _fact sub first. A point that was glossed over earlier is why the names of subroutines, all start with an underscore! This is done simply as a way of showing that the label is global rather than scoped to a particular subroutine. This is significant as the label is then visible to other subroutines.</p>
<p>The first line, .param int n, specifies that this subroutine takes one integer parameter and that we'd like to refer to the register it was passed in by the name n for the rest of the sub.</p>
<p>Much of what follows has been seen in previous examples, apart from the line reading:</p>
<pre class="prettyprint notranslate">
result = _fact($I0)
</pre>
<p>This single line of PIR actually represents quite a few lines of PASM. First, the value in register $I0 is moved into the appropriate register for it to be received as an integer parameter by the _fact function. Other calling related registers are then set up, followed by _fact being invoked. Then, once _fact returns, the value returned by _fact is placed into the register given the name result.</p>
<p>Right before the .end of the _fact sub, a .return directive is used to ensure the value held in the register; named result is placed into the correct register for it to be seen as a return value by the code calling the sub.</p>
<p>The call to _fact in main works in just the same way as the recursive call to _fact within the sub _fact itself. The only remaining bit of new syntax is the :main, written after .sub _main. By default, PIR assumes that execution begins with the first sub in the file. This behavior can be changed by marking the sub to start in with :main.</p>
<h2><a name="parrot_pbc">Compiling to PBC</a></h2>
<p>To compile PIR to bytecode, use the -o flag and specify an output file with the extension .pbc.</p>
<pre class="prettyprint notranslate">
 parrot -o factorial.pbc factorial.pir
</pre>
<h2><a name="parrot_pir">PIR vs. PASM</a></h2>
<p>PIR can be turned into PASM by running:</p>
<pre class="prettyprint notranslate">
parrot -o hello.pasm hello.pir
</pre>
<p>The PASM for the final example looks like this:</p>
<pre class="prettyprint notranslate">
  _main:
      set S30, "Hello world!\n"
      print S30
      end
</pre>
<p>PASM does not handle register allocation or provide support for named registers. It also does not have the .sub and .end directives, instead replacing them with a label at the start of the instructions.</p>






<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/parrot/parrot_examples.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/parrot/parrot_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
