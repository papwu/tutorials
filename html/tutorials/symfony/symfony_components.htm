<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Symfony - Components</title>
<meta charset="utf-8">
<meta name="description" content="Symfony - Components - As discussed earlier, Symfony components are standalone PHP library providing a specific feature, which can be used in any PHP application. Useful new component"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/symfony/symfony_components.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#0cadd5;
}
a.demo {
    background:#0cadd5;
}
li.heading {
    background:#0cadd5;
}
.course-box{background:#0cadd5}
.home-intro-sub p{color:#0cadd5}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/symfony/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/symfony/images/symfony-mini-logo.jpg" alt="Symfony Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Symfony Tutorial</li>
<li><a href="/symfony/index.htm">Symfony - Home</a></li>
<li><a href="/symfony/symfony_introduction.htm">Symfony - Introduction</a></li>
<li><a href="/symfony/symfony_installation.htm">Symfony - Installation</a></li>
<li><a href="/symfony/symfony_architecture.htm">Symfony - Architecture</a></li>
<li><a href="/symfony/symfony_components.htm">Symfony - Components</a></li>
<li><a href="/symfony/symfony_service_container.htm">Symfony - Service Container</a></li>
<li><a href="/symfony/symfony_events_eventlistener.htm">Symfony - Events &amp; EventListener</a></li>
<li><a href="/symfony/symfony_expression.htm">Symfony - Expression</a></li>
<li><a href="/symfony/symfony_bundles.htm">Symfony -  Bundles</a></li>
<li><a href="/symfony/symfony_creating_simple_web_application.htm">Creating a Simple Web Application</a></li>
<li><a href="/symfony/symfony_controllers.htm">Symfony - Controllers</a></li>
<li><a href="/symfony/symfony_routing.htm">Symfony - Routing</a></li>
<li><a href="/symfony/symfony_view_engine.htm">Symfony - View Engine</a></li>
<li><a href="/symfony/symfony_doctrine_orm.htm">Symfony - Doctrine ORM</a></li>
<li><a href="/symfony/symfony_forms.htm">Symfony - Forms </a></li>
<li><a href="/symfony/symfony_validation.htm">Symfony - Validation</a></li>
<li><a href="/symfony/symfony_file_uploading.htm">Symfony - File Uploading</a></li>
<li><a href="/symfony/symfony_ajax_control.htm">Symfony - Ajax Control</a></li>
<li><a href="/symfony/symfony_cookies_session_management.htm">Cookies &amp; Session Management</a></li>
<li><a href="/symfony/symfony_internationalization.htm">Symfony - Internationalization</a></li>
<li><a href="/symfony/symfony_logging.htm">Symfony - Logging</a></li>
<li><a href="/symfony/symfony_email_management.htm">Symfony - Email Management</a></li>
<li><a href="/symfony/symfony_unit_testing.htm">Symfony - Unit Testing</a></li>
<li><a href="/symfony/symfony_advanced_concepts.htm">Symfony - Advanced Concepts</a></li>
<li><a href="/symfony/symfony_rest_edition.htm">Symfony - REST Edition</a></li>
<li><a href="/symfony/symfony_cmf_edition.htm">Symfony - CMF Edition</a></li>
<li><a href="/symfony/symfony_complete_working_example.htm">Complete Working Example</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Symfony Useful Resources</li>
<li><a href="/symfony/symfony_quick_guide.htm">Symfony - Quick Guide</a></li>
<li><a href="/symfony/symfony_useful_resources.htm">Symfony - Useful Resources</a></li>
<li><a href="/symfony/symfony_discussion.htm">Symfony - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Symfony - Components</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/symfony/symfony_architecture.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/symfony/symfony_service_container.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>As discussed earlier, Symfony components are standalone PHP library providing a specific feature, which can be used in any PHP application. Useful new components are being introduced in each and every release of Symfony. Currently, there are 30+ high quality components in Symfony framework. Let us learn about the usage of Symfony components in this chapter.</p>
<h2>Installing a Symfony Component</h2>
<p>Symfony components can be installed easily using the composer command. Following generic command can be used to install any Symfony component.</p>
<pre class="result notranslate">
cd /path/to/project/dir 
composer require symfony/&lt;component_name&gt; 
</pre>
<p>Let us create a simple php application and try to install <b>Filesystem</b> component.</p>
<p><b>Step 1</b> &minus; Create a folder for the application, <b>filesystem-example</b></p>
<pre class="result notranslate">
cd /path/to/dev/folder 
mdkir filesystem-example 
cd filesystem-example 
</pre>
<p><b>Step 2</b> &minus; Install Filesystem component using the following command.</p>
<pre class="result notranslate">
composer require symfony/filesystem  
</pre>
<p><b>Step 3</b> &minus; Create a file <b>main.php</b> and enter the following code.</p>
<pre class="result notranslate">
&lt;?php 
   require_once __DIR__ . '/vendor/autoload.php'; 
   use Symfony\Component\Filesystem\Filesystem; 
   use Symfony\Component\Filesystem\Exception\IOExceptionInterface; 
   
   $fs = new Filesystem(); 
   try { 
      $fs-&gt;mkdir('./sample-dir'); 
      $fs-&gt;touch('./sample-dir/text.txt'); 
   } catch (IOExceptionInterface $e) { 
      echo $e; 
   } 
?&gt;  
</pre>
<p>The first line is very important, which loads all the necessary classes from all the components installed using the Composer command. The next lines use the Filesystem class.</p>
<p><b>Step 4</b> &minus; Run the application using the following command and it will create a new folder <b>sample-dir</b> and a file <b>test.txt</b> under it.</p>
<pre class="result notranslate">
php main.php
</pre>
<h2>Details of Symfony Components</h2>
<p>Symfony provides components ranging from simple feature, say file system to advanced feature, say events, container technology, and dependency injection. Let us know about all the components one by one in the following sections.</p>
<h3>Filesystem</h3>
<p>Filesystem component provides a basic system command related to files and directories such as file creation, folder creation, file existence, etc. Filesystem component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/filesystem
</pre>
<h3>Finder</h3>
<p>Finder component provides fluent classes to find files and directories in a specified path. It provides an easy way to iterate over the files in a path. Finder component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/finder
</pre>
<h3>Console</h3>
<p>Console component provides various options to easily create commands, which can be executed in a terminal. Symfony uses the <b>Command</b> component extensively to provide various functionalities such as creating a new application, creating a bundle, etc. Even the PHP build in web server can be invoked using Symfony command, <b>php bin/console server:run</b> as seen in the installation section. The <b>Console</b> component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/console
</pre>
<p>Let us create a simple application and create a command, <b>HelloCommand</b> using the <b>Console</b> component and invoke it.</p>
<p><b>Step 1</b> &minus; Create a project using the following command.</p>
<pre class="result notranslate">
cd /path/to/project 
composer require symfony/console 
</pre>
<p><b>Step 2</b> &minus; Create a file <b>main.php</b> and include the following code.</p>
<pre class="prettyprint notranslate">
&lt;?php 
   require __DIR__ . '/vendor/autoload.php'; 
   use Symfony\Component\Console\Application; 
   
   $app = new Application(); 
   $app-&gt;run(); 
?&gt; 
</pre>
<p><b>Application</b> class sets up the necessary functionality of a bare-bone console application.</p>
<p><b>Step 3</b> &minus; Run the application, <b>php main.php</b>, which will produce the following result.</p>
<pre class="result notranslate">
Console Tool  
Usage: 
   command [options] [arguments]  
Options: 
   -h, --help            Display this help message 
   -q, --quiet           Do not output any message 
   -V, --version         Display this application version 
         --ansi            Force ANSI output 
         --no-ansi         Disable ANSI output 
   -n, --no-interaction  Do not ask any interactive question 
   -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 
      2 for more verbose output and 3 for debug  
Available commands: 
   help  Displays help for a command 
   list  Lists commands
</pre>
<p><b>Step 4</b> &minus; Create a class called <b>HelloCommand</b> extending <b>Command</b> class in the <b>main.php</b> itself.</p>
<pre class="result notranslate">
use Symfony\Component\Console\Command\Command; 
use Symfony\Component\Console\Input\InputInterface; 
use Symfony\Component\Console\Output\OutputInterface; 
use Symfony\Component\Console\Input\InputArgument;

class HelloCommand extends Command { 
}
</pre>
<p>The application uses following four classes available in <b>Command</b> component.</p>
<ul class="list">
<li><p><b>Command</b> &minus; Used to create a new command</p></li>
<li><p><b>InputInterface</b> &minus; Used to set user inputs</p></li>
<li><p><b>InputArgument</b> &minus; Used to get user inputs</p></li>
<li><p><b>OutputInterface</b> &minus; Used to print output to the console</p></li>
</ul>
<p><b>step 5</b> &minus; Create a function <b>configure()</b> and set name, description, and help text.</p>
<pre class="prettyprint notranslate">
protected function configure() { 
   $this 
      -&gt;setName('app:hello') 
      -&gt;setDescription('Sample command, hello') 
      -&gt;setHelp('This command is a sample command') 
} 
</pre>
<p><b>step 6</b> &minus; Create an input argument, <b>user</b> for the command and set as mandatory.</p>
<pre class="prettyprint notranslate">
protected function configure() { 
   $this 
      -&gt;setName('app:hello') 
      -&gt;setDescription('Sample command, hello') 
      -&gt;setHelp('This command is a sample command') 
      -&gt;addArgument('name', InputArgument::REQUIRED, 'name of the user'); 
}
</pre>
<p><b>step 7</b> &minus; Create a function <b>execute()</b> with two arguments <b>InputArgument</b> and <b>OutputArgument</b>.</p>
<pre class="prettyprint notranslate">
protected function execute(InputInterface $input, OutputInterface $output) { 
}
</pre>
<p><b>step 8</b> &minus; Use <b>InputArgument</b> to get the user details entered by the user and print it to the console using <b>OutputArgument</b>.</p>
<pre class="prettyprint notranslate">
protected function execute(InputInterface $input, OutputInterface $output) { 
   $name = $input-&gt;getArgument('name'); 
   $output-&gt;writeln('Hello, ' . $name); 
}
</pre>
<p><b>step 9</b> &minus; Register the <b>HelloCommand</b> into the application using the <b>add</b> method of <b>Application</b> class.</p>
<pre class="result notranslate">
$app-&gt;add(new HelloCommand()); 
</pre>
<p>The complete application is as follows.</p>
<pre class="prettyprint notranslate">
&lt;?php 
   require __DIR__ . '/vendor/autoload.php'; 
   use Symfony\Component\Console\Application; 
   use Symfony\Component\Console\Command\Command; 
   use Symfony\Component\Console\Input\InputInterface; 
   use Symfony\Component\Console\Output\OutputInterface; 
   use Symfony\Component\Console\Input\InputArgument;  
   
   class HelloCommand extends Command { 
      protected function configure() { 
         $this 
            -&gt;setName('app:hello') 
            -&gt;setDescription('Sample command, hello') 
            -&gt;setHelp('This command is a sample command') 
            -&gt;addArgument('name', InputArgument::REQUIRED, 'name of the user'); 
      }  
      protected function execute(InputInterface $input, OutputInterface $output) { 
         $name = $input-&gt;getArgument('name'); 
         $output-&gt;writeln('Hello, ' . $name);
      }  
      $app = new Application(); 
      $app-&gt;add(new HelloCommand()); 
      $app-&gt;run(); 
   }         
?&gt;      
</pre>
<p><b>Step 10</b> &minus; Now, execute the application using the following command and the result will be Hello, Jon as expected.</p>
<pre class="result notranslate">
php main.php app:hello Jon
</pre>
<p>Symfony comes with a pre-built binary called <b>console</b> in the bin directory of any Symfony web application, which can be used to invoke the commands in an application.</p>
<h3>Process</h3>
<p>Process component provides options to run any system command in a sub-process, in a safe and efficient manner. Process component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/process
</pre>
<h3>ClassLoader</h3>
<p>ClassLoader component provides implementation for both <b>PSR-0</b> and <b>PSR-4</b> class loader standard. It can be used to auto-load the classes. It will be depreciated in the near future. Composer-based class loader is preferred over this component. ClassLoader component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/class-loader
</pre>
<h3>PropertyAccess</h3>
<p>PropertyAccess component provides various options to read and write an object and array details using the string notation. For example, an array <b>Product</b> with key <b>price</b> can be accessed dynamically using <b>[price]</b> string.</p>
<pre class="prettyprint notranslate">
$product = array( 
   'name' =&gt; 'Cake' 
   'price' =&gt; 10 
);  
var priceObj = $propertyAccesserObj-&gt;getValue($product, '[price]');
</pre>
<p>PropertyAccess component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/property-access 
</pre>
<h3>PropertyInfo</h3>
<p>PropertyInfo component is similar to PropertyAccess component, however it only works with PHP objects and provides much more functionality.</p>
<pre class="prettyprint notranslate">
class Product { 
   private $name = 'Cake'; 
   private $price = 10;  
   
   public function getName() { 
      return $this-&gt;name; 
   }  
   public function getPrice() { 
      return $this-&gt;price; 
   } 
}  
$class = Product::class; 
$properties = $propertyInfoObj->getProperties($class);  
/* 
   Example Result 
   -------------- 
   array(2) { 
      [0] =&gt; string(4) "name" 
      [1] =&gt; string(5) "price" 
   } 
*/
</pre>
<p>PropertyInfo component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/property-info
</pre>
<h3>EventDispatcher</h3>
<p>EventDispatcher component provides an event-based programming in PHP. It enables the objects to communicate with each other by dispatching events and listening to them. We will learn how to create event and listen to them in the Events and Event Listener chapter.</p>
<p>EventDispatcher component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/event-dispatcher
</pre>
<h3>DependencyInjection</h3>
<p>DependencyInjection component provides an easy and efficient mechanism to create an object with its dependency. When a project grows, it features a lot of classes with deep dependency, which needs to be handled correctly. Otherwise, the project fails. DependencyInjection provides a simple and robust container to handle the dependency. We will learn about the containers and the dependency injection concept in Service Container chapter.</p>
<p>DependencyInjection component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/dependency-injection
</pre>
<h3>Serializer</h3>
<p>Serializer component provides an option to convert a PHP object into a specific format such as XML, JSON, Binary, etc., and then allows it to convert it back into an original object without any data loss.</p>
<p>Serializer component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/serializer
</pre>
<h3>Config</h3>
<p>Config component provides options to load, parse, read, and validate configurations of type XML, YAML, PHP and ini. It provides various options to load configuration details from database as well. This is one of the important components useful in configuring web application in a clear and concise manner. Config component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/config
</pre>
<h3>ExpressionLanguage</h3>
<p>ExpessionLanguage component provides a full-fledged expression engine. Expressions are one-liner intended to return a value. The expression engine enables to easily compile, parse, and get the value from an expression. It enables one or more expression to be used in a configuration environment (file) by a non-PHP programmer, say a system administrator. ExpressionLanguage component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/expression-language
</pre>
<h3>OptionsResolver</h3>
<p>OptionsResolver component provides a way to validate the option system used in our system. For example, database setting is placed in an array, dboption with host, username, password, etc., as keys. You need to validate the entries before using it to connect to a database. OptionsResolver simplifies this task by providing a simple class OptionsResolver and a method resolver, which resolves the database setting and if there is any validation issue, it will report it.</p>
<pre class="prettyprint notranslate">
$options = array( 
   'host'     =&gt; '&lt;db_host&gt;', 
   'username' =&gt; '&lt;db_user&gt;', 
   'password' =&gt; '&lt;db_password&gt;', 
);  
$resolver = new OptionsResolver(); 
$resolver-&gt;setDefaults(array( 
   'host'     =&gt; '&lt;default_db_host&gt;', 
   'username' =&gt; '&lt;default_db_user&gt;', 
   'password' =&gt; '&lt;default_db_password&gt;', 
)); 
$resolved_options = $resolver-&gt;resolve($options);
</pre>
<p>OptionsResolver component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/options-resolver 
</pre>
<h3>Dotenv</h3>
<p>Dotenv component provides various options to parse .env files and the variable defined in them to be accessible via <b>getenv(), $_ENV</b>, or <b>$_SERVER</b>. Dotenv component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/dotenv
</pre>
<h3>Cache</h3>
<p>Cache component provides an extended <b>PSR-6</b> implementation. It can be used to add cache functionality to our web application. Since it follows <b>PSR-6</b>, it is easy to get started and it can be easily used in place of another PSR-6 based cache component. Cache component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/cache 
</pre>
<h3>Intl</h3>
<p>Intl component is the replacement library for C Intl extension. Intl component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/intl
</pre>
<h3>Translation</h3>
<p>Translation component provides various options to internationalize our application. Normally, the translation details of different languages will be stored in a file, one file per language, and it will be loaded dynamically during runtime of the application. There are different formats to write a translation file. Translation component provides various options to load any type of format, such as plain PHP file, CSV, ini, Json, Yaml, ICU Resource file, etc. Translation component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/translation
</pre>
<h3>Workflow</h3>
<p>Workflow component provides advanced tools to process a finite state machine. By providing this functionality in a simple and object-oriented way, Workflow component enables advanced programming in PHP with relative ease. We will learn about it in detail in the Advanced Concept chapter.</p>
<p>Workflow component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/workflow 
</pre>
<h3>Yaml</h3>
<p>Yaml component provides an option that parses the YAML file format and converts it into PHP arrays. It also able to write YAML file from plain php array. Yaml component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/yaml
</pre>
<h3>Ldap</h3>
<p>Ldap component provides PHP classes to connect to a LDAP or Active directory server and authenticate the user against it. It provides an option to connect to a Windows domain controller. Ldap component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/ldap
</pre>
<h3>Debug</h3>
<p>Debug component provides various options to enable debugging in PHP environment. Normally, debugging PHP code is hard but the debug component provides simple classes to ease the process of debugging and make it clean and structured. Debug component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/debug
</pre>
<h3>Stopwatch</h3>
<p>Stopwatch component provides Stopwatch class to profile our PHP code. A simple usage is as follows.</p>
<pre class="prettyprint notranslate">
use Symfony\Component\Stopwatch\Stopwatch; 
$stopwatch = new Stopwatch(); 
$stopwatch-&gt;start('somename');  

// our code to profile 
$profiled_data = $stopwatch-&gt;stop('somename');  
echo $profiled_data-&gt;getPeriods()
</pre>
<p>Stopwatch component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/stopwatch
</pre>
<h3>VarDumper</h3>
<p>VarDumper component provides better <b>dump()</b> function. Just include the VarDumper component and use the dump function to get the improved functionality. VarDumper component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/var-dumper
</pre>
<h3>BrowserKit</h3>
<p>BrowserKit component provides an abstract browser client interface. It can be used to test web application programmatically. For example, it can request a form, enter the sample data and submit it to find any issue in the form programmatically. BrowserKit component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/browser-kit
</pre>
<h3>PHPUnit Bridge</h3>
<p>PHPUnit Bridge component provides many options to improve the PHPUnit testing environment. PHPUnit Bridge component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/phpunit-bridge
</pre>
<h3>Asset</h3>
<p>Asset component provides a generic asset handling in a web application. It generates URL for the assets such as CSS, HTML, JavaScript and also performs version maintenance. We will check the asset component in detail in View Engine chapter. Asset component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/asset
</pre>
<h3>CssSelector</h3>
<p>CssSelector component provides an option to convert CSS based Selectors into XPath expression. A web developer knows the CSS based Selectors expression more than XPath expression, but the most efficient expression to find an element in HTML and XML document is <b>XPath Expression</b>.</p>
<p>CssSelector enables the developer to write the expression in <i>CSS Selectors</i>, however, the component converts it to XPath expression before executing it. Thus, the developer has an advantage of simplicity of CSS Selectors and efficiency of XPath expression.</p>
<p>CssSelector component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/css-selector
</pre>
<h3>DomCrawler</h3>
<p>DomCrawler component provides various options to find the element in HTML and XML document using DOM concept. It also provides option to use XPath expression to find an element. DomCrawler component can be used along with CssSelector component to use CSS selectors instead of XPath expression. DomCrawler component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/dom-crawler
</pre>
<h3>Form</h3>
<p>Form component enables easy creation of form in a web application. We will learn form programming in detail in Form chapter. Form component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/form
</pre>
<h3>HttpFoundation</h3>
<p>HttpFoundation component provides an object-oriented layer to the HTTP specification. By default, PHP provides HTTP request and response details as array-based object such as <b>$_GET, $_POST, $_FILES, $_SESSION</b>, etc. HTTP based functionality such as setting a cookie can be done using simple, plain old function <b>setCookie()</b>. HttpFoundation provides all HTTP related functionality in a small set of classes like Request, Response, RedirectResponse, etc., We will learn about these classes in the later chapters.</p>
<p>HttpFoundation component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/http-foundation
</pre>
<h3>HttpKernel</h3>
<p>HttpKernel component is the core component in the Symfony web setup. It provides all the functionalities required for a web application - from receiving the <b>Request</b> object to sending back the <b>Response</b> object. The complete architecture of the Symfony web application is provided by HttpKernel as discussed in the architecture of a Symfony web framework.</p>
<p>HttpKernel component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/http-kernel
</pre>
<h3>Routing</h3>
<p>Routing component maps the HTTP request to a pre-defined set of configuration variables. Routing decides which part of our application should handle a request. We will learn more about the routing in Routing chapter.</p>
<p>Routing component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/filesystem
</pre>
<h3>Templating</h3>
<p>Templating component provides the necessary infrastructure to build an efficient template system. Symfony uses the Templating component for its View engine implementation. We will learn more about Templating component in View engine chapter.</p>
<p>Templating component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/templating
</pre>
<h3>Validator</h3>
<p>Validator component provides an implementation of <b>JSR-303 Bean Validation Specification</b>. It can be used to validate a form in a web environment. We will learn more about Validator in Validation chapter.</p>
<p>Validator component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/validator
</pre>
<h3>Security</h3>
<p>Security component provides complete security system for our web application, be it HTTP basic authentication, HTTP digest authentication, interactive form based authentication, X.509 certification login, etc. It also provides authorization mechanism based on the user role through in-built ACL system. We will learn more in detail in the Advanced Concept chapter.</p>
<p>Security component can be installed using the following command.</p>
<pre class="result notranslate">
composer require symfony/security
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/symfony/symfony_architecture.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/symfony/symfony_service_container.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
