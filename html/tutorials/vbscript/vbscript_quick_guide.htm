<!DOCTYPE html>
<html lang="en-US">
<head>
<title>VBScript - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="VBScript - Quick Guide - VBScript stands for Visual Basic Scripting that forms a subset of Visual Basic for Applications (VBA). VBA is a product of Microsoft which is included NOT only "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/vbscript/vbscript_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#57b846;
}
a.demo {
    background:#57b846;
}
li.heading {
    background:#57b846;
}
.course-box{background:#57b846}
.home-intro-sub p{color:#57b846}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/vbscript/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/vbscript/images/vbscript-mini-logo.jpg" alt="VBScript Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">VBScript Tutorial</li>
<li><a href="/vbscript/index.htm">VBScript - Home</a></li>
<li><a href="/vbscript/vbscript_overview.htm">VBScript - Overview</a></li>
<li><a href="/vbscript/vbscript_syntax.htm">VBScript - Syntax</a></li>
<li><a href="/vbscript/vbscript_enabling.htm">VBScript - Enabling</a></li>
<li><a href="/vbscript/vbscript_placement.htm">VBScript - Placement</a></li>
<li><a href="/vbscript/vbscript_variables.htm">VBScript - Variables</a></li>
<li><a href="/vbscript/vbscript_constants.htm">VBScript - Constants</a></li>
<li><a href="/vbscript/vbscript_operators.htm">VBScript - Operators</a></li>
<li><a href="/vbscript/vbscript_decisions.htm">VBScript - Decisions</a></li>
<li><a href="/vbscript/vbscript_loops.htm">VBScript - Loops</a></li>
<li><a href="/vbscript/vbscript_events.htm">VBScript - Events</a></li>
<li><a href="/vbscript/vbscript_cookies.htm">VBScript - Cookies</a></li>
<li><a href="/vbscript/vbscript_numbers.htm">VBScript - Numbers</a></li>
<li><a href="/vbscript/vbscript_strings.htm">VBScript - Strings</a></li>
<li><a href="/vbscript/vbscript_arrays.htm">VBScript - Arrays</a></li>
<li><a href="/vbscript/vbscript_date.htm">VBScript - Date</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">VBScript Advanced</li>
<li><a href="/vbscript/vbscript_procedures.htm">VBScript - Procedures</a></li>
<li><a href="/vbscript/vbscript_dialog_boxes.htm">VBScript - Dialog Boxes</a></li>
<li><a href="/vbscript/vbscript_object_oriented.htm">VBScript - Object Oriented</a></li>
<li><a href="/vbscript/vbscript_reg_expressions.htm">VBScript - Reg Expressions</a></li>
<li><a href="/vbscript/vbscript_error_handling.htm">VBScript - Error Handling</a></li>
<li><a href="/vbscript/vbscript_miscellaneous_statements.htm">VBScript - Misc Statements</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">VBScript Useful Resources</li>
<li><a href="/vbscript/vbscript_questions_answers.htm">VBScript - Questions and Answers</a></li>
<li><a href="/vbscript/vbscript_quick_guide.htm">VBScript - Quick Guide</a></li>
<li><a href="/vbscript/vbscript_useful_resources.htm">VBScript - Useful Resources</a></li>
<li><a href="/vbscript/vbscript_discussion.htm">VBScript - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>VBScript - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/vbscript/vbscript_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/vbscript/vbscript_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>VBScript - Overview</h1>
<p><b>VB</b>Script stands for <b>V</b>isual <b>B</b>asic Scripting that forms a subset of Visual Basic for Applications (VBA). VBA is a product of Microsoft which is included NOT only in other Microsoft products such as MS Project and MS Office but also in Third Party tools such as AUTO CAD.</p>
<h2>Features of VBScript</h2>
<ul class="list">
<li><p>VBScript is a lightweight scripting language, which has a lightning fast interpreter.</p></li>
<li><p>VBScript, for the most part, is case insensitive. It has a very simple syntax, easy to learn and to implement.</p></li>
<li><p>Unlike C++ or Java, VBScript is an object-based scripting language and NOT an Object-Oriented Programming language.</p></li>
<li><p>It uses Component Object Model <b>(COM)</b> in order to access the elements of the environment in which it is executing.</p></li>
<li><p>Successful execution of VBScript can happen only if it is executed in Host Environment such as Internet Explorer <b>(IE)</b>, Internet Information Services <b>(IIS)</b> and Windows Scripting Host <b>(WSH)</b></p></li>
</ul>
<h2>VBscript – Version History and Uses</h2>
<p>VBScript was introduced by Microsoft way back in 1996 and its first version was 1.0. The current stable version of VBScript is 5.8, which is available as part of IE8 or Windows 7. The VBScript usage areas are aplenty and not restricted to the below list.</p>
<ul class="list">
<li><p>VBScript is used as a scripting language in one of the popular Automation testing tools – Quick Test Professional abbreviated as <b>QTP</b></p></li>
<li><p>Windows Scripting Host, which is used mostly by Windows System administrators for automating the Windows Desktop.</p></li>
<li><p>Active Server Pages <b>(ASP)</b>, a server side scripting environment for creating dynamic webpages which uses VBScript or Java Script.</p></li>
<li><p>VBScript is used for Client side scripting in Microsoft Internet Explorer. </p></li>
<li><p>Microsoft Outlook Forms usually runs on VBScript; however, the application level programming relies on VBA (Outlook 2000 onwards).</p></li>
</ul>
<h2>Disadvantages</h2>
<ul class="list">
<li><p>VBscript is used only by IE Browsers. Other browsers such as Chrome, Firefox DONOT Support VBScript. Hence, JavaScript is preferred over VBScript.</p></li>
<li><p>VBScript has a Limited command line support.</p></li>
<li><p>Since there is no development environment available by default, debugging is difficult.</p></li>
</ul>
<h2>Where VBScript is Today ?</h2>
<p>The current version of VBScript is 5.8, and with the recent development of .NET framework, Microsoft has decided to provide future support of VBScript within ASP.NET for web development. Hence, there will NOT be any more new versions of VBScript engine but the entire defect fixes and security issues are being addressed by the Microsoft sustaining Engineering Team. However, VBScript engine would be shipped as part of all Microsoft Windows and IIS by default.</p>
<h1>VBScript - Syntax</h1>
<h2>Your First VBScript</h2>
<p>Let us write a VBScript to print out "Hello World".</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         document.write("Hello World!")
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>In the above example, we called a function <i>document.write</i>, which writes a string into the HTML document. This function can be used to write text, HTML or both. So, above code will display following result &minus;</p>
<pre class="result notranslate">
Hello World!
</pre>
<h2>Whitespace and Line Breaks</h2>
<p>VBScript ignores spaces, tabs, and newlines that appear within VBScript programs. One can use spaces, tabs, and newlines freely within the program, so you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.</p>
<h2>Formatting</h2>
<p>VBScript is based on Microsoft's Visual Basic. Unlike JavaScript, no statement terminators such as semicolon is used to terminate a particular statement.</p>
<h3>Single Line Syntax</h3>
<p>Colons are used when two or more lines of VBScript ought to be written in a single line. Hence, in VBScript, Colons act as a line separator.</p>
<pre class="result notranslate">
&lt;script language = "vbscript" type = "text/vbscript"&gt;
   var1 = 10 : var2 = 20
&lt;/script&gt;
</pre>
<h3>Multiple Line Syntax</h3>
<p>When a statement in VBScript is lengthy and if user wishes to break it into multiple lines, then the user has to use underscore "_". This improves the readability of the code. The following example illustrates how to work with multiple lines.</p>
<pre class="prettyprint notranslate">
&lt;script language = "vbscript" type = "text/vbscript"&gt;
   var1 = 10 
   var2 = 20
   Sum = var1 + var2  
   document.write("The Sum of two numbers"&amp;_"var1 and var2 is " &amp; Sum)
&lt;/script&gt;
</pre>
<h2>Reserved Words</h2>
<p>The following list shows the reserved words in VBScript. These reserved words SHOULD NOT be used as a constant or variable or any other identifier names.</p>
<table class="table table-bordered">
<tr>
<td>Loop</td>
<td>LSet</td>
<td>Me</td>
</tr>
<tr>
<td>Mod</td>
<td>New</td>
<td>Next</td>
</tr>
<tr>
<td>Not</td>
<td>Nothing</td>
<td>Null</td>
</tr>
<tr>
<td>On</td>
<td>Option</td>
<td>Optional</td>
</tr>
<tr>
<td>Or</td>
<td>ParamArray</td>
<td>Preserve</td>
</tr>
<tr>
<td>Private</td>
<td>Public</td>
<td>RaiseEvent</td>
</tr>
<tr>
<td>ReDim</td>
<td>Rem</td>
<td>Resume</td>
</tr>
<tr>
<td>RSet</td>
<td>Select</td>
<td>Set</td>
</tr>
<tr>
<td>Shared</td>
<td>Single</td>
<td>Static</td>
</tr>
<tr>
<td>Stop</td>
<td>Sub</td>
<td>Then</td>
</tr>
<tr>
<td>To</td>
<td>True</td>
<td>Type</td>
</tr>
<tr>
<td>And</td>
<td>As</td>
<td>Boolean</td>
</tr>
<tr>
<td>ByRef</td>
<td>Byte</td>
<td>ByVal</td>
</tr>
<tr>
<td>Call</td>
<td>Case</td>
<td>Class</td>
</tr>
<tr>
<td>Const</td>
<td>Currency</td>
<td>Debug</td>
</tr>
<tr>
<td>Dim</td>
<td>Do</td>
<td>Double</td>
</tr>
<tr>
<td>Each</td>
<td>Else</td>
<td>ElseIf</td>
</tr>
<tr>
<td>Empty</td>
<td>End</td>
<td>EndIf</td>
</tr>
<tr>
<td>Enum</td>
<td>Eqv</td>
<td>Event</td>
</tr>
<tr>
<td>Exit</td>
<td>False</td>
<td>For</td>
</tr>
<tr>
<td>Function</td>
<td>Get</td>
<td>GoTo</td>
</tr>
<tr>
<td>If</td>
<td>Imp</td>
<td>Implements</td>
</tr>
<tr>
<td>In</td>
<td>Integer</td>
<td>Is</td>
</tr>
<tr>
<td>Let</td>
<td>Like</td>
<td>Long</td>
</tr>
<tr>
<td>TypeOf</td>
<td>Until</td>
<td>Variant</td>
</tr>
<tr>
<td>Wend</td>
<td>While</td>
<td>With</td>
</tr>
<tr>
<td>Xor</td>
<td>Eval</td>
<td>Execute</td>
</tr>
<tr>
<td>Msgbox</td>
<td>Erase</td>
<td>ExecuteGlobal</td>
</tr>
<tr>
<td>Option Explicit</td>
<td>Randomize</td>
<td>SendKeys</td>
</tr>
</table>
<h2>Case Sensitivity</h2>
<p>VBScript is a <b>case-insensitive language</b>. This means that language keywords, variables, function names and any other identifiers need NOT be typed with a consistent capitalization of letters. So identifiers int_counter, INT_Counter and INT_COUNTER have the same meaning within VBScript.</p>
<h2>Comments in VBScript</h2>
<p>Comments are used to document the program logic and the user information with which other programmers can seamlessly work on the same code in future. It can include information such as developed by, modified by and it can also include incorporated logic. Comments are ignored by the interpreter while execution. Comments in VBScript are denoted by two methods.</p>
<p><b>1. Any statement that starts with a Single Quote (‘) is treated as comment.</b></p> 
<p>Following is the example &minus;</p>
<pre class="prettyprint notranslate">
&lt;script language = "vbscript" type = "text/vbscript"&gt;
   &lt;!—
      ' This Script is invoked after successful login
      ' Written by : TutorialsPoint
      ' Return Value : True / False
   //- &gt;
&lt;/script&gt;
</pre>
<p><b>2. Any statement that starts with the keyword “REM”.</b></p> 
<p>Following is the example &minus;</p>
<pre class="prettyprint notranslate">
&lt;script language = "vbscript" type = "text/vbscript"&gt;
   &lt;!—
      REM This Script is written to Validate the Entered Input
      REM Modified by  : Tutorials point/user2
   //- &gt;
&lt;/script&gt;
</pre>
<h1>Enabling VBScript in Browsers</h1>
<p>Not all the modern browsers support VBScript. VBScript is supported just by Microsoft's Internet Explorer while other browsers (Firefox and Chrome) support just JavaScript. Hence, developers normally prefer JavaScript over VBScript.</p>
<p>Though Internet Explorer (IE) supports VBScript, you may need to enable or disable this feature manually. This tutorial will make you aware of the procedure of enabling and disabling VBScript support in Internet Explorer.</p>
<h2>VBScript in Internet Explorer</h2>
<p>Here are simple steps to turn on or turn off VBScript in your Internet Explorer &minus;</p>
<ul class = "list">
<li><p>Follow Tools &rarr; Internet Options from the menu</p></li>
<li><p>Select Security tab from the dialog box</p></li>
<li><p>Click the Custom Level button</p></li>
<li><p>Scroll down till you find Scripting option</p></li>
<li><p>Select Enable radio button under Active scripting</p></li>
<li><p>Finally click OK and come out</p></li>
</ul>
<p>To disable VBScript support in your Internet Explorer, you need to select <i>Disable</i> radio button under <b>Active scripting</b>.</p>
<h1>VBScript - Placements</h1>
<h2>VBScript Placement in HTML File</h2>
<p>There is a flexibility given to include VBScript code anywhere in an HTML document. But the most preferred way to include VBScript in your HTML file is as follows &minus;</p>
<ul class="list">
<li><p>Script in &lt;head&gt;...&lt;/head&gt; section.</p></li>
<li><p>Script in &lt;body&gt;...&lt;/body&gt; section.</p></li>
<li><p>Script in &lt;body&gt;...&lt;/body&gt; and &lt;head&gt;...&lt;/head&gt; sections.</p></li>
<li><p>Script in an external file and then include in &lt;head&gt;...&lt;/head&gt; section.</p></li>
</ul>
<p>In the following section, we will see how we can put VBScript in different ways &minus;</p>
<h2>VBScript in &lt;head&gt;...&lt;/head&gt; section</h2>
<p>If you want to have a script run on some event, such as when a user clicks somewhere, then you will place that script in the head as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/Vbscript"&gt;
         &lt;!--
            Function sayHello() 
               Msgbox("Hello World")
            End Function
         //--&gt;
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;input type = "button" onclick = "sayHello()" value = "Say Hello" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus; A button with the name SayHello. Upon clicking on the Button, the message box is displayed to the user with the message "Hello World".</p>
<pre class="prettyprint notranslate">
   <input  type="button" onclick="sayHello()" value="Say Hello"/>
</pre>
<h2>VBScript in &lt;body&gt;...&lt;/body&gt; section</h2>
<p>If you need a script to run as the page loads so that the script generates content in the page, the script goes in the &lt;body&gt; portion of the document. In this case, you would not have any function defined using VBScript &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt; &lt;/head&gt;
   &lt;body&gt;
      &lt;script type = "text/vbscript"&gt;
         &lt;!--
            document.write("Hello World")
         //--&gt;
      &lt;/script&gt;
      &lt;p&gt;This is web page body &lt;/p&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Hello World
This is web page body 
</pre>
<h2>VBScript in &lt;body&gt; and &lt;head&gt; sections</h2>
<p>You can put your VBScript code in &lt;head&gt; and &lt;body&gt; section altogether as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/vbscript"&gt;
         &lt;!--
            Function sayHello() 
               msgbox("Hello World")
            End Function
         //--&gt;
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/vbscript"&gt;
         &lt;!--
         document.write("Hello World")
         //--&gt;
      &lt;/script&gt;
      &lt;input type = "button" onclick = "sayHello()" value = "Say Hello" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus; Hello World message with a 'Say Hello' button. Upon Clicking on the button a message box with a message "Hello World" is displayed to the user.</p>
<pre class="result notranslate">
Hello World <input type="button" onclick="sayHello()" value="Say Hello" />
</pre>
<h2>VBScript in External File</h2>
<p>As you begin to work more extensively with VBScript, you will likely find that there are cases, where you are reusing identical VBScript code on multiple pages of a site. You are not restricted to be maintaining identical code in multiple HTML files.</p>
<p>The <i>script</i> tag provides a mechanism to allow you to store VBScript in an external file and then include it into your HTML files. Here is an example to show how you can include an external VBScript file in your HTML code using <i>script</i> tag and its <i>src</i> attribute &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/vbscript" src = "filename.vbs" &gt;&lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
      .......
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>To use VBScript from an external file source, you need to write your all VBScript source code in a simple text file with extension ".vbs" and then include that file as shown above. For example, you can keep the following content in filename.vbs file and then you can use <i>sayHello</i> function in your HTML file after including filename.vbs file.</p>
<pre class="prettyprint notranslate">
Function sayHello()
   Msgbox "Hello World"
End Function
</pre>
<h2>VBScript Placement in QTP</h2>
<p>VBScript is placed in QTP (Quick Test Professional) tool but it is NOT enclosed within HTML Tags. The Script File is saved with the extension .vbs and it is executed by Quick Test Professional execution engine.</p>
<h1>VBScript - Variables</h1>
<h2>VBScript Variables</h2>
<p>A variable is a named memory location used to hold a value that can be changed during the script execution. VBScript has only <b>ONE</b> fundamental data type, <b>Variant</b>.</p>
<p><b>Rules for Declaring Variables &minus;</b></p>
<ul class="list">
<li><p>Variable Name must begin with an alphabet.</p></li>
<li><p>Variable names cannot exceed 255 characters.</p></li>
<li><p>Variables Should NOT contain a period (.)</p></li>
<li><p>Variable Names should be unique in the declared context.</p></li>
</ul>
<h2>Declaring Variables</h2>
<p>Variables are declared using “dim” keyword. Since there is only ONE fundamental data type, all the declared variables are variant by default. Hence, a user <b>NEED NOT</b> mention the type of data during declaration.</p>
<p><b>Example 1</b> &minus; In this Example, IntValue can be used as a String, Integer or even arrays.</p>
<pre class="result notranslate">
Dim Var
</pre>
<p><b>Example 2</b> &minus; Two or more declarations are separated by comma(,)</p>
<pre class="result notranslate">
Dim Variable1,Variable2
</pre>
<h2>Assigning Values to the Variables</h2>
<p>Values are assigned similar to an algebraic expression. The variable name on the left hand side followed by an equal to (=) symbol and then its value on the right hand side.</p>
<h3>Rules</h3>
<ul class="list">
<li><p>The numeric values should be declared without double quotes.</p></li>
<li><p>The String values should be enclosed within double quotes(")</p></li>
<li><p>Date and Time variables should be enclosed within hash symbol(#)</p></li>
</ul>
<h3>Examples</h3>
<pre class="prettyprint notranslate">
' Below Example, The value 25 is assigned to the variable.
Value1 = 25

' A String Value ‘VBScript’ is assigned to the variable StrValue.
StrValue = “VBScript”

' The date 01/01/2020 is assigned to the variable DToday.
Date1 = #01/01/2020#

' A Specific Time Stamp is assigned to a variable in the below example.
Time1 = #12:30:44 PM#
</pre>
<h2>Scope of the Variables</h2>
<p>Variables can be declared using the following statements that determines the scope of the variable. The scope of the variable plays a crucial role when used within a procedure or classes.</p>
<ul class="list">
<li>Dim</li>
<li>Public</li>
<li>Private</li>
</ul>
<h3>Dim</h3> 
<p>Variables declared using “Dim” keyword at a Procedure level are available only within the same procedure. Variables declared using “Dim” Keyword at script level are available to all the procedures within the same script.</p>
<p><b>Example</b> &minus; In the below example, the value of Var1 and Var2 are declared at script level while Var3 is declared at procedure level.</p>
<p><b>Note</b> &minus; The scope of this chapter is to understand Variables. Functions would be dealt in detail in the upcoming chapters.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim Var1
         Dim Var2
         
         Call add()
         Function add()
            Var1 = 10
            Var2 = 15
            Dim Var3
            Var3 = Var1 + Var2
            Msgbox Var3 'Displays 25, the sum of two values.
         End Function

         Msgbox Var1   ' Displays 10 as Var1 is declared at Script level
         Msgbox Var2   ' Displays 15 as Var2 is declared at Script level
         Msgbox Var3   ' Var3 has No Scope outside the procedure. Prints Empty
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Public</h3>
<p>Variables declared using "Public" Keyword are available to all the procedures across all the associated scripts. When declaring a variable of type "public", Dim keyword is replaced by "Public".</p>
<p><b>Example</b> &minus; In the following example, Var1 and Var2 are available at script level while Var3 is available across the associated scripts and procedures as it is declared as Public.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim Var1
         Dim Var2
         Public Var3

         Call add()

         Function add()
            Var1 = 10
            Var2 = 15
            Var3 = Var1+Var2
            Msgbox Var3 'Displays 25, the sum of two values.
         End Function

         Msgbox Var1   ' Displays 10 as Var1 is declared at Script level
         Msgbox Var2   ' Displays 15 as Var2 is declared at Script level
         Msgbox Var3   ' Displays 25 as Var3 is declared as Public 

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Private</h3>  
<p>Variables that are declared as "Private" have scope only within that script in which they are declared. When declaring a variable of type "Private", Dim keyword is replaced by "Private".</p>
<p><b>Example</b> &minus; In the following example, Var1 and Var2 are available at Script Level. Var3 is declared as Private and it is available only for this particular script. Use of "Private" Variables is more pronounced within the Class.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim Var1
         Dim Var2
         Private Var3

         Call add()
         Function add()
            Var1 = 10
            Var2 = 15
            Var3 = Var1+Var2
            Msgbox Var3 'Displays the sum of two values.
         End Function

         Msgbox Var1   ' Displays 10 as Var1 is declared at Script level
         Msgbox Var2   ' Displays 15 as Var2 is declared at Script level
         Msgbox Var3   ' Displays 25 but Var3 is available only for this script.
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h1>VBScript - Constants</h1>
<p>Constant is a named memory location used to hold a value that CANNOT be changed during the script execution. If a user tries to change a Constant Value, the Script execution ends up with an error. Constants are declared the same way the variables are declared.</p>
<h2>Declaring Constants</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
[Public | Private] Const Constant_Name = Value
</pre>
<p>The Constant can be of type Public or Private. The Use of Public or Private is Optional. The Public constants are available for all the scripts and procedures while the Private Constants are available within the procedure or Class. One can assign any value such as number, String or Date to the declared Constant.</p>
<h3>Example 1</h3>
<p>In this example, the value of pi is 3.4 and it displays the area of the circle in a message box.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim intRadius
         intRadius = 20
         const pi = 3.14
         Area = pi*intRadius*intRadius
         Msgbox Area

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Example 2</h3>
<p>The below example illustrates how to assign a String and Date Value to a Constant.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Const myString = "VBScript"
         Const myDate = #01/01/2050#
         Msgbox myString
         Msgbox myDate

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Example 3</h3>
<p>In the below example, the user tries to change the Constant Value; hence, it will end up with an <b>Execution Error.</b></p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim intRadius
         intRadius = 20
         const pi = 3.14
         pi = pi*pi	'pi VALUE CANNOT BE CHANGED.THROWS ERROR'
         Area = pi*intRadius*intRadius
         Msgbox Area
         
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h1>VBScript - Operators</h1>
<h2>What is an operator?</h2>
<p>Let’s take an expression <i>4 + 5 is equal to 9</i>. Here, 4 and 5 are called <b>operands</b> and + is called the <b>operator</b>. VBScript language supports following types of operators &minus;</p>
<ul class="list">
<li>Arithmetic Operators</li>
<li>Comparison Operators</li>
<li>Logical (or Relational) Operators</li>
<li>Concatenation Operators</li>
</ul>
<h2>The Arithmetic Operators</h2>
<p>VBScript supports the following arithmetic operators &minus;</p>
<p>Assume variable A holds 5 and variable B holds 10, then &minus;</p>
<p><a href="/vbscript/vbscript_arithmetic_operators.htm" title="Arithmetic Operators in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td style="text-align:center;">+</td>
<td>Adds two operands</td>
<td>A + B will give 15</td>
</tr>
<tr>
<td style="text-align:center;">-</td>
<td>Subtracts second operand from the first</td>
<td>A - B will give -5</td>
</tr>
<tr>
<td style="text-align:center;">*</td>
<td>Multiply both operands</td>
<td>A * B will give 50</td>
</tr>
<tr>
<td style="text-align:center;">/</td>
<td>Divide numerator by denumerator</td>
<td>B / A will give 2</td>
</tr>
<tr>
<td style="text-align:center;">%</td>
<td>Modulus Operator and remainder of after an integer division</td>
<td>B MOD A will give 0</td>
</tr>
<tr>
<td style="text-align:center;">^</td>
<td>Exponentiation Operator</td>
<td>B ^ A will give 100000</td>
</tr>
</table>	
<p>To understand these operators in a better way, you can <a target="_blank" href="http://www.compileonline.com/execute_vbscript_online.php">Try it yourself</a>.</p>
<h2>The Comparison Operators</h2>
<p>There are following comparison operators supported by VBScript language &minus;</p>
<p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>
<p><a href="/vbscript/vbscript_comparison_operators.htm" title="Comparison Operators in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:20%">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;width:25%">Example</th>
</tr>
<tr>
<td class="ts">=</td>
<td>Checks if the value of two operands are equal or not, if yes then condition becomes true.</td>
<td>(A == B) is False.</td>
</tr>
<tr>
<td class="ts">&lt;&gt;</td>
<td>Checks if the value of two operands are equal or not, if values are not equal then condition becomes true.</td>
<td>(A &lt;&gt; B) is True.</td>
</tr>
<tr>
<td class="ts">&gt;</td>
<td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>
<td>(A &gt; B) is False.</td>
</tr>
<tr>
<td class="ts">&lt;</td>
<td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>
<td>(A &lt; B) is True.</td>
</tr>
<tr>
<td class="ts">&gt;=</td>
<td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>
<td>(A &gt;= B) is False.</td>
</tr>
<tr>
<td class="ts">&lt;=</td>
<td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>
<td>(A &lt;= B) is True.</td>
</tr>
</table>
<p>To understand these operators in a better way, you can <a target="_blank" href="http://www.compileonline.com/execute_vbscript_online.php">Try it yourself</a>.</p>
<h2>The Logical Operators</h2>
<p>There are following logical operators supported by VBScript language &minus;</p>
<p>Assume variable A holds 10 and variable B holds 0, then &minus;</p>
<p><a href="/vbscript/vbscript_logical_operators.htm" title="Logical Operators in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;width:25%">Example</th>
</tr>
<tr>
<td style="text-align:center;">AND</td>
<td>Called Logical AND operator. If both the conditions are True, then Expression becomes True.</td>
<td>a&lt;&gt;0 AND b&lt;&gt;0 is False.</td>
</tr>
<tr>
<td style="text-align:center;">OR</td>
<td>Called Logical OR Operator. If any of the two conditions is True, then condition becomes True.</td>
<td>a&lt;&gt;0 OR b&lt;&gt;0 is true.</td>
</tr>
<tr>
<td style="text-align:center;">NOT</td>
<td>Called Logical NOT Operator. It reverses the logical state of its operand. If a condition is True, then the Logical NOT operator will make it False.</td>
<td>NOT(a&lt;&gt;0 OR b&lt;&gt;0) is false.</td>
</tr>
<tr>
<td style="text-align:center;">XOR</td>
<td>Called Logical Exclusion. It is the combination of NOT and OR Operator. If one, and only one, of the expressions evaluates to True, result is True.</td>
<td>(a&lt;&gt;0 XOR b&lt;&gt;0) is true.</td>
</tr>
</table>
<p>To understand these operators in a better way, you can <a target="_blank" href="http://www.compileonline.com/execute_vbscript_online.php">Try it yourself</a>.</p>
<h2>The Concatenation Operators</h2>
<p>There are following Concatenation operators supported by VBScript language &minus;</p>
<p>Assume variable A holds 5 and variable B holds 10 then &minus;</p>
<p><a href="/vbscript/vbscript_concatenation_operators.htm" title="Concatenation Operators in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td style="text-align:center;">+</td>
<td>Adds two Values as Variable Values are Numeric</td>
<td>A + B will give 15</td>
</tr>
<tr>
<td style="text-align:center;">&amp;</td>
<td>Concatenates two Values</td>
<td>A &amp; B will give 510</td>
</tr>
</table>
<p>Assume variable A = "Microsoft" and variable B="VBScript", then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td style="text-align:center;">+</td>
<td>Concatenates two Values</td>
<td>A + B will give MicrosoftVBScript</td>
</tr>
<tr>
<td style="text-align:center;">&amp;</td>
<td>Concatenates two Values</td>
<td>A &amp; B will give MicrosoftVBScript</td>
</tr>
</table>		
<p><b>Note</b> &minus; Concatenation Operators can be used for numbers and strings. The Output depends on the context if the variables hold numeric value or String Value.</p> 
<p>To understand these Operators in a better way, you can <a target="_blank" href="http://www.compileonline.com/execute_vbscript_online.php">Try it yourself</a>.</p>
<h1>VBScript - Decision Making</h1>
<p>Decision making allows programmers to control the execution flow of a script or one of its sections. The execution is governed by one or more conditional statements.</p>
<p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>
<img src="/vbscript/images/decision_making.jpg" alt="Decision making statements in VBScript" />
<p>VBScript provides the following types of decision making statements.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:35%">Statement</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td><a href="/vbscript/vbscript_if_statement.htm" title="VBScript if statement">if statement</a></td>
<td>An <b>if</b> statement consists of a Boolean expression followed by one or more statements.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_if_else_statement.htm" title="VBScript if else statement">if..else statement</a></td>
<td>An <b>if else</b> statement consists of a Boolean expression followed by one or more statements. If the condition is True, the statements under the <b>If</b> statements are executed. If the condition is false, then the <b>Else</b> part of the script is Executed</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_if_elseif_else_statement.htm" title="VBScript if...elseif...else statement">if...elseif..else statement</a></td>
<td>An <b>if</b> statement followed by one or more <b>ElseIf </b> Statements, that consists of Boolean expressions and then followed by an optional else statement, which executes when all the condition becomes false.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_nested_if_statements.htm" title="VBScript nested if statements">nested if statements</a></td>
<td>An <b>if</b> or <b>elseif</b> statement inside another <b>if</b> or <b>elseif</b> statement(s).</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_switch_statement.htm" title="VBScript switch statement">switch statement</a></td>
<td>A <b>switch</b> statement allows a variable to be tested for equality against a list of values.</td>
</tr>
</table>
<h1>VBScript - Loops</h1>
<p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>
<p>Programming languages provide various control structures that allow more complicated execution paths. A loop statement allows us to execute a statement or group of statements multiple times and following is the general from of a loop statement in VBScript.</p>
<img src="/vbscript/images/loop_architecture.jpg" alt="Loop Architecture" />
<p>VBScript provides the following types of loops to handle looping requirements. Click the following links to check their detail.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:30%">Loop Type</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;"><a href="/vbscript/vbscript_for_loop.htm" title="for loop in VBScript">for loop</a></td>
<td>Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.</td>
</tr>
<tr>
<td style="text-align:center;"><a href="/vbscript/vbscript_foreach_loop.htm" title="for each loop in VBScript">for ..each loop</a></td>
<td>It is executed if there is at least one element in group and reiterated for each element in a group.</td>
</tr>
<tr>
<td style="text-align:center;"><a href="/vbscript/vbscript_while_wend_loop.htm" title="while..wend loop in VBScript">while..wend loop</a></td>
<td>It tests the condition before executing the loop body.</td>
</tr>
<tr>
<td style="text-align:center;"><a href="/vbscript/vbscript_do_while_loop.htm" title="do..while loop in VBScript">do..while loops</a></td>
<td>The do..While statements will be executed as long as condition is True.(i.e.,) The Loop should be repeated till the condition is False.</td>
</tr>
<tr>
<td style="text-align:center;"><a href="/vbscript/vbscript_do_until_loop.htm" title="do..until loop in VBScript">do..until loops</a></td>
<td>The do..Until statements will be executed as long as condition is False.(i.e.,) The Loop should be repeated till the condition is True.</td>
</tr>
</table>
<h2>Loop Control Statements</h2>
<p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all the remaining statements in the loop are NOT executed.</p>
<p>VBScript supports the following control statements. Click the following links to check their detail.</p>
<table class="table table-bordered">
<tr>
<th style="width:30%">Control Statement</th>
<th>Description</th>
</tr>
<tr>
<td><a href="/vbscript/vbscript_exit_for_statement.htm" title="Exit For in VBScript">Exit For statement</a></td>
<td>Terminates the <b>For loop</b> statement and transfers execution to the statement immediately following the loop</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_exit_do_statement.htm" title="Exit do in VBScript">Exit Do statement</a></td>
<td>Terminates the <b>Do While</b> statement and transfers execution to the statement immediately following the loop</td>
</tr>
</table>
<h1>VBScript - Events</h1>
<h2>What is an Event ?</h2>
<p>VBScript's interaction with HTML is handled through events that occur when the user or browser manipulates a page. When the page loads, that is an event. When the user clicks a button, that click too is an event. Other examples of events include pressing any key, closing window, resizing window, etc. Developers can use these events to execute VBScript coded responses, which cause buttons to close windows, messages to be displayed to users, data to be validated, and virtually any other type of response imaginable to occur.</p>
<p>Events are a part of the Document Object Model (DOM) and every HTML element has a certain set of events, which can trigger VBScript Code. Please go through this small tutorial for a better understanding <a href="/vbscript/vbscript_events_html_ref.htm">HTML Event Reference</a>. Here, we will see few examples to understand a relation between Event and VBScript.</p>
<h2>onclick Event Type</h2>
<p>This is the most frequently used event type, which occurs when a user clicks mouse's left button. You can put your validation, warning, etc., against this event type.</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function sayHello() 
            msgbox "Hello World"
         End Function
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;input type = "button" onclick = "sayHello()" value = "Say Hello"/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result, and when you click the Hello button, the onclick event will occur which will trigger sayHello() function.</p>
<pre class="prettyprint notranslate">
<input type="button" onclick="sayHello()" value="Say Hello" />
</pre>
<h2>onsubmit event type</h2>
<p>Another most important event type is <i>onsubmit</i>. This event occurs when you try to submit a form. So you can put your form validation against this event type. The Form is submitted by clicking on Submit button, the message box appears.</p>
<p>The Form is submitted by clicking on Submit button, the message box appears.</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt; &lt;/head&gt;
   &lt;body&gt;
      &lt;script language = "VBScript"&gt;       
         Function fnSubmit()
            Msgbox("Hello Tutorialspoint.Com")
         End Function       
      &lt;/script&gt;
      
      &lt;form action = "/cgi-bin/test.cgi" method = "post" name = "form1" onSubmit = "fnSubmit()"&gt;
         &lt;input name = "txt1" type = "text"&gt;&lt;br&gt;
         &lt;input name = "btnButton1" type = "submit" value="Submit"&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>onmouseover and onmouseout</h2>
<p>These two event types will help you to create nice effects with images or even with text as well. The <i>onmouseover</i> event occurs when you bring your mouse over any element and the <i>onmouseout</i> occurs when you take your mouse out from that element.</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt; &lt;/head&gt;
   &lt;body&gt;
      &lt;script language = "VBScript"&gt;       
         Function AlertMsg
            Msgbox("ALERT !")
         End Function
          
         Function onmourse_over()
            Msgbox("Onmouse Over")
         End Function

         Sub txt2_OnMouseOut()
            Msgbox("Onmouse Out !!!")
         End Sub
          
         Sub btnButton_OnMouseOut()
            Msgbox("onmouse out on Button !")
         End Sub
      &lt;/script&gt;
      
      &lt;form action = "page.cgi" method = "post" name = "form1"&gt;
         &lt;input name = "txt1" type = "text" OnMouseOut = "AlertMsg()"&gt;&lt;br&gt;
         &lt;input name = "txt2" type = "text" OnMouseOver = "onmourse_over()"&gt;
         &lt;br&gt;&lt;input name = "btnButton" type = "button" value = "Submit"&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce a result when you hover the mouse over the text box and also when you move the focus away from the text box and the button.</p>
<h2>HTML 4 Standard Events</h2>
<p>The standard HTML 4 events are listed here for your reference. Here, script indicates a VBScript function to be executed against that event.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Event</th>
<th style="text-align:center;">Value</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td>onchange</td>
<td>script</td>
<td>Script runs when  the element changes</td>
</tr>
<tr>
<td>onsubmit</td>
<td>script</td>
<td>Script runs when  the form is submitted</td>
</tr>
<tr>
<td>onreset</td>
<td>script</td>
<td>Script runs when the form is reset</td>
</tr>
<tr>
<td>onblur</td>
<td>script</td>
<td>Script runs when the element loses focus</td>
</tr>
<tr>
<td>onfocus</td>
<td>script</td>
<td>Script runs when the element gets focus</td>
</tr>
<tr>
<td>onkeydown</td>
<td>script</td>
<td>Script runs when key is pressed</td>
</tr>
<tr>
<td>onkeypress</td>
<td>script</td>
<td>Script runs when key is pressed and released</td>
</tr>
<tr>
<td>onkeyup</td>
<td>script</td>
<td>Script runs when key is released</td>
</tr>
<tr>
<td>onclick</td>
<td>script</td>
<td>Script runs when a mouse click</td>
</tr>
<tr>
<td>ondblclick</td>
<td>script</td>
<td>Script runs when a mouse double-click</td>
</tr>
<tr>
<td>onmousedown</td>
<td>script</td>
<td>Script runs when mouse button is pressed</td>
</tr>
<tr>
<td>onmousemove</td>
<td>script</td>
<td>Script runs when mouse pointer moves</td>
</tr>
<tr>
<td>onmouseout</td>
<td>script</td>
<td>Script runs when mouse pointer moves out of an element</td>
</tr>
<tr>
<td>onmouseover</td>
<td>script</td>
<td>Script runs when mouse pointer moves over an element</td>
</tr>
<tr>
<td>onmouseup</td>
<td>script</td>
<td>Script runs when mouse button is released</td>
</tr>
</table>
<h1>VBScript and Cookies</h1>
<h2>What are Cookies?</h2>
<p>Web Browsers and Servers use HTTP protocol to communicate and HTTP is a stateless protocol. But for a commercial website, it is required to maintain session information among different pages. For example, one user registration ends after completing many pages. But how to maintain user's session information across all the web pages. In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions and other information required for better visitor experience or site statistics.</p>
<h2>How It Works?</h2>
<p>Your server sends some data to the visitor's browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor's hard drive. Now, when the visitor arrives at another page on your site, the browser sends the same cookie to the server for retrieval. Once retrieved, your server knows/remembers what was stored earlier. Cookies are a plain text data record of 5 variable-length fields &minus;</p>
<ul class="list">
<li><p><b>Expires</b> &minus; The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.</p></li>
<li><p><b>Domain</b> &minus; The domain name of your site.</p></li>
<li><p><b>Path</b> &minus; The path to the directory or web page that set the cookie. This may be blank if you want to retrieve the cookie from any directory or page.</p></li>
<li><p><b>Secure</b> &minus; If this field contains the word "secure", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.</p></li>
<li><p><b>Name=Value</b> &minus; Cookies are set and retrieved in the form of key and value pairs.</p></li>
</ul>
<p>Cookies were originally designed for CGI programming and cookies' data is automatically transmitted between the web browser and web server, so CGI scripts on the server can read and write cookie values that are stored on the client.</p>
<p>VBScript can also manipulate cookies using the cookie property of the <i>Document</i> object. VBScript can read, create, modify and delete the cookie or cookies that apply to the current web page.</p>
<h2>Storing Cookies</h2>
<p>The simplest way to create a cookie is to assign a string value to the <i>document.cookie</i> object, which looks like this &minus;</p>
<h3>Syntax</h3>
<pre class="result notranslate">
document.cookie = "key1 = value1;key2 = value2;expires = date"
</pre>
<p>Here <i>expires</i> attribute is optional. If you provide this attribute with a valid date or time, then cookie will expire at the given date or time and after that cookies' value will not be accessible.</p>
<h3>Example</h3>
<p>Following is the example to set a customer name in <i>input</i> cookie.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/vbscript"&gt;
         Function WriteCookie
            If document.myform.customer.value = "" Then
               msgbox "Enter some value!"
            Else
               cookievalue = (document.myform.customer.value)
               document.cookie = "name = " + cookievalue
               msgbox "Setting Cookies : " &amp; "name = " &amp; cookievalue
            End If
         End Function
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;form name = "myform" action = ""&gt;
         Enter name: &lt;input type = "text" name = "customer"/&gt;
         &lt;input type = "button" value = "Set Cookie" onclick = "WriteCookie()"/&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result. Now enter something in the textbox and press the button "Set Cookie" to set the cookies.</p>
<pre class="result notranslate">
<form name="myform" action="">
<span>Enter name: <input type="text" name="customer"/> <input type="button" value="Set Cookie" onclick="WriteCookie();"/></span>
</form>
</pre>
<p>Now, your system has a cookie called <i>name</i>. You can set multiple cookies using multiple <i>key = value</i> pairs separated by comma. You will learn how to read this cookie in next section.</p>
<h2>Reading Cookies</h2>
<p>Reading a cookie is just as simple as writing one, because the value of the <i>document.cookie</i> object is the cookie. So, you can use this string whenever you want to access the cookie. The <i>document.cookie</i> string will keep a list of <i>name = value</i> pairs separated by semicolons where <i>name</i> is the <i>name</i> of a cookie and value is its string value. You can use strings' <i>split()</i> function to break the string into key and values as follows &minus;</p>
<h3>Example</h3>
<p>Following is the example to get the cookies set in the previous section &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/vbscript"&gt;
         Function ReadCookie
            allcookies = document.cookie
            msgbox "All Cookies : " + allcookies
            cookiearray = split(allcookies,";")
            
            For i = 0 to ubound(cookiearray)
               Name  = Split(cookiearray(i),"=")
               Msgbox "Key is : " + Name(0) + " and Value is : " + Name(1)
            Next
         End Function
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;form name = "myform" action = ""&gt;
         &lt;input type = "button" value = "Get Cookie" onclick = "ReadCookie()"/&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p><b>Note</b> &minus; Here, <i>UBound</i> is a method of <i>Array</i> class, which returns the length of an array. We will discuss Arrays in a separate chapter; until that time, please try to digest it.</p>
<p>It will produce the following result. Now, press the button "Get Cookie" to see the cookies, which you have set in previous section.</p>
<pre class="result notranslate">
<form name="yourform" action="">
<input type="button" value="Get Cookie" onclick="ReadCookie()"/>
</form>
</pre>
<p><b>Note</b> &minus; There may be some other cookies already set on your machine. So, above code will show you all the cookies set at your machine.</p>
<h2>Setting the Cookies Expiration Date</h2>
<p>You can extend the life of a cookie beyond the current browser session by setting an expiration date and saving the expiration date within the cookie. This can be done by setting the <i>expires</i> attribute to a date and time.</p>
<h2>Example</h2>
<p>The following example illustrates how to set cookie expiration date after 1 Month &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/vbscript"&gt;
         Function WriteCookie()
            x = now()
            y = dateadd("m",1,now())  ' Making it to expire next 
            cookievalue = document.myform.customer.value
            document.cookie = "name = "  &amp; cookievalue
            document.cookie = "expires = " &amp; y
            msgbox("Setting Cookies : " &amp; "name=" &amp; cookievalue )
         End Function
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;form name = "myform" action = ""&gt;
         Enter name: &lt;input type = "text" name = "customer"/&gt;
         &lt;input type = "button" value = "Set Cookie" onclick = "WriteCookie()"/&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Deleting a Cookie</h2>
<p>Sometimes, you will want to delete a cookie so that subsequent attempts to read the cookie return nothing. To do this, you just need to set the expiration date to a time in the past.</p>
<h2>Example</h2>
<p>The following example illustrates how to delete a cookie by setting its expiration date 1 Month in the past &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/vbscript"&gt;
         Function WriteCookie()
            x = now()
            x = now()
            a = Month(x)-1
            b = day(x)
            c = year(x)
            d = DateSerial(c,a,b)
            e = hour(x) 
            
            msgbox e
            f = minute(x)
            
            msgbox f
            d = cdate(d &amp; " " &amp; e &amp; ":" &amp; f)
            
            msgbox d
            cookievalue = document.myform.customer.value
            document.cookie = "name = "  &amp; cookievalue
            document.cookie = "expires = " &amp; d
            msgbox("Setting Cookies : " &amp; "name=" &amp; cookievalue )
         End Function
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;form name = "myform" action = ""&gt;
         Enter name: &lt;input type = "text" name = "customer"/&gt;
         &lt;input type = "button" value = "Set Cookie" onclick = "WriteCookie()"/&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h1>VBScript - Numbers</h1>
<p>Number functions help the developers to handle numbers in an efficient way and also helps them to convert their subtypes. It also helps them to make use of the inbuilt mathematical functions associated with VBScript.</p>
<h3>Number Conversion Functions</h3>
<p>Number functions help us to convert a given number from one data subtype to another data subtype.</p>
<p><a href="/vbscript/vbscript_number_conversion_functions.htm" title="Number Conversion Functions in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>CDbl</b></p>
<p>A Function, which converts a given number of any variant subtype to double</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>CInt</b></p>
<p>A Function, which converts a given number of any variant subtype to Integer</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>CLng</b></p>
<p>A Function, which converts a given number of any variant subtype to Long</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>CSng</b></p>
<p>A Function, which converts a given number of any variant subtype to Single</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Hex</b></p>
<p>A Function, which converts a given number of any variant subtype to Hexadecimal</p></td>
</tr>
</table>
<h3>Number Formatting Functions</h3>
<p>The Number formatting functions help the developers to express the given number in a format that they wish to.</p>
<p><a href="/vbscript/vbscript_number_formatting_functions.htm" title="Number Formatting Functions in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th>Sr.No</th>
<th>Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>FormatNumber</b></p>
<p>A Function, which would return an expression formatted as a number</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>FormatPercent</b></p>
<p>A Function, which would return an expression formatted as a percentage</p></td>
</tr>
</table>
<h3>Mathematical Functions</h3>
<p>Mathematical Functions help us to evaluate the mathematical and trigonometrical functions of a given input number.</p>
<p><a href="/vbscript/vbscript_number_mathematical_functions.htm" title="Mathematical Functions in VBScript">Show Examples</a></p>
<table class="table table-bordered">
<tr>
<th>Sr.No</th>
<th>Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Int</b></p>
<p>A Function, which returns the integer part of the given number</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Fix</b></p>
<p>A Function, which returns the integer part of the given number</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Log</b></p>
<p>A Function, which returns the natural logarithm of the given number. Negative numbers disallowed</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Oct</b></p>
<p>A Function, which returns the Octal value of the given percentage</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Hex</b></p>
<p>A Function, which returns the Hexadecimal value of the given number</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>Rnd</b></p>
<p>A Function, which returns a random number between 0 and 1</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>Sgn</b></p>
<p>A Function, which returns a number corresponding to the sign of the specified number</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>Sqr</b></p>
<p>A Function, which returns the square root of the given number. Negative numbers disallowed</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>Abs</b></p>
<p>A Function, which returns the absolute value of the given number</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>Exp</b></p>
<p>A Function, which returns the value of e raised to the specified number</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>Sin</b></p>
<p>A Function, which returns sine value of the given number</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><p><b>Cos</b></p>
<p>A Function, which returns cosine value of the given number</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><p><b>Tan</b></p>
<p>A Function, which returns tan value of the given number</p></td>
</tr>
</table>
<h1>VBScript - Strings</h1>
<p>Strings are a sequence of characters, which can consist of alphabets or numbers or special characters or all of them. A variable is said to be a string if it is enclosed within double quotes " ".</p>
<h2>Syntax</h2>
<pre class="result notranslate">
variablename = "string"
</pre>
<h2>Examples</h2>
<pre class="prettyprint notranslate">
str1 = "string"   ' Only Alphabets
str2 = "132.45"   ' Only Numbers
str3 = "!@#$;*"   ' Only Special Characters
Str4 = "Asc23@#"  ' Has all the above
</pre>
<h2>String Functions</h2>
<p>There are predefined VBScript String functions, which help the developers to work with the strings very effectively. Below are String methods that are supported in VBScript. Please click on each one of the methods to know in detail.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:22%">Function Name</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td><a href="/vbscript/vbscript_instr_function.htm">InStr</a></td>
<td>Returns the first occurrence of the specified substring. Search happens from left to right.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_instrrev_function.htm">InstrRev</a></td>
<td>Returns the first occurrence of the specified substring. Search happens from Right to Left.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_lcase_function.htm">Lcase</a></td>
<td>Returns the lower case of the specified string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_ucase_function.htm">Ucase</a></td>
<td>Returns the Upper case of the specified string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_left_function.htm">Left</a></td>
<td>Returns a specific number of characters from the left side of the string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_right_function.htm">Right</a></td>
<td>Returns a specific number of characters from the Right side of the string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_mid_function.htm">Mid</a></td>
<td>Returns a specific number of characters from a string based on the specified parameters.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_ltrim_function.htm">Ltrim</a></td>
<td>Returns a string after removing the spaces on the left side of the specified string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_rtrim_function.htm">Rtrim</a></td>
<td>Returns a string after removing the spaces on the right side of the specified string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_trim_function.htm">Trim</a></td>
<td>Returns a string value after removing both leading and trailing blank spaces.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_len_function.htm">Len</a></td>
<td>Returns the length of the given string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_replace_function.htm">Replace</a></td>
<td>Returns a string after replacing a string with another string.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_space_function.htm">Space</a></td>
<td>Fills a string with the specified number of spaces.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_strcomp_function.htm">StrComp</a></td>
<td>Returns an integer value after comparing the two specified strings.</td>
</tr> 
<tr>
<td><a href="/vbscript/vbscript_string_function.htm">String</a></td>
<td>Returns a String with a specified character the specified number of times.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_strreverse_function.htm">StrReverse</a></td>
<td>Returns a String after reversing the sequece of the characters of the given string.</td>
</tr>
</table>
<h1>VBScript - Arrays</h1>
<h2>What is an Array?</h2>
<p>We know very well that a variable is a container to store a value. Sometimes, developers are in a position to hold more than one value in a single variable at a time. When a series of values is stored in a single variable, then it is known as an <b>array variable</b>.</p>
<h2>Array Declaration</h2>
<p>Arrays are declared the same way a variable has been declared except that the declaration of an array variable uses parenthesis. In the following example, the size of the array is mentioned in the brackets.</p>
<pre class="prettyprint notranslate">
'Method 1 : Using Dim
Dim arr1() 'Without Size

'Method 2 : Mentioning the Size
Dim arr2(5) 'Declared with size of 5

'Method 3 : using 'Array' Parameter
Dim arr3
arr3 = Array("apple","Orange","Grapes")
</pre>
<ul class="list">
<li><p>Although, the Array size is indicated as 5, it can hold 6 values as array index starts from ZERO.</p></li>
<li><p>Array Index Cannot be Negative.</p></li>
<li><p>VBScript Arrays can store any type of variable in an array. Hence, an array can store an integer, string or characters in a single array variable.</p></li>
</ul>
<h2>Assigning Values to an Array</h2>
<p>The values are assigned to the array by specifying array index value against each one of the values to be assigned. It can be a string.</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim arr(5)
         arr(0) = "1"            'Number as String
         arr(1) = "VBScript"     'String
         arr(2) = 100            'Number
         arr(3) = 2.45           'Decimal Number
         arr(4) = #10/07/2013#   'Date
         arr(5) = #12.45 PM#     'Time

         document.write("Value stored in Array index 0 : " &amp; arr(0) &amp; "&lt;br /&gt;")
         document.write("Value stored in Array index 1 : " &amp; arr(1) &amp; "&lt;br /&gt;")
         document.write("Value stored in Array index 2 : " &amp; arr(2) &amp; "&lt;br /&gt;")
         document.write("Value stored in Array index 3 : " &amp; arr(3) &amp; "&lt;br /&gt;")
         document.write("Value stored in Array index 4 : " &amp; arr(4) &amp; "&lt;br /&gt;")
         document.write("Value stored in Array index 5 : " &amp; arr(5) &amp; "&lt;br /&gt;")

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>When the above code is saved as .HTML and executed in Internet Explorer, it produces the following result &minus;</p>
<pre class="result notranslate">
Value stored in Array index 0 : 1
Value stored in Array index 1 : VBScript
Value stored in Array index 2 : 100
Value stored in Array index 3 : 2.45
Value stored in Array index 4 : 7/10/2013
Value stored in Array index 5 : 12:45:00 PM
</pre>
<h2>Multi Dimension Arrays</h2>
<p>Arrays are not just limited to single dimension and can have a maximum of 60 dimensions. Two-dimension arrays are the most commonly used ones.</p>
<h2>Example</h2>
<p>In the following example, a multi-dimension array is declared with 3 rows and 4 columns.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim arr(2,3)	' Which has 3 rows and 4 columns
         arr(0,0) = "Apple" 
         arr(0,1) = "Orange"
         arr(0,2) = "Grapes"           
         arr(0,3) = "pineapple" 
         
         arr(1,0) = "cucumber"           
         arr(1,1) = "beans"           
         arr(1,2) = "carrot"           
         arr(1,3) = "tomato"    
         
         arr(2,0) = "potato"             
         arr(2,1) = "sandwitch"            
         arr(2,2) = "coffee"             
         arr(2,3) = "nuts"            
                  
         document.write("Value in Array index 0,1 : " &amp;  arr(0,1) &amp; "&lt;br /&gt;")
         document.write("Value in Array index 2,2 : " &amp;  arr(2,2) &amp; "&lt;br /&gt;")

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>When the above code is saved as .HTML and executed in Internet Explorer, it produces the following result &minus;</p>
<pre class="result notranslate">
Value stored in Array index : 0 , 1 : Orange
Value stored in Array index : 2 , 2 : coffee
</pre>
<h2>Redim Statement</h2>
<p>ReDim Statement is used to declare dynamic-array variables and allocate or reallocate storage space.</p>
<pre class="result notranslate">
ReDim [Preserve] varname(subscripts) [, varname(subscripts)]
</pre>
<ul class = "list">
<li><p><b>Preserve</b> &minus; An Optional parameter used to preserve the data in an existing array when you change the size of the last dimension.</p></li>
<li><p><b>varname</b> &minus; A Required parameter, which denotes Name of the variable, which should follow the standard variable naming conventions.</p></li>
<li><p><b>subscripts</b> &minus; A Required parameter, which indicates the size of the array.</p></li>
</ul>
<h2>Example</h2>
<p>In the below example, an array has been redefined and then preserved the values when the existing size of the array is changed.</p>
<p><b>Note</b> &minus; Upon resizing an array smaller than it was originally, the data in the eliminated elements will be lost.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim a()
         i = 0
         redim a(5)
         a(0) = "XYZ"
         a(1) = 41.25
         a(2) = 22
           
         REDIM PRESERVE a(7)
         For i = 3 to 7
         a(i) = i
         Next
           
         'to Fetch the output
         For i = 0 to ubound(a)
            Msgbox a(i)
         Next
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>When we save the above script as HTML and execute it in Internet Explorer, it produces the following result.</p>
<pre class="result notranslate">
XYZ
41.25
22
3
4
5
6
7
</pre>
<h2>Array Methods</h2>
<p>There are various inbuilt functions within VBScript which help the developers to handle arrays effectively. All the methods that are used in conjunction with arrays are listed below. Please click on the method name to know in detail.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:20%">Function</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td><a href="/vbscript/vbscript_lbound_function.htm">LBound</a></td>
<td>A Function, which returns an integer that corresponds to the smallest subscript of the given arrays.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_ubound_function.htm">UBound</a></td>
<td>A Function, which returns an integer that corresponds to the Largest subscript of the given arrays.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_split_function.htm">Split</a></td>
<td>A Function, which returns an array that contains a specified number of values. Splitted based on a Delimiter.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_join_function.htm">Join</a></td>
<td>A Function, which returns a String that contains a specified number of substrings in an array. This is an exact opposite function of Split Method.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_filter_function.htm">Filter</a></td>
<td>A Function, which returns a zero based array that contains a subset of a string array based on a specific filter criteria.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_isarray_function.htm">IsArray</a></td>
<td>A Function, which returns a boolean value that indicates whether or not the input variable is an array.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_erase_function.htm">Erase</a></td>
<td>A Function, which recovers the allocated memory for the array variables.</td>
</tr>
</table>
<h1>VBScript - Date and Time Functions</h1>
<p>VBScript Date and Time Functions help the developers to convert date and time from one format to another or to express the date or time value in the format that suits a specific condition.</p>
<h2>Date Functions</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:20%">Function</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td><a href="/vbscript/vbscript_date_function.htm">Date</a></td>
<td>A Function, which returns the current system date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_cdate_function.htm">CDate</a></td>
<td>A Function, which converts a given input to Date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_dateadd_function.htm">DateAdd</a></td>
<td>A Function, which returns a date to which a specified time interval has been added</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_datediff_function.htm">DateDiff</a></td>
<td>A Function, which returns the difference between two time period</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_datepart_function.htm">DatePart</a></td>
<td>A Function, which returns a specified part of the given input date value</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_dateserial_function.htm">DateSerial</a></td>
<td>A Function, which returns a valid date for the given year,month and date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_formatdatetime_function.htm">FormatDateTime</a></td>
<td>A Function, which formats the date based on the supplied parameters</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_isdate_function.htm">IsDate</a></td>
<td>A Function, which returns a Boolean Value whether or not the supplied parameter is a date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_day_function.htm">Day</a></td>
<td>A Function, which returns an integer between 1 and 31 that represents the day of the specified Date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_month_function.htm">Month</a></td>
<td>A Function, which returns an integer between 1 and 12 that represents the month of the specified Date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_year_function.htm">Year</a></td>
<td>A Function, which returns an integer that represents the year of the specified Date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_monthname_function.htm">MonthName</a></td>
<td>A Function, which returns Name of the particular month for the specified date</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_weekday_function.htm">WeekDay</a></td>
<td>A Function, which returns an integer(1 to 7) that represents the day of the week for the specified day.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_weekdayname_function.htm">WeekDayName</a></td>
<td>A Function, which returns the weekday name for the specified day.</td>
</tr>
</table>
<h2>Time Functions</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:20%">Function</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td><a href="/vbscript/vbscript_now_function.htm">Now</a></td>
<td>A Function, which returns the current system date and Time</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_hour_function.htm">Hour</a></td>
<td>A Function, which returns and integer between 0 and 23 that represents the Hour part of the the given time</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_minute_function.htm">Minute</a></td>
<td>A Function, which returns and integer between 0 and 59 that represents the Minutes part of the the given time</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_second_function.htm">Second</a></td>
<td>A Function, which returns and integer between 0 and 59 that represents the Seconds part of the the given time</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_time_function.htm">Time</a></td>
<td>A Function, which returns the current system time</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_timer_function.htm">Timer</a></td>
<td>A Function, which returns the number of seconds and milliseconds since 12:00 AM</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_timeserial_function.htm">TimeSerial</a></td>
<td>A Function, which returns the time for the specific input of hour,minute and second</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_timevalue_function.htm">TimeValue</a></td>
<td>A Function, which converts the input string to a time format</td>
</tr>
</table>
<h1>VBScript - Procedures</h1>
<h2>What is a Function?</h2>
<p>A function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing same code over and over again. This will enable programmers to divide a big program into a number of small and manageable functions. Apart from inbuilt Functions, VBScript allows us to write user-defined functions as well. This section will explain you how to write your own functions in VBScript.</p>	
<h2>Function Definition</h2>
<p>Before we use a function, we need to define that particular function. The most common way to define a function in VBScript is by using the Function keyword, followed by a unique function name and it may or may not carry a list of parameters and a statement with an <b>End Function</b> keyword, which indicates the end of the function.</p> 
<p>The basic syntax is shown below &minus;</p>
<pre class="result notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function Functionname(parameter-list)
            statement 1
            statement 2
            statement 3
            .......
            statement n
         End Function

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function sayHello()
            msgbox("Hello there")
         End Function

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Calling a Function</h2>
<p>To invoke a function somewhere later in the script, you would simple need to write the name of that function with the <b>Call</b> keyword.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function sayHello()
            msgbox("Hello there")
         End Function

         Call sayHello()
        
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Function Parameters</h2>
<p>Till now, we have seen function without a parameter, but there is a facility to pass different parameters while calling a function. These passed parameters can be captured inside the function and any manipulation can be done over those parameters. The Functions are called using the <b>Call</b> Keyword.</p> 
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function sayHello(name, age)
            msgbox( name &amp; " is " &amp; age &amp; " years old.")
         End Function

         Call sayHello("Tutorials point", 7)

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Returning a Value from a Function</h2>
<p>A VBScript function can have an optional return statement. This is required if you want to return a value from a function. For example, you can pass two numbers in a function and then you can expect from the function to return their multiplication in your calling program.</p>
<p><b>NOTE</b> &minus; A function can return multiple values separated by comma as an array assigned to the function name itself.</p>
<h2>Example</h2>
<p>This function takes two parameters and concatenates them and returns result in the calling program. In VBScript, the values are returned from a function using function name. In case if you want to return two or more values, then the function name is returned with an array of values. In the calling program, the result is stored in the result variable.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function concatenate(first, last)
            Dim full
            full = first &amp; last
            concatenate = full  'Returning the result to the function name itself
         End Function

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, we can call this function as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Function concatenate(first, last)
            Dim full
            full = first &amp; last
            concatenate = full  'Returning the result to the function name itself
         End Function
         ' Here is the usage of returning value from  function. 
         dim result
            result = concatenate("Zara", "Ali")
        msgbox(result)
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Sub Procedures</h2>
<p>Sub-Procedures are similar to functions but there are few differences.</p>
<ul class="list">
<li><p>Sub-procedures DONOT Return a value while functions may or may not return a value.</p></li>
<li><p>Sub-procedures Can be called without call keyword.</p></li>
<li><p>Sub-procedures are always enclosed within <b>Sub</b> and <b>End Sub</b> statements.</p></li>
</ul>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Sub sayHello()
            msgbox("Hello there")
         End Sub

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Calling Procedures</h2>
<p>To invoke a Procedure somewhere later in the script, you would simply need to write the name of that procedure with or without the <b>Call</b> keyword.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Sub sayHello()
            msgbox("Hello there")
         End Sub
         sayHello()

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Advanced Concepts for Functions</h2>
<p>There is lot to learn about VBScript functions. We can pass the parameter byvalue or byreference. Please click on each one of them to know more.</p>
<ul class="list">
<li><p><a href="/vbscript/vbscript_byvalue_function.htm">ByVal- Pass the parameters by value</a></p></li>
<li><p><a href="/vbscript/vbscript_byref_function.htm">ByRef- Pass the parameters by the reference</a></p></li>
</ul>
<h1>VBScript - Dialog Boxes</h1>
<h2>What is a Dialog Box ?</h2>
<p>VBScript allows the developers to interact with the user effectively. It can be a message box to display a message to a user or an input box with which user can enter the values.</p>
<h2>VBScript MsgBox Function</h2>
<p>The MsgBox function displays a message box and waits for the user to click a button and then an action is performed based on the button clicked by the user.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
MsgBox(prompt[,buttons][,title][,helpfile,context])
</pre>
<h2>Parameter Description</h2>
<ul class = "list">
<li><p><b>Prompt</b> &minus; A Required Parameter. A String that is displayed as a message in the dialog box. The maximum length of prompt is approximately 1024 characters. If the message extends to more than a line, then we can separate the lines using a carriage return character (Chr(13)) or a linefeed character (Chr(10)) between each line.</p></li>
<li><p><b>buttons</b> &minus; An Optional Parameter. A Numeric expression that specifies the type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If left blank, the default value for buttons is 0.</p></li>
<li><p><b>Title</b> &minus; An Optional Parameter. A String expression displayed in the title bar of the dialog box. If the title is left blank, the application name is placed in the title bar.</p></li>
<li><p><b>helpfile</b> &minus; An Optional Parameter. A String expression that identifies the Help file to use to provide context-sensitive help for the dialog box.</p></li>
<li><p><b>context</b> &minus;  An Optional Parameter. A Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided.</p></li>
</ul>
<p>The <b>Buttons</b> parameter can take any of the following values &minus;</p>
<ul class = "list">
<li><p>0 vbOKOnly Displays OK button only.</p></li>
<li><p>1 vbOKCancel Displays OK and Cancel buttons.</p></li>
<li><p>2 vbAbortRetryIgnore Displays Abort, Retry, and Ignore buttons.</p></li>
<li><p>3 vbYesNoCancel Displays Yes, No, and Cancel buttons.</p></li>
<li><p>4 vbYesNo Displays Yes and No buttons.</p></li>
<li><p>5 vbRetryCancel Displays Retry and Cancel buttons.</p></li>
<li><p>16 vbCritical Displays Critical Message icon.</p></li>
<li><p>32 vbQuestion Displays Warning Query icon.</p></li>
<li><p>48 vbExclamation Displays Warning Message icon.</p></li>
<li><p>64 vbInformation Displays Information Message icon.</p></li>
<li><p>0 vbDefaultButton1 First button is default.</p></li>
<li><p>256 vbDefaultButton2 Second button is default.</p></li>
<li><p>512 vbDefaultButton3 Third button is default.</p></li>
<li><p>768 vbDefaultButton4 Fourth button is default.</p></li>
<li><p>0 vbApplicationModal Application modal. The current application will not work until the user responds to the message box.</p></li>
<li><p>4096 vbSystemModal System modal. All applications will not work until the user responds to the message box.</p></li>
</ul>
<p>The above values are logically divided into four groups: The first group(0 to 5) indicates the buttons to be displayed in the message box. The second group (16, 32, 48, 64) describes the sytle of the icon to be displayed, the third group (0, 256, 512, 768) indicates which button must be the default, and the fourth group (0, 4096) determines the modality of the message box.</p>
<h3>Return Values</h3>
<p>The MsgBox function can return one of the following values &minus;</p>
<ul class = "list">
<li><p>1 - vbOK - OK was clicked</p></li>
<li><p>2 - vbCancel - Cancel was clicked</p></li>
<li><p>3 - vbAbort - Abort was clicked</p></li>
<li><p>4 - vbRetry - Retry was clicked</p></li>
<li><p>5 - vbIgnore - Ignore was clicked</p></li>
<li><p>6 - vbYes - Yes was clicked</p></li>
<li><p>7 - vbNo - No was clicked</p></li>
</ul>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         'Message Box with just prompt message
         MsgBox("Welcome")    
           
         'Message Box with title, yes no and cancel Butttons 
         a = MsgBox("Do you like blue color?",3,"Choose options")
         ' Assume that you press No Button	
         document.write("The Value of a is " &amp; a)
         
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>When the above script is executed, the message box is displayed, and if you press No Button, then the value of a is 7.</p>
<pre class="result notranslate">
The Value of a is 7
</pre>
<h2>VBScript InputBox Function</h2>
<p>The InputBox function helps the user to get the values from the user. After entering the values, if the user clicks the OK button or presses ENTER on the keyboard, the InputBox function will return the text in the text box. If the user clicks on the Cancel button, the function will return an empty string ("").</p>
<h2>Syntax</h2>
<pre class="result notranslate">
InputBox(prompt[,title][,default][,xpos][,ypos][,helpfile,context])
</pre>
<h2>Parameter Description</h2>
<ul class ="list">
<li><p><b>Prompt</b> &minus; A Required Parameter. A String that is displayed as a message in the dialog box. The maximum length of prompt is approximately 1024 characters. If the message extends to more than a line, then we can separate the lines using a carriage return character (Chr(13)) or a linefeed character (Chr(10)) between each line.</p></li>
<li><p><b>Title</b> &minus; An Optional Parameter. A String expression displayed in the title bar of the dialog box. If the title is left blank, the application name is placed in the title bar.</p></li>
<li><p><b>Default</b> &minus; An Optional Parameter. A default text in the text box that the user would like to be displayed.</p></li>
<li><p><b>XPos</b> &minus; An Optional Parameter. The Position of X axis which represents the prompt distance from left side of the screen horizontally. If left blank, the input box is horizontally centered.</p></li>
<li><p><b>YPos</b> &minus; An Optional Parameter. The Position of Y axis which represents the prompt distance from left side of the screen Vertically. If left blank, the input box is Vertically centered.</p></li>
<li><p><b>helpfile</b> &minus; An Optional Parameter. A String expression that identifies the Help file to use to provide context-sensitive Help for the dialog box.</p></li>
<li><p><b>context</b> &minus;  An Optional Parameter. A Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided.</p></li>
</ul>
<h2>Example</h2>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         ' Input Box with only Prompt
         InputBox("Enter a number")    
        
         ' Input Box with a Title
         a = InputBox("Enter a Number","Enter Value")
         msgbox a
        
         ' Input Box with a Prompt,Title and Default value
         a = InputBox("Enter a Number","Enter Value",123)
         msgbox a
        
         ' Input Box with a Prompt,Title,Default and XPos
         a = InputBox("Enter your name","Enter Value",123,700)
         msgbox a
        
         ' Input Box with a Prompt,Title and Default and YPos
         a = InputBox("Enter your name","Enter Value",123,,500)
         msgbox a
         
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>When the above script is executed, the input box is displayed and displays the entered value by the user.</p>
<h1>Object Oriented VBScript</h1>
<h2>What is an Object</h2>
<p>VBScript runtime objects help us to accomplish various tasks. This section will help you understand how to instantiate an object and work with it.</p>
<h3>Syntax</h3>
<p>In order to work with objects seamlessly, we need to declare the object and instantiate it using <b>Set</b> Keyword.</p>
<pre class="result notranslate">
Dim objectname    'Declare the object name
Set objectname = CreateObject(object_type)
</pre>
<h3>Example</h3>
<p>In the below example, we are creating an object of type <b>Scripting.Dictionary</b>.</p>
<pre class="result notranslate">
Dim obj  
Set obj = CreateObject("Scripting.Dictionary")
</pre>
<h2>Destroying the Objects</h2>
<p>The significance of destroying the Object is to free the memory and reset the object variable.</p>
<h3>Syntax</h3>
<p>In order to destroy the objects, we need to use <b>Set</b> Keyword followed by the object name and point it to <b>Nothing</b>.</p>
<pre class="result notranslate">
Set objectname = Nothing 'Destroy the object.
</pre>
<h3>Example</h3>
<p>In the below example, we are creating an object of type <b>Scripting.Dictionary</b>.</p>
<pre class="result notranslate">
Dim obj  
Set obj = CreateObject("Scripting.Dictionary")
Set obj = Nothing.
</pre>
<h2>Object Usage</h2>
<p>Please click on each one of the given object types to know more.</p>
<table class="table table-bordered">
<tr>
<th style="width:20%">Object Type</th>
<th style="text-align:center;">Description</th>
<tr>
<tr>
<td><a href="/vbscript/vbscript_class_objects.htm">Class</a></td>
<td>Class is a container, which holds methods and variables associated with it and accessed by creating an object of Type Class.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_fso_objects.htm">Scripting.FileSystemObject</a></td>
<td>It is the group of objects with which we can work with file system.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_dictionary_objects.htm">Scripting.Dictionary</a></td>
<td>A Group of objects, which are used for creating the dictionary objects.</td>
</tr>
<tr>
<td><a href="/vbscript/vbscript_debug_objects.htm">Debug</a></td>
<td>A Global Object with which we can send output to the Microsoft script debugger.</td>
</tr>
</table>
<h1>VBScript - Regular Expressions</h1>
<p>Regular Expressions is a sequence of characters that forms a pattern, which is mainly used for search and replace. The purpose of creating a pattern is to match specific strings, so that the developer can extract characters based on conditions and replace certain characters.</p>
<h2>RegExp Object</h2>
<p>RegExp object helps the developers to match the pattern of strings and the properties and methods help us to work with Regular Expressions easily. It is similar to RegExp in JavaScript</p>
<h2>Properties</h2>
<ul class="list">
<li><p><b>Pattern</b> &minus; The Pattern method represents a string that is used to define the regular expression and it should be set before using the regular expression object.</p></li>
<li><p><b>IgnoreCase</b> &minus; A Boolean property that represents if the regular expression should be tested against all possible matches in a string if true or false. If not specified explicitly, IgnoreCase value is set to False.</p></li>
<li><p><b>Global</b> &minus; A Boolean property that represents if the regular expression should be tested against all possible matches in a string. If not specified explicitly, Global value is set to False.</p></li>
</ul>
<h2>Methods</h2>
<ul class="list">
<li><p><b>Test</b>(search-string) &minus; The Test method takes a string as its argument and returns True if the regular expression can successfully be matched against the string, otherwise False is returned.</p></li>
<li><p><b>Replace</b>(search-string, replace-string) &minus; The Replace method takes 2 parameters. If the search is successful then it replaces that match with the replace-string, and the new string is returned. If there are no matches then the original search-string is returned.</p></li>
<li><p><b>Execute</b>(search-string) &minus; The Execute method works like Replace, except that it returns a Matches collection object, containing a Match object for each successful match. It doesn't modify the original string.</p></li>
</ul>
<h2>Matches Collection Object</h2>
<p>The Matches collection object is returned as a result of the Execute method. This collection object can contain zero or more Match objects and the properties of this object are read-only.</p>
<ul class="list">
<li><p><b>Count</b> &minus; The Count method represents the number of match objects in the collection.</p></li>
<li><p><b>Item</b> &minus; The Item method enables the match objects to be accessed from matches collections object.</p></li>
</ul>
<h2>Match Object</h2>
<p>The Match object is contained within the matches collection object. These objects represent the successful match after the search for a string.</p>
<ul class="list">
<li><p><b>FirstIndex</b> &minus; It represents the position within the original string where the match occurred. This index are zero-based which means that the first position in a string is 0.</p></li>
<li><p><b>Length</b> &minus; A value that represents the total length of the matched string.</p></li>
<li><p><b>Value</b> &minus; A value that represents the matched value or text. It is also the default value when accessing the Match object.</p></li>
</ul>
<h2>All about Pattern Parameter</h2>
<p>The pattern building is similar to PERL. Pattern building is the most important thing while working with Regular Expressions. In this section, we will deal with how to create a pattern based on various factors.</p>
<h3>Position Matching</h3>
<p>The significance of position matching is to ensure that we place the regular expressions at the correct places.</p>
<table class="table table-bordered">
<tr>
<th style="width:25%">Symbol</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">^</td>
<td>Matches only the beginning of a string.</td>
</tr>
<tr>
<td style="text-align:center;">$</td>
<td>Match only the end of a string.</td>
</tr>
<tr>
<td style="text-align:center;">\b</td>
<td>Matches any word boundary</td>
</tr>
<tr>
<td style="text-align:center;">\B</td>
<td>Matches any non-word boundary</td>
</tr>
</table>
<h3>Literals Matching</h3>
<p>Any form of characters such as alphabet, number or special character or even decimal, hexadecimal can be treated as a Literal. Since few of the characters have already got a special meaning within the context of Regular Expression, we need to escape them using escape sequences.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:25%">Symbol</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">Alphanumeric</td>
<td>Matches alphabetical and numerical characters only.</td>
</tr>
<tr>
<td style="text-align:center;">\n</td>
<td>Matches a new line.</td>
</tr>
<tr>
<td style="text-align:center;">\[</td>
<td>Matches [ literal only</td>
</tr>
<tr>
<td style="text-align:center;">\]</td>
<td>Matches ] literal only</td>
</tr>
<tr>
<td style="text-align:center;">\(</td>
<td>Matches ( literal only</td>
</tr>
<tr>
<td style="text-align:center;">\)</td>
<td>Matches ) literal only</td>
</tr>
<tr>
<td style="text-align:center;">\t</td>
<td>Matches horizontal tab</td>
</tr>
<tr>
<td style="text-align:center;">\v</td>
<td>Matches vertical tab</td>
</tr>
<tr>
<td style="text-align:center;">\|</td>
<td>Matches | literal only</td>
</tr>
<tr>
<td style="text-align:center;">\{</td>
<td>Matches { literal only</td>
</tr>
<tr>
<td style="text-align:center;">\}</td>
<td>Matches } literal only</td>
</tr>
<tr>
<td style="text-align:center;">\\</td>
<td>Matches \ literal only</td>
</tr>
<tr>
<td style="text-align:center;">\?</td>
<td>Matches ? literal only</td>
</tr>
<tr>
<td style="text-align:center;">\*</td>
<td>Matches * literal only</td>
</tr>
<tr>
<td style="text-align:center;">\+</td>
<td>Matches + literal only</td>
</tr>
<tr>
<td style="text-align:center;">\.</td>
<td>Matches . literal only</td>
</tr>
<tr>
<td style="text-align:center;">\b</td>
<td>Matches any word boundary</td>
</tr>
<tr>
<td style="text-align:center;">\B</td>
<td>Matches any non-word boundary</td>
</tr>
<tr>
<td style="text-align:center;">\f</td>
<td>Matches a form feed</td>
</tr>
<tr>
<td style="text-align:center;">\r</td>
<td>Matches carriage return</td>
</tr>
<tr>
<td style="text-align:center;">\xxx</td>
<td>Matches the ASCII character of an octal number xxx.</td>
</tr>
<tr>
<td style="text-align:center;">\xdd</td>
<td>Matches the ASCII character of an hexadecimal number dd.</td>
</tr>
<tr>
<td style="text-align:center;">\uxxxx</td>
<td>Matches the ASCII character of an UNICODE literal xxxx.</td>
</tr>
</table>
<h3>Character Classes Matching</h3>
<p>The character classes are the Pattern formed by customized grouping and enclosed within [ ] braces. If we are expecting a character class that should not be in the list, then we should ignore that particular character class using the negative symbol, which is a cap ^.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:25%">Symbol</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">[xyz]</td>
<td>Match any of the character class enclosed within the character set.</td>
</tr>
<tr>
<td style="text-align:center;">[^xyz]</td>
<td>Matches any of the character class that are NOT enclosed within the character set.</td>
</tr>
<tr>
<td style="text-align:center;">.</td>
<td>Matches any character class except \n</td>
</tr>
<tr>
<td style="text-align:center;">\w</td>
<td>Match any word character class. Equivalent to [a-zA-Z_0-9]</td>
</tr>
<tr>
<td style="text-align:center;">\W</td>
<td>Match any non-word character class. Equivalent to [^a-zA-Z_0-9]</td>
</tr>
<tr>
<td style="text-align:center;">\d</td>
<td>Match any digit class. Equivalent to [0-9].</td>
</tr>
<tr>
<td style="text-align:center;">\D</td>
<td>Match any non-digit character class. Equivalent to [^0-9].</td>
</tr>
<tr>
<td style="text-align:center;">\s</td>
<td>Match any space character class. Equivalent to [ \t\r\n\v\f]</td>
</tr>
<tr>
<td style="text-align:center;">\S</td>
<td>Match any space character class. Equivalent to [^\t\r\n\v\f]</td>
</tr>
</table>
<h3>Repetition Matching</h3>
<p>Repetition matching allows multiple searches within the regular expression. It also specifies the number of times an element is repeated in a Regular Expression.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:25%">Symbol</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">*</td>
<td>Matches zero or more occurrences of the given regular Expression. Equivalent to {0,}.</td>
</tr>
<tr>
<td style="text-align:center;">+</td>
<td>Matches one or more occurrences of the given regular Expression. Equivalent to {1,}.</td>
</tr>
<tr>
<td style="text-align:center;">?</td>
<td>Matches zero or one occurrences of the given regular Expression. Equivalent to {0,1}.</td>
</tr>
<tr>
<td style="text-align:center;">{x}</td>
<td>Matches exactly x number of occurrences of the given regular expression.</td>
</tr>
<tr>
<td style="text-align:center;">{x,}</td>
<td>Match atleast x or more occurrences of the given regular expression.</td>
</tr>
<tr>
<td style="text-align:center;">{x,y}</td>
<td>Matches x to y number of occurences of the given regular expression.</td>
</tr>
</table>
<h3>Alternation &amp; Grouping</h3>
<p>Alternation and grouping helps developers to create more complex Regular Expressions in particularly handling intricate clauses within a Regular Expression which gives a great flexibility and control.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:25%">Symbol</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">0</td>
<td>Grouping a clause to create a clause. "(xy)?(z)" matches "xyz" or "z".</td>
</tr>
<tr>
<td style="text-align:center;">|</td>
<td>Alternation combines one regular expression clause and then matches any of the individual clauses. "(ij)|(23)|(pq)" matches "ij" or "23" or "pq".</td>
</tr>
</table>
<h2>Building Regular Expressions</h2>
<p>Given below are a few examples that clearly explain how to build a Regular Expression.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:25%">Regular Expression</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">"^\s*.." and "..\s*$"</td>
<td>Represents that there can be any number of leading and trailing space characters in a single line.</td>
</tr>
<tr>
<td style="text-align:center;">"((\$\s?)|(#\s?))?"</td>
<td>Represents an optional $ or # sign followed by an optional space.</td>
</tr>
<tr>
<td style="text-align:center;">"((\d+(\.(\d\d)?)?))"</td>
<td>Represents that at least one digit is present followed by an optional decimals and two digits after decimals.</td>
</tr>
</table>
<h2>Example</h2>
<p>The below example checks whether or not the user entered an email id whose format should match such that there is an email id followed by '@' and then followed by domain name.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         strid = "welcome.user@tutorialspoint.co.us"
         Set re = New RegExp
         With re
            .Pattern    = "^[\w-\.]{1,}\@([\da-zA-Z-]{1,}\.){1,}[\da-zA-Z-]{2,3}$"
            .IgnoreCase = False
            .Global     = False
         End With
        
         ' Test method returns TRUE if a match is found
         If re.Test( strid ) Then
            Document.write(strid &amp; " is a valid e-mail address")
         Else
            Document.write(strid &amp; " is NOT a valid e-mail address")
         End If
        
        Set re = Nothing
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h1>VBScript - Error Handling</h1>
<p>There are three types of errors in programming: (a) Syntax Errors, (b) Runtime Errors, and (c) Logical Errors.</p>
<h2>Syntax errors</h2>
<p>Syntax errors, also called parsing errors, occur at interpretation time for VBScript. For example, the following line causes a syntax error because it is missing a closing parenthesis &minus;</p>
<pre class= "result notranslate">
&lt;script type = "text/vbscript"&gt;

   dim x,y
   x = "Tutorialspoint"
   y = Ucase(x

&lt;/script&gt;
</pre>
<h2>Runtime errors</h2>
<p>Runtime errors, also called exceptions, occur during execution, after interpretation. For example, the following line causes a runtime error because here syntax is correct but at runtime it is trying to call fnmultiply, which is a non-existing function &minus;</p>
<pre class="prettyprint notranslate">
&lt;script type = "text/vbscript"&gt;
   Dim x,y
   x = 10
   y = 20
   z = fnadd(x,y)
   a = fnmultiply(x,y)
   
   Function fnadd(x,y)
      fnadd = x+y
   End Function

&lt;/script&gt;
</pre>
<h2>Logical errors</h2>
<p>Logic errors can be the most difficult type of errors to track down. These errors are not the result of a syntax or runtime error. Instead, they occur when you make a mistake in the logic that drives your script and you do not get the result you expected. You cannot catch those errors, because it depends on your business requirement what type of logic you want to put in your program. For example, dividing a number by zero or a script that is written which enters into infinite loop.</p>
<h2>Err Object</h2>
<p>AAssume if we have a runtime error, then the execution stops by displaying the error message. As a developer, if we want to capture the error, then <b>Error</b> Object is used.</p>
<h3>Example</h3>
<p>In the below example, <b>Err.Number</b> gives the error number and <b>Err.Description</b> gives error description.</p>
<pre class="prettyprint notranslate">
&lt;script type = "text/vbscript"&gt;
  
  Err.Raise 6     ' Raise an overflow error.
  MsgBox "Error # " &amp; CStr(Err.Number) &amp; " " &amp; Err.Description
  Err.Clear       ' Clear the error.

&lt;/script&gt;
</pre> 
<h1>VBScript Miscellaneous Statements</h1>
<p>VBScript has a few other important statements to help developers develop an efficient script. The following table lists a set of such important statements. In this chapter, we will discuss each of these statements in detail with examples.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:20%">Category</th>
<th style="text-align:center;">Function Name/Statement Name</th>
</tr>
<tr>
<td style="text-align:center;">Options</td>
<td>Option Explicit</td>
</tr>
<tr>
<td style="text-align:center;">Script Engine ID</td>
<td>ScriptEngine</td>
</tr>
<tr>
<td style="text-align:center;">variants</td>
<td>IsArray, IsEmpty, IsNull, IsNumeric, IsObject, TypeName</td>
</tr>
<tr>
<td style="text-align:center;">Expression</td>
<td>Eval,Execute</td>
</tr>
<tr>
<td style="text-align:center;">Control Statement</td>
<td>With...End With</td>
</tr>
<tr>
<td style="text-align:center;">Math Function</td>
<td>Randomize</td>
</tr>
</table>
<h2>Option Explicit</h2>
<p><b>Option Explicit</b> forces the developer to declare the variables using <b>Dim</b> statement before they are used in some part of the code.</p>
<h3>Syntax</h3>
<pre class= "result notranslate">
Option Explicit
</pre>
<h3>Example</h3>
<p>If we use <b>Option Explicit</b> and if we don't declare the variables then the interpreter will throw and error.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Option Explicit
         Dim x,y,z,a
         x = 10
         y = 20
         z = fnadd(x,y)
         a = fnmultiply(x,y)

         Function fnadd(x,y)
            fnadd = x+y
         End Function

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>ScriptEngine</h2>
<p><b>ScriptEngine</b> represents the details of the scripting language in use. It is also used in combination with <b>ScriptEngineMajorVersion, ScriptEngineMinor Version, ScriptEngineBuildVersion</b> which gives the major version of the vbscript engine, minor version the vbscript engine, and the build version of vbscript respectively.</p>
<h3>Syntax</h3>
<pre class= "result notranslate">
ScriptEngine 
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim scriptdetails
         scriptdetails =  " Version " &amp; ScriptEngine &amp; " - "
         'For getting Major version, use ScriptEngineMajorVersion'
        
         scriptdetails = scriptdetails &amp;  ScriptEngineMajorVersion &amp; "."
        
         'For getting Minor version, use ScriptEngineMinorVersion'
         scriptdetails = scriptdetails &amp; ScriptEngineMinorVersion &amp; "."
        
         'For getting Build version, use ScriptEngineBuildVersion'
         scriptdetails = scriptdetails &amp; ScriptEngineBuildVersion 
        
         Document.write scriptdetails

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE , the following result is displayed on the screen.</p>
<pre class="result notranslate">
Version VBScript - 5.8.16996 
</pre>
<h2>IsEmpty</h2>
<p>The Function IsEmpty is used to check whether or not the expression is empty. It returns a Boolean value. <b>IsEmpty</b> returns True if the variable is uninitialized or explicitly set to Empty. Otherwise the expression returns False.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
IsEmpty(expression) 
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim var, MyCheck
         MyCheck = IsEmpty(var)  
         Document.write "Line 1 : " &amp; MyCheck & "&lt;br /&gt;"
        
         var = Null   ' Assign Null.
         MyCheck = IsEmpty(var) 
         Document.write "Line 2 : " &amp; MyCheck & "&lt;br /&gt;"
         
         var = Empty   ' Assign Empty.
         MyCheck = IsEmpty(var)
         Document.write "Line 3 : " &amp; MyCheck & "&lt;br /&gt;"
        
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE, the following result is displayed on the screen.</p>
<pre class="result notranslate">
Line 1 : True
Line 2 : False
Line 3 : True
</pre>
<h2>IsNull</h2>
<p>The Function IsNull is used to check whether or not the expression has a valid data. It returns a Boolean value. <b>IsNull</b> returns True if the variable is Null otherwise the expression returns False.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
IsNull(expression) 
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim var, res
         res = IsNull(var)
         document.write "Line 1 : " &amp; res &amp; "&lt;br /&gt;"
         
         var = Null
         res = IsNull(var)
         document.write "Line 2 : " &amp; res &amp; "&lt;br /&gt;"
         
         var = Empty
         res = IsNull(var)
         document.write "Line 3 : " &amp; res &amp; "&lt;br /&gt;"

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE, the following result is displayed on the screen.</p>
<pre class="result notranslate">
Line 1 : False
Line 2 : True
Line 3 : False
</pre>
<h2>IsObject</h2>
<p>The IsObject Function is used to check whether or not the expression has a valid Object. It returns a Boolean value. <b>IsObject</b> returns True if the expression contains an object subtype otherwise the expression returns False.</p>
<h3>Syntax</h3>
<pre class= "result notranslate">
IsObject(expression)
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
        Dim fso,b
        b = 10
        set fso = createobject("Scripting.Filesystemobject")
        
        x = isobject(fso)
        Document.write "Line 1 : " &  x  & "&lt;br /&gt;" 
        
        y = isobject(b)
        Document.write "Line 2 : " &  y  & "&lt;br /&gt;" 

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE, the following result is displayed on the screen.</p>
<pre class="result notranslate">
Line 1 : True
Line 2 : False
</pre>
<h2>IsNumeric</h2>
<p>The IsNumeric Function is used to check whether or not the expression has a number subtype. It returns a boolean value. <b>IsObject</b> returns True if the expression contains an number subtype otherwise the expression returns False.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
IsNumeric(expression)
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim var, chk
         var = 20
         chk = IsNumeric(var)
         Document.write "Line 1 : " &  chk  & "&lt;br /&gt;" 
        
         var = "3.1415935745"   
         chk = IsNumeric(var)   
         Document.write "Line 2 : " &  chk  & "&lt;br / &gt;" 
        
         var = "20 Chapter 23.123 VBScript"   
         chk = IsNumeric(var)
         Document.write "Line 3 : " &  chk  & "&lt;br / &gt;" 

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE , the following result is displayed on the screen.</p>
<pre class="result notranslate">
Line 1 : True
Line 2 : True
Line 3 : False
</pre>
<h2>TypeName</h2>
<p>The TypeName Function is used to return the variant subtype information of the variable.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
TypeName(varname)
</pre>
<p>The Typename function can return any of the following values.</p>
<ul class="list">
<li><p>Byte &minus; Byte Value</p></li>
<li><p>Integer &minus; Integer Value</p></li>
<li><p>Long &minus; Long Integer Value</p></li>
<li><p>Single &minus; Single-precision floating-point Value</p></li>
<li><p>Double &minus; Double-precision floating-point Value</p></li>
<li><p>Currency &minus; Currency Value</p></li>
<li><p>Decimal &minus; Decimal Value</p></li>
<li><p>Date &minus; Date or Time Value</p></li>
<li><p>String &minus; Character string Value</p></li>
<li><p>Boolean &minus; Boolean Value</p></li>
<li><p>Empty &minus; Uninitialized Value</p></li>
<li><p>Null &minus; No Valid Data</p></li>
<li><p>Object &minus; typename of Object</p></li>
<li><p>Nothing &minus; Object variable that doesn't yet refer to an object instance</p></li>
<li><p>Error</p></li>
</ul>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim ArrVar(2), vartype
         NullVar = Null   ' Assign Null value.

         vartype = TypeName(3.1450)     
         Document.write "Line 1 : " &  vartype  & "&lt;br /&gt;" 
         
         vartype = TypeName(432)         
         Document.write "Line 2 : " &  vartype  & "&lt;br /&gt;" 
         
         vartype = TypeName("Microsoft")
         Document.write "Line 3 : " &  vartype  & "&lt;br /&gt;" 
         
         vartype = TypeName(NullVar)   
         Document.write "Line 4 : " &  vartype  & "&lt; br /&gt;" 
         
         vartype = TypeName(ArrVar)    
         Document.write "Line 5 : " &  vartype  & "&lt;br /&gt;"

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE, the following result is displayed on the screen.</p>
<pre class="result notranslate">
Line 1 : Double
Line 2 : Integer
Line 3 : String
Line 4 : Null
Line 5 : Variant()
</pre>
<h2>Eval</h2>
<p>The Eval Function executes an expression and returns the result either as a string or a number.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
Eval(expression)
</pre>
<p>The argument Expression can be a string expression or a number. If you pass to the Eval function a string that doesn't contain a numeric expression or a function name but only a simple text string, a run-time error occurs. For example, Eval("VBScript") results in an error.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Document.write Eval("10 + 10") &amp; "&lt;br /&gt;"
         Document.write Eval("101 = 200") &amp; "&lt;br /&gt;" 
         Document.write Eval("5 * 3") &amp; "&lt;br /&gt;" 

      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE, the following result is displayed on the screen.</p>
<pre class="result notranslate">
20
false
15
</pre>
<h2>Execute</h2>
<p>The Execute statement accepts argument that is a string expression containing one or more statements for execution.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
Execute(expression)
</pre>
<p>In VBScript, a = b can be interpreted two ways. It can be treated as an assignment statement where the value of x is assigned to y. It can also be interpreted as an expression that tests if a and b have the same value. If they do, result is True; if they are not, result is False. The Execute statement always uses the first interpretation while the Eval statement always uses the second.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim x
         x = "Global" 
         y = "VBScript"
         Execute("x = y")
         
         msgbox x
         msgbox y
        
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the file with .html extension upon executing the script in IE, the following result is displayed on the screen.</p>
<pre class="result notranslate">
VBScript
VBScript
</pre>
<h2>With..End With</h2>
<p>The With statement allows us to perform a series of operation on a specified object without explicitly mentioning the object name over again and again.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
With (objectname)
   statement 1
   statement 2
   statement 3
   ...
   ...
   statement n
End With
</pre>
<h3>Example</h3>
<p>Upon Executing the following script, Winword gets opened and the specified text is entered.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Msg =  "Vbscript" & vbCrLf & "Programming"
         Set objWord = CreateObject("Word.Application")
         objWord.Visible = True
       
         ' Objects methods are accessed without requaliyfying the objects again.'
         With objWord
            .Documents.Add
            .Selection.TypeText Msg
            .Selection.WholeStory
         End With
         
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Randomize</h2>
<p>The Randomize statement initializes the random number generator which is helpful for the developers to generate a random number.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
Randomize [number]
</pre>
<h3>Example</h3>
<p>Upon Executing the following script, Winword gets opened and the specified text is entered.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "vbscript" type = "text/vbscript"&gt;
         Dim MyValue
         Randomize   
         MyValue = Int((100 * Rnd) + 1)   ' Generate random value between 1 and 100.
         MsgBox MyValue
        
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Save the above script as HTML and upon executing the script in IE, the following output is shown.</p>
<pre class="result notranslate">
42
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/vbscript/vbscript_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/vbscript/vbscript_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
