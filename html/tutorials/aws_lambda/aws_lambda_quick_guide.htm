<!DOCTYPE html>
<html lang="en-US">
<head>
<title>AWS Lambda â Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="AWS Lambda â Quick Guide - AWS Lambda is a service which performs serverless computing, which involves computing without any server. The code is executed based on the response of events i"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/aws_lambda/aws_lambda_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#f68535;
}
a.demo {
    background:#f68535;
}
li.heading {
    background:#f68535;
}
.course-box{background:#f68535}
.home-intro-sub p{color:#f68535}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/aws_lambda/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/aws_lambda/images/aws_lambda-mini-logo.jpg" alt="AWS Lambda Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">AWS Lambda Tutorial</li>
<li><a href="/aws_lambda/index.htm">AWS Lambda - Home</a></li>
<li><a href="/aws_lambda/aws_lambda_overview.htm">AWS Lambda - Overview</a></li>
<li><a href="/aws_lambda/aws_lambda_environment_setup.htm">AWS Lambda - Environment Setup</a></li>
<li><a href="/aws_lambda/aws_lambda_introduction.htm">AWS Lambda - Introduction</a></li>
<li><a href="/aws_lambda/aws_lambda_building_the_lambda_function.htm">Building the Lambda function</a></li>
<li><a href="/aws_lambda/aws_lambda_function_in_nodejs.htm">Function in NODEJS</a></li>
<li><a href="/aws_lambda/aws_lambda_function_in_java.htm">Function in Java</a></li>
<li><a href="/aws_lambda/aws_lambda_function_in_python.htm">Function in Python</a></li>
<li><a href="/aws_lambda/aws_lambda_function_in_go.htm">Function in Go</a></li>
<li><a href="/aws_lambda/aws_lambda_function_in_csharp.htm">Function in C#</a></li>
<li><a href="/aws_lambda/aws_lambda_configuring_lambda_function.htm">Configuring Lambda Function</a></li>
<li><a href="/aws_lambda/aws_lambda_creating_and_deploying_using_aws_console.htm">Creating &amp; Deploying using AWS Console</a></li>
<li><a href="/aws_lambda/aws_lambda_creating_and_deploying_using_aws_cli.htm">Creating &amp; Deploying using AWS CLI</a></li>
<li><a href="/aws_lambda/aws_lambda_creating_and_deploying_using_serverless_framework.htm">Creating &amp; Deploying using Serverless Framework</a></li>
<li><a href="/aws_lambda/aws_lambda_executing_and_invoking_lambda_function.htm">AWS Executing &amp; Invoking Lambda Function</a></li>
<li><a href="/aws_lambda/aws_lambda_deleting_lambda_function.htm">Deleting Lambda Function</a></li>
<li><a href="/aws_lambda/aws_lambda_working_with_amazon_api_gateway.htm">Working with Amazon API Gateway</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_amazon_s3.htm">Lambda Function with Amazon S3</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_amazon_dynamodb.htm"> Lambda Function with Amazon DynamoDB</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_scheduled_events.htm">Lambda Function with Scheduled Events</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_amazon_sns.htm">Lambda Function with Amazon SNS</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_cloudtrail.htm">Lambda Function with CloudTrail</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_amazon_kinesis.htm"> Lambda Function with Amazon Kinesis</a></li>
<li><a href="/aws_lambda/aws_lambda_using_lambda_function_with_custom_user_applications.htm">Lambda Function with Custom User Applications</a></li>
<li><a href="/aws_lambda/aws_lambda_using_aws_lambdaedge_with_cloudfront.htm">AWS Lambda@Edge with CloudFront</a></li>
<li><a href="/aws_lambda/aws_lambda_monitoring_and_troubleshooting_using_cloudwatch.htm">Monitoring and TroubleShooting using Cloudwatch</a></li>
<li><a href="/aws_lambda/aws_lambda_additional_example.htm">AWS Lambda - Additional Example</a></li>
<ul class="toc chapters">
<li class="heading">AWS Lambda Useful resources</li>
<li><a href="/aws_lambda/aws_lambda_quick_guide.htm">AWS Lambda - Quick Guide</a></li>
<li><a href="/aws_lambda/aws_lambda_useful_resources.htm">AWS Lambda - Useful resources</a></li>
<li><a href="/aws_lambda/aws_lambda_discussion.htm">AWS Lambda - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>AWS Lambda – Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/aws_lambda/aws_lambda_additional_example.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/aws_lambda/aws_lambda_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>AWS Lambda – Overview</h1>
<p><b>AWS Lambda</b> is a service which performs serverless computing, which involves computing without any server. The code is executed based on the response of events in AWS services such as adding/removing files in S3 bucket, updating Amazon dynamo dB tables, HTTP request from Amazon API gateway etc.</p>
<p>To get working with <b>AWS Lambda</b>, we just have to push the code in AWS Lambda service. All other tasks and resources such as infrastructure, operating system, maintenance of server, code monitoring, logs and security is taken care by AWS.</p>
<p><b>AWS Lambda</b> supports languages such as Java, NodeJS, Python, C# and Go. Note thatAWS Lambda will work only with AWS services.</p>
<h2>What is AWS Lambda?</h2>
<p>Definition of AWS Lambda as given by its official documentation is as follows  &minus;</p>
<p><i>AWS Lambda is a compute service that lets you run code without provisioning or managing servers. AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second. You pay only for the compute time you consume - there is no charge when your code is not running.</i></p>
<h2>How AWS Lambda Works?</h2>
<p>The block diagram that explains the working of AWS Lambda in five easy steps is shown below &minus;</p>
<img src="/aws_lambda/images/aws_lambda_block_diagram.jpg" alt="AWS lambda Block Diagram" />
<p><b>Step 1 &minus;</b> Upload AWS lambda code in any of languages AWS lambda supports, that is NodeJS, Java, Python, C# and Go.</p>
<p><b>Step 2 &minus;</b> These are few AWS services on which AWS lambda can be triggered.</p>
<p><b>Step 3 &minus;</b> AWS Lambda which has the upload code and the event details on which the trigger has occurred. For example, event from Amazon S3, Amazon API Gateway, Dynamo dB, Amazon SNS, Amazon Kinesis, CloudFront, Amazon SES, CloudTrail, mobile app etc.</p>
<p><b>Step 4 &minus;</b> Executes AWS Lambda Code only when triggered by AWS services under the scenarios such as &minus;</p>
<ul class="list">
<li>User uploads files in S3 bucket</li>
<li>http get/post endpoint URL is hit</li>
<li>data is added/updated/deleted in dynamo dB tables</li>
<li>push notification</li>
<li>data streams collection</li>
<li>hosting of website</li>
<li>email sending</li>
<li>mobile app, etc.</li>
</ul>
<p><b>Step 5 &minus;</b> Remember that AWS charges only when the AWS lambda code executes, and not otherwise.</p>
<h2>Advantages of using AWS Lambda</h2>
<p>AWS Lambda offers multiple benefits when you are working on it. This section discusses them in detail &minus;</p>
<h3>Ease of working with code</h3>
<p>AWS Lambda gives you the infrastructure to upload your code. It takes care of maintaining the code and triggers the code whenever the required event happens. It allows you to choose the memory and the timeout required for the code.</p>
<p>AWS Lambda can also execute parallel requests as per the event triggers.</p>
<h3>Log Provision</h3>
<p>AWS Lambda gives the details of number of times a code was executed and time taken for execution, the memory consumed etc. AWS CloudWatch collects all the logs, which helps in understanding the execution flow and in the debugging of the code.</p>
<h3>Billing based on Usage</h3>
<p>AWS Lambda billing is done on memory usage, request made and the execution, which is billed in increments of minimum 100ms. So for a 500ms execution, the billing will be after every 100ms. If you specify your AWS lambda code to be executed in 500ms and the time taken to execute is just 200ms, AWS will bill you only for the time taken, that is 200ms of execution instead of 500ms. AWS always charges for the execution time used. You need not pay if the function is not executed.</p>
<h3>Multi Language Support</h3>
<p>AWS Lambda supports popular languages such as Node. js, Python, Java, C#  and Go. These are widely used languages and any developer will find it easy to write code for AWS Lambda.</p>
<h3>Ease of code authoring and deploying</h3>
<p>There are many options available for Lambda for authoring and deploying code. For writing your code, you can use AWS online editor, Visual Studio IDE, or Eclipse IDE. It also has support for serverless framework which makes writing and deploying of AWS Lambda code easy. Besides AWS console, we have AWS-cli to create and deploy code.</p>
<h3>Other features</h3>
<p>You can use AWS Lambda for free by getting a login to AWS free tier. It gives you service for free for 1 year. Take a look at the free services offered by AWS free tier.</p>
<h2>Disadvantages of using AWS Lambda</h2>
<p>In spite of many advantages, AWS Lambda possesses the following disadvantages &minus;</p>
<ul class="list">
<li><p>It is not suitable for small projects.</p></li>
<li><p>You need to carefully analyze your code and decide the memory and timeout. Incase if your function needs more time than what is allocated, it will get terminated as per the timeout specified on it and the code will not be fully executed.</p></li>
<li><p>Since AWS Lambda relies completely on AWS for the infrastructure, you cannot install anything additional software if your code demands it.</p></li>
</ul>
<h2>Events that Trigger AWS Lambda</h2>
<p>The events can trigger AWS Lambda are as follows &minus;</p>
<ul class="list">
<li>Entry into a S3 object</li>
<li>Insertion, updation and deletion of data in Dynamo DB table</li>
<li>Push notifications from SNS</li>
<li>GET/POST calls to API Gateway</li>
<li>Headers modification at viewer or origin request/response in CloudFront</li>
<li>Log entries in AWS Kinesis data stream</li>
<li>Log history in CloudTrail</li>
</ul>
<h2>Use Cases of AWS Lambda</h2>
<p>AWS Lambda is a compute service mainly used to run background processes. It can trigger when used with other AWS services. The list of AWS services where we can use AWS Lambda is given below &minus;</p>
<h3>S3 Object and AWS Lambda</h3>
<p>Amazon S3 passes the event details to AWS Lambda when there is any file upload in S3. The details of the file upload or deletion of file or moving of file is passed to the AWS Lambda. The code in AWS Lambda can take the necessary step for when it receives the event details. For Example creating thumbnail of the image inserted into S3.</p>
<h3>DynamoDB and AWS Lambda</h3>
<p>DynamoDB can trigger AWS Lambda when there is data added, updated and deleted in the table. AWS Lambda event has all the details of the AWS DynamoDB table about the insert /update or delete.</p>
<h3>API Gateway and AWS Lambda</h3>
<p>API Gateway can trigger AWS Lambda on GET/POST methods. We can create a form and share details with API Gateway endpoint and use it with AWS Lambda for further processing, for Example, making an entry of the data in DynamoDB table.</p>
<h3>SNS and AWS Lambda</h3>
<p>SNS is used for push notification, sending SMS etc. We can trigger AWS lambda when there is any push notification happening in SNS. We can also send SMS to the phone number from AWS Lambda when it receives the trigger.</p>
<h3>Scheduled Events and AWS Lambda</h3>
<p>Scheduled Events can be used for cron jobs. It can trigger AWS Lambda to carry out the task at regular time pattern.</p>
<h3>CloudTrail and AWS Lambda</h3>
<p>CloudTrail can be helpful in monitoring the logs on the account. We can use AWS Lambda to further process the CloudTrail logs .</p>
<h3>Kinesis and AWS Lambda</h3>
<p>Kinesis is used to capture/store real time tracking data coming from website clicks, logs, social media feeds and a trigger to AWS Lambda can do additional processing on this logs.</p>
<h3>CloudFront and Lambda@Edge</h3>
<p>CloudFront is a content delivery network where you can host your website and Lambda@Edge can be used to process the headers coming from viewer request, origin request, origin response and viewer response. The headers modification includes tasks such as modifying cookie data, URL rewrite, used for AB testing to change the response send to the user back, adding extra headers info for security purpose etc.</p>
<h1>AWS Lambda – Environment Setup</h1>
<p>Before you start working with AWS Lambda, you need to have a login with Amazon console. AWS Lambda supports two IDEs:<b>Visual studio</b> and <b>Eclipse</b>. In this chapter, we will discuss about the installation of AWS Lambda stepwise in detail.</p>
<h2>Create login in AWS Console</h2>
<p>You can create your login in AWS Console for free using Amazon free tier. You can follow these steps given below to create a login with amazon to make use of the Amazon services &minus;</p>
<h3>Step 1</h3>
<p>Go to <a href="https://aws.amazon.com/free/" rel="nofollow" target="_blank">https://aws.amazon.com/free/</a> and click on create free account. You can see the screenshot as given below &minus;</p>
<img src="/aws_lambda/images/amazon_free_tier.jpg" alt="Amazon Free Tier" />
<h3>Step 2</h3>
<p>Click on <b>Create a Free Account</b> button and you will be redirected to the screen as shown below &minus;</p>
<img src="/aws_lambda/images/create_free_account.jpg" alt="Create Free Account" />
<p>Now, fill in the details of email address, password and AWS account name as per your choice in this form shown above and click <b>Continue</b>.</p>
<h3>Step 3</h3>
<p>Now, you can find the screen as shown below &minus;</p>
<img src="/aws_lambda/images/contact_information.jpg" alt="Contact Information" />
<p>Enter all the required details in this form.</p> 
<p>Note that there are minimum charges to be paid based on country selected. The same is refunded once the details entered are validated. You need credit or debit card details to create the free account. For Indian users <b>Rs 2/-</b> is deducted and for US <b>$1</b> is charged.The same is refunded to the respective card user once the user is validated.</p>
<p>Please note the account is free and there is limit to the usage of the services. If the usage exceeds the limit, the user will be charged for it.</p>
<p>Once the details are entered in the form shown above click <b>Create Account and Continue</b>.</p>
<p>You will be redirected to the next screen as shown below.</p>
<h3>Step 4</h3>
<p>You need to enter the payment details, that is either credit card or debit card, along with its expiry date and the card holder's name as shown below &minus;</p>
<img src="/aws_lambda/images/payment_information.jpg" alt="Payment Information" />
<h3>Step 5</h3>
<p>Once all the details are entered, click <b>Secure Submit</b> and it will validate the card with the bank and will give you the <b>OTP</b> on your mobile which is linked with the card. You can find a window as shown below &minus;</p>
<img src="/aws_lambda/images/card_details.jpg" alt="Card Details" />
<p>Now, enter the <b>OTP</b> details and click <b>Make Payment</b>. You are charged based on the country selected.</p>
<h3>Step 6</h3>
<p>Once the payment is done the next step is phone verification. You need to enter your mobile number as shown below &minus;</p>
<img src="/aws_lambda/images/phone_verification.jpg" alt="Phone Verification" />
<p>Once details are filled click <b>Call Me Now</b>. AWS will call immediately using automated system. When prompted on call, enter the 4-digit number that will appear on your AWS site to your phone using your phone keypad. This will verify your number and you will get the mail activation in the mail id specified at the start while creating login.</p>
<h3>Step 7</h3>
<p>Click the mail link and enter the account name or email id and the password and login to you to the AWS services as shown below &minus;</p>
<img src="/aws_lambda/images/account_name.jpg" alt="Account Name" />
<p>The account name is displayed at top right corner as shown above. You can now start using the AWS Lambda service. For AWS Lambda service the languages supported are NodeJS, Python, Java, C# and Go.</p>
<h2>Installation of Visual Studio 2017</h2>
<p>There are 2 IDEs compatible with AWS: <b>Visual Studio</b> and <b>Eclipse</b>. In this section, we will discuss installation ofVisual studio 2017 on Windows, Linux Mac. Go to the official site of Visual Studio : <a href="https://www.visualstudio.com/downloads/" rel="nofollow" target="_blank">https://www.visualstudio.com/downloads/</a>. You can find the welcome screen as shown &minus;</p>
<p>Download the community version ie <b>Visual Studio Community 2017</b> as its a free now for practice. Once installed, it will run you through the installation steps where you need to select packages to be used later. You can select<b> nodejs, python, c#</b> package for us to work later.</p>
<img src="/aws_lambda/images/visual_studio.jpg" alt="Visual Studio" />
<h2>AWS Toolkit Support for Visual Studio 2017</h2>
<p>Once you have Visual Studio 2017 installed, you will have to follow the given steps for installing AWS Toolkit support for Visual Studio 2017 &minus;</p>
<h3>Step 1</h3>
<p>Go to <a href="https://aws.amazon.com/visualstudio/" rel="nofollow" target="_blank">https://aws.amazon.com/visualstudio/</a> and download the AWS toolkit for Visual Studio.The display is as shown below &minus;</p>
<img src="/aws_lambda/images/aws_toolkit.jpg" alt="AWS Toolkit" />
<p>Note that the package downloaded for Visual Studio 2017 is <b>vsix</b> package. If your visual studio version is between 2013-2015, it will install a <b>msi</b> installer. Click the <b>Download</b> button as shown below.</p>
<img src="/aws_lambda/images/aws_toolkit_download.jpg" alt="AWS Toolkit Download" />
<h3>Step 2</h3>
<p>Now, double click the vsix package downloaded and it will run you through installation steps as shown below &minus;</p>
<img src="/aws_lambda/images/aws_installation.jpg" alt="AWS Installation" />
<p>Once Visual Studio is successfully installed, you can see a window, as shown below &minus;</p> 
<img src="/aws_lambda/images/install_complete.jpg" alt="Install Complete" />
<h3>Step 3</h3>
<p>Now, open Visual Studio 2017 and you should see a welcome page from AWS as shown below &minus;</p>
<img src="/aws_lambda/images/aws_welcome_page.jpg" alt="AWS welcome page" />
<p>Note that you need to add the access key, secret key, account number to get started and use the AWS services from visual studio.s</p>
<h2>AWS Lambda BoilerPlate for NodeJS</h2>
<p>You can use it with <b>visual studio code</b> as shown below.</p>
<h3>Step 1</h3>
<p>You can download <b>Visual studio code</b> for free from the official website:<a href="https://www.visualstudio.com/downloads/" rel="nofollow" target="_blank">https://www.visualstudio.com/downloads/.</a> The home page of Visual Studio downloads looks like this &minus;</p>
<img src="/aws_lambda/images/visual_studio_code.jpg" alt="Visual Studio Code" />
<h3>Step 2</h3>
<p>Now, open Visual Studio code as shown below &minus;</p>
<img src="/aws_lambda/images/open_visual_studio.jpg" alt="Open Visual Studio" />
<h3>Step 3</h3>
<p>To install support for AWS, <b>support for nodejs</b> option is available inside extensions. You can search for AWS and it will display the option as follows &minus;</p>
<img src="/aws_lambda/images/support_nodejs.jpg" alt="Support Nodejs" />
<h3>Step 4</h3>
<p>Now, install the boilerplate for AWS Lambda in <b>nodejs</b> as shown &minus;</p>
<img src="/aws_lambda/images/boilerplate_nodejs.jpg" alt="Boilerplate Nodejs" />
<h3>Step 5</h3>
<p>Click the repository and clone it in Visual Studio to start writing the Lambda function in Visual Studio. It redirects you to this repository which we can clone in Visual Studio: <a href="https://github.com/loganarnett/vscode-lambda-snippets" rel="nofollow" target="_blank">https://github.com/loganarnett/vscode-lambda-snippets</a>. Now, open command palette from <b>View</b> option in Visual Studio.</p>
<img src="/aws_lambda/images/command_palette.jpg" alt="Command Palette" />
 <h3>Step 6</h3>
<p>Click on it and choose git clone as shown below &minus;</p>
<img src="/aws_lambda/images/git_clone.jpg" alt="Git Clone" />
<h3>Step 7</h3>
<p>Enter the repository url and save it as per your choice locally. Create <b>index.js</b> file as shown below to work with lambda function &minus;</p>
<img src="/aws_lambda/images/lambda_function.jpg" alt="Lambda Function" />
<p></p>
<img src="/aws_lambda/images/lambda_snippets.jpg" alt="Lambda Snippets" />
<h2>Installation of Eclipse IDE</h2>
<p>Now, you will have to install latest eclipse Java EE IDE. You can download it from Eclipse official site: <a href="https://www.eclipse.org/downloads/" rel="nofollow" target="_blank">https://www.eclipse.org/downloads/</a></p>
<img src="/aws_lambda/images/eclipse_ide_installation.jpg" alt="Eclipse IDE Installation" />
<p></p>
<img src="/aws_lambda/images/eclipse_ide_java.jpg" alt="Eclipse Ide Java" />
<h2>AWS Toolkit Support for Eclipse IDE</h2>
<p>Once Eclipse is installed, perform the following steps &minus;</p>
<h3>Step 1</h3>
<p>Go to help from the menu and click <b>Install New Software</b>.</p>
<h3>Step 2</h3>
<p>Enter <a href="https://aws.amazon.com/eclipse" rel="nofollow" target="_blank">https://aws.amazon.com/eclipse</a> in the text box labelled <b>Work with</b> at the top of the dialog.</p>
<h3>Step 3</h3>
<p>Now, select the required <b>AWS Core Management Tools</b> and other optional items from the list shown below.</p>
<img src="/aws_lambda/images/core_management_tools.jpg" alt="Core Management Tools" />
<h3>Step 4</h3>
<p>Now, click <b>Next</b>. Eclipse will guide you through the remaining installation steps as given in the further steps given below.</p>
<h3>Step 5</h3>
<p>The AWS core modules are displayed in the grid below as shown in the screenshot given below &minus;</p>
<img src="/aws_lambda/images/aws_core_modules.jpg" alt="AWS Core Modules" />
<h3>Step 6</h3>
<p>Once installed the AWS tool will be available in Eclipse as shown below &minus;</p>
<img src="/aws_lambda/images/eclipse_worksheet.jpg" alt="Eclipse Worksheet" />
<p></p>
<img src="/aws_lambda/images/eclipse_tools.jpg" alt="Eclipse Tools" />
<h3>Step 7</h3>
<p>You can see the following screen when you click on the Amazon service.</p>
<img src="/aws_lambda/images/amazon_service.jpg" alt="Amazon Service" />
<p>Now, click on AWS Explorer to see the services available. We shall discuss how to work with the installed IDE in upcoming chapters.</p>
<h1>AWS Lambda – Introduction</h1>
<p>AWS Lambda is a service which takes care of computing your code without any server. It is said to be serverless compute. The code is executed based on the response of events in AWS services like adding /removing files in S3 bucket, updating Amazon DynamoDBtables, HTTP request from Amazon Api gateway etc.</p>
<p>AWS Lambda code can be written in NodeJS, Java, C#, Python and Go. This chapter will talk in detail about creating AWS Lambda function in AWS console.</p>
<h2>AWS Console</h2>
<p>Login to AWS Console at the link <a href="https://aws.amazon.com/console" rel="nofollow" target="_blank">https://aws.amazon.com/console</a>. Once you login into it, it will redirect you to the screen where AWS services are displayed.</p>
<img src="/aws_lambda/images/aws_console.jpg" alt="AWS Console" />
<h2>Example: Creating a Function</h2>
<p>Let us understand the functionality of AWS Console with the help of an Example. Click on Lambda (marked above), it will redirect to create function as shown below &minus;</p>
<img src="/aws_lambda/images/create_function.jpg" alt="Create Function" />
<p>Click <b>Create function</b> button and the screen displays following details &minus;</p>
<img src="/aws_lambda/images/create_function_display.jpg" alt="Create Function Display" />
<p>Note that, by default, the option is <b>Author from scratch</b>. This option lets you to write the Lambda code from scratch. It will just have a simple function with <b>hello world</b> message.</p>
<p>The second option <b>Blue prints</b> has following details.</p>
<img src="/aws_lambda/images/blue_print.jpg" alt="Blue Print" />
<p>It gives details of code already written for some of the aws services in languages available with AWS Lambda. Incase you need to write AWS Lambda code for any services you can check in <b>blue prints</b> and get started.</p>
<p>The third option <b>Serverless Application Repository</b> has the setup of serverless application which will help to deploy the AWS Lambda code.</p>
<p>In the discussion further, we will work on the first option where we create the AWS lambda function using <b>Author from scratch</b>.</p>
<p>Before we create Lambda function, will need a role i.e, permission for working with AWS services and aws lambda. Later the Role has to be assigned to aws lambda function.</p>
<h2>Role creation in AWS Console</h2>
<p>For creating a role in AWS Console, go to AWS console services and click on IAM as shown below &minus;</p>
<img src="/aws_lambda/images/role_creation.jpg" alt="Role creation" />
<p>Now, if you click <b>IAM</b>, you will the screen as shown below &minus;</p>
<img src="/aws_lambda/images/dashboard.jpg" alt="Dashboard" />
<p>If you select <b>Roles</b>, you can see the following buttons on the screen &minus;</p>
<img src="/aws_lambda/images/create_role_button.jpg" alt="Create Role Button" />
<p>Now, click <b>Create role</b>. It will ask you to choose the service where you need to use the role created.</p>
<img src="/aws_lambda/images/create_role_services.jpg" alt="Create Role Services" />
<p>Since we need to use this role with AWS Lambda, select <b>Lambda</b> and click <b>Next:Permissions</b> button as shown above. The next screen displays the policy name which is available as per AWS services. You can select the policy from here &minus;</p>
<img src="/aws_lambda/images/attach_permission_policy.jpg" alt="Attach permission Policy" />
<p>For Example, if you want permission for AWS Lambda to work with S3 and DynamoDB, you need to select the policy. In the search box, enter the AWS service and click on the checkbox. You can select multiple policies and later click on <b>Next:Review</b>.</p>
<p>It is also possible to create policy of your own. For Example, there is dynamodb table and you need to give permission only to that table, under such cases you can create policy.</p>
<p>Click on <b>Create policy</b> button as shown in the screen above. Following are the details displayed on screen.</p>
<img src="/aws_lambda/images/create_policy.jpg" alt="Create policy" />
<p>Choose a <b>Service</b> for which you are creating the policy. Later it will display data for Actions, <b>resources</b> and <b>Request conditions</b>.</p>
<img src="/aws_lambda/images/request_conditions.jpg" alt="Request Conditions" />
<p>Now, we should choose the service. Let us select <b>AWS Dynamodb</b> from search. <b>Actions</b> has following details &minus;</p>
<img src="/aws_lambda/images/aws_dynamodb.jpg" alt="AWS Dynamodb" />
<p>Now, enter the <b>Access level</b> you want to give to DynamoDB. Then, <b>resources</b> will display the following details &minus;</p>
<img src="/aws_lambda/images/resources.jpg" alt="resources" />
<p>Now, select the table resource type. You can see the following output &minus;</p>
<img src="/aws_lambda/images/table_resource.jpg" alt="Table ReSource" />
<p>For permission on table, you need to <b>Add ARN</b>. ARN is the details which is unique to the table created in AWS DynamoDB. You will get the details when the table is created in dynamodb.</p>
<p>If you click <b>Add ARN</b> and it will display following details &minus;</p>
<img src="/aws_lambda/images/add_arn.jpg" alt="Add ARN" />
<p>Now, if you enter the <b>ARN</b> and the <b>Region, Account</b> and <b>Table</b> name will get populated. You should click <b>Add</b> button to add the policy. Similarly, you can create policies for other services.</p>
<img src="/aws_lambda/images/role_description.jpg" alt="Role Description" />
<p>Here, we have selected two policies <b>AmazonS3FullAccess</b> and <b>AmazonDynamoDBFullACcess</b>. We have given full access to S3 and DynamoDB in that role. However, it is suggested that you give permission only to necessary buckets and tables.</p>
<p>You can follow the steps discussed earlier to create the policies using <b>ARN</b>.</p>
<h3>Step 1</h3>
<p>Click <b>Create role</b> button to create the role. All the roles created are displayed as shown &minus;</p>
<img src="/aws_lambda/images/create_role_display.jpg" alt="Create Role Display" />
<h3>Step 2</h3>
<p>Note that you can select the role you require incase you need any modification for the role created. If we select <b>Author from scratch option</b>, you have to enter <b>Name, Runtime and Role</b>.</p>
<img src="/aws_lambda/images/author_from_scratch.jpg" alt="Author From Scratch" />
<h3>Step 3</h3>
<p>You can observe the following details in <b>Runtime</b> dropdown &minus;</p>
<img src="/aws_lambda/images/runtime.jpg" alt="Runtime" />
<h3>Step 4</h3>
<p>You can select the runtime of your choice and proceed as shown.</p> 
<img src="/aws_lambda/images/choice_proceed.jpg" alt="Choice Proceed" />
<p><b>Role</b> dropdown has following options &minus;</p>
<ul class="list">
<li><p><b>Choose an existing role &minus;</b> This will display all the roles created in the IAM roles.</p></li>
<li><p><b>Create new role from template(s) &minus;</b> This will allow you to create role and will display permission to be selected for that role. Observe the screenshot for a better understanding.</p></li>
<li><p><b>Create a custom role &minus;</b> This allows the user to create policies as we discussed earlier.</p></li>
</ul>
<h3>Step 5</h3>
<p>Select the <b>runtime, role</b> and add the function. Click on <b>Create function</b> button to create the lambda function. The next screen displayed is as follows &minus;</p>
<img src="/aws_lambda/images/create_function_button.jpg" alt="Create Function Button" />
<h2>Parts of AWS Lambda Function</h2>
<p>There are two parts for AWS Lambda function:<b>Configuration</b> and <b>Monitoring</b>. Let us discuss each in detail.</p>
<h2>Configuration</h2>
<p>The following functionalities are included in the Configuration.</p>
<p><b>Add Triggers</b></p>
<p>The triggers that are needed to added to AWS Lambda function are displayed as follows &minus;</p>
<img src="/aws_lambda/images/add_triggers.jpg" alt="Add Triggers" />
<p>Note that when we select a trigger, we need to add the configuration details for that trigger. For Example for S3 trigger, we need to select the bucket name; for Dynamodb trigger we need to select the table name.</p>
<h3>Example</h3>
<p>Let us see an example of configuration details for a S3 trigger &minus; </p>
<img src="/aws_lambda/images/configuration.jpg" alt="Configuration" />
<p>Now, add configuration details for S3 trigger added &minus;</p>
<img src="/aws_lambda/images/configuration_details.jpg" alt="Configuration Details" />
<p>Here you need to select the <b>bucket name, event type</b> on which you want to trigger Lambda, prefix and filter pattern if any and <b>Add</b> the trigger.</p>
<h3>Adding Code in Lambda</h3>
<p>Now, we should focus on the Lambda code to be written. To add code in aws lambda there are three options &minus;</p>
<ul class="list">
<li>Using the inline editor</li>
<li>Using .zip file</li>
<li>Upload file from Amazon S3</li>
</ul>
<p>It is shown in the screenshot given below &minus;</p>
<img src="/aws_lambda/images/screenshot.jpg" alt="Screenshot" />
<p>Let us discuss each of them in detail.</p>
<p><b>Using the inline editor</b></p>
<p>The inline code editor where you can write you code is as follows &minus;</p>
<img src="/aws_lambda/images/inline_editor.jpg" alt="inline_editor" />
<p>You can write your code by choosing the language of your choice. You are allowed to choose the runtime again here.</p>
<p>Observe the following screenshot for a better understanding &minus;</p>
<img src="/aws_lambda/images/runtime_menu.jpg" alt="Runtime Menu" />
<p>The code has to be written in <b>index.js.Handler</b>. Details will differ based on runtime. For <b>nodejs</b>, it is <b>filename.export function</b> which is right now <b>index.lambda handler</b>.</p>
<p><b>Upload a .ZIP file</b></p>
<p>You can first write the code, zip it and upload the zip file by selecting <b>Upload a .ZIP file</b>.</p> 
<p><b>Upload a file from Amazon S3</b></p>
<p>You can upload the file in S3 bucket and choose the option <b>Upload a file from Amazon S3</b>.</p>
<p>Note that for <b><i>.ZIP</i></b> and <b><i>S3</i></b> it will not be possible to change the runtime.</p>
<h3>Environment variables</h3>
<p>They take in key value pairs and share them with AWS Lambda code. We can use environment variables in AWS Lambda for storing the database connection details, file details as to store the output, log file details etc.</p>
<img src="/aws_lambda/images/environment_variables.jpg" alt="Environment variables" />
<h3>Tags</h3>
<p>They are key-value pairs added to AWS Lambda for better organizing the function when used across different regions. For a simple use case, it is not required. When there are lot of Lambda functions created, the tagging helps in filtering and managing the Lambda functions.</p>
<img src="/aws_lambda/images/tags.jpg" alt="Tags" />
<h3>Execution role</h3>
<p>You can change the role again here if not done properly at the start of creating Lambda function. You can update or create new role here. It provides same options which were displayed at the start of creating Lambda function.</p>
<img src="/aws_lambda/images/execution_role.jpg" alt="Execution Role" />
<h3>Basic Settings</h3>
<p>Here you need to enter the short description of what your Lambda function is doing. Select the memory and timeout which are required for the Lambda function.</p>
<img src="/aws_lambda/images/basic_settings.jpg" alt="Basic Settings" />
<h3>Network</h3>
<p>This allows you to select the VPC which will allow you to access the Lambda function from the VPC. By default, no VPC is selected.</p>
<img src="/aws_lambda/images/network.jpg" alt="Network" />
<h3>Debugging and Error Handling</h3>
<p>For debugging and errors handling, you can select AWS service to send the details. The options available are <b>None, SNS</b> and <b>SQS</b>.</p>
<img src="/aws_lambda/images/debugging_error_handling.jpg" alt="Debugging and Error Handling" />
<h3>Concurrency</h3>
<p>This allows you to allocate a specific limit of concurrent executions allowed for this function.</p>
<img src="/aws_lambda/images/concurrency.jpg" alt="Concurrency" />
<h3>Auditing and Compliance</h3>
<p>This contains logs which are managed with the help of AWS CloudTrail.</p>
<img src="/aws_lambda/images/auditing_and_compliance.jpg" alt="Auditing and Compliance" />
<p>Once done you need to save the changes using the Save button as shown here &minus;</p>
<img src="/aws_lambda/images/save_button.jpg" alt="Save Button.jpg" />
<p>Now, if you click <b>Test</b> button, it will ask for a test event. You can pass a sample test event as follows &minus;</p>
<p>The test event created is as shown here &minus;</p>
<img src="/aws_lambda/images/configure_test_event.jpg" alt="Configure Test Event" />
<p>Now, save the test event and click the test button to see the execution of AWS Lambda function &minus;</p>
<img src="/aws_lambda/images/execution_result.jpg" alt="Execution Result" />
<p>The code for <b>index.js</b> is as follows &minus;</p>
<pre class="prettyprint notranslate">
exports.lambdahandler = (event, context, callback) =&gt; {
   // TODO implement
   console.log(event.key1);
   console.log(event.key2);
   console.log(event.key3);
   callback(null, 'Lambda test');
};
</pre>
<p>Note that callback function is called when there is error or success. If success, you can see <b>Lambda test</b> will get displayed.</p>
<h2>Monitoring</h2>
<p>Select the monitoring tab to view the execution details of Lambda function. The graphs show the details of the execution time, errors occured etc.</p>
<img src="/aws_lambda/images/monitoring.jpg" alt="Monitoring" />
<p>You can also view the logs in Cloudwatch. For this, go to AWS services and select cloudwatch as shown &minus;</p>
<img src="/aws_lambda/images/management_tool.jpg" alt="Management Tool" />
<p>Now, select logs from left side and enter your function name in the filter &minus;</p>
<img src="/aws_lambda/images/cloud_watch.jpg" alt="Cloud Watch" />
<h1>Building the Lambda Function</h1>
<p>AWS Lambda function executes a code when it is invoked. This chapter discusses all these steps involved in the life cycle of AWS Lambda function in detail.</p>
<h2>Steps for Building a Lambda function</h2>
<p>The lifecycle of Lambda function includes four necessary steps &minus;</p>
<ul class="list">
<li>Authoring</li>
<li>Deploying</li>
<li>Monitoring</li> 
<li>Troubleshooting</li>
</ul>
<h2>Authoring Lambda Code</h2>
<p>AWS Lambda function code can be written in following languages &minus;</p>
<ul class="list">
<li>NodeJS</li>
<li>Java,</li>
<li>Python</li>
<li>C#</li>
<li>Go.</li>
</ul>
<p>We can write code for AWS Lambda using the AWS console, AWS CLI, from Eclipse IDE, from Visual Studio IDE, serverless framework etc.</p>
<p>The following table shows a list of languages and the different tools and IDE that can be used to write the Lambda function &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Language</th>
<th style="text-align:center;">IDE for Authoring Lambda Code</th>
</tr>
<tr>
<td class="ts">NodeJS</td>
<td><p>AWS Lambda Console</p>
<p>Visual Studio IDE</p></td>
</tr>
<tr>
<td class="ts">Java</td>
<td>Eclipse IDE</td>
</tr>
<tr>
<td class="ts">Python</td>
<td>AWS Lambda Console</td>
</tr>
<tr>
<td class="ts">C#</td>
<td><p>Visual Studio IDE</p>
<p>.NET core</p></td>
</tr>
<tr>
<td class="ts">Go</td>
<td>AWS Lambda Console</td>
</tr>
</table>
<h2>Deploying Lambda Code</h2>
<p>Once you decide the language you want to write the Lambda function, there are two ways to deploy the code &minus;</p>
<ul class="list">
<li>Directly write the code in AWS console</li>
<li>Zip or jar the files with all the files and dependencies</li>
</ul>
<p>However, remember that proper permission has to given to be given to the zip file.</p>
<h2>Testing Lambda Code</h2>
<p>Lambda Code can be tested for events inside the AWS Lambda console. It is also possible to test the Lambda function from the AWS cli and serverless cli. AWS console has also event data which can be used as sample events while testing AWS Lambda function.</p>
<h2>Monitoring Lambda function</h2>
<p>Monitoring of Lambda function can be done using the AWS CloudWatch. We can add necessary log messages in languages we choose and see the same in AWS CloudWatch.</p>
<p>To start writing Lambda function, there is pattern to be followed. The following are the main core concepts to be followed for writing a Lambda function &minus;</p>
<h3>Handler</h3>
<p>Handler is a name of the AWS lambda function from where the execution starts. It appears in AWS console as shown below &minus;</p>
<img src="/aws_lambda/images/handler.jpg" alt="Handler" />
<p>Notice that here we have changed the default handler to another name and updated the same in the Handler &minus;</p>
<img src="/aws_lambda/images/default_handler.jpg" alt="Default Handler" />
<p>Note that the way a handler is called differs from the languages selected as runtime.</p>
<h3>Params passed to handler</h3>
<p>If you observe the handler function, the params passed are <b>event, context</b> and <b>call back function</b> as shown below &minus;</p>
<img src="/aws_lambda/images/params_passed.jpg" alt="Params Passed" />
<p><b>Event</b> parameter has all the details for the trigger used.</p>
<p><b>Context</b> parameter basically takes care of runtime details for the Lambda function to execute. We can interact with the Lambda function using the <b>context</b> param. It has the details like the time left before AWS Lambda terminates a function i.e, timeout specified while creating Lambda function, name of the Lambda function, cloudwatch group name, arn details etc.</p>
<h3>Example</h3>
<p>Let us understand the details obtained from AWS Lambda context object with the help of an example &minus;</p>
<pre class="prettyprint notranslate">
exports.lambdahandler = (event, context, callback) =&gt; {
   // TODO implement
   console.log("context object details");
   console.log(JSON.stringify(context));
   callback(null, 'Lambda test');
};
</pre>
<p>When you execute the Lambda function shown above, you can see the following output &minus;</p>
<h3>Output</h3>
<img src="/aws_lambda/images/summary.jpg" alt="Summary" />
<p>The <b>context</b> details are given as follows &minus;</p>
<pre class="result notranslate">
{
   "callbackWaitsForEmptyEventLoop":true,"logGroupName":"/aws/lambda/myfirstlambdafunction",
   "logStreamName":"2018/05/20/[$LATEST]04f17ee4ff7048d5bb1fedffaa807c71","functionName":
   "myfirstlambdafunction","memoryLimitInMB":"128","functionVersion":"$LATEST","invokeid":
   "c931e21c-5bf3-11e8-acfe-47fdbb39eee9","awsRequestId":"c931e21c-5bf3-11e8-acfe-47fdbb39eee9",
   "invokedFunctionArn":"arn:aws:lambda:us-east-1:625297745038:function:myfirstlambdafunction"
}
</pre>
<p>Observe that it has details like functionName, memorylimit, requestId etc.</p>
<h3>Logging</h3>
<p>The logs added inside the Lambda function are displayed in AWS CloudWatch when the AWS function executes. The logs syntax will vary from the language selected. For Example in <b>nodejs</b>, it is console.log.</p>
<p>This is the output you can see in AWSCloudWatch &minus;</p>
<img src="/aws_lambda/images/aws_cloudwatch.jpg" alt="AWSCloudWatch" />
<h3>Error Handling</h3>
<p>AWS Lambda function provides a callback function which is used to notify to the Lambda function that an error or success has happened. Note that here we have used nodejs as the runtime. The error handling will differ as per the language selected.</p>
<p>Observe the Example given here for a better understanding &minus;</p>
<pre class="prettyprint notranslate">
exports.lambdahandler = (event, context, callback) =&gt; {
   // TODO implement
   var error = new Error("There is error in code");
   callback(error);
};
</pre>
<h3>Output</h3>
<p>When you test the Lambda code, you can find the output as shown below &minus;</p> 
<img src="/aws_lambda/images/execution_result_failed.jpg" alt="Execution Result Failed" />
<p>The log details as follows &minus;</p>
<img src="/aws_lambda/images/log_output.jpg" alt="Log Output" />
<h1>AWS Lambda – Function in NODEJS</h1>
<p>Nodejs is one of the languages that AWS Lambda function supports. The version supported with nodejs are v6.10 and v8.10. In this chapter, we will learn about various functionalities of AWS Lambda function in NODEJS in detail.</p>
<h2>Handler in NodeJS</h2>
<p>To writeAWS Lambda function in nodejs, we should first declare a handler first. The handler in nodejs is name of the file and the name of the export function. For Example, the name of the file is <b>index.js</b> and the export function name is <b>lambda handler</b>, so its corresponding handler is <b>index.lambdahandler</b></p>
<p>Observe a sample handler shown here &minus;</p>
<pre class="prettyprint notranslate">
exports.lambdahandler = function(event, context, callback) {   //code goes here}
</pre>
<h2>Params to Handler</h2>
<p>Handler is the main core for building Lambda function. The handler takes three params: <b>event, context</b> and <b>callback</b>.</p>
<h3>Event Parameter</h3>
<p>It has all the details of the event triggered. For Example, if we are using Lambda function to be triggered on S3, the event will have details of the S3 object.</p>
<h3>Context Parameter</h3>
<p>It has the details of the context such as the properties and configuration details of the Lambda function.</p>
<h3>Callback Function</h3>
<p>It helps in giving details back to the caller. The structure of callback looks as follows &minus;</p>
<pre class="result notranslate">
callback(error, result);
</pre>
<p>The parameters of callback function are explained given below &minus;</p>
<p><b>Error &minus;</b> This will have details if any error has occurred during the execution of Lambda function. If the Lambda function succeeds,<b>null</b> can be passed as the first param for callback function.</p>
<p><b>Result &minus;</b> This will give the details of the successful execution of the lambda function. If an error occurs, the result param is ignored.</p>
<p><b>Note &minus;</b> It is not mandatory to use the callback function in AWS Lambda. Incase if there is no callback function, the handler will return it as null.</p>
<p>The valid callback signatures are given below &minus;</p>
<pre class="result notranslate">
callback();                // It will return success, but no indication to the caller
callback(null);            // It will return success, but no indication to the caller
callback(null, "success"); // It will return the success indication to the caller
callback(error);           //  It will return the error indication to the caller
</pre>
<p>Whenever AWS Lambda gets executed the callback details such as error or success, are logged in AWS CloudWatch along with console messages, if any.</p>
<h2>Working with AWS Lambda in Nodejs8.10</h2>
<p>Let us understand how to work with AWS Lambda in nodejs8.10 and invoke the function in sync and async way.</p>
<h3>Invoking Lambda Function in Sync Way</h3>
<p>The following example gives you an idea about invoking Lambda function in sync way &minus;</p>
</h2>
<pre class="prettyprint notranslate">
exports.handler = function(event, context, callback) {
   let arrItems = [4,5,6,8,9,10,35,70,80,31];
   function countevennumbers (items) {
      return new Promise(resolve =&gt; {
         setTimeout(() =&gt; {
            let a = 0;
            for (var i in items) {
               if (items[i] % 2 == 0) {
                  a++;
               } 
            }
            resolve(a);
         },2000);
      });
   }
   let evennumber = countevennumbers(arrItems);
   callback(null,'even numbers equals ='+evennumber);
};
</pre>	
<p>You can observe the following output after testing this code in AWS console &minus;</p>
<img src="/aws_lambda/images/even_number_count.jpg" alt="Even Number Count" />
<p>Note that the output from the above code is a promise object. It does not give the count, as the count is incremented inside a setTimeout and the function call does not wait for the execution inside setTimeout and returns the promise object.</p>
<p>If we had <b>async/await</b> on the handler function will get exact output of from the lambda function.</p>
<h3>Invoking the Handler in an Async Way</h3>
<p>The following example gives you an idea about invoking Lambda function in an async way &minus;</p>
</h2>
<pre class="prettyprint notranslate">
exports.handler = async function(event, context, callback) {
   let arrItems = [4,5,6,8,9,10,35,70,80,31];
   function countevennumbers (items) {
      return new Promise(resolve =&gt; {
         setTimeout(() =&gt; {
            let a = 0;
            for (var i in items) {
               if (items[i] % 2 == 0) {
                  a++;
               } 
            }
            resolve(a);
         }, 2000);
      });
   }
   let evennumber = await countevennumbers(arrItems);
   callback(null,'even numbers equals ='+evennumber);
};
</pre>
<p>We have added <b>async</b> and <b>await</b> in above code. When we use <b>await</b> beside the function call, the execution pauses till the promise inside the function gets resolved. Note that <b>await</b> is valid only for <b>async</b> functions.</p>
<p>You can observe the following output after testing this code in AWS console &minus;</p>
<img src="/aws_lambda/images/even_number_count_output.jpg" alt="Even Number Count Output" />
<h2>ContextDetails in NodeJS</h2>
<p>Context object gives details such as the name of the Lambda function, time remaining in milliseconds, request id, cloudwatch group name, timeout details etc.</p>
<p>The following tables shows the list of methods and attributes available with context object &minus;</p>
<h3>Method available for context object</h3>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Method Name &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>getRemainingTimeInMillis()</b></p>
<p>This method gives the remaining time in milliseconds until the Lambda function terminates the function</p></td>
</tr>
</table>
<h3>Attributes available for context object</h3>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Attribute name &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>functionName</b></p>
<p>This gives AWS Lambda function name</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>functionVersion</b></p>
<p>This gives the version of AWS Lambda function executing</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>nvokedFunctionArn</b></p>
<p>This will gives ARN details.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>memoryLimitInMB</b></p>
<p>This shows the memory limit added while creating Lambda function</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>awsRequestId</b></p>
<p>This gives the AWS request id.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>logGroupName</b></p>
<p>This will give the name of the cloudwatch group name</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>logStreamName</b></p>
<p>This will give the name of the cloudwatch log stream name where the logs are written.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>identity</b></p>
<p>This will give details about amazon cognito identity provider when used with aws mobile sdk.</p>
<p>Details given are as follows &minus;</p>
<ul class="list">
<li>identity.cognito_identity_id</li>
<li>identity.cognito_identity_pool_id</li>
</ul></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>clientContext</b></p>
<p>This will details of the client application when used with aws mobile sdk. The details given are as follows &minus;</p>
<ul class="list">
<li>client_context.client.installation_id</li>
<li>client_context.client.app_title</li>
<li>client_context.client.app_version_name</li>
<li>client_context.client.app_version_code</li>
<li>client_context.client.app_package_name</li>
<li>client_context.custom - it has dict of custom values from the mobile client app</li>
<li>client_context.env - it has environment details from the AWS Mobile SDK</li>
</ul></td>
</tr>
</table>
<p>Look at the following example to get a better idea about context object &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log('Remaining time =&gt;', context.getRemainingTimeInMillis());
   console.log('functionName =&gt;', context.functionName);
   console.log('AWSrequestID =&gt;', context.awsRequestId);
   console.log('logGroupName =&gt;', context.log_group_name);
   console.log('logStreamName =&gt;', context.log_stream_name);
   console.log('clientContext =&gt;', context.clientContext);
   callback(null, 'Name of aws Lambda is=&gt;'+context.functionName);
};
</pre>
<p>You can observe the following output after testing this code in AWS console &minus;</p>
<img src="/aws_lambda/images/suceeded_logs.jpg" alt="Succeeded Logs" />
<p>You can observe the following log output after testing this code in AWS console &minus;</p>
<img src="/aws_lambda/images/log_output_testing.jpg" alt="Log Output Testing" />
<h2>Logging in NodeJS</h2>
<p>We can use console.log for logging in NodeJS.The log details can be fetched from CloudWatch service against the Lambda function.</p>
<p>Observe the following example for a better understanding &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log('Logging for AWS Lamnda in NodeJS');
   callback(null, 'Name of aws Lambda is=&gt;'+context.functionName);
};
</pre>
<p>You can observe the following output after testing this code in AWS console &minus;</p>
<img src="/aws_lambda/images/output_after_testing.jpg" alt="Output After Testing" />
<p>You can observe the following screenshot from CloudWatch &minus;</p>
<img src="/aws_lambda/images/screenshot_cloud_watch.jpg" alt="Screenshot Cloud Watch" />

<h2>Error Handling in NodeJS</h2>
<p>Let us understand how error notification is done in NodeJS. Observe the following code &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = function(event, context, callback) {
   // This Source code only throws error. 
   var error = new Error("something is wrong");
   callback(error);   
};
</pre>
<p></p>
<img src="/aws_lambda/images/execution_result_details.jpg" alt="Execution Result Details" />
<p>You can observe the following in the log output &minus;</p>
<img src="/aws_lambda/images/log_output_observation.jpg" alt="Log Output Observation" />
<p>The error details are given in the callback as follows &minus;</p>
<pre class="result notranslate">
{
   "errorMessage": "something is wrong",
   "errorType": "Error",
   "stackTrace": [    "exports.handler (/var/task/index.js:2:17)"  ]
}
</pre>
<h1>AWS Lambda – Function in Java</h1>
<p>In this chapter, let us understand in detail how to create a simple AWS Lambda function in Java in detail.</p>
<h2>Creating JAR file in Eclipse</h2>
<p>Before proceeding to work on creating a lambda function in AWS, we need AWS toolkit support for Eclipse. For any guidance on installation of the same, you can refer to the <b>Environment Setup</b> chapter in this tutorial.</p>
<p>Once you are done with installation, follow the steps given here &minus;</p>
<h3>Step 1</h3>
<p>Open Eclipse IDE and create a new project with <b>AWS Lambda Java Project</b>. Observe the screenshot given below for better understanding &minus;</p>
<img src="/aws_lambda/images/select_wizard.jpg" alt="Select Wizard" />
<h3>Step 2</h3>
<p>Once you select <b>Next</b>, it will redirect you the screen shown below &minus;</p>
<img src="/aws_lambda/images/lambda_java_project.jpg" alt="Lambda Java Project" />
<h3>Step 3</h3>
<p>Now, a default code is created for Input Type <b>Custom</b>. Once you click <b>Finish</b> button the project gets created as shown below &minus;</p>
<img src="/aws_lambda/images/custom_type.jpg" alt="Custom Type" />
<h3>Step 4</h3>
<p>Now, right click your project and export it. Select <b>Java / JAR</b> file from the <b>Export</b> wizard and click <b>Next</b>.</p>
<img src="/aws_lambda/images/export_wizard.jpg" alt="Export Wizard" />
<h3>Step 5</h3>
<p>Now, if you click <b>Next</b>, you will be prompted save the file in the destination folder which will be asked when you click on next.</p>
<p>Once the file is saved, go back to AWS Console and create the AWS Lambda function for Java.</p>
<img src="/aws_lambda/images/aws_console_for_java.jpg" alt="AWS Console For Java" />
<h3>Step 6</h3>
<p>Now, upload the <b>.jar</b> file that we created using the <b>Upload</b> button as shown in the screenshot given below &minus;</p>
<img src="/aws_lambda/images/upload_button.jpg" alt="Upload Button" />
<h2>Handler Details for Java</h2>
<p><b>Handler</b> is <b>package name</b> and <b>class name</b>. Look at the following example to understand handler in detail &minus;</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
package com.amazonaws.lambda.demo;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
public class LambdaFunctionHandler implements RequestHandler<Object, String> {
   @Override
   public String handleRequest(Object input, Context context) {
      context.getLogger().log("Input: " + input);

      // TODO: implement your handler
      return "Hello from Lambda!";
   }
}
</pre>	 
<p>Observe that from the above code, the handler will be <b>com.amazonaws.lambda.demo.LambdaFunctionHandler</b></p>
<p>Now, let us test the changes and see the output &minus;</p>
<img src="/aws_lambda/images/lambda_function_handler.jpg" alt="Lambda Function Handler" />
<p></p>
<img src="/aws_lambda/images/lambda_function_handler_output.jpg" alt="Lambda Function Handler Output" />
<h2>Context Object in Java</h2>
<p>Interaction with AWS Lambda execution is done using the context. It provides following methods to be used inside Java &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Context Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>getMemoryLimitInMB()</b></p>
<p>this will give the memory limit you specified while creating lambda function.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>getFunctionName()</b></p>
<p>this will give the name of the lambda function.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>getFunctionVersion()</b></p>
<p>this will give the version of the lambda function running.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>getInvokedFunctionArn()</b></p>
<p>this will give the ARN used to invoke the function.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>getAwsRequestId()</b></p>
<p>this will give the aws request id. This id gets created for the lambda function and it is unique. The id can be used with aws support incase if you face any issues.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>getLogGroupName()</b></p>
<p>this will give the aws cloudwatch group name linked with aws lambda function created. It will be null if the iam user is not having permission for cloudwatch logging.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>getClientContext()</b></p>
<p>this will give details about the app and device when used with aws mobile sdk. It will give details like version name and code, client id, title, app package name. It can be null.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>getIdentity()</b></p>
<p>this will give details about the amazon cognito identity when used with aws mobile sdk. It can be null.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>getRemainingTimeInMillis()</b></p>
<p>this will give the remaining time execution in milliseconds when the function is terminated after the specified timeout.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>getLogger()</b></p>
<p>this will give the lambda logger linked with the context object.</p></td>
</tr>
</table>
<p>Now, let us update the code given above and observe the output for some of the methods listed above. Observe the Example code given below for a better understanding &minus;</p>
<pre class="prettyprint notranslate">
package com.amazonaws.lambda.demo;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
public class LambdaFunctionHandler implements RequestHandler&lt;Object, String&gt; {
   @Override
   public String handleRequest(Object input, Context context) {
      context.getLogger().log("Input: " + input);
      System.out.println("AWS Lambda function name: " + context.getFunctionName());
      System.out.println("Memory Allocated: " + context.getMemoryLimitInMB());
      System.out.println("Time remaining in milliseconds: " + context.getRemainingTimeInMillis());
      System.out.println("Cloudwatch group name " + context.getLogGroupName());
      System.out.println("AWS Lambda Request Id " + context.getAwsRequestId());
      
      // TODO: implement your handler
      return "Hello from Lambda!";
   }
}
</pre>
<p>Once you run the code given above, you can find the output as given below &minus;</p>
<img src="/aws_lambda/images/context_object.jpg" alt="Context Object" />
<h3>Logs for context</h3>
<p>You can observe the following output when you are viewing your log output &minus;</p>
<img src="/aws_lambda/images/logs_for_context.jpg" alt="Logs for Context" />
<p>The memory allocated for the Lambda function is 512MB. The time allocated is 25 seconds. The time remaining as displayed above is 24961, which is in milliseconds. So 25000 - 24961 which equals to 39 milliseconds is used for the execution of the Lambda function. Note that Cloudwatch group name and request id are also displayed as shown above.</p>
<p>Note that we have used the following command to print logs in Java &minus;</p>
<pre class="result notranslate">
System.out.println (“log message”)
</pre>
<p>The same is available in CloudWatch. For this, go to AWS services, select <b>CloudWatchservices</b> and click <b>Logs</b>.</p>
<p>Now, if you select the Lambda function, it will display the logs date wise as shown below &minus;</p>
<img src="/aws_lambda/images/logs_date_wise.jpg" alt="Logs Date Wise" />
<h2>Logging in Java</h2>
<p>You can also use Lambdalogger in Java to log the data. Observe the following example that shows the same &minus;</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
package com.amazonaws.lambda.demo;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.LambdaLogger;
public class LambdaFunctionHandler implements RequestHandler&lt;Object, String&gt; {
   @Override
   public String handleRequest(Object input, Context context) {
      LambdaLogger logger = context.getLogger();
      logger.log("Input: " + input);
      logger.log("AWS Lambda function name: " + context.getFunctionName()+"\n");
      logger.log("Memory Allocated: " + context.getMemoryLimitInMB()+"\n");
      logger.log("Time remaining in milliseconds: " + context.getRemainingTimeInMillis()+"\n");
      logger.log("Cloudwatch group name " + context.getLogGroupName()+"\n");
      logger.log("AWS Lambda Request Id " + context.getAwsRequestId()+"\n");
      
      // TODO: implement your handler
      return "Hello from Lambda!";
   }
}
</pre>	 
<p>The code shown above will give you the following output &minus;</p>
<img src="/aws_lambda/images/logging_java.jpg" alt="Logging Java" />
<p>The output in CloudWatch will be as shown below &minus;</p>
<img src="/aws_lambda/images/logging_java_output.jpg" alt="Logging Java Output" />
<h2>Error handling in Java for Lambda Function</h2>
<p>This section will explain how to handle errors in Java for Lambda function. Observe the following code that shows the same &minus;</p>
<pre class="prettyprint notranslate">
package com.amazonaws.lambda.errorhandling;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
public class LambdaFunctionHandler implements RequestHandler&lt;Object, String&gt; {
   @Override
   public String handleRequest(Object input, Context context) {
      throw new RuntimeException("Error from aws lambda");
   } 
}
</pre>	 
<p>Note that the error details are displayed in <b>json</b> format with errorMessage <b>Error from AWS Lambda</b>. Also, the <b>ErrorType</b> and <b>stackTrace</b> gives more details about the error.</p>
<p>The output and the corresponding log output of the code given above will be as shown in the following screenshots given below &minus;</p>
<img src="/aws_lambda/images/error_handling_java.jpg" alt="Error handling Java" />
<p></p>
<img src="/aws_lambda/images/error_handling_output.jpg" alt="Error handling Output" />
<h1>AWS Lambda – Function in Python</h1>
<p>In this chapter, we will create a simple AWS Lambda function in Python and understand its working concepts following detail.</p>
<p>Before proceeding to work on creating a Lambda function in AWS, we need AWS toolkit support for Python. For this purpose, follow the steps given below and observe the corresponding screenshots attached &minus;</p>
<h3>Step 1</h3>
<p>Login to AWS console and create Lambda function and select the language as Python.</p>
<img src="/aws_lambda/images/lambda_function_python.jpg" alt="Lambda Function Python" />
<h3>Step 2</h3>
<p>Now, click <b>Create function</b> button and enter the details for creating a simple AWS Lambda in Python. This code returns the message <b>Hello from Lambda using Python</b> and looks as shown here &minus;</p>
<img src="/aws_lambda/images/create_function_python.jpg" alt="Create Function Python" />
<h3>Step 3</h3>
<p>Now, save the changes and the test the code to see the output. You should see the following output and logs when you test it in AWS console using the test button from the UI.</p>
<img src="/aws_lambda/images/aws_console_python.jpg" alt="AWS_console_Python" />
<h3>Step 4</h3>
<p>Now, you can write code inside any editor or an IDE for Python. Here, we are using visual studio code for writing the code. You should later zip the file and upload in AWS console.</p>
<img src="/aws_lambda/images/ide_for _python.jpg" alt="IDE for Python." />
<p>Here, we have zipped the code and using it AWS console.</p>
<h3>Step 5</h3>
<p>Now, select <b>Upload a .ZIP file</b> option as shown below &minus;</p>
<img src="/aws_lambda/images/upload_file.jpg" alt="Upload File" />
<h2>Handler Details for Python</h2>
<p>Note that the handler has to be name of the file followed by name of the function. In the above case, our file name is <b>hellopython.py</b> and name of the function is <b>my_handler;</b> so the handler will be <b>hellopython.my_handler</b>.</p>
<p>Once the upload is done and changes are saved, it actually shows the details of the zip file in the online editor in AWS Lambda console. Now, let us test the code to see the output and logs.</p>
<img src="/aws_lambda/images/handler_details_python.jpg" alt="Handler Details Python" />
<p>Now, let us understand the details of the Lambda function using the following sample code &minus;</p>
<pre class="result notranslate">
def my_handler(event, context):
   return "aws lambda in python using zip file"
</pre>	 
<p>In the above code, the function name my_handler is having 2 params, event and context.</p>
<h2>Context Object in Python</h2>
<p>Context object gives details like the name of the Lambda function, time remaining in milliseconds, request id, cloud watch group name, timeout details etc.</p>
<p>The methods and attributes available on context object are shown in the tables given below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Method Name &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>get_remaining_time_in_millis()</b></p>
<p>This method gives the remaining time in milliseconds until the lambda function terminates the function</p></td>
</tr>
</table>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Attribute &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>function_name</b></p>
<p>This gives aws lambda function name</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>function_version</b></p>
<p>This gives the version of aws lambda function executing</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>invoked_function_arn</b></p>
<p>This will gives ARN details.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>memory_limit_in_mb</b></p>
<p>This shows the memory limit added while creating lambda function</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>aws_request_id</b></p>
<p>This gives the aws request id.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>og_group_name</b></p>
<p>This will give the name of the cloudwatch group name</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>log_stream_name</b></p>
<p>This will give the name of the cloudwatch log stream name where the logs are written.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>identity</b></p>
<p>This will give details about amazon cognito identity provider when used with aws mobile sdk. Details given are as follows &minus;</p>
<ul class="list">
<li>identity.cognito_identity_id</li>
<li>identity.cognito_identity_pool_id</li></ul></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>client_context</b></p>
<p>This will details of the client application when used with aws mobile sdk. The details given are as follows &minus;</p>
<ul class="list">
<li>client_context.client.installation_id</li>
<li>client_context.client.app_title</li>
<li>client_context.client.app_version_name</li>
<li>client_context.client.app_version_code</li>
<li>client_context.client.app_package_name</li>
<li>client_context.custom - it has dict of custom values from the mobile client app</li>
<li>client_context.env - it has dict of environment details from the AWS Mobile SDK</li>
</ul></td>
</tr>
</table>
<p>Let us see a working example in Python which outputs the context details. Observe the code given below &minus;</p>
<pre class="result notranslate">
def my_handler(event, context):
   print("Log stream name:", context.log_stream_name)
   print("Log group name:",  context.log_group_name)
   print("Request ID:",context.aws_request_id)
   print("Mem. limits(MB):", context.memory_limit_in_mb)
   print("Time remaining (MS):", context.get_remaining_time_in_millis())
   return "aws lambda in python using zip file"
</pre>
<p>The corresponding output of the code shown above is given below &minus;</p>
<img src="/aws_lambda/images/corresponding_output.jpg" alt="Corresponding Output" />
<h2>Logging using Python</h2>
<p>To log info using Python, we can use print or logger function available. Let us use the above example of context and check inCloudWatch to see if the logs are printed. Observe the following code &minus;</p>
<pre class="result notranslate">
def my_handler(event, context):
   print("Log stream name:", context.log_stream_name)
   print("Log group name:",  context.log_group_name)
   print("Request ID:",context.aws_request_id)
   print("Mem. limits(MB):", context.memory_limit_in_mb)
   print("Time remaining (MS):", context.get_remaining_time_in_millis())
   return "aws lambda in python using zip file"
</pre>
<p>The output of this code in CloudWatch is as shown below &minus;</p>
<img src="/aws_lambda/images/logging_using_python.jpg" alt="Logging using Python" />
<p> Observe the following example to understand about using logger to print logs to CloudWatch &minus;</p>
<pre class="result notranslate">
import logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)
def my_handler(event, context):
   logger.info('Using logger to print messages to cloudwatch logs')
   return "aws lambda in python using zip file"
</pre>
<p>The output for this will be as shown in the screenshot given below &minus;</p>
<img src="/aws_lambda/images/cloudwatch_python.jpg" alt="Cloudwatch Python" />
<h2>Error Handling in Python for Lambda function</h2>
<p>In this section, let us see a working example which shows how to handler errors in Python. Observe the piece of code given here &minus;</p>
<pre class="result notranslate">
def error_handler(event, context):
   raise Exception('Error Occured!')
</pre>
<p></p>
<img src="/aws_lambda/images/error_handling_python.jpg" alt="Error Handling in Python" />
<p>The log display is as shown in the image here &minus;</p>
<img src="/aws_lambda/images/error_handling_python_output.jpg" alt="Error Handling in Python Output" />
<h1>AWS Lambda – Function in Go</h1>
<p>Go Language support is a recent addition to AWS. To work with Go, you need to select the language from AWS console while creating the AWS Lambda function. In this chapter, let us learn in detail about AWS Lambda function in Go language.</p>
<h2>Installing Go</h2>
<p>To get started we need Go Language support. In this section, we will go through following details to start working with AWS Lambda in Go. This is the official site for Go download: <a href="https://golang.org/dl/" rel="nofollow" target="_blank">https://golang.org/dl/</a></p>
<img src="/aws_lambda/images/go_programming.jpg" alt="Go Programming" />
<p>Now, download the package as per the operating system. Follow the procedure given here to install Go on the respective operating system.</p>
<h3>Installation on Windows</h3>
<p>Observe that for Windows, there is 32-bit and 64-bit download available. Download the zip file and extract the contents and store it in a directory of your choice.</p>
<p>Add the environment variables available at <b>ControlPanel ---&gt; System ---&gt; Advanced system settings.</b></p>
<img src="/aws_lambda/images/system_properties.jpg" alt="System Properties" />
<p>Now, click <b>Environment Variables</b> button and add the directory path as shown here &minus;</p>
<img src="/aws_lambda/images/environment_variables_go.jpg" alt="Environment Variables Go" />
<p>You can also edit the system variable as shown here &minus;</p>
<img src="/aws_lambda/images/edit_system_variable.jpg" alt="Edit System Variable" />
<p>Once these steps are done, you should be able to start working with Go. Open command prompt and check the Go command for version. Observe the following screenshot for the same.</p>
<img src="/aws_lambda/images/command_prompt.jpg" alt="Command Prompt" />
<h3>Installation for Linux and Mac OS</h3>
<p>For installing packages on Linux and Mac OS, follow the instruction as shown below &minus;</p>
<p>Unpack the packages and store it at the location <b>/usr/local/go</b>. Now, add <b>/usr/local/go/bin</b> to the PATH environment variable. It can be done using <b>/etc/profile</b> or <b>$HOME/.profile</b>.</p>
<p>For this purpose, you can use the following command</p>
<pre class="prettyprint notranslate">
export PATH=$PATH:/usr/local/go/bin
</pre>
<p>To add AWS support to for Windows, Linux and mac, use the following in your git command line &minus;</p>
<pre class="result notranslate">
go.exe get -u github.com/aws/aws-lambda-go/lambda 
go.exe get -u github.com/aws/aws-lambda-go/lambdacontext
go.exe get -u github.com/aws/aws-lambda-go/cmd/build-lambda-zip
</pre>
<p>To compile the code Windows/Linux/Mac, use the following commands &minus;</p>
<pre class="result notranslate">
GOOS=linux GOARCH=amd64 go build -o main main.go
%GOPATH%\bin\build-lambda-zip.exe -o main.zip main
</pre>
<h2>AWS Lambda Function using GO</h2>
<p>A program returned in Go when build gives an executable file. The following is a simple program in Go with AWS Lambda support. We need to import the <b>github.com/aws/aws-lambda-go/lambda</b>, as this has the Lambda programming functionality.Another important need for AWS Lambda is the handler.</p>
<h3>Main.go</h3>
<pre class="result notranslate">
// main.go
package main

import (
   "github.com/aws/aws-lambda-go/lambda"
)
func hello() (string, error) {
   return "Hello Lambda", nil
}
func main() {
   // Make the handler available for Remote Procedure Call by AWS Lambda
   lambda.Start(hello)
}
</pre>
<p>Note that the execution of the <b>Go</b> program starts from main where lambda. start is called with the handler function. Observe the code shown below &minus;</p>
<pre class="result notranslate">
func main() {
   // Make the handler available for Remote Procedure Call by AWS Lambda
   lambda.Start(hello)
}
</pre>
<p>Now, let us execute the above file using Go command and then zip the executable file.</p>
<p>The structure of the file we have been using is as shown here &minus;</p>
<img src="/aws_lambda/images/structure_file.jpg" alt="Structure File" />
<p></p>
<img src="/aws_lambda/images/structure_file_output.jpg" alt="Structure File Output" />
<p>With <b>go build</b>, it creates an executable file called main.exe. To zip the file and upload it in AWS Lambda, you can use the following procedure &minus;</p>
<p>To compile the code Windows/Linux/Mac, use the following commands &minus;</p>
<pre class="result notranslate">
GOOS=linux GOARCH=amd64 go build -o main main.go
%GOPATH%\bin\build-lambda-zip.exe -o main.zip main
</pre>
<p>Then, login into AWS console and create Lambda function using <b>Go</b> as runtime &minus;</p>
<img src="/aws_lambda/images/aws_console_go.jpg" alt="APIws Console Go" />
<p>Once the function is created, upload the executable zip file created above.</p>
<h2>Lambda function handler with Go</h2>
<p>Handler is where the execution of the Go program starts. From main call to <b>lambda.start</b>, execution is called with the handler function. Note that the handler to be added will be <b>main</b>.</p>
<p>Observe the code here for an understanding &minus;</p>
<pre class="result notranslate">
func main() {
   // Make the handler available for Remote Procedure Call by AWS Lambda
   lambda.Start(hello)
}
</pre>
<p>Follow as per the screenshots given below &minus;</p>
<img src="/aws_lambda/images/function_code.jpg" alt="Function Code" />
<p></p>
<img src="/aws_lambda/images/execution_role_go.jpg" alt="Execution Role Go" />
<p>Now, save the function and test it. You can see the execution result as shown here.</p>
<img src="/aws_lambda/images/execution_result_go.jpg" alt="Execution Result Go" />
<p>The corresponding log output will be as shown here &minus;</p>
<img src="/aws_lambda/images/log_output_go.jpg" alt="Log Output Go" />
<h2>Context object with Go</h2>
<p>AWS Lambda in Go gives following global variables and properties for context.</p>
<ul class="list">
<li><p><b>MemoryLimitInMB</b> &minus; Memory limit, in MB that is configured in aws lambda.</p></li>
<li><p><b>FunctionName</b> &minus; name of aws lambda function.</p></li>
<li><p><b>FunctionVersion</b> &minus; the version of aws lambda function executing.</p></li>
<li><p><b>LogStreamName</b> &minus; cloudwatch log stream name.</p></li>
<li><p><b>LogGroupName</b> &minus; cloudwatch group name.</p></li>
</ul>
<p>The properties available on context are given as under &minus;</p>
<h3>AwsRequestID</h3>
<p>This is AWS request id which you get when AWS Lambda function is invoked.</p>
<h3>ClientContext</h3>
<p>This contains details about the client application and device when invoked through the AWS Mobile SDK. It can be null. Client context provides details like client ID, application title, version name, version code, and the application package name.</p>
<h3>InvokedFunctionArn</h3>
<p>The ARN of the function invoked. An unqualified ARN executes the $LATEST version and aliases execute the function version it is pointing to.</p>
<h3>Identity</h3>
<p>It gives details about the Amazon Cognito identity provider when used with AWS mobile SDK.</p>
<p>The changes added to <b>main.go</b> to print context details &minus;</p>
<pre class="prettyprint notranslate">
// main.go
package main

import (
   "context"
   "log"
   "github.com/aws/aws-lambda-go/lambda"
   "github.com/aws/aws-lambda-go/lambdacontext"
)

func hello(ctx context.Context) (string, error) {
   lc, _ := lambdacontext.FromContext(ctx);
   log.Print(lc);
   log.Print(lc.AwsRequestID);
   log.Print(lc.InvokedFunctionArn);
   return "Hello Lambda", nil
}

func main() {
   // Make the handler available for Remote Procedure Call by AWS Lambda
   lambda.Start(hello)
}
</pre>
<p>We need to import the <b>log</b> and <b>lambda context</b> to use it with Go. The context details are as follows &minus;</p>
<pre class="result notranslate">
func hello(ctx context.Context) (string, error) {
   lc, _ := lambdacontext.FromContext(ctx);
   log.Print(lc);
   log.Print(lc.AwsRequestID);
   log.Print(lc.InvokedFunctionArn);	
   return "Hello Lambda", nil
}
</pre>
<p>You can observe the following output on testing the above code &minus;</p>
<img src="/aws_lambda/images/execution_result_output.jpg" alt="Execution Result Output" />
<h2>Logging data</h2>
<p>With <b>Go</b> you can log data using the log or fmt module as shown below &minus;</p>
<pre class="result notranslate">
// main.go
package main

import (
   "log"
   "fmt"
   "github.com/aws/aws-lambda-go/lambda"
)

func hello() (string, error) {
   log.Print("Hello from Lambda Go using log");
   fmt.Print("Hello from Lambda Go using fmt");
   return "Hello Lambda", nil
}

func main() {
   // Make the handler available for Remote Procedure Call by AWS Lambda
   lambda.Start(hello)
}
</pre>
<p>The output for same is as shown below &minus;</p>
<img src="/aws_lambda/images/logging__data.jpg" alt="Logging Data" />
<h2>Checking Logs in CloudWatch</h2>
<p>You can see the logs in CloudWatch also. For this, go to AWS service and select cloudwatch and click <b>Logs</b> on left side. Now, search for Lambda function in the list to see the logs &minus;</p>
<img src="/aws_lambda/images/checking_logs.jpg" alt="Checking Logs" />
<h2>Function Errors</h2>
<p>You can create custom error handling in AWS Lambda using the errors module as shown in the code below &minus;</p>
<pre class="result notranslate">
// main.go
package main
import (
   "errors"
   "github.com/aws/aws-lambda-go/lambda"
)

func hello() error  {
   return errors.New("There is an error in the code!")
}

func main() {
   // Make the handler available for Remote Procedure Call by AWS Lambda
   lambda.Start(hello)
}
</pre>
<p>The output for the code shown above is as given below &minus;</p>
<img src="/aws_lambda/images/function_errors.jpg" alt="Function Errors" />
<h1>AWS Lambda – Function in C#</h1>
<p>This chapter will explain you how to work with AWS Lambda function in C# in detail. Here, we are going to use visual studio to write and deploy the code to AWS Lambda. For any information and help regarding installation of Visual studio and adding AWS toolkit to Visual Studio, please refer to the <b>Introduction</b> chapter in this tutorial. Once you are done with installation of Visual Studio, please follow the steps given below. Refer to the respective screenshots for a better understanding &minus;</p>
<h3>Step 1</h3>
<p>Open your Visual Studio and follow the steps to create new project. Click on <b>File -&gt; New -&gt; Project</b>.</p>
<img src="/aws_lambda/images/introduction.jpg" alt="Introduction" />
<h3>Step 2</h3>
<p>Now, the following screen is displayed wherein you select <b>AWS Lambda for Visual C#</b>. Select <b>AWS Lambda Project (.NET Core)</b>.</p>
<img src="/aws_lambda/images/visual_csharp.jpg" alt="Visual Csharp" />
<p>You can change the name if required, will keep here the default name. Click <b>OK</b> to continue.</p>
<p>The next step will ask you to select a <b>Blueprint</b>.</p>
<img src="/aws_lambda/images/select_blueprint.jpg" alt="Select Blueprint" />
<p>Select <b>Empty function</b> for this example and click  <b>Finish</b>. It will create a new project structure as shown below &minus;</p>
<img src="/aws_lambda/images/solution_explorer.jpg" alt="Solution Explorer" />
<p>Now, select <b>Function.cs</b> which is the main file where the handler with event and context is created for AWS Lambda.</p>
<p>The display of the file Functions.cs is as follows &minus;</p>
<img src="/aws_lambda/images/csharp_function.jpg" alt="Csharp Function" />
<p>You can use the command given below to serialize the input and output parameters to AWS Lambda function.</p>
<pre class="result notranslate">
[assembly: 
LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]
</pre>
<h2>Handler Details for C#</h2>
<p>The handler is displayed as follows &minus;</p>
<pre class="prettyprint notranslate">
public string FunctionHandler(string input, ILambdaContext context) {
   return input?.ToUpper();
}
</pre>
<p>Various components of the above code are explained below &minus;</p>
<p><b>FunctionHandler &minus;</b>This is the starting point of the C# AWS Lambda function.</p>
<p><b>String input &minus;</b> The parameters to the handler <b>string input</b> has all the event data such as S3 object, API gateway details etc.</p>
<p><b>ILambdaContext context &minus;</b> ILamdaContext is an interface which has context details. It has details like lambda function name, memory details, timeout details etc.</p>
<p>The Lambda handler can be invoked in sync and async way. If invoked in a sync way as shown above you can have the return type. If async than the return type has to be void.</p>
<p>Now, let us deploy the AWS Lambda C# and test the same. Right click the project and click <b>Publish to AWS Lambda</b> as shown below &minus;</p>
<img src="/aws_lambda/images/publish_explorer.jpg" alt="Publish Explorer" />
<p></p>
<img src="/aws_lambda/images/upload_lambda.jpg" alt="Upload Lambda" />
<p>Fill up the <b>Function Name</b> and click on <b>Next</b>. The next screen displayed is the <b>Advanced Function Details</b> as shown &minus;</p>
<img src="/aws_lambda/images/advanced_function.jpg" alt="Advanced Function" />
<p>Enter the <b>Role Name, Memory</b> and <b>Timeout</b>. detailsNote that here we have selected the existing role created and used memory as 128MB and timeout as 10seconds. Once done click <b>Upload</b> to publish to AWS Lambda console.</p>
<img src="/aws_lambda/images/uploading_function.jpg" alt="Uploading Function" />
<p>You can see the following screen once AWS Lambda function is uploaded. Click <b>Invoke</b> to execute the AWS Lambda function created. At present, it shows error as it needs some input as per the code written.</p>
<img src="/aws_lambda/images/invoke.jpg" alt="Invoke" />
<p>Now, let us enter some sample input and <b>Invoke</b> it again. Note that here we have entered some text in the input box and the same on clicking <b>invoke</b> is displayed in uppercase in the response section. The log output is displayed below &minus;</p>
<img src="/aws_lambda/images/function_lambda.jpg" alt="Function Lambda" />
<p>Now, let us also check AWS console to see if the function is created as we have deployed the function from Visual Studio.</p>
<p>The Lambda function created above is <b>aws lambda using csharp</b> and the same is displayed in AWS console as shown in the screenshots given below &minus;</p>
<img src="/aws_lambda/images/create_function_csharp.jpg" alt="Create Function Csharp" />
<p></p>
<img src="/aws_lambda/images/function_code_info.jpg" alt="Function Code Info" />
<img src="/aws_lambda/images/execution_role_csharp.jpg" alt="Execution Role Csharp" />
<p></p>
<img src="/aws_lambda/images/basic_setting_csharp.jpg" alt="Basic Setting Csharp" />
<h2>Handler Signature</h2>
<p>Handler is start point for AWS to execute. The name of the handler should be defined as &minus;</p>
<pre class="result notranslate">
ASSEMBLY::TYPE::METHOD
</pre>
<p>The details of the signature are explained as below &minus;</p>
<p><b>ASSEMBLY</b> &minus; This is the name of the .NET assembly for the application created. It is basically the name of the folder from where the project is created.</p>
<p><b>TYPE</b> &minus; This is the name of the handler. It is basically the namespace.classname.</p>
<p><b>METHOD</b> &minus; This is the name of the function handler.</p>
<p>The code for handler signature is as shown below &minus;</p>
<pre class="prettyprint notranslate">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Amazon.Lambda.Core;

// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]

namespace AWSLambda3 {
   public class Function {

      /// &lt;summary&gt;
      /// A simple function that takes a string and does a ToUpper
      /// &lt;/summary&gt;
      /// &lt;param name="input"&gt;&lt;/param&gt;
      /// &lt;param name="context"&gt;&lt;/param&gt;
      /// &lt;returns&gt;&lt;/returns&gt;
      public string FunctionHandler(string input, ILambdaContext context) {
         return input?.ToUpper();
      }
   }
}
</pre>
<p>Note that here the assembly is <b>AWSLamda3</b>, Type is namespace.classname which is <b>AWSLambda3.Function</b> and Method is <b>FunctionHandler</b>. Thus, the handler signature is <b>AWSLamda3::AWSLambda3.Function::FunctionHandler</b></p> 
<h2>Context object in C#</h2>
<p>Context Object gives useful information about the runtime in AWS environment. The properties available in the context object are as shown in the following table &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Properties &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>MemoryLimitInMB</b></p>
<p>This will give details of the memory configured for AWS Lambda function</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>FunctionName</b></p>
<p>Name of AWS Lambda function</p></td>                                          
</tr>
<tr>
<td class="ts">3</td>	
<td><p><b>FunctionVersion</b></p>
<p>Version of AWS Lambda function</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>InvokedFunctionArn</b></p>
<p>ARN used to invoke this function.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>AwsRequestId</b></p>
<p>AWS request id for the AWS function created</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>LogStreamName</b></p>
<p>Cloudwatch log stream name</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>LogGroupName</b></p>
<p>Cloudwatch group name</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>ClientContext</b></p>	
<p>Information about the client application and device when used with AWS mobile SDK </p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>Identity</b></p>
<p>Information about the amazon cogbnito identity when used with AWS mobile SDK </p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>RemainingTime</b></p>
<p>Remaining execution time till the function will be terminated </p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>Logger</b></p>
<p>The logger associated with the context</p></td>
</tr>
</table>
<h3>Example</h3>
<p>In this section, let us test some of the above properties in AWS Lambda in C#. Observe the sample code given below &minus;</p>
<pre class="prettyprint notranslate">
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Amazon.Lambda.Core;
// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.
[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.Json.JsonSerializer))]

namespace AWSLambda6 {
   public class Function {

      /// &lt;summary&gt;
      /// &lt;/summary&gt;
      /// &lt;param name="input"&gt;&lt;/param&gt;
      /// &lt;param name="context"&gt;&lt;/param&gt;
      /// &lt;returns&gt;&lt;/returns&gt;
      public void FunctionHandler(ILambdaContext context) {
         LambdaLogger.Log("Function name: " + context.FunctionName+"\n");
         context.Logger.Log("RemainingTime: " + context.RemainingTime+"\n");
         LambdaLogger.Log("LogGroupName: " + context.LogGroupName+"\n");            
      }
   }
}
</pre>
<p>The related output that you can observe when you invoke the above code in <b>C#</b> is as shown below &minus;</p>
<img src="/aws_lambda/images/context_object_csharp.jpg" alt="Context Object Csharp" />
<p>The related output that you can observe when you invoke the above code in <b>AWS Console</b> is as shown below &minus;</p>
<img src="/aws_lambda/images/context_object_output.jpg" alt="Context Object Output" />
<h2>Logging using C#</h2>
<p>For logging, you can use two functions &minus;</p>
<ul class="list">
<li><p><b>context.Logger.Log</b></p></li>
<li><p><b>LambdaLogger.Log</b></p></li>
</ul>
<p>Observe the following example shown here &minus;</p>
<pre class="prettyprint notranslate">
public void FunctionHandler(ILambdaContext context) {
   LambdaLogger.Log("Function name: " + context.FunctionName+"\n");
   context.Logger.Log("RemainingTime: " + context.RemainingTime+"\n");
   LambdaLogger.Log("LogGroupName: " + context.LogGroupName+"\n");            
}
</pre>
<p>The corresponding output fo the code given above is shown here &minus;</p>
<img src="/aws_lambda/images/logging_using_csharp.jpg" alt="Logging Using Csharp" />
<p>You can get the logs from CloudWatch as shown below &minus;</p>
<img src="/aws_lambda/images/log_group.jpg" alt="Log Group" />
<h2>Error Handling in C# for Lambda Function</h2>
<p>This section discusses about error handling in C#. For error handling,<b>Exception</b> class has to be extended as shown in the example shown below &minus;</p>
<h3>example</h3>
<pre class="prettyprint notranslate">
namespace example {            
   public class AccountAlreadyExistsException : Exception {
      public AccountAlreadyExistsException(String message) :
         base(message) {
      }
   }
} 
namespace example {
   public class Handler {
     public static void CreateAccount() {
       throw new AccountAlreadyExistsException("Error in AWS Lambda!");
     }
   }
}
</pre>
<p>The corresponding output for the code given above is as given below &minus;</p>
<pre class="result notranslate">
{
   "errorType": "LambdaException",
   "errorMessage": "Error in AWS Lambda!"
}
</pre>
<h1>AWS Lambda – Configuring Lambda Function</h1>
<p>In the previous chapters, we have learnt how to create AWS Lambda function in AWS console. However, there are other parameters for creating a Lambda function. These include memory allocation, timeout etc.</p>
<p>In this chapter, let us understand in detail about the following configuration properties for AWS Lambda.</p>
<h2>Memory Allocation</h2>
<p>Login to AWS console and create or select the existing lambda function. Click the <b>Configuration</b> tab to get the details of the memory allocated. Look at the screenshot shown below &minus;</p>
<img src="/aws_lambda/images/memory_allocation.jpg" alt="Memory Allocation" />
<p>Note that by default the memory allocated is <b>128MB</b>. If you want to increase the memory you can click the slider.</p>
<p>The memory will get incremented to <b>64MB</b> as you move the slider. Observe that the maximum memory available is <b>3008MB</b>. Look at the screenshot shown below &minus;</p>
<img src="/aws_lambda/images/maximum_memory.jpg" alt="Maximum Memory" />
<p>You can also use <b>aws cli</b> from command prompt to increase the memory limit. You will have to give the memory in increments of 64MB.</p>
<p>Now, let us increase the memory limit of AWS Lambda with name :<b>myfirstlambdafunction</b>.</p>
<p>The memory details of the function are shown in the screenshot given below &minus;</p> 
<img src="/aws_lambda/images/memory_details.jpg" alt="Memory Details" />
<p>The command used to change the memory using <b>aws cli</b> is as follows &minus;</p>
<pre class="result notranslate">
aws lambda update-function-configuration --function-name your function name --
region region where your function resides --memory-size memory amount --
profile admin user
</pre>
<p>The corresponding output of AWS Lambda function <b>myfirstlambdafunction</b> in AWS console is shown here. Observe that the memory is changed from 128MB to 256MB.</p>
<img src="/aws_lambda/images/memory_command.jpg" alt="Memory Command" />
<h2>Maximum Execution Time</h2>
<p>Timeout is the time allotted to AWS Lambda function to terminate if the timeout happens. AWS Lambda function will either run within the allocated time or terminate if it exceeds the timeout given. You need to evaluate the time required for the function to execute and accordingly select the time in <b>Configuration</b> tab in AWS console as shown below &minus;</p>
<img src="/aws_lambda/images/maximum_execution_time.jpg" alt="Maximum Execution Time" />
<h2>IAM Role</h2>
<p>When creating AWS Lambda function, the role or the permission needs to be assigned. Incase you need AWS Lambda for S3 or dynamoDB, permission with regard to the services of lambda needs to be assigned. Based on the role assigned, AWS Lambda will decide the steps to be taken. For Example if you give full access of dynamodb, you can add, update and delete the rows from the dynamodb table.</p>
<h2>Handler Name</h2>
<p>This is the start of execution of the AWS Lambda function. Handler function has the details of the event triggered, context object and the callback which has to send back on <b>success</b> or <b>error</b> of AWS Lambda.</p>
<p>The format of the handler function in nodejs is shown here &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   callback(null, "hello from lambda");
};
</pre>
<h2>Lambda Function using Environment Variables</h2>
<p>In this section, we will create a simple Lambda function using environment variables added in the configuration section. For this purpose, follow the steps given below and refer the respective screenshots &minus;</p>
<h3>Step 1</h3>
<p>Go to AWS console and create a function in Lambda as shown.</p>
<img src="/aws_lambda/images/lambda_variables.jpg" alt="Lambda Variables" />
<h3>Step 2</h3>
<p>Now, add the environment variables as shown &minus;</p>
<img src="/aws_lambda/images/lambda_environment.jpg" alt="Lambda Environment" />
<h3>Step 3</h3>
<p>Now, let us fetch the same in Lambda code as follows &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   var hostName = process.env.host;   
   var userName = process.env.username;
   callback(null, "Environment Variables =&gt;"+hostName+" and "+userName);
};
</pre>
<h3>Step 4</h3>
<p>To get the details from environment variables we need to use <b>process.env</b> as shown. Note that this syntax is for <b>NodeJS</b> runtime.</p>
<pre class="result notranslate">
var hostName = process.env.host;   
var userName = process.env.username;
</pre>
<h3>Step 5</h3>
<p>The output for the Lambda function on execution will be as shown &minus;</p>
<img src="/aws_lambda/images/lambda_function_execution.jpg" alt="Lambda Function Execution" />
<h1>Creating and Deploying using AWS Console</h1>
<p>We can create Lambda function and test the same in AWS console. This chapter discusses this in detail. For this purpose, you will have to follow the steps given here and observe the respective screenshots given &minus;</p>
<h3>Step 1</h3>
<p>Login to AWS Console <a href="https://aws.amazon.com/console/" rel="nofollow" target="_blank">https://aws.amazon.com/console/</a>. Now, you will be redirected to the screen where the AWS services are displayed.</p>
<img src="/aws_lambda/images/aws_services.jpg" alt="AWS Services" />
<h3>Step 2</h3>
<p>Now, click on <b>Lambda</b> service as highlighted above. This will redirect to create function as shown below &minus;</p>
<img src="/aws_lambda/images/lambda_services.jpg" alt="Lambda Services" />
<h3>Step 3</h3>
<p>Now, click <b>Create function</b> and enter the details of the function. Then you can see a screen as shown below &minus;</p>
<img src="/aws_lambda/images/my_first_lambda.jpg" alt="My First Lambda" />
<h3>Step 4</h3>
<p>You can write your code by choosing the language of your choice. The code has to be written in editor if the option selected is edit code inline. The other options available are as follows &minus;</p>
<img src="/aws_lambda/images/code_entry.jpg" alt="Code Entry" />
<h3>Step 5</h3>
<p>Once done you need to save the changes for which the button is given at the top right corner as shown below &minus;</p>
<img src="/aws_lambda/images/save_button_lambda.jpg" alt="Save Button Lambda" />
<h3>Step 6</h3>
<p>Now, click <b>Test</b> button. This gives all details of the execution of the Lambda function as shown below &minus;</p>
<img src="/aws_lambda/images/test_button.jpg" alt="Test Button" />
<h3>Step 7</h3>
<p>The code for <b>index.js</b> is as follows &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   callback(null, 'Lambda test');
};
</pre>
<p>This will call the <b>Callback function</b> and the result can be error or success. On success you will see a <b>Lambda test</b> message; if error it will pass null.</p>
<h3>Step 8</h3>
<p>The <b>Role</b> details for Lambda function is a part of the configuration and is displayed as shown below &minus;</p>
<img src="/aws_lambda/images/role_execution.jpg" alt="Role Execution" />
<h3>Step 9</h3>
<p>Now, you can update the role if required and save the Lambda function. Then, the memory and timeout details for lambda function are displayed as shown below &minus;</p>
<img src="/aws_lambda/images/description.jpg" alt="Description" />
<h3>Step 10</h3>
<p>Now, we need to add trigger to the Lambda function so that it executes when the event occurs. The trigger details are displayed at the start of the AWS Lambda function screen as shown below &minus;</p>
<img src="/aws_lambda/images/designer.jpg" alt="Designer" />
<p>From this, you can select the trigger you want your Lambda function to get triggered. When you select the trigger, the config details for the trigger has to be added.</p>
<p>For Example, for trigger on S3 the config details to be added are as follows &minus;</p>
<img src="/aws_lambda/images/configure_trigger.jpg" alt="Configure Trigger" />
<h3>Step 11</h3>
<p>Now, select the bucket you want the trigger on. The event type has the following details &minus;</p>
<img src="/aws_lambda/images/event_type.jpg" alt="Event Type" />
<h3>Step 12</h3>
<p>For the trigger, you can also mention the prefix type files or file pattern, the Lambda has to be trigger. The details are as shown &minus;</p>
<img src="/aws_lambda/images/prefix.jpg" alt="Prefix" />
<h3>Step 13</h3>
<p>Now, fill up the required details for the trigger and click <b>Add</b> button .Save the Lambda function for the trigger to get added.Saving the function deploys the details, and from now onwards anytime files are added to the S3 bucket, the Lambda will get triggered.</p>
<p>Observe the following screenshot which shows S3 trigger added to AWS Lambda &minus;</p>
<img src="/aws_lambda/images/cloud_formation.jpg" alt="Cloud Formation" />
<h3>Step 14</h3>
<p>Now, let us use S3 sample event to test the Lambda function. The code for the same is shown here &minus;</p>
<h3>Amazon S3 Put Sample Event</h3>
<pre class="prettyprint notranslate">
{
   "Records": [{
      "eventVersion": "2.0",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "requestParameters": {
         "ExampleIPAddress": "127.0.0.1"
      },
      "s3": {
         "configurationId": "testConfigRule",
         "object": {
            "eTag": "0123456789abcdef0123456789abcdef",
            "sequencer": "0A1B2C3D4E5F678901",
            "key": "HappyFace.jpg",
            "size": 1024
         },
         "bucket": { 
            "arn": bucketarn,
            "name": "Examplebucket",
            "ownerIdentity": {
               "principalId": "Example"
            }
         },
         "s3SchemaVersion": "1.0"
      },
      "responseElements": { 
         "x-amz-id-2": "Example123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH",
         "x-amz-request-id": "Example123456789"
      },
      "awsRegion": "us-east-1",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {
         "principalId": "Example"
      },
      "eventSource": "aws:s3"
   }]
}
</pre>
<p>You will have to use the following command to get the details of file uploaded from the S3 put event &minus;</p>
<pre class="result notranslate">
event.Records[0].s3.object.key     //will display the name of the file
</pre>
<p>You will have to use the following command to get the bucket name &minus;</p>
<pre class="result notranslate">
event.Records[0].s3.bucket.name    //will give the name of the bucket.
</pre>
<p>You will have to use the following command to get the EventName &minus;</p>
<pre class="result notranslate">
event.Records[0].eventName        // will display the event name
</pre>
<h3>Step 15</h3>
<p>Now, let us update AWS Lambda code to print the S3 details as shown below &minus;</p>
<pre class="prettyprint notranslate">
exports.lambdahandler = (event, context, callback) =&gt; {
   callback(null, "Bucket name: "+event.Records[0].s3.bucket.name+"  
   File name:"+event.Records[0].s3.object.key );
};
</pre>
<h3>Step 16</h3>
<p>Save the changes. Click <b>Test</b> and enter the S3 sample event &minus;</p>
<img src="/aws_lambda/images/configure_test.jpg" alt="Configure Test" />
<h3>Step 17</h3>
<p>Now click <b>Test</b> and you can see the output as shown &minus;</p>
<img src="/aws_lambda/images/bucket_name.jpg" alt="Bucket Name" />
<h3>Step 18</h3>
<p>To test the trigger on S3 using S3 AWS service, upload a file in S3 bucket: <b>test bucket trigger</b>. Update the role used with Lambda to take S3 and SES policy(to send mail) for permissions. This will update AWS Lambda code to send mail to see the trigger working &minus;</p>
<p>The updated AWS Lambda code is as shown &minus;</p>
<pre class="prettyprint notranslate">
var aws = require('aws-sdk');
var ses = new aws.SES({
   region: 'us-east-1'
});
exports.lambdahandler = function(event, context, callback) {
   var eParams = {
      Destination: {
         ToAddresses: ["coxxxxxxx@gmail.com"]
      },
      Message: {
         Body: {
            Text: {
               Data: "Bucket name: "+event.Records[0].s3.bucket.name+"  File name:"+event.Records[0].s3.object.key
            }
         },
         Subject: {
            Data: "S3 and AWS Lambda"
         }
      },
      Example: "coxxxxxx@gmail.com"
   };
   console.log('===SENDING EMAIL===');
   var email = ses.sendEmail(eParams, function(err, data) {
      if (err) console.log(err);
         else {
            console.log("===EMAIL SENT===");
            console.log("EMAIL CODE END");
            console.log('EMAIL: ', email);
            context.succeed(event);
            callback(null, "email is send");
         }
   });
};
</pre>
<p>The corresponding screenshot is as shown here &minus;</p>
<img src="/aws_lambda/images/target_path.jpg" alt="Target Path" />
<h3>Step 19</h3>
<p>Now, upload the file and check the mail id provided in AWS Lambda code &minus;</p>
<img src="/aws_lambda/images/mail_id.jpg" alt="Mail Id" />
<h1>Creating and Deploying using AWS CLI</h1>
<p><b>AWS CLI</b> is a command line tool which helps to work with AWS services. We can use it to create, update, delete, invoke aws lambda function. In this chapter, you will discuss about installation and usage of AWS CLI in detail.</p>	
<h2>Installation of AWS CLI</h2>
<p>This section will guide you through the installation of AWS CLI on various operating systems. Follow the steps given and observe corresponding screenshots wherever attached.</p>
<h3>For Windows</h3>
<p>Check your Windows configuration and choose one of the following links for installing AWS CLI MSI &minus;</p>
<ul class="list">
<li><p>For Windows 64 bit &minus; <a href="https://s3.amazonaws.com/aws-cli/AWSCLI64.msi" target="
_blank" rel="nofollow">AWS CLI MSI install for windows (64bit)</a></p></li>
<li><p>For Windows 32 bit &minus; <a href="https://s3.amazonaws.com/aws-cli/AWSCLI32.msi" target="
_blank" rel="nofollow">AWS CLI MSI install for windows (32)</a></p></li>
</ul>
<p>Once you choose corresponding link and click it, you can find a Window as shown here &minus;</p>
<img src="/aws_lambda/images/install_aws.jpg" alt="Install AWS" />
<p>Next, set the <b>Environment path in windows</b> as shown in the screenshots below &minus;</p>
<img src="/aws_lambda/images/environment_path.jpg" alt="Environment Path" />
<p>Once done, you can use the following command on the command prompt, to see if <b>aws cli</b> is installed &minus;</p>
<pre class="result notranslate">
aws --version
</pre>
<p>It displays the details of aws-cli version as shown in the following screenshot &minus;</p>
<img src="/aws_lambda/images/aws_cli_version.jpg" alt="AWS Cli Version" />
<h3>For Linux / Mac</h3>
<p>For installing on Linux and Mac, you need Python 2.6.3 or higher verison of it. Then, use following commands for further installation processes &minus;</p>
<pre class="result notranslate">
$ curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
$ unzip awscli-bundle.zip
$ sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
</pre>
<p>Now, we need to configure AWS settings. You can use the following command for this purpose &minus;</p>
<pre class="result notranslate">
aws configure
</pre>
<p>For this purpose, it requires details such as &minus;</p>
<ul class="list">
<li>AWS Access Key ID</li> 
<li>AWS Secret Access Key</li>
<li>Default region name</li>
<li>Default output from format</li>
</ul>
<p>You can obtain these details from your aws console. Go to you Account name at top right corner as shown &minus;</p>
<img src="/aws_lambda/images/helpful_tips.jpg" alt="Helpful Tips" />
<p>Now, click <b>My Security Credentials</b> and select users from left side. Add user with details as asked.</p>
<img src="/aws_lambda/images/security_credentials.jpg" alt="Security Credentials" />
<p>Add the user and to get the access key and secret key. To see the new access key, choose <b>Show</b>. Your credentials will look like as shown below &minus;</p>
<p><b>Access key ID &minus; AOSAIOSFOCDD7Example</b></p>
<p><b>Secret access key &minus; aJuirCVtnROUN/K7MDENG/bPxRfiCYExampleKEY</b></p>
<img src="/aws_lambda/images/access_key.jpg" alt="Access Key" />
<h2>Reference Commands for AWS CLIS</h2>
<p>The following table will give command references available to work with <b>aws cli</b>.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:30%;">Name of aws cli command</th>
<th style="text-align:center; vertical-align:middle;">Command reference</th>
</tr>
<tr>
<td style="vertical-align:middle;"><b>create-function</b></td>
<td>create-function --function-name &lt;value&gt; --runtime &lt;value&gt; --role &lt;value&gt; --handler &lt;value&gt; [--code &lt;value&gt;] [--description &lt;value&gt;] [--timeout &lt;value&gt;] [--memory-size &lt;value&gt;] [--environment &lt;value&gt;] [--kms-key-arn &lt;value&gt;] [--tags &lt;value&gt;] [--zip-file &lt;value&gt;] [--cli-input-json &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>list-functions</b></td>
<td>list-functions [--master-region &lt;value&gt;] [--function-version &lt;value&gt;] [--max-items &lt;value&gt;] [--cli-input-json &lt;value&gt;] [--starting-token &lt;value&gt;] [--page-size &lt;value&gt;] [--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>get-function</b></td>
<td>get-function --function-name &lt;value&gt; [--qualifier &lt;value&gt;] [--cli-input-json &lt;value&gt;] [--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>get-function-configuration</b></td>
<td>get-function-configuration --function-name &lt;value&gt; [--qualifier &lt;value&gt;] [--cli-input-json &lt;value&gt;] [--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>get-account-settings</b></td>
<td>get-account-settings [--cli-input-json &lt;value&gt;] [--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>update-function-configuration</b></td>
<td>update-function-configuration --function-name &lt;value&gt; [--role &lt;value&gt;] [--handler &lt;value&gt;] [--description &lt;value&gt;] [--timeout &lt;value&gt;] [--memory-size &lt;value&gt;]
[--vpc-config &lt;value&gt;] [--environment &lt;value&gt;] [--runtime &lt;value&gt;] [--dead-letter-config &lt;value&gt;] [--kms-key-arn &lt;value&gt;] [--tracing-config &lt;value&gt;]
[--revision-id &lt;value&gt;] [--cli-input-json &lt;value&gt;] [--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>update-function-code</b></td>
<td>update-function-code --function-name &lt;value&gt; [--zip-file &lt;value&gt;] [--s3-bucket&lt;value&gt;] [--s3-key &lt;value&gt;] [--s3-object-version &lt;value&gt;] [--publish | --no-publish]
[--dry-run | --no-dry-run] [--revision-id &lt;value&gt;][--cli-input-json &lt;value&gt;][--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
<tr>
<td style="vertical-align:middle;"><b>delete-function</b></td>
<td>delete-function --function-name &lt;value&gt; [--qualifier &lt;value&gt;] [--cli-input-json &lt;value&gt;] [--generate-cli-skeleton &lt;value&gt;]</td>
</tr>
</table>
<p>Now, let us discuss these commands one by one in detail.</p>
<h2>create-function</h2>
<p>This api will create a new lambda function. The code needs to be given in zip format. If the function to be created already exists, the api will fail. Note that the function name is case-sensitive.</p>
<h3>Commands Included</h3>
<p>The list of commands that you can use with create-function is given here &minus;</p>
<pre class="result notranslate">
create-function 
--function-name &lt;value&gt;
--runtime &lt;value&gt;
--role &lt;value&gt;
--handler &lt;value&gt;
[--code &lt;value&gt;] 
[--description &lt;value&gt;] 
[--timeout &lt;value&gt;] 
[--memory-size &lt;value&gt;] 
[--environment &lt;value&gt;] 
[--kms-key-arn &lt;value&gt;] 
[--tags &lt;value&gt;] 
[--zip-file &lt;value&gt;] 
[--cli-input-json &lt;value&gt;]
</pre>
<h3>Options Included</h3>
<p>Various options that you can use with the functions above are as follows &minus;</p>
<p><b>--function-name (string)</b> &minus; This takes the name of the function. The name can be 64-bit characters.</p>
<p><b>--runtime(string)</b> &minus; Here you need to specify the runtime environment ie the language selection. The details of the runtime are as given below &minus;</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;">Options available</th>
<th style="text-align:center;">runtime</th>
</tr>
<tr>
<td>Python v3.6</td>
<td>python3.6</td>
</tr>
<tr>
<td>Python v2.7</td>
<td>python2.7</td>
</tr>
<tr>
<td>NodeJS v6.10</td>
<td>nodejs6.10</td>
</tr>
<tr>
<td>NodeJS v8.10</td>
<td>nodejs8.10</td>
</tr>
<tr>
<td>Java</td>
<td>java8</td>
</tr>
<tr>
<td>C# 1</td>
<td>dotnetcore1.0</td>
</tr>
<tr>
<td>C# 2</td>
<td>dotnetcore2.0</td>
</tr>
<tr>
<td>Go</td>
<td>go1.x</td>
</tr>
</table>
<p><b>--role(string)</b> &minus; This will be the name of the lambda policy ie the role to be given to the lambda function for accessing other services. It will have the permission as per the role specified.</p>
<p><b>--handler (string)</b> &minus; This is the name of the handler where the lambda code execution will start.</p>
<ul class="list">
<li>For nodejs, handler name is the module name that we export.</li>
<li>For java, it is package.classname :: handler or package.classname</li>
<li>For python, handler is nameofthefile.</li>
</ul> 
<p><b>--code (structure)</b> &minus;AWS Lambda code</p>
<p><b>--description (string)</b> &minus; description for the AWS Lambda function</p>
<p><b>--timeout (integer)</b> &minus;  timeout will have the time at which the lambda function has to terminate execution. The default is 3s.</p>
<p><b>--memory-size (integer)</b> &minus; This is the memory given to the aws lambda function. AWS will allocate the amount of CPU and memory allocation based on the memory given.</p>
<p><b>--environment (structure)</b> &minus; its a object with environment details required in the aws lambda function.</p>
<pre class="result notranslate">
e.g : Variables = {Name1 = string, Name2 = string}
</pre>
<p><b>--kms-key-arn (string)</b> &minus; this is amazon resource name (ARN) used to encrypt the environment variables. If not provided it will take the default settings to encrypt.</p>
<p><b>--zip-file (blob)</b> &minus; path of the zip file which has the details of the code.</p>
<p><b>--cli-input-json (string)</b> : Performs service operation based on the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, the CLI values will override the JSON-provided values.</p>
<p>Now, let us create a simple AWS Lambda function using runtime as nodejsand add some console.logs to be printed.</p>
<p>Consider a sample code for understanding the same &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = async (event) =&gt; {
   console.log("Using aws cli");
   return 'Hello from Lambda from aws cli!'
};
</pre>
<p>Now, zip the file and store it as <b>awscli.zip</b>.</p>
<h3>Getting ARN</h3>
<p>For the role, let us use the <b>arn</b> from the existing role we have created. To get the ARN, you will have to follow the steps as shown here. Observe the respective screenshots wherever attached &minus;</p>
<h3>Step 1</h3>
<p>Go to IAM and select the role you want from <b>Roles</b>. The ARN details for the role are displayed as shown below. Use <b><i>Role ARN</i></b> with <b>create-function</b> in <b>aws cli</b>.</p>
<img src="/aws_lambda/images/summary_cli.jpg" alt="Summary Cli" />
<p>Observe here that the role arn is : arn:aws:iam::625297745038:role/lambdaapipolicy</p>
<p>The command with values for <b>create-function</b> is as follows &minus;</p>
<pre class="result notranslate">
aws lambda create-function 
--function-name "awslambdausingcli" 
--runtime "nodejs8.10" 
--role "arn:aws:iam::625297745038:role/lambdaapipolicy" 
--handler "awscli.handler" 
--timeout 5 
--memory-size 256 
--zip-file "fileb://awscli.zip"
</pre>
<p>Now, if you run the command in aws cli, you can find an output as shown below &minus;</p>
<img src="/aws_lambda/images/command_cli.jpg" alt="Command Cli" />
<p>In AWS console, the Lambda function is displayed as shown below &minus;</p>
<img src="/aws_lambda/images/cli_function.jpg" alt="Cli Function" />
<p>The details of the functions are as shown here &minus;</p>
<img src="/aws_lambda/images/cli_code.jpg" alt="Cli Code" />
<p>The details of the configuration are as given below &minus;</p>
<img src="/aws_lambda/images/cli_role.jpg" alt="Cli Role" />
<p>You can test the function and check the output as shown &minus;</p>
<img src="/aws_lambda/images/cli_execution.jpg" alt="Cli Execution" />
<p>The corresponding Log output is shown here &minus;</p>
<img src="/aws_lambda/images/cli_output.jpg" alt="Cli Output" />
<h2>list-functions</h2>
<p>This api gives the list of functions created so far in AWS Lambda.</p>
<h3>Commands Included</h3>
<p>The following are the commands asscociated with this API &minus;</p>
<pre class="result notranslate">
list-functions
[--master-region &lt;value&gt;]
[--function-version &lt;value&gt;]
[--max-items &lt;value&gt;]
[--cli-input-json &lt;value&gt;]
</pre>
<h3>Options under list-functions</h3>
<p>The following are various options you can use under this list-functions api &minus;</p>
<p><b>--master-region(string)</b> &minus; optional. The region from which the functions needs to be displayed.</p>
<p><b>--function-version(string)</b> &minus; optional. This will give the function version.</p>
<p><b>--max-items(integer)</b> &minus; optional. This will give the items as the per the value specified.</p>
<p><b>--cli-input-json(string)</b> &minus; optional. Will perform operation based on the json file provided.</p>
<p>The command with values <b>list-functions</b> is as follows &minus;</p>
<pre class="result notranslate">
aws lambda list-functions --max-items 3
</pre>
<p>The command displays details as follows &minus;</p>
<img src="/aws_lambda/images/cli_display.jpg" alt="Cli Display" />
<h2>get-function</h2>
<p>This api will give details of the functions and also a url link which has zip file uploaded using create-function. The url with zip details will be valid only for 10 mins.</p>
<h3>Commands Included</h3>
<p>The following are the commands associated with this api &minus;</p>
<pre class="result notranslate">
get-function
--function-name &lt;value&gt;
[--qualifier &lt;value&gt;]
[--cli-input-json &lt;value&gt;]
[--generate-cli-skeleton &lt;value&gt;]
</pre>
<h3>Options Included</h3>
<p><b>--function-name</b> &minus; Name of the AWS Lambda function. You can also specify Amazon Resource Name of the function.</p>
<p><b>--qualifier(string)</b> &minus; Optional. Function version can be used to get the details of the function.</p>
<p>The command with values to get-function are &minus;</p>
<pre class="result notranslate">
aws lambda get-function --function-name awslambdausingcli
</pre>
<p>The command display details are as follows &minus;</p>
<img src="/aws_lambda/images/option_included.jpg" alt="Option Included" />
<p>It gives the url which has the zip code uploaded. In the above case the url is &minus;</p>
<pre class="result notranslate">
https://prod-04-2014-
tasks.s3.amazonaws.com/snapshots/625297745038/awslambdausingcli-97048f8d-4a08
-4ed9-99d9-acb00d2063d2?versionId=d04HKvPu9S2zz8pzjbW6Rmf5o5fxnc_r&X-Amz-Security
-Token=FQoDYXdzEKT%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaDCpTmGvtwKToPBiWcyK3A96UcJEnwvYDhMbbxu
%2Bg2gffK2ocfnlEeiCHak8QqqE1RFpbKrdks9NzxP9gNbagL4M9RValxJ1a9PUY%2FOdAekscRHOiX00MVAxUlI8
2pKryhdOwLJWSj0uRzqvOxCcBwJenHrSNPeG6lMa2ZDo0qZFEUDONSaTg4nuSnJK1f6t3pMAKu4vF9wPvf92G%2BU
60rUxwleggigISmD9l1IlZse3%2BVF1JlNuN%2F5d85v0y2Q%2F%2BO515CybcZpn91sHPYG8JMJ00LsrkQ2Ww4VU
9Zz5c5QYH4JYPj0CyEgSz9b%2FMceMPpOoPUAMjctb%2FEwQqcShZeqAr9%2Fcd2ZI%2BXl2%2Bs4ri0ucgPvQQvs
eGIIiZbX3GqdwR2jb1nylrAEIfiuFMoSWfcFYoYtuL0MZnjGR9jy2GNkp6MB%2BlHHr7%2BnuFRUzU26rgDYmdE1w
Rb3%2B21Jm49WGDa9opRLvUxFaux57Or70haib2FuKzN6Gf3Vzzk5KPdWsYUpaLyf%2B1ovEytOZhB1JEXuCs%2FG
IlOXS88yxT%2BpOKmyxweiezpGgI%2FAkSAQTbSRsYQKIOFyIJNHzplwrJKhy28vy60numIBIo9Zqq2AU%3D
&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20180527T112426Z&X-Amz-
SignedHeaders=host&X-Amz-Expires=600&X-Amz-
Credential=ASIAICSQHLSBWFP37U4Q%2F20180527%2Fus-
east-1%2Fs3%2Faws4_request&X-Amz-Signature=
8b97e7d6d7da13313068e027894d2c875be5e50a0c5a62550f55307985bdc1aa
</pre>
<h2>get-function-configuration</h2>
<p>This will give the configuration details of the AWS Lambda function.</p>
<p>The following are the commands used along with this api &minus;</p>
<pre class="result notranslate">
get-function-configuration
--function-name &lt;value&gt;
[--qualifier &lt;value&gt;]
</pre>
<p><b>The following are the options used with</b></p> 
<p><b>--function-name (string) &minus;</b> name of the aws lambda function. You can also specify Amazon Resource Name of the function.</p>
<p><b>--qualifier(string) &minus;</b> Optional.Function version can be used to get the details of the function.
<p>The command with values to get-function are &minus;</p>
<pre class="result notranslate">
aws lambda get-function-configuration --function-name awslambdausingcli
</pre>
<p>The command displays details as follows &minus;</p>
<img src="/aws_lambda/images/get_function.jpg" alt="Get Function." />
<h2>get-account-settings</h2>
<p>This api gives the accounts settings.</p>
<h3>Commands Involved</h3>
<p>The command that you can use with this api are &minus;</p>
<pre class="result notranslate">
get-account-settings
[--cli-input-json &lt;value&gt;]
[--generate-cli-skeleton &lt;value&gt;]
</pre>
<h3>Options Involved</h3>
<p>You can use the following options with this api &minus;</p>
<p><b>--cli-input-json(string) &minus;</b> Performs the service based on the json string provided.</p>
<p><b>--generate-cli-skeleton(string) &minus;</b> It prints json output without sending the API request.</p>
<p>You can use the following command for get-account-settings &minus;</p>
<pre class="result notranslate">
aws lambda get-account-settings
</pre>
<p>You can see the following output when you execute the command given above &minus;</p>
<img src="/aws_lambda/images/option_involved.jpg" alt="Option Involved" />
<h2>update-function-configuration</h2>
<p>This api helps to update the configuration details for AWS Lambda function created. You can change the memory, timeout, handler, role, runtime, description etc.</p>
<h3>Commands Involved</h3>
<p>The following are the commands involved in the update-function-configuration api &minus;</p>
<pre class="result notranslate">
update-function-configuration
--function-name &lt;value&gt;
[--role &lt;value&gt;]
[--handler &lt;value&gt;]
[--description &lt;value&gt;]
[--timeout &lt;value&gt;]
[--memory-size &lt;value&gt;]
[--environment &lt;value&gt;]
[--runtime &lt;value&gt;]
[--cli-input-json &lt;value&gt;]
[--generate-cli-skeleton &lt;value&gt;]
</pre>
<h3>Options Involved</h3>
<p>The following are the options involved in update-function-configuration api &minus;</p>
<p><b>--function-name &minus;</b> name of the aws lambda function</p>
<p><b>--role (string) &minus;</b> optional. The ARN of role is needed to be updated.</p>
<p><b>--handler (string) &minus;</b> optional. The handler details of aws lambda function.</p>
<p><b>--description(string) &minus;</b> optional. Description for the function.</p>
<p><b>--timeout(integer) &minus;</b> optional. Time required so that aws lambda function can terminate.</p>
<p><b>--memory-size(integer) &minus;</b> optional. This is the memory given to the aws lambda function. AWS will allocate the amount of CPU and memory allocation based on the memory given.</p>
<p><b>--environment (structure) &minus;</b> optional. It is an object with environment details required in the aws lambda function.</p>
<pre class="result notranslate">
e.g: Variables = {Name1 = string, Name2 = string}
</pre>
<p><b>--runtime(string) &minus;</b> Here you need to specify the runtime environment ie the language selection.</p>
<p>The details of the runtime are shown in the table given below &minus;</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;">Options available</th>
<th style="text-align:center;">runtime</th>
</tr>
<tr>
<td>Python v3.6</td>
<td>python3.6</td>
</tr>
<tr>
<td>Python v2.7</td>
<td>python2.7</td>
</tr>
<tr>
<td>NodeJS v6.10</td>
<td>nodejs6.10</td>
</tr>
<tr>
<td>NodeJS v8.10</td>
<td>nodejs8.10</td>
</tr>
<tr>
<td>Java</td>
<td>java8</td>
</tr>
<tr>
<td>C# 1</td>
<td>dotnetcore1.0</td>
</tr>
<tr>
<td>C# 2</td>
<td>dotnetcore2.0</td>
</tr>
<tr>
<td>Go</td>
<td>go1.x</td>
</tr>
</table>
<p><b>--cli-input-json (string) &minus;</b> optional. This will perform the operation on the api as specified in the json string provided.</p>
<p><b>--generate-cli-skeleton (string) &minus;</b> optional. This will output the JSON skeleton of all details without executing the api. The output can be used as a input to <b>--cli-input-json.</b></p>
<p>Now, let us chage the memory and timeout of AWS Lambda function that we have created earlier. Follow the Steps given below and observe the corresponding screenshots attached for this purpose &minus;</p>
<h3>Step 1</h3>
<p>The memory and timeout before the change occurred is as follows &minus;</p>
<img src="/aws_lambda/images/timeout.jpg" alt="Timeout" />
<h3>Step 2</h3>
<p>Now, with <b>update-function-configuration</b>, let us change the memory and timeout to 320MB and timeout to 10s. For this purpose, use the following command with values &minus;</p>
<pre class="result notranslate">
aws lambda update-function-configuration --function-name “awslambdusingcli” 
--timeout 10 --memory-size 320
</pre>
<h3>Step 3</h3>
<p>Then you can see the following output as the display &minus;</p>
<img src="/aws_lambda/images/cli_updated.jpg" alt="Cli Updated" />
<h3>Step 4</h3>
<p>The display in AWS console after using <b>update-function-configuration</b> is as follows &minus;</p>
<img src="/aws_lambda/images/cli_configuration.jpg" alt="Cli Configuration" />
<h2>Update-function-code</h2>
<p>This api will update the code for an existing AWS Lambda function.</p>
<h3>Commands Involved</h3>
<pre class="result notranslate">
update-function-code
--function-name &lt;value&gt;
[--zip-file &lt;value&gt;]
[--s3-bucket &lt;value&gt;]
[--s3-key &lt;value&gt;]
[--s3-object-version &lt;value&gt;]
[--cli-input-json &lt;value&gt;]
[--generate-cli-skeleton &lt;value&gt;]
</pre>
<h3>Options Involved</h3>
<p>The following are the options involved with the update-function-code api &minus;</p>
<p><b>--function-name(string) &minus;</b> name of aws lambda function</p>
<p><b>--zip-file (blob) &minus;</b> optional. Path of the zip file which has the code to be updated.</p>
<p><b>--s3-bucket(string) &minus;</b> optional. S3 bucket name which has the zip file with code uploaded.</p>
<p><b>--s3-key(string) &minus;</b> optional. AWS s3 object key name which has to be uploaded.</p>
<p><b>--s3-object-version (string) &minus;</b> optional. AWS s3 object version.</p>
<p><b>--cli-input-json (string) &minus;</b> optional. This will perform the operation on the api as specified in the json string provided.</p>
<p><b>--generate-cli-skeleton (string) &minus;</b> optional. This will output the JSON skeleton of all details without executing the api. The output can be used as a input to --cli-input-json.</p>
<p>The updated code is as shown below &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = async (event, context) =&gt; {
   console.log("Using aws cli");
   console.log()
   return 'Hello from Lambda from aws cli!'
};
</pre>
<p>You can use the following <b>command with values for this purpose</b> &minus;</p>
<pre class="result notranslate">
aws lambda update-function-code --function-name "awslambdausingcli" 
--zip-file "fileb://awscli.zip"
</pre>
<p>The corresponding output is as shown here &minus;</p>
<img src="/aws_lambda/images/cli_purpose.jpg" alt="Cli Purpose" />
<p>The display from AWS console is as shown here &minus;</p>
<img src="/aws_lambda/images/aws_cli_console.jpg" alt="AWS Cli Console" />
<p>The corresponding log output is as shown below &minus;</p>
<img src="/aws_lambda/images/cli_log.jpg" alt="Cli Log" />
<h2>delete-function</h2>
<p>The <b>delete</b> aws cli api will delete the function given.</p>
<h3>Commands Included</h3>
<p>The command details for the same are given here &minus;</p>
<pre class="result notranslate">
delete-function
--function-name &lt;value&gt;
[--qualifier &lt;value&gt;]
[--cli-input-json &lt;value&gt;]
[--generate-cli-skeleton &lt;value&gt;]
</pre>
<h3>Options Included</h3>
<p>The options included in this api are as given below &minus;</p>
<p><b>--function-name(string) &minus;</b> this will take the lambda function name or the arn of the aws lambda function.</p>
<p><b>--qualifier (string) &minus;</b> This is optional. Here you can specify the version of aws lambda that needs to be deleted.</p>
<p><b>-- cli-input-json(string) &minus;</b> Performs service operation based on the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, the CLI values will override the JSON-provided values.</p>
<p><b>--generate-cli-skeleton(string) &minus;</b> it prints json skeleton to standard output without sending the API request.</p>
You can use the following command with values for this purpose &minus;</p>
<pre class="result notranslate">
aws lambda delete-function --function-name "lambdatestcli"
</pre>
<p></p>
<img src="/aws_lambda/images/delete_function.jpg" alt="Delete Function" />
<p>Now, observe that the function will not be seen in AWS Lambda function list &minus;</p>
<img src="/aws_lambda/images/cli_keywords.jpg" alt="Cli Keywords" />
<h1>Creating and Deploying using Serverless Framework</h1>
<p>AWS Lambda can be created and deployed using serverless framework. It allows you to create AWS Lambda triggers and also deploy the same by creating the required roles. Serverless framework allows to handle big projects in an easier way. The events and resources required are written in one place and just a few commands helps in deploying the full functionality on AWS console.</p>
<p>In this chapter, you will learn in detail how to get started with AWS serverless framework.</p>
<h2>Install Serverless Framework using npm install</h2>
<p>To begin with, you need to first install <b>nodejs</b>. You can check for nodejs as follows &minus;</p>
<img src="/aws_lambda/images/install_server.jpg" alt="Install Server" />
<p>You will have to use the following command to install serverless using npm package &minus;</p>
<pre class="result notranslate">
npm install -g serverless
</pre>
<p></p>
<img src="/aws_lambda/images/severless.jpg" alt="Severless" />
<p>Once npm is done, execute serverless command which shows the list of command to be used to create and deploy AWS Lambda function. Observe the screenshots given below &minus;</p>
<img src="/aws_lambda/images/framework_command.jpg" alt="Framework Command" />
<p></p>
<img src="/aws_lambda/images/framework_prompt.jpg" alt="Framework Prompt" />
<p>You can also use sls instead of serverless. <b>sls</b> is the shorthand command for serverless.</p>
<img src="/aws_lambda/images/shorthand.jpg" alt="Shorthand" />
<p>In case you need help on the command <b>sls,</b> you can use the following command &minus;</p>
<pre class="result notranslate">
sls create --help
</pre>
<p></p>
<img src="/aws_lambda/images/help.jpg" alt="Help" />
<p>For creating a serverless framework, you have to follow the steps given below &minus;</p>
<h3>Step 1</h3>
<p>To start using serverless framework, we need to add the credentials. By this, you can the user first in AWS console as follows &minus;</p>
<img src="/aws_lambda/images/add_user.jpg" alt="Add User" />
<h3>Step 2</h3>
<p>Click on <b>Next:Permissions</b> button to add permissions. You will have to attach the existing policies or Administrator Access to this user.</p>
<img src="/aws_lambda/images/set_permission.jpg" alt="Set Permission" />
<p></p>
<img src="/aws_lambda/images/summary_review.jpg" alt="Summary Review" />
<h3>Step 3</h3>
<p>Click <b>Create User</b> to add the user. It will display the access key and secret key which we need to configure the serverless framework &minus;</p>
<img src="/aws_lambda/images/create_user.jpg" alt="Create User" />
<h2>Configure AWS Serverless Framework</h2>
<p>Let us see how to configure AWS serverless framework. You can use the following command for this purpose &minus;</p>
<pre class="result notranslate">
sls config credentials --provider aws --key accesskey --secret secretkey
</pre>
<p></p>
<img src="/aws_lambda/images/configure_framework.jpg" alt="Configure Framework" />
<p>Note that the details of credentials entered, that is the <b>access key</b> and <b>secret key</b> are stored in the <b>file /aws/credentials</b>.</p>
<p>First, create a folder where you want your project files to be stored.</p>
<img src="/aws_lambda/images/create_folder.jpg" alt="Create Folder" />
<p>Next, we will start the work in <b>aws-serverless</b> folder.</p>
<h2>Create AWS Lambda using Serverless Framework</h2>
<p>Now, let us create a Lambda function with the serverless framework using the Steps given below &minus;</p> 
<h3>Step 1</h3>
<p>Following are the details for serverless <b>create</b> command &minus;</p>
<img src="/aws_lambda/images/create_command.jpg" alt="Create Command" />
<h3>Step 2</h3>
<p>Now, we need to assign the template which are as follows &minus;</p>
<p><b>AWS-nodejs, aws-nodejs-typescript, aws-nodejs-ecma-script, aws-python, aws-python3, aws-groovy-gradle etc.</b></p>
<h3>Step 3</h3>
<p>We shall make use of <b>aws-nodejs</b> template to create our first project using serverless framework. The command for the same purpose is as shown here &minus;</p>
<pre class="result notranslate">
sls create --template aws-nodejs
</pre>
<p></p>
<img src="/aws_lambda/images/nodejs.jpg" alt="Nodejs" />
<p>Note that this command creates a boilerplate for template aws-nodejs.</p>
<h3>Step 4</h3>
<p>Now, open the folder created in an IDE. Here we are using Visual Studio code and the folder structure is as follows &minus;</p>
<img src="/aws_lambda/images/visual_studio_framework.jpg" alt="Visual Studio Framework" />
<h3>Step 5</h3>
<p>There are 2 files created: <b>handler.js</b> and <b>Serverless.yml</b></p>
<p>The AWS Lambda basic function details are shown in <b>handler.js</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
'use strict';

module.exports.hello = (event, context, callback) =&gt; {
   const response = {
      statusCode: 200,
      body: JSON.stringify({
         message: 'Go Serverless v1.0! Your function executed successfully!',
         input: event,
      }),
   };
   callback(null, response);

   // Use this code if you don't use the http event with the LAMBDA-PROXY integration
   // callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });
};
</pre>
<p>This file <b>Serverless.yml</b> has the configuration details of the serverless framework as shown below &minus;</p>
<pre class="prettyprint notranslate">
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config Examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
service: aws-nodejs # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
 name: aws
 runtime: nodejs6.10

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
 hello:
   handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            Example:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
</pre>
<p>Now, we need to add changes in serverless.yml file as per our requirements. You can use the commands as given below &minus;</p>
<p>You can use the following command for <b>Service</b> &minus;</p>
<pre class="result notranslate">
service: aws-nodejs # NOTE: update this with your service name
</pre>
<p>Now, change the service here and add the name given to our folder as shown &minus;</p>
<pre class="result notranslate">
service: aws-serverless # NOTE: update this with your service name
</pre>
<p>The provider details are as shown &minus;</p>
<pre class="result notranslate">
provider:
   name: aws
   runtime: nodejs6.10
</pre> 
<p>The provider is <b>aws</b> and runtime is <b>nodejs6.10</b>. We need to add the <b>region</b> in which we will be working and the <b>stage</b>, that is <b>dev or prod</b> environment for the project. So here are the updated details of provider:provider &minus;</p>
<pre class="result notranslate">
name: aws
runtime: nodejs6.10
# you can overwrite defaults here
stage: prod
region: us-east-1
</pre> 
<h3>IAM Role</h3>
<p>The <b>iam role</b>, that is, the code for permission to work with Lambda is shown here in the <b>.yml</b> file &minus;</p>
<pre class="prettyprint notranslate">
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"
</pre>
<p>Note that we need to give the details of the role, that is the permission required with other AWS services, in the above section.</p>
<h3>AWS Lambda Handler Details</h3>
<p>The name of the export function in <b>handler.js</b> is hello. So the handler is name of the file followed by export name.</p>
<pre class="result notranslate">
functions:
   hello:
      handler: handler.hello
</pre>	
<p>The resource details about the s3 service added as shown below here &minus;</p>
<pre class="prettyprint notranslate">
# you can add CloudFormation resource templates here
#resources:
#  resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
</pre>
<h2>Deploy AWS Lambda using Serverless Framework</h2>
<p>Let us deploy the above lambda function to AWS console. You can use the following Steps for this purpose &minus;</p>
<h3>Step 1</h3>
<p>First, you will have to use the following command &minus;</p>
<pre class="result notranslate">
 sls deploy
</pre>
<p></p>
<img src="/aws_lambda/images/deploy.jpg" alt="Deploy" />
<h3>Step 2</h3>
<p>Now, you should see the function in AWS console now as shown. The details of serverless AWS are logged in AWS cloud formation. For this purpose, go to AWS service and select <b>CloudFormation</b>. The details of the AWS Lambda are displayed as follows &minus;</p>
<img src="/aws_lambda/images/cloud_framework.jpg" alt="Cloud Framework" />
<p>Observe that the name given is project name followed by the stage used.</p>
<img src="/aws_lambda/images/stage_used.jpg" alt="Stage Used" />
<h3>Step 3</h3>
<p>It creates the iam role for AWS Lambda and log group for AWS cloudwatch. S3 bucket is created which has the code details stored and the configuration details.</p>
<p>This is created by the command <b>sls deploy</b>. You need not specify the iam role, instead it is created by default during the <b>deploy</b> stage.</p>
<img src="/aws_lambda/images/serverless_prod.jpg" alt="Serverless Prod" />
<h3>Step 4</h3>
<p>The detailed flow of events is displayed below in the cloud formation service.</p>
<img src="/aws_lambda/images/detailed_flow.jpg" alt="Detailed Flow" />
<p></p>
<img src="/aws_lambda/images/hello.jpg" alt="Hello" />
<h2>AWS Lambda Code</h2>
<p>The AWS Lambda code and its execution settings are shown in the screenshot given below &minus;</p>
<img src="/aws_lambda/images/lambda_code.jpg" alt="Lambda Code" />
<p>When you test the Lambda function, you can find the following output &minus;</p>
<img src="/aws_lambda/images/lambda_framework.jpg" alt="Lambda framework" />
<p></p>
<img src="/aws_lambda/images/execution_framework.jpg" alt="Execution Framework" />
<p>The Log output for the above function is shown here &minus;</p>
<img src="/aws_lambda/images/framework_output.jpg" alt="Framework Output" />
<p>We can also test the AWS Lambda function using the serverless command as shown below &minus;</p>
<pre class="result notranslate">
sls invoke --function hello
</pre>
<p></p>
<img src="/aws_lambda/images/serverless_framework.jpg" alt="Serverless Framework" />
<p>The syntax of the invoke command is shown here &minus;</p>
<pre class="result notranslate">
sls invoke --function hello
</pre>
<p>This invoke command triggers the AWS Lambda function and displays the output in the command prompt as shown below &minus;</p>
<img src="/aws_lambda/images/command_trigger.jpg" alt="Command Trigger" />
<p>You can also test the Lambda function before deploying and the command for same using the following command  &minus;</p>
<pre class="result notranslate">
sls invoke local --function hello 
</pre>
<p>Please note that it is not always possible to test locally as the resources like S3 andDynanoDB cannot be simulated on the local environment. Only the basic function calls can be tested locally.</p>
<img src="/aws_lambda/images/invoke_local.jpg" alt="Invoke Local" />
<h2>Using API Gateway and AWS Lambda with Serverless Framework</h2>
<p>Let us see how to create new project to work with Lambda and api gateway. You can use the following command for this purpose &minus;</p>
<pre class="result notranslate">
sls create --template aws-nodejs 
</pre>
<p></p>
<img src="/aws_lambda/images/api_gateway_framework.jpg" alt="Api Gateway Framework" />
<p>Now, open <b>aws-api</b> project in visual code. You can see that the <b>handler.js</b> and <b>serverless.yml</b> files created. Let us do the changes in that for addition of api gateway.</p>
<img src="/aws_lambda/images/handler_open.jpg" alt="Handler Open" />
<p>You will have to do the following changes in <b>serverless.yml</b> &minus;</p>
<img src="/aws_lambda/images/changes.jpg" alt="Changes" />
<p>Now, the events details added for api gateway activation with AWS Lambda &minus;</p>
<img src="/aws_lambda/images/event_details.jpg" alt="Event Details" />
<p>There is a new thing added here called <b>events</b>. We have specified the event as <b>http</b>, along with its path and method.</p>
<p>The path is the end-point which we will use when the api gateway path is created and method used is GET.</p>
<p>Observe that the handler is <b>handler.hello</b>, and hello is the export name from handler.js.</p>
<img src="/aws_lambda/images/observe_handler.jpg" alt="Observe Handler" />
<p>Note that you donot have to deploy the api gateway here, as the serverless framework will perform it.</p>
<p>Now, we will run the <b>sls deploy</b> command to create AWS Lambda function with trigger as <b>api gateway</b>.</p>
<pre class="result notranslate">
sls deploy
</pre>
<p></p>
<img src="/aws_lambda/images/sls_deploy.jpg" alt="Sls Deploy" />
<p>Observe that the deploy details are listed above. It gives the <b>Get</b> url with the end-point as the path details. The stage is <b>prod</b> so same is used in the url. The name of the function is <b>aws-api-prod-hello</b>.</p>
<p>Let us hit the url and see the output. You can see the followings the response we get from the api-gateway get url &minus;</p>
<img src="/aws_lambda/images/response.jpg" alt="Response" />
<pre class="result notranslate">
{"message":"Go Serverless v1.0! Your function executed 
successfully!","input":{"resource":"/first-api","path":"/first-api","httpMethod":
"GET","headers":{"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,
image/webp,image/apng,*/*;q=0.8","Accept-Encoding":"gzip, deflate, br","Accept-Language":"en-US,en;q=0.9","CloudFront-Forwarded-Proto":
"https","CloudFront-Is-Desktop-Viewer":"true","CloudFront-Is-Mobile-Viewer":
"false","CloudFront-Is-SmartTV-Viewer":"false","CloudFront-Is-Tablet-Viewer":
"false","CloudFront-Viewer-Country":"IN","Host":"nvbhfdojfg.execute-api.us-east-1.
amazonaws.com","upgrade-insecure-requests":"1","User-Agent":"Mozilla/5.0 
(Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)
 Chrome/66.0.3359.181 Safari/537.36","Via":"2.0 707912794802dbb4825c79b7d8626a5d.cloudfront.net (CloudFront)","X-Amz-Cf-Id":"j70MMqkWFp6kmvuauzp_nvTbI-WwKIQmm2Jl5hzSoN6gkdvX11hh-g==",
 "X-Amzn-Trace-Id":"Root=1-5b13f9ef-5b012e36b7f40b5013a326fc","X-Forwarded-For":"157.33.133.217, 54.182.242.73","X-Forwarded-Port":"443","X-Forwarded-Proto":"https"},
 "queryStringParameters":null,"pathParameters":null,"stageVariables":null,
 "requestContext":{"resourceId":"pes5sy","resourcePath":"/first-api","httpMethod":
 "GET","extendedRequestId":"H6P9fE-MoAMFdIg=","requestTime":"03/Jun/2018:14:23:
 43 +0000","path":"/prod/first-api","accountId":"625297745038","protocol":"HTTP/1.1",
 "stage":"prod","requestTimeEpoch":1528035823928,"requestId":"b865dbd6-6739-11e8-b135
 -a30269a8ec58","identity":{"cognitoIdentityPoolId":null,"accountId":null,
 "cognitoIdentityId":null,"caller":null,"SourceIp":"157.33.133.217","accessKey":null,
 "cognitoAuthenticationType":null,"cognitoAuthenticationProvider":null,"userArn":null,
 "userAgent":"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like
 Gecko) Chrome/66.0.3359.181 Safari/537.36","user":null},"apiId":"nvbhfdojfg"},"body":null,
 "isBase64Encoded":false}}
</pre>
<p>The event details are also available in the output when you hit the url. The httpMethod is GET and the queryStringParameters are null as there is nothing passed in the query string. The event details are given to <b>input</b> which we have specified in the AWS Lambda handler &minus;</p>
<img src="/aws_lambda/images/input.jpg" alt="Input" />
<p>The output we get from api gateway are only the <b>body</b> details such as <b>message</b> and <b>input</b>. The response is totally controlled by the api gateway and how to display it as output.</p>
<p>Now, let us pass inputs to the GET url in query string and see the display &minus;</p>
<img src="/aws_lambda/images/get_url.jpg" alt="Get Url" />

<p>Then you can see the output of querystring as shown below &minus;</p>
<pre class="result notranslate">
{"message":"Go Serverless v1.0! Your function executed 
successfully!","input":{"resource":"/first-api","path":"/first-api","httpMethod":
"GET","headers":{"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,
image/webp,image/apng,*/*;q=0.8","Accept-Encoding":"gzip, deflate, 
br","Accept-Language":"en-US,en;q=0.9","CloudFront-Forwarded-Proto":"https",
"CloudFront-Is-Desktop-Viewer":"true","CloudFront-Is-Mobile-Viewer":"false",
"CloudFront-Is-SmartTV-Viewer":"false","CloudFront-Is-Tablet-Viewer":"false",
"CloudFront-Viewer-Country":"IN","Host":"nvbhfdojfg.execute-api.us-east-1.amazonaws.com",
"upgrade-insecure-requests":"1","User-Agent":"Mozilla/5.0 (Windows NT 6.3; Win64; x64)
 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36","Via":"2.0 
 8b1d3263c2fbd0a2c270b174d7aa3d61.cloudfront.net (CloudFront)","X-Amz-Cf-Id":"JIBZw3I-blKbnpHP8LYXPVolCgdW5KmEukZS4at9mi4vrWBMI-UKNw==",
 "X-Amzn-Trace-Id":"Root=1-5b13ff90-7d6e38d4c0e4a5d4e6184f30","X-Forwarded-For":
 "157.33.133.217, 54.182.242.127","X-Forwarded-Port":"443","X-Forwarded-Proto":"https"},"queryString
 Parameters":{"displaymessage":"Hello"},"pathParameters":null,"stageVariables":null,
 "requestContext":{"resourceId":"pes5sy","resourcePath":"/first-api","httpMethod":
 "GET","extendedRequestId":"H6TeiG34oAMFguA=","requestTime":"03/Jun/2018:14:47:44 +0000","path":"/prod/first-api","accountId":"625297745038","protocol":"HTTP/1.1",
"stage":"prod","requestTimeEpoch":1528037264252,"requestId":"12e5dca3-
673d-11e8-8966-69fcf43bd4db","identity":{"cognitoIdentityPoolId":null,"accountId":null,
"cognitoIdentityId":null,"caller":null,"exmpleIp":"157.33.133.217","accessKey":null,
"cognitoAuthenticationType":null,"cognitoAuthenticationProvider":null,"userArn":null,
"userAgent":"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like
 Gecko) Chrome/66.0.3359.181 Safari/537.36","user":null},"apiId":"nvbhfdojfg"},"body":
 null,"isBase64Encoded":false}}
</pre>
<p>Let us change the AWS Lambda function to just display the querystring details as shown below &minus;</p>
<pre class="prettyprint notranslate">
'use strict';
module.exports.hello = (event, context, callback) =&gt; {
   const response = {
      statusCode: 200,
      body: JSON.stringify({
         message:(event.queryStringParameters &&     event.queryStringParameters.displaymessage!="") ? event.queryStringParameters.displaymessage : 'Go Serverless v1.0! Your function executed successfully!'
      }),
   };
   callback(null, response);
   // Use this code if you don't use the http event with the LAMBDA-PROXY integration
   // callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });
};
</pre>
<p>Observe that we have changed the message based on the querystring <b>display message</b>. This will deploy the the function again and check the output. It displays the details present in query string variable display message as shown below.</p>
<img src="/aws_lambda/images/display_message.jpg" alt="Display Message" />
<p>Let us now add <b>post</b> method to the events created as shown below &minus;</p>
<img src="/aws_lambda/images/post_method.jpg" alt="Post Method" />
<p>Now, deploy the changes made and you can see the following output from the deploy command &minus;</p>
<img src="/aws_lambda/images/deploy_command.jpg" alt="Deploy Command" />
<p>Note that testing post url in browser directly will not give the details. You should test the post url in <b>postman</b>.</p> 
<p>To get postman go to <a href="https://www.getpostman.com/apps" rel="nofollow" target="_blank">https://www.getpostman.com/apps</a>. Download the app as per your OS. Once installed, you should be able to test your post url as shown below &minus;</p>
<img src="/aws_lambda/images/post_url.jpg" alt="Post Url" />
<p>This displays the message we have added in the Lambda function.</p>
<h1>Executing and Invoking Lambda Function</h1>
<p>This chapter will explain in detail about process of executing and invoking Lambda function and the steps involved in it.</p>
<h2>AWS Lambda Execution Model</h2>
<p>AWS execution depends on the configuration details added for AWS Lambda Function. When the function is created, there is a <b>memory</b> and <b>time allotted</b>, which is used for the execution of AWS Lambda function.</p>
<p>With the help of the configuration details, AWS Lambda creates an execution context. Execution context is a temporary runtime environment which is made ready with any external dependencies such as database connection, http endpoints, third party libraries etc., if any.</p>
<p>When AWS Lambda function is invoked for the very first time or if the lambda function is updated, there is little latency added because of the execution context setup. However, the subsequent calls are faster in comparison to the first one. AWS Lambda tries to reuse the execution context again if the Lambda function is invoked taking lesser time.</p>
<p>The reuse of execution context has the following implications &minus;</p>
<ul class="list">
<li><p>If there is any database connection done for the execution of Lambda, the connection is maintained for reuse. So the Lambda code has to be such that the connection has to be checked first- if exists and reused; otherwise we shall have to make fresh new connection.</p></li>
<li><p>Execution context maintains a disk space of 500MB in <b>/tmp</b> directory. The data required is cached in this directory. You can have additional check in the code to see if the data exists.</p></li>
<li><p>If the callbacks or some background processes if the are not complete when the Lambda function was invoked, the execution will start when the lambda function is invoked again. Incase you do not need such thing to happen make sure your processes are all ended properly, when the function execution is complete.</p></li>
</ul>	
<p>You should use of the execution context and the data stored in tmp directory. You will have to add necessary checks in the code to see if the required data exists before creating fresh new ones. This will save the time during execution and make it more faster.</p>
<h2>Invoking AWS Lambda function</h2>
<p>We can invoke AWS manually using <b>aws cli</b>. We have already seen how to create and deploy AWS Lambda using <b>cli</b>. Here, we will first create a function using <b>aws cli</b> and invoke the same.</p>
<h3>Creating AWS Lambda Function using AWS CLI</h3>
<p>You can use the following commands for creating AWS Lambda function using <b>aws cli</b> &minus;</p>
<p><b>Commands</b></p>
<pre class="result notranslate">
create-function 
--function-name &lt;value&gt;
--runtime &lt;value&gt;
--role &lt;value&gt;
--handler &lt;value&gt;
[--code &lt;value&gt;] 
[--description &lt;value&gt;] 
[--timeout &lt;value&gt;] 
[--memory-size &lt;value&gt;] 
[--environment &lt;value&gt;] 
[--kms-key-arn &lt;value&gt;] 
[--tags &lt;value&gt;] 
[--zip-file &lt;value&gt;] 
[--cli-input-json &lt;value&gt;]
</pre>
<p><b>Command with values</b></p>
<pre class="result notranslate">
aws lambda create-function 
--function-name "lambdainvoke" 
--runtime "nodejs8.10" 
--role "arn:aws:iam::625297745038:role/lambdaapipolicy" 
--handler "index.handler" 
--timeout 5 
--memory-size 256 
--zip-file "fileb://C:\nodeproject\index.zip"
</pre>
<p>The output is as shown below &minus;</p>
<img src="/aws_lambda/images/command_with_values.jpg" alt="Command With Values" />
<p>The function created in AWS console is as shown below &minus;</p>
<img src="/aws_lambda/images/function_created.jpg" alt="Function Created" />
<p></p>
<img src="/aws_lambda/images/code_entry_type.jpg" alt="Code Entry Type" />
<img src="/aws_lambda/images/existing_role.jpg" alt="Existing Role" />
<p>Now, you can invoke the function using the command:<b>invoke</b></p>
<pre class="result notranslate">
--function-name &lt;value&gt;
[--invocation-type &lt;value&gt;]
[--log-type &lt;value&gt;]
[--client-context &lt;value&gt;]
[--payload &lt;value&gt;]
[--qualifier &lt;value&gt;]
outfile &lt;value&gt;
</pre>
<p><b>Options</b></p>
<p><b>--function-name &minus;</b>  Specify the name of the function you want to invoke.</p>
<p><b>--invocation-type(string) &minus;</b> by default the invokation-type is <b>requestresponse</b>. The values available to be used with invokation-type is <b>RequestResponse, Event</b> and <b>DryRun</b>.</p>
<ul class="list">
<li><p>Event invocation-type is to be used for async response.</p></li>
<li><p>DryRun is to be used when you want to verify the Lambda function without need of executing it.</p></li>
</ul>
<p><b>--log-type &minus;</b> It will be <b>Tail</b> if the invocation type is RequestResponse. It gives the last 4KB base64-encoded log data. Possible values are <b>Tail</b> and <b>None</b>.</p>
<p><b>--client-context &minus;</b> You can pass client specific details to the Lambda function. The clientcontext has to be in json format and base64-encoded. Maximum file size is 3583 bytes.</p>
<p><b>--payload &minus;</b> json format input to you lambda function.</p>
<p><b>--qualifier &minus;</b> You can specify Lambda function version or alias name. If you pass the function version than the api will use qualified function arn to invoke the Lambda function. If you specify alias name, the api uses alias ARN to invoke Lambda function.</p>
<p><b>outfile &minus;</b> This is the filename where the content will be saved.</p>
<p><b>Command with values</b></p>
<pre class="result notranslate">
aws lambda invoke --function-name "lambdainvoke" --log-type 
Tail C:\nodeproject\outputfile.txt
</pre>
<p></p>
<img src="/aws_lambda/images/command_values.jpg" alt="Command Values" />
<p>You can use payload option to send dummy event to the lambda function in json format as shown below.</p>
<p>The related AWS Lambda code is as follows &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = async (event, callback) =&gt; {
   console.log("Hello =&gt; "+ event.name);
   console.log("Address =&gt;"+ event.addr);
   callback(null, 'Hello '+event.name +" and address is "+ event.addr);
};
</pre>
<p>Observe that in the code, we have console <b>event.name</b> and <b>event.addr</b>. Now, let us use payload option in aws cli to send the event with name and address as follows &minus;</p>
<pre class="result notranslate">
aws lambda invoke --function-name "lambdainvoke" --log-type 
Tail --payload file://C:\clioutput\input.txt C:\clioutput\outputfile.txt
</pre>
<p>Thenpayload takes input as a filepath which has json input as shown &minus;</p>
<pre class="result notranslate">
{"name":"Roy Singh", "addr":"Mumbai"}
</pre>
<p>The corresponding output is as shown below &minus;</p>
<img src="/aws_lambda/images/correspond_output.jpg" alt="Correspond Output" />
<p>The output is stored in the file <b>C:\clioutput\outputfile.txt</b> as follows &minus;</p>
<pre class="result notranslate">
"Hello Roy Singh and address is Mumbai"
</pre>
<h2>Sample Events</h2>
<p>You can test AWS Lambda function by passing a sample event. This section gives some sample events for AWS Services. You can use the <b>invoke</b> command to test the output when triggered with any of the services. Observe the codes given for corresponding sample events below &minus;</p>
<h3>Amazon S3 Put Sample Event</h3>
<pre class="prettyprint notranslate">
{
  "Records": [{
      "eventVersion": "2.0",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "requestParameters": {
         "SourceIPAddress": "127.0.0.1"
      },
      "s3": {
         "configurationId": "testConfigRule",
         "object": {
            "eTag": "0123456789abcdef0123456789abcdef",
            "sequencer": "0A1B2C3D4E5F678901",
            "key": "HappyFace.jpg",
            "size": 1024
         },
         "bucket": { 
            "arn": bucketarn,
            "name": "Sourcebucket",
            "ownerIdentity": {
               "principalId": "EXAMPLE"
            }
         },
         "s3SchemaVersion": "1.0"
      },
      "responseElements": {
         "x-amz-id-2": "EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH",
         "x-amz-request-id": "EXAMPLE123456789"
      },
      "awsRegion": "us-east-1",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {
         "principalId": "EXAMPLE"
      },
      "eventSource": "aws:s3"
   }]
}
</pre>

<p>To get the <b>details of the file from the s3 put event</b>, you can use the following command &minus;</p>
<pre class="result notranslate">
event.Records[0].s3.object.key   //will display the name of the file
</pre>
<p>To <b>get the bucket name</b>, you can use the following command &minus;</p>
<pre class="result notranslate">
event.Records[0].s3.bucket.name  //will give the name of the bucket.
</pre>
<p>To <b>see the EventName</b>, you can use the following command &minus;</p>
<pre class="result notranslate">
event.Records[0].eventName    // will display the eventname
</pre>
<h3>Amazon S3 Delete Sample Event</h3>
<pre class="prettyprint notranslate">
{
   "Records": [{
      "eventVersion": "2.0",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "requestParameters": {
         "SourceIPAddress": "127.0.0.1"
      },
      "s3": {
         "configurationId": "testConfigRule",
         "object": {
            "sequencer": "0A1B2C3D4E5F678901",
            "key": "HappyFace.jpg"
         },
         "bucket": {
            "arn": bucketarn,
            "name": "Sourcebucket",
            "ownerIdentity": {
               "principalId": "EXAMPLE"
            }
         },
        "s3SchemaVersion": "1.0"
      },
      "responseElements": {
         "x-amz-id-2": "EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH",
         "x-amz-request-id": "EXAMPLE123456789"
      },
      "awsRegion": "us-east-1",
      "eventName": "ObjectRemoved:Delete",
      "userIdentity": {
         "principalId": "EXAMPLE"
      },
      "eventSource": "aws:s3"
   }]
} 
</pre>
<h3>Amazon DynamoDB</h3>
<p>Amazon DynamoDB can be an event on AWS Lambda when changes are made on DynamoDB table. We can perform operation like add entry, update and delete records from the DynamodDB table.</p>
<p>A sample event for DynamoDB add, insert and delete event is shown here &minus;</p>
<pre class="prettyprint notranslate">
{
  "Records": [{
      "eventID": "1",
      "eventVersion": "1.0",
      "dynamodb": {
         "Keys": {
            "Id": {
               "N": "101"
            }
         },
         "NewImage": {
            "Message": {
               "S": "New item!"
            },
            "Id": {
               "N": "101"
            }
         },
         "StreamViewType": "NEW_AND_OLD_IMAGES",
         "SequenceNumber": "111",
         "SizeBytes": 26
      },
      "awsRegion": "us-west-2",
      "eventName": "INSERT",
      "eventSourceARN": eventSourcearn,
      "eventSource": "aws:dynamodb"
   },
   {
      "eventID": "2",
      "eventVersion": "1.0",
      "dynamodb": {
         "OldImage": {
            "Message": {
               "S": "New item!"
            },
            "Id": {
               "N": "101"
            }
         },
        "SequenceNumber": "222",
        "Keys": {
            "Id": {
               "N": "101"
            }
         },
        "SizeBytes": 59,
        "NewImage": {
            "Message": {
               "S": "This item has changed"
            },
            "Id": {
				   "N": "101"
            }
         },
         "StreamViewType": "NEW_AND_OLD_IMAGES"
      },
      "awsRegion": "us-west-2",
      "eventName": "MODIFY",
      "eventSourceARN": Sourcearn,
      "eventSource": "aws:dynamodb"
   },
   {      
   "eventID": "3",
      "eventVersion": "1.0",
      "dynamodb": {
         "Keys": {
            "Id": {
               "N": "101"
            }
         },
         "SizeBytes": 38,
         "SequenceNumber": "333",
         "OldImage": {
            "Message": {
               "S": "This item has changed"
            },
            "Id": {
               "N": "101"
            }
         },
         "StreamViewType": "NEW_AND_OLD_IMAGES"
      },      "awsRegion": "us-west-2",
      "eventName": "REMOVE",
      "eventSourceARN": Sourcearn,
      "eventSource": "aws:dynamodb"    
   }]
}
</pre>
<h2>Amazon Simple Notification Service</h2>
<p>AWS Lambda can be helpful to process the notification created in <b>Simple Notification Service (SNS)</b>. Whenever there is message published in SNS, the Lambda function can be triggered with a SNS event, which has details of the messages. This messages can be processed inside Lambda function and can be sent further to other services as per the requirement.</p>
<p>Once the message is entered, SNS will trigger the Lambda function. If any error tries to invoke the Lambda function, SNS will retry to call the lambda function upto three times.</p>
<h3>Amazon SNS Sample Event</h3>
<p>A sample event that has all the details available in AWS Lambda function to carry out the further process is shown below &minus;</p>
<pre class="prettyprint notranslate">
{
  "Records": [{
      "EventVersion": "1.0",
      "EventSubscriptionArn": eventsubscriptionarn,
      "EventSource": "aws:sns",
      "Sns": {
         "SignatureVersion": "1",
         "Timestamp": "1970-01-01T00:00:00.000Z",
         "Signature": "EXAMPLE",
         "SigningCertUrl": "EXAMPLE",
         "MessageId": "95df01b4-ee98-5cb9-9903-4c221d41eb5e",
         "Message": "Hello from SNS!",
         "MessageAttributes": {
            "Test": {
               "Type": "String",
               "Value": "TestString"
            },
            "TestBinary": {
               "Type": "Binary",
               "Value": "TestBinary"
            }
         },
         "Type": "Notification",
         "UnsubscribeUrl": "EXAMPLE",
         "TopicArn": topicarn,
         "Subject": "TestInvoke"
      }
   }]
}
</pre>
<h2>Amazon Simple Mail Service</h2>
<p>Amazon Simple Mail Service can be used to send messages and also to receive messages. The AWS Lambda function can be called on Simple Mail Service when the message is received.</p>
<h3>Amazon SES Email Receiving Sample Event</h3>
<p>The details of SES event when used inside AWS Lambda is shown below &minus;</p>
<pre class="prettyprint notranslate">
{
  "Records": [{
      "eventVersion": "1.0",
      "ses": {
         "mail": {
            "commonHeaders": {
               "from": [
                  "Jane Doe &lt;janedoe@example.com&gt;"
               ],
            "to": [
               "johndoe@Source.com"
            ],
            "returnPath": "janedoe@example.com",
            "messageId": "&lt;0123456789Source.com&gt;",
            "date": "Wed, 7 Oct 2015 12:34:56 -0700",
            "subject": "Test Subject"
         },
         "example": "janedoe@example.com",
         "timestamp": "1970-01-01T00:00:00.000Z",
         "destination": [
            "johndoe@example.com"
         ],
         "headers": [{
            "name": "Return-Path",
            "value": "&lt;janedoe@example.com&gt;"
         },
         {
            "name": "Received",
            "value": "from mailer.example.com (mailer.example.com [203.0.113.1]) by inbound-smtp.us-west-2.amazonaws.com with SMTP id o3vrnil0e2ic for johndoe@example.com; Wed, 07 Oct 2015 12:34:56 +0000 (UTC)"
         },
         {
            "name": "DKIM-Signature",
            "value": "v=1; a=rsa-sha256; c=relaxed/relaxed; d=example.com; s=example; h=mime-version:from:date:message-id:subject:to:content-type; bh=jX3F0bCAI7sIbkHyy3mLYO28ieDQz2R0P8HwQkklFj4=; b=sQwJ+LMe9RjkesGu+vqU56asvMhrLRRYrWCbV"
         },
         {
            "name": "MIME-Version",
            "value": "1.0"
         },
         {
            "name": "From",
            "value": "Jane Doe &lt;janedoe@example.com&gt;"
         },
         {
            "name": "Date",
            "value": "Wed, 7 Oct 2015 12:34:56 -0700"
         },
         {
            "name": "Message-ID",
            "value": "&lt;0123456789example.com&gt;"
         },
         {
            "name": "Subject",
            "value": "Test Subject"
         },
         {
            "name": "To",
            "value": "johndoe@example.com"
         },
         {
            "name": "Content-Type",
            "value": "text/plain; charset=UTF-8"
         }],
         "headersTruncated": false,
         "messageId": "o3vrnil0e2ic28tr"
      },
      "receipt": {
         "recipients": [
            "johndoe@example.com"
         ],
         "timestamp": "1970-01-01T00:00:00.000Z",
         "spamVerdict": {
            "status": "PASS"
         },
         "dkimVerdict": {
            "status": "PASS"
         },
         "processingTimeMillis": 574,
         "action": {
            "type": "Lambda",
            "invocationType": "Event",
            "functionArn": "arn:aws:lambda:us-west-2:012345678912:function:example"
         },
         "spfVerdict": {
            "status": "PASS"
         },
         "virusVerdict": {
            "status": "PASS"
         }
      }
   },
   "eventexample": "aws:ses"
   }]
}
</pre>
<h2>Amazon Cloudwatch Logs</h2>
<p>AWS Lambda can be triggered from Amazon CloudWatch Logs using the <b>CloudWatch Logs Subscriptions</b>. CloudWatch Logs subscriptions has data real-time data about the logs which can be processed and analyzed inside AWS Lambda or could be used to load to other systems.</p>
<h3>Amazon CloudWatch Logs Sample Event</h3>
<pre class="result notranslate">
{
   "awslogs": {
      "data": "H4sIAAAAAAAAAHWPwQqCQBCGX0Xm7EFtK+smZBEUgXoLCdMhFtKV3akI8d0bLYmibvPPN3wz00CJxmQnTO41whwW
      QRIctmEcB6sQbFC3CjW3XW8kxpOpP+OC22d1Wml1qZkQGtoMsScxaczKN3plG8zlaHIta5KqWsozoTYw3/djzwhpL
      wivWFGHGpAFe7DL68JlBUk+l7KSN7tCOEJ4M3/qOI49vMHj+zCKdlFqLaU2ZHV2a4Ct/an0/ivdX8oYc1UVX860fQ
      DQiMdxRQEAAA=="
   }
}
</pre>
<h2>Amazon API Gateway</h2>
<p>AWS Lambda function can be invoked on <b>https</b> url. IT can be done on <b>GET, POST, PUT</b>. When the https url is invoked, the AWS Lambda function is also triggered and the data passed to https using get/post can be made available inside AWS Lambda to be used to insert in DynamoDB or to send mail etc.</p>
<h3>API Gateway Proxy Request Event</h3>
<pre class="prettyprint notranslate">
{
   "path": "/test/hello",
   "headers": {
      "Accept":  "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
      "Accept-Encoding": "gzip, deflate, lzma, sdch, br",
      "Accept-Language": "en-US,en;q=0.8",
      "CloudFront-Forwarded-Proto": "https",
      "CloudFront-Is-Desktop-Viewer": "true",
      "CloudFront-Is-Mobile-Viewer": "false",
      "CloudFront-Is-SmartTV-Viewer": "false",
      "CloudFront-Is-Tablet-Viewer": "false",
      "CloudFront-Viewer-Country": "US",
      "Host": "wt6mne2s9k.execute-api.us-west-2.amazonaws.com",
      "Upgrade-Insecure-Requests": "1",
      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36 OPR/39.0.2256.48",
      "Via": "1.1 fb7cca60f0ecd82ce07790c9c5eef16c.cloudfront.net (CloudFront)",
      "X-Amz-Cf-Id": "nBsWBOrSHMgnaROZJK1wGCZ9PcRcSpq_oSXZNQwQ10OTZL4cimZo3g==",
      "X-Forwarded-For": "192.168.100.1, 192.168.1.1",
      "X-Forwarded-Port": "443",
      "X-Forwarded-Proto": "https"
   },
   "pathParameters": {
      "proxy": "hello"
   },
   "requestContext": {
      "accountId": "123456789012",
      "reexampleId": "us4z18",
      "stage": "test",
      "requestId": "41b45ea3-70b5-11e6-b7bd-69b5aaebc7d9",
	   "identity": {
         "cognitoIdentityPoolId": "",
         "accountId": "",
         "cognitoIdentityId": "",
         "caller": "",
         "apiKey": "",
         "exampleIp": "192.168.100.1",
         "cognitoAuthenticationType": "",
         "cognitoAuthenticationProvider": "",
         "userArn": "",
         "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36 OPR/39.0.2256.48",
         "user": ""
      },
      "reexamplePath": "/{proxy+}",
      "httpMethod": "GET",
      "apiId": "wt6mne2s9k"
   },
   "reexample": "/{proxy+}",
   "httpMethod": "GET",
   "queryStringParameters": {
      "name": "me"
   },
   "stageVariables": {
      "stageVarName": "stageVarValue"
   }
}
</pre>
<h3>API Gateway Proxy Response Event</h3>
<pre class="prettyprint notranslate">
{
   "statusCode": 200,
   "headers": {
      "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
      "Accept-Encoding": "gzip, deflate, lzma, sdch, br",
      "Accept-Language": "en-US,en;q=0.8",
      "CloudFront-Forwarded-Proto": "https",
      "CloudFront-Is-Desktop-Viewer": "true",
      "CloudFront-Is-Mobile-Viewer": "false",
      "CloudFront-Is-SmartTV-Viewer": "false",
      "CloudFront-Is-Tablet-Viewer": "false",
      "CloudFront-Viewer-Country": "US",
      "Host": "wt6mne2s9k.execute-api.us-west-2.amazonaws.com",
      "Upgrade-Insecure-Requests": "1",
      "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36 OPR/39.0.2256.48",
      "Via": "1.1 fb7cca60f0ecd82ce07790c9c5eef16c.cloudfront.net (CloudFront)",
      "X-Amz-Cf-Id": "nBsWBOrSHMgnaROZJK1wGCZ9PcRcSpq_oSXZNQwQ10OTZL4cimZo3g==",
      "X-Forwarded-For": "192.168.100.1, 192.168.1.1",
      "X-Forwarded-Port": "443",
      "X-Forwarded-Proto": "https"
   },
   "body": "Hello World"
}
</pre>
<h1>Deleting Lambda Function</h1>
<p>Deleting AWS Lambda function will remove the AWS Lambda from the AWS console. There are 2 ways to delete AWS Lambda function.</p>
<ul class="list">
<li>Using AWS console.</li>
<li>Using AWS CLI command</li>
</ul>
<p>This chapter discusses these two ways in detail.</p>
<h2>Using AWS Console</h2>
<p>For deleting a Lambda function using AWS console, follow the steps given below &minus;</p>
<h3>Step 1</h3>
<p>Login to AWS console and go to AWS Lambda service. You can find that AWS lambda functions created so far are listed in AWS console as shown below &minus;</p>
<img src="/aws_lambda/images/aws_console_using.jpg" alt="AWS Console Using" />
<p>The list shows that there are 23 AWS Lambda functions created so far. You can view them using the pagination provided on the top or search the AWS Lambda by using the search box.</p>
<h3>Step 2</h3>
<p>Observe that there is a radio button across each of the AWS Lambda function. Select the function you want to delete. Observe the screenshot shown below &minus;</p>
<img src="/aws_lambda/images/radio_button.jpg" alt="Radio Button" />
<h3>Step 3</h3>
<p>Once you select the AWS Lambda function, the <b>Action</b> dropdown which was earlier grayed out is highlighted now. Now, open the combo box and it will display options as shown &minus;</p>
<img src="/aws_lambda/images/action.jpg" alt="Action" />
<h3>Step 4</h3>
<p>Select the <b>Delete</b> button to delete the AWS Lambda function. Once you click <b>Delete</b>, it displays the message as follows &minus;</p>
<img src="/aws_lambda/images/display_date.jpg" alt="Display Date" />
<h3>Step 5</h3>
<p>Read the message carefully and later click <b>Delete</b> button to remove the AWS lambda function permanently.</p>
<p><b>Note</b> &minus; Deleting aws lambda will not delete the role linked. To remove the role, you need to go to IAM and remove the role.</p>
<h3>Step 6</h3>
<p>The list of roles created so far is shown below. Observe that there is a <b>Create role</b> button and <b>Delete role</b> button.</p>
<img src="/aws_lambda/images/delete_role.jpg" alt="Delete Role" />
<p>Click the checkbox across the role you want to delete. You can also select multiple roles to delete at a time.</p>
<img src="/aws_lambda/images/delete_time.jpg" alt="Delete Time" />
<h3>Step 7</h3>
<p>You will see a confirmation message as shown below once you click Delete button &minus;</p>
<img src="/aws_lambda/images/delete_button.jpg" alt="Delete Button" />
<p>Now, read the details mentioned carefully and later click <b>Yes, delete</b> button.</p>
<h2>Using AWS CLI command</h2>
<p>Let us first create a Lambda function using aws cli and delete the same using the same command. Follow the Steps given below for this purpose &minus;</p>
<h3>Step 1</h3
<p>The command with values for create-function is as follows &minus;</p>
<pre class="result notranslate">
aws lambda create-function 
--function-name "lambdatestcli" 
--runtime "nodejs8.10" 
--role "arn:aws:iam::625297745038:role/lambdaapipolicy" 
--handler "index.handler" 
--timeout 5 
--memory-size 256 
--zip-file "fileb://C:\demotest\index.zip"
</pre>
<p>The corresponding output is shown here &minus;</p>
<img src="/aws_lambda/images/cli_command.jpg" alt="CLI command" />
<h3>Step 2</h3>
<p>The AWS Lambda function created is <b>lambdatestcli</b>. We have used existing role arn to create the lambda function.</p>
<p>Then you can find this function displayed in AWS console as shown below &minus;</p>
<img src="/aws_lambda/images/lambda_test.jpg" alt="Lambda Test" />
<h3>Step 3</h3
<p>Now, let us invoke the function to test the output using the command shown &minus;</p>
<pre class="result notranslate">
aws lambda invoke --function-name "lambdatestcli" --log-type Tail 
C:\demotest\outputfile.txt
</pre>
<p>This command will give you the output as shown &minus;</p>
<img src="/aws_lambda/images/command_output.jpg" alt="Command Output" />
<h3>Step 4</h3
<p>You can observe logs from cloudwatch for lambda function <b><i>lambdatestcli</i></b></p>
<img src="/aws_lambda/images/observe_log.jpg" alt="Observe Log" />
<h3>Step 5</h3
<p>Now, let us come to the actual part of deleting the AWS function. <b>Delete aws cli api</b> will delete the function given. The details of command used for this purpose is given below &minus;</p>
<p><b>Command</b></p>
<pre class="result notranslate">
delete-function
--function-name &lt;value&gt;
[--qualifier &lt;value&gt;]
[--cli-input-json &lt;value&gt;]
[--generate-cli-skeleton &lt;value&gt;]
</pre>
<p><b>Options</b></p>
<p><b>--function-name(string)</b> &minus; This will take the Lambda function name or the arn of the AWS Lambda function.</p>
<p><b>--qualifier (string)</b> &minus; This is optional. Here you can specify the version of AWS Lambda that needs to be deleted.</p>
<p><b>-- cli-input-json(string)</b> &minus; Performs service operation based on the JSON string provided. The JSON string follows the format provided <b>by --generate-cli-skeleton</b>. If other arguments are provided on the command line, the CLI values will override the JSON-provided values.</p>	
<p><b>--generate-cli-skeleton(string)</b> &minus; it prints json skeleton to standard output without sending the API request.</p>
<p><b>Command with values</b></p>
<pre class="result notranslate">
aws lambda delete-function --function-name "lambdatestcli"
</pre>
<p>The corresponding output is shown below &minus;</p>
<img src="/aws_lambda/images/lambda_delete_function.jpg" alt="Lambda Delete Function" />
<h3>Step 6</h3
<p>If you check now, you can observe that the function will not be seen in AWS Lambda function list as shown in the screenshot given below &minus;</p>
<img src="/aws_lambda/images/date_display.jpg" alt="Date Display" />
<h1>Working with Amazon API Gateway</h1>
<p>AWS Lambda function can be invoked on <b>HTTPS</b> url. It can be done on GET, POST, PUT. When the HTTPS url is invoked, the AWS Lambda function can also triggered and the data passed to HTTPS using <b>get/post</b> can be made available inside AWS Lambda to be used to insert in DynamoDB or to send mail etc.</p>
<p>This chapter discusses in detail about various processes involved in work in with AWS lambda and API Gateway.</p>
<h2>Processes involved</h2>
<p>The following are the processes involved in working with AWS lambda and API Gateway &minus;</p>
<ul class="list">
<li>Create IAM role for permission</li>
<li>Create AWS lambda function</li>
<li>Create API Gateway</li>
<li>Link lambda function to api gateway</li>
<li>Passing data to api gateway</li>
</ul>
<p>A basic diagram that explains the working of API gateway and AWS Lambda is given here &minus;</p>
<img src="/aws_lambda/images/processes_involved.jpg" alt="Processes Involved" />
<p>These processes are explained in detail further in this chapter with relevant screenshots.</p>
<h2>Create IAM role for permission</h2>
<p>From Amazon services as shown below, select IAM for creating roles to be used by Lambda function.</p>
<img src="/aws_lambda/images/create_iam.jpg" alt="Create Iam" />
<p>Go to IAM and select <b>Roles</b> from left side section as shown below &minus;</p>
<img src="/aws_lambda/images/dashboard_menu.jpg" alt="Dashboard Menu" />
<p>Click <b>Create role</b> for Lambda function.</p>
<img src="/aws_lambda/images/additional_resources.jpg" alt="Additional resources" />
<p>Select Lambda and click <b>Permissions</b> at the bottom. Select the permission required for the API Gateway and Lambda.</p>
<img src="/aws_lambda/images/select_type.jpg" alt="Select Type" />
<p>Search for API gateway in the search and it will list you all the related permissions. Here we have chosen full access to API gateway as shown below &minus;</p>
<img src="/aws_lambda/images/attach_permission.jpg" alt="Attach Permission" />
<p>Now, search for API gateway and it will list you all the related permissions. Here we have chosen full access to API gateway as shown below &minus;</p>
<img src="/aws_lambda/images/api_gateway.jpg" alt="Api Gateway" />
<p>You have to repeat the same process for Policies also.</p>
<img src="/aws_lambda/images/policies.jpg" alt="Policies" />
<p>Once you are done choosing the necessary policies, click <b>Review</b> for the next step. Enter the name of the role as per your choice as shown below &minus;</p>
<img src="/aws_lambda/images/review.jpg" alt="Review" />
<p>It displays the policies attached to the role. Click <b>Create role</b> and we are done with the role creation and can proceed with the lambda function.</p>
<h2>Create AWS Lambda Function</h2>
<p>Go to AWS services and click on lambda service to create a function for connecting it with api gateway.</p>
<img src="/aws_lambda/images/compute.jpg" alt="Compute" />
<p>The UI screen for Lambda function is shown below. Click <b>Create function</b> button to proceed with creation of Lambda function.</p>
<img src="/aws_lambda/images/ui_screen.jpg" alt="UI Screen " />
<p>Enter the name of the function and choose the existing role which we have created above.</p>
<img src="/aws_lambda/images/enter_name.jpg" alt="Enter Name" />
<p>It flashes a message that the function with the name <b>lambdawithapigateway</b> is created successfully.</p>
<img src="/aws_lambda/images/lambda_gateway.jpg" alt="Lambda Gateway" />
<p>Note that here we will use <b>nodejs</b> runtime to write the code. The AWS code with <b>helloworld</b> message is as shown below &minus;</p>
<img src="/aws_lambda/images/environment.jpg" alt="Environment" />
<p>AWS Lambda code is present in <b>index.js</b> file. The function called handler has the params namely <b>events, context</b> and <b>callback</b>.</p>
<p>Callback function basically has the error and the success message. Note that here we do not have any error related code, so null is passed and the success message is <b>HelloWorld from lambda.</b></p>
<p>Lastly, save the changes added and let us proceed to add the Lambda function to the API gateway.</p>
<h2>Create API Gateway</h2>
<p>Login to your AWS account and open API Gateway as shown below &minus;</p>
<img src="/aws_lambda/images/content_delivery.jpg" alt="Content Delivery" />
<p>Click API Gateway and it will lead you to the screen where new API gateway can be created.</p>
<img src="/aws_lambda/images/amazon_gateway.jpg" alt="Amazon Gateway" />
<p>Click <b>Create API</b> and add details as shown below &minus;</p>
<img src="/aws_lambda/images/create_new.jpg" alt="Create New" />
<p>Click the <b>Create API</b> button on right side of the screen. This will display the newly created API on to left side of the screen.</p> 
<img src="/aws_lambda/images/create_new_api.jpg" alt="Create New Api" />
<p>Click the <b>Actions</b> dropdown to create a new resource for the API.</p>
<img src="/aws_lambda/images/action_dropdown.jpg" alt="Action Dropdown" />
<p>Now, create a new resource as shown below &minus;</p>
<img src="/aws_lambda/images/resource_group.jpg" alt="Resource Group" />
<p>Enter the <b>Resource Name</b> as shown below. You will see the name of the resource entered in the url created at the end. Click <b>Create Resource</b> and you will see it on the screen as follows &minus;</p>
<img src="/aws_lambda/images/child_resource.jpg" alt="Child Resource" />
<p></p>
<img src="/aws_lambda/images/resource_service.jpg" alt="Resource Service" />
<p>Add <b>GET/POST</b> methods to the resource created as shown below. Select the method from <b>Actions</b> dropdown.</p>
<img src="/aws_lambda/images/get_method.jpg" alt="Get Method" />
<p>Click the <b>GET</b> method to add the method to the API.</p>
<img src="/aws_lambda/images/api_method.jpg" alt="Api Method" />
<p>Next step is the integration which will integrate it with Lambda function. Now add the Lambda function to it as shown below &minus;</p>
<img src="/aws_lambda/images/get_setup.jpg" alt="Get Setup" />
<h2>Link Lambda Function to API Gateway</h2>
<p>Select the lambda function created earlier.</p>
<img src="/aws_lambda/images/hello_setup.jpg" alt="hello Setup" />
<p>Save the changes and you can see a dialog box asking for permission as shown below &minus;</p>
<img src="/aws_lambda/images/add_permission.jpg" alt="Add Permission" />
<p>Click <b>OK</b> for the permission. This is the execution details between the API gateway HTTP request and the Lambda function &minus;</p>
<img src="/aws_lambda/images/method_execution.jpg" alt="Method Execution" />
<p>Now, let us deploy the API gateway changes. For this purpose, we need to select the <b>Deploy API</b> from <b>Actions</b> dropdown as shown below &minus;</p>
<img src="/aws_lambda/images/deploy_api.jpg" alt="Deploy Api" />
<p>Select <b>Deploy API</b>. It will ask for the deployment state. Select <b>New Stage</b> from Deployment stage dropdown and add the stage name as <b>Production</b>.</p>
<img src="/aws_lambda/images/select_deploy.jpg" alt="Select Deploy" />
<p>Click <b>Deploy</b> button and it will redirect you to the url as shown below &minus;</p>
<img src="/aws_lambda/images/click_deploy.jpg" alt="Click Deploy" />
<p>Select the <b>GET</b> method from left side to get the url. Open the url in a new tab to see the message from Lambda function.</p>
<img src="/aws_lambda/images/select_get.jpg" alt="Select Get" />
<p>This is a basic example of working with AWS Lambda and AWS API Gateway. In the above example, we have hardcoded the message in Lambda function.</p>
<p>Now, let us take the message details from the API Gateway. Incase if the HTTPS call has to be called from a different domain, for example AJAX call to the API, we need to enable CORS for the API gateway created.</p>
<p>Select the reSource created for the API and click <b>Actions</b> dropdown &minus;</p>
<img src="/aws_lambda/images/hello_method.jpg" alt="Hello Method" />
<p>Now, <b>Enable CORS</b> will open up the following screen &minus;</p>
<img src="/aws_lambda/images/enable_cors.jpg" alt="Enable Cors" />
<p>You can use few methods to ENABLE CORS. <b>Access-Control-Allow-Origin</b> is marked as * which means it will allow to get contents from API gateway from any domain.</p>
<p>You can also specify the domain name you want to work with the API. Click <b>Enable CORS and replace existing CORS headers</b> button and it will display confirmation message as shown below &minus;</p>
<img src="/aws_lambda/images/conform_method.jpg" alt="Conform Method" />
<p>Click <b>Yes, replace existing values</b> button to enable it. The <b>Enable CORS</b> screen looks as shown below &minus;</p>
<img src="/aws_lambda/images/replace_existing_values.jpg" alt="Replace Existing Values" />
<h2>Passing Data to API Gateway</h2>
<p>Open the API created in API Gateway <b>displayhelloworld</b> as shown below &minus;</p>
<img src="/aws_lambda/images/passing_data.jpg" alt="Passing Data" />
<p>Click <b>Integration Request</b> to send data as shown below &minus;</p>
<img src="/aws_lambda/images/integration_request.jpg" alt="Integration Request" />
<p>Choose <b>Body Mapping Templates</b> and add the <b>Content-Type</b> for this example as <b>application/json</b>. Click on the content type added add the details as follows &minus;</p>
<img src="/aws_lambda/images/body_mapping.jpg" alt="Body Mapping" />
<p>Now, add the template in JSON format as shown below &minus;</p>
<img src="/aws_lambda/images/json.jpg" alt="Json" />
<p>Observe that we have taken the message as the parameter to get data from API Gateway and share it with AWS Lambda. The syntax to get the details is as shown above.</p>
<p>Now, deploy the API to make the changes available on the API Gateway URL. For this, we need to change Lambda function to display the data based on the API Gateway URL. The code for Lambda function is givn below. Note that we are taking the message from the event and passing to callback.</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   let message = event.message;
   callback(null, message);
};
</pre>
<p>Now, save the changes in Lambda and hit the URL to see the changes. Observe the screenshot given below &minus;</p>
<img src="/aws_lambda/images/observe_screenshot.jpg" alt="Observe Screenshot" />
<p>Click the URL as shown below &minus;</p>
<pre class="result notranslate">
https://rw2ek1xung.execute-api.us-east-
1.amazonaws.com/prod/hello?message=hello%20from%20api%20gateway
</pre>
<p>Observe that here we are passing message as query string to the GET url. Then you can observe the output as shown below &minus;</p>
<img src="/aws_lambda/images/passing_message.jpg" alt="Passing Message" />
<p>It reads the details sent to message from the URL and displays the same in the browser.</p>
<h1>Using Lambda Function with Amazon S3</h1>
<p>Amazon S3 service is used for file storage, where you can upload or remove files. We can trigger AWS Lambda on S3 when there are any file uploads in S3 buckets. AWS Lambda has a handler function which acts as a start point for AWS Lambda function. The handler has the details of the events. In this chapter, let us see how to use AWS S3 to trigger AWS Lambda function when we upload files in S3 bucket.</p>
<h2>Steps for Using AWS Lambda Function with Amazon S3</h2>
<p>To start using AWS Lambda with Amazon S3, we need the following &minus;</p>
<ul class="list">
<li>Create S3 Bucket</li>
<li>Create role which has permission to work with s3 and lambda</li>
<li>Create lambda function and add s3 as the trigger.</li>
</ul>
<h2>Example</h2>
<p>Let us see these steps with the help of an example which shows the basic interaction between Amazon S3 and AWS Lambda.</p>
<ul class="list">
<li><p>User will upload a file in Amazon S3 bucket</p></li>
<li><p>Once the file is uploaded, it will trigger AWS Lambda function in the background which will display an output in the form of a console message that the file is uploaded.</p></li>
<li><p>The user will be able to see the message in Cloudwatch logs once the file is uploaded.</p></li>
</ul>
<p>The block diagram that explains the flow of the example is shown here &minus;</p>
<img src="/aws_lambda/images/upload_function.jpg" alt="Upload Function" />
<h2>Creating S3 Bucket</h2>
<p>Let us start first by creating a s3 bucket in AWS console using the steps given below &minus;</p>
<h3>Step 1</h3>
<p>Go to Amazon services and click <b>S3</b> in storage section as highlighted in the image given below &minus;</p>
<img src="/aws_lambda/images/s3_storage.jpg" alt="S3 Storage" />
<h3>Step 2</h3>
<p>Click S3 storage and <b>Create bucket</b> which will store the files uploaded.</p>
<img src="/aws_lambda/images/file_uploaded.jpg" alt="File Uploaded" />
<h3>Step 3</h3>
<p>Once you click <b>Create bucket</b> button, you can see a screen as follows &minus;</p>
<img src="/aws_lambda/images/click_create.jpg" alt="Click Create" />
<h3>Step 4</h3>
<p>Enter the details <b>Bucket name, Select the Region</b> and click <b>Create</b> button at the bottom left side. Thus, we have created bucket with name : <b>workingwithlambdaands3</b>.</p>
 <img src="/aws_lambda/images/select_region.jpg" alt="Select Region" />
<h3>Step 5</h3>
<p>Now, click the bucket name and it will ask you to upload files as shown below &minus;</p>
<img src="/aws_lambda/images/upload_bucket.jpg" alt="Upload Bucket" />
<p>Thus, we are done with bucket creation in S3.</p>
<h2>Create Role that Works with S3 and Lambda</h2>
<p>To create role that works with S3 and Lambda, please follow the Steps given below &minus;</p>
<h3>Step 1</h3>
<p>Go to AWS services and select IAM as shown below &minus;</p>
<img src="/aws_lambda/images/work_with_s3.jpg" alt="Work With S3" />
<h3>Step 2</h3>
<p>Now, click <b>IAM -&gt; Roles</b> as shown below &minus;</p>
<img src="/aws_lambda/images/iam_roles.jpg" alt="Iam Roles" />
<h3>Step 3</h3>
<p>Now, click <b>Create role</b> and choose the services that will use this role. Select Lambda and click <b>Permission</b> button.</p>
<img src="/aws_lambda/images/permission_botton.jpg" alt="Permission Botton" />
<h3>Step 4</h3>
<p>Add the permission from below and click <b>Review</b>.</p>
<img src="/aws_lambda/images/click_review.jpg" alt="Click Review" /> 
<h3>Step 5</h3>
<p>Observe that we have chosen the following permissions &minus;</p>
 <img src="/aws_lambda/images/following_permission.jpg" alt="Following Permission" />
<p>Observe that the Policies that we have selected are <b>AmazonS3FullAccess, AWSLambdaFullAccess</b> and <b>CloudWatchFullAccess</b>.</p>
<h3>Step 6</h3>
<p>Now, enter the Role name, Role description and click <b><i>Create Role</i></b> button at the bottom.</p>
<img src="/aws_lambda/images/create_the_role.jpg" alt="Create The Role" />
<p>Thus, our role named <b>lambdawiths3service</b> is created.</p>
<h2>Create Lambda function and Add S3 Trigger</h2>
<p>In this section, let us see how to create a Lambda function and add a S3 trigger to it. For this purpose, you will have to follow th Steps given below &minus;</p>
<h3>Step 1</h3>
<p>Go to AWS Services and select Lambda as shown below &minus;</p>
<img src="/aws_lambda/images/select_lambda.jpg" alt="Select Lambda" />
<h3>Step 2</h3>
<p>Click <b>Lambda</b> and follow the process for adding <b>Name</b>. Choose the <b>Runtime, Role</b> etc. and create the function. The Lambda function that we have created is shown in the screenshot below &minus;</p>
<img src="/aws_lambda/images/choose_runtime.jpg" alt="Choose Runtime" />
<h3>Step 3</h3>
<p>Now let us add the S3 trigger.</p>
<img src="/aws_lambda/images/add_s3.jpg" alt="Add S3" />
<h3>Step 4</h3>
<p>Choose the trigger from above and add the details as shown below &minus;</p>
<img src="/aws_lambda/images/choose_trigger.jpg" alt="Choose Trigger" />
<h3>Step 5</h3>
<p>Select the bucket created from bucket dropdown. The event type has following details &minus;</p>
<img src="/aws_lambda/images/bucket_downdrop.jpg" alt="Bucket Downdrop" />
<p>Select <b>Object Created (All)</b>, as we need AWS Lambda trigger when file is uploaded, removed etc.</p>
<h3>Step 6</h3>
<p>You can add Prefix and File pattern which are used to filter the files added. For Example, to trigger lambda only for .jpg images. Let us keep it blank for now as we need to trigger Lambda for all files uploaded. Click <b>Add</b> button to add the trigger.</p>
<img src="/aws_lambda/images/file_pattern.jpg" alt="File Pattern" />
<h3>Step 7</h3>
<p>You can find the the trigger display for the Lambda function as shown below &minus;</p>
<img src="/aws_lambda/images/trigger_display.jpg" alt="Trigger Display" />
<p>Let’s add the details for the aws lambda function. Here, we will use the online editor to add our code and use nodejs as the runtime environment.</p>
<h3>Step 8</h3>
<p>To trigger S3 with AWS Lambda, we will have to use S3 event in the code as shown below &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = function(event, context, callback) {
   console.log("Incoming Event: ", event);
   const bucket = event.Records[0].s3.bucket.name;
   const filename = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
   const message = `File is uploaded in - ${bucket} -&gt; ${filename}`;
   console.log(message);
   callback(null, message);
};
</pre>
<p>Note that the event param has the details of the S3event. We have consoled the bucket name and the file name which will get logged when you upload image in S3bucket.</p>
<h3>Step 9</h3>
<p>Now, let us save the changes and test the lambda function with S3upload. The following are the code details added in AWS Lambda &minus;</p>
<img src="/aws_lambda/images/code_details.jpg" alt="Code Details" />
<h3>Step 10</h3>
<p>Now, let us add the role, memory and timeout.</p>
<img src="/aws_lambda/images/memory_timeout.jpg" alt="Memory Timeout" />
<h3>Step 11</h3>
<p>Now, save the Lambda function. Open S3 from Amazon services and open the bucket we created earlier namely <b>workingwithlambdaands3</b>.</p> 
<p>Upload the image in it as shown below &minus;</p>
<img src="/aws_lambda/images/upload_image.jpg" alt="Upload Image" />
<h3>Step 12</h3>
<p>Click <b>Upload</b> button to add files as shown &minus;</p>
<img src="/aws_lambda/images/click_upload.jpg" alt="Click Upload" />
<h3>Step 13</h3>
<p>Click <b>Add files</b> to add files. You can also drag and drop the files. Now, click <b>Upload</b> button.</p>
<img src="/aws_lambda/images/add_files.jpg" alt="Add Files" />
<p>Thus, we have uploaded one image in our S3 bucket.</p>
<h3>Step 14</h3>
<p>To see the trigger details, go to AWS service and select <b>CloudWatch</b>. Open the logs for the Lambda function and use the following code &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = function(event, context, callback) {
   console.log("Incoming Event: ", event);
   const bucket = event.Records[0].s3.bucket.name;
   const filename = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
   const message = `File is uploaded in - ${bucket} -> ${filename}`;
   console.log(message);
   callback(null, message);
};
</pre>
<p>The output you can observe in Cloudwatch is as shown &minus;</p>
<img src="/aws_lambda/images/observe_cloudwatch.jpg" alt="Observe Cloudwatch" />
<p>AWS Lambda function gets triggered when file is uploaded in S3 bucket and the details are logged in Cloudwatch as shown below &minus;</p>
<img src="/aws_lambda/images/s3_bucket.jpg" alt="S3 Bucket" />
<h1>Using Lambda Function with Amazon DynamoDB</h1>
<p>DynamoDB can trigger AWS Lambda when the data in added to the tables, updated or deleted. In this chapter, we will work on a simple example that will add items to the DynamoDB table and AWS Lambda which will read the data and send mail with the data added.</p>
<h2>Requisites</h2>
<p>To use Amazon DB and AWS Lambda, we need to follow the steps as shown below &minus;</p>
<ul class="list">
<li><p>Create a table in DynamoDB with primary key</p></li>
<li><p>Create a role which will have permission to work with DynamoDBand AWS Lambda.</p></li>
<li><p>Create function in AWS Lambda</p></li>
<li><p>AWS Lambda Trigger to send mail</p></li>
<li><p>Add data in DynamoDB</p></li>
</ul>
<p>Let us discuss each of this step in detail.</p>
<h2>Example</h2>
<p>We are going to work out on following example which shows the basic interaction between DynamoDB and AWS Lambda. This example will help you to understand the following operations &minus;</p>
<ul class="list">
<li><p>Creating a table called customer in Dynamodb table and how to enter data in that table.</p></li>
<li><p>Triggering AWS Lambda function once the data is entered and sending mail using Amazon SES service.</p></li>
</ul>
<p>The basic block diagram that explains the flow of the example is as shown below &minus;</p>
<img src="/aws_lambda/images/block_diagram.jpg" alt="Block Diagram" />
<h2>Create Table in DynamoDB with Primary Key</h2>
<p>Log in to AWS console. Go to AWS Services and select DynamoDB as shown below. Select DynamoDB.</p>
<img src="/aws_lambda/images/dynamodb.jpg" alt="Dynamodb" />
<p>DynamoDB shows the options as shown below &minus;</p>
<img src="/aws_lambda/images/dynamodb_option.jpg" alt="Dynamodb Option" />
<p>Now, click <b>Create table</b> to create the table as shown. We have named the table as <b>customer</b> with primary key for that table as <b>cust_id</b>. Click on <b><i>Create</i></b> button to add the table to dynamodb.</p>
<img src="/aws_lambda/images/create_dynamodb.jpg" alt="Create Dynamodb" />
<p>The table created is as shown below &minus;</p>
<img src="/aws_lambda/images/table_details.jpg" alt="Table Details" />
<p>We can add items to the table created as follows &minus;</p>
<img src="/aws_lambda/images/recent_alerts.jpg" alt="Recent Alerts" />
<p>Click <b>Items</b> and click <b>Create item</b> button as shown &minus;</p>
<img src="/aws_lambda/images/create_item.jpg" alt="Create Item" />
<p></p>
<img src="/aws_lambda/images/create_item2.jpg" alt="Create Item2" />
<h3>Creating Role with Permissions to Work with DynamoDB and AWS Lambda</h3>
<p>To create role, Go to AWS services and click IAM.</p>
<img src="/aws_lambda/images/creating_role.jpg" alt="Creating Role" />
<p>Let us create a policy to be used only for the DynamoDB table created earlier &minus;</p>
<img src="/aws_lambda/images/create_policy_dynamo.jpg" alt="Create Policy Dynamo" />
<p>Now, choose a <b>Service</b>. Observe that the service we have selected is <b>DynamoDB</b>. For <b>Actions</b> we have taken all <b>Dynamodb</b> actions ie access to list, read and write. For <b>resources</b>, we will select the table resource type actions. When you click it, you can see a screen as follows &minus;</p>
<img src="/aws_lambda/images/dynamodb_action.jpg" alt="Dynamodb Action" />
<p>Now, select <b>table</b> and <b>Add ARN</b> to it as shown. We will get <b>ARN</b> details from <b>customer table</b> created as shown below &minus;</p>
<img src="/aws_lambda/images/table_created.jpg" alt="Table Created" />
<p>Enter <b>arn</b> details here &minus;</p>
<img src="/aws_lambda/images/specify_arn.jpg" alt="Specify Arn" />
<p>Click <b>Add</b> button to save the changes. Once done <b>Click on Review policy</b>. Enter the name of the policy, description etc as shown below &minus;</p>
<img src="/aws_lambda/images/add_button.jpg" alt="Add Button" />
<p>Click on <b>create policy</b> to save it. Add the policy to the role to be created. Select <b>Role</b> from left side and enter the details.</p>
<img src="/aws_lambda/images/create_role.jpg" alt="Create Role" />
<p>Observe that the policies added are <b>newpolicyfordynamdb, awslambdafullaccess, cloudwatchfullaccess</b> and <b>amazonsesfullaccess</b>. Add the role and will use it while creating AWS Lambda function.</p>
<h2>Create Function in AWS Lambda</h2>
<p>Thus, we have created Lambda function called <b>newlambdafordynamodb</b> as shown.</p>
<img src="/aws_lambda/images/new_lambda.jpg" alt="New Lambda" />
<p>Now, let us add DynamodDB trigger to the AWS Lambda created. The runtime we shall use is Node.js.</p>
<img src="/aws_lambda/images/designer_trigger.jpg" alt="Designer Trigger" />
<p>You can find the following details in Dynamodb trigger that are to be configured for AWS Lambda &minus;</p>
<img src="/aws_lambda/images/dynamo_trigger.jpg" alt="Dynamo Trigger" />
<p>Now, simply click <b>Add</b> to add the trigger to AWS Lambda.</p>
<h2>AWS Lambda Trigger to Send Mail</h2>
<p>AWS Lambda will get triggered when data is inserted intoAWS Lambda. The event parameter will have the dynamodb data inserted. This will read the data from the event and send email.</p>
<h3>Sending an email</h3>
<p>To send email, you need to follow the steps given below &minus;</p>
<h3>Step 1</h3>
<p>Go to AWS service and select SES (simple email service). Validate the email to which we need to send an email as shown &minus;</p>
<img src="/aws_lambda/images/verify_email.jpg" alt="Verify Email" />
<h3>Step 2</h3>
<p>Click the button <b>Verify a New Email Address</b> to add the email address.</p>
<img src="/aws_lambda/images/verify_new_email.jpg" alt="Verify a New Email" />
<h3>Step 3</h3>
<p>Enter an email address to verify it. The email address will receive and activation mail from Amazon which needs to be clicked. Once the activation is done, the email id is verified and can be used with AWS services.</p>
<h3>Step 4</h3>
<p>The AWS Lambda code which reads data from the event and sends email is given below &minus;</p>
<pre class="prettyprint notranslate">
var aws = require('aws-sdk');
var ses = new aws.SES({
   region: 'us-east-1'
});
exports.handler = function(event, context, callback) {
   console.log(event);
   let tabledetails = JSON.parse(JSON.stringify(event.Records[0].dynamodb));
   console.log(tabledetails.NewImage.address.S);
   let customerid = tabledetails.NewImage.cust_id.S;
   let name = tabledetails.NewImage.name.S;
   let address = tabledetails.NewImage.address.S;
	
   var eParams = {
      Destination: {
         ToAddresses: ["xxxxx@gmail.com"]
      },
      Message: {
         Body: {
            Text: {
               Data: "The data added is as follows:\n CustomerId:"+customerid+"\n Name:"+name+"\nAddress:"+address
            }
         },
         Subject: {
            Data: "Data Inserted in Dynamodb table customer"
         }
      },
      Source: "xxxxx@gmail.com"
   };
   console.log('===SENDING EMAIL===');
   var email = ses.sendEmail(eParams, function(err, data) {
      if (err) console.log(err);
      else {
         console.log("===EMAIL SENT===");
         console.log("EMAIL CODE END");
         console.log('EMAIL: ', email);
         context.succeed(event);
         callback(null, "email is send");
      }
   });
}
</pre>
<p>Now, save the Lambda function and data in DynamoDB table.</p>
<h2>Add Data in DynamoDB</h2>
<p>Use the following sequence to add data in DynamoDB.</p>
<h3>Step 1</h3>
<p>Go to the table <b>customer</b> created in Dynamodb.</p>
<img src="/aws_lambda/images/customer_created.jpg" alt="Customer Created" />
<h3>Step 2</h3>
<p>Click <b>Create item</b>.</p>
<img src="/aws_lambda/images/create_item_dynamo.jpg" alt="Create Item Dynamo" />
<h3>Step 3</h3>
<p>Click <b>Save</b> button and check the email id provided in AWS Lambda to see if the mail has been sent by AWS Lambda.</p>
<img src="/aws_lambda/images/gmail.jpg" alt="Gmail" />
<h1>Using Lambda Function with Scheduled Events</h1>
<p>Scheduled events are suppose to happen at regular intervals based on a rule set. Scheduled events are used to execute Lambda function after an interval which is defined in cloudwatch services. They are best used for working on cron jobs along with AWS Lambda. This chapter will explain with simple example how to send mail after every 5 minutes using scheduled events and AWS Lambda.</p>
<h2>Requisites</h2>
<p>The requirements for using Lambda function with Scheduled events are as follows &minus;</p>
<ul class="list">
<li>Verify email id using AWS SES</li>
<li>Create Role to use AWS SES, Cloudwatch and AWS Lambda</li>
<li>Create Lambda Function to send email</li>
<li>Add rule for scheduled events from AWS CloudWatch</li>
</ul>
<h2>Example</h2>
<p>The example that we are going to consider will add CloudWatch event to the AWS Lambda function. Cloudwatch will trigger AWS Lambda based on the time pattern attached to it. For Example, in the example below we have used 5 minutes as the trigger. It means for every 5 minutes, AWS Lambda will be triggered and AWS Lambda will send mail whenever triggered.</p>
<p>The basic block diagram for the same is shown below &minus;</p> 
<img src="/aws_lambda/images/basic_block_diagram.jpg" alt="Basic Block Diagram" />
<h2>Verify Email ID using AWS SES</h2>
<p>Log in to AWS and go to AWS SES service as shown below &minus;</p>
<img src="/aws_lambda/images/customer_engagement.jpg" alt="Customer Engagement" />
<p>Now, click <b>Simple Email</b> Service as shown &minus;</p>
<img src="/aws_lambda/images/simple_email.jpg" alt="Simple Email" />
<p>Click <b>Email Addresses</b> on left side as shown &minus;</p>
<img src="/aws_lambda/images/email_address.jpg" alt="Email Address" />
<p>It displays a button <b>Verify a New Email Address</b>. Click it.</p>
<img src="/aws_lambda/images/verify_email_address.jpg" alt="Verify Email Address" />
<p>Enter <b>Email Address</b> you want to verify. Click <b>Verify This Email Address</b> button. You will receive mail from AWS on that email id with email subject: Amazon Web Services – Email Address Verification Request in region US East (N. Virginia)</p>
<p>Click the link given in the mail to verify email address. Once verified, it will display the email id as follows &minus;</p>
<img src="/aws_lambda/images/display_email.jpg" alt="Display Email" />
<h2>Create Role to use AWS SES, Cloudwatch and AWS Lambda</h2>
<p>You can also create a role which gives permission to use the services. For this, go to IAM and select Role. Add the required policies and create the role. Observe that the role created here is <b>events with lambda</b>.</p>
<img src="/aws_lambda/images/event_with_lambda.jpg" alt="Event With Lambda" />
<h2>Create Lambda Function to Send Email</h2>
<p>You will have to follow the steps to create Lambda function using runtime as nodejs.</p>
<img src="/aws_lambda/images/lambda_event_emails.jpg" alt="Lambda Event Emails" />
<p>Now, add trigger to Lambda as shown &minus;</p>
<img src="/aws_lambda/images/add_triggers_lambda.jpg" alt="Add Triggers Lambda" />
<p>Add details to <b>CloudWatch Events Trigger</b> as shown below &minus;</p>
<img src="/aws_lambda/images/cloudwatch_events.jpg" alt="Cloudwatch Events" />
<p>Note that the event will be triggered after every 5 minutes as per the rule trigger created.</p>
<p>The Lambda code for sending an email is given below &minus;</p>
<pre class="prettyprint notranslate">
var aws = require('aws-sdk');
var ses = new aws.SES({
   region: 'us-east-1'
});
exports.handler = function(event, context, callback) {
   var eParams = {
      Destination: {
         ToAddresses: ["xxxxxxxt12@gmail.com"]
      },
      Message: {
         Body: {
            Text: {
               Data: "this mail comes from aws lambda event scheduling"
            }
         },
         Subject: {
            Data: "Event scheduling from aws lambda"
         }
      },
      Source: "coxxxxxx@gmail.com"
   };
   console.log('===SENDING EMAIL===');
   var email = ses.sendEmail(eParams, function(err, data) {
      if (err) console.log(err);
      else {
         console.log("===EMAIL SENT===");
         console.log("EMAIL CODE END");
         console.log('EMAIL: ', email);
         context.succeed(event);
         callback(null, "email is send");
      }
   });
};
</pre>
<p>Now, we need the AWS SES service. You can add this using the code shown as follows &minus;</p>
<pre class="result notranslate">
var aws = require('aws-sdk');
var ses = new aws.SES({
   region: 'us-east-1'
});
</pre>
<p>To send mail from <b>nodejs</b>, we have created  <b>eParams</b> object which has details like the <b>example mail, to mail id</b> and <b>the body with message</b> as follows &minus;</p>
<pre class="result notranslate">
var eParams = {
   Destination: {
      ToAddresses: ["xxxxxxxx12@gmail.com"]
   },
   Message: {
      Body: {
         Text: {
            Data: "this mail comes from aws lambda event scheduling"
         }
      },
      Subject: {
         Data: "Event scheduling from aws lambda"
      }
   },
   Source: "coxxxxxx@gmail.com"
};
</pre>
<p>The Lambda code to send email is as follows &minus;</p>
<pre class="result notranslate">
var email = ses.sendEmail(eParams, function(err, data) {
   if (err) console.log(err);
   else {
      console.log("===EMAIL SENT===");
      console.log("EMAIL CODE END");
      console.log('EMAIL: ', email);
      context.succeed(event);
      callback(null, "email is send");
   }
});
</pre>
<p>Now, let us save this Lambda function and check the email id for mails. The screenshot shown below shows that the mail is sent from AWS Lambda after every 5 minutes.</p>
<img src="/aws_lambda/images/event_scheduling.jpg" alt="Event Scheduling" />
<h1>Using Lambda Function with Amazon SNS</h1>
<p>Amazon SNS is a service used for push notification. In this chapter, we will explain working of AWS Lambda and Amazon SNS with the help of an example where will perform the following actions &minus;</p>
<ul class="list">
<li><p>Create Topic in SNS Service and use AWS Lambda Add Topics to CloudWatch</p></li> 
<li><p>Send SNS text message on phone number given.</p></li> 
</ul>
<h2>Requisites</h2>
<p>To create Topic in SNS Service and use AWS Lambda Add Topics to CloudWatch, we need not follow the steps given below &minus;</p>
<ul class="list">
<li>Create Topic in SNS</li> 
<li>Create Role for permission in IAM</li> 
<li>Create AWS Lambda Function</li> 
<li>Publish to topic to activate trigger</li> 
<li>Check the message details in CloudWatch service.</li> 
</ul>
<p>To send SNS text message on phone number given, we need to do the following &minus;</p>
<ul class="list">
<li>Add code in AWS Lambda to send message to your phone.</li> 
</ul>
<h2>Example</h2>
<p>In this example, we will create a topic in SNS. When details are entered in the topic to publish, AWS Lambda is triggered. The topic details are logged in CloudWatch and a message is sent on phone by AWS Lambda.</p>
<p>Here is a basic block diagram which explains the same &minus;</p>
<img src="/aws_lambda/images/block_diagram_sns.jpg" alt="Block Diagram Sns" />
<h2>Create Topic in SNS</h2>
<p>You will have to follow the steps given below to create topic in SNS &minus;</p>
<h3>Step 1</h3>
<p>Login to AWS Console and go to SNS service in Amazon as shown below &minus;</p>
<img src="/aws_lambda/images/amazon_sns_service.jpg" alt="Amazon Sns Service" />
<h3>Step 2</h3>
<p>Click <b>Simple Notification</b> Service and <b>Create topic</b> in it.</p>
<img src="/aws_lambda/images/notification_service.jpg" alt="Notification Service" />
<h3>Step 3</h3>
<p>Then, you have to click <b>Create new topic</b> button as shown &minus;</p>
<img src="/aws_lambda/images/new_topic.jpg" alt="New Topic" />
<h3>Step 4</h3>
<p>Enter the <b>Topic name</b> and <b>Display name</b> and click on <b>Create topic</b>. You should see the topic name in the display as follows &minus;</p>
<img src="/aws_lambda/images/topic_name.jpg" alt="Topic Name" />
<h2>Create Role for Permission in IAM</h2>
<p>To create a Role to work with AWS Lambda and SNS service, we need to login to AWS console. Then, select IAM from Amazon services and click role from left side as shown below.</p>
<img src="/aws_lambda/images/role_permission.jpg" alt="Role Permission" /> 
<p>Observe that we have added policies for SNS, Lambda and CloudWatch. Add rolename and click Create role button to complete the process of role creation.</p>
<img src="/aws_lambda/images/added_policies.jpg" alt="Added Policies" />
<h2>Create AWS Lambda Function</h2>
<p>In this section, let us understand how to create AWS Lambda function using nodejs as the runtime.</p>
<p>For this purpose, login to AWS console and choose AWS Lambda from AWS services. Add the function name, role details etc and create the AWS Lambda function as shown.</p>
<img src="/aws_lambda/images/create_lambda.jpg" alt="Create Lambda" />
<h3>Add SNS Trigger</h3>
<p>To add SNS trigger, enter SNS configuration details as shown &minus;</p>
<img src="/aws_lambda/images/add_sns.jpg" alt="Add Sns" />
<p>Then, select <b>SNS topic</b> and <b>Add</b> the trigger to AWS Lambda function as shown &minus;</p>
<img src="/aws_lambda/images/sns_topic.jpg" alt="Sns Topic" />
<p>Then, add AWS lambda code given below &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = function(event, context, callback) {
   console.log("AWS lambda and SNS trigger ");
   console.log(event);
   const sns = event.Records[0].Sns.Message;
   console.log(sns)
   callback(null, sns);
};
</pre>
<p>In the above code, <b>event.Records[0].Sns.Message</b> gives the message details added. We have added console logs to see them in CloudWatch. Now, save the Lambda function with required memory and time allocation.</p>
<h2>Publish to Topic to Activate Trigger</h2>
<p>Recall that we have already created topic in SNS in Step 1. We will now publish in the topic and see the details in CloudWatch which will be triggered by AWS Lambda &minus;</p>
<h3>Publish to Topic</h3>
<p>First Select name of the topic you want to publish. Click on <b>Publish to topic</b> button &minus;</p>
<img src="/aws_lambda/images/publish_topic.jpg" alt="Publish Topic" />
<p>Enter the <b>Subject</b> and <b>Message</b> details as shown below &minus;</p>
<img src="/aws_lambda/images/message_details.jpg" alt="Message Details" />
<p>You can also select <b>JSON</b> message format to send in <b>JSON</b> style. Click <b>Publish the message</b> button at the end of the screen.</p>
<h2>Check Message Details in CloudWatch Service</h2>
<p>Log intoAWS console and open CloudWatch service. Click on logs on left side and select the logs for AWS Lambda function created. You can find the following display for the logs with messages created as shown above &minus;</p>
<img src="/aws_lambda/images/check_message.jpg" alt="Check Message" />
<h2>Add Code in AWS Lambda to Send Message to your Phone</h2>
<p>Here will use SNS Text messaging to send message on the phone using AWS Lambda. You can use the following code to update AWS Lambda code as follows &minus;</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
const sns = new aws.SNS({
   region:'us-east-1'
});
exports.handler = function(event, context, callback) {
   console.log("AWS lambda and SNS trigger ");
   console.log(event);
   const snsmessage = event.Records[0].Sns.Message;
   console.log(snsmessage);
   sns.publish({
      Message: snsmessage,
      PhoneNumber: '+911212121212'
   }, function (err, data) {
      if (err) {
         console.log(err);
         callback(err, null);
      } else {
         console.log(data);
         callback(null, data);
      }	
   });
};
</pre>
<p>We have added AWS SDK and the SNS service to use to send message. The message from the event coming from SNS is send as text message on the phone number given.</p>
<p>Observe the following code for example &minus;</p>
<pre class="prettyprint notranslate">
sns.publish({
   Message: snsmessage,
   PhoneNumber: '+911212121212'
}, function (err, data) {
   if (err) {
      console.log(err);
      callback(err, null);
   } else {
      console.log(data);
      callback(null, data);
   }	
});
</pre>  
<p>Enter the topic now to see the message in cloudwatch and the phone number given above.</p>
<img src="/aws_lambda/images/enter_topic.jpg" alt="Enter Topic" />
<p>Click <b>Publish message</b> to publish the message. You see a message on the phone number given as follows &minus;</p>
<img src="/aws_lambda/images/publish_message.jpg" alt="Publish Message" />
<h1>Using Lambda Function with CloudTrail</h1>
<p><b>AWS CloudTrail</b> is a service available with Amazon, which helps to logs all the activities done inside AWS console. It logs all the API calls and stores the history, which can be used later for debugging purpose. Note that we cannot trigger Lambda from CloudTrail. Instead, CloudTrail stores all the history in the form of logs in S3 bucket and we can trigger AWS Lambda from S3. Once any logs are to be processed, AWS Lambda will get triggered whenever any logs are added to S3 bucket.</p>
<h2>Requisites</h2>
<p>Before you start to work with AWS CloudTrail, S3 and AWS Lambda, you need to perform the following &minus;</p>
<ul class="list">
<li>Create S3 bucket to store CloudTrail logs</li>
<li>Create SNS service</li> 
<li>Create a trail in CloudTrail and assign the S3 bucket and SNS service</li>
<li>Create IAM role with permission.</li>
<li>Create aws lambda function</li>
<li>AWS Lambda configuration</li>
</ul>
<h2>Example</h2>
<p>Let s consider an example which shows the working of AWS CloudTrail, S3 and AWS Lambda. Here, we will create a bucket in S3 which will store all the logs for any interaction  done in AWS console. Let us create SNS topic and publish it. For this action, the logs will be entered as a file in S3. AWS lambda will get triggered which will send mail using Amazon SES service.</p>
<p>The block diagram for explaining this process is as shown below &minus;</p>
<img src="/aws_lambda/images/block_diagram_cloudtrail.jpg" alt="Block Diagram Cloudtrail" />
<h2>Create S3 Bucket to Store CloudTrail logs</h2>
<p>Go to AWS console and click S3 service. Click <b>Create bucket</b> and enter the name of the bucket you want to store cloudtrail logs as shown &minus;</p>
<img src="/aws_lambda/images/create_bucket.jpg" alt="Create Bucket" />
<p>Observe that here we have created a S3 bucket <b>cloudtraillogsaws</b> for storing the logs.</p>
<h2>Create SNS Service</h2>
<p>Go to AWS console and click <b>Simple notification Service</b>. Select topics from left side and click Create new topic button.</p>
<img src="/aws_lambda/images/simple_notification.jpg" alt="Simple Notification" />
<p>We have created topic called <b>displaytrail</b> to publish a topic. Its details will get stored in S3bucket that is created above.</p>
<h2>Create a Trail in Cloudtrail and Assign the S3 bucket and SNS service</h2>
<p>Go to AWS console and click <b>CloudTrail</b> service from Management tools as shown &minus;</p>
<img src="/aws_lambda/images/create_trails.jpg" alt="Create Trails" />
<p>Click <b>Trails</b> from the left side as shown below &minus;</p>
<img src="/aws_lambda/images/trail_dashboard.jpg" alt="Trail Dashboard" />
<p></p>
<img src="/aws_lambda/images/trails.jpg" alt="Trails" />
<p>Click <b>Create Trail</b> button. Enter the <b>Trail name, Apply trail to all regions</b> and choose <b>Yes</b>. Then So the logs will be applied for all the region.</p>
<img src="/aws_lambda/images/trail_name.jpg" alt="Trail Name" />
<p>For <b>Read/Write events</b>, choose <b>All</b>. Add the <b>S3 bucket</b> and <b>SNS topic</b> details as shown below. You can create a new one here or add an existing one.</p>
<img src="/aws_lambda/images/read_events.jpg" alt="Read Events" />
<p>Note that there are options available to <b>encrypt log files, enable log file validation, send sns notification for every log file delivery</b> etc. I have used the default values here. You can allow file encryption and it will ask for encryption key. Click on Create Trail button once the details are added.</p>
<img src="/aws_lambda/images/encrypt_log.jpg" alt="Encrypt Log" />
<h2>Create IAM Role with Permission</h2>
<p>Go to AWS console and select IAM. Create a role with permission for S3, Lambda, CloudTrail and SES for sending email. The role created is as shown below &minus;</p>
<img src="/aws_lambda/images/trail_lambda.jpg" alt="Trail Lambda" />
<h2>Create AWS Lambda Function</h2>
<p>Go to AWS service and click <b>Lambda</b> service. Add the function name, select runtime as <b>nodejs</b>, and select the role created for the lambda function. Following is the lambda function created.</p>
<img src="/aws_lambda/images/lambda_trail.jpg" alt="Lambda Trail" />
<h2>AWS Lambda Configuration</h2>
<p>Next, we need to add S3 as the trigger for AWS lambda created.</p>
<img src="/aws_lambda/images/lambda_configuration.jpg" alt="Lambda Configuration" /> 
<p>Add the S3 bucket details to add the trigger and add the following AWS Lambda code &minus;</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
const sns = new aws.SNS({
region:'us-east-1'
});
var ses = new aws.SES({
   region: 'us-east-1'
});
exports.handler = function(event, context, callback) {
   console.log("AWS lambda and SNS trigger ");
   console.log(event);
   const s3message = "Bucket Name:"+event.Records[0].s3.bucket.name+"\nLog details:"+event.Records[0].s3.object.key;
   console.log(s3message);
   var eParams = {
      Destination: {
         ToAddresses: ["xxxxxxxxx12@gmail.com"]
      },
      Message: {
         Body: {
            Text: {
               Data:s3message
            }
         },
         Subject: {
            Data: "cloudtrail logs"
         }
      },
      Source: "coxxxxxx@gmail.com"
   };
   var email = ses.sendEmail(eParams, function(err, data) {
      if (err) console.log(err);
      else {
         console.log("===EMAIL SENT===");
         console.log("EMAIL CODE END");
         console.log('EMAIL: ', email);
         context.succeed(event);
         callback(null, "email is send");
      }
   });
};
</pre>
<p>Note that we are taking the S3 bucket and log details from the event and sending mail using SES service as shown above.</p>
<p>Whenever any activity takes place in AWS console, the logs will be sent to S3 bucket and at the same time, AWS lambda will get triggered and the mail will be send to the email id mentioned in the code.</p>
<img src="/aws_lambda/images/cloudtrail_logs.jpg" alt="Cloudtrail Logs" />
<p>Note that you can process the logs as per your needs in AWS Lambda.</p>
<h1>Using Lambda Function with Amazon Kinesis</h1>
<p><b>AWS Kinesis</b> service is used to capture/store real time tracking data coming from website clicks, logs, social media feeds. We can trigger AWS Lambda to perform additional processing on this logs.</p> 
<h2>Requisites</h2>
<p>The basic requirements to get started with Kinesis and AWS Lambda are as shown &minus;</p>
<ul class="list">
<li>Create role with required permissions</li>
<li>Create data stream in Kinesis</li>
<li>Create AWS Lambda function.</li>
<li>Add code to AWS Lambda</li>
<li>Add data to Kinesis data stream</li>
</ul>
<h2>Example</h2>
<p>Let us work on an example wherein we will trigger AWS Lambda for processing the data stream from Kinesis and send mail with the data received.</p>
<p>A simple block diagram for explaining the process is shown below &minus;</p>
<img src="/aws_lambda/images/block_diagram_kinesis.jpg" alt="Block Diagram Kinesis" />
<h2>Create Role with Required Permissions</h2>
<p>Go to AWS console and create a role.</p>
<img src="/aws_lambda/images/required_permissions.jpg" alt="Required Permissions" />
<h2>Create Data Stream in Kinesis</h2>
<p>Go to AWS console and create data stream in kinesis.</p>
<img src="/aws_lambda/images/data_stream.jpg" alt="Data Stream" />
<p>There are 4 options as shown. We will work on Create data stream in this example.</p>
<img src="/aws_lambda/images/create_data_stream.jpg" alt="Create Data Stream" />
<p>Click <b>Create data stream</b>. Enter the name in Kinesis stream name given below.</p>
<img src="/aws_lambda/images/create_kinesis_stream.jpg" alt="Create Kinesis Stream" />
<p>Enter number of shards for the data stream.</p>
<img src="/aws_lambda/images/estimate_number.jpg" alt="Estimate Number" />
<p>The details of Shards are as shown below &minus;</p>
<img src="/aws_lambda/images/shards.jpg" alt="Shards" />
<p>Enter the name and click the <b>Create Kinesis stream</b> button at the bottom.</p>
<img src="/aws_lambda/images/kinesis_stream.jpg" alt="Kinesis Stream" />
<p>Note that it takes certain time for the stream to go active.</p>
<h2>Create AWS Lambda Function</h2>
<p>Go to AWS console and click Lambda. Create AWS Lambda function as shown &minus;</p>
<img src="/aws_lambda/images/kinesis_lambda.jpg" alt="Kinesis Lambda" />
<p>Click <b>Create function</b> button at the end of the screen. Add Kinesis as the trigger to AWS Lambda.</p>
<img src="/aws_lambda/images/kinesis_trigger.jpg" alt="Kinesis Trigger" />
<p>Add configuration details to the Kinesis trigger &minus;</p>
<img src="/aws_lambda/images/configure_kinesis.jpg" alt="Configure Kinesis" />
<p>Add the trigger and now add code to AWS Lambda.</p>
<h2>Adding Code to AWS Lambda</h2>
<p>For this purpose, we will use nodejs as the run-time. We will send mail once AWS Lambda is triggered with kinesis data stream.</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
var ses = new aws.SES({
   region: 'us-east-1'
});
exports.handler = function(event, context, callback) {
   let payload = "";
   event.Records.forEach(function(record) {
      // Kinesis data is base64 encoded so decode here
      payload = new Buffer(record.kinesis.data, 'base64').toString('ascii');
      console.log('Decoded payload:', payload);
   });
   var eParams = {
      Destination: {
         ToAddresses: ["xxxxxxx@gmail.com"]
      },
      Message: {
         Body: {
            Text: {
               Data:payload
            }
         },
         Subject: {
            Data: "Kinesis data stream"
         }
      },
      Source: "cxxxxxxxxx@gmail.com"
   };    
   var email = ses.sendEmail(eParams, function(err, data) {
      if (err) console.log(err);
      else {
         console.log("===EMAIL SENT===");
         console.log("EMAIL CODE END");
         console.log('EMAIL: ', email);
         context.succeed(event);
         callback(null, "email is send");
      }
   });
};
</pre>
<p>The event param has the data entered in kinesis data stream. The above aws lambda code will get activated once data is entered in kinesis data stream.</p>
<h2>Add Data to Kinesis Data Stream</h2>
<p>Here we will use AWS CLI to add data kinesis data stream as shown below. For this purpose, we can use the following command &minus;</p>
<pre class="result notranslate">
aws kinesis put-record --stream-name kinesisdemo  --data "hello world" --
partition-key "789675"
</pre>
<p></p>
<img src="/aws_lambda/images/data_kinesis.jpg" alt="Data Kinesis" />
<p>Then, AWS Lambda is activated and the mail is sent.</p>
<img src="/aws_lambda/images/activate_mail.jpg" alt="Activate Mail" />
<p></p>
<img src="/aws_lambda/images/kinesis_command.jpg" alt="Kinesis Command" />
<img src="/aws_lambda/images/kinesis_mail.jpg" alt="Kinesis Mail" />
<h1>Using Lambda Function with Custom User Applications</h1>
<p>We can use AWS lambda function to process using generated events by user application in the following two ways &minus;</p> 
<ul class="list">
<li>Using AWS Console</li>
<li>Using AWS CLI</li>
</ul>
<h2>Using AWS Console</h2>
<p>From AWS console, we will work with events and AWS Lambda. For this purpose, go to AWS console and create a lambda function.</p>
<img src="/aws_lambda/images/lambda_custom.jpg" alt="Lambda Custom" />
<p>Next, let us add the code for AWS Lambda &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log("Hello =&gt; "+ event.name);
   console.log("Address =&gt;"+ event.addr);
   callback(null, 'Hello '+event.name +" and address is "+ event.addr);
};
</pre>
<p>Note that in the above code, we are printing name and address using event.</p>
<p>The details to the event will be given using the test event created as follows &minus;</p>
<img src="/aws_lambda/images/configure_events.jpg" alt="Configure Events" />
<p>Now, save the event and test it.</p> 
<img src="/aws_lambda/images/save_event.jpg" alt="Save Event" />
<p>The corresponding log output is as shown here &minus;</p>
<img src="/aws_lambda/images/custom_output.jpg" alt="Custom Output" />
<h2>Using AWS CLI</h2>
<p>We can invoke the above function using AWS CLI as follows &minus;</p>
<pre class="result notranslate">
aws lambda invoke --function-name "lambdauserevent" --log-type Tail --
payload file://C:\clioutput\input.txt C:\clioutput\outputfile.txt
</pre>
<p>The event details are given to payload and the output is stored at <b>C:\clioutput\outputfile.txt.</b> as follows &minus;</p>
<p><b>input.txt</b></p>
<pre class="result notranslate">
{"name":"Roy Singh", "addr":"Mumbai"}
</pre>
<p>On invoking the Lambda using AWS CLI, you can see the output is as follows &minus;</p>
<img src="/aws_lambda/images/custom_command_prompt.jpg" alt="Custom Command Prompt" />
<p>Similarly, in case you want to test AWS Lambda for any other AWS service, you can do so using the test event in AWS console and AWS CLI. A sample event for SNS service is shown below &minus;</p>
<pre class="prettyprint notranslate">
{
   "Records": [{
      "EventVersion": "1.0",
      "EventSubscriptionArn": "arnid",
      "EventSource": "aws:sns",
      "Sns": {
         "SignatureVersion": "1",
         "Timestamp": "1970-01-01T00:00:00.000Z",
         "Signature": "EXAMPLE",
         "SigningCertUrl": "EXAMPLE",
         "MessageId": "95df01b4-ee98-5cb9-9903-4c221d41eb5e",
         "Message": "Hello from SNS!",
         "MessageAttributes": {
            "Test": {
               "Type": "String",
               "Value": "TestString"
            },
            "TestBinary": {
               "Type": "Binary",
               "Value": "TestBinary"
            }
         },
         "Type": "Notification",
         "UnsubscribeUrl": "EXAMPLE",
         "TopicArn": "topicarn",
         "Subject": "TestInvoke"
      }
   }]
}
</pre>
<p>Let us add the sample event shown above and test it as shown &minus;</p>
<img src="/aws_lambda/images/configure_sample_event.jpg" alt="Configure Sample Event" />
<p>In AWS Lambda, code will print the SNS message as shown in the example given below &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log(event.Records[0].Sns.Message);
   callback(null, event.Records[0].Sns.Message);};
</pre>
<p></p>
<img src="/aws_lambda/images/sns_message.jpg" alt="Sns Message" />
<p>Let us invoke the same using AWS CLI. Let us save the event in a file and use that for payload using the command shown &minus;</p>
<pre class="prettyprint notranslate">
aws lambda invoke --function-name "lambdauserevent" --log-type Tail --
payload file://C:\clioutput\sns.txt C:\clioutput\snsoutput.txt
</pre>
<p></p>
<img src="/aws_lambda/images/payload_command.jpg" alt="Payload Command" />
<h1>Using AWS Lambda@Edge with CloudFront</h1>
<p>Lambda@Edge is an addition to the AWS Lambda compute service which is used to customize the content that cloudfront delivers.</p>
<p>The block diagram which shows the working of AWS Lambda with cloudfront from AWS is shown below &minus;</p>
<img src="/aws_lambda/images/block_diagram_cloudfront.jpg" alt="Block Diagram Cloudfront" />
<p>There are four ways in which AWS Lambda can be used &minus;</p>
<ul class="list">
<li><p><b>Viewer Request &minus;</b> End user makes the request called Viewer Request to CloudFront</p></li>
<li><p><b>Origin Request &minus;</b> CloudFront forwards the request to the origin</p></li>
<li><p><b>Origin Response &minus;</b> CloudFront receives the response from the origin</p></li>	
<li><p><b>Viewer Response &minus;</b> CloudFront send the response to the viewer</p></li>
</ul>
<p>We can use Lambda@Edge for the following purposes &minus;</p>
<ul class="list">
<li><p>To change the headers at the request and response time.</p></li>
<li><p>Add cookies details to the headers. Carry out AB testing based on the request and response.</p></li>
<li><p>Redirect the URL to another site, based on the header details.</p></li>
<li><p>We can fetch the user-agent from the headers and find out the details of the browser, OS, etc.</p></li>
</ul>
<h2>Requisites</h2>
<p>To start with working on CloudFront and Lambda@Edge, we need the following &minus;</p>
<ul class="list">
<li><p>Create S3 storage bucket with file details</p></li>
<li><p>Create role which will allow permission to work with CloudFront and Lambda@Edge</p></li>
<li><p>Create CloudFront distribution</p></li>
<li><p>Create lambda function</p></li>
<li><p>Add lambda function details to cloudfront</p></li>
<li><p>Check the cloudfront url in browser</p></li>
</ul>
<p>We will work on an example with CloudFront and Lambda@Egde, wherein we will host the page and change the response when detected as desktop and devices.</p>
<h2>Create S3 Storage Bucket with File Details</h2>
<p>Login to AWS console and create a bucket in S3 and add the <b>. html</b> file which you want to display.</p>
<img src="/aws_lambda/images/storage_bucket.jpg" alt="Storage Bucket" />
<p>Click on <b>S3</b> and <b>Create bucket</b> as shown below &minus;</p>
<img src="/aws_lambda/images/amazon_s3.jpg" alt="Amazon S3" />
<p>Now, click <b>Create bucket</b> button and add the details of the bucket as shown below &minus;</p>
<img src="/aws_lambda/images/create_bucket_button.jpg" alt="Create Bucket Button" />
<p>Click on <b>Create</b> button and upload the .html in it.</p>
<img src="/aws_lambda/images/upload_html.jpg" alt="Upload Html" />
<h2>Create Role</h2>
<p>Go to AWS console and click <b>IAM</b>.</p>
<img src="/aws_lambda/images/security.jpg" alt="Security" />
<p>Now, click <b>Roles -&gt; Create role</b> button as shown &minus;</p>
<img src="/aws_lambda/images/create_role_dashboard.jpg" alt="Create Role Dashboard" />
<p>Choose the permission for <b>S3, Lambda</b> and <b>Cloudfront</b>. It is a good practice to create the policy giving permission to only the required function, storage by using the ARN details.</p>
<p>In the example discussed below, we are showing the <b>Full Access</b> permission. Policies for the role name <b>role for cloudfront</b> is added as shown above. Click on Create role.</p>
<img src="/aws_lambda/images/full_access_permission.jpg" alt="Full Access Permission" />
<p></p>
<img src="/aws_lambda/images/role_cloudfront.jpg" alt="Role Cloudfront" />
<p>All the policy required for lambda@edge and cloudfront are as shown above. There is a additional step to be done here since incase of cloudfront the url will be available across region and it needs a trust relationship between the services we are using.</p>
<p>Now, for the role created, click on <b>Trust relationships</b> tab as shown &minus;</p>
<img src="/aws_lambda/images/relationship.jpg" alt="Relationship" />
<p>Click on <b>Edit Trust Relationship</b> as shown below &minus;</p>
<img src="/aws_lambda/images/edit_trust_relationship.jpg" alt="Edit Trust Relationship" />
<p>It displays a policy document. We need to add the other services in the <b>Principal -&gt; Service</b> which we are planning to use. The final trust relationship policy document is as shown below &minus;</p>
<img src="/aws_lambda/images/final_trust_relationship.jpg" alt="Final Trust Relationship" />
<p>Click <b>Update Trust Policy</b> button to save the changes.</p>
<h2>Create CloudFront Distribution</h2>
<p>Go to CloudFront service as shown below &minus;</p>
<img src="/aws_lambda/images/create_cloudfront.jpg" alt="Create Cloudfront" />
<p>Click on CloudFront service and click on <b>Create Distribution</b> &minus;</p>
<img src="/aws_lambda/images/create_distribution.jpg" alt="Create Distribution" />
<h3>Origin Settings, Behaviour Settings and Distribution settings</h3>
<p>Let us look into these settings one by one &minus;</p>
<p><b>Origin Settings</b></p>
<img src="/aws_lambda/images/origin_settings.jpg" alt="Origin Settings" />
<p>Various parameters of Origin settings are explained as below &minus;</p>
<p><b>Origin Domain Name &minus;</b> This is the name of the S3 bucket where we have stored the html files. We can also store images, if any, in the S3 bucket by creating folders of our choice.</p>
<p><b>Origin Path &minus;</b> Here you need to enter the name of the folder where the files are stored. At present, we do not have this folder, so we will keep it blank for now.</p>
<p><b>Origin ID &minus;</b> It gets populated when the origin domain name is selected. You can change the id as per your choice.</p>
<p><b>Restrict Bucket Access &minus;</b> In this, we will choose the option <b>yes</b>. Here we need security for the S3 bucket so that no one has the access to the S3 bucket. For this option there are some more options populated like <b>Origin Access Identity, Comment and Grant Read Permission on Bucket</b>.</p>
<p><b>Origin Access Identity &minus;</b> We have used create a new identity option. You can also choose the existing identity. This creates a new identity which is used by CloudFront to read the details from S3 bucket.</p>
<p><b>Grand Read Permission on Bucket &minus;</b> For this, choose the option <b>Yes</b>.</p>
<p><b>Origin Custom Headers &minus;</b> We will keep the headers blank here, as we do not need the details right now.</p>
<p>Next, let us discuss and fill up the <b>Behaviour Settings</b> for Cloudront distribution &minus;</p>
<img src="/aws_lambda/images/behaviour_settings.jpg" alt="Behaviour Settings" />
<p>Now, select the protocol – https or http, and the caching option. Note that the default caching is 86400 or 24 hrs. You can change this value as per the requirement.</p>
<p>Click <b>Object Caching</b> (customize option) to change the caching. You can use <b>smooth streaming</b> in case if there any videos on your page. Here, we are keeping the default option available. Once the lambda function is created, its details will be added.</p>
<p>The details for distribution settings are shown below &minus;</p>
<img src="/aws_lambda/images/obeject_caching.jpg" alt="Object Caching " />
<p>Various parameters of distribution settings are explained below &minus;</p>
<p><b>Price class &minus;</b> It has details like the origin of users traffic. Note that here we have selected the default one - <b>Use All Edge Locations.</b></p>
<p><b>AWS WAF Web ACL &minus;</b> This is for web application firewall selection. Here, it has option as <b>None</b>. First, we need to create the firewall in AWS. It provides security to the site.</p>
<p><b>Alternate Domain Names &minus;</b> Here you can specify the domain name if you have.</p>
<p><b>SSL Certificate &minus;</b> This has all the details to be selected for SSL certificate. We will keep the default ones.</p>
<p><b>Default Root Object &minus;</b> Here we will specify the filename which we have uploaded in S3. For this, we need the content from the .html to be displayed by default.</p>
<p>For the rest, we will keep the default setting.</p>
<p>Click <b>Create Distribution</b> button to add the distribution.</p>
<img src="/aws_lambda/images/cloudfront_distribution.jpg" alt="Cloudfront Distribution" />
<p>Note that the distribution will take some time to show the status as deployed.</p>
<h2>Create AWS Lambda Function</h2>
<p>Go to AWS console and create Lambda function.</p>
<img src="/aws_lambda/images/cloudfront_function.jpg" alt="Cloudfront Function" />
<p>In AWS Lambda code, we will take the request headers and check the user-agent. If the user-agent is from desktop, we will change the response to display message as <b>“DESKTOP : Welcome to AWS Lambda with Cloudfront!”</b> and if device the message will be<b>“MOBILE DEVICES : Hello from Lambda@Edge!”</b></p>
<p>The corresponding AWS Lambda code is as shown below &minus;</p>
<pre class="prettyprint notranslate">
let content = `
&lt;\!DOCTYPE html&gt;
&lt;html lang="en"&gt;
   &lt;head&gt;
      &lt;meta charset="utf-8"&gt;
      &lt;title&gt;Simple Lambda@Edge Static Content Response&lt;/title&gt;
      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;h1&gt;MOBILE DEVICES : Hello from Lambda@Edge!&lt;/h1&gt;
   &lt;/body&gt;
&lt;/html&gt;
`;
let content1 = `
&lt;\!DOCTYPE html&gt;
&lt;html lang="en"&gt;
   &lt;head&gt;
      &lt;meta charset="utf-8"&gt;
      &lt;title&gt;Simple Lambda@Edge Static Content Response&lt;/title&gt;
      &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;h1&gt;DESKTOP : Welcome to AWS Lambda with Cloudfront!&lt;/h1&gt;
   &lt;/body&gt;
&lt;/html&gt;
`;
exports.handler = (event, context, callback) =&gt; {
   let request = event.Records[0].cf.request;
   let finalrequest = JSON.stringify(request);
   let headers = request.headers;
   let useragent = JSON.stringify(headers["user-agent"][0].value);
   let str = "";
   if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(useragent)) {
      str = content;
   } else {
      str = content1;
   }
   const response = {
      status: '200',
      statusDescription: 'OK',        
      body: str+useragent,
   };
   callback(null, response);
};
</pre>
<p>Now, save the Lambda function. Note that we need to publish the Lambda function so that it can be used with all regions. To publish, we need to do the following &minus;</p>
<p>From Actions dropdown, select <b>Publish new version</b> as shown below &minus;</p>
<img src="/aws_lambda/images/publish_new_version.jpg" alt="Publish New Version" />
<p>If you, click <b>Publish new version</b>, it displays the following screen &minus;</p>
<img src="/aws_lambda/images/publish_latest_version.jpg" alt="Publish Latest Version" />
<p>Now, enter the Version description and click <b>Publish</b>. The ARN will display the version of the AWS Lambda function created as shown below &minus;</p>
<img src="/aws_lambda/images/version_description.jpg" alt="Version Description" />
<p>Add CloudFront trigger to the new version created as shown below &minus;</p>
<img src="/aws_lambda/images/cloudfront_trigger.jpg" alt="Cloudfront Trigger" />
<p>Now, add the configuration details for CloudFront. The CloudFront event has option for <b>Viewer request, Origin request, Origin response</b>, and <b>Viewer response</b>.</p>
<p>Next, choose the CloudFront distribution created earlier. From <b>events</b>, we will select <b>Viewer request</b>. Based on the viewer request, the desktop/device from user-agent will be decided and the response will be changed. Next, add the trigger details.</p>
<img src="/aws_lambda/images/viewer_request.jpg" alt="Viewer Request" />
<p>Once the trigger is added, we need to wait for the distribution from CloudFront to be deployed.</p>
<img src="/aws_lambda/images/cloudfront_deploy.jpg" alt="Cloudfront Deploy" />
<p>Once the status is changed to <b>Deployed</b>, we can test the CloudFront url and check the domain name in browser.</p>
<p>The display in desktop browser is as shown below. Here we have printed the user-agent from the viewer-request event.</p>
<img src="/aws_lambda/images/desktop_browser.jpg" alt="Desktop Browser" />
<p>This is the display in mobile device.</p>
<img src="/aws_lambda/images/mobile_device.jpg" alt="Mobile Device" />
<p>Thus, in the above example, we have used Lambda@Edge to change response on desktop and mobile device.</p>
<h1>Monitoring and TroubleShooting using Cloudwatch</h1>
<p>Functions created in AWS Lambda are monitored by Amazon CloudWatch. It helps in logging all the requests made to the Lambda function when it is triggered.</p>
<p>Consider that the following code is uploaded in AWS Lambda with function name as <b>lambda and cloudwatch</b>.</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log("Lambda monitoring using amazon cloudwatch");    
   callback(null, 'Hello from Lambda');
};
</pre>
<p>When the function is tested or triggered, you should see an entry in Cloudwatch. For this purpose,  go to AWS services and click CloudWatch.</p>
<img src="/aws_lambda/images/click_cloudwatch.jpg" alt="Click Cloudwatch" />
<p>Select logs from left side.</p>
<img src="/aws_lambda/images/select_left_side.jpg" alt="Select Left Side" />
<p>When you click <b>Logs</b>, it has the <b>Log Groups</b> of AWS Lambda function created in your account. Select anyAWS Lambda function and check the details. Here, we are referring to Lambda function with name:<b>lambdaandcloudwatch</b>. The logs added to the Lambda function are displayed here as shown below &minus;</p>
<img src="/aws_lambda/images/log_groups.jpg" alt="Log Groups" />
<p>Now, let us add S3 trigger to the Lambda function and see the logs details in CloudWatch as shown below &minus;</p>
<img src="/aws_lambda/images/s3_trigger.jpg" alt="S3 Trigger" />
<p>Let us update AWS Lambda code to display the file uploaded and bucket name as shown in the code given below &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log("Lambda monitoring using amazon cloudwatch");
   const bucket = event.Records[0].s3.bucket.name;
   const filename = event.Records[0].s3.object.key;
   const message = `File is uploaded in - ${bucket} -&gt; ${filename}`;
   console.log(message);
   callback(null, 'Hello from Lambda');
};
</pre>
<p>Now, add file in <b>s3storetestlambdaEventbucket</b> as shown &minus;</p>
<img src="/aws_lambda/images/s3_store_test.jpg" alt="S3 Store Test" />
<p>When the file is uploaded, AWS Lambda functions will get triggered and the console log messages from Lambda code are displayed in CloudWatch as shown below &minus;</p>
<img src="/aws_lambda/images/cloudwatch_display.jpg" alt="Cloudwatch Display" />
<p>If there is any error, CloudWatch gives the error details as shown below &minus;</p>
<img src="/aws_lambda/images/cloudwatch_details.jpg" alt="Cloudwatch Details" />
<p>Note that we have referred to the bucket name wrongly in AWS Lambda code as shown &minus;</p>
<pre class="prettyprint notranslate">
exports.handler = (event, context, callback) =&gt; {
   // TODO implement
   console.log("Lambda monitoring using amazon cloudwatch");
   const bucket = event.Records[0].bucket.name;
   const filename = event.Records[0].s3.object.key;
   const message = `File is uploaded in - ${bucket} -&gt; ${filename}`;
   console.log(message);
   callback(null, 'Hello from Lambda');
};
</pre>
<p>The bucket name reference from the event is wrong. Thus, we should see an error displayed in CloudWatch as shown below &minus;</p>
<img src="/aws_lambda/images/error_displayed.jpg" alt="Error Displayed" />
<h2>CloudWatch Metrics</h2>
<p>The details of the Lambda function execution can be seen in the metrics. Click <b>Metrics</b> displayed in the left side.</p> 
<img src="/aws_lambda/images/metrics_displayed.jpg" alt="Metrics Displayed" />
<p></p>
<img src="/aws_lambda/images/all_metrics.jpg" alt="All Metrics" />
<p>The graph details for the lambda function <b>lambdaandcloudwatch</b> are as shown below &minus;</p>
<img src="/aws_lambda/images/graphed_metrics.jpg" alt="Graphed Metrics" />
<p></p>
<img src="/aws_lambda/images/graph_details.jpg" alt="Graph Details" />
<img src="/aws_lambda/images/graph_details_lambda.jpg" alt="Graph Details Lambda" />
<p>It gives details such as the duration for which the Lambda function is executed, number of times it is invoked and the errors from the Lambda function.</p>
<h1>AWS Lambda – Additional Example</h1>
<p>Till now, we have seen working of AWS Lambda with AWS services. Based on that knowledge, let us create a simple user registration form and post the data using API gateway to AWS Lambda. AWS Lambda will get the data from the event or theAPI gateway trigger and will add those details to DynamoDB table.</p>
<h2>Example</h2>
<p>Let us consider an example and perform the following functionalities on it &minus;</p>
<ul class="list">
<li><p>Create DynamoDB Table</p></li>
<li><p>Create Form for User Registration</p></li>
<li><p>Create AWS Lambda and API gateway to send message to Phone using AWS SNS service</p></li>
<li><p>Create AWS Lambda and API gateway to POST form data and insert in DynamoDb table</p></li>
<li><p>Create AWS Lambda and API gateway to read data from Dynamodb table</p></li>
<li><p>Final Working of the User Registration Form</p></li>
</ul>
<h2>Create DynamoDB Table</h2>
<p>The data entered will be stored in DynamodDB table. We will use API gateway to share data entered with AWS Lambda and later AWS Lambda will add the details in DynamoDB.</p>
<p>You can use the following details to create DynamodDB table in AWS console. First, go to AWS Service and click <b>DynamoDB</b>. Click <b>Table</b> to create the table as shown below &minus;</p>
<img src="/aws_lambda/images/create_dynamodb_table.jpg" alt="Create DynamoDB Table" />
<p></p>
<img src="/aws_lambda/images/table_data.jpg" alt="Table Data" />
<p>You can use the ARN to create policy for the DynamoDB to be used with AWS Lambda.</p>
<p>Go to IAM and select <b>Policies</b>. Click <b>Create policy</b>, choose service as DynamodDB as shown below &minus;</p>
<img src="/aws_lambda/images/select_policies.jpg" alt="Select Policies" />
<p>Click <b>All DynamoDB</b> actions as shown above. Choose resource and enter the ARN for table as shown below &minus;</p>
<img src="/aws_lambda/images/all_dynamodb.jpg" alt="All DynamoDB" />
<p>Now, click <b>Add</b> as shown below.</p>
<img src="/aws_lambda/images/click_add.jpg" alt="Click Add" />
<p>If you click <b>Review policy</b> button at the end of the screen, you can see the following window &minus;</p>
<img src="/aws_lambda/images/review_policy.jpg" alt="Review Policy" />
<p>Enter name of the policy and click <b>Create policy</b> button at the end of the page. Now, we need to create role to be used with Lambda. We need permissionsforDynamoDB, APIGateway and Lambda.</p>
<p>Go to AWS services and select IAM. Select Roles from left side and add the required roles.</p>
<img src="/aws_lambda/images/create_policy_button.jpg" alt="Create Policy Button" />
<p>Enter the role name and click <b>Create role</b>. The role created is <b>roleforlambdaexample</b>.</p>
<h2>Create Form for User Registration</h2>
<p>Here is the display of the user registration form to enter and to read the data from the dynamodb table.</p>
<img src="/aws_lambda/images/user_registration.jpg" alt="User Registration" />
<h2>Create AWS Lambda and API Gateway to Send OTP Message to Phone  using SNS service</h2>
<p>If you see the user registration form, there is a button <b>validate phone</b>. User is suppose to enter phone number and click on <b>validate phone</b> button to validate the phone number.</p>
<p>For this purpose &minus;</p>
<p>When a user clicks this button, the API gateway post method which contains the phone details is called and internally AWS Lambda is triggered.</p>
<p>Then, AWS Lambda sendsOTP to the phone number entered using AWS SNS service.</p>
<p>The user receives the OTP and has to enter thisOTP number.</p>
<p>The textbox to enter OTP will appear when the phone number is entered and <b>validate phone</b> button is clicked.</p>
<p>The OTP received from AWS Lambda and the OTP entered by the user has to match, to allow the user to submit the user registration form.</p>
<p>A simple block diagram that explains the working of phone validation is shown here &minus;</p>
<img src="/aws_lambda/images/sns_service.jpg" alt="Sns Service" />
<p>The AWS Lambda function created is as shown here &minus;</p>
<img src="/aws_lambda/images/lambda_function_created.jpg" alt="Lambda Function Created" />
<p>The corresponding AWS Lambda code is as given below &minus;</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
const sns = new aws.SNS({
   region:'us-east-1'
});
exports.handler = function(event, context, callback) {
   let phoneno = event.mphone;
   let otp = Math.floor(100000 + Math.random() * 900000);
   let snsmessage = "Your otp is : "+otp;
   sns.publish({
      Message: snsmessage,
      PhoneNumber: "+91"+phoneno
   }, function (err, data) {
      if (err) {
         console.log(err);
         callback(err, null);
      } else {
         console.log(data);
         callback(null, otp);
      }	
   });
};
</pre>
<p>Note that we are using SNS service to send the OTP code. This code is used to validate the mobile number entered by the user in the user registration form. The API gateway created for above phone validation is as follows &minus;</p>
<img src="/aws_lambda/images/default_timeout.jpg" alt="Default Timeout" />
<p></p>
<img src="/aws_lambda/images/application_json.jpg" alt="Application Json" />
<p>The Lambda function given is <b>phonevalidationexample</b>. We are taking the mobile phone details here to be used inside AWS Lambda. Then, AWS Lambda will send the OTP code to the given mobile number.</p>
<h2>Create AWS Lambda and API Gateway to POST Form Data and Insert in DynamoDB Table</h2>
<p>For user registration form, all the fields are mandatory. There is anAJAX call made wherein the data entered in the form is posted to the API Gateway URL.</p>
<p>A simple block diagram which explains the working of the submit button is shown here &minus;</p>
<img src="/aws_lambda/images/block_diagram_dynamodb_table.jpg" alt="Block Diagram Dynamodb Table" />
<p>Once the form is filled, the submit button will call the API gateway which will trigger AWS Lambda. AWS Lambda will get the details of the form from event or theAPI Gateway and the data will be inserted in the DynamodDB table.</p>
<p>Let us understand the creation of API Gateway and AWS Lambda.</p>
<p>First, go to AWS services and click Lambda. The Lambda function created is as shown here &minus;</p>
<img src="/aws_lambda/images/lambda_example.jpg" alt="Lambda Example" />
<p>Now, to create an API gateway, go to AWS service and select <b>API Gateway</b>. Click on <b>Create API</b> button shown below.</p>
<img src="/aws_lambda/images/create_api.jpg" alt="Create Api" />
<p>Enter the <b>API name</b> and click on <b>Create API</b> button to add the API.</p>
<img src="/aws_lambda/images/create_api_button.jpg" alt="Create Api Button" />
<p>Now, an API is created called as <b>registeruser</b>. Select the API and click <b>Actions</b> dropdown to create <b>Resource</b>.</p>
<img src="/aws_lambda/images/new_child_resource.jpg" alt="New Child Resource" />
<p>Click <b>Create Resource</b>. Now, let us add the <b>POST</b> method. For this, click on resources created on left side and from <b>Actions</b> dropdown select <b>create method</b>. This will display dropdown as shown below &minus;</p>
<img src="/aws_lambda/images/create_method.jpg" alt="Create Method" />
<p>Select the POST method and add the Lambda function that we created above.</p>
<img src="/aws_lambda/images/post_setup.jpg" alt="Post Setup" />
<p>Click <b>Save</b> button to add the method. To send the form details to Lambda function <b>lambdaexample</b> we need to add the <b>Integration Request</b> as shown below &minus;</p>
<img src="/aws_lambda/images/integration_request_example.jpg" alt="Integration Request" />
<p>To post the form details, you will have to click <b>Integration Request</b>. It will display below details.</p>
<img src="/aws_lambda/images/add_user_post.jpg" alt="Add User Post" />
<p>Click <b>Body Mapping Templates</b> to add the form fields to be posted.</p>
<img src="/aws_lambda/images/body_template.jpg" alt="Body Template" />
<p>Next, click <b>Add mapping template</b> and enter the content type. Here, we have added <b>application/json</b> as the content type. Click it and here you need to enter the field in json format as shown below &minus;</p>
<img src="/aws_lambda/images/add_mapping_template.jpg" alt="Add Mapping Template" />
<p>Now, click the <b>Save</b> button and deploy the API as shown below &minus;</p>
<img src="/aws_lambda/images/deploy_save_button.jpg" alt="Deploy Save Button" />
<p>Here is the API created for POST which will use inside our .html file. Please note we need to Enable CORS for the resource created. Will use the api gateway url to make ajax call so the CORS has to enabled.</p>
<p>Select the Methods on which you want to enable the CORS. Click on <b>Enable CORS and replace existing CORS headers</b>.</p> 
<img src="/aws_lambda/images/core_header.jpg" alt="Core Header" />
<p>It displays the confirmation screen as follows &minus;</p>
<img src="/aws_lambda/images/confirmation_screen.jpg" alt="Confirmation Screen" />
<p>Click <b>Yes, replace existing values</b> to enable CORS.</p>
<img src="/aws_lambda/images/yes_replaced.jpg" alt="Yes Replaced" />
<p>The AWS Lambda code forPOST API Gateway is as shown here &minus;</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
const docClient = new aws.DynamoDB.DocumentClient({
   region:'us-east-1'
});
exports.handler = function(event, context, callback) {
   console.log(event);
   console.log("Entering Data");
   var data = {
      TableName : "registeruser",
      Item : {
         first_name:event.fname,
         last_name:event.lname,
         emailid:event.emailid,	  
         mobile_no : event.mphone,
         otp:event.otp,
         username:event.uname,
         password:event.passwd,
         confirm_password:event.cpasswd
      }
   }
   docClient.put(data, function(err, value) {
      if (err) {
         console.log("Error");
         callback(err, null);
      } else {
         console.log("data added successfully");
         callback(null, value);
      }
   });
}
</pre>
<p>The event parameter in AWS Lambda handler will have all the details which are added earlier in POST integration request. The details from event are added to the DynamodDB table as shown in the code.</p>
<p>Now, we need to get the service details from AWS-SDK as shown below &minus;</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
const docClient = new aws.DynamoDB.DocumentClient({
   region:'us-east-1'
});
var data = {
   TableName : "registeruser",
   Item : {
      first_name:event.fname,
      last_name:event.lname,	
      emailid:event.emailid,
      mobile_no : event.mphone,
      otp:event.otp,
      username:event.uname,
      password:event.passwd,
      confirm_password:event.cpasswd
   }
}
docClient.put(data, function(err, value) {
   if (err) {
		console.log("Error");
      callback(err, null);
   } else {
      console.log("data added successfully");
      callback(null, value);
   }
});
</pre>
<h2>Create AWS Lambda and API Gateway to Read Data from DynamodDB Table</h2>
<p>Now, we will create AWS Lambda function to read data from DynamoDB table. We will trigger APIGateway to the AWS Lambda function which will send data to the html form.</p>
<p>The AWS Lambda function created is as shown below &minus;</p>
<img src="/aws_lambda/images/read_data.jpg" alt="Read Data" />
<p>The corresponding AWS Lambda code is as follows &minus;</p>
<pre class="prettyprint notranslate">
const aws =  require("aws-sdk");
const docClient = new aws.DynamoDB.DocumentClient({
   region:'us-east-1'
});
exports.handler = function(event, context, callback) {
   var readdata = {
      TableName : "registeruser",
      Limit : 10
   }
   docClient.scan(readdata, function(err, data) {
      if (err) {
         console.log("Error");
         callback(err, null);
      } else {
         console.log("Data is " + data);
         callback(null, data);
      }
   });
}
</pre>
<p>Here the data is read from the DynamoDB table and given to the callback. Now, we will create APIGateway and add AWS Lambda function as the trigger.</p>
<p>We will add get method to the API created earlier.</p>
<img src="/aws_lambda/images/api_created.jpg" alt="Api Created" />
<p>Lambda function added is <b>lambdareaddataexample</b>. Click <b>Save</b> to save the method and deploy the api.</p>
<h2>Final Working of the User Registration Form</h2>
<p>The final display of the form is as shown below &minus;</p>
<img src="/aws_lambda/images/final_working.jpg" alt="Final Working" />
<p>Now, enter the details as shown above. Note that the submit button is disabled. It will be enabled only when all the details are entered as shown &minus;</p>
<img src="/aws_lambda/images/enter_details.jpg" alt="Enter Details" />
<p>Now, enter the mobile number and click <b>validate phone</b> button. It will display the alert message saying <b>“OTP is send to the mobile, please enter the OTP to continue”</b>. OTP sent to the mobile number is as follows &minus;</p>
<img src="/aws_lambda/images/otp.jpg" alt="Otp" />
<p>Enter the OTP and remaining details and submit the form.</p>
<img src="/aws_lambda/images/remaining_details.jpg" alt="Remaining Details" />
<p>The data in DynamoDB <b>registeruser</b> table after submit is as shown here &minus;</p>
<img src="/aws_lambda/images/register_user.jpg" alt="Register User" />
<p>The code details are as given below &minus;</p>
<p><b>Example1.html</b></p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;
      &lt;script type="text/javascript" src="formdet.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         input[type=text], input[type=password],button {
            width: 100%;
            padding: 5px 5px;
            margin: 5px 0;
            box-sizing: border-box;
         }
         #maincontainer {
            width: 80%;
            margin: auto;
            padding: 10px;
         }
         div#userregistration {
            width: 60%;
            float: left;
         }
         div#userdisplay {
            margin-left: 60%;   
         }
      &lt;/style&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id="maincontainer"&gt;
         &lt;div id="userregistration"&gt;
            &lt;h1&gt;User Registration Form&lt;/h1&gt;
            &lt;table border="0"&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;First Name&lt;span style="color:red;"&gt;*&lt;/span&gt; : &lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="text" value="" name="fname" id="fname" /&gt;&lt;/td&gt;
                  &lt;td id="tdfname" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter First Name&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Last Name&lt;span style="color:red;"&gt;*&lt;/span&gt; : &lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="text" value="" name="lname" id="lname" /&gt;&lt;/td&gt;
                  &lt;td id="tdlname" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter Last Name&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Email Id&lt;span style="color:red;"&gt;*&lt;/span&gt; : &lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="text" value="" name="emailid" id="emailid" /&gt;&lt;/td&gt;
                  &lt;td id="tdemailid" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter Email&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Mobile No&lt;span style="color:red;"&gt;*&lt;/span&gt; : &lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="text" name="mphone" id="mphone"/&gt;&lt;/td&gt;
                  &lt;td id="tdmphone" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter Mobile Number&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;   
               &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;button id="validatephone"&gt;validate phone&lt;/button&gt;&lt;/td&gt;	 
                  &lt;td&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr id="otpdiv" style="display:none;"&gt;
                  &lt;td&gt;&lt;b&gt;Enter OTP&lt;span style="color:red;"&gt;*&lt;/span&gt;:&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="text" value="" name="otp" id="otp" /&gt;&lt;/td&gt;
                  &lt;td id="tdotp" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter OTP&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;b&gt;Username&lt;span style="color:red;"&gt;*&lt;/span&gt;: &lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="text" value="" name="uname" id="uname"/&gt;&lt;/td&gt;
                  &lt;td id="tduname" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter Username&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;b&gt;Password&lt;span style="color:red;"&gt;*&lt;/span&gt; :&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="password" value="" name="passwd" id="passwd"/&gt;&lt;/td&gt;
                  &lt;td id="tdpasswd" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter Password&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;b&gt;Confirm Password&lt;span style="color:red;"&gt;*&lt;/span&gt; :&lt;/b&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;input type="password" value="" name="cpasswd" id="cpasswd"/&gt;&lt;/td&gt;
                  &lt;td id="tdcpasswd" style="display:none;"&gt;&lt;span style="color:red;"&gt;Enter Confirm Password&lt;/span&gt;&lt;/td&gt;
               &lt;/tr&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;button name="submit" id="submit" style="display:;" disabled="true"&gt;Submit&lt;/button&gt;&lt;/td&gt;
                  &lt;td&gt;&lt;/td&gt;
               &lt;/tr&gt;
            &lt;/table&gt;
         &lt;/div&gt;
         
         &lt;div id="userdisplay"&gt;
            &lt;h1&gt;User Display&lt;/h1&gt;
            &lt;table id="displaydetails" style="display:block;width:80%;padding:5px;margin:5px; border: 1px solid black;"&gt;
               &lt;tr&gt;
                  &lt;td&gt;&lt;/td&gt;
                  &lt;td&gt;FirstName&lt;/td&gt;
                  &lt;td&gt;LastName&lt;/td&gt;
                  &lt;td&gt;Mobile No&lt;/td&gt;
                  &lt;td&gt;EmailID&lt;/td&gt;
               &lt;/tr&gt;
            &lt;/table&gt;
         &lt;/div&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p><b>formdet.js</b></p>
<pre class="prettyprint notranslate">
function validateform() {
   var sError="";
   if ($("#fname").val() === "") {
      $("#tdfname").css("display","");
      sError++;
   }
   if ($("#lname").val() === "") {
      $("#tdlname").css("display","");
      sError++;
   }
   if ($("#emailid").val() === "") {
      $("#tdemailid").css("display","");
      sError++;
   }
   if ($("#mphone").val() === "") {
      $("#tdmphone").css("display","");
      sError++;
   }
   if ($("#otp").val() === "") {
      $("#tdotp").css("display","");
      sError++;
   }
   if ($("#uname").val() === "") {
      $("#tduname").css("display","");
      sError++;
   }
   if ($("#passwd").val() === "") {
      $("#tdpasswd").css("display","");
      sError++;
   }
   if ($("#cpasswd").val() === "") {
      $("#tdcpasswd").css("display","");
      sError++;
   }
   if (sError === "") {
      return true;
   } else {
      return false;
   }
}
$("#fname").change(function() {
   if ($("#fname").val() !== "") {
      $("#tdfname").css("display","none");			
   } else {
      $("#tdfname").css("display","");			
   }
});
$("#lname").change(function() {
   if ($("#lname").val() !== "") {
      $("#tdlname").css("display","none");			
   } else {
      $("#tdlname").css("display","");			
   }
});
$("#emailid").change(function() {
   if ($("#emailid").val() !== "") {
      $("#tdemailid").css("display","none");			
   } else {
      $("#tdemailid").css("display","");			
   }
});
$("#mphone").change(function() {
   if ($("#mphone").val() !== "") {
      $("#tdmphone").css("display","none");			
   } else {
      $("#tdmphone").css("display","");			
   }
});
$("#otp").change(function() {
   if ($("#otp").val() !== "") {
      $("#tdotp").css("display","none");			
   } else {
      $("#tdotp").css("display","");			
   }
});
$("#uname").change(function() {
   if ($("#uname").val() !== "") {
      $("#tduname").css("display","none");			
   } else {
      $("#tduname").css("display","");			
   }
});
$("#passwd").change(function() {
   if ($("#passwd").val() !== "") {
      $("#tdpasswd").css("display","none");			
   } else {
      $("#tdpasswd").css("display","");			
   }
});
$("#cpasswd").change(function() {
   if ($("#cpasswd").val() !== "") {
      $("#tdcpasswd").css("display","none");			
   } else {
      $("#tdcpasswd").css("display","");			
   }
});

var posturl = "https://4rvwimysc1.execute-api.us-east-1.amazonaws.com/prod/adduser";
var phonevalidationurl = "https://wnvt01y6nc.execute-api.us-east-1.amazonaws.com/prod/validate";
var otpsend = "";
function getdata() {
   var a = 0;
   $.ajax({
      type:'GET',
      url:posturl,				
      success: function(data) {
         $("#displaydetails").html('');
         $("#displaydetails").css("display", "");
         console.log(data);
         $("#displaydetails").append('&lt;tr style="padding:5px;margin:5px;background-color:gray;"&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Mobile No&lt;/td&gt;&lt;td&gt;EmailID&lt;/td&gt;&lt;/tr&gt;');
         data.Items.forEach(function(registeruser) {
            var clr = (a%2 === 0) ? "#eee": "white";
            a++;
            $("#displaydetails").append('&lt;tr style="padding:5px;margin:5px;background-color:'+clr+'"&gt;&lt;td&gt;'+registeruser.first_name+'-'+registeruser.last_name+'&lt;/td&gt;&lt;td&gt;'+registeruser.mobile_no+'&lt;/td&gt;&lt;td&gt;'+registeruser.emailid+'&lt;/td&gt;&lt;/tr&gt;');
         });
      },
      error: function(err) {
         console.log(err);
      }
   });
}

$(document).ready(function() {
   $("#otp").on("change", function() {
      var otpentered = $("#otp").val();
      if (otpsend == otpentered) {
         document.getElementById("submit").disabled = false;
      } else {
         alert("OTP is not valid.Please enter the valid one or validate phone again to continue!");
         document.getElementById("submit").disabled = true;
      }
   });
   $("#validatephone").on("click", function() {
      $.ajax({
         type:'POST',
         url:phonevalidationurl,
         data:JSON.stringify({
            "mphone":$("#mphone").val()					
         }),
         success: function(data) {
            $("#otpdiv").css("display", "");
            alert("OTP is send to the mobile, please enter to continue");
            console.log(data);
            otpsend = data;
         },
         error : function(err) {
            $("#otpdiv").css("display", "none");
            alert("Invalid mobile no.");
         }
      });
   });
   $("#submit").on("click", function() {
      if (validateform()) {
         $.ajax({
            type:'POST',
            url:posturl,
            data:JSON.stringify({
               "fname": $("#fname").val(),
               "lname": $("#lname").val(),
               "emailid":$("#emailid").val(),
               "mphone":$("#mphone").val(),
               "otp":$("#otp").val(),
               "uname":$("#uname").val(),
               "passwd":$("#passwd").val(),
               "cpasswd":$("#cpasswd").val()
            }),
            success: function(data) {
               alert("Data added successfully");
               console.log(data);
               getdata();
            }
         });
      }
   });
   getdata();
});
</pre>
<p>Till now, we have done AJAX call to the API created and posted the data as shown above.</p>
<p>The AJAX call to add the data to the table is as follows &minus;</p> 
<pre class="prettyprint notranslate">
var posturl = "https://4rvwimysc1.execute-api.us-east-1.amazonaws.com/prod/adduser";
$(document).ready(function() {
   $("#submit").on("click", function() {
      if (validateform()) {
         $.ajax({
            type:'POST',
            url:posturl,
            data:JSON.stringify({
               "fname": $("#fname").val(),
               "lname": $("#lname").val(),
               "emailid":$("#emailid").val(),
               "mphone":$("#mphone").val(),
               "otp":$("#otp").val(),
               "uname":$("#uname").val(),
               "passwd":$("#passwd").val(),
               "cpasswd":$("#cpasswd").val()
            }),
            success: function(data) {
               alert("Data added successfully");
               console.log(data);
               getdata();
            }
         });
      }
   });
});
</pre>
<p>Note that to read the data, a function is called, whose code is given below &minus;</p>
<pre class="prettyprint notranslate">
function getdata() {
   var a = 0;
   $.ajax({
      type:'GET',
      url:posturl,				
      success: function(data) {
         $("#displaydetails").html('');
         $("#displaydetails").css("display", "");
         console.log(data);
         $("#displaydetails").append('&lt;tr style="padding:5px;margin:5px;background-color:gray;"&gt;&lt;td&gt;Name&lt;/td&gt;&lt;td&gt;Mobile No&lt;/td&gt;&lt;td&gt;EmailID&lt;/td&gt;&lt;/tr&gt;');
         data.Items.forEach(function(registeruser) {
            var clr = (a%2 === 0) ? "#eee": "white";
            a++;
            $("#displaydetails").append('&lt;tr style="padding:5px;margin:5px;background-color:'+clr+'"&gt;&lt;td&gt;'+registeruser.first_name+'-'+registeruser.last_name+'&lt;/td&gt;&lt;td&gt;'+registeruser.mobile_no+'&lt;/td&gt;&lt;td&gt;'+registeruser.emailid+'&lt;/td&gt;&lt;/tr&gt;');
         });
      },
      error: function(err) {
         console.log(err);
      }
   });
}
</pre>
<p>When you click mobile number validate button, the following code is called and sends the mobile number &minus;</p>
<pre class="prettyprint notranslate"> 
var phonevalidationurl = "https://wnvt01y6nc.execute-api.us-east-1.amazonaws.com/prod/validate";
var otpsend = "";
$("#validatephone").on("click", function() {
   $.ajax({
      type:'POST',
      url:phonevalidationurl,
      data:JSON.stringify({
         "mphone":$("#mphone").val()					
      }),
      success: function(data) {
         $("#otpdiv").css("display", "");
         alert("OTP is send to the mobile, please enter the OTP to continue");
         console.log(data);
         otpsend = data;
      },
      error : function(err) {
         $("#otpdiv").css("display", "none");
         alert("Invalid mobile no.");
      }
   });
});

// Validate otp
$("#otp").on("change", function() {
   var otpentered = $("#otp").val();
   if (otpsend == otpentered) {
      document.getElementById("submit").disabled = false;
   } else {
      alert("OTP is not valid.Please enter the valid one or validate phone again to continue!");
      document.getElementById("submit").disabled = true;
   }
}
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/aws_lambda/aws_lambda_additional_example.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/aws_lambda/aws_lambda_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
