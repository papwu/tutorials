<!DOCTYPE html>
<html lang="en-US">
<head>
<title>BPEL - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="BPEL - Quick Guide - SOA or the Service Oriented Architecture is an architectural approach, which makes use of technology to present business processes as reusable services."/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/bpel/bpel_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#199885;
}
a.demo {
    background:#199885;
}
li.heading {
    background:#199885;
}
.course-box{background:#199885}
.home-intro-sub p{color:#199885}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/bpel/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/bpel/images/soa-bpel-mini-logo.jpg" alt="BPEL Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">BPEL Tutorial</li>
<li><a href="/bpel/index.htm">BPEL - Home</a></li>
<li><a href="/bpel/bpel_introduction.htm">BPEL - Introduction</a></li>
<li><a href="/bpel/bpel_activities.htm">BPEL - Activities</a></li>
<li><a href="/bpel/bpel_partner_link_in_bpel_process.htm">Partner Link in BPEL Process</a></li>
<li><a href="/bpel/bpel_creating_partner_link.htm">Creating a Partner Link</a></li>
<li><a href="/bpel/bpel_adapters.htm">BPEL - Adapters</a></li>
<li><a href="/bpel/bpel_process_monitors.htm">Process Monitors</a></li>
<li><a href="/bpel/bpel_one_way_messages.htm">One-Way Messages</a></li>
<li><a href="/bpel/bpel_synchronous_interactions.htm">Synchronous Interactions</a></li>
<li><a href="/bpel/bpel_asynchronous_interactions.htm">Asynchronous Interactions</a></li>
<li><a href="/bpel/bpel_asynchronous_interactions_with_timeout.htm">Asynchronous Interactions with a Timeout</a></li>
<li><a href="/bpel/bpel_asynchronous_interactions_with_notification_timer.htm">Asynchronous Interactions with a Notification Timer</a></li>
<li><a href="/bpel/bpel_one_request_multiple_responses.htm">One Request, Multiple Responses</a></li>
<li><a href="/bpel/bpel_one_request_one_of_two_possible_responses.htm">One Request, One of Two Possible Responses</a></li>
<li><a href="/bpel/bpel_one_request_mandatory_and_optional_response.htm">One Request, a Mandatory Response, &amp; an Optional Response</a></li>
<li><a href="/bpel/bpel_partial_processing.htm">Partial Processing</a></li>
<li><a href="/bpel/bpel_multiple_application_interactions.htm">Multiple Application Interactions</a></li>
<li><a href="/bpel/bpel_invoking_synchronous_web_service.htm">Invoking a Synchronous Web Service</a></li>
<li><a href="/bpel/bpel_invoking_asynchronous_web_service.htm">Invoking an Asynchronous Web Service</a></li>
<li><a href="/bpel/bpel_using_parallel_flow.htm">Using Parallel Flow</a></li>
<li><a href="/bpel/bpel_using_conditional_branching.htm">Using Conditional Branching</a></li>
<li><a href="/bpel/bpel_using_fault_handling.htm">Using Fault Handling</a></li>
<li><a href="/bpel/bpel_resubmitting_faulted_process.htm">Resubmitting a Faulted Process</a></li>
<li><a href="/bpel/bpel_incorporating_java_ee_code.htm">Incorporating Java &amp; Java EE Code</a></li>
<li><a href="/bpel/bpel_manipulating_xml_data.htm">Manipulating XML Data</a></li>
<li><a href="/bpel/bpel_using_correlation_sets_message_aggregation.htm">Using Correlation Sets &amp; Message Aggregation</a></li>
<li><a href="/bpel/bpel_using_events_timeouts_processes.htm">Using Events &amp; Timeouts in BPEL Processes</a></li>
<li><a href="/bpel/bpel_using_notification_service.htm">Using the Notification Service</a></li>
<li><a href="/bpel/bpel_using_oracle_process_manager_sensors.htm">Using Oracle BPEL Process Manager Sensors</a></li>
<li><a href="/bpel/bpel_difference_between_bpel_1.1_and_2.0.htm">Difference between BPEL 1.1 &amp; BPEL 2.0</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">BPEL Useful Resources</li>
<li><a href="/bpel/bpel_quick_guide.htm">BPEL - Quick Guide</a></li>
<li><a href="/bpel/bpel_useful_resources.htm">BPEL - Useful Resources</a></li>
<li><a href="/bpel/bpel_discussion.htm">BPEL - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>BPEL - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/bpel/bpel_difference_between_bpel_1.1_and_2.0.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/bpel/bpel_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>BPEL - Introduction</h1>
<p>SOA or the Service Oriented Architecture is an architectural approach, which makes use of technology to present business processes as reusable services.</p>
<ul class="list">
<li><p>It is focused on the business and enables process transformation to new levels of integration, visualization, monitoring, and optimization.</p></li>
<li><p>It is not a technology, it is a concept and a strategy for using technologies to build business automation solutions.</p></li>
</ul>
<p>We will now see what BPEL is and how it helps in the SOA.</p>
<h2>What is BPEL?</h2>
<p>Business Process Engineering Language is a technology used to build programs in SOA architecture.</p>
<h3>Adding a BPEL Process Service Component</h3>
<p>Follow these steps to add a BPEL Process Service Component &minus;</p>
<ul class="list">
<li><p>From the Application Navigator, select File &gt; New &gt; Applications &gt; SOA Application.</p></li>
<li><p>This starts the Create SOA Application wizard.</p></li>
<li><p>In the Application Name dialog, enter an application name in the Application Name field.</p></li>
<li><p>In the Directory field, enter a directory path in which to create the SOA composite application and project.</p></li>
<li><p>Click Next.</p></li>
<li><p>In the Project Name dialog, enter a name in the Project Name field.</p></li>
<li><p>Click Next.</p></li>
<li><p>In the Project SOA Settings dialog, select Composite with the BPEL Process.</p></li>
<li><p>Click Finish.</p></li>
</ul>
<h3>Files in the BPEL Composite</h3>
<p>The BPEL composite contains the following files &minus;</p>
<ul class="list">
<li><p><b>composite.xml</b> &minus; This file describes the entire composite assembly of services, service components, references, and wires.</p></li>
<li><p><b>.bpel</b> &minus; This file contains the set of activities added to the process.</p></li>
<li><p><b>.componentType</b> &minus; This file describes the services and references for the BPEL process service component.</p></li>
<li><p><b>.wsdl</b> &minus; This file defines the input and output messages for this BPEL process flow, the supported client interface and operations, and other features.</p></li>
</ul>
<img src="/bpel/images/files_in_bpel_composite.jpg" alt="Files in the BPEL Composite" />
<h2>Concepts used in the BPL process</h2>
<p>In this section, we will learn the different concepts involved in the BPL process.</p>
<h3>Orchestration</h3>
<ul class="list">
Usually used in private business processes.
<li><p>A central process (which can be another Web service) takes control of the involved Web services.</p></li>
<li><p>Coordinates the execution of different operations on the web services involved in the operation.</p></li>
<li>The involved Web services do not "know" (and do not need to know) that they are involved in a composition process and that they are taking part in a higher-level business process.</li>
<li><p>Only the central coordinator of the orchestration is aware of this goal, so the orchestration is centralized with explicit definitions of operations and the order of invocation of Web services.</p></li>
</ul>
<img src="/bpel/images/orchestration.jpg" alt="Orchestration" />
<h2>Choreography</h2>
<ul class="list">
<li><p>Does not rely on a central coordinator.</p></li>
<li><p>Each Web service involved in the choreography knows exactly when to execute its operations and with whom to interact.</p></li>
<li><p>Each Web service involved in the choreography knows exactly when to execute its operations and with whom to interact.</p></li>
<li><p>All participants in the choreography need to be aware of the business process, operations to execute, messages to exchange, and the timing of message exchanges.</p></li>
</ul>
<img src="/bpel/images/choreography.jpg" alt="Choreography" />
<h1>BPEL - Activities</h1>
<p>In this chapter, we will learn about the different activities that make up the building blocks The building blocks of a BPEL process service component.</p>
<p>Oracle BPEL Designer includes a set of activities that you drag into a BPEL process service component and double-click an activity to define its attributes and property values.</p>
<h3>Assign Activity</h3>
<p><img class="inline" src="/bpel/images/assign_activity.jpg" alt="Assign Activity" />&nbsp;An assign activity enables to manipulate data, such as copying the contents of one variable to another.</p>
<h3>Invoke Activity</h3>
<p><img class="inline" src="/bpel/images/invoke_activity_logo.jpg" alt="Invoke Activity Logo" />&nbsp;An invoke activity enables you to invoke a service (identified by its partner link) and specify an operation for this service to perform.</p>
<h3>Receive Activity</h3>
<p><img class="inline" src="/bpel/images/receive_activity.jpg" alt="Receive Activity" />&nbsp;&nbsp;A receive activity waits for an asynchronous callback response message from a service.</p>
<p>Let us learn more about the Invoke activity in our subsequent section.</p>
<h2>Invoke Activity</h2>
<p>The invoke activity enables to specify an operation that is to be invoked for the service (identified by its partner link). The operation can be one-way or request-response on a port provided by the service. Variables can be automatically created in an invoke activity. An invoke activity invokes a synchronous service or initiates an asynchronous web service.</p>
<p>The invoke activity opens a port in the process to send and receive data. This port can be further used to submit required data and receive a response. For synchronous callbacks, only one port is needed for both the send and the receive functions.</p>
<img src="/bpel/images/invoke_activity.jpg" alt="Invoke Activity" />
<h1>BPEL - Partner Link in BPEL Process</h1>
<p>Partner Links are defined as communication exchanges between all the parties with which the BPEL Process interacts.</p>
<p>They are the references to the actual implementations, through which the BPEL process interacts with the external world.</p>
<h3>Invoked Partner Links</h3>
<p>These are links to services that are invoked by the BPEL process.</p>
<h3>Client Partner Links</h3>
<p>These are links to services that can invoke a BPEL process.</p>
<h2>Partner Link Properties</h2>
<p>The Partner Link Property Editor allows you to establish partner links for your BPEL processes. With the Partner Link Property Editor, you can specify the following &minus;</p>
<ul class="list">
<li><p><b>Name</b> &minus; Specifies the name of the Invoke element.</p></li>
<li><p><b>WSDL File</b> &minus; Indicates the WSDL file associated with the Partner Link.</p></li>
<li><p><b>Partner Link Type</b> &minus; Indicates the Partner Link type defined in the WSDL.</p></li>
<li><p><b>My Role</b> &minus; Indicates the role of the business process itself.</p></li>
<li><p><b>Partner Pole</b> &minus; Indicates the role of the partner.</p></li>
<li><p><b>Documentation</b> &minus; Accessed on the Properties window.</p></li>
</ul>
<p>Partner Links are defined in the .bpel file.</p>
<p>A BPEL can interact with the services in the following three ways &minus;</p>
<ul class="list">
<li>Services that invoke a BPEL process</li>
<li>Services that are invoked by the BPEL process</li>
<li>Services that act both ways</li>
</ul>
<h1>BPEL - Creating a Partner Link</h1>
<p>In this chapter, we will learn how to create a partner link.</p>
<p>Follow the steps shown below to create a partner link &minus;</p>
<ul class="list">
<li><p>In the SOA Composite Editor, double-click the BPEL process service component.</p></li>
<li><p>Upon clicking the service component, the Oracle BPEL Designer is displayed.</p></li>
<li><p>In the Component Palette, expand BPEL Services.</p></li>
</ul>
<img src="/bpel/images/create_partner_link.jpg" alt="Create a Partner Link" />
<ul class="list">
<li><p>Drag a Partner Link into the appropriate Partner Links swimlane.</p></li>
<li><p>Complete the fields for this dialog as mentioned above in the Partner Link Properties.</p></li>
</ul>
<h1>BPEL - Adapters</h1>
<p>Adapters enable to integrate the BPEL process service component with access to file systems, FTP servers, database tables, database queues, sockets, Java Message Services (JMS), MQ, and Oracle E-Business Suite. This wizard enables to configure the types of adapters shown in below figure for use with the BPEL process service component &minus;</p>
<h3>Adapter Types</h3>
<p>The following image shows the different adapter types &minus;</p>
<img src="/bpel/images/adapter_types.jpg" alt="Adapter Types" />
<h3>Advanced Queuing (AQ)</h3>
<p>For interaction with a queue. AQ provides a flexible mechanism for bidirectional, asynchronous communication between participating applications.</p>
<h3>Oracle Business Activity Monitoring (BAM)</h3>
<p>For publishing data to data objects in an Oracle BAM Server.</p>
<h3>Database</h3>
<p>For interaction with Oracle and non-Oracle databases through JDBC and Oracle Business Intelligence (which is a special data source type).</p>
<h3>FTP and File</h3>
<p>For file exchange (read and write) on local file systems and remote file systems (through use of the file transfer protocol (FTP)).</p>
<h3>Java Messaging Service (JMS)</h3>
<p>For interaction with JMS. The JMS architecture uses a one client interface to many messaging servers architecture.</p>
<h3>Message Queue (MQ)</h3>
<p>For message exchange with WebSphere MQ queuing systems.</p>
<h3>Oracle Applications</h3>
<p>For interaction with Oracle Application's set of integrated business applications.</p>
<h3>Oracle B2B</h3>
<p>For browsing B2B metadata in the metadata service (MDS) repository and selecting document definitions.</p>
<h3>Sockets</h3>
<p>For modeling standard or nonstandard protocols for communication over TCP/IP sockets.</p>
<h2>Adapter Service Name</h2>
<p>The Service Name window prompts to enter a name, when the adapter type is selected from the pallet. For this example, <b>File Adapter</b> was selected. When the wizard completes, a WSDL file by this service name appears in the Application Navigator for the BPEL process service component (for this example, named <b>ReadFile.wsdl</b>). The service name must be unique within the project. This configuration file includes the adapter configuration settings specified with this wizard. Other configuration files (such as header files and files specific to the adapter) are also created. These files are displayed in the Application Navigator.</p>
<img src="/bpel/images/adapter_service_name.jpg" alt="Adapter Service Name" />
<h1>BPEL - Process Monitors</h1>
<p>BPEL process monitors in Oracle BPEL Designer can be configured by selecting Monitor at the top of Oracle BPEL Designer.</p>
<img src="/bpel/images/process_monitors.jpg" alt="Process Monitors" />
<p>At this stage, the Oracle BAM Adapter needs to be configured.</p>
<h1>BPEL - One-Way Messages</h1>
<p>The Client BPEL Process sends a message to Service BPEL Process and the Service BPEL Process is not required to reply as shown in the figure below &minus;</p>
<img src="/bpel/images/one_way_messages.jpg" alt="One-Way Messages" />
<ul class="list">
<li><p>The Client BPEL Process needs a valid partner link and an invoke activity.</p></li>
<li><p>The Service BPEL Process needs a receive activity.</p></li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction. The WSDL file is as shown below.</p></li>
</ul>
<pre class="prettyprint notranslate">
&lt;wsdl:portType name = "BPELProcess"&gt;
   &lt;wsdl:operation name = "process"&gt;
      &lt;wsdl:input message = "client:BPELProcessRequestMessage" /&gt;
      &lt;wsdl:output message = "client:BPELProcessResponseMessage"/&gt;
   &lt;/wsdl:operation&gt;
&lt;/wsdl:portType&gt;
</pre>
<h1>BPEL - Synchronous Interactions</h1>
<p>The Client BPEL Process sends a request to the Service BPEL Process (d1 in the below figure), and receives an immediate reply (d2 in the below figure). For example, a user requests a subscription to an online application form for admission to a college and immediately receives email confirmation that their request has been accepted.</p>
<img src="/bpel/images/synchronous_interactions.jpg" alt="Synchronous Interactions" />
<ul class="list">
<li><p>The Client BPEL Process needs an invoke activity. The port on the client side sends the request and receives the reply.</p></li>
<li><p>The Service BPEL Process needs a receive activity to accept the incoming request, and a reply activity to return either the requested information or an error message (a fault; f1 in the below figure) defined in the WSDL.</p></li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction. The WSDL file is as shown below.</p></li>
</ul>
<p><b>WSDL File</b></p>
<pre class="prettyprint notranslate">
&lt;wsdl:portType name = "BPELProcess"&gt;
   &lt;wsdl:operation name = "process"&gt;
      &lt;wsdl:input message = "client:BPELProcessRequestMessage" /&gt;
      &lt;wsdl:output message = "client:BPELProcessResponseMessage"/&gt;
   &lt;/wsdl:operation&gt;
&lt;/wsdl:portType&gt;
</pre>
<h1>BPEL - Asynchronous Interactions</h1>
<p>The Client BPEL Process sends a request to the Service BPEL Process (d1 in the figure given below), and waits until the service replies (d2 in the figure given below).</p>
<p>For example, a user requests a subscription to an online application form for admission to a college and the request cannot be confirmed unless it is accepted at the admission office.</p>
<img src="/bpel/images/asynchronous_interactions.jpg" alt="Asynchronous Interactions" />
<ul class="list">
<li><p>The Client BPEL Process needs an invoke activity to send the request and a receive activity to receive the reply.</p></li>
<li><p>The Service BPEL Process needs a receive activity to accept the incoming request and an invoke activity to return either the requested information or a fault.</p>
<p><b>Note</b> &minus; The difference between responding from a synchronous and asynchronous BPEL process is that the synchronous service uses a reply activity to respond to the client and an asynchronous service uses an invoke activity.</p>
</li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction. The WSDL file is as shown below.</p></li>
</ul>
<p><b>WSDL File</b></p>
<pre class="prettyprint notranslate">
&lt;wsdl:portType name = "BPELProcess"&gt;
   &lt;wsdl:operation name = "process"&gt;
      &lt;wsdl:input message = "client:BPELProcessRequestMessage"/&gt;
   &lt;/wsdl:operation&gt;
&lt;/wsdl:portType&gt;

&lt;wsdl:portType name = "BPELProcessCallback"&gt;
   &lt;wsdl:operation name = "processResponse"&gt;
      &lt;wsdl:input message = "client:BPELProcessResponseMessage"/&gt;
   &lt;/wsdl:operation&gt;
&lt;/wsdl:portType&gt;
</pre>
<h1>Asynchronous Interactions with a Timeout</h1>
<p>The Client BPEL Process sends a request to the Service BPEL Process (d1 in the below figure), and waits until the service replies or until a certain time limit is reached, whichever comes first. (d2 in the below figure).</p>
<p>For example, a user requests a subscription to an online application form for admission to a college and the request is cancelled if the user does not receive a confirmation reply within a specified amount of time.</p>
<img src="/bpel/images/asynchronous_interactions_with_timeout.jpg" alt="Asynchronous Interactions with a Timeout" />
<p>The Client BPEL Process needs an invoke activity to send the request and a pick activity with two branches - an <b>onMessage</b> branch and an <b>onAlarm</b> branch. If the reply comes after the time limit has expired, the message goes to the dead letter queue.</p>
<p>The Service BPEL Process needs a receive activity to accept the incoming request and an invoke activity to return either the requested information or a fault.</p>
<p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction.</p>
<h1 style="font-size:24px">Asynchronous Interactions with a Notification Timer</h1>
<p>In this chapter, we will learn about asynchronous interactions with a notification timer. Consider the following points related to the asynchronous interactions &minus;</p>
<ul class="list">
<li><p>The Client BPEL Process sends a request to the Service BPEL Process and waits for a reply, although a notification is sent after a timer expires.</p></li>
<li><p>The Client BPEL Process continues to wait for the reply from the Service BPEL Process even after the timer has expired.</p></li>
<li><p>The Client BPEL Process needs a scope activity containing an invoke activity to send the request, and a receive activity to accept the reply. The <b>onAlarm</b> handler of the scope activity has a time limit and instructions on what to do when the timer expires.</p></li>
<li><p>For example, wait 60 seconds, then send a warning indicating that the process is taking longer than expected.</p></li>
<li><p>The Service BPEL Process needs a receive activity to accept the incoming request and an invoke activity to return either the requested information or a fault.</p></li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction.</p></li>
</ul>
<img src="/bpel/images/asynchronous_interactions_timer.jpg" alt="Asynchronous Interactions Timer" />
<h1>BPEL - One Request Multiple Responses</h1>
<p>In this chapter, we will learn about the concept of One Request and Multiple Responses.</p>
<ul class="list">
<li><p>The Client BPEL Process sends a single request to the Service BPEL Process and receives multiple responses in return.</p>
<p>For example, the request can be to order a product online, and the first response can be the estimated delivery time, the second response a payment confirmation, and the third response a notification that the product has shipped. In this example, the number and types of responses are expected.</p>
</li>
<li><p>The Client BPEL Process needs an invoke activity to send the request, and a sequence activity with three receive activities.</p></li>
<li><p>The Service BPEL Process needs a receive activity to accept the message from the client, and a sequence attribute with three invoke activities, one for each reply.</p></li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction.</p></li>
</ul>
<img src="/bpel/images/one_request_multiple_responses.jpg" alt="One Request and Multiple Responses" />
<h1 style="font-size:27px">One Request, One of Two Possible Responses</h1>
<p>In this chapter, we will learn about the concept of one request and one of two possible responses.</p>
<ul class="list">
<li><p>The Client BPEL Process sends a single request to the Service BPEL Process and receives one of two possible responses.</p>
<p>For example, the request can be to order a product online, and the first response can be either an in-stock message, or an out-of-stock message.</p></li>
<li><p>The Client BPEL Process needs the following &minus;</p></li>
<ul class="list">
<li><p>An invoke activity to send the request.</p></li>
<li><p>A pick activity with two branches: one onMessage for the in-stock response and instructions on what to do if an in-stock message is received.</p></li>
<li><p>A second onMessage for the out-of-stock response and instructions on what to do if an out-of-stock message is received.</p></li>
</ul>
<li><p>The Service BPEL Process needs a receive activity to accept the message from the client, and a switch activity with two branches, one with an invoke activity sending the in-stock message if the item is available, and a second branch with an invoke activity sending the out-of-stock message if the item is not available.</p></li>
</ul>
<p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction.</p>
<img src="/bpel/images/two_possible_responses.jpg" alt="Two Possible Responses" />
<h1 style="font-size:21px">One Request, a Mandatory Response, &amp; an Optional Response</h1>
<p>In this chapter, we will understand the concept of one request, a mandatory response, and an optional response.</p>
<ul class="list">
<li><p>The Client BPEL Service sends a single request to the Service BPEL Process and receives one or two responses.</p></li>
<li><p>Here, the request is to order a product online. If the product is delayed, the service sends a message letting the customer know. In any case, the service always sends a notification when the item ships.</p></li>
<li><p>The Client BPEL Service needs a scope activity containing the invoke activity to send the request, and a receive activity to accept the mandatory reply. For the optional message, the <b>onMessage</b> handler of the scope activity is set along with the instructions on what to do if the optional message is received (for example, notify you that the product has been delayed). The Client BPEL Process waits to receive the mandatory reply. If the mandatory reply is received first, the BPEL Process continues without waiting for the optional reply.</p></li>
<li><p>The Service BPEL Process needs a scope activity containing the receive activity and an invoke activity to send the mandatory shipping message, and the scope's <b>onAlarm</b> handler to send the optional delayed message if a timer expires (for example, send the delayed message if the item is not shipped in 24 hours).</p></li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction.</p></li>
</ul>
<img src="/bpel/images/optional_response.jpg" alt="Optional Response" />
<h1>BPEL - Partial Processing</h1>
<p>Now, we will learn the concept of partial processing in BPEL.</p>
<ul class="list">
<li><p>The Client BPEL Process sends a request to the Service BPEL Process and receives an immediate response, but processing continues on the service side.</p></li>
<li><p>This pattern can also include multiple shot callbacks, followed by longer-term processing.</p></li>
<li><p>For example, the client sends a request to purchase a vacation package, and the service sends an immediate reply confirming the purchase, then continues to book the hotel, the flight, the rental car, and so on.</p></li>
<li><p>The Client BPEL Process needs an invoke activity for each request and a receive activity for each reply for asynchronous transactions, or just an invoke activity for each synchronous transaction.</p></li>
<li><p>The Service BPEL Process needs a receive activity for each request from the client, and an invoke activity for each response. Once the responses are finished, the Service BPEL Process as the service can continue with its processing, using the information gathered in the transaction to perform the necessary tasks without any further input from the client.</p></li>
<li><p>As with all partner activities, the Web Services Description Language (WSDL) file defines the interaction.</p></li>
</ul>
<img src="/bpel/images/partial_processing.jpg" alt="Partial Processing" />
<h1>BPEL - Multiple Application Interactions</h1>
<p>We will learn about the multiple application interactions with BPEL in this chapter.</p>
<ul class="list">
<li><p>When there are more than two applications involved in a transaction.</p></li>
<li><p>This A-to-B-to-C-to-A transaction pattern can handle many transactions at the same time. Therefore, a mechanism is required for keeping track of which message goes where.</p></li>
<li><p>This can be handled using WS-Addressing or correlation sets.</p></li>
</ul>
<img src="/bpel/images/multiple_application_interactions.jpg" alt="Multiple Application Interactions" />
<h1>BPEL - Invoking a Synchronous Web Service</h1>
<p>We have discussed in one of the previous chapters that Synchronous Web Service is one, which provides an immediate response to an invocation.</p>
<p>In the screenshot shown below, we have created a Synchronous BPEL Process which has a receive activity to accept the request from the user. The reply activity simultaneously sends the response back.</p>
<img src="/bpel/images/invoking_synchronous_web_service.jpg" alt="Invoking a Synchronous Web Service" />
<h1>Invoking an Asynchronous Web Service</h1>
<p>As discussed before Asynchronous Web Service is one which sends a request to other web service and waits for the response.</p>
<p>In the screenshot shown below, we have created the Asynchronous BPEL Process which has a receive activity to accept the request from the user. The assign activity further assigns values to the different elements in the request.</p>
<p>Next, the invoke activity invokes the HelloWorld Application which sends the response simultaneously and that is captured in receive activity.</p>
<p>Further, we have the callback activity which finally generates output and sends response asynchronously.</p>
<p>If you double-click the <b>receiveInput</b> or <b>callbackClient</b>, you will see each of them has only one variable.</p>
<pre class="result notraslate">
receiveInput &rarr; inputVariable
callbackClient &rarr; outputVariable 
</pre>
<p></p>
<img src="/bpel/images/invoking_asynchronous_web_service.jpg" alt="Invoking an Asynchronous Web Service" />
<h1>BPEL - Using Parallel Flow</h1>
<p>In this chapter, we will understand how parallel flow works in BPEL.</p>
<h2>What is Flow Activity?</h2>
<p>A flow activity typically contains many sequence activities, and each sequence is performed in parallel. A flow activity can also contain other activities.</p>
<p>For example, two asynchronous callbacks execute in parallel, so that one callback does not have to wait for the other to complete first. Each response is stored in a different global variable.</p>
<p>In the flow activity, the BPEL code determines the number of parallel branches. However, often the number of branches required is different depending on the available information.</p>
<img src="/bpel/images/flow_activity.jpg" alt="Flow Activity" />
<h2>What is FlowN Activity?</h2>
<p>The flowN activity creates multiple flows equal to the value of N, which is defined at the run time based on the data available and logic within the process. There is an Index variable increment each time a new branch is created, until the index variable reaches the value of N.</p>
<p>The flowN activity performs activities on an arbitrary number of data elements. As the number of elements changes, the BPEL process adjusts accordingly.</p>
<p>The branches created by flowN perform the same activities, but use different data. Each branch uses the index variable to look up input variables. The index variable can be used in the XPath expression to acquire the data specific for that branch.</p>
<img src="/bpel/images/flown_activity.jpg" alt="FlowN Activity" />
<h1>BPEL - Using Conditional Branching</h1>
<p>BPEL applies logic to make choices through conditional branching. The two different actions based on conditional branching are shown below &minus;</p>
<h2>Switch Activity</h2>
<p>In this method, you set up two or more branches, with each branch in the form of an XPath expression. If the expression is true, then the branch is executed. If the expression is false, then the BPEL process moves to the next branch condition, until it either finds a valid branch condition, encounters an otherwise branch, or runs out of branches. If more than one branch condition is true, then BPEL executes the first true branch.</p>
<h2>While Activity</h2>
<p>You can use a while activity to create a while loop to select between two actions.</p>
<img src="/bpel/images/conditional_branching.jpg" alt="Conditional Branching" />
<h1>BPEL - Using Fault Handling</h1>
<p>To understand how to use fault handling, we need to learn the basic architecture of a Service Composite in Oracle SOA Suite.</p>
<ul class="list">
<li><p><b>Service components</b> &minus; BPEL Processes, Business Rule, Human Task, Mediator. These are used to construct a SOA composite application.</p></li>
<li><p><b>Binding components</b> &minus; Establish connection between a SOA composite and external world.</p></li>
<li><p><b>Services</b> &minus; Provides an entry point to SOA composite application.</p></li>
<li><p><b>Binding</b> &minus; Defines the protocols that communicate with the service like SOAP/HTTP, JCA adapter, etc.</p></li>
<li><p><b>WSDL</b> &minus; Defines the service definition of a web service.</p></li>
<li><p><b>References</b> &minus; Enables a SOA composite application to send messages to external services</p></li>
<li><p><b>Wires</b> &minus; Enables connection between service components.</p></li>
</ul>
<h2>Types of Faults</h2>
<p>Let us now see the different types of faults.</p>
<h3>Business faults</h3>
<p>Occurs when application executes THROW activity or an INVOKE receives fault as response. Fault name is specified by the BPEL process service component. The fault handler using Fault name and Fault variable catches this fault.</p>
<h3>Runtime faults</h3>
<p>This is thrown by the system. These faults are associated with <b>RunTimeFaultMessage</b> and are included in</p>
<p><b>http://schemas.oracle.com/bpel/extensionnamespace</b>.</p>
<h2>Ways of Fault Handling</h2>
<p>In this section, we will learn about the different ways of fault handling.</p>
<h3>Throw Activity</h3>
<p>Throw activity explicitly throws the fault. The catch block catches this fault and the corresponding actions get executed thereby.</p>
<ul class="list">
<li><p>Using throw activity, you can throw business faults &amp; within the created scope, you can catch this fault and redirect to the caller (consumer) to take action.</p></li>
<li><p>Instead of the above approach, you throw the same fault caught in catch activity of the created scope. In the main scope, you can catch this fault using the catchall activity.</p></li>
</ul>
<h3>Error Handler Framework (EHF)</h3>
<p>The 2 main files used in EHF are &minus;</p>
<ul class="list">
<li>Fault-Policy.xml</li>
<li>Fault-Bindings.xml</li>
</ul>
<p>Whenever the BPEL process throws an error, the EHF will check whether the error exists in Fault-Bindings.xml files. If so, the action in the Fault-Policy.xml file will be taken. If the action is not found, the fault will the thrown and it will be handled in the catch block.</p>
<p>Fault management framework (Fault-Policy.xml and Fault-Bindings.xml) is kept inside a SOA Composite.</p>
<p>Fault-handlers like catch and catchall are inside a BPEL to catch all faults, but <b>fault policies will only be executed when an invoke activity fails.</b></p>
<h1>BPEL - Resubmitting a Faulted Process</h1>
<p>In this chapter, we will see different scenarios related to the resubmitting of a faulted process.</p>
<h2>Scenario A</h2>
<p>The BPEL code uses a fault-policy and a fault is handled using the “ora-human-intervention” activity. The fault is then marked as Recoverable and the instance state is set to “Running”.</p>
<h2>Scenario B</h2>
<p>The BPEL code uses a fault-policy and a fault is caught and re-thrown using the “ora-rethrow-fault” action. The fault is then marked as Recoverable and the instance state is set to “Faulted”; provided the fault is a recoverable one (like URL was not available).</p>
<h1>BPEL - Incorporating Java &amp; Java EE Code</h1>
<p>There are several methods for incorporating Java and Java EE code in BPEL processes. Following are a few important methods &minus;</p>
<ul class="list">
<li><p>Wrap as a Simple Object Access Protocol (SOAP) service</p></li>
<li><p>Embed Java code snippets into a BPEL process with the bpelx &minus; exec tag</p></li>
<li><p>Use an XML facade to simplify DOM manipulation</p></li>
<li><p>Use bpelx &minus; exec built-in methods</p></li>
<li><p>Use Java code wrapped in a service interface</p></li>
</ul>
<p>The Java Embedding activity allows us to add activities in a BPEL process. We can write a Java snippet using standard JDK libraries, the BPEL APIs, custom and 3rd party Java Classes included in JAR files in deployed SCA composites (in SCA-INF/lib directory) and Java Classes and libraries available on the Classpath for the SOA Suite run time.</p>
<p>Java Embedding means functionality hidden inside, in a not very decoupled way. The Java code is hard to maintain. By embedding Java in BPEL (XML driven), we start mixing technology, that require different skills as well as expensive XML to Java Object marshalling and unmarshalling.</p>
<p>The best use cases for Java Embedding seems to be for advanced logging/tracing or for special validations/transformations. However, not to replace built in capabilities of the BPEL engine as well as the other components in SOA Suite 11g and the adapters that come with it.</p>
<h1>BPEL - Manipulating XML Data</h1>
<p>XPath is mainly used to manipulate XMLs in the BPEL process. There are some valuable Xpath functions that can be used for manipulating XML. Let us see the functions below.</p>
<h2>bpel:getVaribleData(varName, partName, xpathStr)</h2>
<p>This can be used to extract a set of elements from a variable, using a XPath expression.</p>
<pre class="prettyprint notranslate">
&lt;bpel:copy&gt;
   &lt;bpel:from&gt;
   &lt;![CDATA[count(bpel:getVariableData(‘$Variable','$partName')/ns:return)]]&gt;
   &lt;/bpel:from&gt;
      &lt;bpel:to variable = "itemNumber"&gt;
   &lt;/bpel:to&gt;
&lt;/bpel:copy&gt;
</pre>
<h2>bpel:getLinkStatus()</h2>
This can be used to evaluate and return a Boolean whether a particular link is active or inactive.
<h2>:getVariableProperty(string, string)</h2>
This is helpful in extracting properties in Variables.
<h2>:doXSLTTransform()</h2>
This performs the XSLT transformations.
<h2>string ()</h2>
This can be used to extract text content out of elements rather using /text ().
<h2>string-length()</h2>
This function is used to calculate the length of the string. But the != operator seems not to work with the output from this function. So you can use &gt; or &lt; rather using ! = .
<h2>Boolean Values</h2>
<p>You can assign boolean values with the XPath boolean function.</p>
<pre class="prettyprint notranslate">
&lt;assign&gt;
   &lt;!-- copy from boolean expression function to the variable --&gt;
   &lt;copy&gt;
      &lt;from expression = "true()"/&gt;
      &lt;to variable = "output" part = "payload" query="/result/approved"/&gt;
   &lt;/copy&gt;
&lt;/assign&gt;
</pre>
<h2>Assigning a Date or Time</h2>
<p>You can assign the current value of a date or time field by using the Oracle BPEL XPath function getCurrentDate, getCurrentTime, or getCurrentDateTime, respectively.</p>
<pre class="prettyprint notranslate">
&lt;!-- execute the XPath extension function getCurrentDate() --&gt;
&lt;assign&gt;
   &lt;copy&gt;
      &lt;from expression = "xpath20:getCurrentDate()"/&gt;
      &lt;to variable = "output" part = "payload"
      query = "/invoice/invoiceDate"/&gt;
   &lt;/copy&gt;
&lt;/assign&gt;
</pre>
<h2>Concatenating Strings</h2>
<p>Rather than copying the value of one string variable (or variable part or field) to another, you can first perform string manipulation, such as concatenating several strings.</p>
<pre class="prettyprint notranslate">
&lt;assign&gt;
   &lt;!-- copy from XPath expression to the variable --&gt;
   &lt;copy&gt;
      &lt;from expression = "concat('Hello ',
      bpws:getVariableData('input', 'payload', '/p:name'))"/&gt;
      &lt;to variable = "output" part = "payload" query = "/p:result/p:message"/&gt;
   &lt;/copy&gt;
&lt;/assign&gt;
</pre>
<h2>Assigning String Literals</h2>
<p>You can assign string literals to a variable in BPEL.</p>
<pre class="prettyprint notranslate">
&lt;assign&gt;
   &lt;!-- copy from string expression to the variable --&gt;
   &lt;copy&gt;
      &lt;from expression = "'GE'"/&gt;
      &lt;to variable = "output" part = "payload" query = "/p:result/p:symbol"/&gt;
   &lt;/copy&gt;
&lt;/assign&gt;
</pre>
<h2>Assigning Numeric Values</h2>
<p>You can assign numeric values in XPath expressions.</p>
<pre class="prettyprint notranslate">
&lt;assign&gt;
   &lt;!-- copy from integer expression to the variable --&gt;
   &lt;copy&gt;
      &lt;from expression = "100"/&gt;
      &lt;to variable = "output" part = "payload" query = "/p:result/p:quantity"/&gt;
   &lt;/copy&gt;
&lt;/assign&gt;
</pre>
<p><b>Note</b> &minus; A few XSLT functions were used to transform an XML document.</p>
<h1 style="font-size:27px">Using Correlation Sets &amp; Message Aggregation</h1>
<p>BPEL correlation matches inbound messages with a specific process instance. When you need to associate specific data to a specific instance of a business process, you use correlation.</p>
<p>For example, while creating a process that verifies an account number and checks the account’s credit limit. When verified, the process makes a call to another system to check inventory and, if the item is in stock, generates a purchase order. How does the purchase order know which account is to be debited? The answer to this question is correlation.</p>
<h2>Correlation Sets</h2>
<p>Correlation sets are used to uniquely identify process instances. You provide each correlation set with a unique name and then define it by one or more properties. Each property has a name and a type (for example, string or integer).</p>
<h2>Property Alias</h2>
<p>The property alias for each property in the correlation set needs to be defined. A property alias is a mapping that binds the property with the input or output values.</p>
<h2>Important Points</h2>
<p>Consider the following important points related to the <b>Correlation Sets and Message Aggregation</b> &minus;</p>
<ul class="list">
<li><p>A process that contains more than one receive or pick activity must have a correlation set.</p></li>
<li><p>Correlation sets are initialized with values from process inbound or outbound messages.</p></li>
<li><p>If you have groups of messages that are associated together with one specific process, you can set up one or more correlation sets to handle.</p></li>
</ul>
<h1>Using Events &amp; Timeouts in BPEL Processes</h1>
<p>Asynchronous web services usually take a long time to return a response and as such, a BPEL process service component must be able to time out, or give up waiting, and continue with the rest of the flow after a certain amount of time. You can use the pick activity to configure a BPEL flow either to wait over a specified amount of time or to continue performing its duties. To set an expiration period for the time, you can use the wait activity. To manage message, events can be used particularly when the business process is waiting for callbacks from partner Web services.</p>
<h2>Events</h2>
<p>BPEL supports two types of events &minus;</p>
<h3>Message Events</h3>
<p>These events are triggered by incoming messages through operation invocation on port types.</p>
<h3>Alarm Events</h3>
<p>These events are time-related and are triggered either after a certain duration or at a specific time.</p>
<ul class="list">
<li><p>Often, however, it is more useful to wait for more than one message, of which only one will occur.</p></li>
<li><p>Alarm events are useful when you want the process to wait for a callback for a certain period of time, such as 15 minutes.</p></li>
<ul class="list">
<li><p>If no callback is received, the process flow continues as designed.</p></li>
<li><p>Useful in loosely coupled service-oriented architectures, where you cannot rely on Web services being available all the time.</p></li>
</ul>
</ul>
<h2>Pick Activity</h2>
<p>The pick activity has 2 branches &minus;</p>
<ul class="list">
<li><p><b>onMessage</b> &minus; the code on this branch is equal to the code for receiving a response before a timeout was added.</p></li>
<li><p><b>onAlarm</b> &minus; this condition has code for a timeout of one minute.</p></li>
</ul>
<h2>Wait Activity</h2>
<p>The wait activity allows a process to wait for a given time period or until a time limit has been reached. Exactly one of the expiration criteria must be specified.</p>
<h1>BPEL - Using the Notification Service</h1>
<p>The BPEL process can be made use of for notification service. The process can be designed to send the following &minus;</p>
<ul class="list">
<li>email</li>
<li>voice message</li>
<li>instant messaging (IM), or</li>
<li>short message service (SMS) notifications</li>
</ul>
<p>For the services mentioned above, you can configure the channel for the incoming and outgoing message.</p>
<h1>Using Oracle BPEL Process Manager Sensors</h1>
<p>Composite sensors within a SOA application provides the ability to define trackable fields on messages and enables you to find a specific composite instance by searching for a field or fields within a message. For example, a sensor could be defined for an order number within a message, thus allowing us to find the instance where the order number in question is found.</p>
<p>Composite sensors can be defined within a SOA application in several components &minus;</p>
<ul class="list">
<li><p>Service component (exposed service)</p></li>
<li><p>Reference component (external reference)</p></li>
<li><p>Mediator or BPEL component that have subscribed to a business event (publishing an event cannot have a sensor)</p></li>
</ul>
<h2>Different Ways to Define Composite Sensor</h2>
<p>There are different ways to define a composite sensor &minus;</p>
<ul class="list">
<li>By specifying an existing variable as the sensor.</li>
<li>By an expression with the help of the expression builder.</li>
<li>By using properties (e.g. message header properties).</li>
</ul>
<h2>Sensors in Enterprise Manager</h2>
<p>Defining a sensor allows for a quick search for data within a composite instance in the EM Console.</p>
<p>In the EM Console dashboard, a user can search for instances by sensor name and value.</p>
<img src="/bpel/images/oracle_process_manager_sensors.jpg" alt="Oracle Process Manager Sensors" />
<p>In the “Flow Instances” tab, you can select sensors from the dropdowns and can use wildcard-like values for the sensor value.</p>
<img src="/bpel/images/flow_instances_tab.jpg" alt="Flow Instances tab" />
<h1>Difference between BPEL 1.1 &amp; BPEL 2.0</h1>
<p>New Activities have been added in 2.0 which have replaced the ones in 1.1.</p>
<h2>&lt;forEach&gt;</h2>
<p>This activity helps repeat the set of activities. The activity replaces the FlowN activity in BPEL 1.1 version.</p>
<h2>&lt;repeatUntil&gt;</h2>
<p>This activity comes of use if the body of an activity must be performed at least once. The XPath expression condition in the repeatUntil activity is evaluated after the body of the activity completes.</p>
<h2>&lt;if&gt;-&lt;elseif&gt;-&lt;else&gt;</h2>
<p>This activity replaces the switch activity in BPEL 2.0. The activity enables you to define conditional behavior for specific activities to decide between two or more branches. Only one activity is selected for execution from a set of branches.</p>
<h2>&lt;compensateScope&gt;</h2>
<p>This activity helps compensate the specified child scope.</p>
<h2>&lt;rethrow&gt;</h2>
<p>This activity has been added to fault handlers. It enables you to rethrow a fault originally captured by the immediately enclosing fault handler.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/bpel/bpel_difference_between_bpel_1.1_and_2.0.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/bpel/bpel_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
