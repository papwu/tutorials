<!DOCTYPE html>
<html lang="en-US">
<head>
<title>SAS - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="SAS - Quick Guide - SAS stands for Statistical Analysis Software. It was created in the year 1960 by the SAS Institute. From 1st January 1960, SAS was used for data management, bus"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/sas/sas_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#017DC3;
}
a.demo {
    background:#017DC3;
}
li.heading {
    background:#017DC3;
}
.course-box{background:#017DC3}
.home-intro-sub p{color:#017DC3}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/sas/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/sas/images/sas-mini-logo.jpg" alt="SAS Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">SAS Tutorial</li>
<li><a href="/sas/index.htm">SAS - Home</a></li>
<li><a href="/sas/sas_overview.htm">SAS - Overview</a></li>
<li><a href="/sas/sas_environment.htm">SAS - Environment</a></li>
<li><a href="/sas/sas_user_interface.htm">SAS - User Interface</a></li>
<li><a href="/sas/sas_program_structure.htm">SAS - Program Structure</a></li>
<li><a href="/sas/sas_basic_syntax.htm">SAS - Basic Syntax</a></li>
<li><a href="/sas/sas_data_sets.htm">SAS - Data Sets</a></li>
<li><a href="/sas/sas_variables.htm">SAS - Variables</a></li>
<li><a href="/sas/sas_strings.htm">SAS - Strings</a></li>
<li><a href="/sas/sas_arrays.htm">SAS - Arrays</a></li>
<li><a href="/sas/sas_numeric_formats.htm">SAS - Numeric Formats</a></li>
<li><a href="/sas/sas_operators.htm">SAS - Operators</a></li>
<li><a href="/sas/sas_loops.htm">SAS - Loops</a></li>
<li><a href="/sas/sas_decision_making.htm">SAS - Decision Making</a></li>
<li><a href="/sas/sas_functions.htm">SAS - Functions</a></li>
<li><a href="/sas/sas_input_methods.htm">SAS - Input Methods</a></li>
<li><a href="/sas/sas_macros.htm">SAS - Macros</a></li>
<li><a href="/sas/sas_dates_times.htm">SAS - Dates &amp; Times</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">SAS Data Set Operations</li>
<li><a href="/sas/sas_read_raw_data.htm">SAS - Read Raw Data</a></li>
<li><a href="/sas/sas_write_data_sets.htm">SAS - Write Data Sets</a></li>
<li><a href="/sas/sas_concatenate_data_sets.htm">SAS - Concatenate Data Sets</a></li>
<li><a href="/sas/sas_merging_data_sets.htm">SAS - Merging Data Sets</a></li>
<li><a href="/sas/sas_subsetting_data_sets.htm">SAS - Subsetting Data Sets</a></li>
<li><a href="/sas/sas_sort_data_sets.htm">SAS - Sort Data Sets</a></li>
<li><a href="/sas/sas_format_data_sets.htm">SAS - Format Data Sets</a></li>
<li><a href="/sas/sas_sql.htm">SAS - SQL</a></li>
<li><a href="/sas/sas_output_delivery_system.htm">SAS - Output Delivery System</a></li>
<li><a href="/sas/sas_simulations.htm">SAS - Simulations</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">SAS Data Representation</li>
<li><a href="/sas/sas_histograms.htm">SAS - Histograms</a></li>
<li><a href="/sas/sas_bar_charts.htm">SAS - Bar Charts</a></li>
<li><a href="/sas/sas_pie_charts.htm">SAS - Pie Charts</a></li>
<li><a href="/sas/sas_scatterplots.htm">SAS - Scatterplots</a></li>
<li><a href="/sas/sas_boxplots.htm">SAS - Boxplots</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">SAS Basic Statistical Procedure</li>
<li><a href="/sas/sas_arithmetic_mean.htm">SAS - Arithmetic Mean</a></li>
<li><a href="/sas/sas_standard_deviation.htm">SAS - Standard Deviation</a></li>
<li><a href="/sas/sas_frequency_distributions.htm">SAS - Frequency Distributions</a></li>
<li><a href="/sas/sas_crosstabulations.htm">SAS - Cross Tabulations</a></li>
<li><a href="/sas/sas_ttests.htm">SAS - T Tests</a></li>
<li><a href="/sas/sas_correlation_analysis.htm">SAS - Correlation Analysis</a></li>
<li><a href="/sas/sas_linear_regression.htm">SAS - Linear Regression</a></li>
<li><a href="/sas/sas_bland_altman_analysis.htm">SAS - Bland-Altman Analysis</a></li>
<li><a href="/sas/sas_chi_square.htm">SAS - Chi-Square</a></li>
<li><a href="/sas/sas_fishers_exact_tests.htm">SAS - Fishers Exact Tests</a></li>
<li><a href="/sas/sas_repeated_measure_analysis.htm">SAS - Repeated Measure Analysis</a></li>
<li><a href="/sas/sas_one_way_anova.htm">SAS - One-Way Anova</a></li>
<li><a href="/sas/sas_hypothesis_testing.htm">SAS - Hypothesis Testing</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">SAS Useful Resources</li>
<li><a href="/sas/sas_quick_guide.htm">SAS - Quick Guide</a></li>
<li><a href="/sas/sas_useful_resources.htm">SAS - Useful Resources</a></li>
<li><a href="/sas/sas_questions_and_answers.htm">SAS - Questions and Answers</a></li>
<li><a href="/sas/sas_discussion.htm">SAS - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>SAS - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/sas/sas_hypothesis_testing.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/sas/sas_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>SAS - Overview</h1>
<p><b>SAS</b> stands for <b>Statistical Analysis Software</b>. It was created in the year 1960 by the SAS Institute. From 1st January 1960, SAS was used for data management, business intelligence, Predictive Analysis, Descriptive and Prescriptive Analysis etc. Since then, many new statistical procedures and components were introduced in the software.</p>
<p>With the introduction of JMP (Jump) for statistics SAS took advantage of the <b>Graphical user Interface</b> which was introduced by the Macintosh. Jump is basically used for the applications like Six Sigma, designs, quality control and engineering and scientific analysis.</p>
<p>SAS is platform independent which means you can run SAS on any operating system either Linux or Windows. SAS is driven by SAS programmers who use several sequences of operations on the SAS datasets to make proper reports for data analysis.</p>
<p>Over the years SAS has added numerous solutions to its product portfolio. It has solution for Data Governance, Data Quality, Big Data Analytics, Text Mining, Fraud management, Health science etc. We can safely assume SAS has a solution for every business domain.</p>
<p>To have a glance at the list of products available you can visit <a target="_blank" rel="nofollow" href="https://www.sas.com/en_in/software/all-products.html">SAS Components</a></p>
<h2>Why we use SAS</h2>
<p>SAS is basically worked on large datasets. With the help of SAS software you can perform various operations on the data like &minus;</p>
<ul class="list">
<li>Data Management</li>
<li>Statistical Analysis</li>
<li>Report formation with perfect graphics</li>
<li>Business Planning</li>
<li>Operations Research and project Management</li>
<li>Quality Improvement</li> 
<li>Application Development</li>
<li>Data extraction</li>
<li>Data transformation</li>
<li> Data updation and modification</li>
</ul>
<p>If we talk about the components of SAS then more than 200 components are available in SAS.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">SAS Component &amp; their Usage</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Base SAS</b></p>
<p>It is a core component which contains data management facility and a programming language for data analysis. It is also the most widely used.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>SAS/GRAPH</b></p>
<p>Create graphs, presentations for better understanding and showcasing the result in a proper format.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>SAS/STAT</b></p>
<p>Perform Statistical analysis with the variance analysis, regression, multivariate analysis, survival analysis, and psychometric analysis, mixed model analysis.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>SAS/OR</b></p>
<p>Operations research.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>SAS/ETS</b></p>
<p>Econometrics and Time Series Analysis.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>SAS/IML</b></p>
<p>CInteractive matrix language.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>SAS/AF</b></p>
<p>Applications facility.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>SAS/QC</b></p>
<p>Quality control.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>SAS/INSIGHT</b></p>
<p>Data mining.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>SAS/PH</b></p>
<p>Clinical trial analysis.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>SAS/Enterprise Miner</b></p>
<p>Data mining.</p></td>
</tr>
</table>
<h2>Types of SAS Software</h2>
<ul class="list">
<li>Windows or PC SAS</li>
<li>SAS EG (Enterprise Guide)</li>
<li>SAS EM (Enterprise Miner i.e. for Predictive Analysis)</li>
<li>SAS Means</li>
<li>SAS Stats</li>
</ul>
<p>Mostly we use Window SAS in organisation as well as in training institute. Some of the organisations use Linux but there is no graphical user interface so you have to write code for every query. But in window SAS there are a lot of utilities available which helps the programmers very much and it also reduces the time of writing the codes as well.</p>
<p>A SaS Window have 5 parts.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">SAS Window &amp; their Usage</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Log Window</b></p>
<p>A log window is like an execution window where we can check the execution of the SAS program. In this window we can check the errors also. It is very important to check every time the log window after running the program. So that we can have proper understanding about the execution of our program.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Editor Window</b><p>
<p>Editor Window is that part of SAS where we write all the codes. It is like a notepad.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Output Window</b></p>
<p>Output window is the result window where we can see the output of our program.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Result Window</b></p>
<p>It is like an index to all the outputs. All the programs that we have run in one session of the SAS are listed there and you can open the output by clicking on the output result. But these are mentioned only in one session of the SAS. If we close the software and then open it then the Result Window will be empty.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Explore Window</b></p>
<p>Here all the libraries listed. You can also browse your system SAS supported files from here.</p></td>
</tr>
</table>
<h2>Libraries in SAS </h2>
<p>Libraries are like storage in SAS. You can create a library and save all the similar programs in that library. SAS provides you the facility to create multiple libraries. A SAS library is only 8 characters long.</p>
<p> There are two types of libraries are available in SAS &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">SAS Window &amp; their Usage</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Temporary or Work Library</b></p>
<p>This is the by default library of SAS. All the programs that we create are stored in this work library if we do not assign any other library to them. You can check this work library in the Explore Window. If you create a SAS program and have not assign any permanent library to it then if you end the session after that again you start the software then this program will not be in the work library. Because it will only be there in Work library as long as the session goes ones.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Permanent Library</b></p>
<p>These are the permanent libraries of SAS. We can create a new SAS library by using SAS utilities or by writing the codes in the editor window. These libraries are named as permanent because if we create a program in SAS and save it in these permanent libraries then these will be available as long as we want them.</p></td>
</tr>
</table>
<h1>SAS - Environment</h1>
<p>SAS Institute Inc. has released a free <b>SAS University Edition</b> which is good enough for learning SAS programming. It provides all the features that you need to learn in BASE SAS programming which in turn enables you to learn any other SAS component.</P>
<p>The process of downloading and installing SAS University Edition is very straight forward. It is available as a virtual machine which needs to run on a virtual environment. You need to have virtualization software already installed in your PC before you can run the SAS software. In this tutorial we will be using <b>VMware</b>. Below are the details of the steps to download, setup the SAS environment and verify the installation.</p>
<h2>Download SAS University Edition</h2>
<p><b>SAS University Edition</b> is available for download at the URL <a href="https://www.sas.com/en_us/software/university-edition/download-software.html" target="_blank" rel="nofollow">SAS University Edition</a>. Please scroll down to read the system requirements before you begin the download. The following screen appears on visiting this URL.</p>
<img src="/sas/images/environment_download_link.JPG" alt="SAS_environment_download_link" />
<h3>Setup virtualization software</h3>
<p>Scroll down on the same page to locate the installation stpe-1. This step provides the links to get the virtualization software that suits you. In case you already have  any one of these softwares installed in your system, you can skip this step.</p>
<img src="/sas/images/environment2_vm_options.JPG" alt="SAS_environment2_vm_options" />
<h3>Quick start virtualization software</h3>
<p>In case you are completely new to virtualization environment, you can familiarize yourself with it by going through the following guides and videos available as step-2. Again you can skip this step in case you are already familiar.</p>
<img src="/sas/images/environment3_vm_guides_videos.JPG" alt="SAS_environment3_vm_guides_videos" />
<h3>Download the Zip file</h3>
<p>In step-3 you can choose the appropriate version of the SAS University Edition compatible with the virtualization environment you have. It downloads as a zip file with name similar to unvbasicvapp__9411005__vmx__en__sp0__1.zip</p>
<img src="/sas/images/environment4_vm_download.JPG" alt="SAS_environment4_vm_download" />
<h3>Unzip the zip file</h3>
<p>The zip file above needs to be unzipped and stored in an appropriate directory. In our case we have chosen the VMware zip file which shows the following files after unzipping.</p>
<img src="/sas/images/environment5_file_unzip.JPG" alt="SAS_environment5_file_unzip" />
<h3>Loading the virtual machine</h3>
<p>Start the VMware player (or workstation) and open the file which ends with an extension .vmx. The below screen appears. Please notice the basic settings like memory and hard disk space allocated to the vm.</p>
<img src="/sas/images/environment6_vm_machine.JPG" alt="SAS_environment6_vm_machine" />
<h3>Power on the virtual machine</h3>
<p>Click the <b>Power on this virtual machine</b> alongside the green arrow mark to start the virtual machine. The following screen appears.</p>
<img src="/sas/images/environment7_vm_machine_poweron.JPG" alt="SAS_environment7_vm_machine_poweron" />
<p>The below screen appears when the SAS vm is in the state of loading after which the running vm gives a prompt to go to a URL location which will open the SAS environment.</p>
<img src="/sas/images/environment8_vm_running.JPG" alt="SAS_environment8_vm_running" />
<h3>Starting SAS studio</h3>
<p>Open a new browser tab and load the above URL (which differs from one PC to another). The below screen appears indicating the SAS environment is ready.</p>
<img src="/sas/images/environment9_vm_start_studio.JPG" alt="SAS_environment9_vm_start_studio" />
<h2>The SAS Environment</h2>
<p>On clicking the <b>Start SAS Studio</b> we get the SAS environment which by default opens in the visual programmer mode as shown below.</p>
<img src="/sas/images/environment10_vm_visual_programming.JPG" alt="SAS_environment10_vm_visual_programming" />
<p>We can also change it to SAS programmer mode by clicking on the drop down.</p>
<img src="/sas/images/environment11_vm_SAS_Programmer.JPG" alt="SAS_environment11_vm_SAS_Programmer" />
<p>Now we are ready to write SAS Programs.</p>
<h1>SAS - User Interface</h1>
<p>SAS Programs are created using a user interface known as <b>SAS Studio</b>.</P>
<p>Below is a description of various windows and their usage.</p>
<h2>SAS Main Window</h2>
<p>This is the window you see on entering the SAS environment. In the left is the <b>Navigation Pane</b>used to navigate various programming features. In the right is the <b>Work Area</b> which is used for writing the code and executing it.</p>
<img src="/sas/images/ui_main_screen1.JPG" alt="ui_main_screen1.JPG" />
<h2>Code Autocomplete</h2>
<p>This is a very powerful feature which helps getting the correct syntax of SAS keywords as well as provides link to the documentation for that keyword.</p>
<img src="/sas/images/ui_program_code2.JPG" alt="ui_program_code2.JPG" />
<h2>Program Execution</h2>
<p>The execution of code is done by pressing the run icon, which is the first icon from left or the F3 button.</p>
<img src="/sas/images/ui_program_run_4.JPG" alt="ui_program_run_4.JPG" />
<h2>Program Log</h2>
<p>The log of the executed code is available under the <b>Log</b> tab. It describes the errors, warnings or notes about the program’s execution. This is the window where you get all the clues to troubleshoot your code.</p>
<img src="/sas/images/ui_program_log_5.JPG" alt="ui_program_log_5.JPG" />
<h2>Program Result</h2>
<p>The result of the code execution is seen in the RESULTS tab. By default they are formatted as html tables.</p>
<img src="/sas/images/ui_program_result_6.JPG" alt="ui_program_result_6.JPG" />
<h2>Program Tabs</h2>
<p>The Navigation Area contains features to create and manage programs. It also provides the pre-built functionalities to be used with your program.</p>
<h3>Server Files and Folders</h3>
<p>Under this tab we can create additional programs, import data to be analyzed and query the existing data. It can also be used to create folder shortcuts.</p>
<img src="/sas/images/ui_program_multiple_7.JPG" alt="ui_program_multiple_7.JPG" />
<h3>Tasks</h3>
<p>The Tasks tab provides features to use in-built SAS programs by supplying only the input variables. For example under the statistics folder you can find a SAS program to do linear regression by only supplying the SAS data set name and variable names.</p>
<img src="/sas/images/ui_program_tasks_8.JPG" alt="ui_program_tasks_8.JPG" />
<h3>Snippets</h3>
<p>The snippets tab provides features to write SAS Macro and generate files from the existing data set</p>
<img src="/sas/images/ui_program_snippets_9.JPG" alt="ui_program_snippets_9.JPG" />
<h3>Program Libraries</h3>
<p>SAS stores the datasets in SAS libraries. The temporary library is available only for a single session and it is named as WORK. But the permanent libraries are available always.</p>
<img src="/sas/images/ui_program_libraries_10.JPG" alt="ui_program_libraries_10.JPG" />
<h3>File Shortcuts</h3>
<p> This tab is used to access files which are stored outside the SAS environment. The shortcuts to such files are stored under this tab.</p>
<img src="/sas/images/ui_program_file_shortcuts_11.JPG" alt="ui_program_file_shortcuts_11.JPG" />
<h1>SAS - Program Structure</h1>
<p>The SAS Programming involves first creating/reading the data sets into the memory and then doing the analysis on this data. We need to understand the flow in which a program is written to achieve this.</p> 
<h2>SAS Program Structure</h2>
<p>The below diagram shows the steps to be written in the given sequence to create a SAS Program.</p>
<img src="/sas/images/ps_flow_1.JPG" alt="ps_flow_1" />
<p>Every SAS program must have all these steps to complete reading the input data, analysing the data and giving the output of the analysis. Also the <b>RUN</b> statement at the end of each step is required to complete the execution of that step.</p>
<h2>DATA Step</h2>
<p>This step involves loading the required data set into SAS memory and identifying the variables (also called columns) of the data set. It also captures the records (also called observations or subjects). The syntax for DATA statement is as below.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
DATA data_set_name;		#Name the data set.
INPUT var1,var2,var3; 		#Define the variables in this data set.
NEW_VAR;			#Create new variables.
LABEL;			      	#Assign labels to variables.
DATALINES;		      	#Enter the data.
RUN;
</pre>
<h3>Example</h3>
<p>The below example shows a simple case of naming the data set, defining the variables, creating new variables and entering the data. Here the string variables have a $ at the end and numeric values are without it.</p>
<pre class="prettyprint notranslate">
DATA TEMP;
INPUT ID $ NAME $ SALARY DEPARTMENT $;
comm = SALARY*0.25;
LABEL ID = 'Employee ID' comm = 'COMMISION';
DATALINES;
1 Rick 623.3 IT
2 Dan 515.2 Operations
3 Michelle 611 IT
4 Ryan 729 HR
5 Gary 843.25 Finance
6 Nina 578 IT
7 Simon 632.8 Operations
8 Guru 722.5 Finance
;
RUN;
</pre>
<h2>PROC Step</h2>
<p>This step involves invoking a SAS built-in procedure to analyse the data.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
PROC procedure_name options; #The name of the proc.
RUN;
</pre>
<h3>Example</h3>
<p>The below example shows using the <b>MEANS</b> procedure to print the mean values of the numeric variables in the data set.</p>
<pre class="prettyprint notranslate">
PROC MEANS;
RUN;
</pre>
<h2>The OUTPUT Step</h2>
<p>The data from the data sets can be displayed with conditional output statements.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
PROC PRINT DATA = data_set;
OPTIONS;
RUN;
</pre>
<h3>Example</h3>
<p>The below example shows using the where clause in the output to produce only few records from the data set.</p>
<pre class="prettyprint notranslate">
PROC PRINT DATA = TEMP;
WHERE SALARY &gt; 700;
RUN;
</pre>
<h2>The complete SAS Program</h2>
<p>Below is the complete code for each of the above steps.</p>
<img src="/sas/images/ps_complete_code.JPG" alt="ps_complete_code" />
<h2>Program Output</h2>
</p>The output from above code is seen in the <b>RESULTS</b> tab.</p>
<img src="/sas/images/ps_program_output.JPG" alt="ps_program_output" />
<h1>SAS - Basic Syntax</h1>
<p>Like any other programming language, the SAS language has its own rules of syntax to create the SAS programs.<p>
<p>The three components of any SAS program - Statements, Variables and Data sets follow the below rules on Syntax.</p>
<h2>SAS Statements</h2>
<ul class="list">
<li><p>Statements can start anywhere and end anywhere. A semicolon at the end of the last line marks the end of the statement.</p></li>
<li><p>Many SAS statements can be on the same line, with each statement ending with a semicolon.</p></li>
<li><p>Space can be used to separate the components in a SAS program statement.</p></li>
<li><p>SAS  keywords are not case sensitive.</p></li>
<li><p>Every SAS program must end with a RUN statement.</p></li>
</ul>
<h2>SAS Variable Names</h2>
<p>Variables in SAS represent a column in the SAS data set. The variable names follow the below rules.</p>
<ul class="list">
<li><p>It can be maximum 32 characters long.</p></li>
<li><p>It can not include blanks.</p></li>
<li><p>It must start with the letters A through Z (not case sensitive) or an underscore (_).</p></li> 
<li><p>Can include numbers but not as the first character.</p></li>
<li><p>Variable names are case insensitive.</p></li>
</ul>
<h3>Example</h3>
<pre class="prettyprint notranslate">
# Valid Variable Names
REVENUE_YEAR
MaxVal
_Length

# Invalid variable Names
Miles Per Liter	#contains Space.
RainfFall%      # contains apecial character other than underscore.
90_high		# Starts with a number.
</pre>
<h2>SAS Data Set</h2>
<p>The DATA statement marks the creation of a new SAS data set. The rules for DATA set creation are as below.</p>
<ul class="list">
<li><p>A single word after the DATA statement indicates a temporary data set name. Which means the data set gets erased at the end of the session.</p></li>
<li><p>The data set name can be prefixed with a library name which makes it a permanent data set. Which means the data set persists after the session is over.</p></li>
<li><p>If the SAS data set name is omitted then SAS creates a temporary data set with a name generated by SAS like - DATA1, DATA2 etc.</p></li>
</ul>
<h3>Example</h3>
<pre class="prettyprint notranslate">
# Temporary data sets.
DATA TempData;
DATA abc;
DATA newdat;

# Permanent data sets.
DATA LIBRARY1.DATA1
DATA MYLIB.newdat;
</pre>
<h2>SAS File Extensions</h2>
<p>The SAS programs, data files and the results of the programs are saved with various extensions in windows.</p>
<ul class="list">
<li><p><b>*.sas</b> &minus; It represents the SAS code file which can be edited using the SAS Editor or any text editor.</p></li>
<li><p><b>*.log</b> &minus; It represents the SAS Log File  it contains information such as errors, warnings, and data set details for a  submitted SAS program.</p></li>
<li><p><b>*.mht / *.html</b> &minus;It represents the SAS Results file.</p></li>
<li><p><b>*.sas7bdat</b> &minus;It represents SAS Data File which contains a SAS data set including variable names, labels, and the results of calculations.</p></li>
</ul>
<h2>Comments in SAS</h2>
<p>Comments in SAS code are specified in two ways. Below are these two formats.</p>
<h3>*message; type comment</h3>
<p>A comment in the form of <b>*message;</b> can not contain semicolons or unmatched quotation mark inside it. Also there should not be any reference to any macro statements inside such comments. It can span multiple lines and can be of any length.. Following is a single line comment example &minus;</p>
<pre class="result notranslate">
* This is comment ;
</pre>
<p>Following is a multiline comment example &minus;</p>
<pre class="result notranslate">
* This is first line of the comment
* This is second line of the comment;
</pre>
<h3>/*message*/ type comment</h3>
<p> A comment in the form of <b>/*message*/</b> is used more frequently and it can not be nested. But it can span multiple lines and can be of any length. Following is a single line comment example &minus;</p>
<pre class="result notranslate">
/* This is comment */
</pre>
<p>Following is a multiline comment example &minus;</p>
<pre class="result notranslate">
/* This is first line of the comment
* This is second line of the comment */
</pre>
<h1>SAS - Data Sets</h1>
<p>The data that is available to a SAS program for analysis is referred as a SAS Data Set. It is created using the DATA step.SAS can read a variety of files as its data sources like <b>CSV, Excel, Access, SPSS and also raw data</b>. It also has many in-built data sources available for use. 
<ul class="list">
<li><p>The Data Sets are called <b>temporary Data Set</b> if they are used by the SAS program and then discarded after the session is run.</p></li>
<li><p>But if it is stored permanently for future use then it is called a <b>permanent Data set</b>. All permanent Data Sets are stored under a specific library.</p></li>
</ul> 
<p>The SAS Data set is stored in form of rows and columns and also referred as SAS Data table.Below we see the examples of permanent Data sets which are in-built as well as red from external sources.</p>
<h2>SAS Built-In Data Sets</h2>
<p>These Data Sets are already available in the installed SAS software. They can be explored and used in formulating sample expressions for data analysis. To explore these data sets go to <b>Libraries -> My Libraries -> SASHELP</b>. On expanding it we see the list of names of all the built-in Data Sets available.</p>
<img src="/sas/images/data_sets_1_explore.JPG" alt="data_sets_1_explore" />
<p>Lets scroll down to locate a Data Set named <b>CARS</b>.Double clicking on this Data Set opens it in the right window pane where we can explore it further.We can also minimize the left pane by using the maximize view button under the right pane.</p>
<img src="/sas/images/data_sets_2_CARS.JPG" alt="data_sets_2_CARS" />
<p>We can scroll to the right using the scroll bar in the bottom to explore all the columns and theirs values in the table.</p>
<img src="/sas/images/data_sets_3_CARS_explore.JPG" alt="data_sets_3_CARS_explore" />
<h2>Importing External Data Sets</h2>
<p>We can export our own files as Data sets by using the import feature available in SAS Studio. But these files must be available in the SAS server folders. So we have to upload the source data files to SAS folder by using the upload option under the <b>Server Files and Folders</b>.</p>
<img src="/sas/images/data_sets_4_1_loacl_files_to_server.JPG" alt="data_sets_4_1_loacl_files_to_server" />
<p>Next we use the above file in a SAS program by importing it. To do this we use the option <b>Tasks -> Utilities -> Import data </b> as shown below. Double click the Import Data button which opens up the window in the right to choose the file for the Data Set.</p>
<p>Next Click on the <b>Select Files</b> button under the import data program in the right pane. The following are the list of the file types which can be imported.</p>
<img src="/sas/images/data_sets_5_import_files.JPG" alt="data_sets_5_import_files" />
<p>We choose the "employee.txt" file stored in the local system and get the file imported as shown below.</p>
<img src="/sas/images/data_sets_4_2_import_utility.JPG" alt="data_sets_4_2_import_utility" />
<h3>View the imported data</h3>
<p>We can view the imported data by running the default import code generated using the Run option</p>
<img src="/sas/images/data_sets_6_view_imported_data.JPG" alt="data_sets_6_view_imported_data" />
<p>We can import any other file types using the same approach as above and use it in various SAS programs.</p>
<h1>SAS - Variables</h1>
<p>In general variables in SAS represent the column names of the data tables it is analysing. But it can also be used for other purpose like using it as a counter in a programming loop. In the current chapter we will see the use of SAS variables as column names of SAS Data Set.</p>
<h2>SAS Variable Types</h2>
<p>SAS has three types of variables as below &minus;</p>
<h3>Numeric Variables</h3> 
<p>This is the default variable type. These variables are used in mathematical  expressions.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
INPUT VAR1 VAR2 VAR3; 		#Define numeric variables in the data set.
</pre>
<p>In the above syntax, the INPUT statement shows the declaration of numeric variables.</p>
<h3>Example</h3>
<pre class="result notranslate">
INPUT ID SALARY COMM_PERCENT;
</pre>
<h3>Character Variables</h3>
<p> Character variables are used for values that are not used in Mathematical expressions. They are treated as text or strings. A variable becomes a character variable by adding a $ sing with a space at the end of the variable name.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
INPUT VAR1 $ VAR2 $ VAR3 $; 	#Define character variables in the data set.
</pre>
<p>In the above syntax, the INPUT statement shows the declaration of character variables.</p>
<h3>Example</h3>
<pre class="result notranslate">
INPUT FNAME $ LNAME $ ADDRESS $;
</pre>
<h3>Date Variables</h3>
<p>These variables are treated only as dates and they need to be in valid date formats. A variable becomes a date variable by adding a date format with a space at the end of the variable name.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
INPUT VAR1 DATE11. VAR2 MMDDYY10. ; #Define date variables in the data set.
</pre>
<p>In the above syntax, the INPUT statement shows the declaration of date variables.</p>
<h3>Example</h3>
<pre class="result notranslate">
INPUT DOB DATE11. START_DATE MMDDYY10. ;
</pre>
<h2>Use of Variables in SAS Program</h2>
<p>The above variables are used in SAS program as shown in below examples.</p>
<h3>Example</h3>
<p>The below code shows how the three types of variables are declared and used in a SAS Program</p>
<pre class="result notranslate">
DATA TEMP;
INPUT ID NAME $ SALARY DEPT $ DOJ DATE9. ;
FORMAT DOJ DATE9. ;
DATALINES;
1 Rick 623.3 IT 02APR2001
2 Dan 515.2 OPS 11JUL2012
3 Michelle 611 IT 21OCT2000
4 Ryan 729 HR 30JUL2012
5 Gary 843.25 FIN 06AUG2000
6 Tusar 578 IT 01MAR2009
7 Pranab 632.8 OPS 16AUG1998
8 Rasmi 722.5 FIN 13SEP2014
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>In the above example all the character variables are declared followed by a $ sign and the date variables are declared followed by a date format. The output of the above program is as below.</p>
<img src="/sas/images/SAS_BS_variable_output.JPG" alt="SAS_BS_variable_output" />
<h2>Using the Variables</h2>
<p>The variables are very useful in analysing the data. They are used in expressions in which the statistical analysis is applied. Let’s see an example of analysing the built-in Data Set named <b>CARS</b> which is present under <b>Libraries &rarr; My Libraries &rarr; SASHELP</b>. Double click on it to explore the variables and their data types.</p>
<img src="/sas/images/variable_1_explore_car.JPG" alt="variable_1_explore_car" />
<p>Next we can produce a summary statistics of some of these variables using the Tasks options in SAS studio. Go to <b>Tasks -> Statistics -> Summary Statistics</b> and double click it to open the window as shown below. Choose Data Set <b>SASHELP.CARS</b> and select the three variables - MPG_CITY, MPG_Highway and Weight under the Analysis Variables. Hold the Ctrl key while selecting the variables by clicking. Click run.</p>
<img src="/sas/images/variable_2_select_summary_car.JPG" alt="variable_2_select_summary_car" />
<p>Click on the results tab after the above steps. It shows the statistical summary of the three variables chosen. The last column indicates number of observations (records) used in the analysis.</p>
<img src="/sas/images/variable_3_summary_result_car.JPG" alt="variable_3_summary_result_car" />
<h1>SAS - Strings</h1>
<p>Strings in SAS are the values which are enclosed with in a pair of single quotes. Also the string variables are declared by adding a space and $ sign at the end of the variable declaration. SAS has many powerful functions to analyze and manipulate strings.</p>
<h2>Declaring String Variables</h2>
<p>We can declare the string variables and their values as shown below. In the code below we declare two character variables of lengths 6 and 5. The LENGTH keyword is used for declaring variables without creating multiple observations.</p>
<pre class="result notranslate">
data string_examples;
   LENGTH string1 $ 6 String2 $ 5;
   /*String variables of length 6 and 5 */
   String1 = 'Hello';
   String2 = 'World';
   Joined_strings =  String1 ||String2 ;
run;
proc print data = string_examples noobs;
run;
</pre>
<p>On running the above code we get the output which shows the variable names and their values.</p>
<img src="/sas/images/strings_1_concatenate.JPG" alt="strings_1_concatenate" />
<h2>String Functions</h2>
<p>Below are the examples of some SAS functions which are used frequently.</p>
<h2>SUBSTRN</h2>
<p>This function extracts a substring using the start and end positions. In case of no end position is mentioned it extracts all the characters till end of the string.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
SUBSTRN('stringval',p1,p2)
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><b>stringval</b> is the value of the string variable.</li>
<li><b>p1</b> is the start position of extraction.</li>
<li><b>p2</b> is the final position of extraction.</li>
</ul>
<h3>Example</h3>
<pre class="result notranslate">
data string_examples;
   LENGTH string1 $ 6 ;
   String1 = 'Hello';
   sub_string1 = substrn(String1,2,4) ;
   /*Extract from position 2 to 4 */
   sub_string2 = substrn(String1,3) ;
   /*Extract from position 3 onwards */
run;
proc print data = string_examples noobs;
run;
</pre>
<p>On running the above code we get the output which shows the result of substrn function.</p>
<img src="/sas/images/strings_2_substr.JPG" alt="strings_2_substr" />
<h3>TRIMN</h3>
<p>This function removes the trailing space form a string.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
TRIMN('stringval')
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><b>stringval</b> is the value of the string variable.</li>
</ul>
<pre class="prettyprint notranslate">
data string_examples;
   LENGTH string1 $ 7  ;
   String1='Hello  ';
   length_string1 = lengthc(String1);
   length_trimmed_string = lengthc(TRIMN(String1));
run;
proc print data = string_examples noobs;
run;
</pre>
<p>On running the above code we get the output which shows the result of TRIMN function.</p>
<img src="/sas/images/strings_3_trimn.JPG" alt="strings_3_trimn" />
<h1>SAS - Arrays</h1>
<p>Arrays in SAS are used to store and retrieve a series of values using an index value. The index represents the location in a reserved memory area.</p>
<h2>Syntax</h2>
<p>In SAS an array is declared by using the following syntax &minus;</p>
<pre class="result notranslate">
ARRAY ARRAY-NAME(SUBSCRIPT) ($) VARIABLE-LIST ARRAY-VALUES
</pre>
<p>In the above syntax &minus;</p>
<ul class="list">
<li><p><b>ARRAY</b> is the SAS keyword to declare an array.</p></li>
<li><p><b>ARRAY-NAME</b> is the name of the array which follows the same rule as variable names.</p></li>
<li><p><b>SUBSCRIPT</b> is the number of values the array is going to store.</p></li>
<li><p><b>($)</b> is an optional parameter to be used only if the array is going to store character values.</p></li>
<li><p><b>VARIABLE-LIST</b> is the optional list of variables which are the place holders for array values.</p></li>
<li><p><b>ARRAY-VALUES</b> are the actual values that are stored in the array. They can be declared here or can be read from a file or dataline.</p></li>
</ul>
<h3>Examples of Array Declaration</h3>
<p>Arrays can be declared in many ways using the above syntax. Below are the examples.
<pre class="result notranslate">
# Declare an array of length 5 named AGE with values.
ARRAY AGE[5] (12 18 5 62 44);

# Declare an array of length 5 named COUNTRIES with values starting at index 0.
ARRAY COUNTRIES(0:8) A B C D E F G H I;

# Declare an array of length 5 named QUESTS which contain character values.
ARRAY QUESTS(1:5) $ Q1-Q5;

# Declare an array of required length as per the number of values supplied.
ARRAY ANSWER(*) A1-A100;
</pre>
<h2>Accessing Array Values</h2>
<p>The values stored in an array can be accessed by using the <b>print</b> procedure as shown below. After it is declared using one of the above methods, the data is supplied using DATALINES statement.</p>
<pre class="result notranslate">
DATA array_example;
INPUT a1 $ a2 $ a3 $ a4 $ a5 $;
ARRAY colours(5) $ a1-a5;
mix = a1||'+'||a2;
DATALINES;
yello pink orange green blue
;
RUN;
PROC PRINT DATA = array_example;
RUN;
</pre>
<p>When we execute above code, it produces following result &minus;</p>
<img src="/sas/images/array_character_2_result.JPG" alt="array_character_2_result" />
<h3>Using the OF operator</h3>
<p>The OF operator is used when analysing the data forma an Array to perform calculations on the entire row of an array. In the below example we apply the Sum and Mean of values in each row.</p>
<pre class="prettyprint notranslate">
DATA array_example_OF;
   INPUT A1 A2 A3 A4;
   ARRAY A(4) A1-A4;
   A_SUM = SUM(OF A(*));
   A_MEAN = MEAN(OF A(*));
   A_MIN = MIN(OF A(*));
   DATALINES;
   21 4 52 11
   96 25 42 6
   ;
   RUN;
   PROC PRINT DATA = array_example_OF;
   RUN;
</pre>
<p>When we execute above code, it produces following result &minus;</p>
<img src="/sas/images/array_of_result.JPG" alt="array_of_result" />
<h3>Using the IN operator</h3>
<p>The value in an array can also be accessed using the IN operator which checks for the presence of a value in the row of the array. In the below example we check for the availability of the colour "Yellow" in the data. This value is case sensitive.</p>
<pre class="prettyprint notranslate">
DATA array_in_example;
   INPUT A1 $ A2 $ A3 $ A4 $;
   ARRAY COLOURS(4) A1-A4;
   IF 'yellow' IN COLOURS THEN available = 'Yes';ELSE available = 'No';
   DATALINES;
   Orange pink violet yellow
   ;
   RUN;
   PROC PRINT DATA = array_in_example;
   RUN;
</pre>
<p>When we execute above code, it produces following result &minus;</p>
<img src="/sas/images/array_in_result.JPG" alt="array_in_result" />
<h1>SAS - Numeric Formats</h1>
<p>SAS can handle a wide variety of numeric data formats. It uses these formats at the end of the variable names to apply a specific numeric format to the data. SAS use two kinds of numeric formats. One for reading specific formats of the numeric data which is called <b>informat</b> and another for displaying the numeric data in specific format called as <b>output format</b>.</p>
<h2>Syntax</h2>
<p>The Syntax for a numeric informat is &minus;</p>
<pre class="result notranslate">
Varname Formatnamew.d
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Varname</b> is the name of the variable.</p></li>
<li><p><b>Formatname</b> is the name of the name of the numeric format applied to the variable.</p></li>
<li><p><b>w</b> is the maximum number of data columns (including digits after decimal & the decimal point itself) allowed to be stored for the variable.</p></li>
<li><p><b>d</b> is the number of digits to the right of the decimal.</p></li>
</ul>
<h2>Reading Numeric formats</h2>
<p>Below is a list of formats used for reading the data into SAS.</p>
<h3>Input Numeric Formats</h3>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Format</th>
<th style="text-align:center">Use</th>
</tr>
<tr>
<td class="ts"><b>n.</b></td>
<td><p>Maximum "n" number of columns with no decimal point.</p></td>
</tr>
<tr>
<td class="ts"><b>n.p</b></td>
<td><p>Maximum "n" number of columns with "p" decimal points.</p></td>
</tr>
<tr>
<td class="ts"><b>COMMAn.p</b></td>
<td><p>Maximum "n" number of columns with "p" decimal places which removes any comma or dollar signs.</p></td>
</tr>
<tr>
<td class="ts"><b>COMMAn.p</b></td>
<td><p>Maximum "n" number of columns with "p" decimal places which removes any comma or dollar signs.</p></td>
</tr>
</table>
<h2>Displaying Numeric formats</h2>
<p>Similar to applying format while reading the data, below is a list of formats used for displaying the data in the output of a SAS program.</b>
<h3>Output Numeric Formats</h3>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Format</th>
<th style="text-align:center">Use</th>
</tr>
<tr>
<td class="ts"><b>n.</b></td>
<td><p>Write maximum "n" number of digits with no decimal point.</p></td>
</tr>
<tr>
<td class="ts"><b>n.p</b></td>
<td><p>Write maximum "n.p" number of columns with "p" decimal points.</p></td>
</tr>
<tr>
<td class="ts"><b>DOLLARn.p</b></td>
<td><p>Write maximum "n" number of columns with p decimal places, leading dollar sign and a comma at the thousandth place.</p></td>
</tr>
</table>
<p>Please Note &minus;</p>
<ul class="list">
<li><p>If the number of digits after the decimal point is less than the format specifier then<b>zeros will be appended</b> at the end.</p></li>
<li><p>If the number of digits after the decimal point is greater than the format specifier then the last digit will be <b>rounded off</b>.</p></li>
</ul>
<h2> Examples</h2>
<p>Below examples illustrate above scenarios.</p>
<pre class="result notranslate">
DATA MYDATA1;
input x 6.; /*maxiiuum width of the data*/
format x 6.3;
datalines;
8722
93.2
.1122
15.116
PROC PRINT DATA = MYDATA1;
RUN;

DATA MYDATA2;
input x 6.; /*maximum width of the data*/
format x 5.2;
datalines;
8722
93.2
.1122
15.116
PROC PRINT DATA = MYDATA2;
RUN;
DATA MYDATA3;
input x 6.; /*maximum width of the data*/
format x DOLLAR10.2;
datalines;
8722
93.2
.1122
15.116
PROC PRINT DATA = MYDATA3;
RUN;
</pre>
<p>When we execute above code, it produces following result &minus;</p>
<pre class="prettyprint notranslate">
# MYDATA1.
Obs 	x
1 	8722.0 # Display 6 columns with zero appended after decimal.
2 	93.200 # Display 6 columns with zero appended after decimal.
3 	0.112  # No integers before decimal, so display 3 available digits after decimal.
4 	15.116 # Display 6 columns with 3 available digits after decimal.

# MYDATA2
Obs 	x
1 	8722  # Display 5 columns. Only 4 are available.
2 	93.20 # Display 5 columns with zero appended after decimal.
3 	0.11  # Display 5 columns with 2 places after decimal.
4 	15.12 # Display 5 columns with 2 places after decimal.

# MYDATA3
Obs 	x
1 	$8,722.00 # Display 10 columns with leading $ sign, comma at thousandth place and zeros appended after decimal.
2 	$93.20    # Only 2 integers available before decimal and one available after the decimal.
3 	$0.11	  # No integers available before decimal and two available after the decimal.
4 	$15.12    # Only 2 integers available before decimal and two available after the decimal.
</pre>
<h1>SAS - Operators</h1>
<p>An operator in SAS is a symbol which is used in a mathematical, logical or comparison expression. These symbols are in-built into the SAS language and many operators can be combined in a single expression to give a final output.</p>
<p>Below is a list of SAS category of operators.</p>
<ul class="list">
<li>Arithmetic Operators</li>
<li>Logical Operators</li>
<li>Comparison Operators</li>
<li>Minimum/Maximum Operators</li>
<li>Concatenation Operator</li>
</ul>
<p>We will look at each of the one by one. The operators are always used with variables that are part of the data that is being analyzed by the SAS program.</p>
<h2>Arithmetic Operators</h2>
<p>The below table describes the details of the arithmetic operators. Let’s assume two data variables <b>V1</b> and <b>V2</b>with values <b>8</b> and <b>4</b> respectively.</p>
<table class="table table-bordered" style="text-align:center">
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
<tr>
<td>+</td>
<td>Addition</td>
<td>V1+V2=12</td>
</tr>
<tr>
<td>-</td>
<td>Subtraction</td>
<td>V1-V2=4</td>
</tr>
<tr>
<td>*</td>
<td>Multiplication</td>
<td>V1*V2=32</td>
</tr>
<tr>
<td>/</td>
<td>Division</td>
<td>V1/V2=2</td>
</tr>
<tr>
<td>**</td>
<td>Exponentiation</td>
<td>V1**V2=4096</td>
</tr>
</table>
<h3>Example</h3>
<pre class="prettyprint notranslate">
DATA MYDATA1;
input @1 COL1 4.2	@7 COL2 3.1; 
Add_result = COL1+COL2;
Sub_result = COL1-COL2;
Mult_result = COL1*COL2;
Div_result = COL1/COL2;
Expo_result = COL1**COL2;
datalines;
11.21 5.3
3.11  11
;
PROC PRINT DATA = MYDATA1;
RUN;
</pre>
<p>On running the above code, we get the following output.</p>
<img src="/sas/images/operators_arithmrtic.JPG" alt="operators_arithmrtic" />
<h2>Logical Operators</h2>
<p>The below table describes the details of the logical operators. These operators evaluate the Truth value of an expression. So the result of logical operators is always a 1 or a 0. Let’s assume two data variables <b>V1</b> and <b>V2</b>with values <b>8</b> and <b>4</b> respectively.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center; width:23%">Example</th>
</tr>
<tr>
<td class="ts">&amp;</td>
<td>The AND Operator. If both data values evaluate to true then the result
is 1 else it is 0.</td>
<td>(V1&gt;2 &amp; V2 &gt; 3) gives 0.</td>
</tr>
<tr>
<td class="ts">|</td>
<td>The OR Operator. If any one of the data values evaluate to true then
 the result is 1 else it is 0.</td>
<td>(V1&gt;9 &amp; V2 &gt; 3) is 1.</td>
</tr>
<tr>
<td class="ts">~</td>
<td>The NOT Operator. The result of NOT operator in form of an expression 
whose value is FALSE or a missing value is 1 else it is 0.</td>
<td style="vertical-align:middle;">NOT(V1 &gt; 3) is 1.</td>
</tr>
</table>
<h3>Example</h3>
<pre class="prettyprint notranslate">
DATA MYDATA1;
input @1 COL1 5.2	@7 COL2 4.1; 
and_=(COL1 &gt; 10 &amp; COL2 &gt; 5 );
or_ = (COL1 &gt; 12 | COL2 &gt; 15 );
not_ = ~( COL2 &gt; 7 );
datalines;
11.21 5.3
3.11  11.4
;
PROC PRINT DATA = MYDATA1;
RUN;
</pre>
<p>On running the above code, we get the following output.</p>
<img src="/sas/images/operators_logical.JPG" alt="operators_logical" />
<h2>Comparison Operators</h2>
<p>The below table describes the details of the comparison operators. These operators compare the values of the variables and the result is a truth value presented by 1 for TRUE and 0 for False. Let’s assume two data variables <b>V1</b> and <b>V2</b>with values <b>8</b> and <b>4</b> respectively.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center; width:20%">Example</th>
</tr>
<tr>
<td class="ts">=</td>
<td>The EQUAL Operator. If both data values are equal then the result 
is 1 else it is 0.</td>
<td>(V1 = 8) gives 1.</td>
</tr>
<tr>
<td class="ts">^=</td>
<td>The NOT EQUAL Operator. If both data values are unequal then the 
result is 1 else it is 0.</td>
<td>(V1 ^= V2) gives 1.</td>
</tr>
<tr>
<td class="ts">&lt;</td>
<td style="vertical-align:middle;">The LESS THAN Operator.</td>
<td>(V2 &lt; V2) gives 1.</td>
</tr>
<tr>
<td class="ts">&lt;=</td>
<td style="vertical-align:middle;">The LESS THAN or EQUAL TO Operator.</td>
<td>(V2 &lt;= 4) gives 1.</td>
</tr>
<tr>
<td class="ts">&gt;</td>
<td style="vertical-align:middle;">The GREATER THAN Operator.</td>
<td>(V2 &gt; V1) gives 1.</td>
</tr>
<tr>
<td class="ts">&gt;=</td>
<td style="vertical-align:middle;">The GREATER THAN or EQUAL TO Operator.</td>
<td>(V2 &gt;= V1) gives 0.</td>
</tr>
<tr>
<td class="ts">IN</td>
<td>The IN Operator. If the value of the variable is equal to any one
 of the values in a given list of values, then it returns 1 else it returns 0.</td>
<td>V1 in (5,7,9,8) gives 1.</td>
</tr>
</table>
<h3>Example</h3>
<pre class="prettyprint notranslate">
DATA MYDATA1;
input @1 COL1 5.2	@7 COL2 4.1; 
EQ_ = (COL1 = 11.21);
NEQ_= (COL1 ^= 11.21);
GT_ = (COL2 =&gt; 8);
LT_ = (COL2 &lt;= 12);
IN_ = COL2 in( 6.2,5.3,12 );
datalines;
11.21 5.3
3.11  11.4
;
PROC PRINT DATA = MYDATA1;
RUN;
</pre>
<p>On running the above code, we get the following output.</p>
<img src="/sas/images/operators_comparison.JPG" alt="operators_comparison" />
<h2>Minimum/Maximum Operators</h2>
<p>The below table describes the details of the Minimum/Maximum operators. These operators compare the values of the variables across a row and the minimum or maximum value from the list of values in the rows is returned.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
<tr>
<td class="ts">MIN</td>
<td>The MIN Operator. It returns the minimum value form the list of values in the row.</td>
<td>MIN(45.2,11.6,15.41) gives 11.6</td>
</tr>
<tr>
<td class="ts">MAX</td>
<td>The MAX Operator. It returns the maximum value form the list of values in the row.</td>
<td>MAX(45.2,11.6,15.41) gives 45.2</td>
</tr>
</table>
<h3>Example</h3>
<pre class="prettyprint notranslate">
DATA MYDATA1;
input @1 COL1 5.2	@7 COL2 4.1 @12 COL3 6.3; 
min_ = MIN(COL1 , COL2 , COL3);
max_ = MAX( COL1, COl2 , COL3);
datalines;
11.21 5.3 29.012
3.11  11.4 18.512
;
PROC PRINT DATA = MYDATA1;
RUN;
</pre>
<p>On running the above code, we get the following output.</p>
<img src="/sas/images/operators_minmax.JPG" alt="operators_minmax" />
<h2>Concatenation Operator</h2>
<p>The below table describes the details of the Concatenation operator. This operator concatenates two or more string values. A single character value is returned.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
<tr>
<td class="ts">||</td>
<td>The concatenate Operator. It returns the concatenation of two or more values.</td>
<td>'Hello'||' World' gives Hello World</td>
</tr>
</table>
<h3>Example</h3>
<pre class="prettyprint notranslate">
DATA MYDATA1;
input  COL1 $	COL2 $  COL3 $; 
concat_ = (COL1 || COL2 || COL3);
datalines;
Tutorial s point
simple easy learning
;
PROC PRINT DATA = MYDATA1;
RUN;
</pre>
<p>On running the above code, we get the following output.</p>
<img src="/sas/images/operators_concate.JPG" alt="operators_concate" />
<h2>Operators Precedence</h2>
<p>The operator precedence indicates the order of evaluation of the multiple operators present in complex expression. The below table describes the order of precedence with in a group of operators.</p>
<table class="table table-bordered" style="text-align:center">
<tr>
<th style="text-align:center">Group</th>
<th style="text-align:center">Order</th>
<th style="text-align:center">Symbols</th>
</tr>
<tr>
<td>Group I</td>
<td>Right to Left</td>
<td>** + - NOT MIN MAX</td>
</tr>
<tr>
<td>Group II</td>
<td>Left to Right</td>
<td>* /</td>
</tr>
<tr>
<td>Group III</td>
<td>Left to Right</td>
<td>+ -</td>
</tr>
<tr>
<td>Group IV</td>
<td>Left to Right</td>
<td> ||</td>
</tr>
<tr>
<td>Group V</td>
<td>Left to Right</td>
<td> &lt; &lt;= = &gt;= &gt;</td>
</tr>
</table>
<h1>SAS - Loops</h1>
<p>You may encounter situations, when a block of code needs to be executed several number of times. In general, statements are executed sequentially &minus; The first statement in a function is executed first, followed by the second, and so on. But when you want the same set of statements to be executed again and again, we need the help of Loops.</p>
<p>In SAS looping is done by using DO statement. It is also called <b>DO Loop</b>. Given below is the general form of a DO loop statements in SAS.</p>
<h2>Flow Diagram</h2>
<img src="/sas/images/SAS_do_while_loop.jpg" alt="SAS_do_while_loop.jpg" />
<p>Following are the types of DO loops in SAS.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Loop Type &amp; Description </th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/sas/sas_do_index.htm">DO Index.</a>
<p>The loop continues from the start value till the stop value of the index variable.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/sas/sas_do_while.htm">DO WHILE.</a>
<p>The loop continues till the while condition becomes false.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/sas/sas_do_until.htm">DO UNTIL.</a>
<p>The loop continues till the UNTIL condition becomes True.</p>
</td>
</tr>
</table>
<h1>SAS - Decision Making</h1>
<p>Decision making structures require the programmer to specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be <b>true</b>, and optionally, other statements to be executed if the condition is determined to be <b>false</b>.</p>
<p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>
<img src="/sas/images/decision_making.jpg" alt="Decision Making" />
<p>SAS provides following types of decision making statements. Click the following links to check their detail.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Statement Type &amp; Description </th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/sas/sas_if.htm">IF Statement.</a>
<p>An <b>if statement</b> consists of a condition. If the condition is true then the specific data is fetched.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/sas/sas_ifthenelse.htm">IF-THEN-ELSE Statement.</a>
<p>An <b>if statement</b> followed by else statement, which executes when the boolean condition is false.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/sas/sas_ifthenelseif.htm">IF-THEN-ELSE-IF Statement.</a>
<p>An <b>if statement</b> followed by else statement, which is again followed by another pair of IF-THEN Statement.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/sas/sas_ifthendelete.htm">IF-THEN-DELETE Statement.</a>
<p>An <b>if statement</b> consists of acondition, which when true deletes the specific data from the observations.</p></td>
</tr>
</table>
<h1>SAS - Functions</h1>
<p>SAS has a wide variety of in built functions which help in analysing and processing the data. These functions are used as part of the DATA statements. They take the data variables as arguments and return the result which is stored into another variable. Depending on the type of function, the number of arguments it takes can vary. Some functions accept zero arguments while some other
accept fixed number of variables. Below is a list of types of functions SAS provides.</p>
<h3>Syntax</h3>
<p>The general syntax for using a function in SAS is as below.</p>
<pre class="result notranslate">
FUNCTIONNAME(argument1, argument2...argumentn)
</pre>
<p>Here the argument can be a constant, variable, expression or another function.</p>
<h2>Function Categories</h2>
<p>Depending on their usage, the functions in SAS are categorised as below.</p>
<ul class="list">
<li>Mathematical</li>
<li>Date and Time</li>
<li>Character</li>
<li>Truncation</li>
<li>Miscellaneous</li>
</ul>
<h2>Mathematical Functions</h2>
<p>These are the functions used to apply some mathematical calculations on the variable values.</p>
<h3>Examples</h3>
<p>The below SAS program shows the use of some important mathematical functions.</p>
<p><b>data Math_functions;</b></p>
<pre class="prettyprint notranslate">
v1=21; v2=42; v3=13; v4=10; v5=29;

/* Get Maximum value */
max_val = MAX(v1,v2,v3,v4,v5);

/* Get Minimum value */
min_val = MIN (v1,v2,v3,v4,v5);

/* Get Median value */
med_val = MEDIAN (v1,v2,v3,v4,v5);

/* Get a random number */
rand_val = RANUNI(0);

/* Get Square root of sum of the values */
SR_val= SQRT(sum(v1,v2,v3,v4,v5));

proc print data = Math_functions noobs;
run;
</pre>
<p>When the above code is run, we get the following output &minus;</p>
<img src="/sas/images/math_funcs_result.JPG" alt="math_funcs_result" />
<h2>Date and Time Functions</h2>
<p>These are the functions used to process date and time values.</p>
<h3>Examples</h3>
<p>The below SAS program shows the use of date and time  functions.</p>
<pre class="prettyprint notranslate">
data date_functions;
INPUT @1 date1 date9. @11 date2 date9.;
format date1 date9.  date2 date9.;

/* Get the interval between the dates in years*/
Years_ = INTCK('YEAR',date1,date2);

/* Get the interval between the dates in months*/
months_ = INTCK('MONTH',date1,date2);

/* Get the week day from the date*/
weekday_ =  WEEKDAY(date1);

/* Get Today's date in SAS date format */
today_ = TODAY();

/* Get current time in SAS time format */
time_ = time();
DATALINES;
21OCT2000 16AUG1998
01MAR2009 11JUL2012
;
proc print data = date_functions noobs;
run;
</pre>
<p>When the above code is run, we get the following output &minus;</p>
<img src="/sas/images/date_time_funcs_result.JPG" alt="date_time_funcs_result"/>
<h2>Character Functions</h2>
<p>These are the functions used to process character or text values.</p>
<h3>Examples</h3>
<p>The below SAS program shows the use of character  functions.</p>
<pre class="prettyprint notranslate">
data character_functions;

/* Convert the string into lower case */
lowcse_ = LOWCASE('HELLO');
  
/* Convert the string into upper case */
upcase_ = UPCASE('hello');
  
/* Reverse the string */
reverse_ = REVERSE('Hello');
  
/* Return the nth word */
nth_letter_ = SCAN('Learn SAS Now',2);
run;

proc print data = character_functions noobs;
run;
</pre>
<p>When the above code is run, we get the following output &minus;</p>
<img src="/sas/images/char_funcs_result.JPG" alt="char_funcs_result" />
<h2>Truncation Functions</h2>
<p>These are the functions used to truncate numeric values.</p>
<h3>Examples</h3>
<p>The below SAS program shows the use of truncation functions.</p>
<pre class="prettyprint notranslate">
data trunc_functions;

/* Nearest greatest integer */
ceil_ = CEIL(11.85);
  
/* Nearest greatest integer */
floor_ = FLOOR(11.85);
  
/* Integer portion of a number */
int_ = INT(32.41);
  
/* Round off to nearest value */
round_ = ROUND(5621.78);
run;

proc print data = trunc_functions noobs;
run;
</pre>
<p>When the above code is run, we get the following output &minus;</p>
<img src="/sas/images/trunc_funcs_result.JPG" alt="trunc_funcs_result" />
<h2>Miscellaneous Functions</h2>
<p>Let us now understand the miscellaneous functions of SAS with some examples.</p>
<h3>Examples</h3>
<p>The below SAS program shows the use of Miscellaneous functions.</p>
<pre class="prettyprint notranslate">
data misc_functions;

/* Nearest greatest integer */
state2=zipstate('01040');
 
/* Amortization calculation */
payment = mort(50000, . , .10/12,30*12);

proc print data = misc_functions noobs;
run;
</pre>
<p>When the above code is run, we get the following output &minus;</p>
<img src="/sas/images/Misc_funcs_result.JPG" alt="Misc_funcs_result" />
<h1>SAS - Input Methods</h1>
<p>The input methods are used to read the raw data. The raw data may be from an external source or from in stream datalines. The input statement creates a variable with the name that you assign to each field. So you have to create a variable in the Input Statement. The same variable will be shown in the output of SAS Dataset. Below are different input methods available in SAS.</p>
<ul class="list">
<li>List Input Method</li>
<li>Named Input Method</li>
<li>Column Input Method</li>
<li>Formatted Input Method</li>
</ul>
<p>The details of each input method is described as below.</p>
<h2>List Input Method</h2>
<p>In this method the variables are listed with the data types. The raw data is carefully analysed so that the order of the variables declared matches the data. The delimiter (usually space) should be uniform between any pair of adjacent columns. Any missing data will cause problem in the output as the result will be wrong.</p>
<h3>Example</h3>
<p>The following code and the output shows the use of list input method.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT   EMPID ENAME $ DEPT $ ;
DATALINES;
1 Rick  IT
2 Dan  OPS
3 Tusar  IT
4 Pranab  OPS
5 Rasmi  FIN
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>On running the bove code we get the following output.</p>
<img src="/sas/images/list_n_named_input.JPG" alt="list_n_named_input" />
<h2>Named Input Method</h2>
<p>In this method the variables are listed with the data types. The raw data is modified to have variable names declared in front of the matching data. The delimiter (usually space) should be uniform between any pair of adjacent columns.</p>
<h3>Example</h3>
<p>The following code and the output show the use of Named Input Method.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT   
EMPID= ENAME= $ DEPT= $ ;
DATALINES;
EMPID = 1 ENAME = Rick  DEPT = IT
EMPID = 2 ENAME = Dan  DEPT = OPS
EMPID = 3 ENAME = Tusar  DEPT = IT
EMPID = 4 ENAME = Pranab  DEPT = OPS
EMPID = 5 ENAME = Rasmi  DEPT = FIN
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>On running the bove code we get the following output.</p>
<img src="/sas/images/list_n_named_input.JPG" alt="list_n_named_input"/>
<h2>Column Input Method</h2>
<p>In this method the variables are listed with the data types and width of the columns which specify the value of the single column of data. For example if an employee name contains maximum 9 characters and each employee name starts at 10th column, then the column width for employee name variable will be 10-19.</p>
<h3>Example</h3>
<p>Following  code shows the use of Column Input Method.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT   EMPID 1-3 ENAME $ 4-12 DEPT $ 13-16;
DATALINES;
14 Rick     IT 
241Dan      OPS 
30 Sanvi    IT 
410Chanchal OPS 
52 Piyu     FIN 
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>When we execute above code, it produces following result &minus;</p>
<img src="/sas/images/column_n_formatted_input.JPG" alt="column_n_formatted_input"/>
<h2>Formatted Input Method</h2>
<p>In this method the variables are read from a fixed starting point until a space is encountered. As every variable has a fixed starting point, the number of columns between any pair of variables becomes the width of the first variable. The character '@n' is used to specify the starting column position of a variable as the nth column.</p>
<h3>Example</h3>
<p>The following code shows the use of Formatted Input Method</p>
<pre class="result notranslate">
DATA TEMP;
INPUT   @1 EMPID $ @4 ENAME $ @13 DEPT $ ;
DATALINES;
14 Rick     IT 
241 Dan      OPS 
30 Sanvi    IT 
410 Chanchal OPS 
52 Piyu     FIN 
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>When we execute above code, it produces following result &minus;</p>
<img src="/sas/images/column_n_formatted_input.JPG" alt="column_n_formatted_input" />
<h1>SAS - Macros</h1>
<p>SAS has a powerful programming feature called <b>Macros</b> which allows us to avoid repetitive sections of code and to use them again and again when needed. It also helps create dynamic variables within the code that can take different values for different run instances of the same code. Macros can also be declared for blocks of code which will be reused multiple times in a similar manner to macro variables. We will see both of these in the below examples.</p>
<h2>Macro variables</h2>
<p>These are the variables which hold a value to be used again and again by a SAS program. They are declared at the beginning of a SAS program and called out later in the body of the program. They can be Global or Local in scope.</p>
<h3>Global Macro variable</h3>
<p>They are called global macro variables because they can accessed by any SAS program available in the SAS environment. In general they are the system assigned variables which are accessed by multiple programs. A general example is the system date.</p>
<h3>Example</h3>
<p>Below is a example of the SAS variable called SYSDATE which represents the system date. Consider a scenario to print the system date in the title of the SAS report every day the report is generated. The title will show the current date and day without we coding any values for them. We use the in-built SAS data set called CARS available in the SASHELP library.</p>
<pre class="result notranslate">
proc print data = sashelp.cars;
where make = 'Audi' and type = 'Sports' ;
 TITLE "Sales as of &amp;SYSDAY &amp;SYSDATE";
run;
</pre>
<p>When the above code is run we get the following output.</p>
<img src="/sas/images/global_macro_result.JPG" alt="global_macro_result" />
<h3>Local Macro variable</h3>
<p>These variables can be accessed by SAS programs in which they are declared as part of the program. They are typically used to supply different varaibels to the same SAS statements sl that they can process different observations of a data set.</p>
<h3>Syntax</h3>
<p>The local variables are decalred with below syntax.</p>
<pre class="result notranslate">
% LET (Macro Variable Name) = Value;
</pre>
<p>Here the Value field can take any numeric, text or date value as required by the program. The Macro variable name is any valid SAS variable.</p>
<h3>Example</h3>
<p>The variables are used by the SAS statements using the <b>& </b> character appended at the beginning of the variable name. Below program gets us all the observation of the make 'Audi' and type 'Sports'. In case we want the result of <b>different make</b>, we need to change the value of the variable <b>make_name</b> without changing any other part of the program. In case of bring programs this variable can be referred again and again in any SAS statements.</p>
<pre class="result notranslate">
%LET make_name = 'Audi';
%LET type_name = 'Sports';
proc print data = sashelp.cars;
where make = &amp;make_name and type = &amp;type_name ;
 TITLE "Sales as of &amp;SYSDAY &amp;SYSDATE";
run;
</pre>
<p>When the above code is run we get the same output as the previous program. But let’s change the <b>type name</b> to <b>'Wagon'</b> and run the same program. We will get the below result.</p>
<img src="/sas/images/local_macro_result.JPG" alt="local_macro_result" />
<h2>Macro Programs</h2>
<p>Macro is a group of SAS statements that is referred by a name and to use it in program anywhere, using that name. It starts with a %MACRO statement and ends with %MEND statement.</p>
<h3>Syntax</h3>
<p>The local variables are declared with below syntax.</p>
<pre class="result notranslate">
# Creating a Macro program.
%MACRO &lt;macro name&gt;(Param1, Param2,….Paramn);

Macro Statements;

%MEND;

# Calling a Macro program.
%MacroName (Value1, Value2,…..Valuen);
</pre>
<h3>Example</h3>
<p>The below program decalres a group of SAT staemnets under a macro named <b>'show_result'; </b>This Macro is being called by other SAS statements.</p>
<pre class="result notranslate">
%MACRO show_result(make_ , type_);
proc print data = sashelp.cars;
where make = "&amp;make_" and type = "&amp;type_" ;
TITLE "Sales as of &amp;SYSDAY &amp;SYSDATE";
run;
%MEND;

%show_result(BMW,SUV);
</pre>
<p>When the above code is run we get the following output.</p>
<img src="/sas/images/program_macro_result.JPG" alt="program_macro_result" />
<h2>Commonly Used Macros</h2>
<p>SAS has many MACRO statements which are in-built in the SAS programming language. They are used by other SAS programs without explicitly declaring them.Common examples are - terminating a program when some condition is met or capturing the runtime value of a variable in the program log. Below are some examples.</p>
<h2>Macro %PUT</h2>
<p>This macro statement writes text or macro variable information to the SAS log. In the below example the value of the variable 'today' is written to the program log.</p>
<pre class="result notranslate">
data _null_;
CALL SYMPUT ('today',
TRIM(PUT("&amp;sysdate"d,worddate22.)));
run;
%put &amp;today;
</pre>
<p>When the above code is run we get the following output.</p>
<img src="/sas/images/macro_put.JPG" alt="macro_put" />
<h2>Macro %RETURN</h2>
<p>Execution of this macro causes normal termination of the currently executing macro when certain condition evaluates to be true. In the below examplewhen the value of the variable <b>"val"</b> becomes 10, the macro terminates else it contnues.</p>
<pre class="result notranslate">
%macro check_condition(val);
   %if &amp;val = 10 %then %return;

   data p;
      x = 34.2;
   run;  

%mend check_condition;  

%check_condition(11)  ;
</pre>
<p>When the above code is run we get the following output.</p>
<img src="/sas/images/macro_return.JPG" alt="macro_return" />
<h2>Macro %END</h2>
<p>This macro definition contains a <b>%DO %WHILE</b> loop that ends, as required, with a %END statement. In the below example the macro named test takes a user input and runs the DO loop using this input value.
The end of DO loop is achieved through the %end statement while the end of macro is achieved through %mend statement.</p>
<pre class="result notranslate">
%macro test(finish);
   %let i = 1;
   %do %while (&amp;i &lt;&amp;finish);
      %put the value of i is &amp;i;
      %let i=%eval(&amp;i+1);
   %end;
%mend test;
%test(5)
</pre>
<p>When the above code is run we get the following output.</p>
<img src="/sas/images/macro_do_finish.JPG" alt="macro_do_finish" />
<h1>SAS - Date &amp; Times</h1>
<p>IN SAS dates are a special case of numeric values. Each day is assigned a specific numeric value starting from 1st January 1960. This date is assigned the date value 0 and the next date has a date value of 1 and so on. The previous days to this date are represented by -1 , -2 and so on. With this approach SAS can represent any date in future and any date in past.</p>
<p>When SAS reads the data from a source it converts the data read into a specific date format as specified the date format. The variable to store the date value is declared with the proper informat required. The output date is shown by using the output data formats.</p>
<h3>SAS Date Informat</h3>
<p>The source data can be read properly by using specific date informats as shown below. The digit at the end of the informat indicates the minimum width of the date string to be read completely using the informat. A smaller width will give incorrect result. with SAS V9, there is a generic date format <b>anydtdte15.</b> which can process any date input.</p>
<table class="table table-bordered" style="text-align:center">
<tr>
<th style="text-align:center">Input Date</th>
<th style="text-align:center">Date width</th>
<th style="text-align:center">Informat</th>
</tr>
<tr>
<td>03/11/2014</td>
<td>10</td>
<td>mmddyy10.</td>
</tr>
<tr>
<td>03/11/14</td>
<td>8</td>
<td>mmddyy8.</td>
</tr>
<tr>
<td>December 11, 2012</td>
<td>20</td>
<td>worddate20.</td>
</tr>
<tr>
<td>14mar2011</td>
<td>9</td>
<td>date9.</td>
</tr>
<tr>
<td>14-mar-2011</td>
<td>11</td>
<td>date11.</td>
</tr>
<tr>
<td>14-mar-2011</td>
<td>15</td>
<td>anydtdte15.</td>
</tr>
</table>
<h2>Example</h2>
<p>The below code shows the reading of different date formats. Please note the all the output values are just numbers as we have not applied any format statement to the output values.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT @1 Date1 date11. @12 Date2 anydtdte15. @23 Date3 mmddyy10.   ;
DATALINES;
02-mar-2012 3/02/2012 3/02/2012
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/date_time_1.JPG" alt="date_time_1" />
<h2>SAS Date output format</h2>
<p>The dates after being read , can be converted to another format as required by the display. This is achieved using the format statement for the date types. They take the same formats as informats.</p>
<h3>Example</h3>
<p>In the below exampel the date is read in one format but displayed in another format.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT  @1 DOJ1 mmddyy10. @12 DOJ2 mmddyy10.;
format  DOJ1 date11.  DOJ2 worddate20. ;
DATALINES;
01/12/2012 02/11/1998 
;
PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/date_time_2.JPG" alt="date_time_2"/>
<h1>SAS - Read Raw Data</h1>
<p>SAS can read data from various sources which includes many file formats. The file formats used in SAS environment is discussed below.</p>
<ul class="list">
<li>ASCII(Text) Data Set</li>
<li>Delimited Data</li>
<li>Excel Data</li>
<li>Hierarchical Data</li>
</ul>
<h2>Reading ASCII(Text) Data Set</h2>
<p>These are the files which contain the data on text format. The data is usually delimited by a space, but there can be different types of delimiters also which SAS can handle. Let’s consider an ASCII file containing the employee data. We read this file using the <b>Infile</b> statement available in SAS.</p>
<h3>Example</h3>
<p>In the below example we read the data file named <b>emp_data.txt</b> from the local environment.</p>
<pre class="result notranslate">
data TEMP; 
   infile 
   '/folders/myfolders/sasuser.v94/TutorialsPoint/emp_data.txt'; 
   input empID empName $ Salary Dept $ DOJ date9. ;
   format DOJ date9.;
   run;
   PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/read_raw_data1.JPG" alt="read_raw_data1" />
<h2>Reading Delimited Data</h2>
<p>These are the data files in which the column values are separated by a delimiting character like a comma or pipeline etc. In this case we use the <b>dlm</b> option in the <b>infile</b> statement.</p>
<h3>Example</h3>
<p>In the below example we read the data file named emp.csv from the local environment.</p>
<pre class="result notranslate">
data TEMP; 
   infile 
   '/folders/myfolders/sasuser.v94/TutorialsPoint/emp.csv' dlm=","; 
   input empID empName $ Salary Dept $ DOJ date9. ;
   format DOJ date9.;
   run;
   PROC PRINT DATA = TEMP;
RUN;
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/read_raw_data1.JPG" alt="read_raw_data1" />
<h2>Reading Excel Data</h2>
<p>SAS can directly read an excel file using the import facility. As seen in the chapter SAS data sets, it can handle a wide variety of file types including MS excel. Assuming the file emp.xls is available locally in the SAS environment.</p>
<h3>Example</h3>
<pre class="result notranslate">
FILENAME REFFILE
"/folders/myfolders/TutorialsPoint/emp.xls"
TERMSTR = CR;

PROC IMPORT DATAFILE = REFFILE
DBMS = XLS
OUT = WORK.IMPORT;
GETNAMES = YES;
RUN;
PROC PRINT DATA = WORK.IMPORT RUN;
</pre>
<p> The above code reads the data from excel file and gives the same output as above two file types.</p>
<h2>Reading Hierarchical Files</h2>
<p>In these files the data is present in hierarchical format. For a given observation there is a header record below which many detail records are mentioned. The number of details records can vary from one observation to another. Below is an illustration of a hierarchical file.</p>
<p>In the below file the details of each employee under each department is listed. The first record is the header record mentioning the department and the next record few records starting with DTLS are the details record.</p>
<pre class="result notranslate">
DEPT:IT 
DTLS:1:Rick:623 
DTLS:3:Mike:611 
DTLS:6:Tusar:578 
DEPT:OPS
DTLS:7:Pranab:632
DTLS:2:Dan:452
DEPT:HR
DTLS:4:Ryan:487
DTLS:2:Siyona:452
</pre>
<h3>Example</h3>
<p>To read the hierarchical file we use the below code in which we identify the header record with an IF clause and use a do loop to process the details record.</p>
<pre class="result notranslate">
data employees(drop = Type);
   length Type $ 3  Department
      empID $ 3 empName $ 10 Empsal 3 ;
   retain Department;
   infile 
   '/folders/myfolders/TutorialsPoint/empdtls.txt' dlm = ':';
   input Type $ @;
   if Type = 'DEP' then 
      input Department $;
   else do;
      input empID  empName $ Empsal ;
      output;
   end;
run;

   PROC PRINT DATA = employees;
RUN;
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/read_heirarchial_data2.JPG" alt="read_heirarchial_data2"/>
<h1>SAS - Write Data Sets</h1>
<p>Similar to reading datasets, SAS can write datasets in different formats. It can write data from SAS files to normal text file.These files can be read by other software programs. SAS uses <b>PROC EXPORT</b> to write data sets.</p>
<h2>PROC EXPORT</h2>
<p>It is a SAS inbuilt procedure used to export the SAS data sets for writing the data into files of different formats.</p>
<h3>Syntax</h3>
<p>The basic syntax for writing the procedure in SAS is &minus;</p>
<pre class="result notranslate">
PROC EXPORT 
DATA = libref.SAS data-set (SAS data-set-options)
OUTFILE = "filename" 
DBMS = identifier LABEL(REPLACE);
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>SAS data-set</b> is the data set name which is being exported.
SAS can share the data sets from its environment with other applications by creating files which can be read by different operating systems. It uses the inbuilt EXPORT function to out the data set files in a variety of formats. In this chapter we will see the writing of SAS data sets using <b>proc export</b> along with the options <b>dlm </b>and <b>dbms</b>.</p></li>
<li><p><b>SAS data-set-options</b> is used to specify a subset of columns to be exported.</p></li>
<li><p><b>filename</b> is the name of the file to which the data is written into.</p></li>
<li><p><b>identifier</b> is used to mention the delimiter that will be written into the file.</p></li>
<li><p><b>LABEL</b> option is used to mention the name of the variables written to the file.</p></li>
</ul>
<h3>Example</h3>
<p>We will use the SAS data set named cars available in the SASHELP library. We export it as a space delimited text file with the code as shown in the following program.</p>
<pre class="result notranslate">
proc export data = sashelp.cars
   outfile = '/folders/myfolders/sasuser.v94/TutorialsPoint/car_data.txt'
   dbms = dlm;
   delimiter = ' ';
   run;
</pre>
<p>On executing the above code we can see the output as a text file and right click on it to see its content as shown below.</p>
<img src="/sas/images/write_data_set_result.JPG" alt="write_data_set_result" />
<h2>Writing a CSV file</h2>
<p>In order to write a comma delimited file we can use the dlm option with a value "csv". The following code writes the file car_data.csv.</p>
<pre class="result notranslate">
proc export data = sashelp.cars
   outfile = '/folders/myfolders/sasuser.v94/TutorialsPoint/car_data.csv'
   dbms = csv;
   run;
</pre>
<p>On executing the above code we get the below output.</p>
<img src="/sas/images/write_data_set_csv.JPG" alt="write_data_set_csv" />
<h2>Writing a tab delimited file</h2>
<p>In order to write a tab delimited file we can use the <b>dlm</b> option with a value "tab". The following code writes the file <b>car_tab.txt.</b></p>
<pre class="result notranslate">
proc export data = sashelp.cars
   outfile = '/folders/myfolders/sasuser.v94/TutorialsPoint/car_tab.txt'
   dbms = csv;
   run;
</pre>
<p>Data can also be written as HTML file which we will see under the output delivery system chapter.</p>
<h1>SAS - Concatenate Data Sets</h1>
<p>Multiple SAS data sets can be concatenated to give a single data set using the <b>SET</b> statement.  The total number of observations in the concatenated data set is the sum of the number of observations in the original data sets. The order of observations is sequential. All observations from the first data set are followed by all observations from the second data set, and so on.</p>
<p>Ideally all the combining data sets have same variables, but in case they have different number of variables, then in the result all the variables appear, with missing values for the smaller data set.</p>
<h3>Syntax</h3>
<p>The basic syntax for SET statement in SAS is &minus;</p>
<pre class="result notranslate">
SET data-set 1 data-set 2 data-set 3.....;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>data-set1,data-set2</b> are dataset names written one after another.</p></li>
</ul>
<h3>Example</h3>
<p>Consider the employee data of an organization which is available in two different data sets, one for the IT department and another for Non-It department. To get the complete details of all the employees we concatenate both the data sets using the SET statement shown as below.</p>
<pre class="result notranslate">
DATA ITDEPT; 
   INPUT empid name $ salary  ; 
DATALINES; 
1 Rick 623.3 
3 Mike 611.5 
6 Tusar 578.6 
; 
RUN; 
DATA NON_ITDEPT; 
   INPUT empid name $ salary  ; 
DATALINES; 
2 Dan 515.2 
4 Ryan 729.1 
5 Gary 843.25 
7 Pranab 632.8 
8 Rasmi 722.5 
RUN; 
DATA All_Dept; 
   SET ITDEPT NON_ITDEPT; 
RUN; 
PROC PRINT DATA = All_Dept; 
RUN;  
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/concateate1.JPG" alt="concateate1"/>
<h2>Scenarios</h2>
<p>When we have many variations in the data sets for concatenation, the result of variables can differ but the total number of observations in the concatenated data set is always the sum of the observations in each data set. We will consider below many scenarios on this variation.</p>
<h2>Different number of variables</h2>
<p>If one of the original data set has more number of variables then another, then the data sets still get combined but in the smaller data set those variables appear as missing.</p>
<h3>Example</h3>
<p>In below example the first data set has an extra variable named DOJ. In the result the value of DOJ for second data set will appear as missing.</p>
<pre class="result notranslate">
DATA ITDEPT; 
   INPUT empid name $ salary DOJ date9.  ; 
DATALINES; 
1 Rick 623.3 02APR2001
3 Mike 611.5 21OCT2000
6 Tusar 578.6 01MAR2009  
; 
RUN; 
DATA NON_ITDEPT; 
   INPUT empid name $ salary  ; 
DATALINES; 
2 Dan 515.2 
4 Ryan 729.1 
5 Gary 843.25 
7 Pranab 632.8 
8 Rasmi 722.5 
RUN; 
DATA All_Dept; 
   SET ITDEPT NON_ITDEPT; 
RUN; 
PROC PRINT DATA = All_Dept; 
RUN;  
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/concateate2.JPG" alt="concateate2"/>
<h2>Different variable name</h2>
<p>In this scenario the data sets have same number of variables but a variable name differs between them. In that case a normal concatenation will produce all the variables
in the result set and giving missing results for the two variables which differ. While we may not change the variable name in the original data sets we can apply the RENAME function in the concatenated data set we create. That will produce the same result as a normal concatenation but of course with one new variable name in place of two different variable names present in the original data set.</p>
<h3>Example</h3>
<p> In the below example data set ITDEPT has the variable name <b>ename</b> whereas the data set <b>NON_ITDEPT </b>has the variable name <b>empname.</b> But both of these variables represent the same type(character). We apply the <b>RENAME</b> function in the SET statement as shown below.</p>
<pre class="result notranslate">
DATA ITDEPT; 
   INPUT empid ename $ salary  ; 
DATALINES; 
1 Rick 623.3 
3 Mike 611.5 
6 Tusar 578.6 
; 
RUN; 
DATA NON_ITDEPT; 
   INPUT empid empname $ salary  ; 
DATALINES; 
2 Dan 515.2 
4 Ryan 729.1 
5 Gary 843.25 
7 Pranab 632.8 
8 Rasmi 722.5 
RUN; 
DATA All_Dept; 
   SET ITDEPT(RENAME =(ename = Employee) ) NON_ITDEPT(RENAME =(empname = Employee) ); 
RUN; 
PROC PRINT DATA = All_Dept; 
RUN;  
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/concateate3.JPG" alt="concateate3"/>
<h2>Different variable lengths</h2>
<p>If the variable lengths in the two data sets is different than the concatenated data set will have values in which some data is truncated for the variable with smaller length. It happens if the first data set has a smaller length. To solve this we apply the higher length to both the data set as shown below.</p>
<h3>Example</h3>
<p>In the below example the variable <b>ename</b> is of length 5 in the first data set and 7 in the second. When concatenating we apply the LENGTH statement in the concatenated data set to set the ename length to 7.</p>
<pre class="result notranslate">
DATA ITDEPT; 
   INPUT  empid 1-2 ename $ 3-7 salary 8-14  ; 
DATALINES; 
1 Rick  623.3 
3 Mike  611.5 
6 Tusar 578.6 
; 
RUN;
DATA NON_ITDEPT; 
   INPUT  empid 1-2 ename $ 3-9  salary 10-16 ; 
DATALINES; 
2 Dan    515.2 
4 Ryan   729.1 
5 Gary   843.25
7 Pranab 632.8 
8 Rasmi  722.5 
RUN; 
DATA All_Dept; 
   LENGTH ename $ 7   ;
   SET ITDEPT  NON_ITDEPT ; 
RUN; 
PROC PRINT DATA = All_Dept; 
RUN;  
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/concateate4.JPG" alt="concateate4" />
<h1>SAS - Merge Data Sets</h1>
<p>Multiple SAS data sets can be merged based on a specific common variable to give a single data set. This is done using the <b>MERGE</b> statement and <b>BY</b> statement. The total number of observations in the merged data set is often less than the sum of the number of observations in the original data sets. It is because the variables form both data sets get merged as one record based when there is a match in the value of the common variable.</p>
<p>There are two Prerequisites for merging data sets given below &minus;</p> 
<ul class="list">
<li>input data sets must have at least one common variable to merge on.</li>
<li>input data sets must be sorted by the common variable(s) that will be used to merge on.</li>
</ul>
<h3>Syntax</h3>
<p>The basic syntax for MERGE and BY statement in SAS is &minus;</p>
<pre class="result notranslate">
MERGE Data-Set 1 Data-Set 2
BY Common Variable
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Data-set1,Data-set2</b> are data set names written one after another.</p></li>
<li><p><b>Common Variable</b> is the variable based on whose matching values the data sets will be merged.</p></li>
</ul>
<h2>Data Merging</h2>
<p>Let us understand data merging with the help of an example.</p>
<h3>Example</h3>
<p>Consider two SAS data sets one containing the employee ID with name and salary and another containing employee ID with employee ID and department. In this case to get the complete information for each employee we can merge these two data sets. The final data set will still have one observation per employee but it will contain both the salary and department variables.</p>
<pre class="result notranslate">
# Data set 1	
ID NAME SALARY	
1 Rick 623.3		 
2 Dan 515.2 		
3 Mike 611.5 		
4 Ryan 729.1 
5 Gary 843.25 
6 Tusar 578.6 
7 Pranab 632.8 
8 Rasmi 722.5 

# Data set 2
ID DEPT
1 IT 
2 OPS
3 IT 
4 HR 
5 FIN 
6 IT 
7 OPS
8 FIN 

# Merged data set
ID NAME SALARY DEPT	
1 Rick 623.3	IT 		 
2 Dan 515.2 	OPS	
3 Mike 611.5 	IT 	
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
6 Tusar 578.6   IT 
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
</pre>
<p>The above result is achieved by using the following code in which the common variable (ID) is used in the BY statement. Please note that the observations in both the datasets are already sorted in ID column.</p>
<pre class="result notranslate">
DATA SALARY; 
   INPUT empid name $ salary  ; 
DATALINES; 
1 Rick 623.3		 
2 Dan 515.2 		
3 Mike 611.5 		
4 Ryan 729.1 
5 Gary 843.25 
6 Tusar 578.6 
7 Pranab 632.8 
8 Rasmi 722.5 
;
RUN; 
DATA DEPT; 
   INPUT empid dEPT $ ; 
DATALINES; 
1 IT 
2 OPS
3 IT 
4 HR 
5 FIN 
6 IT 
7 OPS
8 FIN 
;
RUN; 
DATA All_details;
MERGE SALARY DEPT;
BY (empid);
RUN;
PROC PRINT DATA = All_details; 
RUN;  
</pre>
<h2>Missing Values in the Matching Column</h2>
<p>There may be cases when some values of the common variable will not match between the data sets. In such cases the data sets still get merged but give missing values in the result.</p>
<h3>Example</h3>
Consider the case of employee ID 3 missing from the dataset salary and employee ID 6 missing form data set DEPT. When the above code is applied, we get the below result.</p>
<pre class="result notranslate">
ID NAME SALARY DEPT	
1 Rick 623.3	IT 		 
2 Dan 515.2 	OPS	
3 .		.		IT
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
6 Tusar 578.6   .
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
</pre>
<h2>Merging only the Matches</h2>
<p>To avoid the missing values in the result we can consider keeping only the observations with matched values for the common variable. That is achieved by using the 
<b>IN</b> statement. The merge statement of the SAS program needs to be changed.</p>
<h3>Example</h3>
<p>In the below example, the <b>IN</b>= value keeps only the observations where the values from both the data sets <b>SALARY</b> and <b>DEPT</b> match.</p>
<pre class="result notranslate">
DATA All_details;
MERGE SALARY(IN = a) DEPT(IN = b);
BY (empid);
IF a = 1 and b = 1;
RUN;
PROC PRINT DATA = All_details; 
RUN;  
</pre>
<p>Upon execution of the above SAS program with the above changed part, we get the following output.</p>
<pre class="result notranslate">
1 Rick 623.3	IT 		 
2 Dan 515.2 	OPS	
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
</pre>
<h1>SAS - Subsetting Data Sets</h1>
<p>Subsetting a SAS data set means extracting a part of the data set by selecting a fewer number of variables or fewer number of observations or both. While subsetting of variables is done by using <b>KEEP</b> and <b>DROP</b> statement, the sub setting of observations is done using <b>DELETE</b> statement.</p>
<p>Also the resulting data from the subsetting operation is held in a new data set which can be used for further analysis. Sub setting is mainly used for the purpose of analyzing a part of the data set without using those variables or observations which may not be relevant to the analysis.</p>
<h2>Subsetting Variables</h2>
<p>In this method we extract only few variables from the entire data set.</p>
<h3>Syntax</h3>
<p>The basic syntax for sub setting variables in SAS is &minus;</p>
<pre class="result notranslate">
KEEP var1 var2 ... ;
DROP var1 var2 ... ;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>var1 and var2</b> are the variable names from the data set which needs to be kept or dropped.<p></li>
</ul>
<h3>Example</h3>
<p>Consider the below SAS data set containing the employee details of an organization. If we are interested only in getting the Name and Department values from the data set, then we can use the below code.</p>
<pre class="result notranslate">
DATA Employee; 
   INPUT empid ename $ salary DEPT $ ; 
DATALINES; 
1 Rick 623.3 	IT 		 
2 Dan 515.2 	OPS	
3 Mike 611.5 	IT 	
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
6 Tusar 578.6   IT 
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
;
RUN;
DATA OnlyDept;
   SET Employee;
   KEEP ename DEPT;
   RUN;
   PROC PRINT DATA = OnlyDept; 
RUN; 
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/subsetting1.JPG" alt="subsetting1" />
<p>The same result can be obtained by dropping the variables that are not required. The below code illustrates this.</p>
<pre class="result notranslate">
DATA Employee; 
   INPUT empid ename $ salary DEPT $ ; 
DATALINES; 
1 Rick 623.3 	IT 		 
2 Dan 515.2 	OPS	
3 Mike 611.5 	IT 	
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
6 Tusar 578.6   IT 
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
;
RUN;
DATA OnlyDept;
   SET Employee;
   DROP empid salary;
   RUN;
   PROC PRINT DATA = OnlyDept; 
RUN; 
</pre>
<h2>Subsetting Observations</h2>
<p>In this method we extract only few observations from the entire data set.</p>
<h3>Syntax</h3>
<p>We use PROC FREQ which keeps track of the observations selected for the new data set.</p>
<p>The syntax for sub setting observations is &minus;</p>
<pre class="result notranslate">
IF Var Condition THEN DELETE ;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Var</b> is the name of the variable based on whose value the observations will be deleted using the specified condition.</p></li>
</ul>
<h3>Example</h3>
<p>Consider the below SAS data set containing the employee details of an organization. If we are interested only in getting the data for employees with salary greater than 700,then we use the below code.</p>
<pre class="result notranslate">
DATA Employee; 
   INPUT empid name $ salary DEPT $ ; 
DATALINES; 
1 Rick 623.3	IT 		 
2 Dan 515.2 	OPS	
3 Mike 611.5 	IT 	
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
6 Tusar 578.6   IT 
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
;
RUN;
DATA OnlyDept;
   SET Employee;
   IF salary &lt; 700 THEN DELETE;
   RUN;
   PROC PRINT DATA = OnlyDept; 
RUN; 
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/subsetting2.JPG" alt="subsetting2" />
<h1>SAS - Format Data Sets</h1>
<p>Sometimes we prefer to show the analyzed data in a format which is different from the format in which it is already present in the data set. For example we want to add the dollar sign and two decimal places to a variable which has price information. Or we may want to show a text variable, all in uppercase. We can use <b>FORMAT</b> to apply the in-built SAS formats and <b>PROC FORMAT</b> is to apply user defined formats. Also a single format can be applied to multiple variables.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying in-built SAS formats is &minus;</p>
<pre class="result notranslate">
format variable name format name
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>variable name</b> is the variable name used in dataset.</p></li>
<li><p><b>format name</b> is the data format to be applied on the variable.</p></li>
</ul>
<h3>Example</h3>
<p>Let's consider the below SAS data set containing the employee details of an organization. We wish to show all the names in uppercase. The <b>formatstatement</b>  is used to achieve this.</p>
<pre class="result notranslate">
DATA Employee; 
   INPUT empid name $ salary DEPT $ ; 
   format name $upcase9. ;
DATALINES; 
1 Rick 623.3	IT 		 
2 Dan 515.2 	OPS	
3 Mike 611.5 	IT 	
4 Ryan 729.1    HR 
5 Gary 843.25   FIN 
6 Tusar 578.6   IT 
7 Pranab 632.8  OPS
8 Rasmi 722.5   FIN 
;
RUN;
   PROC PRINT DATA = Employee; 
RUN; 
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/format1.JPG" alt="format1" />
<h2>Using PROC FORMAT</h2>
<p>We can also use <b>PROC FORMAT</b> to format data. In the below example we assign new values to the variable DEPT exapnding the name of the department.</p>
<pre class="result notranslate">
DATA Employee; 
   INPUT empid name $ salary DEPT $ ; 

DATALINES; 
1 Rick 623.3 IT 		 
2 Dan 515.2 OPS
3 Mike 611.5 IT 	
4 Ryan 729.1 HR 
5 Gary 843.25 FIN 
6 Tusar 578.6 IT 
7 Pranab 632.8 OPS
8 Rasmi 722.5 FIN 
;
proc format;
value $DEP 'IT' = 'Information Technology'
      'OPS'= 'Operations' ;
RUN;
   PROC PRINT DATA = Employee; 
   format name $upcase9. DEPT $DEP.; 
RUN; 
</pre>
<p>When the above code is executed, we get the following output.</p>
<img src="/sas/images/format2.JPG" alt="format2" />
<h1>SAS - SQL</h1>
<p>SAS offers extensive support to most of the popular relational databases by using SQL queries inside SAS programs. Most of the <b>ANSI SQL</b> syntax is supported. The procedure <b>PROC SQL</b> is used to process the SQL statements. This procedure can not only give back the result of an SQL query, it can also create SAS tables &amp; variables. The example of all these scenarios is described below.</p>
<h3>Syntax</h3>
<p>The basic syntax for using PROC SQL in SAS is &minus;</p>
<pre class="result notranslate">
PROC SQL;
SELECT Columns
FROM TABLE
WHERE Columns
GROUP BY Columns
;
QUIT;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p>the SQL query is written below the PROC SQL statement followed by the QUIT statement.</p></li>
</ul>
<p>Below we will see how this SAS procedure can be used for the <b>CRUD</b> (Create, Read, Update and Delete)operations in SQL.</p>
<h2>SQL Create Operation</h2>
<p>Using SQL we can create new data set form raw data. In the below example, first we declare a data set named TEMP containing the raw data.
 Then we write a SQL query to create a table from the variables of this data set.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT ID $ NAME $ SALARY DEPARTMENT $;
DATALINES;
1 Rick 623.3 IT
2 Dan 515.2 Operations
3 Michelle 611 IT
4 Ryan 729 HR
5 Gary 843.25 Finance
6 Nina 578 IT
7 Simon 632.8 Operations
8 Guru 722.5 Finance
;
RUN;

PROC SQL;
CREATE TABLE EMPLOYEES AS
SELECT * FROM TEMP;
QUIT;

PROC PRINT data = EMPLOYEES;
RUN;
</PRE>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/SQL_create_table.JPG" alt="SQL_create_table" />
<h2>SQL Read Operation</h2>
<p>The Read operation in SQL involves writing SQL SELECT queries to read the data from the tables. In The below program queries the SAS data set named CARS available in the library SASHELP. The query fetches some of the columns of the data set.</p>
<pre class="result notranslate">
PROC SQL;
SELECT make,model,type,invoice,horsepower
FROM 
SASHELP.CARS
;
QUIT;
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/SQL1.JPG" alt="SQL1" />
<h3>SQL SELECT with WHERE Clause</h3>
<p>The below program queries the CARS data set with a <b>where</b> clause. In the result we get only the observation which have make as 'Audi' and type as 'Sports'.</p>
<pre class="result notranslate">
PROC SQL;
SELECT make,model,type,invoice,horsepower
FROM 
SASHELP.CARS
Where make = 'Audi'
and Type = 'Sports'
;
QUIT;
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/SQL_where_clause.JPG" alt="SQL_where_clause" />
<h2>SQL UPDATE Operation</h2>
<p>We can update the SAS table using the SQL Update statement. Below we first create a new table named EMPLOYEES2 and then update it using the SQL UPDATE statement.</p>
<pre class="result notranslate">
DATA TEMP;
INPUT ID $ NAME $ SALARY DEPARTMENT $;
DATALINES;
1 Rick 623.3 IT
2 Dan 515.2 Operations
3 Michelle 611 IT
4 Ryan 729 HR
5 Gary 843.25 Finance
6 Nina 578 IT
7 Simon 632.8 Operations
8 Guru 722.5 Finance
;
RUN;

PROC SQL;
CREATE TABLE EMPLOYEES2 AS
SELECT ID as EMPID,
Name as EMPNAME ,
SALARY as SALARY,
DEPARTMENT as DEPT,
SALARY*0.23 as COMMISION
FROM TEMP;
QUIT;

PROC SQL;
UPDATE EMPLOYEES2
      SET SALARY = SALARY*1.25;
   QUIT;
      PROC PRINT data = EMPLOYEES2;
RUN;
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/proc_sql_update.JPG" alt="proc_sql_update.JPG" />
<h2>SQL DELETE Operation</h2>
<p>The delete operation in SQL involves removing certain values from the table using the SQL DELETE statement. We continue to use the data from the above example and delete the rows from the table in which 
the salary of the employees is greater than 900.</p>
<pre class="result notranslate">
PROC SQL;
DELETE FROM EMPLOYEES2
      WHERE SALARY &gt; 900;
QUIT;
      PROC PRINT data = EMPLOYEES2;
RUN;
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/proc_sql_delete.JPG" alt="proc_sql_delete.JPG" />
<h1>SAS - ODS</h1>
<p>The output from a SAS program can be converted to more user friendly forms like <b>.html</b> or <b>PDF.</b> This is done by using the <b>ODS</b> statement available in SAS. ODS stands for <b>output delivery system.</b> It is mostly used to format the output data of a SAS program to nice reports which are good to look at and understand. That also helps sharing the output with other platforms and soft wares. It can also combine the results from multiple PROC statements in one single file.</p>
<h3>Syntax</h3>
<p>The basic syntax for using the ODS statement in SAS is &minus;</p>
<pre class="result notranslate">
ODS outputtype
PATH path name
FILE = Filename and Path
STYLE = StyleName
;
PROC some proc
;
ODS outputtype CLOSE;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>PATH</b> represents the statement used in case of HTML output. In other types of output we include the path in the filename.</p></li>
<li><p><b>Style</b> represents one of the in-built styles available in the SAS environment.</p></li>
</ul>
<h2>Creating HTML Output</h2>
<p>We create HTML output using the ODS HTML statement.In the below example we create a html file in our desired path. We apply a style available in the styles library. We can see the output file in the mentioned path and we can download it to save in an environment different from the SAS environment. Please note that  we have two proc SQL statements and both their output is captured into a single file.</p>
<pre class="result notranslate">
ODS HTML 
   PATH = '/folders/myfolders/sasuser.v94/TutorialsPoint/'
   FILE = 'CARS2.html'
   STYLE = EGDefault;
proc SQL;
select make, model, invoice 
from sashelp.cars
where make in ('Audi','BMW')
and type = 'Sports'
;
quit;

proc SQL;
select make,mean(horsepower)as meanhp
from sashelp.cars
where make in ('Audi','BMW')
group by make;
quit;

ODS HTML CLOSE; 
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/ods_html_output.JPG" alt="ods_html_output" />
<h2>Creating PDF Output</h2>
<p>In the below example we create a PDF file in our desired path. We apply a style available in the styles library. We can see the output file in the mentioned path and we can download it to save in an environment different from the SAS environment. Please note that  we have two proc SQL statements and both their output is captured into a single file.</p>
<pre class="result notranslate">
ODS PDF 
   FILE = '/folders/myfolders/sasuser.v94/TutorialsPoint/CARS2.pdf'
   STYLE = EGDefault;
proc SQL;
select make, model, invoice 
from sashelp.cars
where make in ('Audi','BMW')
and type = 'Sports'
;
quit;

proc SQL;
select make,mean(horsepower)as meanhp
from sashelp.cars
where make in ('Audi','BMW')
group by make;
quit;

ODS PDF CLOSE; 
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/ods_pdf_output.JPG" alt="ods_pdf_output.JPG" />
<h2>Creating TRF(Word) Output</h2>
<p>In the below example we create a RTF file in our desired path. We apply a style available in the styles library. We can see the output file in the mentioned path and we can download it to save in an environment different from the SAS environment. Please note that  we have two proc SQL statements and both their output is captured into a single file.</p>
<pre class="result notranslate">
ODS RTF 
FILE = '/folders/myfolders/sasuser.v94/TutorialsPoint/CARS.rtf'
STYLE = EGDefault;
proc SQL;
select make, model, invoice 
from sashelp.cars
where make in ('Audi','BMW')
and type = 'Sports'
;
quit;

proc SQL;
select make,mean(horsepower)as meanhp
from sashelp.cars
where make in ('Audi','BMW')
group by make;
quit;

ODS rtf CLOSE; 
</pre>
<p>When the above code is executed we get the following result &minus;</p>
<img src="/sas/images/ods_rtf_output.JPG" alt="ods_rtf_output" />
<h1>SAS - Simulations</h1>
<p>Simulation is a computational technique that uses repeating computation on many different random
samples in order to estimate a statistical quantity. Using SAS we can simulate complex data that have specified statistical properties in  real-world system. We use software to build a model of the system and numerically generate data that you can be used for a better understanding of the behavior of the real-world system. Part of the art of designing a computer simulation model is deciding which aspects of the real-life system are necessary to include in the model so that the data generated by the model can be used to make effective decisions. Because of this complexity, SAS has a dedicated software component for Simulation.</p>
<p>The SAS software component which is used in creating SAS simulation is called <b>SAS Simulation Studio</b>. 
Its graphical user interface provides a full set of tools for building, executing, and analyzing the results of discrete event simulation models.</p>
<p>Different types of statistical distributions on which SAS simulation can be applied is listed below.</p>
<ul class="list">
<li>SIMULATE DATA FROM A CONTINUOUS DISTRIBUTION</li>
<li>SIMULATE DATA FROM A DISCRETE DISTRIBUTION</li>
<li>SIMULATE DATA FROM A MIXTURE OF DISTRIBUTIONS</li>
<li>SIMULATE DATA FROM A COMPLEX DISTRIBUTION</li>
<li>SIMULATE DATA FROM A MULTIVARIATE DISTRIBUTION</li>
<li>APPROXIMATE A SAMPLING DISTRIBUTION</li>
<li>ASSESS REGRESSION ESTIMATES</li>
</ul>
<h1>SAS - Histograms</h1>
<p>A Histogram is graphical display of data using bars of different heights. It groups the various numbers in the data set into many ranges. It also represents the estimation of the probability of distribution of a continuous variable. In SAS the <b>PROC  UNIVARIATE</b>   is used to create histograms with the below options.</p>
<h3>Syntax</h3> 
<p>The basic syntax to create a histogram in SAS is &minus;</p>   
<pre class="result notranslate">
PROC UNIVARAITE DATA = DATASET;
HISTOGRAM variables;
RUN;
</pre>
</p>Following is the description of parameters used &minus;</p>
<ul class="list">
<li><p><b>DATASET</b> is the name of the dataset used.</p></li>
<li><p><b>variables</b> are the values used to plot the histogram.</p></li>
</ul>
<h2>Simple Histogram</h2>
<p>A simple histogram is created by specifying the name of the variable and the range to be considered to group the values.</p>
<h3>Example</h3>
<p>In the below example, we consider the minimum and maximum values of the variable horsepower and take a range of 50. So the values form a group in steps of 50.</p>     
<pre class="result notranslate">
proc univariate data = sashelp.cars;
   histogram horsepower
   / midpoints = 176 to 350 by 50;
run;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/histogram1.JPG" alt="histogram1" />
<h2>Histogram with Curve Fitting</h2>
<p>We can fit some distribution curves into the histogram using additional options.</p>
<h3>Example</h3>
<p> In the below example we fit a distribution curve with mean and standard deviation values mentioned as EST. This option uses and estimate of the parameters.</p>
<pre class="result notranslate">
proc univariate data = sashelp.cars noprint;
histogram horsepower
/ 
normal ( 
   mu = est
   sigma = est
   color = blue
   w = 2.5 
)
barlabel = percent
midpoints = 70 to 550 by 50;
run;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/histogram2.JPG" alt="histogram2" />
<h1>SAS - Bar Charts</h1>
<p>A bar chart represents data in rectangular bars with length of the bar proportional to the value of the variable. SAS uses the procedure <b>PROC SGPLOT</b> to create bar charts. We can draw both simple and stacked bars in the bar chart. In bar chart each of the bars can be given different colors.</p>
<h3>Syntax</h3>
<p>The basic syntax to create a bar-chart in SAS is &minus;</p>  
<pre class="result notranslate">
PROC SGPLOT DATA = DATASET;
VBAR variables;
RUN;
</pre>
</p>Following is the description of parameters used &minus;</p>
<ul class="list">
<li><p><b>DATASET</b> &minus; is the name of the dataset used.</p></li>
<li><p><b>variables</b> &minus; are the values used to plot the histogram.</p></li>
 </ul>
<h2>Simple Bar chart</h2>
<p>A simple bar chart is a bar chart in which a variable from the dataset is represented as bars.</p>
<h3>Example</h3>
<p>The below script will create a bar-chart representing the length of cars as bars.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT make, model, type, invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

proc SGPLOT data = work.cars1;
vbar length ;
title 'Lengths of cars';
run;
quit;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/barchart1.JPG" alt="barchart1" />
<h2>Stacked Bar chart</h2>
<p>A stacked bar chart is a bar chart in which a variable from the dataset is calculated with respect to another variable.</p>
<h3>Example</h3>
<p>The below script will create a stacked bar-chart where the length of the cars are calculated for each car type. We use the group option to specify the second variable.</p>
<pre class="result notranslate">
proc SGPLOT data = work.cars1;
vbar length /group = type ;
title 'Lengths of Cars by Types';
run;
quit;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/barchart2.JPG" alt="barchart2" />
<h2>Clustered Bar chart</h2>
<p>The clustered bar chart is created to show how the values of a variable are spread across a culture.</p>
<h3>Example</h3>
<p>The below script will create a clustered bar-chart where the length of the cars is clustered around the car type.So we see two adjacent bars at length 191, one for the car type 'Sedan' and another for the car type 'Wagon'.</p>
<pre class="result notranslate">
proc SGPLOT data = work.cars1;
vbar length /group = type GROUPDISPLAY = CLUSTER;
title 'Cluster of Cars by Types';
run;
quit;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/barchart3.JPG" alt="barchart3" />
<h1>SAS - Pie Charts</h1>
<p>A pie-chart is a representation of values as slices of a circle with different colors. The slices are labeled and the numbers corresponding to each slice is also represented in the chart.</p>
<p>In SAS the pie chart is created using <b>PROC TEMPLATE </b> which takes parameters to control percentage, labels, color, title etc.</p>
<h3>Syntax</h3>
<p>The basic syntax to create a pie-chart in SAS is &minus;</p>     
<pre class="result notranslate">
PROC TEMPLATE;
   DEFINE STATGRAPH pie;
      BEGINGRAPH;
         LAYOUT REGION;
            PIECHART CATEGORY = variable /
            DATALABELLOCATION = OUTSIDE
            CATEGORYDIRECTION = CLOCKWISE
            START = 180 NAME = 'pie';
            DISCRETELEGEND 'pie' /
            TITLE = ' ';
         ENDLAYOUT;
      ENDGRAPH;
   END;
RUN;
</pre>
</p>Following is the description of parameters used &minus;</p>
<ul class="list">
<li><p><b>variable</b> is the value for which we create the pie chart.</p></li>
</ul>
<h2>Simple Pie Chart</h2>
<p>In this pie chart we take a single variable form the dataset. The pie chart is created with value of the slices representing the fraction of the count of the variable with respect to the total value of the variable.</p>
<h3>Example</h3>
<p>In the below example each slice represents the fraction of the type of car from the total number of cars.</p>
<pre class="prettyprint notranslate">
PROC SQL;
create table CARS1 as
SELECT make, model, type, invoice, horsepower, length, weight
 FROM 
SASHELP.CARS
WHERE make in ('Audi','BMW')
;
RUN;

PROC TEMPLATE;
   DEFINE STATGRAPH pie;
      BEGINGRAPH;
         LAYOUT REGION;
            PIECHART CATEGORY = type /
            DATALABELLOCATION = OUTSIDE
            CATEGORYDIRECTION = CLOCKWISE
            START = 180 NAME = 'pie';
            DISCRETELEGEND 'pie' /
            TITLE = 'Car Types';
         ENDLAYOUT;
      ENDGRAPH;
   END;
RUN;
PROC SGRENDER DATA = cars1
            TEMPLATE = pie;
RUN;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/piechart1.JPG" alt="piechart1" />
<h2>Pie Chart with Data Labels</h2>
<p>In this pie chart we represent both the fractional value as well as the percentage value for each slice. We also change the location of the  label to be inside the chart. The style of appearance of the chart is modified by using the DATASKIN option. It uses one of the inbuilt styles, available in the SAS environment.</p>
<h3>Example</h3>
<pre class="result notranslate">
PROC TEMPLATE;
   DEFINE STATGRAPH pie;
      BEGINGRAPH;
         LAYOUT REGION;
            PIECHART CATEGORY = type /
            DATALABELLOCATION = INSIDE
            DATALABELCONTENT = ALL
            CATEGORYDIRECTION = CLOCKWISE
            DATASKIN = SHEEN 
            START = 180 NAME = 'pie';
            DISCRETELEGEND 'pie' /
            TITLE = 'Car Types';
         ENDLAYOUT;
      ENDGRAPH;
   END;
RUN;
PROC SGRENDER DATA = cars1
            TEMPLATE = pie;
RUN;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/piechart2.JPG" alt="piechart2" />
<h2>Grouped Pie Chart</h2>
<p>In this pie chart the value of the variable presented in the graph is grouped with respect to another variable of the same data set. Each group becomes one circle and the chart has as many concentric circles as the number of groups available.</p>
<h3>Example</h3>
<p>In the below example we group the chart with respect to the variable named "Make". As there are two  values available ("Audi" and "BMW") so we get two concentric circles each representing slices of car types in its own make.</p>
<pre class="result notranslate">
PROC TEMPLATE;
   DEFINE STATGRAPH pie;
      BEGINGRAPH;
         LAYOUT REGION;
            PIECHART CATEGORY = type / Group = make
            DATALABELLOCATION = INSIDE
            DATALABELCONTENT = ALL
            CATEGORYDIRECTION = CLOCKWISE
            DATASKIN = SHEEN 
            START = 180 NAME = 'pie';
            DISCRETELEGEND 'pie' /
            TITLE = 'Car Types';
         ENDLAYOUT;
      ENDGRAPH;
   END;
RUN;
PROC SGRENDER DATA = cars1
            TEMPLATE = pie;
RUN;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/piechart3.JPG" alt="piechart3" />
<h1>SAS - Scatter Plots</h1>
<p>A scatterplot is a type of graph which uses values from two variables plotted in a Cartesian plane. It is usually used to find out the relationship between two variables. In SAS we use <b>PROC SGSCATTER</b> to create scatterplots.</p>
<p>Please note that we create the data set named CARS1 in the first example and use the same data set for all the subsequent data sets. This data set remains in the work library till the end of the SAS session.</p>
<h3>Syntax</h3> 
<p>The basic syntax to create a scatter-plot in SAS is &minus;</p>      
<pre class="result notranslate">
PROC sgscatter  DATA = DATASET;
   PLOT VARIABLE_1 * VARIABLE_2
   / datalabel = VARIABLE group = VARIABLE;
RUN;
</pre>
<p>Following is the description of parameters used &minus;</p>
<ul class="list">
<li><p><b>DATASET</b> is the name of data set.</p></li>
<li><p><b>VARIABLE</b> is the variable used from the dataset.</p></li>
</ul>
<h2>Simple Scatterplot</h2>
<p>In a simple scatterplot we choose two variables form the dataset and group them with respect a third variable. We can also label the data. The result shows how the two variables are scattered in the <b>Cartesian plane.</b></p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
PROC SQL;
create table CARS1 as
SELECT make, model, type, invoice, horsepower, length, weight
FROM 
SASHELP.CARS
WHERE make in ('Audi','BMW')
;
RUN;

TITLE 'Scatterplot - Two Variables';
PROC sgscatter  DATA = CARS1;
   PLOT horsepower*Invoice 
   / datalabel = make group = type grid;
   title 'Horsepower vs. Invoice for car makers by types';
RUN; 
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/sactter_plot1.JPG" alt="sactter_plot1" />
<h2>Scatterplot with Prediction</h2>
<p>we can use an estimation parameter to predict the strength of correlation between by drawing an ellipse around the values. We use the additional options in the procedure to draw the ellipse as shown below.</p>
<h3>Example</h3>
<pre class="result notranslate">
proc sgscatter data = cars1; 
compare y = Invoice  x = (horsepower length)  
         / group = type  ellipse =(alpha = 0.05 type = predicted); 
title
'Average Invoice vs. horsepower for cars by length'; 
title2
'-- with 95% prediction ellipse --'
; 
format
Invoice dollar6.0;
run;
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/sactter_plot_eliipse.JPG" alt="sactter_plot_eliipse" />
<h2>Scatter Matrix</h2>
<p>We can also have a scatterplot involving more than two variables by grouping them into pairs. In the example below we consider three variables and draw a scatter plot matrix. We get 3 pairs of resulting matrix.</p>
<h3>Example</h3>
<pre class="result notranslate">
PROC sgscatter  DATA = CARS1;
   matrix horsepower invoice length
   / group = type;

   title 'Horsepower vs. Invoice vs. Length for car makers by types';
RUN; 
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/sactter_plot_matrix.JPG" alt="sactter_plot_matrix" />
<h1>SAS - Box Plots</h1>
<p>A Boxplot is graphical representation of groups of numerical data through their quartiles. Box plots may also have lines extending vertically from the boxes (whiskers) indicating variability outside the upper and lower quartiles. The bottom and top of the box are always the first and third quartiles, and the band inside the box is always the second quartile (the median). In SAS a simple Boxplot is created using <b>PROC SGPLOT</b> and paneled boxplot is created using <b>PROC SGPANEL</b>.</p>
<p>Please note that we create the data set named CARS1 in the first example and use the same data set for all the subsequent data sets. This data set remains in the work library till the end of the SAS session.</p>
<h3>Syntax</h3>
<p>The basic syntax to create a boxplot in SAS is &minus;</p>  
<pre class="result notranslate">
PROC SGPLOT  DATA = DATASET;
   VBOX VARIABLE / category = VARIABLE;
RUN; 

PROC SGPANEL  DATA = DATASET;;
PANELBY VARIABLE;
   VBOX VARIABLE&gt; / category = VARIABLE;
RUN; 
</pre>
</p>Following is the description of parameters used &minus;</p>
<ul class="list">
<li><p><b>DATASET</b> &minus; is the name of the dataset used.</p></li>
<li><p><b>VARIABLE</b> &minus; is the value used to plot the Boxplot.</p></li>
</ul>
<h2>Simple Boxplot</h2>
<p>In a simple Boxplot we choose one variable from the data set and another to form a category. The values of the first variable are categorized in as many number of groups as the number of distinct values in the second variable.</p>
<h3>Example</h3>
<p>In the below example we choose the variable horsepower as the first variable and type as the category variable. So we get boxplots for the distribution of values of horsepower for each type of car.</p>
<pre class="prettyprint notranslate">
PROC SQL;
create table CARS1 as
SELECT make, model, type, invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

PROC SGPLOT  DATA = CARS1;
   VBOX horsepower 
   / category = type;

   title 'Horsepower of cars by types';
RUN; 
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/box_plot_1.JPG" alt="box_plot_1" />
<h2>Boxplot in Vertical Panels </h2>
<p>We can divide the Boxplots of a variable into many vertical panels(columns). Each panel holds the boxplots for all the categorical variables. But the boxplots are further grouped using another third variable which divides the graph into multiple panels.</p>
<h3>Example</h3>
<p>In the below example we have paneled the graph using the variable 'make'. As there are two distinct values of 'make' so we get two vertical panels.</p>
<pre class="result notranslate">
PROC SGPANEL  DATA = CARS1;
PANELBY MAKE;
   VBOX horsepower   / category = type;

   title 'Horsepower of cars by types';
RUN; 
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/box_plot_2.JPG" alt="box_plot_2" />
<h2>Boxplot in Horizontal Panels </h2>
<p>We can divide the Boxplots of a variable into many horizontal panels(rows). Each panel holds the boxplots for all the categorical variables. But the boxplots are further grouped using another third variable which divides the graph into multiple panels. In the below example we have paneled the graph using the variable 'make'. As there are two distinct values of 'make' so we get two horizontal panels.</p>
<pre class="result notranslate">
PROC SGPANEL  DATA = CARS1;
PANELBY MAKE / columns = 1 novarname;

   VBOX horsepower   / category = type;

   title 'Horsepower of cars by types';
RUN; 
</pre>
<p>When we execute the above code, we get the following output &minus;</p>
<img src="/sas/images/box_plot_3.JPG" alt="box_plot_3" />
<h1>SAS - Arithmetic Mean</h1>
<p>The arithmetic mean is the value obtained by summing value of numeric variables and then dividing the sum with the number of variables. It is also called Average. In SAS arithmetic mean is calculated using <b>PROC MEANS</b>. Using this SAS procedure we can find the mean of all variables or some variables of a dataset. We can also form groups and find mean of variables of values specific to that group.</p>
<h2>Syntax</h2>
<p>The basic syntax for calculating arithmetic mean in SAS is &minus;</p> 
<pre class="result notranslate">
PROC MEANS DATA = DATASET;
CLASS Variables ;
VAR Variables;
</pre>
<p>Following is the description of parameters used &minus;</p>
<ul class="list">
<li><p><b>DATASET</b> &minus; is the name of the dataset used.</p></li>
<li><p><b>Variables</b> &minus; are the name of the variable from the dataset.</p></li>
</ul>
<h2>Mean of a Dataset</h2>
<p>The mean of each of the numeric variable in a dataset is calculated by using the PROC by supplying only the dataset name without any variables.</p>
<h3>Example</h3>
<p>In the below example we find the mean of all the numeric variables in the SAS dataset named CARS. We specify the maximum digits after decimal place to be 2 and also find the sum of those variables.</p>
<pre class="result notranslate">
PROC MEANS DATA = sashelp.CARS Mean SUM MAXDEC=2;
RUN;
</pre>
<p>When the above code is executed, we get the following output &minus;</p>
<img src="/sas/images/Mean.JPG" alt="Mean" />
<h2>Mean of Select Variables</h2>
<p>We can get the mean of some of the variables by supplying their names in the <b>var</b> option.</p>
<h2>Example</h2>
<p>In the below we calculate the mean of three variables.</p>
<pre class="result notranslate">
PROC MEANS DATA = sashelp.CARS mean SUM MAXDEC=2 ;
var horsepower invoice EngineSize;
RUN;
</pre>
<p>When the above code is executed, we get the following output &minus;</p>
<img src="/sas/images/Mean_select_variables.JPG" alt="Mean_select_variables" />
<h2>Mean by Class</h2>
<p>We can find the mean of the numeric variables by organizing them to groups by using some other variables.</p> 
<h3>Example</h3>
<p>In the example below we find the mean of the variable horsepower for each type under each make of the car.</p>
<pre class="result notranslate">
PROC MEANS DATA = sashelp.CARS mean SUM MAXDEC=2;
class make type;
var horsepower;
RUN;
</pre>
<p>When the above code is executed, we get the following output &minus;</p>
<img src="/sas/images/mean_with_class.JPG" alt="mean_with_class" />
<h1>SAS - Standard Deviation</h1>
<p>Standard deviation (SD) is a measure of how varied is the data in a data set. Mathematically it measures how distant or close are each value to the mean value of a data set. A standard deviation value close to 0 indicates that the data points tend to be very close to the mean of the data set and a high standard deviation indicates that the data points are spread out over a wider range of values</p>
<p>In SAS the SD values is measured using PROC MEAN as well as PROC SURVEYMEANS.</p>
<h2>Using PROC MEANS</h2>
<p>To measure the SD using <b>proc means</b> we choose the STD option in the PROC step. It brings out the SD values for each numeric variable present in the data set.</p>
<h3>Syntax</h3>
<p>The basic syntax for calculating standard deviation in SAS is &minus;</p>
<pre class="result notranslate">
PROC means DATA = dataset STD;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> &minus; is the name of the dataset.</p></li>
</ul>
<h3>Example</h3>
<p>In the below example we create the data set CARS1 form the CARS data set in the SASHELP library. We choose the STD option with the PROC means step.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT make, type, invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

proc means data = CARS1 STD;
run;
</pre>
<p>When we execute the above code it gives the following output &minus;</p>
<img src="/sas/images/SD_1.JPG" alt="SD_1.JPG" />
<h2>Using PROC SURVEYMEANS</h2>
<p>This procedure is also used for measurement of SD along with some advance features like measuring SD for categorical variables as well as provide estimates in variance.</p>
<h3>Syntax</h3>
<p>The syntax for using PROC SURVEYMEANS is &minus;</p>
<pre class="result notranslate">
PROC SURVEYMEANS options statistic-keywords ;
BY variables ;
CLASS variables ;
VAR variables ;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>BY</b> &minus; indicates the variables used to create groups of observations.</p></li>
<li><p><b>CLASS</b> &minus; indicates the variables used for categorical variables.</p></li>
<li><p><b>VAR</b> &minus; indicates the variables for which SD will be calculated.</p></li>
</ul>
<h3>Example</h3>
<p>The below example describes the use of <b>class</b> option which creates the statistics for each of the values in the class variable.</p>
<pre class="result notranslate">
proc surveymeans data = CARS1 STD;
class type;
var type horsepower;
ods output statistics = rectangle;
run;
proc print data = rectangle;
run;
</pre>
<p>When we execute the above code it gives the following output &minus;</p>
<img src="/sas/images/SD_2.JPG" alt="SD_2.JPG" />
<h2>Using BY option</h2>
<p>The below code gives example of BY option. In it the result is grouped for each value in the BY option.</p>
<h3>Example</h3>
<pre class="result notranslate">
proc surveymeans data = CARS1 STD;
var horsepower;
BY make;
ods output statistics = rectangle;
run;
proc print data = rectangle;
run;
</pre>
<p>When we execute the above code it gives the following output &minus;</p>
<h3>Result for make = "Audi"</h3>
<img src="/sas/images/SD_3.JPG" alt="SD_3.JPG" />
<h3>Result for make = "BMW"</h3>
<img src="/sas/images/SD_4.JPG" alt="SD_3.JPG" />
<h1>SAS - Frequency Distributions</h1>
<p>A frequency distribution is a table showing the frequency of the data points in a data set. Each entry in the table contains the frequency or count of the occurrences of values within a particular group or interval, and in this way, the table summarizes the distribution of values in the sample.</p>
<p>SAS provides a procedure called <b>PROC FREQ</b> to calculate the frequency distribution of data points in a data set.</p>
<h3>Syntax</h3>
<p>The basic syntax for calculating frequency distribution in SAS is &minus;</p>
<pre class="result notranslate">
PROC FREQ DATA = Dataset ;
TABLES Variable_1 ;
BY Variable_2 ;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>Variables_1</b> is the variable names of the dataset whose frequency distribution needs to be calculated.</p></li>
<li><p><b>Variables_2</b> is the variables which categorised the frequency distribution result.</p></li>
</ul>
<h2>Single Variable Frequency Distribution</h2>
<p>We can determine the frequency distribution of a single variable by using <b>PROC FREQ.</b> In this case the result will show the frequency of each value of the variable. The result also shows the percentage distribution, cumulative frequency and cumulative percentage.</p>
<h3>Example</h3>
<p>In the below example we find the frequency distribution of the variable horsepower for the dataset named <b>CARS1</b> which is created form the library <b>SASHELP.CARS.</b> We can see the result divided into two categories of results. One for each make of the car.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT make, model, type, invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

proc FREQ data = CARS1 ;
tables horsepower; 
by make;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/FREQ_By2.JPG" alt="FREQ_By2" />
<h2>Multiple Variable Frequency Distribution</h2>
<p>We can find the frequency distributions for multiple variables which groups them into all possible combinations.</p>
<h3>Example</h3>
<p>In the below example we calculate the frequency distribution for the make of a car for <b>grouped by car type</b> and also the frequency distribution of each type of car <b>grouped by each make.</b></p>
<pre class="result notranslate">
proc FREQ data = CARS1 ;
tables make type; 
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/FREQ_tables1.JPG" alt="FREQ_tables1" />
<h2>Frequency Distribution with Weight</h2>
<p>With the weight option we can calculate the frequency distribution biased with the weight of the variable. Here the value of the variable is taken as the number of observations instead of the count of value.</p>
<h3>Example</h3>
<p>In the below  example we calculate the frequency distribution of the variables make and type with weight assigned to horsepower.</p>
<pre class="result notranslate">
proc FREQ data = CARS1 ;
tables make type; 
weight horsepower;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/FREQ_tables3.JPG" alt="FREQ_tables3" />
<h1>SAS - Cross Tabulations</h1>
<p>Cross tabulation involves producing cross tables also called contingent tables using all possible combinations of two or more variables. In SAS it is created using <b>PROC FREQ</b> along with the <b>TABLES</b> option. For example - if we need the frequency of each model for each make in each car type category, then we need to use the TABLES option of PROC FREQ.</p>
<h2>Syntax</h2>
<p>The basic syntax for applying cross tabulation in SAS is &minus;</p>
<pre class="result notranslate">
PROC FREQ DATA = dataset;
TABLES variable_1*Variable_2;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>Variable_1 and Variable_2</b> are the variable names of the dataset whose frequency distribution needs to be calculated.</p></li>
</ul>
<h3>Example</h3>
<p>Consider the case of finding how many car types are available under each car brand from the dataset cars1 which is created form <b>SASHELP.CARS</b> as shown below. In this case we need the individual frequency values as well as the sum of the frequency values across the makes and across the types. We can observer that the result shows values across the rows and the columns.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT make, type, invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

proc FREQ data = CARS1;
tables make*type; 
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/cross_tab_1.JPG" alt="cross_tab_1" />
<h2>Cross tabulation of 3 Variables</h2>
<p>When we have three variables we can group 2 of them and cross tabulate each of these two with the third varaible. So in the result we have two cross tables.</p>
<h3>Example</h3>
<p>In the below example we find the frequency of each type of car and each model of car with respect to the make of the car. Also we use the nocol and norow option to avoid the sum and percentage values.</p>
<pre class="result notranslate">
proc FREQ data = CARS2 ;
tables make * (type model)  / nocol norow nopercent;   
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/cross_tab_2.JPG" alt="cross_tab_2"/>
<h2>Cross tabulation of 4 Variables</h2>
<p>With 4 variables, the number of paired combinations increases to 4. Each variable from group 1 is paired with each variable of group 2.</p>
<h3>Example</h3>
<p>In the below example we find the frequency of length of the car for each make and each model. Similarly the frequency of horsepower for each make and each model.</p>
<pre class="result notranslate">
proc FREQ data = CARS2 ;
tables (make model) * (length  horsepower)  / nocol norow nopercent;   
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/cross_tab_3.JPG" alt="cross_tab_3" />
<h1>SAS - T Tests</h1>
<p>The T-tests are performed to compute the confidence limits for one sample or two independent samples by comparing their means and mean differences. 
The SAS procedure named <b>PROC TTEST</b> is used to carry out t tests on a single variable and pair of variables.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying PROC TTEST in SAS is &minus;</p>
<pre class="result notranslate">
PROC TTEST DATA = dataset;
VAR variable;
CLASS Variable;
PAIRED Variable_1 * Variable_2;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>Variable_1 and Variable_2</b> are the variable names of the dataset used in t test.</p></li>
</ul>
<h3>Example</h3>
<p>Below we see one sample t test in which find the t test estimation for the variable horsepower with 95 percent confidence limits.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT make, type, invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

proc ttest data = cars1 alpha = 0.05 h0 = 0;
 	var horsepower;
   run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/t_test_1.JPG" alt="t_test_1" />
<h2>Paired T-test</h2>
<p>The paired T Test is carried out to test if two dependent variables are statistically different from each other or not.</p>
<h3>Example</h3>
<p>As length and weight of a car will be dependent on each other we apply the paired T test as shown below.</p>
<pre class="result notranslate">
proc ttest data = cars1 ;
   paired weight*length;
   run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/t_test_2.JPG" alt="t_test_2" />
<h3>Two sample t-test</h3>
<p>This t-test is designed to compare means of same variable between two groups.</p>
<h3>Example</h3>
<p>In our case we compare the mean of the variable horsepower between the two different makes of the cars("Audi" and "BMW").</p>
<pre class="result notranslate">
proc ttest data = cars1 sides = 2 alpha = 0.05 h0 = 0;
   title "Two sample t-test example";
   class make; 
   var horsepower;
   run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/t_test_3.JPG" alt="t_test_3" />
<h1>SAS - Correlation Analysis</h1>
<p>Correlation analysis deals with relationships among variables. The correlation coefficient is a measure of linear association between two variables.Values of the correlation coefficient are always between -1 and +1. SAS provides the procedure <b>PROC CORR</b> to find the correlation coefficients between a pair of variables in a dataset.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying PROC CORR in SAS is &minus;</p>
<pre class="result notranslate">
PROC CORR DATA = dataset options;
VAR variable;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>Options</b> is the additional option with procedure like plotting a matrix etc.</p></li>
<li><p><b>Variable</b> is the variable name of the dataset used in finding the correlation.</p></li>
</ul>
<h3>Example</h3>
<p>Correlation coefficients between a pair of variables available in a dataset can be obtained by use their names in the VAR statement.In the below example we use the dataset CARS1 and get the result showing the correlation coefficients between horsepower and weight.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;

proc corr data = cars1 ;
VAR horsepower weight ;
BY make;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/corr_ana_2.JPG" alt="corr_ana_2" />
<h2>Correlation Between All Variables</h2>
<p>Correlation coefficients between all the variables available in a dataset can be obtained by simply applying the procedure with the dataset name.</p>
<h3>Example</h3> 
<p>In the below example we use the dataset CARS1 and get the result showing the correlation coefficients between each pair of the variables.</p>
<pre class="result notranslate">
proc corr data = cars1 ;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/corr_ana_1.JPG" alt="corr_ana_1" />
<h2>Correlation Matrix</h2>
<p>We can obtain a scatterplot matrix between the variables by choosing the option to plot matrix in the <b>PROC</b> statement.</p>
<h3>Example</h3>
<p>In below example we get the matrix between horsepower and weight.</p>
<pre class="result notranslate">
proc corr data = cars1 plots = matrix ;
VAR horsepower weight ;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/corr_ana_3.JPG" alt="corr_ana_3" />
<h1>SAS - Linear Regression</h1>
<p>Linear Regression is used to identify the relationship between a dependent variable and one or more independent variables.  A model of the relationship is proposed, and estimates of the parameter values are used to develop an estimated regression equation.</p>
<p>Various tests are then used to determine if the model is satisfactory. If it is then, the estimated regression equation can be used to predict the value of the dependent variable given values for the independent variables.  In SAS the procedure <b>PROC REG</b> is used to find the linear regression model between two variables.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying PROC REG in SAS is &minus;</p>
<pre class="result notranslate">
PROC REG DATA = dataset;
MODEL variable_1 = variable_2;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>variable_1 and variable_2 </b> are the variable names of the dataset used in finding the correlation.</p></li>
</ul>
<h3>Example</h3>
<p>The below example shows the process to find the correlation between the two variables horsepower and weight of a car by using <b>PROC REG.</b> In the result we see the intercept values which can be used to form the regression equation.</p>
<pre class="result notranslate">
PROC SQL;
create table CARS1 as
SELECT invoice, horsepower, length, weight
   FROM 
   SASHELP.CARS
   WHERE make in ('Audi','BMW')
;
RUN;
proc reg data = cars1;
model horsepower = weight ;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/regression_1.JPG" alt="regression_1"/>
<p>The above code also gives the graphical view of various estimates of the model as shown below. Being an advanced SAS procedure it simply does not stop at giving the intercept values as the output.</p>
<img src="/sas/images/regression_2.JPG" alt="regression_2" />
<h1>SAS - Bland Altman Analysis</h1>
<p>The Bland-Altman analysis is a process to verify the extent of agreement or disagreement between two methods designed to measure same parameters. A high correlation between the methods indicate that good enough sample has been chosen in data analysis. In SAS we create a Bland-Altman plot by calculating the mean, upper limit and lower limit of the variable values. We then use
PROC SGPLOT to create the Bland-Altman plot.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying PROC SGPLOT in SAS is &minus;</p>
<pre class="result notranslate">
PROC SGPLOT DATA = dataset;
SCATTER X = variable Y = Variable;
REFLINE value;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>SCATTER</b> statement cerates the scatter plot graph of the value supplied in form of X and Y.</p></li>
<li><p><b>REFLINE </b> creates a horizontal or vertical reference line.</p></li>
</ul>
<h3>Example</h3>
<p>In the below example we take the result of two experiments generated by two methods named new and old. We calculate the differences in the values of the variables and also the mean of the variables of the same observation. We also calculate the standard deviation values to be used in the upper and lower limit of the calculation.</p>
<p>The result shows a Bland-Altman plot as a scatter plot.</p>
<pre class="result notranslate">
data mydata;
input new old;
datalines;
31 45
27 12
11 37
36 25
14 8
27 15
3 11
62 42
38 35
20 9
35 54
62 67
48 25
77 64
45 53
32 42
16 19
15 27
22 9
8 38
24 16
59 25
;

data diffs ;
set mydata ;
/* calculate the difference */
diff = new-old ;
/* calculate the average */
mean = (new+old)/2 ;
run ;
proc print data = diffs;
run;

proc sql noprint ;
select mean(diff)-2*std(diff),  mean(diff)+2*std(diff)
into   :lower,  :upper 
from diffs ;
quit;

proc sgplot data = diffs ;
scatter x = mean y = diff;
refline 0 &amp;upper &amp;lower / LABEL = ("zero bias line" "95% upper limit" "95%
lower limit");
TITLE 'Bland-Altman Plot';
footnote 'Accurate prediction with 10% homogeneous error'; 
run ;
quit ;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/bland_altman_1.JPG" alt="bland_altman_1" />
<h2>Enhanced Model</h2>
<p>In an enhanced model of the above program we get 95 percent confidence level curve fitting.</p>
<pre class="result notranslate">
proc sgplot data = diffs ;
reg x = new y = diff/clm clmtransparency = .5;
needle x = new y = diff/baseline = 0;
refline 0 / LABEL = ('No diff line');
TITLE 'Enhanced Bland-Altman Plot';
footnote 'Accurate prediction with 10% homogeneous error'; 
run ;
quit ;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/bland_altman_2.JPG" alt="bland_altman_2" />
<h1>SAS - Chi Square</h1>
<p>A chi-square test is used to examine the association between two categorical variables. It can be used to test both extent of dependence and extent of independence between Variables. SAS uses <b>PROC FREQ</b> along with the option <b>chisq</b> to determine the result of Chi-Square test.</P>
<h3>Syntax</h3>
<p>The basic syntax for applying PROC FREQ for Chi-Square test in SAS is &minus;</p>
<pre class="result notranslate">
PROC FREQ DATA = dataset;
TABLES variables 
/CHISQ TESTP = (percentage values);
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>Dataset</b> is the name of the dataset.</p></li>
<li><p><b>Variables</b> are the variable names of the dataset use in chi-square test.</p></li>
<li><p><b>Percentage Values</b> in the TESTP statement represent the percentage of levels of the variable.</p></li>
</ul>
<h3>Example</h3>
<p>In the below example we consider a chi-square test on the variable named type in the dataset <b>SASHELP.CARS.</b> This variable has six levels and we assign percentage to each level as per the design of the test.</p>
<pre class="result notranslate">
proc freq data = sashelp.cars;
tables type 
/chisq 
testp = (0.20 0.12 0.18 0.10 0.25 0.15);
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/chi_square_1.JPG" alt="chi_square_1" />
<p>We also get the bar chart showing the deviation of the variable type as shown in the following screenshot.</p>
<img src="/sas/images/chi_square_2.JPG" alt="chi_square_2" />
<h2>Two Way chi-square</h2>
<p>Two way Chi-Square test is used when we apply the tests to two variables of the dataset.</p>
<h3>Example</h3>
<p>In the below example we apply chi-square test on two variables named type and origin. The result shows the tabular form of all combinations of these two variables.</p>
<pre class="result notranslate">
proc freq data = sashelp.cars;
tables type*origin 
/chisq 
;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/chi_square_3.JPG" alt="chi_square_3" />
<h1>SAS - Fishers Exact Tests</h1>
<p>Fisher's exact test is a statistical test used to determine if there are nonrandom associations between two categorical variables.In SAS this is carried out using <b>PROC FREQ</b>. We use the Tables option to use the two variables subjected to Fisher Exact test.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying Fisher Exact test in SAS is &minus;</p>
<pre class="prettyprint notranslate">
PROC FREQ DATA = dataset ;
TABLES Variable_1*Variable_2 / fisher;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>dataset</b> is the name of the dataset.</p></li>
<li><p><b>Variable_1*Variable_2</b> are the variables form the dataset .</p></li>
</ul>
<h2>Applying Fisher Exact Test</h2>
<p>To apply Fisher's Exact Test, we choose two categorical variables named Test1 and Test2 and their result.We use PROC FREQ to apply the test shown below.</p>
<h3>Example</h3>
<pre class="result notranslate">
data temp;
input  Test1 Test2 Result @@;
datalines;
1 1 3 1 2 1 2 1 1 2 2 3
;
proc freq; 
tables Test1*Test2 / fisher;
run;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/fisher_exact_1.JPG" alt="fisher_exact_1" />
<h1>SAS - Repeated Measure Analysis</h1>
<p>Repeated measure analysis is used when all members of a random sample are measured under a number of different conditions. As the sample is exposed to each condition in turn, the measurement of the dependent variable is repeated. Using a standard ANOVA in this case is not appropriate because it fails to model the correlation between the repeated measures.</p>
<p>One should be clear about the difference between a <b>repeated measures design</b> and a <b>simple multivariate design.</b> For both, sample members are measured on several occasions, or trials, but in the repeated measures design, each trial represents the measurement of the same characteristic under a different condition.</p>
<p>In SAS <b>PROC GLM</b> is used to carry out repeated measure analysis.</p>
<h2>Syntax</h2>
<p>The basic syntax for PROC GLM in SAS is &minus;</p>
<pre class="result notranslate">
PROC GLM DATA = dataset;
   CLASS variable;
   MODEL variables = group / NOUNI;
   REPEATED TRIAL n;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>dataset</b> is the name of the dataset.</p></li>
<li><p><b>CLASS</b> gives the variables the variable used as classification variable.</p></li>
<li><p><b>MODEL</b> defines the model to be fit using certain variables form the dataset.</p></li>
<li><p><b>REPEATED</b> defines the number of repeated measures of each group to test the hypothesis.</p></li>
</ul>
<h2>Example</h2>
<p>Consider the example below in which we have two groups of people subjected to test of effect of a drug. The reaction time of each person is recorded for each of the four drug types tested. Here 5 trials are done for each group of people to see the strength of correlation between the effect of the four drug types.</p>
<pre class="result notranslate">
DATA temp;
   INPUT person group $ r1 r2 r3 r4;
CARDS;
1 A  2  1  6  5
2 A  5  4 11  9
3 A  6 14 12 10
4 A  2  4  5  8
5 A  0  5 10  9
6 B  9 11 16 13
7 B  12 4 13 14
8 B  15 9 13  8
9 B  6  8 12  5
10 B 5  7 11  9
;
RUN;

PROC PRINT DATA = temp ;
RUN;

   PROC GLM DATA = temp;
   CLASS group;
   MODEL r1-r4 = group / NOUNI ;
   REPEATED trial 5;
RUN;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/repeated_measure_analysis.jpg" alt="repeated_measure_analysis" />
<h1>SAS - One Way Anova</h1>
<p>ANOVA stands for Analysis of Variance. In SAS it is done using <b>PROC ANOVA</b>. It performs analysis of data from a wide variety of experimental designs. In this process, a continuous response variable, known as a dependent variable, is measured under experimental conditions identified by classification variables, known as independent variables. The variation in the response is assumed to be due to effects in the classification, with random error accounting for the remaining variation.</p>
<h3>Syntax</h3>
<p>The basic syntax for applying PROC ANOVA in SAS is &minus;</p>
<pre class="prettyprint notranslate">
PROC ANOVA dataset ;
CLASS Variable;
MODEL Variable1 = variable2 ;
MEANS ;
</pre>
<p>Following is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>dataset</b> is the name of the dataset.</p></li>
<li><p><b>CLASS</b> gives the variables the variable used as classification variable.</p></li>
<li><p><b>MODEL</b> defines the model to be fit using certain variables from the dataset.</p></li>
<li><p><b>Variable_1 and Variable_2</b> are the variable names of the dataset used in analysis.</p></li>
<li><p><b>MEANS</b> defines the type of computation and comparison of means.</p></li>
</ul>
<h2>Applying ANOVA</h2>
<p>Let us now understand the concept of applying ANOVA in SAS.</p>
<h3>Example</h3>
<p>Lets consider the dataset SASHELP.CARS. Here we study the dependence between the variables car type and their horsepower. As the car type is a variable with categorical values, we take it as class variable and use both these variables in the MODEL.</p> 
<pre class="prettyprint notranslate">
PROC ANOVA DATA = SASHELPS.CARS;
CLASS type;
MODEL horsepower = type;
RUN;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/anova_1.JPG" alt="anova_1"/>
<h2>Applying ANOVA with MEANS</h2>
<p>Let us now understand the concept of applying ANOVA with MEANS in SAS.</p>
<h3>Example</h3>
<p>We can also extend the model by applying the MEANS statement in which we use Turkey's Studentized method to compare the mean values of various car types.The category of car types are listed with the mean value of horsepower in each category along with some additional values like error mean square etc.</p>
<pre class="prettyprint notranslate">
PROC ANOVA DATA = SASHELPS.CARS;
CLASS type;
MODEL horsepower = type;
MEANS type / tukey lines;
RUN;
</pre>
<p>When the above code is executed, we get the following result &minus;</p>
<img src="/sas/images/anova_3.JPG" alt="anova_3" />
<h1>SAS - Hypothesis Testing</h1>
<p>Hypothesis testing is the use of statistics to determine the probability that a given hypothesis is true. The usual process of hypothesis testing consists of four steps as shown below.</p>
<h2>Step-1</h2>
<p>Formulate the null hypothesis H0 (commonly, that the observations are the result of pure chance) and the alternative hypothesis H1 (commonly, that the observations show a real effect combined with a component of chance variation).</p>
<h2>Step-2</h2>
<p>Identify a test statistic that can be used to assess the truth of the null hypothesis.</p>
<h2>Step-3</h2>
<p>Compute the P-value, which is the probability that a test statistic at least as significant as the one observed would be obtained assuming that the null hypothesis were true. The smaller the P-value, the stronger the evidence against the null hypothesis.</p>
<h2>Step-4</h2>
<p>Compare the p-value to an acceptable significance value alpha (sometimes called an alpha value). If p &lt;=alpha, that the observed effect is statistically significant, the null hypothesis is ruled out, and the alternative hypothesis is valid.</p>
<p>SAS programming language has features to carry out various types of hypothesis testing as shown below.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Test</th>
<th style="text-align:center">Description</th>
<th style="text-align:center; width:20%">SAS PROC</th>
</tr>
<tr>
<td class="ts"><b>T-Test</b></td>
<td>A t-tests is used to test whether the mean of one variable is significantly different than a hypothesized value.We also determine whether means for two independent groups are significantly different and whether means for dependent or paired groups are significantly different.</td>
<td class="ts"><b>PROC TTEST</b></td>
</tr>
<tr>
<td class="ts"><b>ANOVA</b></td>
<td>It is also used to compare means when there is one independent categorical variable. We want to use one-way ANOVA when testing to see if the means of the interval dependent variable are different according to the independent categorical variable.</td>
<td class="ts"><b>PROC ANOVA</b></td>
</tr>
<tr>
<td class="ts"><b>Chi-Square</b></td>
<td>We  use chi square goodness of fit to assess if frequencies of a categorical variable were likely to happen due to chance. Use of a chi square test is necessary whether proportions of a categorical variable are a hypothesized value.</td>
<td class="ts"><b>PROC FREQ</b></td>
</tr>
<tr>
<td class="ts"><b>Linear Regression</b></td>
<td>Simple linear regression is used when one wants to test how well a variable predicts another variable. Multiple linearregression allows one to test how well multiple variables predict a variable of interest. When using multiple linear regression, we additionally assume the predictor variables are independent.</td>
<td class="ts"><b>PROC REG</b></td>
</tr>
</table>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/sas/sas_hypothesis_testing.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/sas/sas_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
