<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Java DIP - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Java DIP - Quick Guide - Digital Image Processing (DIP) deals with manipulation of digital images using a digital computer. It is a sub field of signals and systems but focuses particul"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/java_dip/dip_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#1693cd;
}
a.demo {
    background:#1693cd;
}
li.heading {
    background:#1693cd;
}
.course-box{background:#1693cd}
.home-intro-sub p{color:#1693cd}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/java_dip/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/java_dip/images/dip-mini-logo.jpg" alt="Java Digital Image Processing Tutorials" />
</div>
<ul class="toc chapters">
<li class="heading">Java Digital Image Processing</li>
<li><a href="/java_dip/index.htm">DIP - Home</a></li>
<li><a href="/java_dip/java_dip_introduction.htm">DIP - Introduction</a></li>
<li><a href="/java_dip/java_buffered_image.htm">DIP - Java BufferedImage Class</a></li>
<li><a href="/java_dip/downloading_uploading_images.htm">DIP - Image Download &amp; Upload</a></li>
<li><a href="/java_dip/understand_image_pixels.htm">DIP - Image Pixels</a></li>
<li><a href="/java_dip/grayscale_conversion.htm">DIP - Grayscale Conversion</a></li>
<li><a href="/java_dip/enhancing_image_contrast.htm">DIP - Enhancing Image Contrast</a></li>
<li><a href="/java_dip/enhancing_image_brightness.htm">DIP - Enhancing Image Brightness</a></li>
<li><a href="/java_dip/enhancing_image_sharpness.htm">DIP - Enhancing Image Sharpness</a></li>
<li><a href="/java_dip/image_compression_technique.htm">DIP - Image Compression Technique</a></li>
<li><a href="/java_dip/adding_border.htm">DIP - Adding Image Border</a></li>
<li><a href="/java_dip/image_pyramids.htm">DIP - Image Pyramids</a></li>
<li><a href="/java_dip/basic_thresholding.htm">DIP - Basic Thresholding</a></li>
<li><a href="/java_dip/image_shape_conversions.htm">DIP - Image Shape Conversions</a></li>
<li><a href="/java_dip/applying_gaussian_filter.htm">DIP - Gaussian Filter</a></li>
<li><a href="/java_dip/applying_box_filter.htm">DIP - Box Filter</a></li>
<li><a href="/java_dip/eroding_dilating.htm">DIP - Eroding &amp; Dilation</a></li>
<li><a href="/java_dip/applying_watermark.htm">DIP - Watermark</a></li>
<li><a href="/java_dip/understand_convolution.htm">DIP - Understanding Convolution</a></li>
<li><a href="/java_dip/applying_prewitt_operator.htm">DIP - Prewitt Operator</a></li>
<li><a href="/java_dip/applying_sobel_operator.htm">DIP - Sobel Operator</a></li>
<li><a href="/java_dip/applying_kirsch_operator.htm">DIP - Kirsch Operator</a></li>
<li><a href="/java_dip/applying_robinson_operator.htm">DIP - Robinson Operator</a></li>
<li><a href="/java_dip/applying_laplacian_operator.htm">DIP - Laplacian Operator</a></li>
<li><a href="/java_dip/applying_weighted_average_filter.htm">DIP - Weighted Average Filter</a></li>
<li><a href="/java_dip/create_zooming_effect.htm">DIP - Create Zooming Effect</a></li>
<li><a href="/java_dip/open_source_libraries.htm">DIP - Open Source Libraries</a></li>
<li><a href="/java_dip/introduction_to_opencv.htm">DIP - Introduction To OpenCV</a></li>
<li><a href="/java_dip/grayscale_conversion_opencv.htm">DIP - GrayScale Conversion OpenCV</a></li>
<li><a href="/java_dip/color_space_conversion.htm">DIP - Color Space Conversion</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">DIP Useful Resources</li>
<li><a href="/java_dip/dip_quick_guide.htm">DIP - Quick Guide</a></li>
<li><a href="/java_dip/dip_useful_resources.htm">DIP - Useful Resources</a></li>
<li><a href="/java_dip/dip_discussion.htm">DIP - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Java DIP - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/java_dip/color_space_conversion.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/java_dip/dip_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Java DIP - Introduction</h1>
<p>Digital Image Processing (DIP) deals with manipulation of digital images using a digital computer. It is a sub field of signals and systems but focuses particularly on images. DIP focuses on developing a computer system that is able to perform processing on an image. The input of such system is a digital image. The system processes the image using efficient algorithms, and gives an image as an output.</p>
<img src="/java_dip/images/introduction_image.jpg" alt="Introduction Image" />
<p>Java is a high level programming language that is widely used in the modern world. It can support and handle digital image processing efficiently using various functions.</p>
<h1>Java BufferedImage Class</h1>
<p>Java <code>BufferedImage</code> class is a subclass of Image class. It is used to handle and manipulate the image data. A <code>BufferedImage</code> is made of ColorModel of image data. All <code>BufferedImage</code> objects have an upper left corner coordinate of (0, 0).</p> 
<h2>Constructors</h2>
<p>This class supports three types of constructors.</p>
<p>The first constructor constructs a new <code>BufferedImage</code>  with a specified ColorModel and Raster.</p>
<pre class="result notranslate">
BufferedImage(ColorModel cm, WritableRaster raster, 
boolean isRasterPremultiplied, Hashtable&lt;?,?&gt; properties)
</pre>
<p>The second constructor constructs a <code>BufferedImage</code>  of one of the predefined image types.</p>
<pre class="result notranslate">
BufferedImage(int width, int height, int imageType)
</pre>
<p>The third constructor constructs a <code>BufferedImage</code>  of one of the predefined image types: TYPE_BYTE_BINARY or TYPE_BYTE_INDEXED.</p>
<pre class="result notranslate">
BufferedImage(int width, int height, int imageType, IndexColorModel cm)
</pre>
<p></p>
<table class="table table-bordered">
<tr>
<th>Sr.No</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>copyData(WritableRaster outRaster) </b></p>
<p>It computes an arbitrary rectangular region of the <code>BufferedImage</code>  and copies it into a specified WritableRaster.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>getColorModel()</b></p>
<p>It returns object of class ColorModel of an image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>getData()</b></p>
<p>It returns the image as one large tile.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>getData(Rectangle rect)</b></p>
<p>It computes and returns an arbitrary region of the <code>BufferedImage</code>.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>getGraphics()</b></p>
<p>This method returns a Graphics2D, retains backwards compatibility.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>getHeight()</b></p>
<p>It returns the height of the <code>BufferedImage</code>.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>getMinX()</b></p>
<p>It returns the minimum x coordinate of this <code>BufferedImage</code>.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>getMinY()</b></p>
<p>It returns the minimum y coordinate of this <code>BufferedImage</code>.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>getRGB(int x, int y)</b></p>
<p>It returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>getType()</b></p>
<p>It returns the image type.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of java <code>BufferedImage</code>  class that draw some text on the screen using Graphics Object &minus;</p>
<pre class="prettyprint notranslate">
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class Test extends JPanel {

   public void paint(Graphics g) {
      Image img = createImageWithText();
      g.drawImage(img, 20,20,this);
   }

   private Image createImageWithText() {
      BufferedImage bufferedImage = new BufferedImage(200,200,BufferedImage.TYPE_INT_RGB);
      Graphics g = bufferedImage.getGraphics();

      g.drawString("www.tutorialspoint.com", 20,20);
      g.drawString("www.tutorialspoint.com", 20,40);
      g.drawString("www.tutorialspoint.com", 20,60);
      g.drawString("www.tutorialspoint.com", 20,80);
      g.drawString("www.tutorialspoint.com", 20,100);
      
      return bufferedImage;
   }
   
   public static void main(String[] args) {
      JFrame frame = new JFrame();
      frame.getContentPane().add(new Test());

      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.setSize(200, 200);
      frame.setVisible(true);
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<img src="/java_dip/images/java_bufferd_image.JPG" alt="Java Buffered Image Tutorial" />
<h1>Downloading &amp; Uploading Images</h1>
<p>In this chapter we are going to see how you can download an image from internet, perform some image processing techniques on the image, and then again upload the processed image to a server.</p> 
<h2>Downloading an Image</h2>
<p>In order to download an image from a website, we use java class named <b>URL</b>, which can be found under <b>java.net</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
String website = "http://tutorialspoint.com";
URL url = new URL(website);				
</pre>
<p>Apart from the above method, there are other methods available in class URL as
described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>public String getPath()</b></p>
<p>It returns the path of the URL.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>public String getQuery()</b></p>
<p>It returns the query part of the URL.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>public String getAuthority()</b></p>
<p>It returns the authority of the URL.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>public int getPort()</b></p>
<p>It returns the port of the URL.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>public int getDefaultPort()</b></p>
<p>It returns the default port for the protocol of the URL.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>public String getProtocol()</b></p>
<p>It returns the protocol of the URL.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>public String getHost()</b></p>
<p>It returns the host of the URL.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates the use of java URL class to download an image from the internet &minus;</p>
<pre class="prettyprint notranslate">
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.net.URL;

public class Download {

   public static void main(String[] args) throws Exception {
   
      try{
         String fileName = "digital_image_processing.jpg";
         String website = "http://tutorialspoint.com/java_dip/images/"+fileName;
         
         System.out.println("Downloading File From: " + website);
         
         URL url = new URL(website);
         InputStream inputStream = url.openStream();
         OutputStream outputStream = new FileOutputStream(fileName);
         byte[] buffer = new byte[2048];
         
         int length = 0;
         
         while ((length = inputStream.read(buffer)) != -1) {
            System.out.println("Buffer Read of length: " + length);
            outputStream.write(buffer, 0, length);
         }
         
         inputStream.close();
         outputStream.close();
         
      } catch(Exception e) {
         System.out.println("Exception: " + e.getMessage());
      }
   }
}
</pre>
<h3>Output</h3>
<p>When you execute the given above, the following output is seen.</p>
<img src="/java_dip/images/downloadfile.JPG" alt="Downloading & Uploading Images Tutorial" />
<p>It would download the following image from the server.</p>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Downloading & Uploading Images Tutorial" />
<h2>Uploading an Image</h2>
<p>Let us see how to upload an image to a webserver. We convert a BufferedImage to byte array in order to send it to server.</p>
<p>We use Java class <b>ByteArrayOutputStream</b>, which can be found under <b>java.io</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageIO.write(image, "jpg", baos);
</pre>
<p>In order to convert the image to byte array, we use <b>toByteArray()</b> method of <b>ByteArrayOutputStream</b> class. Its syntax is given below &minus;</p>
<pre class="result notranslate">
byte[] bytes = baos.toByteArray();
</pre>
<p>Apart from the above method, there are other methods available in the ByteArrayOutputStream class as described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>public void reset()</b></p>
<p>This method resets the number of valid bytes of the byte array output stream to zero, so that all the accumulated output in the stream is discarded.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>public byte[] toByteArray()</b></p>
<p>This method creates a newly allocated Byte array. Its size would be the current size of the output stream and the contents of the buffer will be copied into it. It returns the current contents of the output stream as a byte array.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>public String toString()</b></p>
<p>Converts the buffer content into a string. Translation will be done according to the default character encoding. It returns the String translated from the buffer's content.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>public void write(int w)</b></p>
<p>It writes the specified array to the output stream.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>public void write(byte []b, int of, int len)</b></p>
<p>It writes len number of bytes starting from offset off to the stream.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>public void writeTo(OutputStream outSt)</b></p>
<p>It writes the entire content of this Stream to the specified stream argument.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates ByteArrayOutputStream to upload an image to the server &minus;</p>
<h4>Client Code</h4>
<pre class="prettyprint notranslate">
import javax.swing.*;  
import java.net.*; 
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class Client{
   public static void main(String args[]) throws Exception{
   
      Socket soc;
      BufferedImage img = null;
      soc=new Socket("localhost",4000);
      System.out.println("Client is running. ");
      
      try {
         System.out.println("Reading image from disk. ");
         img = ImageIO.read(new File("digital_image_processing.jpg"));
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         
         ImageIO.write(img, "jpg", baos);
         baos.flush();
         
         byte[] bytes = baos.toByteArray();
         baos.close();
         
         System.out.println("Sending image to server. ");
         
         OutputStream out = soc.getOutputStream(); 
         DataOutputStream dos = new DataOutputStream(out);
         
         dos.writeInt(bytes.length);
         dos.write(bytes, 0, bytes.length);
         
         System.out.println("Image sent to server. ");

         dos.close();
         out.close();
         
      } catch (Exception e) {
         System.out.println("Exception: " + e.getMessage());
         soc.close();
      }
      soc.close();
   }
}
</pre>
<h4>Server Code</h4>
<pre class="prettyprint notranslate">
import java.net.*;
import java.io.*;
import java.awt.image.*;

import javax.imageio.*; 
import javax.swing.*; 

class Server {
   public static void main(String  args[]) throws Exception{
      ServerSocket server=null;
      Socket socket;
      server = new ServerSocket(4000);
      System.out.println("Server Waiting for image");

      socket = server.accept();
      System.out.println("Client connected.");
      
      InputStream in = socket.getInputStream();
      DataInputStream dis = new DataInputStream(in);

      int len = dis.readInt();
      System.out.println("Image Size: " + len/1024 + "KB");
      
      byte[] data = new byte[len];
      dis.readFully(data);
      dis.close();
      in.close();

      InputStream ian = new ByteArrayInputStream(data);
      BufferedImage bImage = ImageIO.read(ian);
 
      JFrame f = new JFrame("Server");
      ImageIcon icon = new ImageIcon(bImage);
      JLabel l = new JLabel();
      
      l.setIcon(icon);
      f.add(l);
      f.pack();
      f.setVisible(true);
   }
}
</pre>
<h3>Output</h3>
<h4>Client Side Output</h4>
<p>When you execute the client code, the following output appears on client side &minus;</p>
<img src="/java_dip/images/client.JPG" alt="downloading uploading images" />
<h4>Server Side Output</h4>
<p>When you execute the server code, the following ouptut appears on server side &minus;</p>
<img src="/java_dip/images/Server.JPG" alt="downloading uploading images" />
<p>After receiving the image, the server displays the image as shown below &minus;</p>
<img src="/java_dip/images/ServerImage.JPG" alt="downloading uploading images" />
<h1>Java DIP - Image Pixels</h1>
<p>An image contains a two dimensional array of pixels. It is actually the value of those pixels that make up an image. Usually an image could be color or grayscale.</p>
<p>In Java, the BufferedImage class is used to handle images. You need to call <b>getRGB()</b> method of the <b>BufferedImage</b> class to get the value of the pixel.</p>
<h2>Getting Pixel Value</h2>
<p>The pixel value can be received using the following syntax&minus;</p>
<pre class="result notranslate">
Color c = new Color(image.getRGB(j, i));
</pre>
<h2>Getting RGB Values</h2>
<p>The method <b>getRGB()</b> takes the row and column index as a parameter and returns the appropriate pixel. In case of color image, it returns three values which are (Red, Green, Blue). They can be get as follows&minus;</p>
<pre class="result notranslate">
c.getRed();
c.getGreen();
c.getBlue();
</pre>
<h2>Getting Width and Height of Image</h2>
<p>The height and width of the image can be get by calling the <b>getWidth()</b> and <b>getHeight()</b> methods of the BufferedImage class. Its syntax is given below&minus;</p>
<pre class="result notranslate">
int width = image.getWidth();
int height = image.getHeight();
</pre>
<p>Apart from these methods, there are other methods supported in the BufferedImage class. They are described briefly&minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>copyData(WritableRaster outRaster)</b></p>
<p>It computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>getColorModel()</b></p>
<p>It returns ColorModel of an image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>getData()</b></p>
<p>It returns the image as one large tile.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>getData(Rectangle rect)</b></p>
<p>It computes and returns an arbitrary region of the BufferedImage.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>getGraphics()</b></p>
<p>This method returns a Graphics2D, but is here for backwards compatibility.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>getHeight()</b></p>
<p>It returns the height of the BufferedImage.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>getMinX()</b></p>
<p>It returns the minimum x coordinate of this BufferedImage.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>getMinY()</b></p>
<p>It returns the minimum y coordinate of this BufferedImage.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>getRGB(int x, int y)</b></p>
<p>It returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>getType()</b></p>
<p>It returns the image type.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates the use of java BufferedImage class that displays pixels of an image of size (100 x 100)&minus;</p>
<pre class="prettyprint notranslate">
import java.awt.*;
import java.awt.image.BufferedImage;

import java.io.*;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

class Pixel {
   BufferedImage image;
   int width;
   int height;
   
   public Pixel() {
      try {
         File input = new File("blackandwhite.jpg");
         image = ImageIO.read(input);
         width = image.getWidth();
         height = image.getHeight();
         
         int count = 0;
         
         for(int i=0; i&lt;height; i++) {
         
            for(int j=0; j&lt;width; j++) {
            
               count++;
               Color c = new Color(image.getRGB(j, i));
               System.out.println("S.No: " + count + " Red: " + c.getRed() +"  Green: " + c.getGreen() + " Blue: " + c.getBlue());
            }
         }

      } catch (Exception e) {}
   }
   
   static public void main(String args[]) throws Exception {
      Pixel obj = new Pixel();
   }
}
</pre>
<h3>Output</h3>
<p>When you execute the above example, it would print the pixels of the following image &minus;</p>
<p><b>Original Image</b></p>
<img src="/java_dip/images/blackandwhite.jpg" alt="Understand Image Pixel Tutorial" />
<p><b>Pixels Output</b></p>
<img src="/java_dip/images/firsthalf.JPG" alt="Understand Image Pixel Tutorial" />
<p>If you scroll down the ouput, the following pattern is seen&minus;</p>
<img src="/java_dip/images/lasthalf.JPG" alt="Understand Image Pixel Tutorial" />
<h1>Java DIP - GrayScale Conversion</h1>
<p>In order to convert a color image to Grayscale image, you need to read pixels or data of the image using <b>File</b> and <b>ImageIO</b> objects, and store the image in <b>BufferedImage</b> object. Its syntax is given below &minus;</p> 
<pre class="result notranslate">
File input = new File("digital_image_processing.jpg");
BufferedImage image = ImageIO.read(input);	
</pre>
<p>Further, get the pixel value using method <b>getRGB()</b> and perform GrayScale() method on it. The method getRGB() takes row and column index as parameter.</p>
<pre class="result notranslate">
Color c = new Color(image.getRGB(j, i));
int red = (c.getRed() * 0.299);
int green =(c.getGreen() * 0.587);
int blue = (c.getBlue() *0.114);
</pre>
<p>Apart from these three methods, there are other methods available in the Color class as described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>brighter()</b></p>
<p>It creates a new Color that is a brighter version of this Color.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>darker()</b></p>
<p>It creates a new Color that is a darker version of this Color.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>getAlpha()</b></p>
<p>It returns the alpha component in the range 0-255.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>getHSBColor(float h, float s, float b)</b></p>
<p>It creates a Color object based on the specified values for the HSB color model.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>HSBtoRGB(float hue, float saturation, float brightness)</b></p>
<p>It converts the components of a color, as specified by the HSB model, to an equivalent set of values for the default RGB model.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>toString()</b></p>
<p>It returns a string representation of this Color.</p>
</td>
</tr>
</table>
<p>The last step is to add all these three values and set it again to the corresponding pixel value. Its syntax is given below &minus;</p>
<pre class="result notranslate">
int sum = red+green+blue;
Color newColor = new Color(sum,sum,sum);
image.setRGB(j,i,newColor.getRGB());
</pre>
<h2>Example</h2>
<p>The following example demonstrates the use of Java BufferedImage class that converts an image to Grayscale &minus;</p>
<pre class="prettyprint notranslate">
import java.awt.*;
import java.awt.image.BufferedImage;

import java.io.*;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

public class GrayScale {

   BufferedImage  image;
   int width;
   int height;
   
   public GrayScale() {
   
      try {
         File input = new File("digital_image_processing.jpg");
         image = ImageIO.read(input);
         width = image.getWidth();
         height = image.getHeight();
         
         for(int i=0; i&lt;height; i++) {
         
            for(int j=0; j&lt;width; j++) {
            
               Color c = new Color(image.getRGB(j, i));
               int red = (int)(c.getRed() * 0.299);
               int green = (int)(c.getGreen() * 0.587);
               int blue = (int)(c.getBlue() *0.114);
               Color newColor = new Color(red+green+blue,
               
               red+green+blue,red+green+blue);
               
               image.setRGB(j,i,newColor.getRGB());
            }
         }
         
         File ouptut = new File("grayscale.jpg");
         ImageIO.write(image, "jpg", ouptut);
         
      } catch (Exception e) {}
   }
   
   static public void main(String args[]) throws Exception {
      GrayScale obj = new GrayScale();
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given example, it converts the image <b>digital_image_processing.jpg</b> to its equivalent Grayscale image and write it on hard disk with the name <b>grayscale.jpg</b>.</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Grayscale Conversion Tutorial" />
<h3>Grayscale Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Java Image Processing Tutorial" />
<h1>Java DIP - Enhancing Image Contrast</h1>
<p>In this chapter learn how to enhance the contrast of an image using histogram equalization.</p> 
<p>We use the <b>OpenCV</b> function <b>equalizeHist()</b> method. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.equalizeHist(source, destination);
</pre>
<p>The parameters are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Source</b></p>
<p>It is 8-bit single channel source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Destination</b></p>
<p>It is the destination image.</p>
</td>
</tr>
</table>
<p>Apart from the equalizeHist() method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to enhance contrast of an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class Main {

   static int width;
   static int height;
   static double alpha = 2;
   static double beta = 50;
   
   public static void main( String[] args ) {
   
      try {
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("grayscale.jpg", 
         Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Imgproc.equalizeHist(source, destination);
         Highgui.imwrite("contrast.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Enhancing Image Contrast Tutorial" />
<h3>Enhanced Contrast Image</h3>
<img src="/java_dip/images/contrast.jpg" alt="Enhancing Image Contrast Tutorial" />
<h1>Java DIP - Enhancing Image Brightness</h1>
<p>In this chapter we enhance the brightness of an image by multiplying each pixel of the image with an alpha value and adding another beta value to it.</p> 
<p>We <b>OpenCV</b> function <b>convertTo</b> that does the above operation automatically. It can be found under <b>Mat</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
int alpha = 2;
int beta = 50;
sourceImage.convertTo(destination, rtype , alpha, beta);		 
</pre>
<p>The parameters are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>destination</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>rtype</b></p>
<p>It is desired output matrix type or, rather the depth, since the number of channels are the same as the input has. if rtype is negative, the output matrix will have the same type as the input.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>alpha</b></p>
<p>It is optional scale factor.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>beta</b></p>
<p>It is optional delta added to the scaled values.</p>
</td>
</tr>
</table>
<p>Apart from the convertTo method, there are other methods provided by the Mat class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>adjustROI(int dtop, int dbottom, int dleft, int dright)</b></p>
<p>It adjusts a submatrix size and position within the parent matrix.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>copyTo(Mat m)</b></p>
<p>It copies the matrix to another one.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>diag()</b></p>
<p>It extracts a diagonal from a matrix, or creates a diagonal matrix.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>dot(Mat m)</b></p>
<p>It computes a dot-product of two vectors.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>reshape(int cn)</b></p>
<p>It changes the shape and/or the number of channels of a 2D matrix without copying the data.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>submat(Range rowRange, Range colRange)</b></p>
<p>It extracts a rectangular sub matrix.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Mat class to enhance brightness of an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;

public class Main {
   static int width;
   static int height;
   static double alpha = 2;
   static double beta = 50;
   
   public static void main( String[] args ) {
   
      try{
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source =  Highgui.imread("digital_image_processing.jpg",Highgui.CV_LOAD_IMAGE_COLOR);
         Mat destination = new Mat(source.rows(),source.cols(),
         
         source.type());
         source.convertTo(destination, -1, alpha, beta);
         Highgui.imwrite("brightWithAlpha2Beta50.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("error:" + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Enhancing Image Brightness Tutorial" />
<h3>Enhanced Bright Image (Alpha=1 &amp; Beta=50)</h3>
<img src="/java_dip/images/brightWithAlpha1Beta50.jpg" alt="Enhancing Image Brightness Tutorial" />
<h3>Enhanced Bright Image (Alpha=2 &amp; Beta=50)</h3>
<img src="/java_dip/images/brightWithAlpha2Beta50.jpg" alt="Enhancing Image Brightness Tutorial" />
<h1>Java DIP - Enhancing Image Sharpness</h1>
<p>In this chapter we learn to increase the sharpness of an image using Gaussian filter.</p> 
<p>First we use <b>OpenCV</b> function <b>GaussianBlur</b>. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.GaussianBlur(source, destination, new Size(0,0), sigmaX);
</pre>
<p>The parameters are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>source</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>destination</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Size</b></p>
<p>It is Gaussian kernel size.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>sigmaX</b></p>
<p>It is Gaussian kernel standard deviation in X direction.</p>
</td>
</tr>
</table>
<p>Further, we use <b>OpenCV</b> function <b>addWeighted</b> to apply image watermark to image. It can be found under <b>Core</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Core.addWeighted(InputArray src1, alpha, src2, beta, gamma, OutputArray dst);
</pre>
<p>The parameters of this function are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src1</b></p>
<p>It is first input array.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>alpha</b></p>
<p>It is weight of the first array elements.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>src2</b></p>
<p>It is second input array of the same size and channel number as src1.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Beta</b></p>
<p>It is weight of the second array elements.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>gamma</b></p>
<p>It is scalar added to each sum.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>dst</b></p>
<p>It is output array that has the same size and number of channels as the input arrays.</p>
</td>
</tr>
</table>
<p>Apart from the GaussianBlur method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta) </b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc and Core class to apply sharpening to an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) {
      try{
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("digital_image_processing.jpg",
         Highgui.CV_LOAD_IMAGE_COLOR);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         Imgproc.GaussianBlur(source, destination, new Size(0,0), 10);
         Core.addWeighted(source, 1.5, destination, -0.5, 0, destination);
         Highgui.imwrite("sharp.jpg", destination);
      } catch (Exception e) {
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Enhancing Image Sharpness Tutorial" />
<h3>Sharped Image</h3>
<img src="/java_dip/images/sharp.jpg" alt="Enhancing Image Sharpness Tutorial" />
<h1>Java DIP - Image Compression Technique</h1>
<p>An image can easily be compressed and stored through Java. Compression of image involves converting an image into jpg and storing it.</p> 
<p>In order to compress an image, we read the image and convert into BufferedImage object.</p>
<p>Further, we get an ImageWriter from <b>getImageWritersByFormatName()</b> method found in the ImageIO class. From this ImageWriter, create an <b>ImageWriteParam</b> object. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Iterator&lt;ImageWriter&gt; list = ImageIO.getImageWritersByFormatName("jpg");
ImageWriteParam obj = writer_From_List.getDefaultWriteParam();
</pre>
<p>From this ImageWriteParam object, you can set the compression by calling these two methods which are <b>setCompressionMode()</b> and <b>setCompressionQuality()</b>. Their syntaxes are as given below &minus;</p>
<pre class="result notranslate">
obj.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
obj.setCompressionQuality(0.05f);
</pre>
<p>The setCompressionMode() method takes Mode_EXPLICIT as the parameter. Some of the other MODES are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th>Modes</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>MODE_DEFAULT</b></p>
<p>It is a constant value that may be passed into methods to enable that feature for future writes.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>MODE_DISABLED</b></p>
<p>It is a constant value that may be passed into methods to disable that feature for future writes.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>MODE_EXPLICIT</b></p>
<p>It is a constant value that may be passed into methods to enable that feature for future writes.</p>
</td>
</tr>
</table>
<p>Apart from the compressions methods, there are other methods provided by the ImageWriteParam class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>canOffsetTiles()</b></p>
<p>It returns true if the writer can perform tiling with non-zero grid offsets while writing.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>getBitRate(float quality)</b></p>
<p>It returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>getLocale()</b></p>
<p>It  returns the currently set Locale, or null if only a default Locale is supported.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>isCompressionLossless()</b></p>
<p>It returns true if the current compression type provides lossless compression.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>unsetCompression()</b></p>
<p>It removes any previous compression type and quality settings.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>unsetTiling()</b></p>
<p>It removes any previous tile grid parameters specified by calls to setTiling.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of ImageWriteParam class to compress an image &minus;</p>
<pre class="prettyprint notranslate">
import java.io.*;
import java.util.*;
import java.awt.image.*;

import javax.imageio.*;
import javax.imageio.stream.ImageOutputStream;

class Compression {

   public static void main(String[] args) throws IOException {
   
      File input = new File("digital_image_processing.jpg");
      BufferedImage image = ImageIO.read(input);

      File compressedImageFile = new File("compress.jpg");
      OutputStream os =new FileOutputStream(compressedImageFile);

      Iterator&lt;ImageWriter&gt;writers =  ImageIO.getImageWritersByFormatName("jpg");
      ImageWriter writer = (ImageWriter) writers.next();

      ImageOutputStream ios = ImageIO.createImageOutputStream(os);
      writer.setOutput(ios);

      ImageWriteParam param = writer.getDefaultWriteParam();
      
      param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
      param.setCompressionQuality(0.05f);
      writer.write(null, new IIOImage(image, null, null), param);
      
      os.close();
      ios.close();
      writer.dispose();
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, it compresses the image <b>digital_image_processing.jpg</b> to its equivalent compressed image and writes it on the hard disk with the name <b>compress.jpg</b>.</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Image Compression Technique Tutorials" />
<h3>Compressed Image - Quality Factor &minus; 0.05</h3>
<img src="/java_dip/images/compressed0.05.jpg" alt="Image Compression Technique Tutorials" />
<h3>Compressed Image - Quality Factor &minus; 0.5</h3>
<img src="/java_dip/images/compressed0.5.jpg" alt="Image Compression Technique Tutorials" />
<h1>Java DIP - Adding Border</h1>
<p>In this chapter we learn to add different types of borders to an image.</p> 
<p>We use <b>OpenCV</b> function <b>copyMakeBorder</b>. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.copyMakeBorder(source,destination,top,bottom,left,right,borderType);
</pre>
<p>The parameters are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>source</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>destination</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>top</b></p>
<p>It is the length in pixels of the border at the top of the image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>bottom</b></p>
<p>Length in pixels of the border at the bottom of the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>left</b></p>
<p>It is the length in pixels of the border at the left of the image.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>right</b></p>
<p>It is the length in pixels of the border at the right of the image.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>borderType</b></p>
<p>It defines the type of border. The possible borders are BORDER_REPLICATE, BORDER_REFLECT, BORDER_WRAP, BORDER_CONSTANT etc.</p>
</td>
</tr>
</table>
<p>Apart from the copyMakeBorder() method, there are other methods provide by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to add border to an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class main {
   public static void main( String[] args ) {
   
      try {
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("digital_image_processing.jpg",
         
         Highgui.CV_LOAD_IMAGE_COLOR);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         int top, bottom, left, right;
         int borderType;

         /// Initialize arguments for the filter
         top = (int) (0.05*source.rows()); 
         bottom = (int) (0.05*source.rows());
         left = (int) (0.05*source.cols()); 
         right = (int) (0.05*source.cols());

         destination = source;
         Imgproc.copyMakeBorder(source, destination, top, bottom, left, right, Imgproc.BORDER_WRAP);
         Highgui.imwrite("borderWrap.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Adding Border Tutorial" />
<h3>Isolated Border Image</h3>
<img src="/java_dip/images/borderIsolated.jpg" alt="Adding Border Tutorial" />
<h3>Wrapped Border Image</h3>
<img src="/java_dip/images/borderWrap.jpg" alt="Adding Border Tutorial" />
<h3>Reflect Border Image</h3>
<img src="/java_dip/images/borderReflect.jpg" alt="Adding Border Tutorial" />
<h1>Java DIP - Image Pyramids</h1>
<p>Image pyramid is nothing but a method to display a multi-resolution image. The lowermost layer is a highest-resolution version of image and the topmost layer is a lowest-resolution version of the image. Image pyramids are used to handle image at different scales.</p>
<p>In this chapter we perform some down sampling and up sampling on images.</p> 
<p>We use <b>OpenCV</b> functions <b>pyrUp</b> and <b>pyrDown</b>. They can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.pyrUp(source, destination, destinationSize);
Imgproc.pyrDown(source, destination,destinationSize);
</pre>
<p>The parameters are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>source</b></p>
<p>It is the source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>destination</b></p>
<p>It is the destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>destinationSize</b></p>
<p>It is the size of the output image. By default, it is computed as Size((src.cols*2), (src.rows*2)).</p>
</td>
</tr>
</table>
<p>Apart from the pyrUp and pyrDown methods, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to perform up sampling and down sampling on an image.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class main {
   public static void main( String[] args ) {
   
      try{
      
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("digital_image_processing.jpg",
         Highgui.CV_LOAD_IMAGE_COLOR);
         
         Mat destination1 = new Mat(source.rows()*2, source.cols()*2,source.type());
         destination1 = source;
         
         Imgproc.pyrUp(source, destination1, new  Size(source.cols()*2   source.rows()*2));
         Highgui.imwrite("pyrUp.jpg", destination1);
         
         source = Highgui.imread("digital_image_processing.jpg", 
         Highgui.CV_LOAD_IMAGE_COLOR);
         
         Mat destination = new Mat(source.rows()/2,source.cols()/2, source.type());
         destination = source;
         Imgproc.pyrDown(source, destination, new Size(source.cols()/2,  source.rows()/2));
         Highgui.imwrite("pyrDown.jpg", destination);
         
      } catch (Exception e) { 
         System.out.println("error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Image Pyramids Tutorial" />
<p>On the original image, pyrUp(UP Sampling) and pyrDown(Down Sampling) are performed. The output after sampling is as shown below &minus;</p>
<h3>PyrUP Image</h3>
<img src="/java_dip/images/pyrup.JPG" alt="Image Pyramids Tutorial" />
<h3>pyrDown Image</h3>
<img src="/java_dip/images/pyrDown.jpg" alt="Image Pyramids Tutorial" />
<h1>Java DIP - Basic Thresholding</h1>
<p>Thresholding enables to achieve image segmentation in the easiest way. Image segmentation means dividing the complete image into a set of pixels in such a way that the pixels in each set have some common characteristics. Image segmentation is highly useful in defining objects and their boundaries.</p>
<p>In this chapter we perform some basic thresholding operations on images.</p> 
<p>We use <b>OpenCV</b> function <b>threshold</b>. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.threshold(source, destination, thresh , maxval , type);
</pre>
<p>The parameters are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>source</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>destination</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>thresh</b></p>
<p>It is threshold value.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>maxval</b></p>
<p>It is the maximum value to be used with the THRESH_BINARY and THRESH_BINARY_INV threshold types.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>type</b></p>
<p>The possible types are THRESH_BINARY, THRESH_BINARY_INV, THRESH_TRUNC, and THRESH_TOZERO.</p>
</td>
</tr>
</table>
<p>Apart from these thresholding methods, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to perform thresholding operations to an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class main {
   public static void main( String[] args ) {
   
      try{

         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("digital_image_processing.jpg",  Highgui.CV_LOAD_IMAGE_COLOR);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());

         destination = source;
         Imgproc.threshold(source,destination,127,255,Imgproc.THRESH_TOZERO);
         Highgui.imwrite("ThreshZero.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Basic Thresholding Tutorial" />
<p>On the above original image, some thresholding operations is performed which is shown in the output below &minus;</p>
<h3>Thresh Binary</h3>
<img src="/java_dip/images/ThreshBinary.jpg" alt="Basic Thresholding Tutorial" />
<h3>Thresh Binary Invert</h3>
<img src="/java_dip/images/ThreshBinaryInvert.jpg" alt="Basic Thresholding Tutorial" />
<h3>Thresh Zero</h3>
<img src="/java_dip/images/ThreshZero.jpg" alt="Basic Thresholding Tutorial" />
<h1>Java DIP - Image Shape Conversion</h1>
<p>The shape of the image can easily be changed by using OpenCV. Image can either be flipped, scaled, or rotated in any of the four directions.</p> 
<p>In order to change the shape of the image, we read the image and convert into Mat object. Its syntax is given below &minus;</p>
<pre class="result notranslate">
File input = new File("digital_image_processing.jpg");
BufferedImage image = ImageIO.read(input);
//convert Buffered Image to Mat.
</pre>
<h2>Flipping an Image</h2>
<p>OpenCV allows three types of flip codes which are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Flip Code &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>0</b></p>
<p>0 means, flipping around x axis.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>1</b></p>
<p>1 means, flipping around y axis.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>-1</b></p>
<p>-1 means, flipping around both axis.</p>
</td>
</tr>
</table>
<p>We pass the appropriate flip code into method <b>flip()</b> in the <b>Core</b> class. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Core.flip(source mat, destination mat1, flip_code);
</pre>
<p>The method <b>flip()</b> takes three parameters &minus; the source image matrix, the destination image matrix, and the flip code.</p>
<p>Apart from the flip method, there are other methods provided by the Core class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>add(Mat src1, Mat src2, Mat dst)</b></p>
<p>It calculates the per-element sum of two arrays or an array and a scalar.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>bitwise_and(Mat src1, Mat src2, Mat dst)</b></p>
<p>It calculates the per-element bit-wise conjunction of two arrays or an array and a scalar.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>bitwise_not(Mat src, Mat dst)</b></p>
<p>It inverts every bit of an array.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>circle(Mat img, Point center, int radius, Scalar color)</b></p>
<p>It draws a circle.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>sumElems(Mat src)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>subtract(Mat src1, Scalar src2, Mat dst, Mat mask)</b></p>
<p>It calculates the per-element difference between two arrays or array and a scalar.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates the use of Core class to flip an image &minus;</p>
<pre class="prettyprint notranslate">
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

import java.io.File;
import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) {
   
      try {
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         File input = new File("digital_image_processing.jpg");
         BufferedImage image = ImageIO.read(input);	

         byte[] data = ((DataBufferByte) image.getRaster().  getDataBuffer()).getData();
         Mat mat = new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
         mat.put(0, 0, data);

         Mat mat1 = new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC3);
         Core.flip(mat, mat1, -1);

         byte[] data1 = new byte[mat1.rows()*mat1.cols()*(int)(mat1.elemSize())];
         mat1.get(0, 0, data1);
         BufferedImage image1 = new BufferedImage(mat1.cols(), mat1.rows(), 5);
         image1.getRaster().setDataElements(0,0,mat1.cols(),mat1.rows(),data1);

         File ouptut = new File("hsv.jpg");
         ImageIO.write(image1, "jpg", ouptut);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h3>Output</h3>
<p>When you run the above example, it would flip an image name <b>digital_image_processing.jpg</b> to its equivalent HSV color space image and write it on hard disk with name <b>flip.jpg</b>.</p>
<h4>Original Image</h4>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Image Shape Conversion Tutorial" />
<h4>Flipped Image</h4>
<img src="/java_dip/images/flip.jpg" alt="Image Shape Conversion Tutorial" />
<h1>Java DIP - Applying Gaussian Filter</h1>
<p>In this chapter, we apply Gaussian filter to an image that blurs an image. We are going to use OpenCV function GaussianBlur to apply Gaussian filter to images. It can be found under Imgproc package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.GaussianBlur(source, destination,Size,SigmaX);
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Argument &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>source</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>destination</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Size</b></p>
<p>It is Gaussian kernel size.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>SigmaX</b></p>
<p>It is Gaussian kernel standard deviation in X direction.</p>
</td>
</tr>
</table>
<p>Apart from the GaussianBlur method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Gaussian filter to an image.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;


public class Main {
   public static void main( String[] args ) {
   
      try {
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("digital_image_processing.jpg",
         Highgui.CV_LOAD_IMAGE_COLOR);
         
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         Imgproc.GaussianBlur(source, destination,new Size(45,45), 0);
         Highgui.imwrite("Gaussian45.jpg", destination);
      
      } catch (Exception e) {
         System.out.println("Error:" + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Applying Gaussian Filter Tutorial" />
<p>When this original image is convolved with the Gaussian filter of size 11 and 45, the following output is seen.</p>
<h3>Gaussian filter of size 11</h3>
<img src="/java_dip/images/Gaussian11.jpg" alt="Applying Gaussian Filter Tutorial" />
<h3>Gaussian filter of size 45</h3>
<img src="/java_dip/images/Gaussian45.jpg" alt="Applying Gaussian Filter Tutorial" />
<h1>Java DIP - Applying Box Filter</h1>
<p>We apply Box filter that blurs an image. A Box filter could be of dimensions 3x3, 5x5, 9x9 etc.</p> 
<p>We use <b>OpenCV</b> function <b>filter2D</b> to apply Box filter to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Argument &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point (-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D() method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Box filter to an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         Mat kernel = Mat.ones(kernelSize,kernelSize, CvType.CV_32F);	      
         
         for(int i=0; i&lt;kernel.rows(); i++) {
            for(int j=0; j&lt;kernel.cols(); j++) {
            
               double[] m = kernel.get(i, j);
               
               for(int k =0; k&lt;m.length; k++) {
                  m[k] = m[k]/(kernelSize * kernelSize);
               }
               kernel.put(i,j, m);
            }
         }	   
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Box Filter Tutorial" />
<p>In this example we convolve our image with the following filter (kernel). This filter results in blurring an image as its size increases.</p>
<p>This original image has been convolved with the box filter of size 5, which is given below &minus;</p>
<h3>Box filter of size 5</h3>
<table class="table table-bordered">
<tr>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
</tr>
<tr>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
</tr>
<tr>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
</tr>
<tr>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
</tr>
<tr>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
<td>1/25</td>
</tr>
</table>
<h3>Convolved Image (with Box Filter of Size 5)</h3>
<img src="/java_dip/images/BoxFilterOf5.jpg" alt="Applying Box Filter Tutorial" />
<h3>Convolved Image (with Box Filter of Size 9)</h3>
<img src="/java_dip/images/BoxFilterOf9.jpg" alt="Applying Box Filter Tutorial" />
<h1>Java DIP - Eroding and Dilating</h1>
<p>In this chapter we learn apply two very common morphology operators:Dilation and Erosion.</p> 
<p>We use <b>OpenCV</b> function <b>erode</b> and <b>dilate</b>. They can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.erode(source, destination, element);
Imgproc.dilate(source, destination, element);				
</pre>
<p>The parameters are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>source</b></p>
<p>It is Source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>destination</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>element</b></p>
<p>It is a structuring element used for erosion and dilation, if element=Mat(), a 3 x 3 rectangular structuring element is used.</p>
</td>
</tr>
</table>
<p>Apart from erode() and dilate() methods, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta) </b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to perform erosion and dilation on an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class main {
   public static void main( String[] args ) {
   
      try{	
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("digital_image_processing.jpg",  Highgui.CV_LOAD_IMAGE_COLOR);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         destination = source;

         int erosion_size = 5;
         int dilation_size = 5;
         
         Mat element = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new  Size(2*erosion_size + 1, 2*erosion_size+1));
         Imgproc.erode(source, destination, element);
         Highgui.imwrite("erosion.jpg", destination);

         source = Highgui.imread("digital_image_processing.jpg",  Highgui.CV_LOAD_IMAGE_COLOR);
         
         destination = source;
         
         Mat element1 = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new  Size(2*dilation_size + 1, 2*dilation_size+1));
         Imgproc.dilate(source, destination, element1);
         Highgui.imwrite("dilation.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("error:" + e.getMessage());
      } 
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Eroding and Dilating Tutorial" />
<p>On the above original image, some erosion and dilation operations have been performed which have been shown in the output below &minus;</p>
<h3>Erosion</h3>
<img src="/java_dip/images/erosion.jpg" alt="Eroding and Dilating Tutorial" />
<h3>Dilation</h3>
<img src="/java_dip/images/dilation.jpg" alt="Eroding and Dilating Tutorial" />
<h1>Java DIP - Applying Watermark</h1>
<p>In this chapter we learn two ways of applying watermark on images. These ways are &minus;</p>
<ul class="list">
<li>Applying Text Watermark</li>
<li>Applying Image watermark</li>
</ul> 
<h2>Applying Text Watermark</h2>
<p>We use <b>OpenCV</b> function <b>putText</b> to apply text watermark to image. It can be found under <b>Core</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Core.putText(source, Text, Point, fontFace ,fontScale , color);
</pre>
<p>The parameters of this function are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Source</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Text</b></p>
<p>It is the string text that would appear on the image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Point</b></p>
<p>It is the point where text should appear on image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>fontFace</b></p>
<p>Font type. For example &minus; FONT_HERSHEY_SIMPLEX, FONT_HERSHEY_PLAIN, FONT_HERSHEY_COMPLEX etc.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>fontScale</b></p>
<p>It is font scale factor that is multiplied by the font-specific base size.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>color</b></p>
<p>It is text color.</p>
</td>
</tr>
</table>
<p>Apart from the putText method, there are other methods provided by the Core class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>normalize(Mat src, Mat dst, double alpha, double beta, int norm_type)</b></p>
<p>It normalizes the norm or value range of an array.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>perspectiveTransform(Mat src, Mat dst, Mat m)</b></p>
<p>It performs the perspective matrix transformation of vectors.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>phase(Mat x, Mat y, Mat angle)</b></p>
<p>It calculates the rotation angle of 2D vectors.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>rectangle(Mat img, Point pt1, Point pt2, Scalar color)</b></p>
<p>It draws a simple, thick, or filled up-right rectangle.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>reduce(Mat src, Mat dst, int dim, int rtype, int dtype)</b></p>
<p>It reduces a matrix to a vector.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>transform(Mat src, Mat dst, Mat m)</b></p>
<p>It performs the matrix transformation of every array element.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates the use of Core class to apply text watermark to an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) {
   
      try{
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         Mat source = Highgui.imread("digital_image_processing.jpg",  Highgui.CV_LOAD_IMAGE_COLOR);
         Mat destination = new Mat(source.rows(),source.cols(), source.type());  
         
         Core.putText(source, "Tutorialspoint.com", new Point  (source.rows()/2,source.cols()/2), Core.FONT_ITALIC,new Double(1),new  Scalar(255));

         Highgui.imwrite("watermarked.jpg", source);
         
      } catch (Exception e) {
         System.out.println("Error: "+e.getMessage());
      }
   }
}
</pre>
<h3>Output</h3>
<p>When you execute the given code, the following output is seen &minus;</p>
<h4>Original Image</h4>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Applying WaterMark Tutorial" />
<h4>Text Watermarked Image</h4>
<img src="/java_dip/images/watermarked.jpg" alt="Applying WaterMark Tutorial" />
<h2>Applying Image Watermark on Image</h2>
<p>We are going to use <b>OpenCV</b> function <b>addWeighted</b> to apply image watermark to image. It can be found under <b>Core</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Core.addWeighted(InputArray src1, alpha, src2 (Watermark image), beta, gamma, OutputArray dst);
</pre>
<p>The parameters of this function are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Parameter &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src1</b></p>
<p>It is first input array.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>alpha</b></p>
<p>It is the weight of the first array elements.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>src2</b></p>
<p>It is the second input array of the same size and channel number as src1.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>beta</b></p>
<p>It is the weight of the second array elements.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>gamma</b></p>
<p>It is the scalar added to each sum.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>dst</b></p>
<p>It is the output array that has the same size and number of channels as the input arrays.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates the use of Core class to apply image watermark to an image &minus;</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) {
   
      try{
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("digital_image_processing.jpg",  Highgui.CV_LOAD_IMAGE_COLOR);
         Mat waterMark = Highgui.imread("watermark.png",  Highgui.CV_LOAD_IMAGE_COLOR);
         Rect ROI = new Rect(waterMark.rows() * 4,waterMark.cols(),  waterMark.cols(),waterMark.rows());
         
         Core.addWeighted(source.submat(ROI), 0.8, waterMark, 0.2, 1,  source.submat(ROI));
         Highgui.imwrite("watermarkedImage.jpg", source);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h3>Output</h3>
<p>When you execute the given code, the following output is seen &minus;</p>
<h4>Original Image</h4>
<img src="/java_dip/images/digital_image_processing.jpg" alt="Applying WaterMark Tutorial" />
<h4>The Watermark Image</h4>
<img src="/java_dip/images/watermark.jpg" alt="Applying WaterMark Tutorial" />
<h4>Watermarked Image</h4>
<img src="/java_dip/images/watermarkedImage.jpg" alt="Applying WaterMark Tutorial" />
<h1>Java DIP - Understand Convolution</h1>
<p>Convolution is a mathematical operation on two functions f and g. The function f and g in this case are images, since an image is also a two dimensional function.</p> 
<h2>Performing Convolution</h2>
<p>In order to perform convolution on an image, following steps are taken &minus;</p>
<ul class="list">
<li>Flip the mask (horizontally and vertically) only once.</li>
<li>Slide the mask onto the image.</li>
<li>Multiply the corresponding elements and then add them.</li>
<li>Repeat this procedure until all values of the image has been calculated.</li>
</ul>
<p>We use <b>OpenCV</b> function <b>filter2D</b> to apply convolution to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Argument &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point (-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example demonstrates the use of Imgproc class to perform convolution on an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 3;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Mat kernel = new Mat(kernelSize,kernelSize, CvType.CV_32F) {
            {
               put(0,0,0);
               put(0,1,0);
               put(0,2,0);

               put(1,0,0);
               put(1,1,1);
               put(1,2,0);

               put(2,0,0);
               put(2,1,0);
               put(2,2,0);
            }
         };
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("original.jpg", destination);
         
      } catch (Exception e) {
          System.out.println("Error:" + e.getMessage());
      }
   }
}
</pre>
<h3>Output</h3>
<p>In this example we convolve our image with the following filter(kernel). This filter results in producing original image as it is &minus;</p>
<table class="table table-bordered">
<tr>
<td class="ts">0</td>
<td class="ts">0</td>
<td class="ts">0</td>
</tr>
<tr>
<td class="ts">0</td>
<td class="ts">1</td>
<td class="ts">0</td>
</tr>
<tr>
<td class="ts">0</td>
<td class="ts">0</td>
<td class="ts">0</td>
</tr>
</table>
<h4>Original Image</h4>
<img src="/java_dip/images/grayscale.jpg" alt="Understand Convolution Tutorial" />
<h4>Convolved Image</h4>
<img src="/java_dip/images/grayscale.jpg" alt="Understand Convolution Tutorial" />
<h1>Java DIP - Prewitt Operator</h1>
<p>Prewitt operator is used for edge detection in an image. It detects two types of edges: vertical edges and horizontal edges.</p> 
<p>We use <b>OpenCV</b> function <b>filter2D</b> to apply Prewitt operator to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Argument &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point (-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D method, there are other methods provide by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Prewitt operator to an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg", Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Mat kernel = new Mat(kernelSize,kernelSize, CvType.CV_32F) {
            {
               put(0,0,-1);
               put(0,1,0);
               put(0,2,1);

               put(1,0-1);
               put(1,1,0);
               put(1,2,1);

               put(2,0,-1);
               put(2,1,0);
               put(2,2,1);
            }
         };	 
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Prewitt operator Tutorial" />
<p>This original image is convolved with the Prewitt operator of vertical edges as given below &minus;</p>
<h3>Vertical direction</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image(Vertical Direction)</h3>
<img src="/java_dip/images/prewittVertical.jpg" alt="Applying Prewitt operator Tutorial" />
<p>This original image has also been convolved with the Prewitt operator of horizontal edges, which is given below &minus;</p>
<h3>Horizontal Direction</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-1</td>
<td>-1</td>
<td>-1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image(Horizontal Direction)</h3>
<img src="/java_dip/images/PrewittHorizontol.jpg" alt="Applying Prewitt operator Tutorial" />
<h1>Java DIP - Sobel Operator</h1>
<p>Sobel operator is very similar to Prewitt operator. It is also a derivative mask and is used for edge detection. Sobel operator is used to detect two kinds of edges in an image: Vertical direction edges and Horizontal direction edges.</p> 
<p>We are going to use <b>OpenCV</b> function <b>filter2D</b> to apply Sobel operator to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th>Argument</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point (-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D method, there are other methods provide by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Sobel operator to an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Mat kernel = new Mat(kernelSize,kernelSize, CvType.CV_32F) {
            {
               put(0,0,-1);
               put(0,1,0);
               put(0,2,1);

               put(1,0-2);
               put(1,1,0);
               put(1,2,2);

               put(2,0,-1);
               put(2,1,0);
               put(2,2,1);
            }
         };	      
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Sobel operator Tutorial" />
<p>This original image is convolved with the Sobel operator of vertical edges, which is given below &minus;</p>
<h3>Vertical Direction</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>-2</td>
<td>0</td>
<td>2</td>
</tr>
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image(Vertical Direction)</h3>
<img src="/java_dip/images/sobelVertical.jpg" alt="Applying Sobel operator Tutorial" />
<p>This original is convolved with the Sobel operator of horizontal edges, which is given below &minus;</p>
<h3>Horizontal Direction</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-1</td>
<td>-2</td>
<td>-1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image(Horizontal Direction)</h3>
<img src="/java_dip/images/sobelHorizontol.jpg" alt="Applying Sobel operator Tutorial" />
<h1>Java DIP - Kirsch Operator</h1>
<p>Kirsch compass masks are yet another type of derivative mask which are used for edge detection. This operator is also known as direction mask. In this operator we take one mask and rotate it in all the eight compass directions to get edges of the eight directions.</p> 
<p>We are going to use <b>OpenCV</b> function <b>filter2D</b> to apply Kirsch operator to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th>Argument</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point (-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D() method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Kirsch operator to an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Mat kernel = new Mat(kernelSize,kernelSize, CvType.CV_32F) {
            {
               put(0,0,-3);
               put(0,1,-3);
               put(0,2,-3);
      
               put(1,0-3);
               put(1,1,0);
               put(1,2,-3);

               put(2,0,5);
               put(2,1,5);
               put(2,2,5);
            }
         };	      
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Kirsch operator Tutorial" />
<p>This original image is convolved with the Kirsch operator of East edges, which as given below &minus;</p>
<h3>Kirsch East</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-3</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>-3</td>
<td>0</td>
<td>-3</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>5</td>
</tr>
</table>
<h3>Convolved Image(Kirsch East)</h3>
<img src="/java_dip/images/KirschEast.jpg" alt="Applying Kirsch operator Tutorial" />
<p>This original image is convolved with the Kirsch operator of South West edges, which as given below &minus;</p>
<h3>Kirsch South West</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>5</td>
<td>5</td>
<td>-3</td>
</tr>
<tr>
<td>5</td>
<td>0</td>
<td>-3</td>
</tr>
<tr>
<td>-3</td>
<td>-3</td>
<td>-3</td>
</tr>
</table>
<h3>Convolved Image (Kirsch South West)</h3>
<img src="/java_dip/images/KirschSouthWest.jpg" alt="Applying Kirsch operator Tutorial" />
<h1>Java DIP - Robinson Operator</h1>
<p>Robinson compass masks are yet another type of derivative masks which are used for edge detection. This operator is also known as direction mask. In this operator we take one mask and rotate it in all the eight major directions to get edges of the eight directions.</p> 
<p>We are going to use <b>OpenCV</b> function <b>filter2D</b> to apply Robinson operator to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Argument &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point(-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Robinson operator to an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Mat kernel = new Mat(kernelSize,kernelSize, CvType.CV_32F) {
            {
               put(0,0,-1);
               put(0,1,0);
               put(0,2,1);

               put(1,0-2);
               put(1,1,0);
               put(1,2,2);

               put(2,0,-1);
               put(2,1,0);
               put(2,2,1);
            }
         };	      
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Robinson operator Tutorial" />
<p>This original image is convolved with the Robinson operator of North edges as given below &minus;</p>
<h3>North Direction Mask</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>-2</td>
<td>0</td>
<td>2</td>
</tr>
<tr>
<td>-1</td>
<td>0</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image(Robinson North)</h3>
<img src="/java_dip/images/RobinsonNorth.jpg" alt="Applying Robinson operator Tutorial" />
<p>This original image has also been convolved with the Robinson operator of East edges as given below &minus;</p>
<h3>East Direction Mask</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>-1</td>
<td>-2</td>
<td>-1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image(Robinson East)</h3>
<img src="/java_dip/images/RobinsonEast.jpg" alt="Applying Robinson operator Tutorial" />
<h1>Java DIP - Laplacian Operator</h1>
<p>Laplacian Operator is also a derivative operator which is used to find edges in an image. The major difference between Laplacian and other operators like Prewitt, Sobel, Robinson, and Kirsch is that these all are first order derivative masks but Laplacian is a second order derivative mask.</p> 
<p>We use <b>OpenCV</b> function <b>filter2D</b> to apply Laplacian operator to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th>Arguments</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>depth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point (-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D() method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply Laplacian operator to an image of Grayscale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());

         Mat kernel = new Mat(kernelSize,kernelSize, CvType.CV_32F) {
            {
               put(0,0,0);
               put(0,1,-1)
               put(0,2,0);

               put(1,0-1);
               put(1,1,4);
               put(1,2,-1);

               put(2,0,0);
               put(2,1,-1);
               put(2,2,0);
            }
         };	      
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Laplacian operator Tutorial" />
<p>This original image is convolved with the Laplacian Negative operator as given below &minus;</p>
<h3>Laplacian Negative</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>0</td>
<td>-1</td>
<td>0</td>
</tr>
<tr>
<td>-1</td>
<td>4</td>
<td>-1</td>
</tr>
<tr>
<td>0</td>
<td>-1</td>
<td>0</td>
</tr>
</table>
<h3>Convolved Image(Laplacian Negative)</h3>
<img src="/java_dip/images/LaplacianNegative.jpg" alt="Applying Laplacian operator Tutorial" />
<p>This original image is convolved with the Laplacian Positive operator as given below &minus;</p>
<h3>Laplacian Positive</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>-4</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</table>
<h3>Convolved Image (Laplacian Positive)</h3>
<img src="/java_dip/images/LaplacianPositive.jpg" alt="Applying Laplacian operator Tutorial" />
<h1>Java DIP - Weighted Average Filter</h1>
<p>In weighted average filter, we gave more weight to the center value, due to which the contribution of center becomes more than the rest of the values. Due to weighted average filtering, we can control the blurring of image.</p> 
<p>We use <b>OpenCV</b> function <b>filter2D</b> to apply weighted average filter to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
filter2D(src, dst, depth , kernel, anchor, delta, BORDER_DEFAULT );
</pre>
<p>The function arguments are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Argument &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>src</b></p>
<p>It is source image.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dst</b></p>
<p>It is destination image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>ddepth</b></p>
<p>It is the depth of dst. A negative value (such as -1) indicates that the depth is the same as the source.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>kernel</b></p>
<p>It is the kernel to be scanned through the image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>anchor</b></p>
<p>It is the position of the anchor relative to its kernel. The location Point(-1, -1) indicates the center by default.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>delta</b></p>
<p>It is a value to be added to each pixel during the convolution. By default it is 0.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>BORDER_DEFAULT</b></p>
<p>We let this value by default.</p>
</td>
</tr>
</table>
<p>Apart from the filter2D() method, there are other methods provide by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply weighted average filter to an image of Graycale.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class convolution {
   public static void main( String[] args ) {
   
      try {
         int kernelSize = 9;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("grayscale.jpg",  Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows(),source.cols(),source.type());
         
         Mat kernel = Mat.ones(kernelSize,kernelSize, CvType.CV_32F) {	      
         
         for(int i=0; i&lt;kernel.rows(); i++) {
            for(int j=0; j&lt;kernel.cols(); j++) {

               double[] m = kernel.get(i, j);

               for(int k =0; k&lt;m.length; k++) {

                  if(i==1 &amp;&amp; j==1) {
                     m[k] = 10/18;
                  }
                  else{
                     m[k] = m[k]/(18);
                  }
               }
               kernel.put(i,j, m);

               }
            }	
         };	      
         
         Imgproc.filter2D(source, destination, -1, kernel);
         Highgui.imwrite("output.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Applying Weighted Average Filter Tutorial" />
<p>This original image is convolved with the weighted average filter as given below &minus;</p>
<h3>Weighted Average Filter</h3>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>10</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</table>
<h3>Convolved Image</h3>
<img src="/java_dip/images/WeightedAverageOfWeight10.jpg" alt="Applying Weighted Average Filter Tutorial" />
<h1>Java DIP - Create Zooming Effect</h1>
<p>Zooming is the process of enlarging an image so that the details in the image become more visible and prominent.</p> 
<p>We use <b>OpenCV</b> function <b>resize</b> to apply zooming to images. It can be found under <b>Imgproc</b> package. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.resize(source,destination, destination.size(),zoomFactor,zoomFactor,Interpolation);
</pre>
<p>In the resize function, we pass source image, destination image and its size, zooming factor, and the interpolation method to use.</p>
<p>The interpolation methods available are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Interpolation method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>INTER_NEAREST</b></p>
<p>It is nearest-neighbour interpolation.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>INTER_LINEAR</b></p>
<p>It is bilinear interpolation (used by default).</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>INTER_AREA</b></p>
<p>It is resampling using pixel area relation. It may be a preferred method for image decimation, as it gives more-free results.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>INTER_CUBIC</b></p>
<p>It is a bi-cubic interpolation over 4x4 pixel neighbourhood.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>INTER_LANCZOS4</b></p>
<p>It is a Lanczos interpolation over 8x8 pixel neighbourhood.</p>
</td>
</tr>
</table>
<p>Apart from the resize method, there are other methods provided by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to apply zooming to an image.</p>
<pre class="prettyprint notranslate">
import org.opencv.core.Core;
import org.opencv.core.Mat;

import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) {
   
      try {
         int zoomingFactor = 2;
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         
         Mat source = Highgui.imread("image.jpg", Highgui.CV_LOAD_IMAGE_GRAYSCALE);
         Mat destination = new Mat(source.rows() * zoomingFactor, source.cols()*  zoomingFactor,source.type());  
         
         Imgproc.resize(source, destination, destination.size(),  zoomingFactor,zoomingFactor,Imgproc.INTER_NEAREST);
         Highgui.imwrite("zoomed.jpg", destination);
         
      } catch (Exception e) {
         System.out.println("Error: "+e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given code, the following output is seen &minus;</p>
<h3>Original Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="Create Zooming Effect Tutorial" />
<h3>Zoomed Image(Zooming factor &minus; 2)</h3>
<img src="/java_dip/images/zoom.JPG" alt="Create Zooming Effect Tutorial" />
<h1>Java DIP - Open Source Libraries</h1>
<p>In this chapter, we explore some of the free image processing libraries that are widely used and can be easily integrated in the project.	These libraries include &minus;</p>
<ul class ="list">
<li>ImageJ</li>
<li>Fiji</li>
<li>Commons Imaging</li>
<li>ImageMagick</li>
<li>Endrov</li>
<li>LeadTools</li>
<li>OpenCv</li>
</ul>
<h2>ImageJ</h2>
<p>ImageJ is a public domain Java image processing program inspired by NIH Image for the Macintosh. It can display, edit, analyze, process, save, and print 8-bit, 16-bit, and 32-bit images.</p>
<p>Some of the basic features of ImageJ are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Runs Everywhere</b></p>
<p>ImageJ is written in Java, which allows it to run on Linux, Mac OS X and Windows, in both 32-bit and 64-bit modes.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Open Source</b></p>
<p>ImageJ and its Java source code are freely available and in the public domain. </p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Toolkit</b></p>
<p>Use ImageJ as an image processing toolkit (class library) to develop applets, servlets, or applications.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Data Types</b></p>
<p>8-bit grayscale or indexed color, 16-bit unsigned integer, 32-bit floating-point, and RGB color.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>File Formats</b></p>
<p>Open and save GIF, JPEG, BMP, PNG, PGM, FITS, and ASCII. Open DICOM. Open TIFFs, GIFs, JPEGs, DICOMs, and raw data using a URL.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Selections</b></p>
<p>Create rectangular, elliptical, or irregular area selections. Create line and point selections.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Image Enhancement</b></p>
<p>Supports smoothing, sharpening, edge detection, median filtering, and thresholding on both 8-bit grayscale and RGB color images.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Color Processing</b></p>
<p>Split a 32-bit color image into RGB or HSV components. Merge 8-bit components into a color image.</p>
</td>
</tr>
</table>
<h2>Fiji</h2>
<p>Fiji is an image processing package. It can be described as a distribution of ImageJ (and ImageJ2) together with Java, Java3D, and a lot of plug-ins organized into a coherent menu structure. Fiji compares to ImageJ as Ubuntu compares to Linux.</p>
<p>Apart from the ImageJ basic features, some of the advanced features of Fiji are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Registering 3D images</b></p>
<p>This involves Elastic Alignment and Montage, Feature Extraction, Image Stabilizer etc.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Segmenting images</b></p>
<p>It offers more than 35 types of segmentation.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Useful keyboard short cuts</b></p>
<p>Fuji has a lot of keyboard short-cuts.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Scripting</b></p>
<p>Allow scripting with Macros, in JavaScript, JRuby, Jython, Clojure, and Beanshell.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Developing Plug-ins</b></p>
<p>Use the Script Editor to start developing plug-ins and then run the plug-ins.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>ImageJ Tricks</b></p>
<p>ImageJ is easy to use, but sometimes you wish for some function that is actually implemented, yet you do not know how to trigger.</p>
</td>
</tr>
</table>
<h2>Commons Imaging</h2>
<p>Apache Commons Imaging, previously known as Apache Commons Sanselan, is a library that reads and writes a variety of image formats, including fast parsing of image information such as(size, color, space, ICC profile, etc.) and the meta data.</p>
<p>Some of the basic features of ImageJ are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Java</b></p>
<p>Apache Commons Imaging is written in 100% pure Java. It executes on any JVM, and any platform, without modification.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Image Formats</b></p>
<p>It reads and writes a wide variety of image formats, and supports some variations and encodings missed by all or most other libraries.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Metadata support</b></p>
<p>It supports reading and writing a variety of meta data in a structured way, including EXIF meta data.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Network Friendly</b></p>
<p>It is network-friendly. Commons Imaging only reads the data it needs, and caches what is read so that it is not too heavy on the network.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Easy to use</b></p>
<p>It is designed to be very easy to use. It has a simple, clean interface. Most operations are a single Imaging method calls.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Transparent</b></p>
<p>Commons Imaging aims to be transparent. There are no hidden buffers to dispose, no native memory to free, no background threads.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Open Source</b></p>
<p>It is Free Software/Open Source. It is available under the Apache Software License.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Color Conversions</b></p>
<p>The ColorConversions class offers methods to convert between the following color spaces &minus; CIE-L*CH, CIE-L*ab, CIE-L*uv, CMY, CMYK, HSL, HSV, Hunter-Lab, RGB, XYZ, and YXY.</p>
</td>
</tr>
</table>
<h2>ImageMagick</h2>
<p>ImageMagick is a software suite to create, edit, compose, or convert bitmap images. It can read and write images in more than 100 formats including DPX, EXR, GIF, JPEG, JPEG-2000, PDF, PNG, Postscript, SVG, and TIFF. Use ImageMagick to resize, flip, mirror, rotate, distort, shear, and transform images, adjust image colors, apply various special effects, or draw text, lines, polygons, ellipses, and Bezier curve.</p>
<p>Some of the basic features of ImageMagick are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Format conversion</b></p>
<p>It converts an image from one format to another (e.g. PNG to JPEG).</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Transform</b></p>
<p>It can resize, rotate, crop, flip or trim an image.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Transparency</b></p>
<p>It renders portions of an image invisible.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Draw</b></p>
<p>It adds shapes or text to an image.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Decorate</b></p>
<p>It adds a border or frame to an image.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Special effects</b></p>
<p>It can Blur, sharpen, threshold, or tint an image.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Animation</b></p>
<p>It can create a GIF animation sequence from a group of images.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Composite</b></p>
<p>It can overlap one image over another.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>Morphology of shapes</b></p>
<p>It extracts features, describe shapes and recognize patterns in images.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>Encipher or decipher an image</b></p>
<p>It converts ordinary images into unintelligible gibberish and back again.</p>
</td>
</tr>
</table>
<h2>Endrov</h2>
<p>Endrov is a multi-purpose image analysis program. It is written independently and designed to address many of the shortcomings of other free software and many commercial packages.</p>
<p>Some of the basic features of Endrov are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>View data</b></p>
<p>It views data, in 2D and 3D. Designed to handle complex 4D data schemes and unlimited number of channels, where each channel can have its own X, Y, and Z resolution.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Annotate your images</b></p>
<p>It annotates your images, automatically or by hand, to understand them and get statistics.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Undo and Redo</b></p>
<p>It can undo and redo for all operations.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Lazy Evaluation</b></p>
<p>It is designed from the ground to handle large image sets. Endrov uses lazy evaluation, a concept mostly available in research programming languages.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Scripting language</b></p>
<p>It supports graphical scripting language, as well as traditional scripting.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Java</b></p>
<p>Written in Java. Plug-in architecture allows easy extension with new Java plug-ins. It can interact with Matlab.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Formats</b></p>
<p>It accesses almost all commercial and open file formats using Bio-formats.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Microscopic Processing</b></p>
<p>It can control all your microscopes with one program and do on-the-fly image analysis.</p>
</td>
</tr>
</table>
<h2>LEADTOOLS</h2>
<p>LEADTOOLS provides over 200 image processing functions in several categories including document cleanup, medical image enhancement, color conversion and correction, noise reduction, edge detection, and more.</p>
<p>Some of the basic features of LEADTOOLS are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Scanned Document Image Processing</b></p>
<p>This powerful collection of functions can read scanned documents of artefacts and imperfections such as punched holes, skewed angles, borders, dust speckles, and more.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Medical Image Processing</b></p>
<p>Enhance the image or highlight the details by shifting, selecting, subtracting, and removing the background for better visuals.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Geometric Transformation</b></p>
<p>These functions can be used to clean, align, correct images, or apply artistic 3D effects.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Brightness and Contrast</b></p>
<p>These functions can be used to enhance images, apply artistic effects, or aid in diagnostic evaluation of medical images.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Color Space Conversion</b></p>
<p>They can add image color space functionality to single and multi-threaded applications including IIS and Windows WF hosted applications.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Color Correction</b></p>
<p>These functions are used to correct images with swapped color channels, balance color intensities or perform various image analysis tasks.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Image Enhancement</b></p>
<p>These functions are used to correct common errors in photography such as red-eye and imbalanced colors as well as aid in diagnostic evaluation of medical images.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Region of Interest</b></p>
<p>These functions are used to create and modify regions of interest in images to perform image processing functions on specific portions of an image, save time in bar-code, and OCR recognition or perform various image analysis tasks.</p>
</td>
</tr>
</table>
<h2>OpenCV</h2>
<p>OpenCV is released under a BSD license and hence it is free for both academic and commercial use. It has C++, C, Python, and Java interfaces and it supports Windows, Linux, Mac OS, iOS, and Android. OpenCV was designed for computational efficiency and with a strong focus on real-time applications. Written in optimized C/C++, the library can take advantage of multi-core processing.</p>
<p>Some basic features of OpenCV are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Smoothing Images</b></p>
<p>This involves applying Blur, GaussianBlur, medianBlur and bilateral Filter.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Eroding and Dilating</b></p>
<p>It can apply two very common morphology operators &minus; Dilation and Erosion.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Morphology Transformations</b></p>
<p>OpenCV function morphologyEx to apply Morphological Transformation such as opening, closing, TopHat, and BlackHat etc.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Image Pyramids</b></p>
<p>OpenCV functions pyrUp and pyrDown to down sample or up sample a given image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Basic Thresholding Operations</b></p>
<p>Perform basic thresholding operations using OpenCV function threshold.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Adding borders to your images</b></p>
<p>OpenCV function copyMakeBorder is used to set the borders (extra padding to your image).</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Remapping</b></p>
<p>In OpenCV, the function remap offers a simple remapping implementation.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Histogram Calculation</b></p>
<p>For simple purposes, OpenCV implements the function calcHist, which calculates the histogram of a set of arrays (usually images or image planes). It can operate with up to 32 dimensions.</p>
</td>
</tr>
</table>
<h1>Java DIP - Introduction to OpenCV</h1>
<p>OpenCV is released under a BSD license and hence it is free for both academic and commercial use. It has C++, C, Python, and Java interfaces, and it supports Windows, Linux, Mac OS, iOS, and Android.</p>
<p>OpenCV was designed for computational efficiency and with a strong focus on real-time applications. Written in optimized C/C++, the library can take advantage of multi-core processing.</p>
<p>Some of the basic features of OpenCV are described below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Feature &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Smoothing Images</b></p>
<p>This involves applying Blur, GaussianBlur, medianBlur, and bilateral Filter.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Eroding and Dilating</b></p>
<p>It can apply two very common morphology operators &minus; Dilation and Erosion.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Morphology Transformations</b></p>
<p>OpenCV function morphologyEx to apply Morphological Transformation such as opening, closing, TopHat, and BlackHat etc.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Image Pyramids</b></p>
<p>OpenCV functions pyrUp and pyrDown to down sample or up sample a given image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Basic Thresholding Operations</b></p>
<p>It can perform basic thresholding operations using OpenCV function threshold.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Adding borders to your images</b></p>
<p>OpenCV function copyMakeBorder is used to set the borders(extra padding to your image).</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Remapping</b></p>
<p>In OpenCV, the function remap offers a simple remapping implementation.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Histogram Calculation</b></p>
<p>For simple purposes, OpenCV implements the function calcHist, which calculates the histogram of a set of arrays (usually images or image planes). It can operate with up to 32 dimensions.</p>
</td>
</tr>
</table>
<h2>Integrating OpenCV</h2>
<p>These following steps explain how to integrate OpenCV into your applications.</p>
<h3>Download OpenCV</h3>
<p>You can download OpenCV from their official Website <a href="https://opencv.org/" rel="nofollow" target="_blank">here</a>.</p>
<h3>Create User Library</h3>
<p>Further, we create a user library of OpenCV, so that we can use it as a future project.</p>
<p>Launch Eclipse</p>
<p>Select Window -> Preferences from the menu.</p>
<p>Navigate under Java -> Build Path -> User Libraries and click New.</p>
<img src="/java_dip/images/opencv1.JPG" alt="Introduction to OpenCV Tutorial" />
<p>Now enter the name for your library. For example, OpenCV-2.4.6.</p>
<p>After that, select your new user library(i.e. OpenCV-2.4.6) and click on Add External JARs.</p>
<p>Browse through C:\OpenCV-2.4.6\build\java\ and select opencv-246.jar. After adding the jar, extend the opencv-246.jar and select Native library location and press Edit.</p>
<img src="/java_dip/images/opencv2.JPG" alt="Introduction to OpenCV Tutorial" />
<p>Select External Folder... and browse to select the folder C:\OpenCV-2.4.6\build\java\x64. If you have a 32-bit system, you need to select the x86 folder instead of x64.</p>
<p>Press Ok and you are done.</p>
<p>Now your user library is created. Now you can reuse this configuration in any of the project.</p>
<h3>Create OpenCV Project</h3>
<p>Create a new java project in eclipse.</p>
<p>On the Java Settings step, under Libraries tab, select Add Library... and select OpenCV-2.4.6, then click Finish.</p>
<img src="/java_dip/images/opencv3.JPG" alt="Introduction to OpenCV Tutorial" />
<p>Click finish and you are done.</p>
<h1>Java DIP - OpenCV GrayScale Conversion</h1>
<p>In order to convert a color image to Grayscale image using OpenCV, we read the image into <b>BufferedImage</b> and convert it into <b>Mat</b> Object. Its syntax is given below &minus;</p> 
<pre class="result notranslate">
File input = new File("digital_image_processing.jpg");
BufferedImage image = ImageIO.read(input);
//convert Buffered Image to Mat.
</pre>
<p>Then you can transform the image from RGB to Grayscale format by using method <b>cvtColor()</b> in the <b>Imgproc</b> class. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.cvtColor(source mat, destination mat1, Imgproc.COLOR_RGB2GRAY);
</pre>
<p>The method <b>cvtColor()</b> takes three parameters which are the source image matrix, the destination image matrix, and the color conversion type.</p>
<p>Apart from the cvtColor method, there are other methods provided by the Imgproc class. They are listed below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int depth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to convert an image to Grayscale &minus;</p>
<pre class="prettyprint notranslate">
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

import java.io.File;
import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) { 
   
      try {
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         File input = new File("digital_image_processing.jpg");
         BufferedImage image = ImageIO.read(input);	

         byte[] data = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
         Mat mat = new Mat(image.getHeight(), image.getWidth(), CvType.CV_8UC3);
         mat.put(0, 0, data);

         Mat mat1 = new Mat(image.getHeight(),image.getWidth(),CvType.CV_8UC1);
         Imgproc.cvtColor(mat, mat1, Imgproc.COLOR_RGB2GRAY);

         byte[] data1 = new byte[mat1.rows() * mat1.cols() * (int)(mat1.elemSize())];
         mat1.get(0, 0, data1);
         BufferedImage image1 = new BufferedImage(mat1.cols(),mat1.rows(), BufferedImage.TYPE_BYTE_GRAY);
         image1.getRaster().setDataElements(0, 0, mat1.cols(), mat1.rows(), data1);

         File ouptut = new File("grayscale.jpg");
         ImageIO.write(image1, "jpg", ouptut);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given example, it converts an image name <b>digital_image_processing.jpg</b> to its equivalent Grayscale image and writes it on hard disk with name <b>grayscale.jpg</b>.</p>
<h3>Original Image</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="OpenCV GrayScale Conversion Tutorials" />
<h3>Grayscale Image</h3>
<img src="/java_dip/images/grayscale.jpg" alt="OpenCV GrayScale Conversion Tutorials" />
<h1>Java DIP - OpenCV Color Space Conversion</h1>
<p>In order to change color space of one image to another using OpenCV, we read image into <b>BufferedImage</b> and convert it into <b>Mat</b> Object. Its syntax is given below &minus;</p> 
<pre class="result notranslate">
File input = new File("digital_image_processing.jpg");
BufferedImage image = ImageIO.read(input);
//convert Buffered Image to Mat.
</pre>
<p>OpenCv allows many color conversion types, all of which can be found in the Imgproc class. Some of the types are described briefly &minus;</p>
<table class="table table-bordered" align="center" style="width:50%; text-align:center;">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Color Conversion Type</th>
</tr>
<tr>
<td class="ts">1</td>
<td>COLOR_RGB2BGR</td>
</tr>
<tr>
<td class="ts">2</td>
<td>COLOR_RGB2BGRA</td>
</tr>
<tr>
<td class="ts">3</td>
<td>COLOR_RGB2GRAY</td>
</tr>
<tr>
<td class="ts">4</td>
<td>COLOR_RGB2HLS</td>
</tr>
<tr>
<td class="ts">5</td>
<td>COLOR_RGB2HSV</td>
</tr>
<tr>
<td class="ts">6</td>
<td>COLOR_RGB2Luv</td>
</tr>
<tr>
<td class="ts">7</td>
<td>COLOR_RGB2YUV</td>
</tr>
<tr>
<td class="ts">8</td>
<td>COLOR_RGB2Lab</td>
</tr>
</table>
<p>From any of the color conversion type, just pass the appropriate one into method <b>cvtColor()</b> in the <b>Imgproc</b> class. Its syntax is given below &minus;</p>
<pre class="result notranslate">
Imgproc.cvtColor(source mat, destination mat1, Color_Conversion_Code);
</pre>
<p>The method <b>cvtColor()</b> takes three parameters which are the source image matrix, the destination image matrix and the color conversion type.</p>
<p>Apart from the cvtColor() method, there are other methods provide by the Imgproc class. They are described briefly &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:5%">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>cvtColor(Mat src, Mat dst, int code, int dstCn)</b></p>
<p>It converts an image from one color space to another.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>dilate(Mat src, Mat dst, Mat kernel)</b></p>
<p>It dilates an image by using a specific structuring element.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>equalizeHist(Mat src, Mat dst)</b></p>
<p>It equalizes the histogram of a grayscale image.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta)</b></p>
<p>It convolves an image with the kernel.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)</b></p>
<p>It blurs an image using a Gaussian filter.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>integral(Mat src, Mat sum)</b></p>
<p>It calculates the integral of an image.</p>
</td>
</tr>
</table>
<h2>Example</h2>
<p>The following example demonstrates the use of Imgproc class to convert an image from one color space to another.</p>
<pre class="prettyprint notranslate">
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;

import java.io.File;
import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;

public class Main {
   public static void main( String[] args ) {
   
      try {
         System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
         File input = new File("digital_image_processing.jpg");
         BufferedImage image = ImageIO.read(input);	
         byte[] data = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
         Mat mat = new Mat(image.getHeight(),image.getWidth(), CvType.CV_8UC3);
         mat.put(0, 0, data);

         Mat mat1 = new Mat(image.getHeight(), image.getWidth(), CvType.CV_8UC3);
         Imgproc.cvtColor(mat, mat1, Imgproc.COLOR_RGB2HSV);

         byte[] data1 = new byte[mat1.rows()*mat1.cols()*(int)(mat1.elemSize())];
         mat1.get(0, 0, data1);
         BufferedImage image1 = new BufferedImage(mat1.cols(), mat1.rows(), 5);
         image1.getRaster().setDataElements(0, 0, mat1.cols(), mat1.rows(), data1);

         File ouptut = new File("hsv.jpg");
         ImageIO.write(image1, "jpg", ouptut);
         
      } catch (Exception e) {
         System.out.println("Error: " + e.getMessage());
      }
   }
}
</pre>
<h2>Output</h2>
<p>When you execute the given example, it converts an image name <b>digital_image_processing.jpg</b> to its equivalent HSV color space image and writes it on hard disk with name <b>hsv.jpg</b>.</p>
<h3>Original Image (RGB)</h3>
<img src="/java_dip/images/digital_image_processing.jpg" alt="OpenCV Colour Space Conversion Tutorial" />
<h3>Converted Image (HSV)</h3>
<img src="/java_dip/images/hsv.jpg" alt="OpenCV Colour Space Conversion Tutorial" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/java_dip/color_space_conversion.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/java_dip/dip_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
