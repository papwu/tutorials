<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Ruby - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Ruby - Quick Guide - Ruby is a pure object-oriented programming language. It was created in 1993 by Yukihiro Matsumoto of Japan."/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/ruby/ruby_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#891204;
}
a.demo {
    background:#891204;
}
li.heading {
    background:#891204;
}
.course-box{background:#891204}
.home-intro-sub p{color:#891204}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/ruby/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/ruby/images/ruby-mini-logo.jpg" alt="Ruby Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Ruby Basics</li>
<li><a href="/ruby/index.htm">Ruby - Home</a></li>
<li><a href="/ruby/ruby_overview.htm">Ruby - Overview</a></li>
<li><a href="/ruby/ruby_environment.htm">Ruby - Environment Setup</a></li>
<li><a href="/ruby/ruby_syntax.htm">Ruby - Syntax</a></li>
<li><a href="/ruby/ruby_classes.htm">Ruby - Classes and Objects</a></li>
<li><a href="/ruby/ruby_variables.htm">Ruby - Variables</a></li>
<li><a href="/ruby/ruby_operators.htm">Ruby - Operators</a></li>
<li><a href="/ruby/ruby_comments.htm">Ruby - Comments</a></li>
<li><a href="/ruby/ruby_if_else.htm">Ruby - IF...ELSE</a></li>
<li><a href="/ruby/ruby_loops.htm">Ruby - Loops</a></li>
<li><a href="/ruby/ruby_methods.htm">Ruby - Methods</a></li>
<li><a href="/ruby/ruby_blocks.htm">Ruby - Blocks</a></li>
<li><a href="/ruby/ruby_modules.htm">Ruby - Modules</a></li>
<li><a href="/ruby/ruby_strings.htm">Ruby - Strings</a></li>
<li><a href="/ruby/ruby_arrays.htm">Ruby - Arrays</a></li>
<li><a href="/ruby/ruby_hashes.htm">Ruby - Hashes</a></li>
<li><a href="/ruby/ruby_date_time.htm">Ruby - Date &amp; Time</a></li>
<li><a href="/ruby/ruby_ranges.htm">Ruby - Ranges</a></li>
<li><a href="/ruby/ruby_iterators.htm">Ruby - Iterators</a></li>
<li><a href="/ruby/ruby_input_output.htm">Ruby - File I/O</a></li>
<li><a href="/ruby/ruby_exceptions.htm">Ruby - Exceptions</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Ruby Advanced</li>
<li><a href="/ruby/ruby_object_oriented.htm">Ruby - Object Oriented</a></li>
<li><a href="/ruby/ruby_regular_expressions.htm">Ruby - Regular Expressions</a></li>
<li><a href="/ruby/ruby_database_access.htm">Ruby - Database Access</a></li>
<li><a href="/ruby/ruby_web_applications.htm">Ruby - Web Applications</a></li>
<li><a href="/ruby/ruby_sending_email.htm">Ruby - Sending Email</a></li>
<li><a href="/ruby/ruby_socket_programming.htm">Ruby - Socket Programming</a></li>
<li><a href="/ruby/ruby_xml_xslt.htm">Ruby - Ruby/XML, XSLT</a></li>
<li><a href="/ruby/ruby_web_services.htm">Ruby - Web Services</a></li>
<li><a href="/ruby/ruby_tk_guide.htm">Ruby - Tk Guide</a></li>
<li><a href="/ruby/ruby_ldap.htm">Ruby - Ruby/LDAP Tutorial</a></li>
<li><a href="/ruby/ruby_multithreading.htm">Ruby - Multithreading</a></li>
<li><a href="/ruby/ruby_builtin_functions.htm">Ruby - Built-in Functions</a></li>
<li><a href="/ruby/ruby_predefined_variables.htm">Ruby - Predefined Variables</a></li>
<li><a href="/ruby/ruby_predefined_constants.htm">Ruby - Predefined Constants</a></li>
<li><a href="/ruby/ruby_associated_tools.htm">Ruby - Associated Tools</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Ruby Useful Resources</li>
<li><a href="/ruby/ruby_quick_guide.htm">Ruby - Quick Guide</a></li>
<li><a href="/ruby/ruby_resources.htm">Ruby - Useful Resources</a></li>
<li><a href="/ruby/ruby_discussion.htm">Ruby - Discussion</a></li>
<li><a href="/ruby-on-rails/index.htm">Ruby - Ruby on Rails Tutorial</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Ruby - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/ruby/ruby_associated_tools.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ruby/ruby_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Ruby - Overview</h1>
<p>Ruby is a pure object-oriented programming language. It was created in 1993 by Yukihiro Matsumoto of Japan.</p>
<p>You can find the name Yukihiro Matsumoto on the Ruby mailing list at <a target="_blank" rel="nofollow" href="https://www.ruby-lang.org/en/">www.ruby-lang.org</a>. Matsumoto is also known as Matz in the Ruby community.</p>
<p><b>Ruby is "A Programmer's Best Friend".</b></p>
<p>Ruby has features that are similar to those of Smalltalk, Perl, and Python. Perl, Python, and Smalltalk are scripting languages. Smalltalk is a true object-oriented language. Ruby, like Smalltalk, is a perfect object-oriented language. Using Ruby syntax is much easier than using Smalltalk syntax.</p>
<h2>Features of Ruby</h2>
<ul class="list">
<li><p>Ruby is an open-source and is freely available on the Web, but it is subject to a license.</p></li>
<li><p>Ruby is a general-purpose, interpreted programming language.</p></li>
<li><p>Ruby is a true object-oriented programming language.</p></li>
<li><p>Ruby is a server-side scripting language similar to Python and PERL.</p></li>
<li><p>Ruby can be used to write Common Gateway Interface (CGI) scripts.</p></li>
<li><p>Ruby can be embedded into Hypertext Markup Language (HTML).</p></li>
<li><p>Ruby has a clean and easy syntax that allows a new developer to learn very quickly and easily.</p></li>
<li><p>Ruby has similar syntax to that of many programming languages such as C++ and Perl.</p></li>
<li><p>Ruby is very much scalable and big programs written in Ruby are easily maintainable.</p></li>
<li><p>Ruby can be used for developing Internet and intranet applications.</p></li>
<li><p>Ruby can be installed in Windows and POSIX environments.</p></li>
<li><p>Ruby support many GUI tools such as Tcl/Tk, GTK, and OpenGL.</p></li>
<li><p>Ruby can easily be connected to DB2, MySQL, Oracle, and Sybase.</p></li>
<li><p>Ruby has a rich set of built-in functions, which can be used directly into Ruby scripts.</p></li>
</ul>
<h2>Tools You Will Need</h2>
<p>For performing the examples discussed in this tutorial, you will need a latest computer like Intel Core i3 or i5 with a minimum of 2GB of RAM (4GB of RAM recommended). You also will need the following software &minus;</p>
<ul class="list">
<li><p>Linux or Windows 95/98/2000/NT or Windows 7 operating system.</p></li>
<li><p>Apache 1.3.19-5 Web server.</p></li>
<li><p>Internet Explorer 5.0 or above Web browser.</p></li>
<li><p>Ruby 1.8.5</p></li>
</ul>
<p>This tutorial will provide the necessary skills to create GUI, networking, and Web applications using Ruby. It also will talk about extending and embedding Ruby applications.</p>
<h2>What is Next?</h2>
<p>The next chapter guides you to where you can obtain Ruby and its documentation. Finally, it instructs you on how to install Ruby and prepare an environment to develop Ruby applications.</p>
<h1>Ruby - Environment Setup</h1>
<h2>Local Environment Setup</h2>
<p>If you are still willing to set up your environment for Ruby programming language, then let's proceed. This tutorial will teach you all the important topics related to environment setup. We would recommend you to go through the following topics first and then proceed further &minus;</p>
<ul class="list">
<li><p><a href="/ruby/ruby_installation_unix.htm">Ruby Installation on Linux/Unix</a> &minus; If you are planning to have your development environment on Linux/Unix Machine, then go through this chapter.</p></li>
<li><p><a href="/ruby/ruby_installation_windows.htm">Ruby Installation on Windows</a> &minus; If you are planning to have your development environment on Windows Machine, then go through this chapter.</p></li>
<li><p><a href="/ruby/ruby_command_line_options.htm">Ruby Command Line Options</a> &minus; This chapter list out all the command line options, which you can use along with Ruby interpreter.</p></li>
<li><p><a href="/ruby/ruby_environment_variables.htm">Ruby Environment Variables</a> &minus; This chapter has a list of all the important environment variables to be set to make Ruby Interpreter works.</p></li>
</ul>
<h2>Popular Ruby Editors</h2>
<p>To write your Ruby programs, you will need an editor &minus;</p>
<ul class="list">
<li><p>If you are working on Windows machine, then you can use any simple text editor like Notepad or Edit plus.</p></li>
<li><p><a target="_blank" rel="nofollow" href="http://vim.sourceforge.net/">VIM</a> (Vi IMproved) is a very simple text editor. This is available on almost all Unix machines and now Windows as well. Otherwise, your can use your favorite vi editor to write Ruby programs.</p></li>
<li><p><a target="_blank" rel="nofollow" href="https://homepage1.nifty.com/markey/ruby/rubywin/index_e.html" title="RubyWin">RubyWin</a> is a Ruby Integrated Development Environment (IDE) for Windows.</p></li>
<li><p>Ruby Development Environment <a target="_blank" rel="nofollow" href="https://homepage2.nifty.com/sakazuki/rde_en/" title="RDE">(RDE)</a> is also a very good IDE for windows users.</p></li>
</ul>
<h2>Interactive Ruby (IRb)</h2>
<p>Interactive Ruby (IRb) provides a shell for experimentation. Within the IRb shell, you can immediately view expression results, line by line.</p>
<p>This tool comes along with Ruby installation so you have nothing to do extra to have IRb working.</p>
<p>Just type <b>irb</b> at your command prompt and an Interactive Ruby Session will start as given below &minus;</p>
<pre class="prettyprint notranslate">
$irb
irb 0.6.1(99/09/16)
irb(main):001:0&gt; def hello
irb(main):002:1&gt; out = "Hello World"
irb(main):003:1&gt; puts out
irb(main):004:1&gt; end
nil
irb(main):005:0&gt; hello
Hello World
nil
irb(main):006:0&gt;
</pre>
<p>Do not worry about what we did here. You will learn all these steps in subsequent chapters.</p>
<h2>What is Next?</h2>
<p>We assume now you have a working Ruby Environment and you are ready to write the first Ruby Program. The next chapter will teach you how to write Ruby programs.</p>
<h1>Ruby - Syntax</h1>
<p>Let us write a simple program in ruby. All ruby files will have extension <b>.rb</b>. So, put the following source code in a test.rb file.</p>
<div class="demo-view">
<a href="http://tpcg.io/F9aEFC" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby -w

puts "Hello, Ruby!";
</pre>
<p>Here, we assumed that you have Ruby interpreter available in /usr/bin directory. Now, try to run this program as follows &minus;</p>
<pre class="prettyprint notranslate">
$ ruby test.rb
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Hello, Ruby!
</pre>
<p>You have seen a simple Ruby program, now let us see a few basic concepts related to Ruby Syntax.</p>
<h2>Whitespace in Ruby Program</h2>
<p>Whitespace characters such as spaces and tabs are generally ignored in Ruby code, except when they appear in strings. Sometimes, however, they are used to interpret ambiguous statements. Interpretations of this sort produce warnings when the -w option is enabled.</p>
<h3>Example</h3>
<pre class="result notranslate">
a + b is interpreted as a+b ( Here a is a local variable)
a  +b is interpreted as a(+b) ( Here a is a method call)
</pre>
<h2>Line Endings in Ruby Program</h2>
<p>Ruby interprets semicolons and newline characters as the ending of a statement. However, if Ruby encounters operators, such as &plus;, &minus;, or backslash at the end of a line, they indicate the continuation of a statement.</p>
<h2>Ruby Identifiers</h2>
<p>Identifiers are names of variables, constants, and methods. Ruby identifiers are case sensitive. It means Ram and RAM are two different identifiers in Ruby.</p>
<p>Ruby identifier names may consist of alphanumeric characters and the underscore character ( _ ).</p>
<h2>Reserved Words</h2>
<p>The following list shows the reserved words in Ruby. These reserved words may not be used as constant or variable names. They can, however, be used as method names.</p>
<table style="text-align:center;" class="table table-bordered">
<tr>
<td>BEGIN</td>
<td>do</td>
<td>next</td>
<td>then</td>
</tr>
<tr>
<td>END</td>
<td>else</td>
<td>nil</td>
<td>true</td>
</tr>
<tr>
<td>alias</td>
<td>elsif</td>
<td>not</td>
<td>undef</td>
</tr>
<tr>
<td>and</td>
<td>end</td>
<td>or</td>
<td>unless</td>
</tr>
<tr>
<td>begin</td>
<td>ensure</td>
<td>redo</td>
<td>until</td>
</tr>
<tr>
<td>break</td>
<td>false</td>
<td>rescue</td>
<td>when</td>
</tr>
<tr>
<td>case</td>
<td>for</td>
<td>retry</td>
<td>while</td>
</tr>
<tr>
<td>class</td>
<td>if</td>
<td>return</td>
<td>while</td>
</tr>
<tr>
<td>def</td>
<td>in</td>
<td>self</td>
<td>__FILE__</td>
</tr>
<tr>
<td>defined?</td>
<td>module</td>
<td>super</td>
<td>__LINE__</td>
</tr>
</table>
<h2>Here Document in Ruby</h2>
<p>"Here Document" refers to build strings from multiple lines. Following a &lt;&lt; you can specify a string or an identifier to terminate the string literal, and all lines following the current line up to the terminator are the value of the string.</p>
<p>If the terminator is quoted, the type of quotes determines the type of the line-oriented string literal. Notice there must be no space between &lt;&lt; and the terminator.</p>
<p>Here are different examples &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/hYnRd3" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby -w

print &lt;&lt;EOF
   This is the first way of creating
   here document ie. multiple line string.
EOF

print &lt;&lt;"EOF";                # same as above
   This is the second way of creating
   here document ie. multiple line string.
EOF

print &lt;&lt;`EOC`                 # execute commands
	echo hi there
	echo lo there
EOC

print &lt;&lt;"foo", &lt;&lt;"bar"  # you can stack them
	I said foo.
foo
	I said bar.
bar
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
   This is the first way of creating
   her document ie. multiple line string.
   This is the second way of creating
   her document ie. multiple line string.
hi there
lo there
      I said foo.
      I said bar.
</pre>
<h2>Ruby BEGIN Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
BEGIN {
   code
}
</pre>
<p>Declares <i>code</i> to be called before the program is run.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/hPRvmC" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

puts "This is main Ruby Program"

BEGIN {
   puts "Initializing Ruby Program"
}
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Initializing Ruby Program
This is main Ruby Program
</pre>
<h2>Ruby END Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
END {
   code
}
</pre>
<p>Declares <i>code</i> to be called at the end of the program.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/4Uju9U" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

puts "This is main Ruby Program"

END {
   puts "Terminating Ruby Program"
}
BEGIN {
   puts "Initializing Ruby Program"
}
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Initializing Ruby Program
This is main Ruby Program
Terminating Ruby Program
</pre>
<h2>Ruby Comments</h2>
<p>A comment hides a line, part of a line, or several lines from the Ruby interpreter. You can use the hash character (#) at the beginning of a line &minus;</p>
<pre class="result notranslate">
# I am a comment. Just ignore me.
</pre>
<p>Or, a comment may be on the same line after a statement or expression &minus;</p>
<pre class="result notranslate">
name = "Madisetti" # This is again comment
</pre>
<p>You can comment multiple lines as follows &minus;</p>
<pre class="result notranslate">
# This is a comment.
# This is a comment, too.
# This is a comment, too.
# I said that already.
</pre>
<p>Here is another form. This block comment conceals several lines from the interpreter with =begin/=end &minus;</p>
<pre class="result notranslate">
=begin
This is a comment.
This is a comment, too.
This is a comment, too.
I said that already.
=end
</pre>
<h1>Ruby - Classes and Objects</h1>
<p>Ruby is a perfect Object Oriented Programming Language. The features of the object-oriented programming language include &minus;</p>
<ul class="list">
<li>Data Encapsulation</li> 
<li>Data Abstraction</li>
<li>Polymorphism</li>
<li>Inheritance</li>
</ul>
<p>These features have been discussed in the chapter <a href="/ruby/ruby_object_oriented.htm">Object Oriented Ruby</a>.</p>
<p>An object-oriented program involves classes and objects. A class is the blueprint from which individual objects are created. In object-oriented terms, we say that your <i>bicycle</i> is an instance of the <i>class of objects</i> known as bicycles.</p>
<p>Take the example of any vehicle. It comprises wheels, horsepower, and fuel or gas tank capacity. These characteristics form the data members of the class Vehicle. You can differentiate one vehicle from the other with the help of these characteristics.</p>
<p>A vehicle can also have certain functions, such as halting, driving, and speeding. Even these functions form the data members of the class Vehicle. You can, therefore, define a class as a combination of characteristics and functions.</p>
<p>A class Vehicle can be defined as &minus;</p>
<pre class="prettyprint notranslate">
Class Vehicle {

   Number no_of_wheels
   Number horsepower
   Characters type_of_tank
   Number Capacity
   Function speeding {
   }
   
   Function driving {
   }
   
   Function halting {
   }
}
</pre>
<p>By assigning different values to these data members, you can form several instances of the class Vehicle. For example, an airplane has three wheels, horsepower of 1,000, fuel as the type of tank, and a capacity of 100 liters. In the same way, a car has four wheels, horsepower of 200, gas as the type of tank, and a capacity of 25 liters.</p>
<h2>Defining a Class in Ruby</h2>
<p>To implement object-oriented programming by using Ruby, you need to first learn how to create objects and classes in Ruby.</p>
<p>A class in Ruby always starts with the keyword <i>class</i> followed by the name of the class. The name should always be in initial capitals. The class <i>Customer</i> can be displayed as &minus;</p>
<pre class="result notranslate">
class Customer
end
</pre>
<p>You terminate a class by using the keyword <i>end</i>. All the data members in the <i>class</i> are between the class definition and the <i>end</i> keyword.</p>
<h2>Variables in a Ruby Class</h2>
<p>Ruby provides four types of variables &minus;</p>
<ul class="list">
<li><p><b>Local Variables</b> &minus; Local variables are the variables that are defined in a method. Local variables are not available outside the method. You will see more details about method in subsequent chapter. Local variables begin with a lowercase letter or _.</p></li>
<li><p><b>Instance Variables</b> &minus; Instance variables are available across methods for any particular instance or object. That means that instance variables change from object to object. Instance variables are preceded by the at sign (&commat;) followed by the variable name.</p></li>
<li><p><b>Class Variables</b> &minus; Class variables are available across different objects. A class variable belongs to the class and is a characteristic of a class. They are preceded by the sign &commat;&commat; and are followed by the variable name.</p></li>
<li><p><b>Global Variables</b> &minus; Class variables are not available across classes. If you want to have a single variable, which is available across classes, you need to define a global variable. The global variables are always preceded by the dollar sign (&dollar;).</p></li>
</ul>
<h3>Example</h3>
<p>Using the class variable &commat;&commat;no_of_customers, you can determine the number of objects that are being created. This enables in deriving the number of customers.</p>
<pre class="prettyprint notranslate">
class Customer
   &commat;&commat;no_of_customers = 0
end
</pre>
<h2>Creating Objects in Ruby using new Method</h2>
<p>Objects are instances of the class. You will now learn how to create objects of a class in Ruby. You can create objects in Ruby by using the method <i>new</i> of the class.</p>
<p>The method <i>new</i> is a unique type of method, which is predefined in the Ruby library. The new method belongs to the <i>class</i> methods.</p>
<p>Here is the example to create two objects cust1 and cust2 of the class Customer &minus;</p>
<pre class="prettyprint notranslate">
cust1 = Customer. new
cust2 = Customer. new
</pre>
<p>Here, cust1 and cust2 are the names of two objects. You write the object name followed by the equal to sign (=) after which the class name will follow. Then, the dot operator and the keyword <i>new</i> will follow.</p>
<h2>Custom Method to Create Ruby Objects</h2>
<p>You can pass parameters to method <i>new</i> and those parameters can be used to initialize class variables.</p>
<p>When you plan to declare the <i>new</i> method with parameters, you need to declare the method <i>initialize</i> at the time of the class creation.</p>
<p>The <i>initialize</i> method is a special type of method, which will be executed when the <i>new</i> method of the class is called with parameters.</p>
<p>Here is the example to create initialize method &minus;</p>
<pre class="prettyprint notranslate">
class Customer
   &commat;&commat;no_of_customers = 0
   def initialize(id, name, addr)
      &commat;cust_id = id
      &commat;cust_name = name
      &commat;cust_addr = addr
   end
end
</pre>
<p>In this example, you declare the <i>initialize</i> method with <b>id, name</b>, and <b>addr</b> as local variables. Here, <i>def</i> and <i>end</i> are used to define a Ruby method <i>initialize</i>. You will learn more about methods in subsequent chapters.</p>
<p>In the <i>initialize</i> method, you pass on the values of these local variables to the instance variables &commat;cust_id, &commat;cust_name, and &commat;cust_addr. Here local variables hold the values that are passed along with the new method.</p>
<p>Now, you can create objects as follows &minus;</p>
<pre class="prettyprint notranslate">
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")
</pre>
<h2>Member Functions in Ruby Class</h2>
<p>In Ruby, functions are called methods. Each method in a <i>class</i> starts with the keyword <i>def</i> followed by the method name.</p>
<p>The method name always preferred in <b>lowercase letters</b>. You end a method in Ruby by using the keyword <i>end</i>.</p>
<p>Here is the example to define a Ruby method &minus;</p>
<pre class="prettyprint notranslate">
class Sample
   def function
      statement 1
      statement 2
   end
end
</pre>
<p>Here, <i>statement 1</i> and <i>statement 2</i> are part of the body of the method <i>function</i> inside the class Sample. These statments could be any valid Ruby statement. For example we can put a method <i>puts</i> to print <i>Hello Ruby</i> as follows &minus;</p>
<pre class="prettyprint notranslate">
class Sample
   def hello
      puts "Hello Ruby!"
   end
end
</pre>
<p>Now in the following example, create one object of Sample class and call <i>hello</i> method and see the result &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/BfRThj" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

class Sample
   def hello
      puts "Hello Ruby!"
   end
end

# Now using above class to create objects
object = Sample. new
object.hello
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Hello Ruby!
</pre>
<h2>Simple Case Study</h2>
<p>Here is a case study if you want to do more practice with class and objects.</p>
<p><a href="/ruby/ruby_class_case_study.htm" title="Ruby Class Case Study" rel="nofollow" target="_blank">Ruby Class Case Study</a></p>
<h1>Ruby - Variables, Constants and Literals</h1>
<p>Variables are the memory locations, which hold any data to be used by any program.</p>
<p>There are five types of variables supported by Ruby. You already have gone through a small description of these variables in the previous chapter as well. These five types of variables are explained in this chapter.</p>
<h2>Ruby Global Variables</h2>
<p>Global variables begin with &dollar;. Uninitialized global variables have the value nil and produce warnings with the -w option.</p>
<p>Assignment to global variables alters the global status. It is not recommended to use global variables. They make programs cryptic.</p>
<p>Here is an example showing the usage of global variable.</p>
<div class="demo-view">
<a href="http://tpcg.io/9XMniA" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

$global_variable = 10
class Class1
   def print_global
      puts "Global variable in Class1 is #$global_variable"
   end
end
class Class2
   def print_global
      puts "Global variable in Class2 is #$global_variable"
   end
end

class1obj = Class1.new
class1obj.print_global
class2obj = Class2.new
class2obj.print_global
</pre>
<p>Here $global_variable is a global variable. This will produce the following result &minus;</p>
<p><b>NOTE</b> &minus; In Ruby, you CAN access value of any variable or constant by putting a hash (#) character just before that variable or constant.</p>
<pre class="result notranslate">
Global variable in Class1 is 10
Global variable in Class2 is 10
</pre>
<h2>Ruby Instance Variables</h2>
<p>Instance variables begin with &commat;. Uninitialized instance variables have the value <i>nil</i> and produce warnings with the -w option.</p>
<p>Here is an example showing the usage of Instance Variables.</p>
<div class="demo-view">
<a href="http://tpcg.io/pdC0ZA" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

class Customer
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details()
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
end

# Create Objects
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

# Call Methods
cust1.display_details()
cust2.display_details()
</pre>
<p>Here, &commat;cust_id, &commat;cust_name and &commat;cust_addr are instance variables. This will produce the following result &minus;</p>
<pre class="result notranslate">
Customer id 1
Customer name John
Customer address Wisdom Apartments, Ludhiya
Customer id 2
Customer name Poul
Customer address New Empire road, Khandala
</pre>
<h2>Ruby Class Variables</h2>
<p>Class variables begin with &commat;&commat; and must be initialized before they can be used in method definitions.</p>
<p>Referencing an uninitialized class variable produces an error. Class variables are shared among descendants of the class or module in which the class variables are defined.</p>
<p>Overriding class variables produce warnings with the -w option.</p>
<p>Here is an example showing the usage of class variable &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/MKwOCX" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

class Customer
   @@no_of_customers = 0
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details()
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
   def total_no_of_customers()
      @@no_of_customers += 1
      puts "Total number of customers: #@@no_of_customers"
   end
end

# Create Objects
cust1 = Customer.new("1", "John", "Wisdom Apartments, Ludhiya")
cust2 = Customer.new("2", "Poul", "New Empire road, Khandala")

# Call Methods
cust1.total_no_of_customers()
cust2.total_no_of_customers()
</pre>
<p>Here &commat;&commat;no_of_customers is a class variable. This will produce the following result &minus;</p>
<pre class="result notranslate">
Total number of customers: 1
Total number of customers: 2
</pre>
<h2>Ruby Local Variables</h2>
<p>Local variables begin with a lowercase letter or _. The scope of a local variable ranges from class, module, def, or do to the corresponding end or from a block's opening brace to its close brace {}.</p>
<p>When an uninitialized local variable is referenced, it is interpreted as a call to a method that has no arguments.</p>
<p>Assignment to uninitialized local variables also serves as variable declaration. The variables start to exist until the end of the current scope is reached. The lifetime of local variables is determined when Ruby parses the program.</p>
<p>In the above example, local variables are id, name and addr.</p>
<h2>Ruby Constants</h2>
<p>Constants begin with an uppercase letter. Constants defined within a class or module can be accessed from within that class or module, and those defined outside a class or module can be accessed globally.</p>
<p>Constants may not be defined within methods. Referencing an uninitialized constant produces an error. Making an assignment to a constant that is already initialized produces a warning.</p>
<div class="demo-view">
<a href="http://tpcg.io/QBKehS" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

class Example
   VAR1 = 100
   VAR2 = 200
   def show
      puts "Value of first Constant is #{VAR1}"
      puts "Value of second Constant is #{VAR2}"
   end
end

# Create Objects
object = Example.new()
object.show
</pre>
<p>Here VAR1 and VAR2 are constants. This will produce the following result &minus;</p>
<pre class="result notranslate">
Value of first Constant is 100
Value of second Constant is 200
</pre>
<h2>Ruby Pseudo-Variables</h2>
<p>They are special variables that have the appearance of local variables but behave like constants. You cannot assign any value to these variables.</p>
<ul class="list">
<li><p><b>self</b> &minus; The receiver object of the current method.</p></li>
<li><p><b>true</b> &minus; Value representing true.</p></li>
<li><p><b>false</b> &minus; Value representing false.</p></li>
<li><p><b>nil</b> &minus; Value representing undefined.</p></li>
<li><p><b>__FILE__</b> &minus; The name of the current source file.</p></li>
<li><p><b>__LINE__</b> &minus; The current line number in the source file.</p></li>
</ul>
<h2>Ruby Basic Literals</h2>
<p>The rules Ruby uses for literals are simple and intuitive. This section explains all basic Ruby Literals.</p>
<h2>Integer Numbers</h2>
<p>Ruby supports integer numbers. An integer number can range from -2<sup>30</sup> to 2<sup>30-1</sup> or -2<sup>62</sup> to 2<sup>62-1</sup>. Integers within this range are objects of class <i>Fixnum</i> and integers outside this range are stored in objects of class <i>Bignum</i>.</p>
<p>You write integers using an optional leading sign, an optional base indicator (0 for octal, 0x for hex, or 0b for binary), followed by a string of digits in the appropriate base. Underscore characters are ignored in the digit string.</p>
<p>You can also get the integer value, corresponding to an ASCII character or escape the sequence by preceding it with a question mark.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
123                  # Fixnum decimal
1_234                # Fixnum decimal with underline
-500                 # Negative Fixnum
0377                 # octal
0xff                 # hexadecimal
0b1011               # binary
?a                   # character code for 'a'
?\n                  # code for a newline (0x0a)
12345678901234567890 # Bignum
</pre>
<p><b>NOTE</b> &minus; Class and Objects are explained in a separate chapter of this tutorial.</p>
<h2>Floating Numbers</h2>
<p>Ruby supports floating numbers. They are also numbers but with decimals. Floating-point numbers are objects of class <i>Float</i> and can be any of the following &minus;</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
123.4                # floating point value
1.0e6                # scientific notation
4E20                 # dot not required
4e+20                # sign before exponential
</pre>
<h2>String Literals</h2>
<p>Ruby strings are simply sequences of 8-bit bytes and they are objects of class String. Double-quoted strings allow substitution and backslash notation but single-quoted strings don't allow substitution and allow backslash notation only for \\ and \'</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/iH7f02" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby -w

puts 'escape using "\\"';
puts 'That\'s right';
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
escape using "\"
That's right
</pre>
<p>You can substitute the value of any Ruby expression into a string using the sequence <b>#{ expr }</b>. Here, expr could be any ruby expression.</p>
<div class="demo-view">
<a href="http://tpcg.io/AYxX25" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby -w

puts "Multiplication Value : #{24*60*60}";
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Multiplication Value : 86400
</pre>
<h2>Backslash Notations</h2>
<p>Following is the list of Backslash notations supported by Ruby &minus;</p>
<table style="text-align:center;" class="table table-bordered">
<tr>
<th style="text-align:center;">Notation</th>
<th style="text-align:center;">Character represented</th>
</tr>
<tr>
<td>\n</td>
<td>Newline (0x0a)</td>
</tr>
<tr>
<td>\r</td>
<td>Carriage return (0x0d)</td>
</tr>
<tr>
<td>\f</td>
<td>Formfeed (0x0c)</td>
</tr>
<tr>
<td>\b</td>
<td>Backspace (0x08)</td>
</tr>
<tr>
<td>\a</td>
<td>Bell (0x07)</td>
</tr>
<tr>
<td>\e</td>
<td>Escape (0x1b)</td>
</tr>
<tr>
<td>\s</td>
<td>Space (0x20)</td>
</tr>
<tr>
<td>\nnn</td>
<td>Octal notation (n being 0-7)</td>
</tr>
<tr>
<td>\xnn</td>
<td>Hexadecimal notation (n being 0-9, a-f, or A-F)</td>
</tr>
<tr>
<td>\cx, \C-x</td>
<td>Control-x</td>
</tr>
<tr>
<td>\M-x</td>
<td>Meta-x (c | 0x80)</td>
</tr>
<tr>
<td>\M-\C-x</td>
<td>Meta-Control-x</td>
</tr>
<tr>
<td>\x</td>
<td>Character x</td>
</tr>
</table>
<p>For more detail on Ruby Strings, go through <a href="/ruby/ruby_strings.htm">Ruby Strings</a>.</p>
<h2>Ruby Arrays</h2>
<p>Literals of Ruby Array are created by placing a comma-separated series of object references between the square brackets. A trailing comma is ignored.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/jiBc8h" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

ary = [  "fred", 10, 3.14, "This is a string", "last element", ]
ary.each do |i|
   puts i
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
fred
10
3.14
This is a string
last element
</pre>
<p>For more detail on Ruby Arrays, go through <a href="/ruby/ruby_arrays.htm">Ruby Arrays</a>.</p>
<h2>Ruby Hashes</h2>
<p>A literal Ruby Hash is created by placing a list of key/value pairs between braces, with either a comma or the sequence =&gt; between the key and the value. A trailing comma is ignored.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/Zmsyeb" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

hsh = colors = { "red" =&gt; 0xf00, "green" =&gt; 0x0f0, "blue" =&gt; 0x00f }
hsh.each do |key, value|
   print key, " is ", value, "\n"
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
red is 3840
green is 240
blue is 15
</pre>
<p>For more detail on Ruby Hashes, go through <a href="/ruby/ruby_hashes.htm">Ruby Hashes</a>.</p>
<h2>Ruby Ranges</h2>
<p>A Range represents an interval which is a set of values with a start and an end. Ranges may be constructed using the s..e and s...e literals, or with Range.new.</p>
<p>Ranges constructed using .. run from the start to the end inclusively. Those created using ... exclude the end value. When used as an iterator, ranges return each value in the sequence.</p>
<p>A range (1..5) means it includes 1, 2, 3, 4, 5 values and a range (1...5) means it includes 1, 2, 3, 4 values.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/lhzMgP" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

(10..15).each do |n| 
   print n, ' ' 
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
10 11 12 13 14 15
</pre>
<p>For more detail on Ruby Ranges, go through <a href="/ruby/ruby_ranges.htm">Ruby Ranges</a>.</p>
<h1>Ruby - Operators</h1>
<p>Ruby supports a rich set of operators, as you'd expect from a modern language. Most operators are actually method calls. For example, a &plus; b is interpreted as a.&plus;(b), where the &plus; method in the object referred to by variable <i>a</i> is called with <i>b</i> as its argument.</p>
<p>For each operator (&plus; - * / % ** &amp; | ^ &lt;&lt; &gt;&gt; &amp;&amp; ||), there is a corresponding form of abbreviated assignment operator (&plus;= -= etc.).</p>
<h2>Ruby Arithmetic Operators</h2>
<p>Assume variable a holds 10 and variable b holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">&plus;</td>
<td>Addition &minus; Adds values on either side of the operator.</td>
<td class="ts">a &plus; b will give 30</td>
</tr>
<tr>
<td class="ts">&minus;</td>
<td>Subtraction &minus; Subtracts right hand operand from left hand operand.</td>
<td class="ts">a - b will give -10</td>
</tr>
<tr>
<td class="ts">*</td>
<td>Multiplication &minus; Multiplies values on either side of the operator.</td>
<td class="ts">a * b will give 200</td>
</tr>
<tr>
<td class="ts">/</td>
<td>Division &minus; Divides left hand operand by right hand operand.</td>
<td class="ts">b / a will give 2</td>
</tr>
<tr>
<td class="ts">%</td>
<td>Modulus &minus; Divides left hand operand by right hand operand and returns remainder.</td>
<td class="ts">b % a will give 0</td>
</tr>
<tr>
<td class="ts">**</td>
<td>Exponent &minus; Performs exponential (power) calculation on operators.</td>
<td class="ts">a**b will give 10 to the power 20</td>
</tr>
</table>
<h2>Ruby Comparison Operators</h2>
<p>Assume variable a holds 10 and variable b holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">==</td>
<td>Checks if the value of two operands are equal or not, if yes then condition becomes true.</td>
<td class="ts">(a == b) is not true.</td>
</tr>
<tr>
<td class="ts">!=</td>
<td>Checks if the value of two operands are equal or not, if values are not equal then condition becomes true.</td>
<td class="ts">(a != b) is true.</td>
</tr>
<tr>
<td class="ts">&gt;</td>
<td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>
<td class="ts">(a &gt; b) is not true.</td>
</tr>
<tr>
<td class="ts">&lt;</td>
<td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>
<td class="ts">(a &lt; b) is true.</td>
</tr>
<tr>
<td class="ts">&gt;=</td>
<td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>
<td class="ts">(a &gt;= b) is not true.</td>
</tr>
<tr>
<td class="ts">&lt;=</td>
<td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>
<td class="ts">(a &lt;= b) is true.</td>
</tr>
<tr>
<td class="ts">&lt;=&gt;</td>
<td>Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.</td>
<td class="ts">(a &lt;=&gt; b)  returns -1.</td>
</tr>
<tr>
<td class="ts">===</td>
<td>Used to test equality within a when clause of a <i>case</i> statement.</td>
<td>(1...10) === 5 returns true.</td>
</tr>
<tr>
<td class="ts">.eql?</td>
<td>True if the receiver and argument have both the same type and equal values.</td>
<td>1 == 1.0 returns true, but 1.eql?(1.0) is false.</td>
</tr>
<tr>
<td class="ts">equal?</td>
<td style="vertical-align:middle;">True if the receiver and argument have the same object id.</td>
<td>if aObj is duplicate of bObj then aObj == bObj is true, a.equal?bObj is false but a.equal?aObj is true.</td>
</tr>
</table>
<h2>Ruby Assignment Operators</h2>
<p>Assume variable a holds 10 and variable b holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">=</td>
<td>Simple assignment operator, assigns values from right side operands to left side operand.</td>
<td>c = a &plus; b will assign the value of a &plus; b into c</td>
</tr>
<tr>
<td class="ts">&plus;=</td>
<td>Add AND assignment operator, adds right operand to the left operand and assign the result to left operand.</td>
<td>c &plus;= a is equivalent to c = c &plus; a</td>
</tr>
<tr>
<td class="ts">-=</td>
<td>Subtract AND assignment operator, subtracts right operand from the left operand and assign the result to left operand.</td>
<td>c -= a is equivalent to c = c - a</td>
</tr>
<tr>
<td class="ts">*=</td>
<td>Multiply AND assignment operator, multiplies right operand with the left operand and assign the result to left operand.</td>
<td>c *= a is equivalent to c = c * a</td>
</tr>
<tr>
<td class="ts">/=</td>
<td>Divide AND assignment operator, divides left operand with the right operand and assign the result to left operand.</td>
<td>c /= a is equivalent to c = c / a</td>
</tr>
<tr>
<td class="ts">%=</td>
<td>Modulus AND assignment operator, takes modulus using two operands and assign the result to left operand.</td>
<td>c %= a is equivalent to c = c % a</td>
</tr>
<tr>
<td class="ts">**=</td>
<td>Exponent AND assignment operator, performs exponential (power) calculation on operators and assign value to the left operand.</td>
<td>c **= a is equivalent to c = c ** a</td>
</tr>
</table>
<h2>Ruby Parallel Assignment</h2>
<p>Ruby also supports the parallel assignment of variables. This enables multiple variables to be initialized with a single line of Ruby code. For example &minus;</p>
<pre class="result notranslate">
a = 10
b = 20
c = 30
</pre>
<p>This may be more quickly declared using parallel assignment &minus;</p>
<pre class="result notranslate">
a, b, c = 10, 20, 30
</pre>
<p>Parallel assignment is also useful for swapping the values held in two variables &minus;</p>
<pre class="result notranslate">
a, b = b, c
</pre>
<h2>Ruby Bitwise Operators</h2>
<p>Bitwise operator works on bits and performs bit by bit operation.</p>
<p>Assume if a = 60; and b = 13; now in binary format they will be as follows &minus;</p>
<pre class="result notranslate">
 a    =  0011 1100
 b    =  0000 1101
 ------------------
 a&amp;b  =  0000 1100
 a|b  =  0011 1101
 a^b  =  0011 0001
 ~a   =  1100 0011
</pre>
<p>The following Bitwise operators are supported by Ruby language.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">&amp;</td>
<td>Binary AND Operator copies a bit to the result if it exists in both operands.</td>
<td style="vertical-align:middle;">(a &amp; b) will give 12, which is 0000 1100</td>
</tr>
<tr>
<td class="ts">|</td>
<td>Binary OR Operator copies a bit if it exists in either operand.</td>
<td>(a | b) will give 61, which is 0011 1101</td>
</tr>
<tr>
<td class="ts">^</td>
<td>Binary XOR Operator copies the bit if it is set in one operand but not both.</td>
<td>(a ^ b) will give 49, which is 0011 0001</td>
</tr>
<tr>
<td class="ts">~</td>
<td style="vertical-align:middle;">Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.</td>
<td>(~a ) will give -61, which is 1100 0011 in 2's complement form due to a signed binary number.</td>
</tr>
<tr>
<td class="ts">&lt;&lt;</td>
<td>Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>
<td style="vertical-align:middle;">a &lt;&lt; 2 will give 240, which is 1111 0000</td>
</tr>
<tr>
<td class="ts">&gt;&gt;</td>
<td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>
<td style="vertical-align:middle;">a &gt;&gt; 2 will give 15, which is 0000 1111</td>
</tr>
</table>
<h2>Ruby Logical Operators</h2>
<p>The following logical operators are supported by Ruby language</p>
<p>Assume variable <i>a</i> holds 10 and variable <i>b</i> holds 20, then &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">and</td>
<td>Called Logical AND operator. If both the operands are true, then the condition becomes true.</td>
<td>(a and b) is true.</td>
</tr>
<tr>
<td class="ts">or</td>
<td>Called Logical OR Operator. If any of the two operands are non zero, then the condition becomes true.</td>
<td style="vertical-align:middle;">(a or b) is true.</td>
</tr>
<tr>
<td class="ts">&amp;&amp;</td>
<td>Called Logical AND operator. If both the operands are non zero, then the condition becomes true.</td>
<td>(a &amp;&amp; b) is true.</td>
</tr>
<tr>
<td class="ts">||</td>
<td>Called Logical OR Operator. If any of the two operands are non zero, then the condition becomes true.</td>
<td>(a || b) is true.</td>
</tr>
<tr>
<td class="ts">!</td>
<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>
<td>!(a &amp;&amp; b) is false.</td>
</tr>
<tr>
<td class="ts">not</td>
<td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.</td>
<td>not(a &amp;&amp; b) is false.</td>
</tr>
</table>
<h2>Ruby Ternary Operator</h2>
<p>There is one more operator called Ternary Operator. It first evaluates an expression for a true or false value and then executes one of the two given statements depending upon the result of the evaluation. The conditional operator has this syntax &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">? :</td>
<td>Conditional Expression</td>
<td>If Condition is true ? Then value X : Otherwise value Y</td>
</tr>
</table>
<h2>Ruby Range Operators</h2>
<p>Sequence ranges in Ruby are used to create a range of successive values - consisting of a start value, an end value, and a range of values in between.</p>
<p>In Ruby, these sequences are created using the ".." and "..." range operators. The two-dot form creates an inclusive range, while the three-dot form creates a range that excludes the specified high value.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
<th style="text-align:center;">Example</th>
</tr>
<tr>
<td class="ts">..</td>
<td>Creates a range from start point to end point inclusive.</td>
<td>1..10 Creates a range from 1 to 10 inclusive.</td>
</tr>
<tr>
<td class="ts">...</td>
<td>Creates a range from start point to end point exclusive.</td>
<td>1...10 Creates a range from 1 to 9.</td>
</tr>
</table>
<h2>Ruby defined? Operators</h2>
<p>defined? is a special operator that takes the form of a method call to determine whether or not the passed expression is defined. It returns a description string of the expression, or <i>nil</i> if the expression isn't defined.</p>
<p>There are various usage of defined? Operator</p>
<h3>Usage 1</h3>
<pre class="prettyprint notranslate">
defined? variable # True if variable is initialized
</pre>
<p><b>For Example</b></p>
<pre class="prettyprint notranslate">
foo = 42
defined? foo    # =&gt; "local-variable"
defined? $_     # =&gt; "global-variable"
defined? bar    # =&gt; nil (undefined)
</pre>
<h3>Usage 2</h3>
<pre class="prettyprint notranslate">
defined? method_call # True if a method is defined
</pre>
<p><b>For Example</b></p>
<pre class="prettyprint notranslate">
defined? puts        # =&gt; "method"
defined? puts(bar)   # =&gt; nil (bar is not defined here)
defined? unpack      # =&gt; nil (not defined here)
</pre>
<h3>Usage 3</h3>
<pre class="prettyprint notranslate">
# True if a method exists that can be called with super user
defined? super
</pre>
<p><b>For Example</b></p>
<pre class="prettyprint notranslate">
defined? super     # =&gt; "super" (if it can be called)
defined? super     # =&gt; nil (if it cannot be)
</pre>
<h3>Usage 4</h3>
<pre class="prettyprint notranslate">
defined? yield   # True if a code block has been passed
</pre>
<p><b>For Example</b></p>
<pre class="prettyprint notranslate">
defined? yield    # =&gt; "yield" (if there is a block passed)
defined? yield    # =&gt; nil (if there is no block)
</pre>
<h2>Ruby Dot "." and Double Colon "::" Operators</h2>
<p>You call a module method by preceding its name with the module's name and a period, and you reference a constant using the module name and two colons.</p>
<p>The <b>::</b> is a unary operator that allows: constants, instance methods and class methods defined within a class or module, to be accessed from anywhere outside the class or module.</p>
<p><b>Remember</b> in Ruby, classes and methods may be considered constants too.</p>
<p>You need to just prefix the <b>::</b> Const_name with an expression that returns the appropriate class or module object.</p>
<p>If no prefix expression is used, the main Object class is used by default.</p>
<p>Here are two examples &minus;</p>
<pre class="prettyprint notranslate">
MR_COUNT = 0         # constant defined on main Object class
module Foo
   MR_COUNT = 0
   ::MR_COUNT = 1    # set global count to 1
   MR_COUNT = 2      # set local count to 2
end
puts MR_COUNT        # this is the global constant
puts Foo::MR_COUNT   # this is the local "Foo" constant
</pre>
<p><b>Second Example</b></p>
<pre class="prettyprint notranslate">
CONST = ' out there'
class Inside_one
   CONST = proc {' in there'}
   def where_is_my_CONST
      ::CONST + ' inside one'
   end
end
class Inside_two
   CONST = ' inside two'
   def where_is_my_CONST
      CONST
   end
end
puts Inside_one.new.where_is_my_CONST
puts Inside_two.new.where_is_my_CONST
puts Object::CONST + Inside_two::CONST
puts Inside_two::CONST + CONST
puts Inside_one::CONST
puts Inside_one::CONST.call + Inside_two::CONST
</pre>
<h2>Ruby Operators Precedence</h2>
<p>The following table lists all operators from highest precedence to lowest.</p>
<table  class="table table-bordered">
<tr>
<th style="text-align:center;">Method</th>
<th style="text-align:center;">Operator</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">::</td>
<td>Constant resolution operator</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">[ ] [ ]=</td>
<td>Element reference, element set</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">**</td>
<td>Exponentiation (raise to the power)</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">! ~ &plus; -</td>
<td>Not, complement, unary plus and minus (method names for the last two are &plus;&commat; and -&commat;)</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">* / %</td>
<td>Multiply, divide, and modulo</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">&plus; -</td>
<td>Addition and subtraction</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">&gt;&gt; &lt;&lt;</td>
<td>Right and left bitwise shift</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">&amp;</td>
<td>Bitwise 'AND'</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">^ |</td>
<td>Bitwise exclusive `OR' and regular `OR'</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">&lt;= &lt; &gt; &gt;=</td>
<td>Comparison operators</td>
</tr>
<tr>
<td class="ts">Yes</td>
<td class="ts">&lt;=&gt; == === != =~ !~</td>
<td>Equality and pattern match operators (!= and !~ may not be defined as methods)</td>
</tr>
<tr>
<td>&nbsp;</td>
<td class="ts">&amp;&amp;</td>
<td>Logical 'AND'</td>
</tr>
<tr>
<td>&nbsp;</td>
<td class="ts">||</td>
<td>Logical 'OR'</td>
</tr>
<tr>
<td>&nbsp;</td>
<td class="ts">.. ...</td>
<td>Range (inclusive and exclusive)</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>?&nbsp;:</td>
<td>Ternary if-then-else</td>
</tr>
<tr>
<td>&nbsp;</td>
<td>= %= { /= -= &plus;= |= &amp;= &gt;&gt;= &lt;&lt;= *= &amp;&amp;= ||= **=</td>
<td style="vertical-align:middle;">Assignment</td>
</tr>
<tr>
<td>&nbsp;</td>
<td class="ts">defined?</td>
<td>Check if specified symbol defined</td>
</tr>
<tr>
<td>&nbsp;</td>
<td class="ts">not</td>
<td>Logical negation</td>
</tr>
<tr>
<td>&nbsp;</td>
<td class="ts">or and</td>
<td>Logical composition</td>
</tr>
</table>
<p><b>NOTE</b> &minus; Operators with a <i>Yes</i> in the method column are actually methods, and as such may be overridden.</p>
<h1>Ruby - Comments</h1>
<p>Comments are lines of annotation within Ruby code that are ignored at runtime. A single line comment starts with # character and they extend from # to the end of the line as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/lAk5HY" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby -w
# This is a single line comment.

puts "Hello, Ruby!"
</pre>
<p>When executed, the above program produces the following result &minus;</p>
<pre class="result notranslate">
Hello, Ruby!
</pre>
<h2>Ruby Multiline Comments</h2>
<p>You can comment multiple lines using <b>=begin</b> and <b>=end</b> syntax as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/o4v8yH" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby -w

puts "Hello, Ruby!"

=begin
This is a multiline comment and con spwan as many lines as you
like. But =begin and =end should come in the first line only. 
=end
</pre>
<p>When executed, the above program produces the following result &minus;</p>
<pre class="result notranslate">
Hello, Ruby!
</pre>
<p>Make sure trailing comments are far enough from the code and that they are easily distinguished. If more than one trailing comment exists in a block, align them. For example &minus;</p>
<pre class="prettyprint notranslate">
@counter      # keeps track times page has been hit
@siteCounter  # keeps track of times all pages have been hit
</pre>
<h1>Ruby - if...else, case, unless</h1>
<p>Ruby offers conditional structures that are pretty common to modern languages. Here, we will explain all the conditional statements and modifiers available in Ruby.</p>
<h2>Ruby if...else Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
if conditional [then]
   code...
[elsif conditional [then]
   code...]...
[else
   code...]
end
</pre>
<p><i>if</i> expressions are used for conditional execution. The values <i>false</i> and <i>nil</i> are false, and everything else are true. Notice Ruby uses elsif, not else if nor elif.</p>
<p>Executes <i>code</i> if the <i>conditional</i> is true. If the <i>conditional</i> is not true, <i>code</i> specified in the else clause is executed.</p>
<p>An if expression's <i>conditional</i> is separated from code by the reserved word <i>then</i>, a newline, or a semicolon.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/9aOJkD" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

x = 1
if x &gt; 2
   puts "x is greater than 2"
elsif x &lt;= 2 and x!=0
   puts "x is 1"
else
   puts "I can't guess the number"
end
</pre>
<pre class="result notranslate">
x is 1
</pre>
<h2>Ruby if modifier</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
code if condition
</pre>
<p>Executes <i>code</i> if the <i>conditional</i> is true.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/B9LLo0" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

$debug = 1
print "debug\n" if $debug
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
debug
</pre>
<h2>Ruby unless Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
unless conditional [then]
   code
[else
   code ]
end
</pre>
<p>Executes <i>code</i> if <i>conditional</i> is false. If the <i>conditional</i> is true, code specified in the else clause is executed.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/SORgCW" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

x = 1 
unless x&gt;=2
   puts "x is less than 2"
 else
   puts "x is greater than 2"
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
x is less than 2
</pre>
<h2>Ruby unless modifier</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
code unless conditional
</pre>
<p>Executes <i>code</i> if <i>conditional</i> is false.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/USjo33" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

$var =  1
print "1 -- Value is set\n" if $var
print "2 -- Value is set\n" unless $var

$var = false
print "3 -- Value is set\n" unless $var
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
1 -- Value is set
3 -- Value is set
</pre>
<h2>Ruby case Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
case expression
[when expression [, expression ...] [then]
   code ]...
[else
   code ]
end
</pre>
<p>Compares the <i>expression</i> specified by case and that specified by when using the === operator and executes the <i>code</i> of the when clause that matches.</p>
<p>The <i>expression</i> specified by the when clause is evaluated as the left operand. If no when clauses match, <i>case</i> executes the code of the <i>else</i> clause.</p>
<p>A <i>when</i> statement's expression is separated from code by the reserved word then, a newline, or a semicolon. Thus &minus;</p>
<pre class="result notranslate">
case expr0
when expr1, expr2
   stmt1
when expr3, expr4
   stmt2
else
   stmt3
end
</pre>
<p>is basically similar to the following &minus;</p>
<pre class="prettyprint notranslate">
_tmp = expr0
if expr1 === _tmp || expr2 === _tmp
   stmt1
elsif expr3 === _tmp || expr4 === _tmp
   stmt2
else
   stmt3
end
</pre>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/prdGMS" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

$age =  5
case $age
when 0 .. 2
   puts "baby"
when 3 .. 6
   puts "little child"
when 7 .. 12
   puts "child"
when 13 .. 18
   puts "youth"
else
   puts "adult"
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
little child
</pre>
<h1>Ruby - Loops</h1>
<p>Loops in Ruby are used to execute the same block of code a specified number of times. This chapter details all the loop statements supported by Ruby.</p>
<h2>Ruby while Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
while conditional [do]
   code
end
</pre>
<p>Executes <i>code</i> while <i>conditional</i> is true. A <i>while</i> loop's <i>conditional</i> is separated from <i>code</i> by the reserved word do, a newline, backslash \, or a semicolon ;.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/T8XjWF" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

&dollar;i = 0
&dollar;num = 5

while &dollar;i &lt; &dollar;num  do
   puts("Inside the loop i = #&dollar;i" )
   &dollar;i &plus;=1
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4
</pre>
<h2>Ruby while modifier</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
code while condition

OR

begin 
  code 
end while conditional
</pre>
<p>Executes <i>code</i> while <i>conditional</i> is true.</p> 
<p>If a <i>while</i> modifier follows a <i>begin</i> statement with no <i>rescue</i> or ensure clauses, <i>code</i> is executed once before conditional is evaluated.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/weGWXV" target="_blank" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

&dollar;i = 0
&dollar;num = 5
begin
   puts("Inside the loop i = #&dollar;i" )
   &dollar;i &plus;=1
end while &dollar;i &lt; &dollar;num
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4
</pre>
<h2>Ruby until Statement</h2>
<pre class="result notranslate">
until conditional [do]
   code
end
</pre>
<p>Executes <i>code</i> while <i>conditional</i> is false. An <i>until</i> statement's conditional is separated from <i>code</i> by the reserved word <i>do</i>, a newline, or a semicolon.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/Gzut2W" target="_blank" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

&dollar;i = 0
&dollar;num = 5

until &dollar;i &gt; &dollar;num  do
   puts("Inside the loop i = #&dollar;i" )
   &dollar;i &plus;=1;
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4
Inside the loop i = 5
</pre>
<h2>Ruby until modifier</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
code until conditional

OR

begin
   code
end until conditional
</pre>
<p>Executes <i>code</i> while <i>conditional</i> is false.</p>
<p>If an <i>until</i> modifier follows a <i>begin</i> statement with no <i>rescue</i> or ensure clauses, <i>code</i> is executed once before <i>conditional</i> is evaluated.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/WVpBez" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

&dollar;i = 0
&dollar;num = 5
begin
   puts("Inside the loop i = #&dollar;i" )
   &dollar;i &plus;=1;
end until &dollar;i &gt; &dollar;num
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Inside the loop i = 0
Inside the loop i = 1
Inside the loop i = 2
Inside the loop i = 3
Inside the loop i = 4
Inside the loop i = 5
</pre>
<h2>Ruby for Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
for variable [, variable ...] in expression [do]
   code
end
</pre>
<p>Executes <i>code</i> once for each element in <i>expression</i>.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/rZqBys" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

for i in 0..5
   puts "Value of local variable is #{i}"
end
</pre>
<p>Here, we have defined the range 0..5. The statement for <i>i</i> in 0..5 will allow <i>i</i> to take values in the range from 0 to 5 (including 5). This will produce the following result &minus;</p>
<pre class="result notranslate">
Value of local variable is 0
Value of local variable is 1
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5
</pre>
<p>A <i>for...in</i> loop is almost exactly equivalent to the following &minus;</p>
<pre class="result notranslate">
(expression).each do |variable[, variable...]| code end
</pre>
<p>except that a <i>for</i> loop doesn't create a new scope for local variables. A <i>for</i> loop's <i>expression</i> is separated from <i>code</i> by the reserved word do, a newline, or a semicolon.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/sAFa0I" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

(0..5).each do |i|
   puts "Value of local variable is #{i}"
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Value of local variable is 0
Value of local variable is 1
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5
</pre>
<h2>Ruby break Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
break
</pre>
<p>Terminates the most internal loop. Terminates a method with an associated block if called within the block (with the method returning nil).</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/H3CfLc" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

for i in 0..5
   if i &gt; 2 then
      break
   end
   puts "Value of local variable is #{i}"
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Value of local variable is 0
Value of local variable is 1
Value of local variable is 2
</pre>
<h2>Ruby next Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
next
</pre>
<p>Jumps to the next iteration of the most internal loop. Terminates execution of a block if called within a block (with <i>yield</i> or call returning nil).</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/L2RUjl" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

for i in 0..5
   if i &lt; 2 then
      next
   end
   puts "Value of local variable is #{i}"
end
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
Value of local variable is 2
Value of local variable is 3
Value of local variable is 4
Value of local variable is 5
</pre>
<h2>Ruby redo Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
redo
</pre>
<p>Restarts this iteration of the most internal loop, without checking loop condition. Restarts <i>yield</i> or <i>call</i> if called within a block.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

for i in 0..5
   if i &lt; 2 then
      puts "Value of local variable is #{i}"
      redo
   end
end
</pre>
<p>This will produce the following result and will go in an infinite loop &minus;</p>
<pre class="result notranslate">
Value of local variable is 0
Value of local variable is 0
............................
</pre>
<h2>Ruby retry Statement</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
retry
</pre>
<p>If <i>retry</i> appears in rescue clause of begin expression, restart from the beginning of the begin body.</p>
<pre class="prettyprint notranslate">
begin
   do_something # exception raised
rescue
   # handles error
   retry  # restart from beginning
end
</pre>
<p>If retry appears in the iterator, the block, or the body of the <i>for</i> expression, restarts the invocation of the iterator call. Arguments to the iterator is re-evaluated.</p>
<pre class="prettyprint notranslate">
for i in 1..5
   retry if some_condition # restart from i == 1
end
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby
for i in 0..5
   retry if i &gt; 2
puts "Value of local variable is #{i}"
end
</pre>
<p>This will produce the following result and will go in an infinite loop &minus;</p>
<pre class="result notranslate">
Value of local variable is 1
Value of local variable is 2
Value of local variable is 1
Value of local variable is 2
Value of local variable is 1
Value of local variable is 2
............................
</pre>
<h1>Ruby - Methods</h1>
<p>Ruby methods are very similar to functions in any other programming language. Ruby methods are used to bundle one or more repeatable statements into a single unit.</p>
<p>Method names should begin with a lowercase letter. If you begin a method name with an uppercase letter, Ruby might think that it is a constant and hence can parse the call incorrectly.</p>
<p>Methods should be defined before calling them, otherwise Ruby will raise an exception for undefined method invoking.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
def method_name [( [arg [= default]]...[, * arg [, &amp;expr ]])]
   expr..
end
</pre>
<p>So, you can define a simple method as follows &minus;</p>
<pre class="result notranslate">
def method_name 
   expr..
end
</pre>
<p>You can represent a method that accepts parameters like this &minus;</p>
<pre class="result notranslate">
def method_name (var1, var2)
   expr..
end
</pre>
<p>You can set default values for the parameters, which will be used if method is called without passing the required parameters &minus;</p>
<pre class="result notranslate">
def method_name (var1 = value1, var2 = value2)
   expr..
end
</pre>
<p>Whenever you call the simple method, you write only the method name as follows &minus;</p>
<pre class="result notranslate">
method_name
</pre>
<p>However, when you call a method with parameters, you write the method name along with the parameters, such as &minus;</p>
<pre class="result notranslate">
method_name 25, 30
</pre>
<p>The most important drawback to using methods with parameters is that you need to remember the number of parameters whenever you call such methods. For example, if a method accepts three parameters and you pass only two, then Ruby displays an error.</p>
<h3>Example</h3>
<div class="demo-view">
<a href="http://tpcg.io/zmyXsX" target="_blank" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
#!/usr/bin/ruby

def test(a1 = "Ruby", a2 = "Perl")
   puts "The programming language is #{a1}"
   puts "The programming language is #{a2}"
end
test "C", "C++"
test
</pre>
<p>This will produce the following result &minus;</p>
<pre class="result notranslate">
The programming language is C
The programming language is C++
The programming language is Ruby
The programming language is Perl
</pre>
<h2>Return Values from Methods</h2>
<p>Every method in Ruby returns a value by default. This returned value will be the value of the last statement. For example &minus;</p>
<pre class="prettyprint notranslate">
def test
   i = 100
   j = 10
   k = 0
end
</pre>
<p>This method, when called, will return the last declared variable <i>k</i>.</p>
<h2>Ruby return Statement</h2>
<p>The <i>return</i> statement in ruby is used to return one or more values from a Ruby Method.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
return [expr[`,' expr...]]
</pre>
<p>If more than two expressions are given, the array containing these values will be the r