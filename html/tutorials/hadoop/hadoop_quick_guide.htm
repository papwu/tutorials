<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Hadoop - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Hadoop - Quick Guide - Due to the advent of new technologies, devices, and communication means like social networking sites, the amount of data produced by mankind is growing rapidly "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/hadoop/hadoop_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#39b9fa;
}
a.demo {
    background:#39b9fa;
}
li.heading {
    background:#39b9fa;
}
.course-box{background:#39b9fa}
.home-intro-sub p{color:#39b9fa}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/hadoop/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/hadoop/images/hadoop-mini-logo.jpg" alt="Hadoop Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Hadoop Tutorial</li>
<li><a href="/hadoop/index.htm">Hadoop - Home</a></li>
<li><a href="/hadoop/hadoop_big_data_overview.htm">Hadoop - Big Data Overview</a></li>
<li><a href="/hadoop/hadoop_big_data_solutions.htm">Hadoop - Big Data Solutions</a></li>
<li><a href="/hadoop/hadoop_introduction.htm">Hadoop - Introduction</a></li>
<li><a href="/hadoop/hadoop_enviornment_setup.htm">Hadoop - Environment Setup</a></li>
<li><a href="/hadoop/hadoop_hdfs_overview.htm">Hadoop - HDFS Overview</a></li>
<li><a href="/hadoop/hadoop_hdfs_operations.htm">Hadoop - HDFS Operations</a></li>
<li><a href="/hadoop/hadoop_command_reference.htm">Hadoop - Command Reference</a></li>
<li><a href="/hadoop/hadoop_mapreduce.htm">Hadoop - MapReduce</a></li>
<li><a href="/hadoop/hadoop_streaming.htm">Hadoop - Streaming</a></li>
<li><a href="/hadoop/hadoop_multi_node_cluster.htm">Hadoop - Multi-Node Cluster</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Hadoop Useful Resources</li>
<li><a  href="/hadoop/hadoop_questions_answers.htm">Hadoop - Questions and Answers</a></li>
<li><a  href="/hadoop/hadoop_quick_guide.htm">Hadoop - Quick Guide</a></li>
<li><a  href="/hadoop/hadoop_useful_resources.htm">Hadoop - Useful Resources</a></li>
<li><a  href="/hadoop/hadoop_discussion.htm">Hadoop - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Hadoop - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/hadoop/hadoop_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/hadoop/hadoop_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Hadoop - Big Data Overview</h1>
<blockquote>“90% of the world’s data was generated in the last few years.”</blockquote>
<p>Due to the advent of new technologies, devices, and communication means like social networking sites, the amount of data produced by mankind is growing rapidly every year. The amount of data produced by us from the beginning of time till 2003 was 5 billion gigabytes. If you pile up the data in the form of disks it may fill an entire football field. The same amount was created in every two days in <b>2011</b>, and in every ten minutes in <b>2013</b>. This rate is still growing enormously. Though all this information produced is meaningful and can be useful when processed, it is being neglected.</p>
<h2>What is Big Data?</h2>
<p><b>Big data</b> is a collection of large datasets that cannot be processed using traditional computing techniques. It is not a single technique or a tool, rather it has become a complete subject, which involves various tools, technqiues and frameworks.</p>
<h2>What Comes Under Big Data?</h2>
<p>Big data involves the data produced by different devices and applications. Given below are some of the fields that come under the umbrella of Big Data.</p>
<ul class="list">
<li><p><b>Black Box Data</b> &minus; It is a component of helicopter, airplanes, and jets, etc. It captures voices of the flight crew, recordings of microphones and earphones, and the performance information of the aircraft.</p></li>
<li><p><b>Social Media Data</b> &minus; Social media such as Facebook and Twitter hold information and the views posted by millions of people across the globe.</p></li>
<li><p><b>Stock Exchange Data</b> &minus; The stock exchange data holds information about the ‘buy’ and ‘sell’ decisions made on a share of different companies made by the customers.</p></li>
<li><p><b>Power Grid Data</b> &minus; The power grid data holds information consumed by a particular node with respect to a base station.</p></li> 
<li><p><b>Transport Data</b> &minus; Transport data includes model, capacity, distance and availability of a vehicle.</p></li>
<li><p><b>Search Engine Data</b> &minus; Search engines retrieve lots of data from different databases.</p></li>
</ul> 
<img src="/hadoop/images/big_data.jpg" alt="Big Data" />
<p>Thus Big Data includes huge volume, high velocity, and extensible variety of data. The data in it will be of three types.</p>
<ul class="list">
<li><p><b>Structured data</b> &minus; Relational data.</p></li>
<li><p><b>Semi Structured data</b> &minus; XML data.</p></li>
<li><p><b>Unstructured data</b> &minus; Word, PDF, Text, Media Logs.</p></li>
</ul>
<h2>Benefits of Big Data</h2>
<ul class="list">
<li><p>Using the information kept in the social network like Facebook, the marketing agencies are learning about the response for their campaigns, promotions, and other advertising mediums.</p></li>
<li><p>Using the information in the social media like preferences and product perception of their consumers, product companies and retail organizations are planning their production.</p></li>
<li><p>Using the data regarding the previous medical history of patients, hospitals are providing better and quick service.</p></li>
</ul>
<h2>Big Data Technologies</h2>
<p>Big data technologies are important in providing more accurate analysis, which may lead to more concrete decision-making resulting in greater operational efficiencies, cost reductions, and reduced risks for the business.</p>
<p>To harness the power of big data, you would require an infrastructure that can manage and process huge volumes of structured and unstructured data in realtime and can protect data privacy and security.</p>
<p>There are various technologies in the market from different vendors including Amazon, IBM, Microsoft, etc., to handle big data. While looking into the technologies that handle big data, we examine the following two classes of technology &minus;</p>
<h3>Operational Big Data</h3>
<p>This include systems like MongoDB that provide operational capabilities for real-time, interactive workloads where data is primarily captured and stored.</p>
<p>NoSQL Big Data systems are designed to take advantage of new cloud computing architectures that have emerged over the past decade to allow massive computations to be run inexpensively and efficiently. This makes operational big data workloads much easier to manage, cheaper, and faster to implement.</p>
<p>Some NoSQL systems can provide insights into patterns and trends based on real-time data with minimal coding and without the need for data scientists and additional infrastructure.</p>
<h3>Analytical Big Data</h3>
<p>These includes systems like Massively Parallel Processing (MPP) database systems and MapReduce that provide analytical capabilities for retrospective and complex analysis that may touch most or all of the data.</p>
<p>MapReduce provides a new method of analyzing data that is complementary to the capabilities provided by SQL, and a system based on MapReduce that can be scaled up from single servers to thousands of high and low end machines.</p>
<p>These two classes of technology are complementary and frequently deployed together.</p>
<h2>Operational vs. Analytical Systems</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th></th>
<th style="text-align:center;">Operational</th>
<th style="text-align:center;">Analytical</th>
</tr>
<tr>
<td>Latency</td>
<td>1 ms - 100 ms</td>
<td>1 min - 100 min</td>
</tr>
<tr>
<td>Concurrency</td>
<td>1000 - 100,000</td>
<td>1 - 10</td>
</tr>
<tr>
<td>Access Pattern</td>
<td>Writes and Reads</td>
<td>Reads</td>
</tr>
<tr>
<td>Queries</td>
<td>Selective</td>
<td>Unselective</td>
</tr>
<tr>
<td>Data Scope</td>
<td>Operational</td>
<td>Retrospective</td>
</tr>
<tr>
<td>End User</td>
<td>Customer</td>
<td>Data Scientist</td>
</tr>
<tr>
<td>Technology</td>
<td>NoSQL</td>
<td>MapReduce, MPP Database</td>
</tr>
</table>
<h2>Big Data Challenges</h2>
<p>The major challenges associated with big data are as follows &minus;</p>
<ul class="list">
<li>Capturing data</b></li>
<li>Curation</li>
<li>Storage</li>
<li>Searching</li>
<li>Sharing</li>
<li>Transfer</li>
<li>Analysis</li>
<li>Presentation</li>
</ul> 
<p>To fulfill the above challenges, organizations normally take the help of enterprise servers.</p>
<h1>Hadoop - Big Data Solutions</h1>
<h2>Traditional Approach</h2>
<p>In this approach, an enterprise will have a computer to store and process big data. For storage purpose, the programmers will take the help of their choice of database vendors such as Oracle, IBM, etc. In this approach, the user interacts with the application, which
in turn handles the part of data storage and analysis.</p>
<img src="/hadoop/images/traditional_approach.jpg" alt="Big Data Traditional Approach" />
<h3>Limitation</h3>
<p>This approach works fine with those applications that process less voluminous data that can be accommodated by standard database servers, or up to the limit of the processor that is processing the data. But when it comes to dealing with huge amounts of scalable data, it is a hectic task to process such data through a single database bottleneck.</p>
<h2>Google’s Solution</h2>
<p>Google solved this problem using an algorithm called MapReduce. This algorithm divides the task into small parts and assigns them to many computers, and collects the results from them which when integrated, form the result dataset.</p>
<img src="/hadoop/images/mapreduce.jpg" alt="Google MapReduce" />
<h2>Hadoop</h2>
<p>Using the solution provided by Google, <b>Doug Cutting</b> and his team developed an Open Source Project called <b>HADOOP</b>.</p>
<p>Hadoop runs applications using the MapReduce algorithm, where the data is processed in parallel with others. In short, Hadoop is used to develop applications that could perform complete statistical analysis on huge amounts of data.</p>
<img src="/hadoop/images/hadoop_framework.jpg" alt="Hadoop Framework" />
<h1>Hadoop - Introduction</h1>
<p>Hadoop is an Apache open source framework written in java that allows distributed processing of large datasets across clusters of computers using simple programming models. The Hadoop framework application works in an environment that provides distributed <i>storage</i> and <i>computation</i> across clusters of computers. Hadoop is designed to scale up from single server to thousands of machines, each offering local computation and storage.</p>
<h2>Hadoop Architecture</h2>
<p>At its core, Hadoop has two major layers namely &minus;</p>
<ul class="list">
<li>Processing/Computation layer (MapReduce), and</li>
<li>Storage layer (Hadoop Distributed File System).</li>
</ul>
<img src="/hadoop/images/hadoop_architecture.jpg" alt="Hadoop Architecture" />
<h2>MapReduce</h2>
<p>MapReduce is a parallel programming model for writing distributed applications devised at Google for efficient processing of large amounts of data (multi-terabyte data-sets), on large clusters (thousands of nodes) of commodity hardware in a reliable, fault-tolerant
manner. The MapReduce program runs on Hadoop which is an Apache open-source framework.</p>
<h2>Hadoop Distributed File System</h2>
<p>The Hadoop Distributed File System (HDFS) is based on the Google File System (GFS) and provides a distributed file system that is designed to run on commodity hardware. It has many similarities with existing distributed file systems. However, the differences
from other distributed file systems are significant. It is highly fault-tolerant and is designed to be deployed on low-cost hardware. It provides high throughput access to
application data and is suitable for applications having large datasets.</p>
<p>Apart from the above-mentioned two core components, Hadoop framework also includes the following two modules &minus;</p>
<ul class="list">
<li><p><b>Hadoop Common</b> &minus; These are Java libraries and utilities required by other Hadoop
modules.</p></li>
<li><p><b>Hadoop YARN</b> &minus; This is a framework for job scheduling and cluster resource
management.</p></li>
</ul>
<h2>How Does Hadoop Work?</h2>
<p>It is quite expensive to build bigger servers with heavy configurations that handle large scale processing, but as an alternative, you can tie together many commodity computers with single-CPU, as a single functional distributed system and practically, the clustered machines can read the dataset in parallel and provide a much higher throughput. Moreover, it is cheaper than one high-end server. So this is the first motivational factor behind using Hadoop that it runs across clustered and low-cost machines.</p>
<p>Hadoop runs code across a cluster of computers. This process includes the following core tasks that Hadoop performs &minus;</p>
<ul class="list">
<li><p>Data is initially divided into directories and files. Files are divided into uniform sized blocks of 128M and 64M (preferably 128M).</p></li>
<li><p>These files are then distributed across various cluster nodes for further processing.</p></li>
<li><p>HDFS, being on top of the local file system, supervises the processing.</p></li>
<li><p>Blocks are replicated for handling hardware failure.</p></li>
<li><p>Checking that the code was executed successfully.</p></li>
<li><p>Performing the sort that takes place between the map and reduce stages.</p></li>
<li><p>Sending the sorted data to a certain computer.</p></li>
<li><p>Writing the debugging logs for each job.</p></li>
</ul>
<h2>Advantages of Hadoop</h2>
<ul class="list">
<li><p>Hadoop framework allows the user to quickly write and test distributed systems. It is efficient, and it automatic distributes the data and work across the machines and in turn, utilizes the underlying parallelism of the CPU cores.</p></li>
<li><p>Hadoop does not rely on hardware to provide fault-tolerance and high availability (FTHA), rather Hadoop library itself has been designed to detect and handle failures at the application layer.</p></li>
<li><p>Servers can be added or removed from the cluster dynamically and Hadoop continues to operate without interruption.</p></li>
<li><p>Another big advantage of Hadoop is that apart from being open source, it is compatible on all the platforms since it is Java based.</p></li>
</ul>
<h1>Hadoop - Enviornment Setup</h1>
<p>Hadoop is supported by GNU/Linux platform and its flavors. Therefore, we have to install a Linux operating system for setting up Hadoop environment. In case you have an OS other than Linux, you can install a Virtualbox software in it and have Linux inside the Virtualbox.</p>
<h2>Pre-installation Setup</h2>
<p>Before installing Hadoop into the Linux environment, we need to set up Linux using <b>ssh</b> (Secure Shell). Follow the steps given below for setting up the Linux environment.</p>
<h3>Creating a User</h3>
<p>At the beginning, it is recommended to create a separate user for Hadoop to isolate Hadoop file system from Unix file system. Follow the steps given below to create a user &minus;</p>
<ul class="list">
<li><p>Open the root using the command “su”.</p></li>
<li><p>Create a user from the root account using the command “useradd username”.</p></li>
<li><p>Now you can open an existing user account using the command “su username”. </p></li>
</ul>
<p>Open the Linux terminal and type the following commands to create a user.</p>
<pre class="result notranslate">
$ su 
   password: 
# useradd hadoop 
# passwd hadoop 
   New passwd: 
   Retype new passwd 
</pre>
<h2>SSH Setup and Key Generation </h2>
<p>SSH setup is required to do different operations on a cluster such as starting, stopping, distributed daemon shell operations. To authenticate different users of Hadoop, it is required to provide public/private key pair for a Hadoop user and share it with different users.</p>
<p>The following commands are used for generating a key value pair using SSH. Copy the public keys form id_rsa.pub to authorized_keys, and provide the owner with read and write permissions to authorized_keys file respectively.</p>
<pre class="result notranslate">
$ ssh-keygen -t rsa 
$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys 
$ chmod 0600 ~/.ssh/authorized_keys 
</pre>
<h2>Installing Java</h2>
<p>Java is the main prerequisite for Hadoop. First of all, you should verify the existence of java in your system using the command “java -version”. The syntax of java version command is given below.</p>
<pre class="result notranslate">
$ java -version 
</pre>
<p>If everything is in order, it will give you the following output.</p>
<pre class="result notranslate">
java version "1.7.0_71" 
Java(TM) SE Runtime Environment (build 1.7.0_71-b13) 
Java HotSpot(TM) Client VM (build 25.0-b02, mixed mode)  
</pre>
<p>If java is not installed in your system, then follow the steps given below for installing java.</p>
<h3>Step 1</h3>
<p>Download java (JDK &lt;latest version&gt; - X64.tar.gz) by visiting the following link<a target="_blank" rel="nofollow" href="https://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html"> www.oracle.com</a></p>
<p>Then <b>jdk-7u71-linux-x64.tar.gz</b> will be downloaded into your system. </p>
<h3>Step 2</h3>
<p>Generally you will find the downloaded java file in Downloads folder. Verify it and extract the <b>jdk-7u71-linux-x64.gz</b> file using the following commands.</p>
<pre class="result notranslate">
$ cd Downloads/ 
$ ls 
jdk-7u71-linux-x64.gz 

$ tar zxf jdk-7u71-linux-x64.gz 
$ ls 
jdk1.7.0_71   jdk-7u71-linux-x64.gz 
</pre>
<h3>Step 3</h3>
<p>To make java available to all the users, you have to move it to the location “/usr/local/”. Open root, and type the following commands.</p>
<pre class="result notranslate">
$ su 
password: 
# mv jdk1.7.0_71 /usr/local/ 
# exit 
</pre>
<h3>Step 4</h3>
<p>For setting up <b>PATH</b> and <b>JAVA_HOME</b> variables, add the following commands to <b>~/.bashrc</b> file.</p>
<pre class="result notranslate">
export JAVA_HOME=/usr/local/jdk1.7.0_71 
export PATH=$PATH:$JAVA_HOME/bin 
</pre>
<p>Now apply all the changes into the current running system.</p>
<pre class="result notranslate">
$ source ~/.bashrc
</pre>
<h3>Step 5</h3>
<p>Use the following commands to configure java alternatives &minus;</p>
<pre class="result notranslate">
# alternatives --install /usr/bin/java java usr/local/java/bin/java 2
# alternatives --install /usr/bin/javac javac usr/local/java/bin/javac 2
# alternatives --install /usr/bin/jar jar usr/local/java/bin/jar 2

# alternatives --set java usr/local/java/bin/java
# alternatives --set javac usr/local/java/bin/javac
# alternatives --set jar usr/local/java/bin/jar
</pre>
<p>Now verify the java -version command from the terminal as explained above.</p>
<h2>Downloading Hadoop</h2>
<p>Download and extract Hadoop 2.4.1 from Apache software foundation using the following commands.</p>
<pre class="result notranslate">
$ su 
password: 
# cd /usr/local 
# wget http://apache.claz.org/hadoop/common/hadoop-2.4.1/ 
hadoop-2.4.1.tar.gz 
# tar xzf hadoop-2.4.1.tar.gz 
# mv hadoop-2.4.1/* to hadoop/ 
# exit 
</pre>
<h2>Hadoop Operation Modes</h2>
<p>Once you have downloaded Hadoop, you can operate your Hadoop cluster in one of the three supported modes &minus;</p>
<ul class="list">
<li><p><b>Local/Standalone Mode</b> &minus; After downloading Hadoop in your system, by default, it is configured in a standalone mode and can be run as a single java process.</p></li>
<li><p><b>Pseudo Distributed Mode</b> &minus; It is a distributed simulation on single machine. Each Hadoop daemon such as hdfs, yarn, MapReduce etc., will run as a separate java process. This mode is useful for development.</p></li>
<li><p><b>Fully Distributed Mode</b> &minus; This mode is fully distributed with minimum two or more machines as a cluster. We will come across this mode in detail in the coming chapters.</p></li>
</ul> 
<h2>Installing Hadoop in Standalone Mode</h2>
<p>Here we will discuss the installation of <b>Hadoop 2.4.1</b> in standalone mode.</p>
<p>There are no daemons running and everything runs in a single JVM. Standalone mode is suitable for running MapReduce programs during development, since it is easy to test and debug them.</p>
<h3>Setting Up Hadoop</h3>
<p>You can set Hadoop environment variables by appending the following commands to <b>~/.bashrc</b> file.</p>
<pre class="result notranslate">
export HADOOP_HOME=/usr/local/hadoop 
</pre>
<p>Before proceeding further, you need to make sure that Hadoop is working fine. Just issue the following command &minus;</p>
<pre class="result notranslate">
$ hadoop version 
</pre>
<p>If everything is fine with your setup, then you should see the following result &minus;</p>
<pre class="result notranslate">
Hadoop 2.4.1 
Subversion https://svn.apache.org/repos/asf/hadoop/common -r 1529768 
Compiled by hortonmu on 2013-10-07T06:28Z 
Compiled with protoc 2.5.0
From source with checksum 79e53ce7994d1628b240f09af91e1af4 
</pre>
<p>It means your Hadoop's standalone mode setup is working fine. By default, Hadoop is configured to run in a non-distributed mode on a single machine.</p>
<h3>Example</h3>
<p>Let's check a simple example of Hadoop. Hadoop installation delivers the following example MapReduce jar file, which provides basic functionality of MapReduce and can be used for calculating, like Pi value, word counts in a given list of files, etc.</p>
<pre class="result notranslate">
$HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.2.0.jar 
</pre>
<p>Let's have an input directory where we will push a few files and our requirement is to count the total number of words in those files. To calculate the total number of words, we do not need to write our MapReduce, provided the .jar file contains the implementation for word count. You can try other examples using the same .jar file; just issue the following commands to check supported MapReduce functional programs by hadoop-mapreduce-examples-2.2.0.jar file.</p>
<pre class="result notranslate">
$ hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduceexamples-2.2.0.jar 
</pre>
<h3>Step 1</h3>
<p>Create temporary content files in the input directory. You can create this input directory anywhere you would like to work.</p>
<pre class="result notranslate">
$ mkdir input 
$ cp $HADOOP_HOME/*.txt input 
$ ls -l input 
</pre>
<p>It will give the following files in your input directory &minus;</p>
<pre class="result notranslate">
total 24 
-rw-r--r-- 1 root root 15164 Feb 21 10:14 LICENSE.txt 
-rw-r--r-- 1 root root   101 Feb 21 10:14 NOTICE.txt
-rw-r--r-- 1 root root  1366 Feb 21 10:14 README.txt 
</pre>
<p>These files have been copied from the Hadoop installation home directory. For your experiment, you can have different and large sets of files.</p>
<h3>Step 2</h3>
<p>Let's start the Hadoop process to count the total number of words in all the files available in the input directory, as follows &minus;</p>
<pre class="result notranslate">
$ hadoop jar $HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduceexamples-2.2.0.jar  wordcount input output 
</pre>
<h3>Step 3</h3>
<p>Step-2 will do the required processing and save the output in output/part-r00000 file, which you can check by using &minus;</p>
<pre class="result notranslate">
$cat output/* 
</pre>
<p>It will list down all the words along with their total counts available in all the files available in the input directory.</p>
<pre class="result notranslate">
"AS      4 
"Contribution" 1 
"Contributor" 1 
"Derivative 1
"Legal 1
"License"      1
"License");     1 
"Licensor"      1
"NOTICE”        1 
"Not      1 
"Object"        1 
"Source”        1 
"Work”    1 
"You"     1 
"Your")   1 
"[]"      1 
"control"       1 
"printed        1 
"submitted"     1 
(50%)     1 
(BIS),    1 
(C)       1 
(Don't)   1 
(ECCN)    1 
(INCLUDING      2 
(INCLUDING,     2 
.............
</pre>
<h2>Installing Hadoop in Pseudo Distributed Mode</h2>
<p>Follow the steps given below to install Hadoop 2.4.1 in pseudo distributed mode.</p>
<h3>Step 1 &minus; Setting Up Hadoop</h3>
<p>You can set Hadoop environment variables by appending the following commands to <b>~/.bashrc</b> file.</p>
<pre class="result notranslate">
export HADOOP_HOME=/usr/local/hadoop 
export HADOOP_MAPRED_HOME=$HADOOP_HOME 
export HADOOP_COMMON_HOME=$HADOOP_HOME 

export HADOOP_HDFS_HOME=$HADOOP_HOME 
export YARN_HOME=$HADOOP_HOME 
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native 
export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin 
export HADOOP_INSTALL=$HADOOP_HOME 
</pre>
<p>Now apply all the changes into the current running system.</p>
<pre class="result notranslate">
$ source ~/.bashrc 
</pre>
<h3>Step 2 &minus; Hadoop Configuration</h3>
<p>You can find all the Hadoop configuration files in the location “$HADOOP_HOME/etc/hadoop”. It is required to make changes in those configuration files according to your Hadoop infrastructure.</p>
<pre class="result notranslate">
$ cd $HADOOP_HOME/etc/hadoop
</pre>
<p>In order to develop Hadoop programs in java, you have to reset the java environment variables in <b>hadoop-env.sh</b> file by replacing <b>JAVA_HOME</b> value with the location of java in your system.</p>
<pre class="result notranslate">
export JAVA_HOME=/usr/local/jdk1.7.0_71
</pre>
<p>The following are the list of files that you have to edit to configure Hadoop. </p>
<p><b>core-site.xml</b></p>
<p>The <b>core-site.xml</b> file contains information such as the port number used for Hadoop instance, memory allocated for the file system, memory limit for storing the data, and size of Read/Write buffers.</p>
<p>Open the core-site.xml and add the following properties in between &lt;configuration&gt;, &lt;/configuration&gt; tags.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt;
      &lt;name&gt;fs.default.name&lt;/name&gt;
      &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; 
   &lt;/property&gt;
&lt;/configuration&gt;
</pre>
<p><b>hdfs-site.xml</b></p>
<p>The <b>hdfs-site.xml</b> file contains information such as the value of replication data, namenode path, and datanode paths of your local file systems. It means the place where you want to store the Hadoop infrastructure.</p>
<p>Let us assume the following data.</p>
<pre class="result notranslate">
dfs.replication (data replication value) = 1 

(In the below given path /hadoop/ is the user name. 
hadoopinfra/hdfs/namenode is the directory created by hdfs file system.) 
namenode path = //home/hadoop/hadoopinfra/hdfs/namenode 

(hadoopinfra/hdfs/datanode is the directory created by hdfs file system.) 
datanode path = //home/hadoop/hadoopinfra/hdfs/datanode 
</pre>
<p>Open this file and add the following properties in between the &lt;configuration&gt; &lt/configuration&gt; tags in this file.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt;
      &lt;name&gt;dfs.replication&lt;/name&gt;
      &lt;value&gt;1&lt;/value&gt;
   &lt;/property&gt;
    
   &lt;property&gt;
      &lt;name&gt;dfs.name.dir&lt;/name&gt;
      &lt;value&gt;file:///home/hadoop/hadoopinfra/hdfs/namenode &lt;/value&gt;
   &lt;/property&gt;
    
   &lt;property&gt;
      &lt;name&gt;dfs.data.dir&lt/name&gt; 
      &lt;value&gt;file:///home/hadoop/hadoopinfra/hdfs/datanode &lt;/value&gt; 
   &lt;/property&gt;
&lt;/configuration&gt;
</pre>
<p><b>Note</b> &minus; In the above file, all the property values are user-defined and you can make changes according to your Hadoop infrastructure.</p>
<p><b>yarn-site.xml</b></p>
<p>This file is used to configure yarn into Hadoop. Open the yarn-site.xml file and add the following properties in between the &lt;configuration&gt;, &lt;/configuration&gt; tags in this file.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt;
      &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
      &lt;value&gt;mapreduce_shuffle&lt/value&gt; 
   &lt;/property&gt;
&lt;/configuration&gt;
</pre>
<p><b>mapred-site.xml</b></p>
<p>This file is used to specify which MapReduce framework we are using. By default, Hadoop contains a template of yarn-site.xml. First of all, it is required to copy the file from <b>mapred-site.xml.template</b> to <b> mapred-site.xml</b> file using the following command.</p>
<pre class="result notranslate">
$ cp mapred-site.xml.template mapred-site.xml 
</pre>
<p>Open <b>mapred-site.xml</b> file and add the following properties in between the &lt;configuration&gt;, &lt;/configuration&gt;tags in this file.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt; 
      &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
      &lt;value&gt;yarn&lt;/value&gt;
   &lt;/property&gt;
&lt;/configuration&gt;
</pre>
<h2>Verifying Hadoop Installation</h2>
<p>The following steps are used to verify the Hadoop installation.</p>
<h3>Step 1 &minus; Name Node Setup</h3>
<p>Set up the namenode using the command “hdfs namenode -format” as follows.</p>
<pre class="result notranslate">
$ cd ~ 
$ hdfs namenode -format 
</pre>
<p>The expected result is as follows.</p>
<pre class="result notranslate">
10/24/14 21:30:55 INFO namenode.NameNode: STARTUP_MSG: 
/************************************************************ 
STARTUP_MSG: Starting NameNode 
STARTUP_MSG:   host = localhost/192.168.1.11 
STARTUP_MSG:   args = [-format] 
STARTUP_MSG:   version = 2.4.1 
...
...
10/24/14 21:30:56 INFO common.Storage: Storage directory 
/home/hadoop/hadoopinfra/hdfs/namenode has been successfully formatted. 
10/24/14 21:30:56 INFO namenode.NNStorageRetentionManager: Going to 
retain 1 images with txid >= 0 
10/24/14 21:30:56 INFO util.ExitUtil: Exiting with status 0 
10/24/14 21:30:56 INFO namenode.NameNode: SHUTDOWN_MSG: 
/************************************************************ 
SHUTDOWN_MSG: Shutting down NameNode at localhost/192.168.1.11 
************************************************************/
</pre>
<h3>Step 2 &minus; Verifying Hadoop dfs</h3>
<p>The following command is used to start dfs. Executing this command will start your Hadoop file system.</p>
<pre class="result notranslate">
$ start-dfs.sh 
</pre>
<p>The expected output is as follows &minus;</p>
<pre class="result notranslate">
10/24/14 21:37:56 
Starting namenodes on [localhost] 
localhost: starting namenode, logging to /home/hadoop/hadoop
2.4.1/logs/hadoop-hadoop-namenode-localhost.out 
localhost: starting datanode, logging to /home/hadoop/hadoop
2.4.1/logs/hadoop-hadoop-datanode-localhost.out 
Starting secondary namenodes [0.0.0.0]
</pre>
<h3>Step 3 &minus; Verifying Yarn Script</h3>
<p>The following command is used to start the yarn script. Executing this command will start your yarn daemons.</p>
<pre class="result notranslate">
$ start-yarn.sh 
</pre>
<p>The expected output as follows &minus;</p>
<pre class="result notranslate">
starting yarn daemons 
starting resourcemanager, logging to /home/hadoop/hadoop
2.4.1/logs/yarn-hadoop-resourcemanager-localhost.out 
localhost: starting nodemanager, logging to /home/hadoop/hadoop
2.4.1/logs/yarn-hadoop-nodemanager-localhost.out 
</pre>
<h3>Step 4 &minus; Accessing Hadoop on Browser</h3>
<p>The default port number to access Hadoop is 50070. Use the following url to get Hadoop services on browser.</p>
<pre class="result notranslate">
http://localhost:50070/
</pre>
<p></p>
<img src="/hadoop/images/hadoop_on_browser.jpg" alt="Accessing Hadoop on Browser" />
<h3>Step 5 &minus; Verify All Applications for Cluster</h3>
<p>The default port number to access all applications of cluster is 8088. Use the following url to visit this service.</p>
<pre class="result notranslate">
http://localhost:8088/
</pre>
<p></p>
<img src="/hadoop/images/hadoop_application_cluster.jpg" alt="Hadoop Application Cluster" />
<h1>Hadoop - HDFS Overview</h1>
<p>Hadoop File System was developed using distributed file system design. It is run on commodity hardware. Unlike other distributed systems, HDFS is highly faulttolerant and designed using low-cost hardware.</p>
<p>HDFS holds very large amount of data and provides easier access. To store such huge data, the files are stored across multiple machines. These files are stored in redundant fashion to rescue the system from possible data losses in case of failure. HDFS also makes applications available to parallel processing.</p>
<h2>Features of HDFS</h2>
<ul class="list">
<li>It is suitable for the distributed storage and processing.</li>
<li>Hadoop provides a command interface to interact with HDFS.</li>
<li>The built-in servers of namenode and datanode help users to easily check the status of cluster.</li>
<li>Streaming access to file system data.</li>
<li>HDFS provides file permissions and authentication.</li>
</ul>
<h2>HDFS Architecture</h2>
<p>Given below is the architecture of a Hadoop File System.</p>
<img src="/hadoop/images/hdfs_architecture.jpg" alt="HDFS Architecture" />
<p>HDFS follows the master-slave architecture and it has the following elements. </p>
<h3>Namenode</h3>
<p>The namenode is the commodity hardware that contains the GNU/Linux operating system and the namenode software. It is a software that can be run on commodity hardware. The system having the namenode acts as the master server and it does the following tasks &minus;</p>
<ul class="list">
<li><p>Manages the file system namespace.</p></li>
<li><p>Regulates client’s access to files.</p></li>
<li><p>It also executes file system operations such as renaming, closing, and opening files and directories.</p></li>
</ul>
<h3>Datanode</h3>
<p>The datanode is a commodity hardware having the GNU/Linux operating system and datanode software. For every node (Commodity hardware/System) in a cluster, there will be a datanode. These nodes manage the data storage of their system.</p>
<ul class="list">
<li><p>Datanodes perform read-write operations on the file systems, as per client request.</p></li>
<li><p>They also perform operations such as block creation, deletion, and replication according to the instructions of the namenode.</p></li>
</ul>
<h3>Block</h3>
<p>Generally the user data is stored in the files of HDFS. The file in a file system will be divided into one or more segments and/or stored in individual data nodes. These file segments are called as blocks. In other words, the minimum amount of data that HDFS can read or write is called a Block. The default block size is 64MB, but it can be increased as per the need to change in HDFS configuration.</p>
<h2>Goals of HDFS</h2>
<p><b>Fault detection and recovery</b> &minus; Since HDFS includes a large number of commodity hardware, failure of components is frequent. Therefore HDFS should have mechanisms for quick and automatic fault detection and recovery.</p>
<p><b>Huge datasets</b> &minus; HDFS should have hundreds of nodes per cluster to manage the applications having huge datasets.</p>
<p><b>Hardware at data</b> &minus; A requested task can be done efficiently, when the computation takes place near the data. Especially where huge datasets are involved, it reduces the network traffic and increases the throughput.</p>
<h1>Hadoop - HDFS Operations</h1>
<h2>Starting HDFS</h2>
<p>Initially you have to format the configured HDFS file system, open namenode (HDFS server), and execute the following command.</p>
<pre class="result notranslate">
$ hadoop namenode -format 
</pre>
<p>After formatting the HDFS, start the distributed file system. The following command will start the namenode as well as the data nodes as cluster.</p>
<pre class="result notranslate">
$ start-dfs.sh 
</pre>
<h2>Listing Files in HDFS</h2>
<p>After loading the information in the server, we can find the list of files in a directory, status of a file, using <b>‘ls’</b>. Given below is the syntax of <b>ls</b> that you can pass to a directory or a filename as an argument.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop fs -ls &lt;args&gt;
</pre>
<h2>Inserting Data into HDFS</h2>
<p>Assume we have data in the file called file.txt in the local system which is ought to be saved in the hdfs file system. Follow the steps given below to insert the required file in the Hadoop file system.</p>
<h3>Step 1</h3>
<p>You have to create an input directory.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop fs -mkdir /user/input 
</pre>
<h3>Step 2</h3>
<p>Transfer and store a data file from local systems to the Hadoop file system using the put command.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop fs -put /home/file.txt /user/input 
</pre>
<h3>Step 3</h3>
<p>You can verify the file using ls command.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop fs -ls /user/input 
</pre>
<h2>Retrieving Data from HDFS</h2>
<p>Assume we have a file in HDFS called <b>outfile</b>. Given below is a simple demonstration for retrieving the required file from the Hadoop file system.</p>
<h3>Step 1</h3>
<p>Initially, view the data from HDFS using <b>cat</b> command.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop fs -cat /user/output/outfile 
</pre>
<h3>Step 2</h3>
<p>Get the file from HDFS to the local file system using <b>get</b> command.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop fs -get /user/output/ /home/hadoop_tp/ 
</pre>
<h2>Shutting Down the HDFS</h2>
<p>You can shut down the HDFS by using the following command.</p>
<pre class="result notranslate">
$ stop-dfs.sh 
</pre>
<h1>Hadoop - Command Reference</h1>
<p>There are many more commands in <b>"$HADOOP_HOME/bin/hadoop fs"</b> than are demonstrated here, although these basic operations will get you started. Running ./bin/hadoop dfs with no additional arguments will list all the commands that can be run with the FsShell system. Furthermore, <b>$HADOOP_HOME/bin/hadoop fs -help </b> commandName will display a short usage summary for the operation in question, if you are stuck.</p>
<p>A table of all the operations is shown below. The following conventions are used for parameters &minus;</p>
<pre class="result notranslate">
"&lt;path&gt;" means any file or directory name. 
"&lt;path&gt;..." means one or more file or directory names. 
"&lt;file&gt;" means any filename. 
"&lt;src&gt;" and "&lt;dest&gt;" are path names in a directed operation. 
"&lt;localSrc&gt;" and "&lt;localDest&gt;" are paths as above, but on the local file system. 
</pre>
<p>All other files and path names refer to the objects inside HDFS.</p>
<table class="table table-bordered">
<tr>
<th>Sr.No</th>
<th style="text-align:center;">Command &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>-ls &lt;path&gt;</b></p>
<p>Lists the contents of the directory specified by path, showing the names, permissions, owner, size and modification date for each entry.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>-lsr &lt;path&gt;</b></p>
<p>Behaves like -ls, but recursively displays entries in all subdirectories of path.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>-du &lt;path&gt;</b></p>
<p>Shows disk usage, in bytes, for all the files which match path; filenames are reported with the full HDFS protocol prefix.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>-dus &lt;path&gt;</b></p>
<p>Like -du, but prints a summary of disk usage of all files/directories in the path.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>-mv &lt;src&gt;&lt;dest&gt;</b></p>
<p>Moves the file or directory indicated by src to dest, within HDFS.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>-cp &lt;src&gt; &lt;dest&gt;</b></p>
<p>Copies the file or directory identified by src to dest, within HDFS.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>-rm &lt;path&gt;</b></p>
<p>Removes the file or empty directory identified by path.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>-rmr &lt;path&gt;</b></p>
<p>Removes the file or directory identified by path. Recursively deletes any child entries (i.e., files or subdirectories of path).</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>-put &lt;localSrc&gt; &lt;dest&gt;</b></p>
<p>Copies the file or directory from the local file system identified by localSrc to dest within the DFS.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>-copyFromLocal &lt;localSrc&gt; &lt;dest&gt;</b></p>
<p>Identical to -put</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>-moveFromLocal &lt;localSrc&gt; &lt;dest&gt;</b></p>
<p>Copies the file or directory from the local file system identified by localSrc to dest within HDFS, and then deletes the local copy on success.</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><p><b>-get [-crc] &lt;src&gt; &lt;localDest&gt;</b></p>
<p>Copies the file or directory in HDFS identified by src to the local file system path identified by localDest.</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><p><b>-getmerge &lt;src&gt; &lt;localDest&gt;</b></p>
<p>Retrieves all files that match the path src in HDFS, and copies them to a single, merged file in the local file system identified by localDest.</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td><p><b>-cat &lt;filen-ame&gt;</b></p>
<p>Displays the contents of filename on stdout.</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td><p><b>-copyToLocal &lt;src&gt; &lt;localDest&gt;</b></p>
<p>Identical to -get</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td><p><b>-moveToLocal &lt;src&gt; &lt;localDest&gt;</b></p>
<p>Works like -get, but deletes the HDFS copy on success.</p></td>
</tr>
<tr>
<td class="ts">17</td>
<td><p><b>-mkdir &lt;path&gt;</b></p>
<p>Creates a directory named path in HDFS.</p>
<p>Creates any parent directories in path that are missing (e.g., mkdir -p in Linux).</p>   
</td>
</tr>
<tr>
<td class="ts">18</td>
<td><p><b>-setrep [-R] [-w] rep &lt;path&gt;</b></p>
<p>Sets the target replication factor for files identified by path to rep. (The actual replication factor will move toward the target over time)</p></td>
</tr>
<tr>
<td class="ts">19</td>
<td><p><b>-touchz &lt;path&gt;</b></p>
<p>Creates a file at path containing the current time as a timestamp. Fails if a file already exists at path, unless the file is already size 0.</p></td>
</tr>
<tr>
<td class="ts">20</td>
<td><p><b>-test -[ezd] &lt;path&gt;</b></p>
<p>Returns 1 if path exists; has zero length; or is a directory or 0 otherwise.</p></td>
</tr>
<tr>
<td class="ts">21</td>
<td><p><b>-stat [format] &lt;path&gt;</b></p>
<p>Prints information about path. Format is a string which accepts file size in blocks (%b), filename (%n), block size (%o), replication (%r), and modification date (%y, %Y).</p></td>
</tr>
<tr>
<td class="ts">22</td>
<td><p><b>-tail [-f] &lt;file2name&gt;</b></p>
<p>Shows the last 1KB of file on stdout.</p></td>
</tr>
<tr>
<td class="ts">23</td>
<td><p><b>-chmod [-R] mode,mode,... &lt;path&gt;...</b></p>
<p>Changes the file permissions associated with one or more objects identified by path.... Performs changes recursively with R. mode is a 3-digit octal mode, or {augo}+/-{rwxX}. Assumes if no scope is specified and does not apply an umask.</p></td>
</tr>
<tr>
<td class="ts">24</td>
<td><p><b>-chown [-R] [owner][:[group]] &lt;path&gt;...</b></p>
<p>Sets the owning user and/or group for files or directories identified by path.... Sets owner recursively if -R is specified.</p></td>
</tr>
<tr>
<td class="ts">25</td>
<td><p><b>-chgrp [-R] group &lt;path&gt;...</b></p>
<p>Sets the owning group for files or directories identified by path.... Sets group recursively if -R is specified.</p></td>
</tr>
<tr>
<td class="ts">26</td>
<td><p><b>-help &lt;cmd-name&gt;</b></p>
<p>Returns usage information for one of the commands listed above. You must omit the leading '-' character in cmd.</p></td>
</tr>
</table>
<h1>Hadoop - MapReduce</h1>
<p>MapReduce is a framework using which we can write applications to process huge amounts of data, in parallel, on large clusters of commodity hardware in a reliable manner.</p>
<h2>What is MapReduce?</h2>
<p>MapReduce is a processing technique and a program model for distributed computing based on java. The MapReduce algorithm contains two important tasks, namely Map and Reduce. Map takes a set of data and converts it into another set of data, where individual elements are broken down into tuples (key/value pairs). Secondly, reduce task, which takes the output from a map as an input and combines those data tuples into a smaller set of tuples. As the sequence of the name MapReduce implies, the reduce task is always performed after the map job.</p>
<p>The major advantage of MapReduce is that it is easy to scale data processing over multiple computing nodes. Under the MapReduce model, the data processing primitives are called mappers and reducers. Decomposing a data processing application into <i>mappers</i> and <i>reducers</i> is sometimes nontrivial. But, once we write an application in the MapReduce form, scaling the application to run over hundreds, thousands, or even tens of thousands of machines in a cluster is merely a configuration change. This simple scalability is what has attracted many programmers to use the MapReduce model.</p>
<h2>The Algorithm</h2>
<ul class="list">
<li><p>Generally MapReduce paradigm is based on sending the computer to where the data resides!</p></li>
<li><p>MapReduce program executes in three stages, namely map stage, shuffle stage, and reduce stage.</p>
<ul class="list">
<li><p><b>Map stage</b> &minus; The map or mapper’s job is to process the input data. Generally the input data is in the form of file or directory and is stored in the Hadoop file system (HDFS). The input file is passed to the mapper function line by line. The mapper processes the data and creates several small chunks of data. </p></li>
<li><p><b>Reduce stage</b> &minus; This stage is the combination of the <b> Shuffle </b> stage and the <b>Reduce</b> stage. The Reducer’s job is to process the data that comes from the mapper. After processing, it produces a new set of output, which will be stored in the HDFS.</p></li>
</ul>
</li>
<li><p>During a MapReduce job, Hadoop sends the Map and Reduce tasks to the appropriate servers in the cluster.</p></li>
<li><p>The framework manages all the details of data-passing such as issuing tasks, verifying task completion, and copying data around the cluster between the nodes.</p></li>
<li><p>Most of the computing takes place on nodes with data on local disks that reduces the network traffic.</p></li>
<li><p>After completion of the given tasks, the cluster collects and reduces the data to form an appropriate result, and sends it back to the Hadoop server.</p></li>
</ul>
<img src="/hadoop/images/mapreduce_algorithm.jpg" alt="MapReduce Algorithm" />
<h2>Inputs and Outputs (Java Perspective)</h2>
<p>The MapReduce framework operates on &lt;key, value&gt; pairs, that is, the framework views the input to the job as a set of &lt;key, value&gt; pairs and produces a set of &lt;key, value&gt; pairs as the output of the job, conceivably of different types.</p>
<p>The key and the value classes should be in serialized manner by the framework and hence, need to implement the Writable interface. Additionally, the key classes have to implement the Writable-Comparable interface to facilitate sorting by the framework. Input and Output types of a <b>MapReduce job</b> &minus; (Input) &lt;k1, v1&gt; &rarr; map &rarr; &lt;k2, v2&gt; &rarr; reduce &rarr; &lt;k3, v3&gt;(Output).</p>
<table class="table table-bordered">
<tr>
<th></th>
<th class="ts">Input</th>
<th class="ts">Output</th>
</tr>
<tr>
<th class="ts">Map</th>
<td class="ts">&lt;k1, v1&gt;</td>
<td class="ts">list (&lt;k2, v2&gt;)</td>
</tr>
<tr>
<th class="ts">Reduce</th>
<td class="ts">&lt;k2, list(v2)&gt;</td>
<td class="ts">list (&lt;k3, v3&gt;)</td>
</tr>
</table>
<h2>Terminology</h2>
<ul class="list">
<li><p><b>PayLoad</b> &minus; Applications implement the Map and the Reduce functions, and form the core of the job.</p></li>
<li><p><b>Mapper</b> &minus; Mapper maps the input key/value pairs to a set of intermediate key/value pair.</p></li>
<li><p><b>NamedNode</b> &minus; Node that manages the Hadoop Distributed File System (HDFS).</p></li>
<li><p><b>DataNode</b> &minus; Node where data is presented in advance before any processing takes place.</p></li>
<li><p><b>MasterNode</b> &minus; Node where JobTracker runs and which accepts job requests from clients.</p></li>
<li><p><b>SlaveNode</b> &minus; Node where Map and Reduce program runs.</p></li>
<li><p><b>JobTracker</b> &minus; Schedules jobs and tracks the assign jobs to Task tracker.</p></li>
<li><p><b>Task Tracker</b> &minus; Tracks the task and reports status to JobTracker. </p></li>
<li><p><b>Job</b> &minus; A program is an execution of a Mapper and Reducer across a dataset.</p></li>
<li><p><b>Task</b> &minus; An execution of a Mapper or a Reducer on a slice of data. </p></li>
<li><p><b>Task Attempt</b> &minus; A particular instance of an attempt to execute a task on a SlaveNode.</p></li>
</ul>
<h2>Example Scenario</h2>
<p>Given below is the data regarding the electrical consumption of an organization. It contains the monthly electrical consumption and the annual average for various years.</p>
<table class="table table-bordered" style="font-size:88%">
<tr>
<th></th>
<th>Jan</th>
<th>Feb</th>
<th>Mar</th>
<th>Apr</th>
<th>May</th>
<th>Jun</th>
<th>Jul</th>
<th>Aug</th>
<th>Sep</th>
<th>Oct</th>
<th>Nov</th>
<th>Dec</th>
<th>Avg</th>
</tr>
<tr>
<td>1979</td>
<td>23</td>
<td>23</td>
<td>2</td>
<td>43</td>
<td>24</td>
<td>25</td>
<td>26</td>
<td>26</td>
<td>26</td>
<td>26</td>
<td>25</td>
<td>26</td>
<td>25</td>
</tr>
<tr>
<td>1980</td>
<td>26</td>
<td>27</td>
<td>28</td>
<td>28</td>
<td>28</td>
<td>30</td>
<td>31</td>
<td>31</td>
<td>31</td>
<td>30</td>
<td>30</td>
<td>30</td>
<td>29</td>
</tr>
<tr>
<td>1981</td>
<td>31</td>
<td>32</td>
<td>32</td>
<td>32</td>
<td>33</td>
<td>34</td>
<td>35</td>
<td>36</td>
<td>36</td>
<td>34</td>
<td>34</td>
<td>34</td>
<td>34</td>
</tr>
<tr>
<td>1984</td>
<td>39</td>
<td>38</td>
<td>39</td>
<td>39</td>
<td>39</td>
<td>41</td>
<td>42</td>
<td>43</td>
<td>40</td>
<td>39</td>
<td>38</td>
<td>38</td>
<td>40</td>
</tr>
<tr>
<td>1985</td>
<td>38</td>
<td>39</td>
<td>39</td>
<td>39</td>
<td>39</td>
<td>41</td>
<td>41</td>
<td>41</td>
<td>00</td>
<td>40</td>
<td>39</td>
<td>39</td>
<td>45</td>
</tr>
</table>
<p>If the above data is given as input, we have to write applications to process it and produce results such as finding the year of maximum usage, year of minimum usage, and so on. This is a walkover for the programmers with finite number of records. They will simply write the logic to produce the required output, and pass the data to the application written.</p>
<p>But, think of the data representing the electrical consumption of all the largescale industries of a particular state, since its formation.</p>
<p>When we write applications to process such bulk data,</p>
<ul class="list">
<li><p>They will take a lot of time to execute.</p></li>
<li><p>There will be a heavy network traffic when we move data from source to network server and so on.</p></li>
</ul>
<p>To solve these problems, we have the MapReduce framework.</p>
<h3>Input Data</h3>
<p>The above data is saved as <b>sample.txt</b>and given as input. The input file looks as shown below.</p>
<pre class="result notranslate">
1979   23   23   2   43   24   25   26   26   26   26   25   26  25 
1980   26   27   28  28   28   30   31   31   31   30   30   30  29 
1981   31   32   32  32   33   34   35   36   36   34   34   34  34 
1984   39   38   39  39   39   41   42   43   40   39   38   38  40 
1985   38   39   39  39   39   41   41   41   00   40   39   39  45 
</pre>
<h3>Example Program</h3>
<p>Given below is the program to the sample data using MapReduce framework.</p>
<pre class="prettyprint notranslate">
package hadoop; 

import java.util.*; 

import java.io.IOException; 
import java.io.IOException; 

import org.apache.hadoop.fs.Path; 
import org.apache.hadoop.conf.*; 
import org.apache.hadoop.io.*; 
import org.apache.hadoop.mapred.*; 
import org.apache.hadoop.util.*; 

public class ProcessUnits {
   //Mapper class 
   public static class E_EMapper extends MapReduceBase implements 
   Mapper&lt;LongWritable ,/*Input key Type */ 
   Text,                /*Input value Type*/ 
   Text,                /*Output key Type*/ 
   IntWritable&gt;        /*Output value Type*/ 
   {
      //Map function 
      public void map(LongWritable key, Text value, 
      OutputCollector&lt;Text, IntWritable&gt; output,   
      
      Reporter reporter) throws IOException { 
         String line = value.toString(); 
         String lasttoken = null; 
         StringTokenizer s = new StringTokenizer(line,"\t"); 
         String year = s.nextToken(); 
         
         while(s.hasMoreTokens()) {
            lasttoken = s.nextToken();
         }
         int avgprice = Integer.parseInt(lasttoken); 
         output.collect(new Text(year), new IntWritable(avgprice)); 
      } 
   }
   
   //Reducer class 
   public static class E_EReduce extends MapReduceBase implements Reducer&lt; Text, IntWritable, Text, IntWritable &gt; {
   
      //Reduce function 
      public void reduce( Text key, Iterator &lt;IntWritable&gt; values, 
      OutputCollector&lt;Text, IntWritable&gt; output, Reporter reporter) throws IOException { 
         int maxavg = 30; 
         int val = Integer.MIN_VALUE; 
            
         while (values.hasNext()) { 
            if((val = values.next().get())&gt;maxavg) { 
               output.collect(key, new IntWritable(val)); 
            } 
         }
      } 
   }

   //Main function 
   public static void main(String args[])throws Exception { 
      JobConf conf = new JobConf(ProcessUnits.class); 
      
      conf.setJobName("max_eletricityunits"); 
      conf.setOutputKeyClass(Text.class);
      conf.setOutputValueClass(IntWritable.class); 
      conf.setMapperClass(E_EMapper.class); 
      conf.setCombinerClass(E_EReduce.class); 
      conf.setReducerClass(E_EReduce.class); 
      conf.setInputFormat(TextInputFormat.class); 
      conf.setOutputFormat(TextOutputFormat.class); 
      
      FileInputFormat.setInputPaths(conf, new Path(args[0])); 
      FileOutputFormat.setOutputPath(conf, new Path(args[1])); 
      
      JobClient.runJob(conf); 
   } 
} 
</pre>
<p>Save the above program as <b>ProcessUnits.java.</b> The compilation and execution of the program is explained below.</p>
<h2>Compilation and Execution of Process Units Program</h2>
<p>Let us assume we are in the home directory of a Hadoop user (e.g. /home/hadoop).</p>
<p>Follow the steps given below to compile and execute the above program.</p>
<h3>Step 1</h3>
<p>The following command is to create a directory to store the compiled java classes.</p>
<pre class="result notranslate">
$ mkdir units 
</pre>
<h3>Step 2</h3>
<p>Download <b>Hadoop-core-1.2.1.jar,</b> which is used to compile and execute the MapReduce program. Visit the following link <a target="_blank" rel="nofollow" href="http://mvnrepository.com/artifact/org.apache.hadoop/hadoop-core/1.2.1"> mvnrepository.com</a> to download the jar. Let us assume the downloaded folder is <b>/home/hadoop/.</b></p>
<h3>Step 3</h3>
<p>The following commands are used for compiling the <b>ProcessUnits.java</b> program and creating a jar for the program.</p>
<pre class="result notranslate">
$ javac -classpath hadoop-core-1.2.1.jar -d units ProcessUnits.java 
$ jar -cvf units.jar -C units/ . 
</pre>
<h3>Step 4</h3>
<p>The following command is used to create an input directory in HDFS.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop fs -mkdir input_dir 
</pre>
<h3>Step 5</h3>
<p>The following command is used to copy the input file named <b>sample.txt</b>in the input directory of HDFS.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop fs -put /home/hadoop/sample.txt input_dir 
</pre>
<h3>Step 6</h3>
<p>The following command is used to verify the files in the input directory.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop fs -ls input_dir/ 
</pre>
<h3>Step 7</h3>
<p>The following command is used to run the Eleunit_max application by taking the input files from the input directory.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop jar units.jar hadoop.ProcessUnits input_dir output_dir 
</pre>
<p>Wait for a while until the file is executed. After execution, as shown below, the output will contain the number of input splits, the number of Map tasks, the number of reducer tasks, etc.</p>
<pre class="result notranslate">
INFO mapreduce.Job: Job job_1414748220717_0002 
completed successfully 
14/10/31 06:02:52 
INFO mapreduce.Job: Counters: 49 
   File System Counters 
 
FILE: Number of bytes read = 61 
FILE: Number of bytes written = 279400 
FILE: Number of read operations = 0 
FILE: Number of large read operations = 0   
FILE: Number of write operations = 0 
HDFS: Number of bytes read = 546 
HDFS: Number of bytes written = 40 
HDFS: Number of read operations = 9 
HDFS: Number of large read operations = 0 
HDFS: Number of write operations = 2 Job Counters 


   Launched map tasks = 2  
   Launched reduce tasks = 1 
   Data-local map tasks = 2  
   Total time spent by all maps in occupied slots (ms) = 146137 
   Total time spent by all reduces in occupied slots (ms) = 441   
   Total time spent by all map tasks (ms) = 14613 
   Total time spent by all reduce tasks (ms) = 44120 
   Total vcore-seconds taken by all map tasks = 146137 
   Total vcore-seconds taken by all reduce tasks = 44120 
   Total megabyte-seconds taken by all map tasks = 149644288 
   Total megabyte-seconds taken by all reduce tasks = 45178880 
   
Map-Reduce Framework 
 
   Map input records = 5  
   Map output records = 5   
   Map output bytes = 45  
   Map output materialized bytes = 67  
   Input split bytes = 208 
   Combine input records = 5  
   Combine output records = 5 
   Reduce input groups = 5  
   Reduce shuffle bytes = 6  
   Reduce input records = 5  
   Reduce output records = 5  
   Spilled Records = 10  
   Shuffled Maps  = 2  
   Failed Shuffles = 0  
   Merged Map outputs = 2  
   GC time elapsed (ms) = 948  
   CPU time spent (ms) = 5160  
   Physical memory (bytes) snapshot = 47749120  
   Virtual memory (bytes) snapshot = 2899349504  
   Total committed heap usage (bytes) = 277684224
     
File Output Format Counters 
 
   Bytes Written = 40 
</pre>
<h3>Step 8</h3>
<p>The following command is used to verify the resultant files in the output folder.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop fs -ls output_dir/ 
</pre>
<h3>Step 9</h3>
<p>The following command is used to see the output in <b> Part-00000 </b> file. This file is generated by HDFS.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop fs -cat output_dir/part-00000 
</pre>
<p>Below is the output generated by the MapReduce program.</p>
<pre class="result notranslate">
1981    34 
1984    40 
1985    45 
</pre>
<h3>Step 10</h3>
<p>The following command is used to copy the output folder from HDFS to the local file system for analyzing.</p>
<pre class="result notranslate">
$HADOOP_HOME/bin/hadoop fs -cat output_dir/part-00000/bin/hadoop dfs get output_dir /home/hadoop 
</pre>
<h2>Important Commands</h2>
<p>All Hadoop commands are invoked by the <b>$HADOOP_HOME/bin/hadoop</b> command. Running the Hadoop script without any arguments prints the description for all commands.</p>
<p><b>Usage</b> &minus; hadoop [--config confdir] COMMAND</p>
<p>The following table lists the options available and their description.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Option &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>namenode -format</b></p>
<p>Formats the DFS filesystem.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>secondarynamenode</b></p>
<p>Runs the DFS secondary namenode.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>namenode</b></p>
<p>Runs the DFS namenode.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>datanode</b></p>
<p>Runs a DFS datanode.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>dfsadmin</b></p>
<p>Runs a DFS admin client.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>mradmin</b></p>
<p>Runs a Map-Reduce admin client.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>fsck</b></p>
<p>Runs a DFS filesystem checking utility.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>fs</b></p>
<p>Runs a generic filesystem user client.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>balancer</b></p>
<p>Runs a cluster balancing utility.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>oiv</b></p>
<p>Applies the offline fsimage viewer to an fsimage.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>fetchdt</b></p>
<p>Fetches a delegation token from the NameNode.</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><p><b>jobtracker</b></p>
<p>Runs the MapReduce job Tracker node.</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><p><b>pipes</b></p>
<p>Runs a Pipes job.</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td><p><b>tasktracker</b></p>
<p>Runs a MapReduce task Tracker node.</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td><p><b>historyserver</b></p>
<p>Runs job history servers as a standalone daemon.</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td><p><b>job</b></p>
<p>Manipulates the MapReduce jobs.</p></td>
</tr>
<tr>
<td class="ts">17</td>
<td><p><b>queue</b></p>
<p>Gets information regarding JobQueues.</p></td>
</tr>
<tr>
<td class="ts">18</td>
<td><p><b>version</b></p>
<p>Prints the version.</p></td>
</tr>
<tr>
<td class="ts">19</td>
<td><p><b>jar &lt;jar&gt;</b></p>
<p>Runs a jar file.</p></td>
</tr>
<tr>
<td class="ts">20</td>
<td><p><b>distcp &lt;srcurl&gt; &lt;desturl&gt;</b></p>
<p>Copies file or directories recursively.</p></td>
</tr>
<tr>
<td class="ts">21</td>
<td><p><b>distcp2 &lt;srcurl&gt; &lt;desturl&gt;</b></p>
<p>DistCp version 2.</p></td>
</tr>
<tr>
<td class="ts">22</td>
<td><p><b>archive -archiveName NAME -p &lt;parent path&gt; &lt;src&gt;* &lt;dest&gt;</b></p>
<p>Creates a hadoop archive.</p></td>
</tr>
<tr>
<td class="ts">23</td>
<td><p><b>classpath</b></p>
<p>Prints the class path needed to get the Hadoop jar and the required libraries.</p></td>
</tr>
<tr>
<td class="ts">24</td>
<td><p><b>daemonlog</b></p>
<p>Get/Set the log level for each daemon</p></td>
</tr>
</table> 
<h2>How to Interact with MapReduce Jobs</h2>
<p>Usage &minus; hadoop job [GENERIC_OPTIONS]</p>
<p>The following are the Generic Options available in a Hadoop job.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">GENERIC_OPTION &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>-submit &lt;job-file&gt;</b></p>
<p>Submits the job.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>-status &lt;job-id&gt;</b></p>
<p>Prints the map and reduce completion percentage and all job counters.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>-counter &lt;job-id&gt; &lt;group-name&gt; &lt;countername&gt;</b></p>
<p>Prints the counter value.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>-kill &lt;job-id&gt;</b></p>
<p>Kills the job.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>-events &lt;job-id&gt; &lt;fromevent-#&gt; &lt;#-of-events&gt;</b></p>
<p>Prints the events' details received by jobtracker for the given range.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>-history [all] &lt;jobOutputDir&gt; - history &lt; jobOutputDir&gt;</b></p>
<p>Prints job details, failed and killed tip details. More details about the job such as successful tasks and task attempts made for each task can be viewed by specifying the [all] option.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>-list[all]</b></p>
<p>Displays all jobs. -list displays only jobs which are yet to complete.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>-kill-task &lt;task-id&gt;</b></p>
<p>Kills the task. Killed tasks are NOT counted against failed attempts.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>-fail-task &lt;task-id&gt;</b></p>
<p>Fails the task. Failed tasks are counted against failed attempts.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>-set-priority &lt;job-id&gt; &lt;priority&gt;</b></p>
<p>Changes the priority of the job. Allowed priority values are VERY_HIGH, HIGH, NORMAL, LOW, VERY_LOW</p></td>
</tr>
</table>
<h3>To see the status of job</h3>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop job -status &lt;JOB-ID&gt; 
e.g. 
$ $HADOOP_HOME/bin/hadoop job -status job_201310191043_0004 
</pre>
<h3>To see the history of job output-dir</h3>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop job -history &lt;DIR-NAME&gt; 
e.g. 
$ $HADOOP_HOME/bin/hadoop job -history /user/expert/output 
</pre>
<h3>To kill the job</h3>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop job -kill &lt;JOB-ID&gt; 
e.g. 
$ $HADOOP_HOME/bin/hadoop job -kill job_201310191043_0004 
</pre>
<h1>Hadoop - Streaming</h1>
<p>Hadoop streaming is a utility that comes with the Hadoop distribution. This utility allows you to create and run Map/Reduce jobs with any executable or script as the mapper and/or the reducer.</p>
<h2>Example Using Python</h2>
<p>For Hadoop streaming, we are considering the word-count problem. Any job in Hadoop must have two phases: mapper and reducer. We have written codes for the mapper and the reducer in python script to run it under Hadoop. One can also write the same in Perl and Ruby.</p>
<h3>Mapper Phase Code</h3>
<pre class="result notranslate">
!/usr/bin/python

import sys

# Input takes from standard input for myline in sys.stdin: 
   # Remove whitespace either side 
   myline = myline.strip() 

   # Break the line into words 
   words = myline.split() 

   # Iterate the words list
   for myword in words:
      # Write the results to standard output 
      print '%s\t%s' % (myword, 1)
</pre>
<p>Make sure this file has execution permission (chmod +x /home/ expert/hadoop-1.2.1/mapper.py).</p>
<h3>Reducer Phase Code</h3>
<pre class="result notranslate">
#!/usr/bin/python

from operator import itemgetter 
import sys 

current_word = ""
current_count = 0 
word = "" 

# Input takes from standard input for myline in sys.stdin: 
   # Remove whitespace either side 
   myline = myline.strip() 

   # Split the input we got from mapper.py word, 
   count = myline.split('\t', 1) 

   # Convert count variable to integer 
   try: 
      count = int(count) 

   except ValueError: 
      # Count was not a number, so silently ignore this line continue

   if current_word == word: 
   current_count += count 
   else: 
      if current_word: 
         # Write result to standard output print '%s\t%s' % (current_word, current_count) 
   
      current_count = count
      current_word = word

# Do not forget to output the last word if needed! 
if current_word == word: 
   print '%s\t%s' % (current_word, current_count)
</pre>
<p>Save the mapper and reducer codes in mapper.py and reducer.py in Hadoop home directory. Make sure these files have execution permission (chmod +x mapper.py and chmod +x reducer.py). As python is indentation sensitive so the same code can be download from the below link.</p>
<h2>Execution of WordCount Program</h2>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop jar contrib/streaming/hadoop-streaming-1.
2.1.jar \
   -input input_dirs \ 
   -output output_dir \ 
   -mapper &lt;path/mapper.py \ 
   -reducer &lt;path/reducer.py
</pre>
<p>Where "\" is used for line continuation for clear readability.</p>
<h3>For Example,</h3>
<pre class="result notranslate">
./bin/hadoop jar contrib/streaming/hadoop-streaming-1.2.1.jar -input myinput -output myoutput -mapper /home/expert/hadoop-1.2.1/mapper.py -reducer /home/expert/hadoop-1.2.1/reducer.py
</pre>
<h2>How Streaming Works</h2>
<p>In the above example, both the mapper and the reducer are python scripts that read the input from standard input and emit the output to standard output. The utility will create a Map/Reduce job, submit the job to an appropriate cluster, and monitor the progress of the job until it completes.</p>
<p>When a script is specified for mappers, each mapper task will launch the script as a separate process when the mapper is initialized. As the mapper task runs, it converts its inputs into lines and feed the lines to the standard input (STDIN) of the process. In the meantime, the mapper collects the line-oriented outputs from the standard output (STDOUT) of the process and converts each line into a key/value pair, which is collected as the output of the mapper. By default, the prefix of a line up to the first tab character is the key and the rest of the line (excluding the tab character) will be the value. If there is no tab character in the line, then the entire line is considered as the key and the value is null. However, this can be customized, as per one need.</p>
<p>When a script is specified for reducers, each reducer task will launch the script as a separate process, then the reducer is initialized. As the reducer task runs, it converts its input key/values pairs into lines and feeds the lines to the standard input (STDIN) of the process. In the meantime, the reducer collects the line-oriented outputs from the standard output (STDOUT) of the process, converts each line into a key/value pair, which is collected as the output of the reducer. By default, the prefix of a line up to the first tab character is the key and the rest of the line (excluding the tab character) is the value. However, this can be customized as per specific requirements.</p>
<h2>Important Commands</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:30%">Parameters</th>
<th style="text-align:center;">Options</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td>-input directory/file-name</td>
<td style="vertical-align:middle;">Required</td>
<td style="vertical-align:middle;">Input location for mapper.</td>
</tr>
<tr>
<td>-output directory-name</td>
<td style="vertical-align:middle;">Required</td>
<td style="vertical-align:middle;">Output location for reducer.</td>
</tr>
<tr>
<td>-mapper executable or script or JavaClassName</td>
<td style="vertical-align:middle;">Required</td>
<td style="vertical-align:middle;">Mapper executable.</td>
</tr>
<tr>
<td>-reducer executable or script or JavaClassName</td>
<td style="vertical-align:middle;">Required</td>
<td style="vertical-align:middle;">Reducer executable.</td>
</tr>
<tr>
<td style="vertical-align:middle;">-file file-name</td>
<td style="vertical-align:middle;">Optional</td>
<td>Makes the mapper, reducer, or combiner executable available locally on the compute nodes.</td>
</tr>
<tr>
<td style="vertical-align:middle;">-inputformat JavaClassName</td>
<td style="vertical-align:middle;">Optional</td>
<td>Class you supply should return key/value pairs of Text class. If not specified, TextInputFormat is used as the default.</td>
</tr>
<tr>
<td style="vertical-align:middle;">-outputformat JavaClassName</td>
<td style="vertical-align:middle;">Optional</td>
<td>Class you supply should take key/value pairs of Text class. If not specified, TextOutputformat is used as the default.</td>
</tr>
<tr>
<td>-partitioner JavaClassName</td>
<td style="vertical-align:middle;">Optional</td>
<td>Class that determines which reduce a key is sent to.</td>
</tr>
<tr>
<td>-combiner streamingCommand or JavaClassName</td>
<td style="vertical-align:middle;">Optional</td>
<td style="vertical-align:middle;">Combiner executable for map output.</td>
</tr>
<tr>
<td style="vertical-align:middle;">-cmdenv name=value</td>
<td style="vertical-align:middle;">Optional</td>
<td>Passes the environment variable to streaming commands.</td>
</tr>
<tr>
<td style="vertical-align:middle;">-inputreader</td>
<td style="vertical-align:middle;">Optional</td>
<td>For backwards-compatibility: specifies a record reader class (instead of an input format class).</td>
</tr>
<tr>
<td>-verbose</td>
<td>Optional</td>
<td>Verbose output.</td>
</tr>
<tr>
<td style="vertical-align:middle;">-lazyOutput</td>
<td style="vertical-align:middle;">Optional</td>
<td>Creates output lazily. For example, if the output format is based on FileOutputFormat, the output file is created only on the first call to output.collect (or Context.write).</td>
</tr>
<tr>
<td>-numReduceTasks</td>
<td>Optional</td>
<td>Specifies the number of reducers.</td>
</tr>
<tr>
<td>-mapdebug</td>
<td>Optional</td>
<td>Script to call when map task fails.</td>
</tr>
<tr>
<td>-reducedebug</td>
<td>Optional</td>
<td>Script to call when reduce task fails.</td>
</tr>
</table>
<h1>Hadoop - Multi-Node Cluster</h1>
<p>This chapter explains the setup of the Hadoop Multi-Node cluster on a distributed environment.</p>
<p>As the whole cluster cannot be demonstrated, we are explaining the Hadoop cluster environment using three systems (one master and two slaves); given below are their IP addresses.</p>
<ul class="list">
<li>Hadoop Master: 192.168.1.15 (hadoop-master)</li>
<li>Hadoop Slave: 192.168.1.16 (hadoop-slave-1)</li>
<li>Hadoop Slave: 192.168.1.17 (hadoop-slave-2)</li>
</ul>
<p>Follow the steps given below to have Hadoop Multi-Node cluster setup.</p>
<h2>Installing Java</h2>
<p>Java is the main prerequisite for Hadoop. First of all, you should verify the existence of java in your system using “java -version”. The syntax of java version command is given below.</p>
<pre class="result notranslate">
$ java -version
</pre>
<p>If everything works fine it will give you the following output.</p>
<pre class="result notranslate">
java version "1.7.0_71" 
Java(TM) SE Runtime Environment (build 1.7.0_71-b13) 
Java HotSpot(TM) Client VM (build 25.0-b02, mixed mode)
</pre>
<p>If java is not installed in your system, then follow the given steps for installing java.</p>
<h3>Step 1</h3>
<p>Download java (JDK &lt;latest version&gt; - X64.tar.gz) by visiting the following link <a href=" https://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" rel="nofollow" target="_blank">www.oracle.com</a></p>
<p>Then <b>jdk-7u71-linux-x64.tar.gz</b> will be downloaded into your system.</p>
<h3>Step 2</h3>
<p>Generally you will find the downloaded java file in Downloads folder. Verify it and extract the <b>jdk-7u71-linux-x64.gz</b> file using the following commands.</p>
<pre class="result notranslate">
$ cd Downloads/
$ ls
jdk-7u71-Linux-x64.gz

$ tar zxf jdk-7u71-Linux-x64.gz
$ ls
jdk1.7.0_71 jdk-7u71-Linux-x64.gz
</pre>
<h3>Step 3</h3>
<p>To make java available to all the users, you have to move it to the location “/usr/local/”. Open the root, and type the following commands.</p>
<pre class="result notranslate">
$ su
password:
# mv jdk1.7.0_71 /usr/local/
# exit
</pre>
<h3>Step 4</h3>
<p>For setting up <b>PATH</b> and <b>JAVA_HOME</b> variables, add the following commands to <b>~/.bashrc</b> file.</p>
<pre class="result notranslate">
export JAVA_HOME=/usr/local/jdk1.7.0_71
export PATH=PATH:$JAVA_HOME/bin
</pre>
<p>Now verify the <b>java -version</b> command from the terminal as explained above. Follow the above process and install java in all your cluster nodes.</p>
<h2>Creating User Account</h2>
<p>Create a system user account on both master and slave systems to use the Hadoop installation.</p>
<pre class="result notranslate">
# useradd hadoop 
# passwd hadoop
</pre>
<h2>Mapping the nodes</h2>
<p>You have to edit <b>hosts</b> file in <b>/etc/</b> folder on all nodes, specify the IP address of each system followed by their host names.</p>
<pre class="result notranslate">
# vi /etc/hosts
enter the following lines in the /etc/hosts file.

192.168.1.109 hadoop-master 
192.168.1.145 hadoop-slave-1 
192.168.56.1 hadoop-slave-2
</pre>
<h2>Configuring Key Based Login</h2>
<p>Setup ssh in every node such that they can communicate with one another without any prompt for password.</p>
<pre class="result notranslate">
# su hadoop 
$ ssh-keygen -t rsa 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub tutorialspoint@hadoop-master 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop_tp1@hadoop-slave-1 
$ ssh-copy-id -i ~/.ssh/id_rsa.pub hadoop_tp2@hadoop-slave-2 
$ chmod 0600 ~/.ssh/authorized_keys 
$ exit
</pre>
<h2>Installing Hadoop</h2>
<p>In the Master server, download and install Hadoop using the following commands.</p>
<pre class="result notranslate">
# mkdir /opt/hadoop 
# cd /opt/hadoop/ 
# wget http://apache.mesi.com.ar/hadoop/common/hadoop-1.2.1/hadoop-1.2.0.tar.gz 
# tar -xzf hadoop-1.2.0.tar.gz 
# mv hadoop-1.2.0 hadoop
# chown -R hadoop /opt/hadoop 
# cd /opt/hadoop/hadoop/
</pre>
<h2>Configuring Hadoop</h2>
<p>You have to configure Hadoop server by making the following changes as given below.</p>
<h3>core-site.xml</h3>
<p>Open the <b>core-site.xml</b> file and edit it as shown below.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt; 
      &lt;name&gt;fs.default.name&lt;/name&gt; 
      &lt;value&gt;hdfs://hadoop-master:9000/&lt;/value&gt; 
   &lt;/property&gt; 
   &lt;property&gt; 
      &lt;name&gt;dfs.permissions&lt;/name&gt; 
      &lt;value&gt;false&lt;/value&gt; 
   &lt;/property&gt; 
&lt;/configuration&gt;
</pre>
<h3>hdfs-site.xml</h3>
<p>Open the <b>hdfs-site.xml</b> file and edit it as shown below.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt; 
      &lt;name&gt;dfs.data.dir&lt;/name&gt; 
      &lt;value&gt;/opt/hadoop/hadoop/dfs/name/data&lt;/value&gt; 
      &lt;final&gt;true&lt;/final&gt; 
   &lt;/property&gt; 

   &lt;property&gt; 
      &lt;name&gt;dfs.name.dir&lt;/name&gt; 
      &lt;value&gt;/opt/hadoop/hadoop/dfs/name&lt;/value&gt; 
      &lt;final&gt;true&lt;/final&gt; 
   &lt;/property&gt; 

   &lt;property&gt; 
      &lt;name&gt;dfs.replication&lt;/name&gt; 
      &lt;value&gt;1&lt;/value&gt; 
   &lt;/property&gt; 
&lt;/configuration&gt;
</pre>
<h3>mapred-site.xml</h3>
<p>Open the <b>mapred-site.xml</b> file and edit it as shown below.</p>
<pre class="result notranslate">
&lt;configuration&gt;
   &lt;property&gt; 
      &lt;name&gt;mapred.job.tracker&lt;/name&gt; 
      &lt;value&gt;hadoop-master:9001&lt;/value&gt; 
   &lt;/property&gt; 
&lt;/configuration&gt;
</pre>
<h3>hadoop-env.sh</h3>
<p>Open the <b>hadoop-env.sh</b> file and edit JAVA_HOME, HADOOP_CONF_DIR, and HADOOP_OPTS as shown below.</p>
<p><b>Note</b> &minus; Set the JAVA_HOME as per your system configuration.</p>
<pre class="result notranslate">
export JAVA_HOME=/opt/jdk1.7.0_17
export HADOOP_OPTS=-Djava.net.preferIPv4Stack=true
export HADOOP_CONF_DIR=/opt/hadoop/hadoop/conf
</pre>
<h2>Installing Hadoop on Slave Servers</h2>
<p>Install Hadoop on all the slave servers by following the given commands.</p>
<pre class="result notranslate">
# su hadoop 
$ cd /opt/hadoop 
$ scp -r hadoop hadoop-slave-1:/opt/hadoop 
$ scp -r hadoop hadoop-slave-2:/opt/hadoop
</pre>
<h2>Configuring Hadoop on Master Server</h2>
<p>Open the master server and configure it by following the given commands.</p>
<pre class="result notranslate">
# su hadoop 
$ cd /opt/hadoop/hadoop
</pre>
<h3>Configuring Master Node</h3>
<pre class="result notranslate">
$ vi etc/hadoop/masters

hadoop-master
</pre>
<h3>Configuring Slave Node</h3>
<pre class="result notranslate">
$ vi etc/hadoop/slaves

hadoop-slave-1 
hadoop-slave-2
</pre>
<h3>Format Name Node on Hadoop Master</h3>
<pre class="result notranslate">
# su hadoop 
$ cd /opt/hadoop/hadoop 
$ bin/hadoop namenode –format
11/10/14 10:58:07 INFO namenode.NameNode: STARTUP_MSG:
/************************************************************ 
STARTUP_MSG: Starting NameNode 
STARTUP_MSG: host = hadoop-master/192.168.1.109 
STARTUP_MSG: args = [-format] 
STARTUP_MSG: version = 1.2.0 
STARTUP_MSG: build = https://svn.apache.org/repos/asf/hadoop/common/branches/branch-1.2 -r 1479473;
compiled by 'hortonfo' on Mon May 6 06:59:37 UTC 2013 
STARTUP_MSG: java = 1.7.0_71 

************************************************************/
11/10/14 10:58:08 INFO util.GSet: Computing capacity for map BlocksMap
editlog=/opt/hadoop/hadoop/dfs/name/current/edits
………………………………………………….
………………………………………………….
…………………………………………………. 
11/10/14 10:58:08 INFO common.Storage: Storage directory 
/opt/hadoop/hadoop/dfs/name has been successfully formatted.
11/10/14 10:58:08 INFO namenode.NameNode: 
SHUTDOWN_MSG:
/************************************************************
SHUTDOWN_MSG: Shutting down NameNode at hadoop-master/192.168.1.15
************************************************************/
</pre>
<h2>Starting Hadoop Services</h2>
<p>The following command is to start all the Hadoop services on the Hadoop-Master.</p>
<pre class="result notranslate">
$ cd $HADOOP_HOME/sbin
$ start-all.sh
</pre>
<h2>Adding a New DataNode in the Hadoop Cluster</h2>
<p>Given below are the steps to be followed for adding new nodes to a Hadoop cluster.</p>
<h3>Networking</h3>
<p>Add new nodes to an existing Hadoop cluster with some appropriate network configuration. Assume the following network configuration.</p>
<p>For New node Configuration &minus;</p>
<pre class="result notranslate">
IP address : 192.168.1.103 
netmask : 255.255.255.0
hostname : slave3.in
</pre>
<h2>Adding User and SSH Access</h2>
<h3>Add a User</h3>
<p>On a new node, add "hadoop" user and set password of Hadoop user to "hadoop123" or anything you want by using the following commands.</p>
<pre class="result notranslate">
useradd hadoop
passwd hadoop
</pre>
<p>Setup Password less connectivity from master to new slave.</p>
<h3>Execute the following on the master</h3>
<pre class="result notranslate">
mkdir -p $HOME/.ssh 
chmod 700 $HOME/.ssh 
ssh-keygen -t rsa -P '' -f $HOME/.ssh/id_rsa 
cat $HOME/.ssh/id_rsa.pub &gt;&gt; $HOME/.ssh/authorized_keys 
chmod 644 $HOME/.ssh/authorized_keys
Copy the public key to new slave node in hadoop user $HOME directory
scp $HOME/.ssh/id_rsa.pub hadoop@192.168.1.103:/home/hadoop/
</pre>
<h3>Execute the following on the slaves</h3>
<p>Login to hadoop. If not, login to hadoop user.</p>
<pre class="result notranslate">
su hadoop ssh -X hadoop@192.168.1.103
</pre>
<p>Copy the content of public key into file <b>"$HOME/.ssh/authorized_keys"</b> and then change the permission for the same by executing the following commands.</p>
<pre class="result notranslate">
cd $HOME
mkdir -p $HOME/.ssh 
chmod 700 $HOME/.ssh
cat id_rsa.pub &gt;&gt;$HOME/.ssh/authorized_keys 
chmod 644 $HOME/.ssh/authorized_keys
</pre>
<p>Check ssh login from the master machine. Now check if you can ssh to the new node without a password from the master.</p>
<pre class="result notranslate">
ssh hadoop@192.168.1.103 or hadoop@slave3
</pre>
<h2>Set Hostname of New Node</h2>
<p>You can set hostname in file <b>/etc/sysconfig/network</b></p>
<pre class="result notranslate">
On new slave3 machine

NETWORKING = yes 
HOSTNAME = slave3.in
</pre>
<p>To make the changes effective, either restart the machine or run hostname command to a new machine with the respective hostname (restart is a good option).</p>
<p>On slave3 node machine &minus;</p>
<p>hostname slave3.in</p>
<p>Update <b>/etc/hosts</b> on all machines of the cluster with the following lines &minus;</p>
<pre class="result notranslate">
192.168.1.102 slave3.in slave3
</pre>
<p>Now try to ping the machine with hostnames to check whether it is resolving to IP or not.</p>
<p>On new node machine &minus;</p>
<pre class="result notranslate">
ping master.in
</pre>
<h2>Start the DataNode on New Node</h2>
<p>Start the datanode daemon manually using <b>$HADOOP_HOME/bin/hadoop-daemon.sh script</b>. It will automatically contact the master (NameNode) and join the cluster. We should also add the new node to the conf/slaves file in the master server. The script-based commands will recognize the new node.</p>
<h3>Login to new node</h3>
<pre class="result notranslate">
su hadoop or ssh -X hadoop@192.168.1.103
</pre>
<h3>Start HDFS on a newly added slave node by using the following command</h3>
<pre class="result notranslate">
./bin/hadoop-daemon.sh start datanode
</pre>
<h3>Check the output of jps command on a new node. It looks as follows.</h3>
<pre class="result notranslate">
$ jps
7141 DataNode
10312 Jps
</pre>
<h2>Removing a DataNode from the Hadoop Cluster</h2>
<p>We can remove a node from a cluster on the fly, while it is running, without any data loss. HDFS provides a decommissioning feature, which ensures that removing a node is performed safely. To use it, follow the steps as given below &minus;</p>
<h3>Step 1 &minus; Login to master</h3>
<p>Login to master machine user where Hadoop is installed.</p>
<pre class="result notranslate">
$ su hadoop
</pre>
<h3>Step 2 &minus; Change cluster configuration</h3>
<p>An exclude file must be configured before starting the cluster. Add a key named dfs.hosts.exclude to our <b>$HADOOP_HOME/etc/hadoop/hdfs-site.xml</b> file. The value associated with this key provides the full path to a file on the NameNode's local file system which contains a list of machines which are not permitted to connect to HDFS.</p>
<p>For example, add these lines to <b>etc/hadoop/hdfs-site.xml</b> file.</p>
<pre class="result notranslate">
&lt;property&gt; 
   &lt;name&gt;dfs.hosts.exclude&lt;/name&gt; 
   &lt;value&gt;/home/hadoop/hadoop-1.2.1/hdfs_exclude.txt&lt;/value&gt; 
   &lt;description&gt;DFS exclude&lt;/description&gt; 
&lt;/property&gt;
</pre>
<h3>Step 3 &minus; Determine hosts to decommission</h3>
<p>Each machine to be decommissioned should be added to the file identified by the hdfs_exclude.txt, one domain name per line. This will prevent them from connecting to the NameNode. Content of the <b>"/home/hadoop/hadoop-1.2.1/hdfs_exclude.txt"</b> file is shown below, if you want to remove DataNode2.</p>
<pre class="result notranslate">
slave2.in
</pre>
<h3>Step 4 &minus; Force configuration reload</h3>
<p>Run the command <b>"$HADOOP_HOME/bin/hadoop dfsadmin -refreshNodes"</b> without the quotes.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop dfsadmin -refreshNodes
</pre>
<p>This will force the NameNode to re-read its configuration, including the newly updated ‘excludes’ file. It will decommission the nodes over a period of time, allowing time for each node's blocks to be replicated onto machines which are scheduled to remain active.</p>
<p>On <b>slave2.in</b>, check the jps command output. After some time, you will see the DataNode process is shutdown automatically.</p>
<h3>Step 5 &minus; Shutdown nodes</h3>
<p>After the decommission process has been completed, the decommissioned hardware can be safely shut down for maintenance. Run the report command to dfsadmin to check the status of decommission. The following command will describe the status of the decommission node and the connected nodes to the cluster.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop dfsadmin -report
</pre>
<h3>Step 6 &minus; Edit excludes file again</h3>
<p>Once the machines have been decommissioned, they can be removed from the ‘excludes’ file. Running <b>"$HADOOP_HOME/bin/hadoop dfsadmin -refreshNodes"</b> again will read the excludes file back into the NameNode; allowing the DataNodes to rejoin the cluster after the maintenance has been completed, or additional capacity is needed in the cluster again, etc.</p>
<p><b>Special Note</b> &minus; If the above process is followed and the tasktracker process is still running on the node, it needs to be shut down. One way is to disconnect the machine as we did in the above steps. The Master will recognize the process automatically and will declare as dead. There is no need to follow the same process for removing the tasktracker because it is NOT much crucial as compared to the DataNode. DataNode contains the data that you want to remove safely without any loss of data.</p>
<p>The tasktracker can be run/shutdown on the fly by the following command at any point of time.</p>
<pre class="result notranslate">
$ $HADOOP_HOME/bin/hadoop-daemon.sh stop tasktracker
$HADOOP_HOME/bin/hadoop-daemon.sh start tasktracker
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/hadoop/hadoop_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/hadoop/hadoop_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
