<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Puppet - Coding Style</title>
<meta charset="utf-8">
<meta name="description" content="Puppet - Coding Style - In Puppet, the coding style defines all the standards which one needs to follow while trying to convert the infrastructure on the machine configuration into a c"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/puppet/puppet_coding_style.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#FFAD1B;
}
a.demo {
    background:#FFAD1B;
}
li.heading {
    background:#FFAD1B;
}
.course-box{background:#FFAD1B}
.home-intro-sub p{color:#FFAD1B}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/puppet/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/puppet/images/puppet-mini-logo.jpg" alt="Puppet Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Puppet Tutorial</li>
<li><a href="/puppet/index.htm">Puppet - Home</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Basic Puppet</li>
<li><a href="/puppet/puppet_overview.htm">Puppet - Overview</a></li>
<li><a href="/puppet/puppet_architecture.htm">Puppet - Architecture</a></li>
<li><a href="/puppet/puppet_installation.htm">Puppet - Installation</a></li>
<li><a href="/puppet/puppet_configuration.htm">Puppet - Configuration</a></li>
<li><a href="/puppet/puppet_environment_conf.htm">Puppet - Environment Conf</a></li>
<li><a href="/puppet/puppet_master.htm">Puppet - Master</a></li>
<li><a href="/puppet/puppet_agent_setup.htm">Puppet - Agent Setup</a></li>
<li><a href="/puppet/puppet_ssl_sign_certificate_setup.htm">Puppet - SSL Sign Certificate Setup</a></li>
<li><a href="/puppet/puppet_installing_configuring_r10k.htm">Installing &amp; Configuring r10K</a></li>
<li><a href="/puppet/puppet_validating_setup.htm">Puppet - Validating Setup</a></li>
<li><a href="/puppet/puppet_coding_style.htm">Puppet - Coding Style</a></li>
<li><a href="/puppet/puppet_manifest_files.htm">Puppet - Manifest Files</a></li>
<li><a href="/puppet/puppet_module.htm">Puppet - Module</a></li>
<li><a href="/puppet/puppet_file_server.htm">Puppet - File Server</a></li>
<li><a href="/puppet/puppet_facter_facts.htm">Puppet - Facter &amp; Facts</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Advanced Puppet</li>
<li><a href="/puppet/puppet_resource.htm">Puppet - Resource</a></li>
<li><a href="/puppet/puppet_resource_abstraction_layer.htm">Puppet - Resource Abstraction Layer</a></li>
<li><a href="/puppet/puppet_template.htm">Puppet - Template</a></li>
<li><a href="/puppet/puppet_classes.htm">Puppet - Classes</a></li>
<li><a href="/puppet/puppet_function.htm">Puppet - Function</a></li>
<li><a href="/puppet/puppet_custom_functions.htm">Puppet - Custom Functions</a></li>
<li><a href="/puppet/puppet_environment.htm">Puppet - Environment</a></li>
<li><a href="/puppet/puppet_type_provider.htm">Puppet - Type &amp; Provider</a></li>
<li><a href="/puppet/puppet_restful_api.htm">Puppet - RESTful API</a></li>
<li><a href="/puppet/puppet_live_project.htm">Puppet - Live Project</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Puppet Useful Resources</li>
<li><a href="/puppet/puppet_quick_guide.htm">Puppet - Quick Guide</a></li>
<li><a href="/puppet/puppet_useful_resources.htm">Puppet - Useful Resources</a></li>
<li><a href="/puppet/puppet_discussion.htm">Puppet - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Puppet - Coding Style</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/puppet/puppet_validating_setup.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/puppet/puppet_manifest_files.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>In Puppet, the coding style defines all the standards which one needs to follow while trying to convert the infrastructure on the machine configuration into a code. Puppet works and performs all its defined tasks using resources.</p>
<p>Puppet’s language definition helps in specifying all the resources in a structured way, which is required to manage any target machine that needs to be managed. Puppet uses Ruby as its encoding language, which has multiple inbuilt features that makes it very easy to get things done with a simple configuration on the code side.</p>
<h2>Fundamental Units</h2>
<p>Puppet uses multiple fundamental coding styles which is easy to understand and manage. Following is a list of few.</p>
<h3>Resources</h3>
<p>In Puppet, resources are known as fundamental modeling unit which are used to manage or modify any target system. Resources cover all the aspects of a system such as file, service, and package. Puppet comes with an in-built capability wherein it allows the users or developers to develop custom resources, which help in managing any particular unit of a machine</p>
<p>In Puppet, all the resources are aggregated together either by using <b>“define”</b> or <b>“classes”</b>. These aggregation features help in organizing a module. Following is a sample resource which consists of multiple types, a title, and a list of attributes with which Puppet can support multiple attributes. Each resource in Puppet has its own default value, which could be overridden when required.</p>
<h3>Sample Puppet Resource for File</h3>
<p>In the following command, we are trying to specify a permission for a particular file.</p>
<pre class="prettyprint notranslate">
file {  
   '/etc/passwd': 
   owner =&gt; superuser, 
   group =&gt; superuser, 
   mode =&gt; 644, 
}
</pre>
<p>Whenever the above command gets executed on any machine, it will verify that the passwd file in the system is configured as described. The file before: colon is the title of resource, which can be referred as resource in other parts of Puppet configuration.</p>
<h3>Specifying Local Name in Addition to the Title</h3>
<pre class="prettyprint notranslate">
file { 'sshdconfig': 
   name =&gt; $operaSystem ? { 
      solaris =&gt; '/usr/local/etc/ssh/sshd_config', 
      default =&gt; '/etc/ssh/sshd_config', 
   }, 
   owner =&gt; superuser, 
   group =&gt; superuser, 
   mode =&gt; 644, 
}
</pre>
<p>By using the title, which is always the same it is very easy to refer file resource in configuration without having to repeat the OS related logic.</p>
<p>Another example could be using a service that depends on a file.</p>
<pre class="prettyprint notranslate">
service { 'sshd': 
   subscribe =&gt; File[sshdconfig], 
} 
</pre>
<p>With this dependency, the <b>sshd</b> service will always restart once the <b>sshdconfig</b> file changes. The point to be remember here is <b>File[sshdconfig]</b> is a declaration as File as in lower case but if we change it to <b>FILE[sshdconfig]</b> then it would have been a reference.</p>
<p>One fundamental point that one needs to keep in mind while declaring a resource is, it can be declared only once per config file. Repeating declaration of the same resource more than once will cause an error. Through this fundamental concept, Puppet makes sure that the configuration is well modeled.</p>
<p>We even have the capability to manage resource dependency which helps is managing multiple relationships.</p>
<pre class="prettyprint notranslate">
service { 'sshd': 
   require =&gt; File['sshdconfig', 'sshconfig', 'authorized_keys']
}   
</pre>
<h2>Metaparameters</h2>
<p>Metaparameters are known as global parameters in Puppet. One of the key features of metaparameter is, it works with any type of resource in Puppet.</p>
<h3>Resource Default</h3>
<p>When one needs to define a default resource attribute value, Puppet provides a set of syntax to archive it, using a capitalized resource specification that has no title.</p>
<p>For example, if we want to set the default path of all the executable it can be done with the following command.</p>
<pre class="prettyprint notranslate">
Exec { path =&gt; '/usr/bin:/bin:/usr/sbin:/sbin' } 
exec { 'echo Testing mataparamaters.': } 
</pre>
<p>In the above command, the first statement Exec will set the default value for exec resource. Exec resource requires a fully qualified path or a path which looks like an executable. With this, one can define a single default path for the entire configuration. Defaults work with any resource type in Puppet.</p>
<p>Defaults are not global values, however, they only affect the scope in which they are defined or the very next variable to it. If one wants to define <b>default</b> for a complete configuration, then we define the <b>default</b> and the class in the very next section.</p>
<h2>Resource Collections</h2>
<p>Aggregation is method of collecting things together. Puppet supports a very powerful concept of aggregation. In Puppet, aggregation is used for grouping resource which is the fundamental unit of Puppet together. This concept of aggregation in Puppet is achieved by using two powerful methods known as <b>classes</b> and <b>definition</b>.</p>
<h3>Classes and Definition</h3>
<p>Classes are responsible for modeling the fundamental aspects of node. They can say node is a web server and this particular node is one of them. In Puppet, programming classes are singleton and they can get evaluated once per node.</p>
<p>Definition on the other hand can be used many times on a single node. They work similarly as one has created his own Puppet type using the language. They are created to be used multiple times with different input each time. This means one can pass variable values into the definition.</p>
<h3>Difference between Class and Definition</h3>
<p>The only key difference between a class and definition is while defining the building structure and allocating resources, class gets evaluated only once per node, wherein on the other hand, a definition is used multiple times on the same single node.</p>
<h3>Classes</h3>
<p>Classes in Puppet are introduced using the class keyword and the content of that particular class is wrapped inside the curly braces as shown in the following example.</p>
<pre class="prettyprint notranslate">
class unix { 
   file { 
      '/etc/passwd': 
      owner =&gt; 'superuser', 
      group =&gt; 'superuser', 
      mode =&gt; 644; 
      '/etc/shadow': 
      owner =&gt; 'vipin', 
      group =&gt; 'vipin', 
      mode =&gt; 440; 
   } 
}
</pre>
<p>In the following example, we have used some short hand which is similar to the above.</p>
<pre class="prettyprint notranslate">
class unix { 
   file { 
      '/etc/passwd': 
      owner =&gt; 'superuser', 
      group =&gt; 'superuser', 
      mode =&gt; 644; 
   }  
   
   file {'/etc/shadow': 
      owner =&gt; 'vipin', 
      group =&gt; 'vipin', 
      mode =&gt; 440; 
   } 
} 
</pre>
<h3>Inheritance in Puppet Classes</h3>
<p>In Puppet, the OOP concept of inheritance is supported by default wherein classes can extend the functionality of previous without copying and pasting the complete code bit again in newly created class. Inheritance allows the subclass to override the resource settings defined in the parent class. One key thing to keep in mind while using inheritance is, a class can only inherit features from only one parent class, not more than one.</p>
<pre class="prettyprint notranslate">
class superclass inherits testsubclass { 
   File['/etc/passwd'] { group =&gt; wheel } 
   File['/etc/shadow'] { group =&gt; wheel } 
}
</pre>
<p>If there is a need to undo some logic specified in a parent class, we can use <b>undef command</b>.</p>
<pre class="prettyprint notranslate">
class superclass inherits testsubcalss { 
   File['/etc/passwd'] { group =&gt; undef } 
} 
</pre>
<h3>Alternative Way of Using Inheritance</h3>
<pre class="prettyprint notranslate">
class tomcat { 
   service { 'tomcat': require =&gt; Package['httpd'] } 
} 
class open-ssl inherits tomcat { 
   Service[tomcat] { require +&gt; File['tomcat.pem'] } 
}
</pre>
<h3>Nested Class in Puppet</h3>
<p>Puppet supports the concept of nesting of classes in which it allows to use nested classes which means one class inside the other. This helps in achieving modularity and scoping.</p>
<pre class="prettyprint notranslate">
class testclass { 
   class nested { 
      file {  
         '/etc/passwd': 
         owner =&gt; 'superuser', 
         group =&gt; 'superuser', 
         mode =&gt; 644; 
      } 
   } 
} 
class anotherclass { 
   include myclass::nested 
} 
</pre>
<h3>Parameterized Classes</h3>
<p>In Puppet, classes can extend their functionality to allow the passing of parameters into a class.</p>
<p>To pass a parameter in a class, one can use the following construct &minus;</p>
<pre class="prettyprint notranslate">
class tomcat($version) { 
   ... class contents ... 
} 
</pre>
<p>One key point to remember in Puppet is, classes with parameters are not added using the include function, rather the resulting class can be added as a definition.</p>
<pre class="prettyprint notranslate">
node webserver { 
   class { tomcat: version =&gt; "1.2.12" } 
}
</pre>
<h3>Default Values As Parameters in Class</h3>
<pre class="prettyprint notranslate">
class tomcat($version = "1.2.12",$home = "/var/www") { 
   ... class contents ... 
} 
</pre>
<h2>Run Stages</h2>
<p>Puppet supports the concept of run stage, which means the user can add multiple number of stages as per the requirement in order to manage any particular resource or multiple resources. This feature is very helpful when the user wants to develop a complex catalog. In a complex catalog, one has large number of resources which needs to be compiled while keeping in mind that the dependencies among the resources defined should not be impacted.</p>
<p>Run Stage is very helpful in managing resource dependencies. This can be done by adding classes in defined stages wherein a particular class contains a collection of resources. With run stage, Puppet guarantees that the defined stages will run in a specified predictable order every time the catalog runs and gets applied on any Puppet node.</p>
<p>In order to use this, one needs to declare additional stages beyond the already present stages and then Puppet can be configured to manage each stage in a specified order using the same resource relationship syntax before require <b>“-&gt;”</b> and <b>“+&gt;”</b>. The relationship will then guarantee the order of classes associated with each stage.</p>
<h3>Declaring Additional Stages with Puppet Declarative Syntax</h3>
<pre class="prettyprint notranslate">
stage { "first": before =&gt; Stage[main] } 
stage { "last": require =&gt; Stage[main] } 
</pre>
<p>Once the stages have been declared, a class may be associated with the stage other than the main using the stage.</p>
<pre class="prettyprint notranslate">
class { 
   "apt-keys": stage =&gt; first; 
   "sendmail": stage =&gt; main; 
   "apache": stage =&gt; last; 
}
</pre>
<p>All resources associated with class apt-key will run first. All the resources in Sendmail will be the main class and the resources associated with Apache will be the last stage.</p>
<h3>Definitions</h3>
<p>In Puppet, collection of resources in any manifest file is done either by classes or definitions. Definitions are very much similar to a class in Puppet however they are introduced with a <b>define keyword (not class)</b> and they support argument not inheritance. They can run on the same system multiple times with different parameters.</p>
<p>For example, if one wants to create a definition that controls the source code repositories where one is trying to create multiple repositories on the same system, then one can use the definition not class.</p>
<pre class="prettyprint notranslate">
define perforce_repo($path) { 
   exec {  
      "/usr/bin/svnadmin create $path/$title": 
      unless =&gt; "/bin/test -d $path", 
   } 
} 
svn_repo { puppet_repo: path =&gt; '/var/svn_puppet' } 
svn_repo { other_repo: path =&gt; '/var/svn_other' }
</pre>
<p>The key point to be noted here is how a variable can be used with a definition. We use (<b>$</b>) dollar sign variable. In the above, we have used $title. Definitions can have both a $title and $name with which the name and the title can be represented. By default, $title and $name are set to the same value, but one can set a title attribute and pass different name as a parameter. $title and $name only works in definition, not in class or other resource.</p>
<h3>Modules</h3>
<p>A module can be defined as a collection of all the configurations which would be used by the Puppet master to apply configurational changes on any particular Puppet node (agent). They are also known as portable collection of different kind of configurations, which are required to perform a specific task. For example, a module might contain all the resources required to configure Postfix and Apache.</p>
<h3>Nodes</h3>
<p>Nodes are very simple remaining step which is how we match what we defined (“this is what a webserver looks like”) to what machines are chosen to fulfill those instructions.</p>
<p>Node definition exactly looks like classes, including the supporting inheritance, however they are special such that when a node (a managed computer running a puppet client) connects to the Puppet master daemon, its name will be looked in the defined list of nodes. The information defined will be evaluated for node, and then the node will send that configuration.</p>
<p>Node name can be a short host name or the fully qualified domain name (FQDN).</p>
<pre class="prettyprint notranslate">
node 'www.vipin.com' { 
   include common 
   include apache, squid 
}
</pre>
<p>The above definition creates a node called www.vipin.com and includes the common, Apache and Squid classe</p>
<p>We can send the same configuration to different nodes by separating each with comma.</p>
<pre class="prettyprint notranslate">
node 'www.testing.com', 'www.testing2.com', 'www3.testing.com' { 
   include testing 
   include tomcat, squid 
}
</pre>
<h3>Regular Expression for Matching Nodes</h3>
<pre class="prettyprint notranslate">
node /^www\d+$/ { 
   include testing 
}
</pre>
<h3>Node Inheritance</h3>
<p>Node supports a limited inheritance model. Like classes, nodes can only inherit from one other node.</p>
<pre class="prettyprint notranslate">
node 'www.testing2.com' inherits 'www.testing.com' { 
   include loadbalancer 
}
</pre>
<p>In the above code, www.testing2.com inherits all the functionalities from www.testing.com in addition to an additional loadbalancer class.</p>
<h2>Advanced Supported Features</h2>
<p><b>Quoting</b> &minus; In most of the cases, we don’t need to quote a string in Puppet. Any alpha numeric string starting with a letter is to be left without quoting. However, it is always a best practice to quote a string for any non-negative values.</p>
<h3>Variable Interpolation with Quotes</h3>
<p>So far we have mentioned variable in terms of definition. If one needs to use those variables with a string, use double quotes, not single quotes. Single quotes string will not do any variable interpolation, double quotes string will do. The variable can be bracketed in <b>{}</b> which makes them easier to use together and easier to understand.</p>
<pre class="result notranslate">
$value = "${one}${two}" 
</pre>
<p>As a best practice, one should use single quotes for all the strings that do not require string interpolation.</p>
<h2>Capitalization</h2>
<p>Capitalization is a process which is used for referencing, inheritance, and setting default attributes of a particular resource. There are basically two fundamental ways of using it.</p>
<ul class="list">
<li><p><b>Referencing</b> &minus; It is the way of referencing an already created resource. It is mainly used for dependency purposes, one has to capitalize the name of the resource. Example, require =&gt; file [sshdconfig]</p></li>
<li><p><b>Inheritance</b> &minus; When overriding the setting for parent class from subclass, use the upper case version of the resource name. Using the lower case version will result in an error.</p></li> 
<li><p><b>Setting Default Attribute Value</b> &minus; Using the capitalized resource with no title works to set the default of the resource.</p></li>
</ul>
<h2>Arrays</h2>
<p>Puppet allows the use of arrays in multiple areas [One, two, three].</p>
<p>Several type members, such as alias in the host definition accepts arrays in their values. A host resource with multiple aliases will look like something as follows.</p>
<pre class="prettyprint notranslate">
host { 'one.vipin.com': 
   alias =&gt; [ 'satu', 'dua', 'tiga' ], 
   ip =&gt; '192.168.100.1', 
   ensure =&gt; present, 
}
</pre>
<p>The above code will add a host <b>‘one.brcletest.com’</b> to the host list with three aliases <b>‘satu’ ‘dua’ ‘tiga’</b>. If one wants to add multiple resources to one resource, it can be done as shown in the following example.</p>
<pre class="prettyprint notranslate">
resource { 'baz': 
   require =&gt; [ Package['rpm'], File['testfile'] ], 
}
</pre>
<h2>Variables</h2>
<p>Puppet supports multiple variables like most of the other programming languages. Puppet variables are denoted with <b>$</b>.</p>
<pre class="prettyprint notranslate">
$content = 'some content\n' 
file { '/tmp/testing': content =&gt; $content } 
</pre>
<p>As stated earlier Puppet is a declarative language, which means that its scope and assignment rules are different than the imperative language. The primary difference is that one cannot change the variable within a single scope, because they rely on order in the file to determine the value of a variable. Order does not matter in the declarative language.</p>
<pre class="prettyprint notranslate">
$user = root 
file {  
   '/etc/passwd': 
   owner =&gt; $user, 
} 

$user = bin 
   file {  
      '/bin': 
      owner =&gt; $user, 
      recurse =&gt; true, 
   }
</pre>
<h3>Variable Scope</h3>
<p>Variable scope defines if all the variables which are defined are valid. As with the latest features, Puppet is currently dynamically scoped which in Puppet terms means that all the variables which are defined gets evaluated on their scope rather than the location which they are defined.</p>
<pre class="prettyprint notranslate">
$test = 'top' 
class Testclass { 
   exec { "/bin/echo $test": logoutput =&gt; true } 
} 

class Secondtestclass { 
   $test = 'other' 
   include myclass 
} 

include Secondtestclass 
</pre>
<h3>Qualified Variable</h3>
<p>Puppet supports the use of qualified variables inside a class or a definition. This is very helpful when the user wishes to use the same variable in other classes, which he has defined or is going to define.</p>
<pre class="prettyprint notranslate">
class testclass { 
   $test = 'content' 
} 

class secondtestclass { 
   $other = $myclass::test 
} 
</pre>
<p>In the above code, the value of $other variable evaluates the content.</p>
<h2>Conditionals</h2>
<p>Conditions are situations when the user wishes to execute a set of statement or code when the defined condition or the required condition is satisfied. Puppet supports two types of conditions.</p>
<p>The selector condition which can only be used within the defined resources to pick the correct value of the machine.</p>
<p>Statement conditions are more widely used conditions in manifest which helps in including additional classes which the user wishes to include in the same manifest file. Define a distinct set of resources within a class, or make other structural decisions.</p>
<h3>Selectors</h3>
<p>Selectors are useful when the user wishes to specify a resource attribute and variables which are different from the default values based on the facts or other variables. In Puppet, the selector index works like a multivalued three-way operator. Selectors are also capable of defining the custom default values in no values, which are defined in manifest and matches the condition.</p>
<pre class="prettyprint notranslate">
$owner = $Sysoperenv ? { 
   sunos =&gt; 'adm', 
   redhat =&gt; 'bin', 
   default =&gt; undef, 
}
</pre>
<p>In later versions of Puppet 0.25.0 selectors can be used as regular expressions.</p>
<pre class="prettyprint notranslate">
$owner = $Sysoperenv ? { 
   /(Linux|Ubuntu)/ =&gt; 'bin', 
   default =&gt; undef, 
}
</pre>
<p>In the above example, the selector <b>$Sysoperenv</b> value matches either Linux or Ubuntu, then the bin will be the selected result, otherwise the user will be set as undefined.</p>
<h3>Statement Condition</h3>
<p>Statement condition is other type of conditional statement in Puppet which is very much similar to switch case condition in Shell script. In this, a multiple set of case statements are defined and the given input values are matched against each condition.</p>
<p>The case statement which matches the given input condition gets executed. This case statement condition does not have any return value. In Puppet, a very common use case for condition statement is running a set of code bit based on the underlying operating system.</p>
<pre class="prettyprint notranslate">
case $ Sysoperenv { 
   sunos: { include solaris }  
   redhat: { include redhat }  
   default: { include generic}  
}
</pre>
<p>Case Statement can also specify multiple conditions by separating them with a comma.</p>
<pre class="prettyprint notranslate">
case $Sysoperenv { 
   development,testing: { include development } testing,production: { include production }
   default: { include generic }  
} 
</pre>
<h2>If-Else Statement</h2>
<p>Puppet supports the concept of condition-based operation. In order to achieve it, If/else statement provides branching options based on the return value of the condition. As shown in the following example &minus;</p>
<pre class="prettyprint notranslate">
if $Filename { 
   file { '/some/file': ensure =&gt; present } 
} else { 
   file { '/some/other/file': ensure =&gt; present } 
} 
</pre>
<p>The latest version of Puppet supports variable expression in which the if statement can also branch based on the value of an expression.</p>
<pre class="prettyprint notranslate">
if $machine == 'production' { 
   include ssl 
} else { 
   include nginx 
}
</pre>
<p>In order to achieve more diversity in code and perform complex conditional operations, Puppet supports nested if/else statement as shown in the following code.</p>
<pre class="prettyprint notranslate">
if $ machine == 'production' { 
   include ssl 
} elsif $ machine == 'testing' { 
   include nginx
} else { 
   include openssl 
} 
</pre>
<h2>Virtual Resource</h2>
<p>Virtual resources are those that are not sent to the client unless realized.</p>
<p>Following is the syntax of using virtual resource in Puppet.</p>
<pre class="result notranslate">
@user { vipin: ensure =&gt; present } 
</pre>
<p>In the above example, the user vipin is defined virtually to realize the definition one can use in the collection.</p>
<pre class="result notranslate">
User &lt;| title == vipin |&gt;
</pre>
<h2>Comments</h2>
<p>Comments are used in any code bit to make an additional node about a set of lines of code and its functionality. In Puppet, there are currently two types of supported comments.</p>
<ul class="list">
<li>Unix shell style comments. They can be on their own line or the next line.</li>
<li>Multi-line c-style comments.</li>
</ul>
<p>Following is an example of shell style comment.</p>
<pre class="result notranslate">
# this is a comment
</pre>
<p>Following is an example of multiline comment.</p>
<pre class="result notranslate">
/* 
This is a comment 
*/ 
</pre>
<h2>Operator Precedence</h2>
<p>The Puppet operator precedence conforms to the standard precedence in most systems, from the highest to the lowest.</p>
<p>Following is the list of expressions</p>
<ul class="list">
<li>! = not</li>
<li>/ = times and divide</li>
<li>- + = minus, plus</li>
<li>&lt;&lt; &gt;&gt; = left shift and right shift</li>
<li>== != = not equal, equal</li>
<li>&gt;= &lt;= &gt; &lt; = greater equal, less or equal, greater than, less than</li>
</ul>
<h3>Comparison Expression</h3>
<p>Comparison expression are used when the user wants to execute a set of statements when the given condition is satisfied. Comparison expressions include tests for equality using the == expression.</p>
<pre class="prettyprint notranslate">
if $environment == 'development' { 
   include openssl 
} else { 
   include ssl 
} 
</pre>
<h3>Not Equal Example</h3>
<pre class="prettyprint notranslate">
if $environment != 'development' { 
   $otherenvironment = 'testing' 
} else { 
   $otherenvironment = 'production' 
} 
</pre>
<h3>Arithmetic Expression</h3>
<pre class="prettyprint notranslate">
$one = 1 
$one_thirty = 1.30 
$two = 2.034e-2 $result = ((( $two + 2) / $one_thirty) + 4 * 5.45) - 
   (6 &lt;&lt; ($two + 4)) + (0&times;800 + -9)
</pre>
<h3>Boolean Expression</h3>
<p>Boolean expressions are possible using or, and, &amp; not.</p>
<pre class="prettyprint notranslate">
$one = 1 
$two = 2 
$var = ( $one &lt; $two ) and ( $one + 1 == $two ) 
</pre>
<h3>Regular Expression</h3>
<p>Puppet supports regular expression matching using =~ (match) and !~ (not-match).</p>
<pre class="prettyprint notranslate">
if $website =~ /^www(\d+)\./ { 
   notice('Welcome web server #$1') 
}
</pre>
<p>Like case and selector regex match creates limited scope variable for each regex.</p>
<pre class="prettyprint notranslate">
exec { "Test": 
   command =&gt; "/bin/echo now we don’t have openssl installed on machine &gt; /tmp/test.txt", 
   unless =&gt; "/bin/which php" 
}
</pre>
<p>Similarly, we can use unless, unless execute the command all the time, except the command under unless exits successfully.</p>
<pre class="prettyprint notranslate">
exec { "Test": 
   command =&gt; "/bin/echo now we don’t have openssl installed on machine &gt; /tmp/test.txt", 
   unless =&gt; "/bin/which php" 
}
</pre>
<h2>Working with Templates</h2>
<p>Templates are used when one wishes to have a pre-defined structure which is going be used across multiple modules in Puppet and those modules are going to be distributed on multiple machines. The first step in order to use template is to create one that renders the template content with template methods.</p>
<pre class="prettyprint notranslate">
file { "/etc/tomcat/sites-available/default.conf": 
   ensure =&gt; "present", 
   content =&gt; template("tomcat/vhost.erb")  
}
</pre>
<p>Puppet makes few assumptions when dealing with local files in order to enforce organization and modularity. Puppet looks for vhost.erb template inside the folder apache/templates, inside the modules directory.</p>
<h2>Defining and Triggering Services</h2>
<p>In Puppet, it has a resource called service which is capable of managing the life cycle of all the services running on any particular machine or environment. Service resources are used to make sure services are initialized and enabled. They are also used for service restart.</p>
<p>For example, in the previous template of tomcat that we have where we set the apache virtual host. If one wants to make sure apache is restarted after a virtual host change, we need to create a service resource for the apache service using the following command.</p>
<pre class="prettyprint notranslate">
service { 'tomcat': 
   ensure =&gt; running, 
   enable =&gt; true 
}
</pre>
<p>When defining the resources, we need to include the notify option in order to trigger the restart.</p>
<pre class="prettyprint notranslate">
file { "/etc/tomcat/sites-available/default.conf": 
   ensure =&gt; "present", 
   content =&gt; template("vhost.erb"), 
   notify =&gt; Service['tomcat']  
}
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/puppet/puppet_validating_setup.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/puppet/puppet_manifest_files.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
