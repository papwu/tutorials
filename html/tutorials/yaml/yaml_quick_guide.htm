<!DOCTYPE html>
<html lang="en-US">
<head>
<title>YAML - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="YAML - Quick Guide - YAML Ain't Markup Language is a data serialization language that matches userâs expectations about data. It designed to be human friendly and works perfect"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/yaml/yaml_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#ffa827;
}
a.demo {
    background:#ffa827;
}
li.heading {
    background:#ffa827;
}
.course-box{background:#ffa827}
.home-intro-sub p{color:#ffa827}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/yaml/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/yaml/images/yaml-mini-logo.jpg" alt="YAML Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">YAML Tutorial</li>
<li><a href="/yaml/index.htm">YAML - Home</a></li>
<li><a href="/yaml/yaml_introduction.htm">YAML – Introduction</a></li>
<li><a href="/yaml/yaml_basics.htm">YAML – Basics</a></li>
<li><a href="/yaml/yaml_indentation_and_separation.htm">YAML – Indentation and Separation</a></li>
<li><a href="/yaml/yaml_comments.htm">YAML – Comments</a></li>
<li><a href="/yaml/yaml_collections_and_structures.htm">YAML – Collections and Structures</a></li>
<li><a href="/yaml/yaml_scalars_and_tags.htm">YAML – Scalars and Tags</a></li>
<li><a href="/yaml/yaml_full_length_example.htm">YAML – Full Length Example</a></li>
<li><a href="/yaml/yaml_processes.htm">YAML – Processes</a></li>
<li><a href="/yaml/yaml_information_models.htm">YAML – Information Models</a></li>
<li><a href="/yaml/yaml_syntax_characters.htm">YAML – Syntax Characters</a></li>
<li><a href="/yaml/yaml_syntax_primitives.htm">YAML – Syntax Primitives</a></li>
<li><a href="/yaml/yaml_character_streams.htm">YAML – Character Streams</a></li>
<li><a href="/yaml/yaml_node_properties.htm">YAML – Node Properties</a></li>
<li><a href="/yaml/yaml_block_scalar_header.htm">YAML – Block Scalar Header</a></li>
<li><a href="/yaml/yaml_flow_styles.htm">YAML – Flow Styles</a></li>
<li><a href="/yaml/yaml_block_styles.htm">YAML – Block Styles</a></li>
<li><a href="/yaml/yaml_sequence_styles.htm">YAML – Sequence Styles</a></li>
<li><a href="/yaml/yaml_flow_mappings.htm">YAML – Flow Mappings</a></li>
<li><a href="/yaml/yaml_block_sequences.htm">YAML – Block Sequences</a></li>
<li><a href="/yaml/yaml_failsafe_schema.htm">YAML – Failsafe Schema</a></li>
<li><a href="/yaml/yaml_json_schema.htm">YAML – JSON Schema</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">YAML Useful Resources</li>
<li><a href="/yaml/yaml_quick_guide.htm">YAML - Quick Guide</a></li>
<li><a href="/yaml/yaml_useful_resources.htm">YAML - Useful Resources</a></li>
<li><a href="/yaml/yaml_discussion.htm">YAML - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>YAML - Quick Guide</h1>
<hr />
<!-- /60931893/tutorial_top -->
<div id='div-gpt-ad-1532153686945-4' class='topgooglead'>
<script>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1532153686945-4'); });
</script>
</div>
<div class="clearer"></div>
<h1>YAML - Introduction</h1>
<p>YAML Ain't Markup Language is a data serialization language that matches user’s expectations about data. It designed to be human friendly and works perfectly with other programming languages. It is useful to manage data and includes Unicode printable characters. This chapter will give you an introduction to YAML and gives you an idea about its features.</p>
<h2>Format</h2> 
<p>Consider the text shown below &minus;</p>
<pre class="result notranslate">
Quick brown fox jumped over the lazy dog.
</pre>
<p>The YAML text for this will be represented as shown below &minus;</p>
<pre class="prettyprint notranslate">
yaml.load(Quick brown fox jumped over the lazy dog.)
&gt;&gt;'Quick brown fox jumped over the lazy dog.'
</pre>
<p>Note that YAML takes the value in string format and represents the output as mentioned above.</p>
<h2>Examples</h2>
<p>Let us understand the formats in YAML with the help of the following examples &minus;</p>
<p>Consider the following point number of “pi”, which has a value of 3.1415926. In YAML, it is represented as a floating number as shown below &minus;</p>
<pre class="prettyprint notranslate">
&gt;&gt;&gt; yaml.load('3.1415926536')
3.1415926536
</pre>
<p>Suppose, multiple values are to be loaded in specific data structure as mentioned below &minus;</p>
<pre class="result notranslate">
eggs
ham
spam
French basil salmon terrine
</pre>
<p>When you load this into YAML, the values are taken in an array data structure which is a form of list. The output is as shown below &minus;</p>
<pre class="result notranslate">
&gt;&gt;&gt; yaml.load('''
   - eggs
   - ham
   - spam
   - French basil salmon terrine
   ''')
['eggs', 'ham', 'spam', 'French basil salmon terrine']
</pre>
<h2>Features</h2>
<p>YAML includes a markup language with important construct, to distinguish data-oriented language with the document markup. The design goals and features of YAML are given below &minus;</p>
<ul class="list">
<li><p>Matches native data structures of agile methodology and its languages such as Perl, Python, PHP, Ruby and JavaScript</p></li>
<li><p>YAML data is portable between programming languages</p></li>
<li><p>Includes data consistent data model</p></li>
<li><p>Easily readable by humans</p></li>
<li><p>Supports one-direction processing</p></li>
<li><p>Ease of implementation and usage</p></li>
</ul>
<h1>YAML - Basics</h1>
<p>Now that you have an idea about YAML and its features, let us learn its basics with syntax and other operations. Remember that YAML includes a human readable structured format.</p>
<h2>Rules for Creating YAML file</h2>
<p>When you are creating a file in YAML, you should remember the following basic rules &minus;</p>
<ul class="list">
<li><p>YAML is case sensitive</p></li>
<li><p>The files should have <b>.yaml</b> as the extension</p></li>
<li><p>YAML does not allow the use of tabs while creating YAML files; spaces are allowed instead</p></li>
</ul>
<h2>Basic Components of YAML File</h2>
<p>The basic components of YAML are described below &minus;</p>
<h3>Conventional Block Format</h3>
<p>This block format uses <b>hyphen+space</b> to begin a new item in a specified list. Observe the example shown below &minus;</p>
<pre class="result notranslate">
--- # Favorite movies
 - Casablanca
 - North by Northwest
 - The Man Who Wasn't There
</pre>
<p><b>Inline Format</b></p>
<p>Inline format is delimited with <b>comma and space</b> and the items are enclosed in JSON. Observe the example shown below &minus;</p>
<pre class="result notranslate">
--- <i># Shopping list</i>
   [milk, groceries, eggs, juice, fruits]
</pre>
<p><b>Folded Text</b></p>
<p>Folded text converts newlines to spaces and removes the leading whitespace. Observe the example shown below &minus;</p>
<pre class="result notranslate">
- {name: John Smith, age: 33}
- name: Mary Smith
  age: 27
</pre>
<p>The structure which follows all the basic conventions of YAML is shown below &minus;</p>
<pre class="result notranslate">
men: [John Smith, Bill Jones]
women:
  - Mary Smith
  - Susan Williams
</pre>
<h2>Synopsis of YAML Basic Elements</h2>
<ul class="list">
<li><p>The synopsis of YAML basic elements is given here: Comments in YAML begins with the (<b>#</b>) character.</p></li> 
<li><p>Comments must be separated from other tokens by whitespaces.</p></li>
<li><p>Indentation of whitespace is used to denote structure.</p></li> 
<li><p>Tabs are not included as indentation for YAML files.</p></li>
<li><p>List members are denoted by a leading hyphen (<b>-</b>).</p></li>
<li><p>List members are enclosed in square brackets and separated by commas.</p></li>
<li><p>Associative arrays are represented using colon <b>( : )</b> in the format of key value pair. They are enclosed in curly braces <b>{}</b>.</p></li>
<li><p>Multiple documents with single streams are separated with 3 hyphens (---).</p></li>
<li><p>Repeated nodes in each file are initially denoted by an ampersand (<b>&amp;</b>) and by an asterisk (<b>*</b>) mark later.</p></li>
<li><p>YAML always requires colons and commas used as list separators followed by space with scalar values.</p></li> 
<li><p>Nodes should be labelled with an exclamation mark (<b>!</b>) or double exclamation mark (<b>!!</b>), followed by string which can be expanded into an URI or URL.</p></li>
</ul>
<h1>YAML - Indentation and Separation</h1>
<p>Indentation and separation are two main concepts when you are learning any programming language. This chapter talks about these two concepts related to YAML in detail.</p>
<h2>Indentation of YAML</h2>	
<p>YAML does not include any mandatory spaces. Further, there is no need to be consistent. The valid YAML indentation is shown below &minus;</p>
<pre class="prettyprint notranslate">
a:
   b:
      - c
      -  d
      - e
f:
      "ghi"
</pre>
<ul class="list">
<li><p>You should remember the following rules while working with indentation in YAML:Flow blocks must be intended with at least some spaces with surrounding current block level.</p></li>
<li><p>Flow content of YAML spans multiple lines. The beginning of flow content begins with <b>{</b> or <b>[</b>.</p></li>
<li><p>Block list items include same indentation as the surrounding block level because - is considered as a part of indentation.</p></li>
</ul>
<h3>Example of Intended Block</h3>
<p>Observe the following code that shows indentation with examples &minus;</p>
<pre class="prettyprint notranslate">
--- !clarkevans.com/^invoice
invoice: 34843
date   : 2001-01-23
bill-to: &amp;id001
   given  : Chris
   family : Dumars
   address:
      lines: |
            458 Walkman Dr.
            Suite #292
      city    : Royal Oak
      state   : MI
      postal  : 48046
ship-to: *id001
product:
    - sku         : BL394D
      quantity    : 4
      description : Basketball
      price       : 450.00
   - sku         : BL4438H
      quantity    : 1
      description : Super Hoop
      price       : 2392.00
tax  : 251.42
total: 4443.52
comments: &gt;
    Late afternoon is best.
    Backup contact is Nancy
    Billsmer @ 338-4338.
</pre>
<h2>Separation of Strings</h2>
<p>Strings are separated using double-quoted string. If you escape the newline characters in a given string, it is completely removed and translated into space value.</p> 
<h3>Example</h3>
<p>In this example we have focused listing of animals listed as an array structure with data type of string. Every new element is listed with a prefix of hyphen as mentioned as prefix.</p>
<pre class="result notranslate">
-
 - Cat
 - Dog
 - Goldfish
-
 - Python
 - Lion
 - Tiger
</pre>
<p>Another example to explain string representation in YAML is mentioned below.</p>
<pre class="result notranslate">
 errors:
      messages:
         already_confirmed: "was already confirmed, please try signing in"
         confirmation_period_expired: "needs to be confirmed within %{period}, please request a new one"
         expired: "has expired, please request a new one"
         not_found: "not found"
         not_locked: "was not locked"
         not_saved:
            one: "1 error prohibited this %{resource} from being saved:"
            other: "%{count} errors prohibited this %{resource} from being saved:"
</pre>
<p>This example refers to the set of error messages which a user can use just by mentioning the key aspect and to fetch the values accordingly. This pattern of YAML follows the structure of JSON which can be understood by user who is new to YAML.</p>
<h1>YAML - Comments</h1>
<p>Now that you are comfortable with the syntax and basics of YAML, let us proceed further into its details. In this chapter, we will see how to use comments in YAML.</p>
<p><b>YAML supports single line comments</b>. Its structure is explained below with the help of an example &minus;</p>
<pre class="result notranslate">
# this is single line comment.
</pre>
<p><b>YAML does not support multi line comments</b>. If you want to provide comments for multiple lines, you can do so as shown in the example below &minus;</p>
<pre class="result notranslate">
# this
# is a multiple
# line comment
</pre>
<h2>Features of Comments</h2>
<p>The features of comments in YAML are given below &minus;</p>
<ul class="list">
<li><p>A commented block is skipped during execution.</p></li>
<li><p>Comments help to add description for specified code block.</p></li>
<li><p>Comments must not appear inside scalars.</p></li>
<li><p>YAML does not include any way to escape the hash symbol (#) so within multi-line string so there is no way to divide the comment from the raw string value.</p></li>
</ul>
<p>The comments within a collection are shown below &minus;</p>
<pre class="result notranslate">
key: #comment 1
   - value line 1
   #comment 2
   - value line 2
   #comment 3
   - value line 3
</pre>
<p>The shortcut key combination for commenting YAML blocks is <b>Ctrl+Q</b>.</p>
<p>If you are using <b>Sublime Text editor</b>, the steps for commenting the block are mentioned below &minus;</p>
<p>Select the block. Use “CTRL + /” on Linux and Windows and “CMD+/” for Mac operating system. Execute the block.</p>
<p>Note that the same steps are applicable if you are using <b>Visual Studio Code Editor</b>. It is always recommended to use <b>Sublime Text Editor</b> for creating YAML files as it supported by most operating systems and includes developer friendly shortcut keys.</p>
<h1>YAML - Collections and Structures</h1>
<p>YAML includes block collections which use indentation for scope. Here, each entry begins with a new line. Block sequences in collections indicate each entry with a <b>dash and space</b> (-). In YAML, block collections styles are not denoted by any specific indicator. Block collection in YAML can distinguished from other scalar quantities with an identification of key value pair included in them.</p>
<p>Mappings are the representation of key value as included in JSON structure. It is used often in multi-lingual support systems and creation of API in mobile applications. Mappings use key value pair representation with the usage of <b>colon and space</b> (<b>:</b>).</p>
<h2>Examples</h2>
<p>Consider an example of sequence of scalars, for example a list of ball players as shown below &minus;</p>
<pre class="result notranslate">
- Mark Joseph
- James Stephen
- Ken Griffey
</pre>
<p>The following example shows mapping scalars to scalars &minus;</p>
<pre class="result notranslate">
hr: 87
avg: 0.298
rbi: 149
</pre>
<p>The following example shows mapping scalars to sequences &minus;</p>
<pre class="result notranslate">
European:
- Boston Red Sox
- Detroit Tigers
- New York Yankees

national:
- New York Mets
- Chicago Cubs
- Atlanta Braves
</pre>
<p>Collections can be used for sequence mappings which are shown below &minus;</p>
<pre class="result notranslate">
-
   name: Mark Joseph
   hr: 87
   avg: 0.278
-
   name: James Stephen
   hr: 63
   avg: 0.288
</pre>
<p>With collections, YAML includes flow styles using explicit indicators instead of using indentation to denote space. The flow sequence in collections is written as comma separated list enclosed in square brackets. The best illustration for collection which is included in PHP frameworks like symphony.</p>
<pre class="result notranslate">
[PHP, Perl, Python]
</pre>
<p>These collections are stored in documents. The separation of documents in YAML is denoted with three hyphens or dashes (---). The end of document is marked with three dots (…).</p>
<p>The separation of documents in YAML is denoted by three dashes (---). The end of document is represented with three dots (…).</p> 
<p>The document representation is referred as structure format which is mentioned below &minus;</p>
<pre class="result notranslate">
# Ranking of 1998 home runs
---
- Mark Joseph
- James Stephen
- Ken Griffey 

# Team ranking
---
- Chicago Cubs
- St Louis Cardinals
</pre>
<p>A question mark with a combination of space indicates a complex mapping in structure. Within a block collection, a user can include structure with a dash, colon and question mark. The following example shows the mapping between sequences &minus;</p>
<pre class="result notranslate">
- 2001-07-23
? [ New York Yankees,Atlanta Braves ]
: [ 2001-07-02, 2001-08-12, 2001-08-14]
</pre>
<h1>YAML - Scalars and Tags</h1>
<p>Scalars in YAML are written in block format using a literal type which is denoted as(<b>|</b>). It denotes line breaks count. In YAML, scalars are written in folded style (<b>&gt;</b>) where each line denotes a folded space which ends with an <b>empty line</b> or <b>more indented</b> line.</p>
<p>New lines are preserved in literals are shown below &minus;</p>
<pre class="result notranslate">
ASCII Art
--- |
\//||\/||
// || ||__
</pre>
<p>The folded newlines are preserved for <b>more indented lines</b> and <b>blank lines</b> as shown below &minus;</p>
<pre class="prettyprint notranslate">
&gt;
Sammy Sosa completed another
fine season with great stats.
63 Home Runs
0.288 Batting Average
What a year!
</pre>
<p>YAML flow scalars include plain styles and quoted styles. The double quoted style includes various escape sequences. Flow scalars can include multiple lines; line breaks are always folded in this structure.</p>
<pre class="result notranslate">
plain:
This unquoted scalar
spans many lines.
quoted: "So does this
quoted scalar.\n"
</pre>
<p>In YAML, untagged nodes are specified with a specific type of the application. The examples of tags specification generally use <b>seq, map</b> and <b>str</b> types for YAML tag repository. The tags are represented as examples which are mentioned as below &minus;</p>
<h2>Integer tags</h2>
<p>These tags include integer values in them. They are also called as numeric tags.</p>
<pre class="result notranslate">
canonical: 12345
decimal: +12,345
sexagecimal: 3:25:45
octal: 014
hexadecimal: 0xC
</pre>
<h2>Floating point numbers</h2>
<p>These tags include decimal and exponential values. They are also called as exponential tags.</p>
<pre class="result notranslate">
canonical: 1.23015e+3
exponential: 12.3015e+02
sexagecimal: 20:30.15
fixed: 1,230.15
negative infinity: -.inf
not a number: .NaN
</pre>
<h2>Miscellaneous Tags</h2>
<p>It includes a variety of integer, floating and string values embedded in them. Hence it is called miscellaneous tags.</p>
<pre class="result notranslate">
null: ~
true: y
false: n
string: '12345'
</pre>
<h1>YAML - Full Length Example</h1>
<p>The following full-length example specifies the construct of YAML which includes symbols and various representations which will be helpful while converting or processing them in JSON format. These attributes are also called as key names in JSON documents. These notations are created for security purposes. </p>
<p>The above YAML format represents various attributes of defaults, adapter, and host with various other attributes. YAML also keeps a log of every file generated which maintains a track of error messages generated. On converting the specified YAML file in JSON format we get a desired output as mentioned below &minus;</p>
<pre class="prettyprint notranslate">
defaults: &amp;defaults
   adapter:  postgres
   host:     localhost

development:
   database: myapp_development
   &lt;&lt;: *defaults

test:
   database: myapp_test
   &lt;&lt;: *defaults
</pre>
<p>Let’s convert the YAML to JSON format and check on the output.</p>
<pre class="prettyprint notranslate">
{
   "defaults": {
      "adapter": "postgres",
      "host": "localhost"
   },
   "development": {
      "database": "myapp_development",
      "adapter": "postgres",
      "host": "localhost"
   },
   "test": {
      "database": "myapp_test",
      "adapter": "postgres",
      "host": "localhost"
   }
}
</pre>
<p>The defaults key with a prefix of “ &lt;&lt;: *” is included as and when required with no need to write the same code snippet repeatedly.</p>
<h1>YAML - Processes</h1>
<p>YAML follows a standard procedure for Process flow. The native data structure in YAML includes simple representations such as nodes. It is also called as Representation Node Graph.</p>
<p>It includes mapping, sequence and scalar quantities which is being serialized to create a serialization tree. With serialization the objects are converted with stream of bytes.</p>
<p>The serialization event tree helps in creating presentation of character streams as represented in the following diagram.</p>
<p>The reverse procedure parses the stream of bytes into serialized event tree. Later, the nodes are converted into node graph. These values are later converted in YAML native data structure. The figure below explains this &minus;</p>
<img src="/yaml/images/yaml_processes.jpg" alt="YAML Processes" />
<p>The information in YAML is used in two ways: <b>machine processing</b> and <b>human consumption</b>. The processor in YAML is used as a tool for the procedure of converting information between complementary views in the diagram given above. This chapter describes the information structures a YAML processor must provide within a given application.</p>
<p>YAML includes a serialization procedure for representing data objects in serial format. The processing of YAML information includes three stages: <b>Representation, Serialization, Presentation and parsing</b>. Let us discuss each of them in detail.</p>
<h2>Representation</h2>
<p>YAML represents the data structure using three kinds of nodes: <b>sequence, mapping</b> and  <b>scalar</b>.</p> 
<h3>Sequence</h3>
<p>Sequence refers to the ordered number of entries, which maps the unordered association of key value pair. It corresponds to the Perl or Python array list.</p> 
<p>The code shown below is an example of sequence representation &minus;</p>
<pre class="prettyprint notranslate">
product:
   - sku         : BL394D
     quantity    : 4
     description : Football
     price       : 450.00
   - sku         : BL4438H
     quantity    : 1
     description : Super Hoop
     price       : 2392.00
</pre>
<h3>Mapping</h3>
<p>Mapping on the other hand represents dictionary data structure or hash table. An example for the same is mentioned below &minus;</p>
<pre class="result notranslate">
batchLimit: 1000
threadCountLimit: 2
key: value
keyMapping: &lt;What goes here?&gt;
</pre>
<h3>Scalars</h3>
<p>Scalars represent standard values of strings, integers, dates and atomic data types. Note that YAML also includes nodes which specify the data type structure. For more information on scalars, please refer to the chapter 6 of this tutorial.</p>
<h2>Serialization</h2>
<p>Serialization process is required in YAML that eases human friendly key order and anchor names. The result of serialization is a YAML serialization tree. It can be traversed to produce a series of event calls of YAML data.</p>
<p>An example for serialization is given below &minus;</p>
<pre class="result notranslate">
consumer:
   class: 'AppBundle\Entity\consumer'
   attributes:
      filters: ['customer.search', 'customer.order', 'customer.boolean']
   collectionOperations:
      get:
         method: 'GET'
         normalization_context:
       groups: ['customer_list']
   itemOperations:
      get:
         method: 'GET'
         normalization_context:
            groups: ['customer_get']
</pre>
<h2>Presentation</h2>
<p>The final output of YAML serialization is called presentation. It represents a character stream in a human friendly manner. YAML processor includes various presentation details for creating stream, handling indentation and formatting content. This complete process is guided by the preferences of user.</p> 
<p>An example for YAML presentation process is the result of JSON value created. Observe the code given below for a better understanding &minus;</p>
<pre class="prettyprint notranslate">
{
   "consumer": {
      "class": "AppBundle\\Entity\\consumer",
      "attributes": {
         "filters": [
            "customer.search",
            "customer.order",
            "customer.boolean"
         ]
      },
      "collectionOperations": {
         "get": {
            "method": "GET",
            "normalization_context": {
               "groups": [
                  "customer_list"
               ]
            }
         }
      },
      "itemOperations": {
         "get": {
            "method": "GET",
            "normalization_context": {
               "groups": [
                  "customer_get"
               ]
            }
         }
      }
   }
}
</pre>
<h2>Parsing</h2>
<p>Parsing is the inverse process of presentation; it includes a stream of characters and creates a series of events.  It discards the details introduced in the presentation process which causes serialization events. Parsing procedure can fail due to ill-formed input. It is basically a procedure to check whether YAML is well-formed or not.</p>
<p>Consider a YAML example which is mentioned below &minus;</p>
<pre class="prettyprint notranslate">
---
   environment: production
   classes:
      nfs::server:
         exports:
            - /srv/share1
            - /srv/share3
   parameters:
      paramter1
</pre>
<p>With three hyphens, it represents the start of document with various attributes later defined in it.</p>
<p>YAML lint is the online parser of YAML and helps in parsing the YAML structure to check whether it is valid or not. The official link for YAML lint is mentioned below: <a href="http://www.yamllint.com/" target="_blank" rel="nofollow">http://www.yamllint.com/</a></p> 
<p>You can see the output of parsing as shown below &minus;</p>
<img src="/yaml/images/yaml_lint.jpg" alt="YAML Lint" />
<h1>YAML - Information Models</h1>
<p>This chapter will explain the detail about the procedures and processes that we discussed in last chapter. Information Models in YAML will specify the features of serialization and presentation procedure in a systematic format using a specific diagram.</p>
<p>For an information model, it is important to represent the application information which are portable between programming environments.</p> 
<img src="/yaml/images/yaml_information_models.jpg" alt="YAML Information Models" />
<p>The diagram shown above represents a normal information model which is represented in graph format. In YAML, the representation of native data is rooted, connected and is directed graph of tagged nodes. If we mention directed graph, it includes a set of nodes with directed graph. As mentioned in the information model, YAML supports three kinds of nodes namely &minus;</p>
<ul class="list">
<li>Sequences</li>
<li>Scalars</li>
<li>Mappings</li>
</ul>
<p>The basic definitions of these representation nodes were discussed in last chapter. In this chapter, we will focus on schematic view of these terms. The following sequence diagram represents the workflow of legends with various types of tags and mapping nodes.</p> 
<img src="/yaml/images/sequence_diagram_workflow_of_legends.jpg" alt="Sequence Diagram Workflow of Legends" />
<p>There are three types of nodes: <b>sequence node, scalar node</b> and <b>mapping node</b>.</p> 
<h3>Sequences</h3>
<p>Sequence node follows a sequential architecture and includes an ordered series of zero or more nodes. A YAML sequence may contain the same node repeatedly or a single node.</p>
<h3>Scalars</h3>
<p>The content of scalars in YAML includes Unicode characters which can be represented in the format with a series of zero. In general, scalar node includes scalar quantities.</p>
<h3>Mapping</h3>
<p>Mapping node includes the key value pair representation. The content of mapping node includes a combination of key-value pair with a mandatory condition that key name should be maintained unique. Sequences and mappings collectively form a collection.</p>
<p>Note that as represented in the diagram shown above, scalars, sequences and mappings are represented in a systematic format.</p>
<h1>YAML - Syntax Characters</h1>
<p>Various types of characters are used for various functionalities. This chapter talks in detail about syntax used in YAML and focuses on character manipulation.</p>
<h2>Indicator Characters</h2>
<p>Indicator characters include a special semantics used to describe the content of YAML document. The following table shows this in detail.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Character &amp; Functionality</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>_</b></p>
<p>It denotes a block sequence entry</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>?</b></p>
<p>It denotes a mapping key</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>:</b></p>
<p>It denotes a mapping value</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>,</b></p>
<p>It denotes flow collection entry</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>[</b></p>
<p>It starts a flow sequence</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>]</b></p>
<p>It ends a flow sequence</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>{</b></p>
<p>It starts a flow mapping</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>}</b></p>
<p>It ends a flow mapping</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>#</b></p>
<p>It denotes the comments</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>&amp;</b></p>
<p>It denotes node’s anchor property</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>*</b></p>
<p>It denotes alias node</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><p><b>!</b></p>
<p>It denotes node’s tag</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><p><b>|</b></p>
<p>It denotes a literal block scalar</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td><p><b>&gt;</b></p>
<p>It denotes a folded block scalar</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td><p><b>`</b></p>
<p>Single quote surrounds a quoted flow scalar</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td><p><b>"</b></p>
<p>Double quote surrounds double quoted flow scalar</p></td>
</tr>
<tr>
<td class="ts">17</td>
<td><p><b>%</b></p>
<p>It denotes the directive used</p></td>
</tr>
</table>
<p>The following example shows the characters used in syntax &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "sequence"
   : !!seq [
      !!str "one", !!str "two"
   ],
   ? !!str "mapping"
   : !!map {
      ? !!str "sky" : !!str "blue",
      ? !!str "sea" : !!str "green",
   }
}

# This represents
# only comments.
---
!!map1 {
   ? !!str "anchored"
   : !local &A1 "value",
   ? !!str "alias"
   : *A1,
}
!!str "text"
</pre>
<h1>YAML - Syntax Primitives</h1>
<p>In this chapter you will learn about the following aspects of syntax primitives in YAML &minus;</p> 
<ul class="list">
<li>Production parameters</li>
<li>Indentation Spaces</li>
<li>Separation Spaces</li>
<li>Ignored Line Prefix</li>
<li>Line folding</li>
</ul>
<p>Let us understand each aspect in detail.</p>
<h2>Production Parameters</h2>
<p>Production parameters include a set of parameters and the range of allowed values which are used on a specific production. The following list of production parameters are used in YAML &minus;</p>
<h3>Indentation</h3>
<p>It is denoted by character <b>n</b> or <b>m</b>	Character stream depends on the indentation level of blocks included in it. Many productions have parameterized these features.</p>
<h3>Context</h3>
<p>It is denoted by <b>c</b>.	YAML supports two groups of contexts: <b>block styles</b> and <b>flow styles</b>.</p>
<h3>Style</h3>
<p>It is denoted by s. Scalar content may be presented in one of the five styles: <b>plain, double quoted and single quoted flow, literal and folded block.</b></p>
<h3>Chomping</h3>
<p>It is denoted by <b>t</b>. Block scalars offer many mechanisms which help in trimming the block: <b>strip, clip</b> and <b>keep</b>. Chomping helps in formatting new line strings. It is used Block style representation. Chomping process happens with the help of indicators. The indicators controls what output should be produced with newlines of string. The newlines are removed with <b>(-)</b> operator and newlines are added with <b>(+)</b> operator.</p>
<p>An example for chomping process is shown below &minus;</p>
<pre class="result notranslate">
strip: |-
   text&darr;
clip: |
   text&darr;
keep: |+
   text&darr;
</pre>
<p>The output after parsing the specified YAML example is as follows &minus;</p>
<img src="/yaml/images/output_after_parsing_the_specified_yaml.jpg" alt="Output After Parsing the Specified YAML" />
<h2>Indentation Spaces</h2>
<p>In YAML character stream, indentation is defined as a line break character by zero or more characters. The most important point to be kept in mind is that indentation must not contain any tab characters. The characters in indentation should never be considered as a part of node’s content information. Observe the following code for better understanding &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "Not indented"
   : !!map {
      ? !!str "By one space"
      : !!str "By four\n spaces\n",
      ? !!str "Flow style"
      : !!seq [
         !!str "By two",
         !!str "Still by two",
         !!str "Again by two",
      ]
   }
}
</pre>
<p>The output that you can see after indentation is as follows &minus;</p>
<pre class="result notranslate">
{
   "Not indented": {
      "By one space": "By four\n spaces\n", 
      "Flow style": [
         "By two", 
         "Still by two", 
         "Again by two"
      ]
   }
}
</pre>
<h2>Separation Spaces</h2>
<p>YAML uses space characters for separation between tokens. The most important note is that separation in YAML should not contain tab characters.</p> 
<p>The following lone of code shows the usage of separation spaces &minus;</p>
<pre class="prettyprint notranslate">
{ · first: · Sammy, · last: · Sosa · }
</pre>
The syntax shown above gives you the following output:
<pre class="result notranslate">
{
   "\u00b7 last": "\u00b7 Sosa \u00b7", 
   "\u00b7 first": "\u00b7 Sammy"
}
</pre>
<h2>Ignored Line Prefix</h2>
<p>Empty prefix always includes indentation depending on the scalar type which also includes a leading whitespace. Plain scalars should not contain any tab characters. On the other hand, quoted scalars may contain tab characters. Block scalars completely depend on indentation.</p> 
<p>The following example shows the working of ignored line prefix in a systematic manner &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "plain"
   : !!str "text lines",
   ? !!str "quoted"
   : !!str "text lines",
   ? !!str "block"
   : !!str "text·®lines\n"
}
</pre>
<p>The output achieved for the block streams is as follows &minus;</p>
<pre class="result notranslate">
{
   "plain": "text lines", 
   "quoted": "text lines", 
   "block": "text\u00b7\u00aelines\n"
}
</pre>
<h2>Line Folding</h2>
<p>Line Folding allows breaking long lines for readability. More amounts of short lines mean better readability. Line folding is achieved by noting original semantics of long line. The following example demonstrates line folding &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
--- !!str
"specific\L\
trimmed\n\n\n\
as space"
</pre>
<p>You can see the output for line folding in JSON format as follows &minus;</p>
<pre class="result notranslate">
"specific\u2028trimmed\n\n\nas space"
</pre>
<h1>YAML - Character Streams</h1>
<p>In YAML, you come across various character streams as follows &minus;</p>
<ul class="list">
<li>Directives</li>
<li>Document Boundary Markers</li>
<li>Documents</li>
<li>Complete Stream</li>
</ul>
<p>In this chapter, we will discuss them in detail.</p>
<h2>Directives</h2>
<p>Directives are basic instructions used in YAML processor. Directives are the presentation details like comments which are not reflected in serialization tree. In YAML, there is no way to define private directives. This section discusses various types of directives with relevant examples &minus;</p> 
<h3>Reserved Directives</h3>
<p>Reserved directives are initialized with three hyphen characters (---) as shown in the example below. The reserved directives are converted into specific value of JSON.</p>
<pre class="result notranslate">
%YAML 1.1
--- !!str
"foo"
</pre>
<h3>YAML Directive</h3>
<p>YAML Directives are default directives. If converted in JSON, the value fetched includes forward slash character in preceding and terminating characters.</p>
<pre class="result notranslate">
%YAML 1.1
---
!!str "foo"
</pre>
<h2>Document Boundary Markers</h2>
<p>YAML uses these markers to allow more than one document to be contained in one stream. These markers are specially used to convey the structure of YAML document. Note that a line beginning with “---“is used to start a new document.</p>
<p>The following code explains about this with examples &minus;</p>
<pre class="result notranslate">
%YAML 1.1
---
!!str "foo"
%YAML 1.1
---
!!str "bar"
%YAML 1.1
---
!!str "baz"
</pre>
<h2>Documents</h2>
<p>YAML document is considered as a single native data structure presented as a single root node. The presentation details in YAML document such as directives, comments, indentation and styles are not considered as contents included in them.</p>
<p>There are two types of documents used in YAML. They are explained in this section &minus;</p>
<h3>Explicit Documents</h3>
<p>It begins with the document start marker followed by the presentation of the root node. The example of YAML explicit declaration is given below &minus;</p>
<pre class="result notranslate">
---

some: yaml

...
</pre>
<p>It includes an explicit start and end markers which is “---“and “…” in given example. On converting the specified YAML in JSON format, we get the output as shown below &minus;</p>
<pre class="result notranslate">
{
   "some": "yaml"
}
</pre>
<h3>Implicit Documents</h3>
<p>These documents do not begin with a document start marker. Observe the code given below &minus;</p>
<pre class="result notranslate">
fruits:
   - Apple
   - Orange
   - Pineapple
   - Mango
</pre>
<p>Converting these values in JSON format we get the output as a simple JSON object as given below &minus;</p>
<pre class="result notranslate">
{
   "fruits": [
      "Apple",
      "Orange",
      "Pineapple",
      "Mango"
   ]
}
</pre>
<h2>Complete Stream</h2>
<p>YAML includes a sequence of bytes called as character stream. The stream begins with a prefix containing a byte order denoting a character encoding. The complete stream begins with a prefix containing a character encoding, followed by comments.</p> 
<p>An example of complete stream (character stream) is shown below &minus;</p>
<pre class="result notranslate">
%YAML 1.1
---
!!str "Text content\n"
</pre>
<h1>YAML - Node Properties</h1>
<p>Each presentation node includes two major characteristics called <b>anchor</b> and <b>tag</b>. Node properties may be specified with node content, omitted from the character stream.</p>
<p>The basic example of node representation is as follows &minus;</p>
<pre class="result notranslate">
%YAML 1.1
---
!!map {
   ? &A1 !!str "foo"
   : !!str "bar",
   ? !!str &amp;A2 "baz"
   : *a1
}
</pre>
<h2>Node Anchors</h2>
<p>The anchor property represents a node for future reference. The character stream of YAML representation in node is denoted with the <b>ampersand (&amp;)</b> indicator. The YAML processor need not preserve the anchor name with the representation details composed in it. The following code explains this &minus;</p> 
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "First occurence"
   : &amp;A !!str "Value",
   ? !!str "Second occurence"
   : *A
}
</pre>
<p>The output of YAML generated with anchor nodes is shown below &minus;</p>
<pre class="result notranslate">
---
!!map {
   ? !!str "First occurence"
   : !!str "Value",
   ? !!str "Second occurence"
   : !!str "Value",
}
</pre>
<h2>Node Tags</h2>
<p>The tag property represents the type of native data structure which defines a node completely.  A tag is represented with the (<b>!</b>) indicator. Tags are considered as an inherent part of the representation graph. The following example of explains node tags in detail &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !&lt;tag:yaml.org,2002:str&gt; "foo"
   : !&lt;!bar&gt; "baz"
}
</pre>
<h2>Node Content</h2>
<p>Node content can be represented in a flow content or block format. Block content extends to the end of line and uses indentation to denote structure. Each collection kind can be represented in a specific single flow collection style or can be considered as a single block. The following code explains this in detail &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "foo"
   : !!str "bar baz"
}

%YAML 1.1
---
!!str "foo bar"

%YAML 1.1
---
!!str "foo bar"

%YAML 1.1
---
!!str "foo bar\n"
</pre>
<h1>YAML - Block Scalar Header</h1>
<p>In this chapter, we will focus on various scalar types which are used for representing the content. In YAML, comments may either precede or follow scalar content. It is important to note that comments should not be included within scalar content.</p> 
<p>Note that all flow scalar styles can include multiple lines, except with usage in multiple keys.</p> 
<p>The representation of scalars is given below &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "simple key"
   : !!map {
      ? !!str "also simple"
      : !!str "value",
      ? !!str "not a simple key"
      : !!str "any value"
   }
}
</pre>
<p>The generated output of block scalar headers is shown below &minus;</p>
<pre class="prettyprint notranslate">
{
   "simple key": {
      "not a simple key": "any value", 
      "also simple": "value"
   }
}
</pre>
<h2>Document Marker Scalar Content</h2>
<p>All characters in this example are considered as content, including the inner space characters.</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!map {
   ? !!str "---"
   : !!str "foo",
   ? !!str "...",
   : !!str "bar"
}

%YAML 1.1
---
!!seq [
   !!str "---",
   !!str "...",
   !!map {
      ? !!str "---"
      : !!str "..."
   }
]
</pre>
<p>The plain line breaks are represented with the example given below &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
---
!!str "as space \
trimmed\n\
specific\L\n\
none"
</pre>
<p>The corresponding JSON output for the same is mentioned below &minus;</p>
<pre class="result notranslate">
"as space trimmed\nspecific\u2028\nnone"
</pre>
<h1>YAML - Flow Styles</h1>
<p>Flow styles in YAML can be thought of as a natural extension of JSON to cover the folding content lines for better readable feature which uses anchors and aliases to create the object instances. In this chapter, we will focus on flow representation of the following concepts &minus;</p>
<ul class="list">
<li>Alias Nodes</li>
<li>Empty Nodes</li>
<li>Flow Scalar styles</li>
<li>Flow collection styles</li>
<li>Flow nodes</li>
</ul>
<p>The example of alias nodes is shown below &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.2
---
!!map {
   ? !!str "First occurrence"
   : &amp;A !!str "Foo",
   ? !!str "Override anchor"
   : &amp;B !!str "Bar",
   ? !!str "Second occurrence"
   : *A,
   ? !!str "Reuse anchor"
   : *B,
}
</pre>
<p>The JSON output of the code given above is given below &minus;</p>
<pre class="result notranslate">
{
   "First occurrence": "Foo", 
   "Second occurrence": "Foo", 
   "Override anchor": "Bar", 
   "Reuse anchor": "Bar"
}
</pre>
<p>Nodes with empty content are considered as empty nodes. The following example shows this &minus;</p> 
<pre class="prettyprint notranslate">
%YAML 1.2
---
!!map {
   ? !!str "foo" : !!str "",
   ? !!str "" : !!str "bar",
}
</pre>
<p>The output of empty nodes in JSON is represented as below &minus;</p>
<pre class="result notranslate">
{
   "": "bar", 
   "foo": ""
}
</pre>
<p>Flow scalar styles include double-quoted, single-quoted and plain types. The basic example for the same is given below &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.2
---
!!map {
   ? !!str "implicit block key"
   : !!seq [
      !!map {
         ? !!str "implicit flow key"
         : !!str "value",
      }
   ]  
}
</pre>
<p>The output in JSON format for the example given above is shown below &minus;</p>
<pre class="result notranslate">
{
   "implicit block key": [
      {
         "implicit flow key": "value"
      }
   ] 
}
</pre>
<p>Flow collection in YAML is nested with a block collection within another flow collection. Flow collection entries are terminated with <b>comma</b> (<b>,</b>) indicator. The following example explains the flow collection block in detail &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.2
---
!!seq [
   !!seq [
      !!str "one",
      !!str "two",
   ],
   
   !!seq [
      !!str "three",
      !!str "four",
   ],
]
</pre>
<p>The output for flow collection in JSON is shown below &minus;</p>
<pre class="result notranslate">
[
   [
      "one", 
      "two"
   ], 
   [
      "three", 
      "four"
   ]
]
</pre>
<p>Flow styles like JSON include start and end indicators. The only flow style that does not have any property is the plain scalar.</p>
<pre class="prettyprint notranslate">
%YAML 1.2
---
!!seq [
!!seq [ !!str "a", !!str "b" ],
!!map { ? !!str "a" : !!str "b" },
!!str "a",
!!str "b",
!!str "c",]
</pre>
<p>The output for the code shown above in JSON format is given below &minus;</p>
<pre class="result notranslate">
[
   [
      "a", 
      "b"
   ], 
   
   {
      "a": "b"
   }, 
   
   "a", 
   "b", 
   "c"
]
</pre>
<h1>YAML - Block Styles</h1>
<p>YAML includes two block scalar styles: <b>literal</b> and <b>folded</b>. Block scalars are controlled with few indicators with a header preceding the content itself. An example of block scalar headers is given below &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.2
---
!!seq [
   !!str "literal\n",
   !!str "·folded\n",
   !!str "keep\n\n",
   !!str "·strip",
]
</pre>
<p>The output in JSON format with a default behavior is given below &minus;</p>
<pre class="result notranslate">
[
   "literal\n", 
   "\u00b7folded\n", 
   "keep\n\n", 
   "\u00b7strip"
]
</pre>
<h2>Types of Block Styles</h2>
<p>There are four types of block styles: <b>literal, folded, keep</b> and <b>strip</b> styles. These block styles are defined with the help of Block Chomping scenario. An example of block chomping scenario is given below &minus;</p>
<pre class="result notranslate">
%YAML 1.2
---
!!map {
   ? !!str "strip"
   : !!str "# text",
   ? !!str "clip"
   : !!str "# text\n",
   ? !!str "keep"
   : !!str "# text\n",
}
</pre>
<p>You can see the output generated with three formats in JSON as given below &minus;</p>
<pre class="result notranslate">
{
   "strip": "# text", 
   "clip": "# text\n", 
   "keep": "# text\n"
}
</pre>
<p>Chomping in YAML controls the final breaks and trailing empty lines which are interpreted in various forms.</p>
<h3>Stripping</h3>
<p>In this case, the final line break and empty lines are excluded for scalar content. It is specified by the chomping indicator “-“.</p>
<h3>Clipping</h3>
<p>Clipping is considered as a default behavior if no explicit chomping indicator is specified. The final break character is preserved in the scalar’s content. The best example of clipping is demonstrated in the example above. It terminates with newline <b>“\n”</b> character.</p>
<h3>Keeping</h3>
<p>Keeping refers to the addition with representation of “+” chomping indicator. Additional lines created are not subject to folding. The additional lines are not subject to folding.</p>
<h1>YAML - Sequence Styles</h1>
<p>To understand sequence styles, it is important to understand collections. The concept of collections and sequence styles work in parallel. The collection in YAML is represented with proper sequence styles. If you want to refer proper sequencing of tags, always refer to collections. Collections in YAML are indexed by sequential integers starting with zero as represented in arrays. The focus of sequence styles begins with collections.</p>
<h2>Example</h2>
<p>Let us consider the number of planets in universe as a sequence which can be created as a collection. The following code shows how to represent the sequence styles of planets in universe &minus;</p>
<pre class="prettyprint notranslate">
# Ordered sequence of nodes in YAML STRUCTURE
Block style: !!seq
- Mercury   # Rotates - no light/dark sides.
- Venus     # Deadliest. Aptly named.
- Earth     # Mostly dirt.
- Mars      # Seems empty.
- Jupiter   # The king.
- Saturn    # Pretty.
- Uranus    # Where the sun hardly shines.
- Neptune   # Boring. No rings.
- Pluto     # You call this a planet?
Flow style: !!seq [ Mercury, Venus, Earth, Mars,      # Rocks
                    Jupiter, Saturn, Uranus, Neptune, # Gas
                    Pluto ]                           # Overrated
</pre>
<p>Then, you can see the following output for ordered sequence in JSON format &minus;</p>
<pre class="result notranslate">
{
   "Flow style": [
      "Mercury", 
      "Venus", 
      "Earth", 
      "Mars", 
      "Jupiter", 
      "Saturn", 
      "Uranus", 
      "Neptune", 
      "Pluto"
   ], 
   
   "Block style": [
      "Mercury", 
      "Venus", 
      "Earth", 
      "Mars", 
      "Jupiter", 
      "Saturn", 
      "Uranus", 
      "Neptune", 
      "Pluto"
   ]
}
</pre>
<h1>YAML - Flow Mappings</h1>
<p>Flow mappings in YAML represent the unordered collection of key value pairs. They are also called as mapping node. Note that keys should be maintained unique. If there is a duplication of keys in flow mapping structure, it will generate an error. The key order is generated in serialization tree.</p>
<h2>Example</h2>
<p>An example of flow mapping structure is shown below &minus;</p>
<pre class="prettyprint notranslate">
%YAML 1.1
paper:
   uuid: 8a8cbf60-e067-11e3-8b68-0800200c9a66
   name: On formally undecidable propositions of  Principia Mathematica and related systems I.
   author: Kurt Gödel.
tags:
   - tag:
      uuid: 98fb0d90-e067-11e3-8b68-0800200c9a66
      name: Mathematics
   - tag:
      uuid: 3f25f680-e068-11e3-8b68-0800200c9a66
      name: Logic
</pre>
<p>The output of mapped sequence (unordered list) in JSON format is as shown below &minus;</p>
<pre class="result notranslate">
{
   "paper": {
      "uuid": "8a8cbf60-e067-11e3-8b68-0800200c9a66",
      "name": "On formally undecidable propositions of Principia Mathematica and related systems I.",
      "author": "Kurt Gödel."
   },
   "tags": [
      {
         "tag": {
            "uuid": "98fb0d90-e067-11e3-8b68-0800200c9a66",
            "name": "Mathematics"
         }
      },
      {
         "tag": {
            "uuid": "3f25f680-e068-11e3-8b68-0800200c9a66",
            "name": "Logic"
         }
      }
   ]
}
</pre>
<p>If you observe this output as shown above, it is observed that the key names are maintained unique in YAML mapping structure.</p>
<h1>YAML - Block Sequences</h1>
<p>The block sequences of YAML represent a series of nodes. Each item is denoted by a leading “-“ indicator.  Note that the “-“ indicator in YAML should be separated from the node with a white space.</p> 
<p>The basic representation of block sequence is given below &minus;</p>
<pre class="result notranslate">
block sequence:
··- one&darr;
  - two : three&darr;
</pre>
<h2>Example</h2>
<p>Observe the following examples for a better understanding of block sequences.</p>
<h3>Example 1</h3>
<pre class="prettyprint notranslate">
port: &amp;ports
  adapter:  postgres
  host:     localhost

development:
  database: myapp_development
  &lt;&lt;: *ports
</pre>
<p>The output of block sequences in JSON format is given below &minus;</p>
<pre class="result notranslate">
{
   "port": {
      "adapter": "postgres",
      "host": "localhost"
   },
   "development": {
      "database": "myapp_development",
      "adapter": "postgres",
      "host": "localhost"
   }
}
</pre>
<h1>YAML - Failsafe Schema</h1>
<p>A YAML schema is defined as a combination of set of tags and includes a mechanism for resolving non-specific tags. The failsafe schema in YAML is created in such a manner that it can be used with any YAML document. It is also considered as a recommended schema for a generic YAML document.</p>
<h2>Types</h2>
<p>There are two types of failsafe schema: <b>Generic Mapping</b> and <b>Generic Sequence</b></p>
<h3>Generic Mapping</h3>
<p>It represents an associative container. Here, each key is unique in the association and mapped to exactly one value. YAML includes no restrictions for key definitions.</p> 
<p>An example for representing generic mapping is given below &minus;</p>
<pre class="prettyprint notranslate">
Clark : Evans
Ingy : döt Net
Oren : Ben-Kiki
Flow style: !!map { Clark: Evans, Ingy: döt Net, Oren: Ben-Kiki }
</pre>
<p>The output of generic mapping structure in JSON format is shown below &minus;</p>
<pre class="result notranslate">
{
   "Oren": "Ben-Kiki", 
   "Ingy": "d\u00f6t Net", 
   "Clark": "Evans", 
   "Flow style": {
      "Oren": "Ben-Kiki", 
      "Ingy": "d\u00f6t Net", 
      "Clark": "Evans"
   }
}
</pre>
<h3>Generic Sequence</h3>
<p>It represents a type of sequence. It includes a collection indexed by sequential integers starting with zero. It is represented with <b>!!seq</b> tag.</p>
<pre class="prettyprint notranslate">
Clark : Evans
Ingy : döt Net
Oren : Ben-Kiki
Flow style: !!seq { Clark: Evans, Ingy: döt Net, Oren: Ben-Kiki }
</pre>
<p>The output for this generic sequence of failsafe</p> 
<pre class="prettyprint notranslate">
schema is shown below:
{
   "Oren": "Ben-Kiki", 
   "Ingy": "d\u00f6t Net", 
   "Clark": "Evans", 
   "Flow style": {
      "Oren": "Ben-Kiki", 
      "Ingy": "d\u00f6t Net", 
      "Clark": "Evans"
   }
}
</pre>
<h1>YAML - JSON Schema</h1>
<p>JSON schema in YAML is considered as the common denominator of most modern computer languages. It allows parsing JSON files. It is strongly recommended in YAML that other schemas should be considered on JSON schema. The primary reason for this is that it includes key value combination which are user friendly. The messages can be encoded as key and can be used as and when needed.</p>
<p>The JSON schema is scalar and lacks a value. A mapping entry in JSON schema is represented in the format of some key and value pair where null is treated as valid.</p> 
<h2>Example</h2>
<p>A null JSON schema is represented as shown below &minus;</p>
<pre class="prettyprint notranslate">
!!null null: value for null key
key with null value: !!null null
</pre>
<p>The output of JSON representation is mentioned below &minus;</p>
<pre class="result notranslate">
{
   "null": "value for null key", 
   "key with null value": null
}
</pre>
<h3>Example</h3>
<p>The following example represents the Boolean JSON schema &minus;</p>
<pre class="prettyprint notranslate">
YAML is a superset of JSON: !!bool true
Pluto is a planet: !!bool false
</pre>
<p>The following is the output for the same in JSON format &minus;</p>
<pre class="result notranslate">
{
   "YAML is a superset of JSON": true, 
   "Pluto is a planet": false
}
</pre>
<h3>Example</h3>
<p>The following example represents the integer JSON schema &minus;</p>
<pre class="result notranslate">
negative: !!int -12
zero: !!int 0
positive: !!int 34
</pre>
The output of integer generated JSON schema is shown below:
<pre class="result notranslate">
{
   "positive": 34, 
   "zero": 0, 
   "negative": -12
}
</pre>
<h3>Example</h3>
<p>The tags in JSON schema is represented with following example &minus;</p>
<pre class="prettyprint notranslate">
A null: null
Booleans: [ true, false ]
Integers: [ 0, -0, 3, -19 ]
Floats: [ 0., -0.0, 12e03, -2E+05 ]
Invalid: [ True, Null, 0o7, 0x3A, +12.3 ]
</pre>
<p>You can find the JSON Output as shown below &minus;</p>
<pre class="result notranslate">
{
   "Integers": [
      0, 
      0, 
      3, 
      -19
   ], 
   
   "Booleans": [
      true, 
      false
   ], 
   "A null": null, 

   "Invalid": [
         true, 
         null, 
         "0o7", 
         58, 
         12.300000000000001
   ], 
   
   "Floats": [
      0.0, 
      -0.0, 
      "12e03", 
      "-2E+05"
   ]
}
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/yaml/yaml_json_schema.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/yaml/yaml_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
