<!DOCTYPE html>
<html lang="en-US">
<head>
<title>DC.js - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="DC.js - Quick Guide - DC.js is an excellent JavaScript library for data analysis in the browser, mobile devices and ultimately helps in creating data visualization. Data visualizatio"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/dcjs/dcjs_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#f69837;
}
a.demo {
    background:#f69837;
}
li.heading {
    background:#f69837;
}
.course-box{background:#f69837}
.home-intro-sub p{color:#f69837}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/dcjs/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/dcjs/images/dcjs-mini-logo.jpg" alt="DC.js Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">DC.js Tutorial</li>
<li><a href="/dcjs/index.htm">DC.js - Home</a></li>
<li><a href="/dcjs/dcjs_introduction.htm">DC.js - Introduction</a></li>
<li><a href="/dcjs/dcjs_installation.htm">DC.js - Installation</a></li>
<li><a href="/dcjs/dcjs_concepts.htm">DC.js - Concepts</a></li>
<li><a href="/dcjs/dcjs_introduction_to_crossfilter.htm">Introduction to Crossfilter</a></li>
<li><a href="/dcjs/dcjs_introduction_to_d3js.htm">Introduction to D3.js</a></li>
<li><a href="/dcjs/dcjs_mixins.htm">DC.js - Mixins</a></li>
<li><a href="/dcjs/dcjs_basemixin.htm">DC.js - baseMixin</a></li>
<li><a href="/dcjs/dcjs_capmixin.htm">DC.js - capMixin</a></li>
<li><a href="/dcjs/dcjs_colormixin.htm">DC.js - colorMixin</a></li>
<li><a href="/dcjs/dcjs_marginmixin.htm">DC.js - marginMixin</a></li>
<li><a href="/dcjs/dcjs_coordinategridmixin.htm">DC.js - coordinateGridMixin</a></li>
<li><a href="/dcjs/dcjs_pie_chart.htm">DC.js - Pie Chart</a></li>
<li><a href="/dcjs/dcjs_line_chart.htm">DC.js - Line Chart</a></li>
<li><a href="/dcjs/dcjs_bar_chart.htm">DC.js - Bar Chart</a></li>
<li><a href="/dcjs/dcjs_composite_chart.htm">DC.js - Composite Chart</a></li>
<li><a href="/dcjs/dcjs_series_chart.htm">DC.js - Series Chart</a></li>
<li><a href="/dcjs/dcjs_scatter_plot.htm">DC.js - Scatter Plot</a></li>
<li><a href="/dcjs/dcjs_bubble_chart.htm">DC.js - Bubble Chart</a></li>
<li><a href="/dcjs/dcjs_heat_map.htm">DC.js - Heat Map</a></li>
<li><a href="/dcjs/dcjs_data_count.htm">DC.js - Data Count</a></li>
<li><a href="/dcjs/dcjs_data_table.htm">DC.js - Data Table</a></li>
<li><a href="/dcjs/dcjs_data_grid.htm">DC.js - Data Grid</a></li>
<li><a href="/dcjs/dcjs_legend.htm">DC.js - Legend</a></li>
<li><a href="/dcjs/dcjs_dashboard_working_example.htm">DC.js - Dashboard Working Example</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">DC.js Useful Resources</li>
<li><a href="/dcjs/dcjs_quick_guide.htm">DC.js - Quick Guide</a></li>
<li><a href="/dcjs/dcjs_useful_resources.htm">DC.js - Useful Resources</a></li>
<li><a href="/dcjs/dcjs_discussion.htm">DC.js - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>DC.js - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/dcjs/dcjs_dashboard_working_example.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/dcjs/dcjs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>DC.js - Introduction</h1>
<p>DC.js is an excellent JavaScript library for data analysis in the browser, mobile devices and ultimately helps in creating data visualization. Data visualization is the presentation of data in a pictorial or graphical format. The primary goal of data visualization is to communicate information clearly and efficiently via statistical graphics, plots and information graphics. Data visualizations can be developed and integrated in regular web and even mobile applications using different JavaScript frameworks.</p>
<h2>What is DC.js?</h2>
<p>DC.js is a charting library for exploring large multi-dimensional datasets. It relies on the D3.js engine to render charts in a CSS-friendly SVG format. It allows complex data visualization to be rendered and has a designed dashboard having Bar Charts, Scatter Plots, Heat Maps, etc. DC.js is built to work with <b>Crossfilter</b> for data manipulation. DC.js enables a single (large) dataset to be visualized with many interconnected charts with an advanced auto-filtering option.</p>
<h2>Why Do We Need DC.js?</h2>
<p>In general, data visualization is quite a complex process and carrying it out on the client side requires extra skill. DC.js enables us to create almost any kind of complex data visualization using a simpler programming model. It is an open source, extremely easy to pick up JavaScript library, which allows us to implement neat custom visualizations in a very short time.</p>
<p>DC.js charts are data driven and very reactive. In addition, it delivers instant feedback to user interaction using the <b>Crossfilter Library</b>.</p>
<h2>DC.js Features</h2>
<p>DC.js is one of the best data visualization framework and it can be used to generate simple as well as complex visualizations. Some of the salient features are listed below &minus;</p>
<ul class="list">
<li>Extremely flexible.</li>
<li>Easy to use.</li>
<li>Fast rendering of the charts.</li>
<li>Supports large multi-dimensional datasets.</li>
<li>Open source JavaScript library.</li>
</ul>
<h2>Dc.js Benefits</h2>
<p>DC.js is an open source project and it requires lesser code when compared to others. It comes with the following benefits &minus;</p>
<ul class="list">
<li>Great data visualization.</li>
<li>Performs graphical filtering.</li>
<li>Fast creation of charts and dashboards.</li>
<li>Creation of highly interactive dashboards.</li>
</ul>
<p>In the next chapter, we will understand how to install D3.js on our system.</p>
<h1>DC.js - Installation</h1>
<p>In this chapter, we will learn how to setup the DC.js development environment. Before we start, we need the following components &minus;</p>
<ul class="list">
<li>DC.js library</li>
<li>Editor</li>
<li>Web browser</li>
<li>Web server</li>
</ul>
<p>Let us go through the steps one by one in detail.</p>
<h2>DC.js Installation</h2>
<p>DC installation is very easy to set up. Follow the below steps to install <i>DC</i> on your machine.</p>
<h3>Download DC Library</h3>
<p>DC is an open-source library; use the link <a target="_blank" rel="nofollow" href="https://github.com/dc-js/dc.js/releases">https://github.com/dc-js/dc.js/releases</a> to download the file.</p>
<p>Download the latest version of the DC file. (As of now, the latest version is 2.0.2.). After the download is completed, unzip the DC folder and paste it to your project's root folder or any other folder, where you want to keep all your library files.</p>
<p>The sample HTML page is as shown below.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script&gt;
         // write your dc code here.. 
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>DC is a JavaScript code, so we have to write all the DC codes within the “script” tag. We may need to manipulate the existing DOM elements, hence it is advisable to write the DC code just before the end of the “body” tag.</p>
<h2>DC.js Editor</h2>
<p>We will need an editor to start writing the code. There are some great IDEs (Integrated Development Environment) with support for JavaScript such as  &minus;</p>
<ul class="list">
<li>Visual Studio Code</li>
<li>WebStorm</li>
<li>Eclipse</li>
<li>SublimeText</li>
</ul>
<p>These IDEs provide intelligent code completion as well as support some of the modern JavaScript frameworks. If we do not have any fancy IDE, we can always use a basic editor such as Notepad, VI, etc.</p>
<h2>Web Browser</h2>
<p>DC.js works on all browsers except IE8 and lower.</p>
<h2>Web Server</h2>
<p>Most browsers serve local HTML files directly from the local file system. However, there are certain restrictions when it comes to loading external data files. In the subsequent chapters of this tutorial, we will be loading data from external files such as CSV and JSON. Therefore, it will be easier for us, if we set up the web server right from the beginning.</p>
<p>We can use any web server, which we are comfortable with. For example – IIS, Apache, etc.</p>
<h3>Viewing a Page</h3>
<p>In most cases, we can just open the HTML file in a web browser to view it. However, when loading external data sources, it is more reliable to run a local webserver and view the page from the server (<b>http://localhost:8080</b>).</p>
<h1>DC.js - Concepts</h1>
<p>DC.js is simple and easy for most front-end developers. It enables building basic charts quickly, even without any knowledge of D3.js. Before, we start using DC.js to create visualization; we need to get familiar with web standards. The following web standards are heavily used in D3.js, which is the foundation of DC.js for rendering charts.</p>
<ul class="list">
<li>Hypertext Markup Language (HTML)</li>
<li>Document Object Model (DOM)</li>
<li>Cascading Style Sheets (CSS)</li>
</ul>
<p>Let us understand each of these web standards in detail.</p>
<h2>Hypertext Markup Language (HTML)</h2>
<p>As we know, HTML is used to structure the content of the webpage. It is stored in a text file with the extension “.html”.</p>
<p>A typical basic HTML example looks like as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;meta charset = "UTF-8"&gt;
      &lt;title&gt;&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;

   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Document Object Model (DOM)</h2>
<p>When a HTML page is loaded by a browser, it is converted to a hierarchical structure. Every tag in HTML is converted to an element / object in the DOM with a parent-child hierarchy. It makes our HTML more logically structured. Once the DOM is formed, it becomes easier to manipulate (add/modify/remove) the elements on the page.</p>
<p>Let us understand the DOM using the following HTML document &minus;</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;title&gt;My Document&lt;/title&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div&gt;
         &lt;h1&gt;Greeting&lt;/h1&gt;
         &lt;p&gt;Hello World!&lt;/p&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The document object model of the above HTML document is as follows &minus;</p>
<img src="/dcjs/images/dom.jpg" alt="DOM" />
<h2>Cascading Style Sheets (CSS)</h2>
<p>While HTML gives a structure to the webpage, CSS styles make the webpage more pleasant to look at. CSS is a style sheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG or XHTML). CSS describes how elements should be rendered on a webpage.</p>
<h2>JavaScript</h2>
<p>JavaScript is a loosely typed client side scripting language that executes in the user's browser. JavaScript interacts with html elements (DOM elements) in order to make the web user interface interactive. JavaScript implements the ECMAScript standards, which includes core features based on ECMA-262 specification as well as other features, which are not based on ECMAScript standards. JavaScript knowledge is a prerequisite for DC.js.</p>
<h2>Components</h2>
<p>DC.js is based on two excellent JavaScript libraries, which are  &minus;</p>
<ul class="list">
<li>Crossfilter </li>
<li>D3.js</li>
</ul>
<h3>Crossfilter</h3>
<p>Crossfilter is a JavaScript library for exploring large multivariate datasets in the browser. It is used for Grouping, Filtering, and Aggregating tens or hundreds of thousands of rows of raw data very quickly.</p>
<h3>D3.js</h3>
<p>D3.js stands for Data-Driven Documents. D3.js is a JavaScript library for manipulating documents based on data. D3 is Dynamic, Interactive, Online Data Visualizations Framework and used in large number of websites. D3.js is written by <b>Mike Bostock</b>, created as a successor to an earlier visualization toolkit called <b>Protovis</b>. D3.js is used on hundreds of thousands of websites.</p>
<h1>DC.js - Introduction to Crossfilter</h1>
<p>Crossfilter is a multi-dimensional dataset. It supports extremely fast interaction with datasets containing a million or more records.</p>
<h2>Basic Concepts</h2>
<p>Crossfilter is defined under the crossfilter namespace. It uses semantic versioning. Consider a crossfilter object loaded with a collection of fruits that is defined below &minus;</p>
<pre class="prettyprint notranslate">
var fruits = crossfilter ([
   { name: “Apple”, type: “fruit”, count: 20 },
   { name: “Orange”, type: "fruit”, count: 10 },
   { name: “Grapes”, type: “fruit”, count: 50 },
   { name: “Mango”,  type: “fruit”, count: 40 }
]);
</pre>
<p>If we need to perform the total records in a group, we can use the following function &minus;</p>
<pre class="prettyprint notranslate">
var count = fruits.groupAll().reduceCount().value();
</pre>
<p>If we want to filter by a specific type &minus;</p>
<pre class="prettyprint notranslate">
var filtering = fruits.dimension(function(d) { return d.type; });
filtering.filter(“Grapes”)
</pre>
<p>Similarly, we can perform grouping with Crossfilter. To do this, we can use the following function &minus;</p>
<pre class="prettyprint notranslate">
var grouping = filtering.group().reduceCount();
var first = grouping.top(2);
</pre>
<p>Hence, Crossfilter is built to be extremely fast. If you want to recalculate groups as filters are applied, it calculates incrementally. Crossfilter dimensions are very expensive.</p>
<h3>Crossfilter API</h3>
<p>Let us go through the notable Crossfilter APIs in detail.</p>
<ul class="list">
<li><p><b>crossfilter([records])</b> &minus; It is used to construct a new crossfilter. If the record is specified, then it simultaneously adds the specified records. Records can be any array of JavaScript objects or primitives.</p></li>
<li><p><b>crossfilter.add(records)</b> &minus; Adds the specified records to the crossfilter.</p></li>
<li><p><b>crossfilter.remove()</b> &minus; Removes all records that match the current filters from the crossfilter.</p></li>
<li><p><b>crossfilter.size()</b> &minus; Returns the number of records in the crossfilter.</p></li>
<li><p><b>crossfilter.groupAll()</b> &minus; It is a function for grouping all records and reducing to a single value.</p></li>
<li><p><b>crossfilter.dimension(value)</b> &minus; It is used to construct a new dimension using the specified value accessor function.</p></li>
<li><p><b>dimension.filter(value)</b> &minus; It is used to filter records for dimension's match value, and returns the dimension.</p></li>
<li><p><b>dimension.filterRange(range)</b> &minus; Filters records for dimension's value that are greater than or equal to range[0], and less than range[1].</p></li>
<li><p><b>dimension.filterAll()</b> &minus; Clears any filters on this dimension.</p></li>
<li><p><b>dimension.top(k)</b> &minus; It is used to return a new array containing the top k records, according to the natural order of this dimension.</p></li>
<li><p><b>dimension.bottom(k)</b> &minus; It is used to return a new array containing the bottom k records, according to the natural order of this dimension.</p></li>
<li><p><b>dimension.dispose()</b> &minus; It is used to remove the dimension from the crossfilter.</p></li>
</ul>
<p>In the next chapter, we will understand in brief about D3.js.</p>
<h1>DC.js - Introduction to D3.js</h1>
<p>D3.js is a JavaScript library used to create interactive visualizations in the browser. The D3 library allows us to manipulate elements of a webpage in the context of a dataset. These elements can be HTML, SVG, or Canvas elements, and can be introduced, removed, or edited according to the contents of the dataset. It is a library for manipulating DOM objects. D3.js can be a valuable aid in data exploration. It gives you control over your data's representation and lets you add data interactivity.</p>
<p>D3.js is one of the premier framework when compared to other libraries. This is because; it works on the web and data visualizations and is of enterprise grade. Another reason is its great flexibility, which enables developers around the world to create many advanced charts. Also, it has extended its functionality to a great extent.</p>
<p>Let us understand the basic concepts of D3.js, which are as follows &minus;</p>
<ul class="list">
<li>Selections</li>
<li>Data join</li>
<li>SVG</li>
<li>Transition</li>
<li>Animation</li>
<li>D3.js API</li>
</ul>
<p>Let us understand each of these concepts in detail.</p>
<h2>Selections</h2>
<p>Selections is one of the core concept in D3.js. It is based on the CSS Selector concept. Those who have used and are aware of JQuery already can easily understand the selections. It enables us to select the DOM based on CSS selectors and then provide options to modify or append and remove the elements of DOM.</p>
<h2>Data Join</h2>
<p>Data join is another important concept in D3.js. It works along with selections and enables us to manipulate the HTML document with respect to our dataset (a series of numerical values). By default, D3.js gives dataset the highest priority in its methods and each item in the dataset corresponds to a HTML element.</p>
<h2>SVG</h2>
<p>SVG stands for <b>Scalable Vector Graphics</b>. SVG is an XML based vector graphics format. It provides options to draw different shapes such as Lines, Rectangles, Circles, Ellipses, etc. Hence, designing visualizations with SVG gives you more power and flexibility.</p>
<h3>Transformation</h3>
<p>SVG provides options to transform a single SVG shape element or group of SVG elements. SVG transform supports Translate, Scale, Rotate and Skew.</p>
<h2>Transition</h2>
<p>Transition is the process of changing from one state to another of an item. D3.js provides a transition() method to perform transition in the HTML page.</p>
<h2>Animation</h2>
<p>D3.js supports animation through transition. Animation can be done with the proper use of transition. Transitions are a limited form of key frame animation with only two key frames: <b>start</b> and <b>end</b>. The starting key frame is typically the current state of the DOM, and the ending key frame is a set of attributes, styles and other properties you specify. Transitions are well suited for transitioning to a new view without a complicated code that depends on the starting view.</p>
<h2>D3.js API</h2>
<p>Let us understand some of the important D3.js API's methods in brief.</p>
<h3>Collections API</h3>
<p>A collection is simply an object that groups multiple elements into a single unit. It is also called as a container. It contains Objects, Maps, Sets and Nests.</p>
<h3>Paths API</h3>
<p>Paths are used to draw rectangles, circles, ellipses, polylines, polygons, straight lines and curves. SVG Paths represent the outline of a shape that can be stroked, filled, used as a clipping path, or any combination of all three.</p>
<h3>Axis API</h3>
<p>D3.js provides functions to draw axes. An axis is made of lines, ticks and labels. An axis uses scale, thus each axis will need to be given a scale to work with.</p>
<h3>Zooming API</h3>
<p>Zooming helps to scale your content. You can focus on a particular region using the click-and-drag approach.</p>
<h3>Delimiter-Separated Values API</h3>
<p>A delimiter is a sequence of one or more characters used to specify the boundary between separate, independent regions in plain text or other data. A field delimiter is a sequence of comma-separated values. In short, the delimiter-separated values are Comma-Separated Values (CSV) or Tab-Separated Values (TSV).</p>
<h1>DC.js - Mixins</h1>
<p>Mixin is an <b>abstract functional object</b> having a lot of pre-defined functions, which can be mixed and used in JavaScript classes. However, they cannot be used as stand-alone. For example, DC.js has a <b>Mixin</b> and <b>dc.baseMixin</b>, which cannot be used as it is, but is used by all the DC chart classes such as the Line Chart, Pie Chart, etc. DC.js has a limited set of useful Mixins to create charts easily and efficiently. They are as follows &minus;</p>
<ul class="list">
<li><p><b>baseMixin</b> &minus; baseMixin provides common functionality for all type of charts. It integrates crossfilter and d3.js JavaScript library and provides a simple set of function to create charts with limited knowledge of D3.js.</p></li>
<li><p><b>capMixin</b> &minus; capMixin provides grouping support for the data elements below a limit (cap).</p></li>
<li><p><b>colorMixin</b> &minus; colorMixin provides color support for the charts.</p></li>
<li><p><b>marginMixin</b> &minus; marginMixin provides margin support for the charts.</p></li>
<li><p><b>coordinateGridMixin</b> &minus; coordinateGridMixin provides coordinate support for the charts.</p></li>
<li><p><b>stackMixin</b> &minus; stackMixin provides stacking support using the <b>d3.layout.stack</b>.</p></li>
<li><p><b>bubbleMixin</b> &minus; bubbleMixin provides bubble support for the charts.</p></li>
</ul>
<p>Let us understand all these mixins in detail in the subsequent chapters.</p>
<h1>DC.js - baseMixin</h1>
<p><b>baseMixin</b> provides basic methods needed to create any type of a chart. It ranges from setting the width of the chart to advanced filtering of the chart.</p>
<h2>General Chart Options</h2>
<p>The <b>basicMixin</b> provides many chart methods to get / set the properties of the charts. They are as follows,</p>
<ul class="list">
<li><p><b>chartID()</b> &minus; Returns the internal numeric ID of the chart.</p></li>
<li><p><b>chartGroup( [chartGroup])</b> &minus; Gets or sets the group to which the chart belongs. In DC.js, charts can be grouped into a single set. All charts in a group are expected to share the same Crossfilter dataset. They are rendered as well as redrawn simultaneously.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.chartGroup('dashboard');
</pre>
<ul class="list">
<li><p><b>minWidth( [minWidth])</b> &minus; Sets the minimum width of the chart.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.minWidth(300);
</pre>
<ul class="list">
<li><p><b>width( [width])</b> &minus; Gets or sets the width of the chart.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.width(600);
</pre>
<ul class="list">
<li><p><b>minHeight( [minHeight])</b> &minus; Gets or sets the minimum height of the chart.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.minHeight(300);
</pre>
<ul class="list">
<li><p><b>height( [height])</b> &minus; Gets or sets the height of the chart.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.height(300);
</pre>
<ul class="list">
<li><p><b>title( [titleFunction])</b> &minus; Gets or sets the title function. Title is the SVG Element's title of the child element in the chart (e.g. a single bar in a bar chart). Title in the charts are represented as tooltip in the browser.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.title(function(data) { 
   return d.key + ': ' + d.value; 
});
</pre>
<ul class="list">
<li><p><b>label( labelFunction[??])</b> &minus; Similar to the title() method, but it sets the label instead of the title.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.label(function(data) { 
   return d.key + ': ' + d.value; 
});
</pre>
<ul class="list">
<li><p><b>options(opts)</b> &minus; Sets any chart option using the JavaScript object. Each key represents the corresponding method available in the charts and the matched method will be invoked with the relevant value.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.options ({
   'width' : 300,
   'height' : 300
});
</pre>
<p style="padding-left:10%">Here, width() and height() method will be fired with the specified value.</p>
<ul class="list">
<li><p><b>legend( [legend])</b> &minus; Attaches a legend to the chart. The legend can be created using the <b>d3.legend()</b> method.</p></li>
</ul>
<pre class="prettyprint notranslate">
mychart.legend (
   dc.legend()
      .x(500)
      .y(50)
      .itemHeight(12)
      .gap(4))
</pre>
<ul class="list">
<li><p><b>anchor( parent[??])</b> &minus; Sets the root SVGElement to be either an existing chart's root or any valid D3 single selectors. Optionally, the chart group can also be set using the second argument.</p></li>
<li><p><b>anchorName()</b> &minus; Gets the DOM ID of the chart's anchored location.</p></li>
<li><p><b>svg( [svgElement])</b> &minus; Returns the SVGElement of the chart.</p></li>
<li><p><b>resetSvg()</b> &minus; Resets the SVG container in the DOM.</p></li>
<li><p><b>root( [rootElement])</b> &minus; Gets the root container of the chart.</p></li>
</ul>
<h2>Data Options</h2>
<p><b>basicMixin</b> provides methods to set the data for the charts. The data is set as Crossfilter dimension and group. In addition, it provides an option to get the underlying dataset.</p>
<ul class="list">
<li><p><b>dimension( [dimension])</b> &minus; Sets or gets the dimension of the chart. A dimension is any valid Crossfilter dimension.</p></li>
</ul>
<pre class="prettyprint notranslate">
var mycrossfilter = crossfilter([]);
var ageDimension = mycrossfilter.dimension(dc.pluck('age'));
mychart.dimension(ageDimension);
</pre>
<ul class="list">
<li><p><b>group( group[??])</b> &minus; Sets or gets the group of the chart. A group is any valid Crossfilter group. The group can be named using the second argument to use it later in the code.</p></li>
</ul>
<pre class="prettyprint notranslate">
var mycrossfilter = crossfilter([]);
var ageDimension = mycrossfilter.dimension(dc.pluck('age'));
mychart.dimension(ageDimension);
mychart.group(ageDimension.group(crossfilter.reduceCount()));
</pre>
<ul class="list">
<li><p><b>data( [callback])</b> &minus; Sets the data callback and enables us to get the underlying chart's data set.</p></li>
</ul>
<pre class="prettyprint notranslate">
// get all groups
mychart.data(function (group) { 
   return group.all(); 
});

// get top five groups
mychart.data(function (group) { 
   return group.top(5); 
});
</pre>
<ul class="list">
<li><p><b>keyAccessor( [keyAccessor])</b> &minus; Gets or sets the key accessor function. It is used to retrieve the key from the underlying Crossfilter group. The key is used for slices in a pie chart and x-axis in the line / bar chart. The default <b>key accessor</b> function is as follows &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
chart.keyAccessor(function(d) { return d.key; });
</pre>
<ul class="list">
<li><p><b>valueAccessor( [valueAccessor])</b> &minus; Gets or sets the value accessor function. It is used to retrieve the value from the underlying Crossfilter group. The value is used for slice size in the pie chart and y-axis position in the line / bar chart. The default <b>value accessor</b> function is as follows &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
chart.valueAccessor(function(d) { return d.value; });
</pre>
<ul class="list">
<li><p><b>ordering( [orderFunction])</b> &minus; Gets or sets an ordering function to order ordinal dimension. By default, a chart uses <b>crossfilter.quicksort.by</b> to sort the elements.</p></li>
</ul>
<pre class="prettyprint notranslate">
_chart.ordering(dc.pluck('key'));
</pre>
<h2>Filter Options</h2>
<p>Filtering is one of the highlights of DC.js. We can apply one or more filters directly on the chart object using the filter() method and call chart's redrawGroup() or dc.redrawAll() method to see the filtering effect on the chart. By default, a chart object takes one or more filters using the filter() method, applies it on the underlying Crossfilter() data set, gets the filtered data from the Crossfilter and redraws the charts using the filtered data. DC.js provides the following methods to handle filtering in the chart.</p>
<h3>Filter( [filter])</h3>
<p>Gets or sets the filter for the chart. If a supplied filter is new, then it will be added to the chart's filter collection and applied on the underlying dataset. If the filter supplied is already available in the chart's filter collection, then it will remove the filter and do the relevant filtering on the underlying data. In short, filter method will toggle the supplied filters.</p>
<pre class="prettyprint notranslate">
mychart.filter(10);
</pre>
<p>To remove all filters, call the filter method with <b>null</b> value. The filter may be any one of the following items &minus;</p>
<ul class="list">
<li><p><b>null</b> &minus; Chart will remove all the filters previously applied.</p></li>
<li><p><b>single value</b> &minus; Chart will call the underlying Crossfilter's filter method and send the supplied value.</p></li>
<li><p><b>dc.filters.RangedFilter</b> &minus; It accepts two values, low and high. Chart will filter out all the data, except the value in the range between low and high value.</p></li>
<li><p><b>dc.filters.TwoDimensionalFilter</b> &minus; It accepts two-dimensional values that are used in the heat map.</p></li>
<li><p><b>dc.filters.RangedTwoDimensionalFilter</b> &minus; It is similar to the dc.filters.RangedFilter, except that it accepts a two-dimensional value only used in scatter plots.</p></li>
</ul>
<h3>hasFilter( [filter])</h3>
<p>Checks whether the supplied filter is available or not in the chart.</p>
<h3>replaceFilter( [filter])</h3>
<p>Replaces the current filter of the chart with the supplied filter.</p>
<h3>filters()</h3>
<p>Returns all current filters associated with the chart.</p>
<h3>filterAll()</h3>
<p>Clears all filters associated with the chart.</p>
<h3>filterHandler( [filterHandler])</h3>
<p>Gets or sets a filter handler function. Filter handler function is used by the chart to filter the underlying dataset using the filter. Chart has a Default Filter Handler Function and it can be replaced by a Custom Filter Handler Function using this method. The default filter handler is as follows &minus;</p>
<pre class="prettyprint notranslate">
chart.filterHandler(function (dimension, filters) {
   if (filters.length === 0) {
      
      // the empty case (no filtering)
      dimension.filter(null);
   } else if (filters.length === 1 &amp;&amp; !filters[0].isFiltered) {
      
      // single value and not a function-based filter
      dimension.filterExact(filters[0]);
   } else if (filters.length === 1 &amp;&amp; filters[0].filterType === 'RangedFilter') {
      
      // single range-based filter
      dimension.filterRange(filters[0]);
   } else {
      
      // an array of values, or an array of filter objects
      dimension.filterFunction(function (d) {
         
         for (var i = 0; i &lt; filters.length; i++) {
            var filter = filters[i];
               
            if (filter.isFiltered &amp;&amp; filter.isFiltered(d)) {
               return true;
            } else if (filter &lt;= d &amp;&amp; filter &gt;= d) {
               return true;
            }
         }
         return false;
      });
   }
   return filters;
});
</pre>
<h3>hasFilterHandler( [hasFilterHandler])</h3>
<p>Gets or sets a has-filter handler function. This function is used by the chart to check whether a filter is available in the chart's filter collection or not. The default has-filter handler is as follows &minus;</p>
<pre class="prettyprint notranslate">
chart.hasFilterHandler(function (filters, filter) {
   if (filter === null || typeof(filter) === 'undefined') {
      return filters.length &gt; 0;
   }
   
   return filters.some(function (f) {
      return filter &lt;= f &amp;&amp; filter &gt;= f;
   });
});
</pre>
<h3>addFilterHandler( [addFilterHandler])</h3>
<p>Gets or sets the add-filter handler function. This function is used by the chart to add the filter into the chart's filter collection. The default add-filter handler is as follows &minus;</p>
<pre class="prettyprint notranslate">
chart.addFilterHandler(function (filters, filter) {
   filters.push(filter);
   return filters;
});
</pre>
<h3>removeFilterHandler( [removeFilterHandler])</h3>
<p>Gets or sets the remove-filter handler function. This function is used by the chart to remove the filter from the chart's filter collection. The default remove-filter is as follows &minus;</p>
<pre class="prettyprint notranslate">
chart.removeFilterHandler(function (filters, filter) {
   for (var i = 0; i &lt; filters.length; i++) {
      
      if (filters[i] &lt;= filter &amp;&amp; filters[i] &gt;= filter) {
         filters.splice(i, 1);
         break;
      }
      
   }
   return filters;
});
</pre>
<h3>resetFilterHandler( [resetFilterHandler])</h3>
<p>Gets or sets the reset-filter handler function. This function is used by the chart to reset the chart's filter collection. The default reset-filter is as follows &minus;</p>
<pre class="prettyprint notranslate">
function (filters) {
   return [];
}
</pre>
<h3>filterPrinter( [filterPrinterFunction])</h3>
<p>Gets or sets the printer-filter function. This function is used by the chart to print the filter information.</p>
<h3>commitHandler()</h3>
<p>Gets or sets the commit handler. The purpose of the commit handler is to send the filtered data to the server asynchronously.</p>
<h2>Event Options</h2>
<p>DC.js defines a limited set of events to do some functionalities such as Filtering, Zooming, etc. The list of events defined in the DC.js are as follows &minus;</p>
<ul class="list">
<li><p><b>renderlet</b> &minus; Fired after transitions are redrawn and rendered.</p></li>
<li><p><b>pretransition</b> &minus; Fired before the transitions start.</p></li>
<li><p><b>preRender</b> &minus; Fired before the chart rendering.</p></li>
<li><p><b>postRender</b> &minus; Fired after the chart finishes rendering including all the renderlet's logic.</p></li>
<li><p><b>preRedraw</b> &minus; Fired before chart redrawing.</p></li>
<li><p><b>postRedraw</b> &minus; Fired after the chart finishes redrawing including all the renderlet's logic.</p></li>
<li><p><b>filtered</b> &minus; Fired after a filter is applied, added or removed.</p></li>
<li><p><b>zoomed</b> &minus; Fired after a zoom is triggered.</p></li>
</ul>
<p><b>basicMixin</b> provides a method, <b>on(event, listener)</b> to set the callback function for all the above defined events.</p>
<ul class="list">
<li><p><b>on(event, listener)</b> &minus; Sets the callback or listener function for the specific event.</p></li>
<li><p><b>onClick(datum)</b> &minus; It is passed to D3 as the onClick handler for each chart. The default behavior is to filter on the clicked datum (passed to the callback) and redraw the chart group.</p></li>
</ul>
<h2>Rendering Options</h2>
<p>The basicMixin provides a list of methods to render the charts. They are used to draw the chart and they are as follows &minus;</p>
<ul class="list">
<li><p><b>render()</b> &minus; Renders the chart. Generally, it will be used first, when the chart is drawn.</p></li>
<li><p><b>renderGroup()</b> &minus; Renders all the charts in the group as this chart belongs.</p></li>
<li><p><b>renderLabel( [renderLabel])</b> &minus; Turns on/off label rendering.</p></li>
<li><p><b>renderTitle( [renderTitle])</b> &minus; Turns on/off title rendering.</p></li>
<li><p><b>redraw()</b> &minus; Redraws the entire chart.</p></li>
<li><p><b>redrawGroup()</b> &minus; Redraws all charts in the group as this chart belongs.</p></li>
</ul>
<h2>Transition Options</h2>
<p>The basicMixin provides methods to set the transition effect of the chart and they are as follows &minus;</p>
<ul class="list">
<li><p><b>transitionDelay( [delay])</b> &minus; Sets or gets the animation transition delay (in milliseconds) for this chart instance.</p></li>
<li><p><b>transitionDuration( [duration])</b> &minus; Sets or gets the animation transition duration (in milliseconds) for this chart instance.</p></li>
<li><p><b>useViewBoxResizing( [useViewBoxResizing])</b> &minus; If set, resizes the chart according to the SVG viewbox attributes.</p></li>
<li><p><b>controlsUseVisibility( [controlsUseVisibility])</b> &minus; if set, uses the visibility attribute instead of the display attribute to show / hide a chart reset and filter controls.</p></li>
</ul>
<p>In the next chapter, we will understand capMixin.</p>
<h1>DC.js - capMixin</h1>
<p><b>capMixin</b> enables to group the list of data element below a certain value as ‘Others’. It is applicable in both row and pie charts. The hierarchy of the capMixin is as defined in the diagram below.</p>
<img src="/dcjs/images/capmixin.jpg" alt="capMixin" />
<p>capMixin provides four methods to find the Others section and they are as follows &minus;</p>
<p><b>Method 1: cap( [count])</b> &minus; Gets or sets the count of elements that will be included in the cap.</p>
<p><b>Method 2: othersGrouper( [grouperFunction])</b> &minus; Gets or sets the function to do the ‘Others’ group. The default function provided is as follows.</p>
<pre class="prettyprint notranslate">
chart.othersGrouper(function (topItems, restItems) {
   var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),
   restKeys = restItems.map(_chart.keyAccessor());
   
   if (restItemsSum &gt; 0) {
      return topItems.concat([{
         others: restKeys,
         key: _chart.othersLabel(),
         value: restItemsSum
      }]);
   }
   return topItems;
});
</pre>
<p><b>Method 3: othersLabel( [label])</b> &minus; Gets or sets the label for ‘Others’ group.</p>
<p><b>Method 4: takeFront( [takeFront])</b> &minus; Gets or sets the direction of capping. If set, the chart takes the front items from the sorted array of data elements; otherwise it will take the last items.</p>
<h1>DC.js - colorMixin</h1>
<p><b>colorMixin</b> provides the color support for all the charts, which need to visualize using colors. The hierarchy of the colorMixin is defined in the diagram below.</p>
<img src="/dcjs/images/colormixin.jpg" alt="colorMixin" />
<p>colorMixin provides the following list of methods to work with colors and they are as follows &minus;</p>
<h2>colorAccessor( [colorAccessor])</h2>
<p>Gets or sets the color accessor function. This will map a distinct color value in the color scale for each data point in the underlying Crossfilter group. The default color accessor is as follows &minus;</p>
<pre class="prettyprint notranslate">
mychart.colorAccessor(function (d, i){return i;})
</pre>
<h2>colorDomain( [domain])</h2>
<p>Gets or sets the current domain for the color mapping function and it must be supplied as an array.</p>
<h2>calculateColorDomain()</h2>
<p>Sets the color domain by determining the min and max values of the data element found using the colorAccessor() function.</p>
<h2>colors( [colorScale])</h2>
<p>Gets or sets a color scale. It accepts the <b>d3.scale</b>.</p>
<pre class="prettyprint notranslate">
chart.colors(d3.scale.category20b());
chart.colors(d3.scale.ordinal().range(['red','green','blue']));
</pre>
<h2>linearColors(r)</h2>
<p>A shortcut method to set interpolated linear color scale.</p>
<pre class="prettyprint notranslate">
chart.linearColors(["#4575b4", "#ffffbf", "#a50026"]);
</pre>
<h2>ordinalColors(r)</h2>
<p>A shortcut method to set the ordinal color scale.</p>
<pre class="prettyprint notranslate">
chart.ordinalColors(['red','green','blue']);
</pre>
<h1>DC.js - marginMixin</h1>
<p><b>marginMixin</b> provides margin utility functions for both the Row Chart and Coordinate Grid Charts. The hierarchy of the marginMixin is defined in the diagram below.</p>
<img src="/dcjs/images/marginmixin.jpg" alt="marginMixin" />
<p>marginMixin provides a single method to set the margin for coordinated axis based charts.</p>
<h2>margins( [margins])</h2>
<p>Gets or sets the left, right, top and bottom margin of the chart. The default margin of the chart is as follows &minus;</p>
<pre class="result notranslate">
a. Right - 50
a. Left - 30
a. Top - 10
a. Bottom - 30
</pre>
<p></p>
<pre class="prettyprint notranslate">
var rightMargin = chart.margins().right; // 50 by default
chart.margins().bottom = 60;
</pre>
<h1>DC.js - coordinateGridMixin</h1>
<p>The Coordinate &amp; Axis also termed as <b>coordinateGridMixin</b> is designed to support a number of coordinate grid based concrete chart types such as Bar Chart, Line Chart, etc. The hierarchy of coordinateGridMixin is defined in the diagram below.</p>
<img src="/dcjs/images/coordinategridmixin.jpg" alt="coordinateGridMixin" />
<p>The coordinateGridMixin supports a number of methods to reduce the workload in creating the coordinate axis and they are as follows &minus;</p>
<ul class="list">
<li>brushOn( [brushOn])</li>
<li>chartBodyG( [body])</li>
<li>clipPadding( [pad])</li>
<li>elasticX( [X])</li>
<li>focus( [range])</li>
<li>g( [root])</li>
<li>isOrdinal()</li>
<li>mouseZoomable( [Zoom])</li>
<li>rangeChart( [range])</li>
<li>round(r)</li>
<li>xAxisMax()</li>
<li>xAxisMin()</li>
<li>xUnitCount()</li>
</ul>
<p>Let us discuss each of these methods in brief.</p>
<h2>brushOn( [brushOn])</h2>
<p>It is a brush-based range filter. You can set it On/Off. If brushing is on, the user can drag the mouse across a chart. Turning on can disable other interactive elements on the chart such as highlighting, tool tips and reference lines. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.brushOn = function (brushOn) {
   if (!arguments.length) {
      return _brushOn;
   }
   _brushOn = brushOn;
   return chart;
};
</pre>
<h2>chartBodyG( [body])</h2>
<p>It is used to retrieve the SVG group for the chart body. You can call this function as shown below &minus;</p>
<pre class="prettyprint notranslate">
chart.chartBodyG = function (body) {
   if (!arguments.length) {
      return _chartBodyG;
   }
};
</pre>
<h2>clipPadding( [pad])</h2>
<p>It is used to get or set the padding in pixels for the clip path. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.clipPadding = function (pad) {
   if (!arguments.length) {
      return _clipPadding;
   }   
};
</pre>
<h2>elasticX( [X])</h2>
<p>This method is used to turn on/off elastic x-axis behavior. If the x-axis elasticity is turned on, then the grid chart will attempt to recalculate the x-axis range. It triggers a redraw event that is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.elasticX = function (X) {
   if (!arguments.length) {
      return _x;
   }
}
</pre>
<p>Similarly, you can perform elasticY( [Y]).</p>
<h2>focus( [range])</h2>
<p>This method is used to zoom the chart to focus on the given range. The given range should be an array containing only two elements ([start, end]).</p>
<h2>g( [root])</h2>
<p>This method is used to get or set the root g element.</p>
<h2>isOrdinal()</h2>
<p>This method is used to return the chart ordinal xUnits. Most charts behave differently with ordinal data and use the result of this method to trigger the appropriate logic.</p>
<h2>mouseZoomable( [Zoom])</h2>
<p>This method is used to set or get mouse zoom capability.</p>
<h2>rangeChart( [range])</h2>
<p>It is used to get or set the range selection chart associated with the instance.</p>
<h2>round(r)</h2>
<p>This method is used to set or get the rounding function used to quantize the selection when brushing is enabled.</p>
<h2>xAxisMax()</h2>
<p>Calculates the maximum x value to display in the chart. Similarly, we can perform for Y-axis.</p>
<h2>xAxisMin()</h2>
<p>Calculates the minimum x value to display in the chart. Similarly, we can perform for Y-axis.</p>
<h2>xUnitCount()</h2>
<p>Returns the number of units displayed on the x-axis. Similarly, we can perform for Y-axis.</p>
<h1>DC.js - Pie Chart</h1>
<p>A pie chart is a circular statistical graph. It is divided into slices to show a numerical proportion. This chapter explains how to draw a pie chart using DC.js in detail.</p>
<h2>Pie Chart Methods</h2>
<p>Before moving on to draw a pie chart, we should understand the <b>dc.pieChart</b> class and its methods. The dc.pieChart uses mixins to get the basic functionality of drawing a chart. The mixins used by dc.pieChart are as follows &minus;</p>
<ul class="list">
<li>baseMixin</li>
<li>capMixin</li>
<li>colorMixin</li>
</ul>
<p>The complete class diagram of a dc.pieChart is as follows &minus;</p>
<img src="/dcjs/images/pie_chart_methods.jpg" alt="Pie Chart Methods" />
<p>The dc.pieChart gets all the methods of the above specified mixins as well as has its own methods to specifically draw the pie chart. They are as follows &minus;</p>
<ul class="list">
<li>cx( [cx])</li>
<li>drawPaths( [path])</li>
<li>emptyTitle( [title])</li>
<li>externalLabels( [label])</li>
<li>innerRadius( [innerRadius])</li>
<li>minAngleForLabel( [minAngleForLabel])</li>
<li>radius( [radius])</li>
<li>slicesCap( [cap])</li>
</ul>
<p>Let us discuss each of these in detail.</p>
<h3>cx( [cx])</h3>
<p>It is used to get or set the center x coordinate position, which is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.cx = function (cx) {
   if (!arguments.length) {
      return (_cx ||  _chart.width() / 2);
   }
};
</pre>
<p>Similarly, you can perform the y-coordinate position.</p>
<h3>drawPaths( [path])</h3>
<p>This method is used to draw paths for a pie chart and is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.drawPaths = function (path) {
   if (arguments.length === 0) {
      return path;
   }
};
</pre>
<h3>emptyTitle( [title])</h3>
<p>This method is used to set the title when there is no data. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.emptyTitle = function (title) {
   if (arguments.length === 0) {
      return title;
   }
};
</pre>
<h3>externalLabels( [label])</h3>
<p>It is used to position slice labels offset from the outer edge of the chart. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.externalLabels = function (label) {
   if (arguments.length === 0) {
      return label;
   } 
};
</pre>
<h3>innerRadius( [innerRadius])</h3>
<p>This method is used to get or set the inner radius of the pie chart. If the inner radius is greater than <b>0px</b>, then the pie chart will be rendered as a doughnut chart. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
_chart.innerRadius = function (innerRadius) {
   if (!arguments.length) {
      return _innerRadius;
   }
};
</pre>
<h3>minAngleForLabel( [minAngleForLabel])</h3>
<p>This method is used to get or set the minimal slice angle for label rendering. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
 _chart.minAngleForLabel = function (minAngleForLabel) {
   if (!arguments.length) {
      return _minAngleForLabel;
   }
   _minAngleForLabel = minAngleForLabel;
   return _chart;
};
</pre>
<h3>radius( [radius])</h3>
<p>This method is used to get or set the outer radius. If the radius is not specified, then it will take half of the minimum chart width and height. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
_chart.radius = function (radius) {
   if (!arguments.length) {
      return _givenRadius;
   }
   _givenRadius = radius;
   return _chart;
};
</pre>
<h3>slicesCap( [cap])</h3>
<p>Gets or sets the maximum number of slices the pie chart will generate. The top slices are determined by a value from high to low. Other slices exceeding the cap will be rolled up into one single ‘Others’ slice.</p>
<h2>Draw a Pie Chart</h2>
<p>Let us create a pie chart in DC. In this pie chart example, let us take a dataset named <b>people.csv</b> file. The sample data file is as follows &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

....................
....................
....................
</pre>
<p>The above sample contains many records. You can download the file by clicking the following link and save it to the DC location.</p>
<p><a href="/dcjs/src/people.csv">people.csv</a></p>
<p>Now, let us adhere to the following steps to draw a pie chart in DC.</p>
<h3>Step 1: Include a Script</h3>
<p>Let us add D3, DC and Crossfilter using the following code &minus;</p>
<pre class="prettyprint notranslate">
&lt;script src = "js/d3.js"&gt;&lt;/script&gt;
&lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
&lt;script src = "js/dc.js"&gt;&lt;/script&gt;
</pre>
<h3>Step 2: Define a Variable</h3>
<p>Create an object of type, <b>dc.pieChart</b> as shown below &minus;</p>
<pre class="prettyprint notranslate">
var pieChart = dc.pieChart('#pie');
</pre>
<p>Here, the Pie id is mapped with a pie.</p>
<h3>Step 3: Read the Data</h3>
<p>Read your data (say, from people.csv) using the <b>d3.csv()</b> function. It is defined as follows &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   console.log(people);
}
</pre>
<p>Here, if the data file is not available in the specified location, then the d3.csv() function returns an error.</p>
<h3>Step 4: Define the Crossfilter</h3>
<p>Define a variable for Crossfilter and assign the data to Crossfilter. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
var mycrossfilter = crossfilter(people);
</pre>
<h3>Step 5: Create a Dimension</h3>
<p>Create a dimension for gender using the function below &minus;</p>
<pre class="prettyprint notranslate">
var genderDimension = mycrossfilter.dimension(function(data) { 
   return data.gender; 
});
</pre>
<p>Here, the Gender of the people is used for dimension.</p>
<h3>Step 6: reduceCount()</h3>
<p>Create a Crossfilter group by applying the group() and the reduceCount() function on the above created gender dimension - <b>groupDimension</b>.</p>
<pre class="prettyprint notranslate">
var genderGroup = genderDimension.group().reduceCount();
</pre>
<h3>Step 7: Generate Pie</h3>
<p>Generate the pie using the function below &minus;</p>
<pre class="prettyprint notranslate">
pieChart
   .width(800)
   .height(300)
   .dimension(genderDimension)
   .group(genderGroup)
   .on('renderlet', function(chart) {
      chart.selectAll('rect').on('click', function(d) {
         console.log('click!', d);
      });
   });

dc.renderAll();
</pre>
<p>Here,</p>
<ul class="list">
<li><p>Width of the pie chart is set to 800.</p></li>
<li><p>Height of the pie chart is set to 300.</p></li>
<li><p>Dimension of the pie chart is set to <b>genderDimension</b> using the dimension() method.</p></li>
<li><p>Group of the pie chart is set to <b>genderGroup</b> using the group() method.</p></li>
<li><p>Added a click event to log the data using the DC.js built-in event, <b>renderlet()</b>. The renderlet is invoked, whenever the chart is rendered or drawn.</p></li>
</ul>
<h3>Step 8: Working Example</h3>
<p>Create a new html file, pie.html and include all the above steps as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC.js Pie Chart Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.min.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "pie"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var pieChart = dc.pieChart('#pie');

         d3.csv("data/people.csv", function(errors, people) {
            console.log(people);
            var mycrossfilter = crossfilter(people);

            // gender dimension
            var genderDimension = mycrossfilter.dimension(function(data) { 
               return data.gender; 
            });
            var genderGroup = genderDimension.group().reduceCount();

            pieChart
               .width(800)
               .height(300)
               .dimension(genderDimension)
               .group(genderGroup)
               .on('renderlet', function(chart) {
                  chart.selectAll('rect').on('click', function(d) {
                     console.log('click!', d);
                  });
               });

            dc.renderAll();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/pie_chart.htm" height="360px" width="660px"></iframe>
<h1>DC.js - Line Chart</h1>
<p>A line chart is used to display information as a series of data points connected by straight lines. A data point represents two values, one plotted along the horizontal axis and another along the vertical axis. For example, the popularity of food items can be drawn as a line chart in such a way that the food item is represented along the x-axis and its popularity is represented along the y-axis. This chapter explains about line charts in detail.</p>
<h2>Line Chart Methods</h2>
<p>Before moving on to draw a line chart, we should understand the <b>dc.lineChart</b> class and its methods. The dc.lineChart uses mixins to get the basic functionality of drawing a chart. The mixins used by dc.lineChart are as follows &minus;</p>
<ul class="list">
<li>dc.stackMixin</li>
<li>dc.coordinateGridMixin</li>
</ul>
<p>The complete class diagram of the dc.lineChart is as follows &minus;</p>
<img src="/dcjs/images/line_chart_methods.jpg" alt="Line Chart Methods" />
<p>The dc.lineChart gets all the methods of the above-specified mixins as well as it has its own methods to draw the line chart. They are explained as follows.</p>
<h3>dashStyle( [style])</h3>
<p>This method is used to set the dash style for a line chart.</p>
<h3>dotRadius( [radius])</h3>
<p>This method is used to get or set the radius (in PX) for dots displayed on the data points. It is defined as follows &minus;</p>
<pre class="prettyprint notranslate">
chart.dotRadius = function (radius) {
   if (!arguments.length) {
      return radius;
   }
};
</pre>
<h3>interpolate( [i])</h3>
<p>This method is used to get or set the interpolator for a line.</p>
<h3>renderArea( [area])</h3>
<p>This method is used to get or set the render area.</p>
<h3>renderDataPoints( [options])</h3>
<p>This method is used to render individual dots for each data point.</p>
<h3>tension( [tension])</h3>
<p>This method is used get or set the tension for the lines drawn. It is in the range from 0 to 1.</p>
<h3>xyTipsOn( [xyTipsOn])</h3>
<p>This method is used to change the mouse behavior of an individual data point.</p>
<h2>Draw a Line Chart</h2>
<p>Let us draw a line chart in DC. To do this, we need to follow the steps given below &minus;</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define a variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.lineChart('#line');
</pre>
<p>Here, the dc.linechart function is mapped with the container having an <b>id line</b>.</p>
<h3>Step 2: Read the data</h3>
<p>Read data from the <b>people.csv</b> file &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>Here, if we used the same dataset people.csv, the sample data file will be as follows &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

...............
................
................
</pre>
<h3>Step 3: Create an age dimension</h3>
<p>Now, create dimension for age as shown below &minus;</p>
<pre class="prettyprint notranslate">
var ageDimension = mycrossfilter.dimension(function(data) { 
    return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
});
</pre>
<p>Here, we assigned the age from the Crossfilter data.</p>
<p>The ~~ is a double NOT bitwise operator. It is used as a faster substitute for the <b>Math.floor()</b> function.</p>
<p>Now, group it using the <b>reduceCount()</b> function, which is defined below &minus;</p>
<pre class="prettyprint notranslate">
var ageGroup = ageDimension.group().reduceCount();
</pre>
<h3>Step 4: Generate a chart</h3>
<p>Now, generate a line chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart
   .width(800)
   .height(300)
   .x(d3.scale.linear().domain([15,70]))
   .brushOn(false)
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .dimension(ageDimension)
   .group(ageGroup)
   .on('renderlet', function(chart) {
      chart.selectAll('rect').on('click', function(d) {
         console.log('click!', d);
      });
   });

chart.render();
</pre>
<p>Here,</p>
<ul class="list">
<li><p>Chart width is 800 and height is 300.</p></li>
<li><p>The d3.scale.linear function is used to construct a new linear scale with the specified domain range [15, 70].</p></li>
<li><p>Next, we set the <b>brushOn</b> value to false.</p></li>
<li><p>We assign the y-axis label as <b>count</b> and x-axis label as <b>age</b>.</p></li>
<li><p>Finally, group the age using <b>ageGroup</b>.</p></li>
</ul>
<h3>Step 5: Working example</h3>
<p>The complete code listing is shown in the following code block. Create a web page <b>line.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC.js Line Chart Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.min.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "line"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var chart = dc.lineChart('#line');

         d3.csv("data/people.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            var ageDimension = mycrossfilter.dimension(function(data) { 
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
            });
            var ageGroup = ageDimension.group().reduceCount();

            chart
               .width(800)
               .height(300)
               .x(d3.scale.linear().domain([15,70]))
               .brushOn(false)
               .yAxisLabel("Count")
               .xAxisLabel("Age")
               .dimension(ageDimension)
               .group(ageGroup)
               .on('renderlet', function(chart) {
                  chart.selectAll('rect').on('click', function(d) {
                     console.log('click!', d);
                  });
               });
            chart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/line_chart.htm" height="320px" width="660px"></iframe>
<h1>DC.js - Bar Chart</h1>
<p>Bar chart is one of the most commonly used types of graph and are used to display and compare the number, frequency or other measure (e.g. mean) for different discrete categories or groups. The graph is constructed such that the heights or lengths of the different bars are proportional to the size of the category they represent.</p>
<p>The x-axis (the horizontal axis) represents the different categories it has no scale. The y axis (the vertical axis) does have a scale and this indicates the units of measurement. The bars can be drawn either vertically or horizontally depending upon the number of categories and length or complexity of the category.</p>
<h2>Bar Chart Methods</h2>
<p>Before moving to draw a bar chart, we should understand the <b>dc.barChart</b> class and its methods. The dc.barChart uses mixins to get the basic functionality of drawing a chart. The mixins used by the dc.barChart are as follows &minus;</p>
<ul class="list">
<li>dc.stackMixin</li>
<li>dc.coordinateGridMixin</li>
</ul>
<p>The complete class diagram of the dc.barChart is as follows &minus;</p>
<img src="/dcjs/images/bar_chart_methods.jpg" alt="Bar Chart Methods" />
<p>The dc.barChart gets all the methods of the above specified mixins. In addition, it also has its own methods to draw the bar chart. They are explained as follows &minus;</p>
<h3>alwaysUseRounding( [round])</h3>
<p>This method is used to get or set whether rounding is enabled when the bars are centered.</p>
<h3>barPadding( [pad])</h3>
<p>This method is used to get or set the spacing between bars as a fraction of bar size. The possible padding values are between 0-1.</p>
<h3>centerBar( [centerBar])</h3>
<p>This method is used to set the bar, centered around the data position on the x-axis.</p>
<h3>gap( [gap])</h3>
<p>This method is used to set a fixed gap between the bars.</p>
<h3>outerPadding( [pad])</h3>
<p>This method is used to set the outer padding on an ordinal bar chart.</p>
<h2>Draw a Bar Chart</h2>
<p>Let us draw a bar chart in DC. To do this, we should follow the steps given below &minus;</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define a chart variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.barChart('#bar');
</pre>
<p>Here, the dc.barChart function is mapped with a container having <b>bar</b> as the id.</p>
<h3>Step 2: Read the data</h3>
<p>Read data from the people.csv file.</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If the data is not present, then it returns an error. Now, assign the data to Crossfilter. For this example, we will use the same people.csv file, which looks as follows &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay
..................
..................
..................
</pre>
<h3>Step 3: Create an age dimension</h3>
<p>Now, create a dimension for age as shown below &minus;</p>
<pre class="prettyprint notranslate">
var ageDimension = mycrossfilter.dimension(function(data) { 
   return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
});
</pre>
<p>Here, we assigned the age from the Crossfilter data. The ~~ is a double NOT bitwise operator. It is used as a faster substitute for the <b>Math.floor()</b> function.</p>
<p>Now, group it using the <b>reduceCount()</b> function that is shown below &minus;</p>
<pre class="prettyprint notranslate">
var ageGroup = ageDimension.group().reduceCount();
</pre>
<h3>Step 4: Generate a chart</h3>
<p>Now, generate a bar chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart
   .width(800)
   .height(300)
   .x(d3.scale.linear().domain([15,70]))
   .brushOn(false)
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .dimension(ageDimension)
   .group(ageGroup)
   .on('renderlet', function(chart) {
      chart.selectAll('rect').on('click', function(d) {
         console.log('click!', d);
      });
   });

chart.render();
</pre>
<p>Here,</p>
<ul class="list">
<li><p>Chart width is 800 and height is 300.</p></li>
<li><p>The d3.scale.linear function is used to construct a new linear scale with the specified domain range [15, 70].</p></li>
<li><p>Next, we set the brushOn value to false.</p></li>
<li><p>We assign the y-axis label as count and x-axis label as age.</p></li>
<li><p>Finally, group the age using the ageGroup function.</p></li>
</ul>
<h3>Step 5: Working example</h3>
<p>The complete code listing is as follows. Create a web page <b>bar.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC Bar chart Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.min.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "bar"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var chart = dc.barChart('#bar');

         d3.csv("data/people.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            var ageDimension = mycrossfilter.dimension(function(data) { 
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
            });
            var ageGroup = ageDimension.group().reduceCount();

            chart
               .width(800)
               .height(300)
               .x(d3.scale.linear().domain([15,70]))
               .brushOn(false)
               .yAxisLabel("Count")
               .xAxisLabel("Age")
               .dimension(ageDimension)
               .group(ageGroup)
               .on('renderlet', function(chart) {
                  chart.selectAll('rect').on('click', function(d) {
                     console.log('click!', d);
                  });
               });
            chart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/bar_chart.htm" height="320px" width="660px"></iframe>
<h1>DC.js - Composite Chart</h1>
<p>Composite chart is a special type of chart provided by DC.js. It provides an option to render multiple charts in the same coordinate grid. Composite chart enables advanced chart visualization options with a minimum line of code.</p>
<h2>Composite Chart Methods</h2>
<p>Before moving on to draw a composite chart, we need to understand the <b>dc.compositeChart</b> class and its methods. The dc.compositeChart uses mixins to get the basic functionality of drawing a chart. The mixins used by the dc.compositeChart are as follows &minus;</p>
<ul class="list">
<li>dc.baseMixin</li>
<li>dc.marginMixin</li>
<li>dc.colorMixin</li>
<li>dc.coordinateGridMixin</li>
</ul>
<p>The complete class diagram of the dc.barChart is as follows &minus;</p>
<img src="/dcjs/images/composite_chart_methods.jpg" alt="Composite Chart Methods" />
<p>The dc.compositeChart gets all the methods of the above-specified mixins. It has its own method to draw the composite chart, which is explained below &minus;</p>
<h3>compose( [subChartArray])</h3>
<p>Set the collection of charts to be rendered in the same coordinate grid chart.</p>
<pre class="prettyprint notranslate">
chart.compose([
   dc.lineChart(chart)
   dc.barChart(chart)
]);
</pre>
<h3>children()</h3>
<p>Gets all the charts composed in the same coordinate grid.</p>
<h3>childOptions( [childOptions])</h3>
<p>Gets or sets the chart options for all the child charts composed in the same coordinate grid.</p>
<h3>shareTitle( [shareTitle])</h3>
<p>Gets or sets the shared title of the chart. If set, it will be shared with all the children charts composed in the same coordinate grid.</p>
<h3>shareColors( [shareColors])</h3>
<p>Similar to the shareTitle() function, except it shares the colors instead of the title.</p>
<h3>rightY( [yScale])</h3>
<p>Gets or sets the y-scale for the right axis of the composite chart.</p>
<h3>rightYAxis( [rightYAxis])</h3>
<p>Gets or sets the right y-axis of the composite chart.</p>
<h3>rightYAxisLabel( rightYAxisLabel[??])</h3>
<p>Gets or sets the right y-axis label.</p>
<h3>alignYAxes( [alignYAxes])</h3>
<p>Gets or sets the alignment between the left and right y-axis.</p>
<h3>useRightAxisGridLines( [useRightAxisGridLines])</h3>
<p>Gets or sets whether to draw gridlines from the right y-axis of the composite chart. The default behavior is to draw from the left y-axis.</p>
<h2>Draw a Composite Chart</h2>
<p>Let us draw a composite chart using DC.js. To do this, we should follow the steps given below &minus;</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define a chart variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.compositeChart('#compoiste');
</pre>
<p>Here, the dc.compositeChart function is mapped with a container having <b>composite</b> as its id.</p>
<h3>Step 2: Read the data</h3>
<p>Read data from the people.csv file &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
    
}
</pre>
<p>If data is not present, then it returns an error. We will use the same people.csv file. The sample data file is as follows &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

.............
.............
..............
</pre>
<h3>Step 3: Map the data</h3>
<p>Now, map the data as shown below &minus;</p>
<pre class="prettyprint notranslate">
var ndx = crossfilter();

ndx.add(people.map(function(data) {
   return {
      age: ~~((Date.now() - new Date(data.DOB)) / (31557600000)),
      male: data.gender == 'Male' ? 1 : 0,
      female: data.gender == 'Male' ? 0 : 1
   };
}));
</pre>
<p>Here, we assigned the age from the Crossfilter data. The ~~ is a double NOT bitwise operator. It is used as a faster substitute.</p>
<p>Now, apply the dimension age and group the gender data using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var dim  = ndx.dimension(dc.pluck('age')),

grp1 = dim.group().reduceSum(dc.pluck('male')),
grp2 = dim.group().reduceSum(dc.pluck('female'));
</pre>
<h3>Step 4: Generate a chart</h3>
<p>Now, generate a composite chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
composite
   .width(768)
   .height(480)
   .x(d3.scale.linear().domain([15,70]))
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .legend(dc.legend().x(80).y(20).itemHeight(13).gap(5))
   .renderHorizontalGridLines(true)
   .compose ([
      dc.lineChart(composite)
         .dimension(dim)
         .colors('red')
         .group(grp1, "Male")
         .dashStyle([2,2]),
      dc.lineChart(composite)
         .dimension(dim)
         .colors('blue')
         .group(grp2, "Female")
         .dashStyle([5,5])
   ])
   
.brushOn(false)
.render();
</pre>
<p>Here,</p>
<ul class="list">
<li><p>Chart width is 768 and height is 480.</p></li>
<li><p>The d3.scale.linear function is used to construct a new linear scale with the specified domain range [15, 70].</p></li>
<li><p>We assign a x-axis label as age and y-axis label as count.</p></li>
<li><p>Next, render horizontal grid lines as true.</p></li>
<li><p>Compose the line chart colors value – red for male gender and blue for female.</p></li>
<li><p>Finally, we set the brushOn value to false and render the chart.</p></li>
</ul>
<h3>Step 5: Working example</h3>
<p>The complete code is as follows. Create a web page <b>composite.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC composite chart Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
    
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "composite"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script type = "text/javascript"&gt;
         var composite = dc.compositeChart("#composite");

         d3.csv("data/people.csv", function(errors, people) {
            var ndx = crossfilter();

            ndx.add(people.map(function(data) {
               return {
                  age: ~~((Date.now() - new Date(data.DOB)) / (31557600000)),
                  male: data.gender == 'Male' ? 1 : 0,
                  female: data.gender == 'Male' ? 0 : 1
               };
            }));

            var dim  = ndx.dimension(dc.pluck('age')),

            grp1 = dim.group().reduceSum(dc.pluck('male')),
            grp2 = dim.group().reduceSum(dc.pluck('female'));

            composite
               .width(768)
               .height(480)
               .x(d3.scale.linear().domain([15,70]))
               .yAxisLabel("Count")
               .xAxisLabel("Age")
               .legend(dc.legend().x(80).y(20).itemHeight(13).gap(5))
               .renderHorizontalGridLines(true)
               .compose ([
                  dc.lineChart(composite)
                  .dimension(dim)
                  .colors('red')
                  .group(grp1, "Male")
                  .dashStyle([2,2]),
                  dc.lineChart(composite)
                     .dimension(dim)
                     .colors('blue')
                     .group(grp2, "Female")
                     .dashStyle([5,5])
               ])
               .brushOn(false)
               .render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/composite_chart.htm" height="360px" width="660px"></iframe>
<h1>DC.js - Series Chart</h1>
<p>A series is a set of data. You can plot a chart based on the data. This chapter explains how to draw a series chart in detail.</p>
<h2>Series Chart Methods</h2>
<p>Before moving on to draw a series chart, we should understand the <b>dc.seriesChart</b> class and its methods. The dc.seriesChart uses Mixins to get the basic functionality of drawing a chart. The mixin used by the dc.seriesChart is &minus;</p>
<ul class="list">
<li>dc.stackMixin</li>
</ul>
<p>The complete class diagram of the dc.seriesChart is as follows &minus;</p>
<img src="/dcjs/images/series_chart_methods.jpg" alt="Series Chart Methods" />
<p>The dc.seriesChart gets all the methods of the above specified mixins. It has its own methods to draw the series chart, which are explained below &minus;</p>
<h3>chart( [function])</h3>
<p>This method is used to get or set the chart function.</p>
<h3>seriesAccessor( [accessor])</h3>
<p>It is used to get or set the accessor function for the displayed series.</p>
<h3>seriesSort( [sortFunction])</h3>
<p>This method is used to get or set a function to sort the list of series by giving series values.</p>
<h3>valueSort( [sortFunction])</h3>
<p>This method is used to get or set a function to sort the values of each series.</p>
<h2>Draw a Series Chart</h2>
<p>Let us draw a series chart in DC. In this example, let us take a dataset named as people_hw.csv. The sample data file is as follows &minus;</p>
<pre class="result notranslate">
id,name,gender,height,weight
1,Kinsley,Male,168,90
2,Dimitry,Male,177,61
3,Martica,Female,152,76
4,Brittni,Female,156,88
5,Phillip,Male,161,78
6,Sofie,Female,161,71
7,Avril,Female,163,55
8,Allistir,Male,161,75
9,Emelda,Female,154,66
10,Camella,Female,153,52

...............
...............
</pre>
<p>The above sample file contains many records. You can download the file by clicking the following link and save it to your DC location.</p>
<p><a href="/dcjs/src/people_hw.csv">people_hw.csv</a></p>
<p>Now, let us adhere to the following steps to draw a series chart in DC.</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define the variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.seriesChart('#line');
</pre>
<p>Here, the seriesChart function is mapped with the id line.</p>
<h3>Step 2: Read the data</h3>
<p>Read data from the people_hw.csv file &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people_hw.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If data is not present, then it returns an error. Now, assign the data to a crossfilter. Once we get the data, we can retrieve it one by one and check the gender using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
people.forEach(function(x) {
   if(x.gender == 'Male') {
      x.newdata = 1;
   } else {
      x.newdata = 2;
   }
});
</pre>
<h3>Step 3: Create an age dimension</h3>
<p>Now, create a dimension for age as shown below &minus;</p>
<pre class="prettyprint notranslate">
var hwDimension = mycrossfilter.dimension(function(data) { 
   return [data.gender, data.height];
});
</pre>
<p>Here, we have assigned the dimension and it returns the gender and the height. Now, group it using the <b>reduceCount()</b> function, which is defined below &minus;</p>
<pre class="prettyprint notranslate">
var hwGroup = hwDimension.group().reduceCount();
</pre>
<h3>Step 4: Generate a chart</h3>
<p>Now, generate a series chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart
   .width(800)
   .height(600)
   .chart(function(c) { 
      return dc.lineChart(c).interpolate('cardinal').evadeDomainFilter(true); 
   })
   
   .x(d3.scale.linear().domain([145,180]))
   .elasticY(true)
   .brushOn(false)
   .xAxisLabel("Height")
   .yAxisLabel("Count")
   .dimension(hwDimension)
   .group(hwGroup)
   .seriesAccessor(function(d) { return d.key[0];})
   .keyAccessor(function(d) { return +d.key[1]; })
   .valueAccessor(function(d) { return +d.value; })
   legend(dc.legend().x(350).y(500).itemHeight(13).gap(5).horizontal(1).legendWidth(120)\
      .itemWidth(60));

chart.render();
</pre>
<p>Here,</p>
<ul class="list">
<li>Chart width is 800 and height is 600.</li>
<li>Using the method d3.scale.linear(), we specify the domain value.</li>
<li>Using the seriesAccessor function, it displays the series for the datum.</li>
<li>Key and value accessor returns the key and value from the series.</li>
<li>Legend can be used to add height and width.</li>
</ul>
<h3>Step 5: Working example</h3>
<p>The complete code listing is as follows. Create a web page <b>line_series.html</b> and add the following changes in it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Series chart Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "line"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var chart = dc.seriesChart('#line');

         d3.csv("data/people_hw.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            people.forEach(function(x) {
               if(x.gender == 'Male') {
                  x.newdata = 1;
               } else {
                  x.newdata = 2;
               }
            });

            var hwDimension = mycrossfilter.dimension(function(data) { 
               return [data.gender, data.height];
            });
            var hwGroup = hwDimension.group().reduceCount();

            chart
               .width(800)
               .height(600)
               .chart(function(c) { 
                  return dc.lineChart(c).interpolate('cardinal').evadeDomainFilter(true);
               })
               .x(d3.scale.linear().domain([145,180]))
               .elasticY(true)
               .brushOn(false)
               .xAxisLabel("Height")
               .yAxisLabel("Count")
               .dimension(hwDimension)
               .group(hwGroup)
               .seriesAccessor(function(d) { return d.key[0];})
               .keyAccessor(function(d) { return +d.key[1]; })
               .valueAccessor(function(d) { return +d.value; })
               .legend(dc.legend().x(350).y(500).itemHeight(13).gap(5).horizontal(1)
                  .legendWidth(120).itemWidth(60));

            chart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/line_series.htm" height="360px" width="660px"></iframe>
<img src="/dcjs/images/series_chart.jpg" alt="Series Chart" />
<h1>DC.js - Scatter Plot</h1>
<p>A scatter plot is a type of mathematical diagram. It is represented using the Cartesian coordinates to display values for typically two variables for a set of data. The data is displayed as a collection of points and the points maybe colored. This chapter explains about a scatter plot in detail.</p>
<h2>Scatter Plot Methods</h2>
<p>Before moving on to draw a scatter plot, we should understand the <b>dc.scatterPlot</b> class and its methods. The dc.scatterPlot uses mixins to get the basic functionality of drawing a chart. The mixin used by dc.scatterPlot is given below &minus;</p>
<ul class="list">
<li>dc.coordinateGridMixin</li>
</ul>
<p>The complete class diagram of the dc.scatterPlot is as follows &minus;</p>
<img src="/dcjs/images/scatter_plot_methods.jpg" alt="Scatter Plot Methods" />
<p>The dc.scatterPlot gets all the methods of the above-specified mixins. It has its own methods to draw the scatter plot, which are explained as follows.</p>
<h3>customSymbol( [symbol])</h3>
<p>This method is used get or set the symbol generator.</p>
<h3>emptySize( [size])</h3>
<p>This method is used to set or get the radius for symbols when the group is empty.</p>
<h3>excludedColor( [color])</h3>
<p>This method is used to get or set the color for symbols excluded from the chart's filter.</p>
<h3>excludedOpacity( [opacity])</h3>
<p>This method is used to get or set the opacity for symbols excluded from the chart's filter.</p>
<h3>excludedSize( [size])</h3>
<p>It is used to set or get size for symbols excluded from the chart's filter.</p>
<h3>highlightedSize( [size])</h3>
<p>It is used to set or get radius for highlighted symbols.</p>
<h3>symbol( [type])</h3>
<p>It is used to get or set the symbol type used for each point.</p>
<h2>Draw a Scatter Plot</h2>
<p>Let us draw a scatter plot in DC. In this example, let us take a dataset named as <b>howell1.csv</b> file. The sample data file is as follows &minus;</p>
<pre class="result notranslate">
"height","weight","age","male"
151.765,47.8256065,63,1
139.7,36.4858065,63,0
136.525,31.864838,65,0
156.845,53.0419145,41,1
145.415,41.276872,51,0
163.83,62.992589,35,1
149.225,38.2434755,32,0
168.91,55.4799715,27,1
147.955,34.869885,19,0
165.1,54.487739,54,1
154.305,49.89512,47,0

...............
...............
</pre>
<p>The above sample file contains many records. We can download the file by clicking the following link and saving it to our DC location.</p>
<p><a href="/dcjs/src/howell1.csv">howell1.csv</a></p>
<p>Now, let us follow the subsequent steps to draw a Scatter chart in DC.</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define a variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.scatterPlot('#scatter');
</pre>
<p>Here, the scatterplot() function is mapped with the id scatter.</p>
<h3>Step 2: Read the data</h3>
<p>Read data from the howell1.csv file as shown below &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/howell1.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If the data is not present, then it returns an error. Later, assign the data to a crossfilter.</p>
<h3>Step 3: Fetch the records</h3>
<p>Let us fetch the records using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
people.forEach(function(x) {
   if(x.male == 1) {
      x.gender = "Male";
   } else {
      x.gender = "Female";
   }
});
</pre>
<p>Here, we have checked the gender.</p>
<h3>Step 4: Set the dimension</h3>
<p>You can set the dimension using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var hwDimension = mycrossfilter.dimension(function(data) { 
   return [Math.floor(data.height), Math.floor(data.weight)];
});
</pre>
<p>After the dimension has been assigned, group the gender using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var hwGroup = hwDimension.group().reduceCount();
</pre>
<h3>Step 5: Generate a chart</h3>
<p>Now, generate a heatmap using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart
   .width(800)
   .height(600)
   .x(d3.scale.linear().domain([0,180]))
   .y(d3.scale.linear().domain([0,100]))
   .brushOn(false)
   .xAxisLabel("Height")
   .yAxisLabel("Weight")
   .symbolSize(8)
   .clipPadding(10)
   .dimension(hwDimension)
   .group(hwGroup);
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 800 and height as 600.</li>
<li>Applied the d3.scale.linear() function for both x and y axis.</li>
<li>Enabled brushOn value as false.</li>
<li>Then, assigned x-axis label as height and y-axis label as weight.</li>
<li>Set the symbol size as eight and padding value as 10.</li>
<li>Finally, group the data and render the chart.</li>
</ul>
<h3>Step 6: Working example</h3>
<p>The complete code listing is as follows. Create a web page <b>scatter.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
   &lt;title&gt;Scatter plot Sample&lt;/title&gt;
   &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
   &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

   &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
   &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
   &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "scatter"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var chart = dc.scatterPlot('#scatter');

         d3.csv("data/howell1.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            people.forEach(function(x) {
               if(x.male == 1) {
                  x.gender = "Male";
               } else {
                  x.gender = "Female";
               }
            });

            var hwDimension = mycrossfilter.dimension(function(data) { 
               return [Math.floor(data.height), Math.floor(data.weight)];
            });
            var hwGroup = hwDimension.group().reduceCount();

            chart
               .width(800)
               .height(600)
               .x(d3.scale.linear().domain([0,180]))
               .y(d3.scale.linear().domain([0,100]))
               .brushOn(false)
               .xAxisLabel("Height")
               .yAxisLabel("Weight")
               .symbolSize(8)
               .clipPadding(10)
               .dimension(hwDimension)
               .group(hwGroup);

            chart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/scatter_plot.htm" height="340px" width="660px"></iframe>
<h1>DC.js - Bubble Chart</h1>
<p>A bubble chart is used to display three dimensions of the data. It is a variation of scatter chart, in which the data points are replaced with bubbles. The bubble sizes are represented with respect to the data dimension. It uses horizontal and vertical axes as value axes. This chapter explains about bubble chart in detail.</p>
<h2>Bubble Chart Methods</h2>
<p>Before moving on to draw a bubble chart, we should understand the <b>dc.bubbleChart</b> class and its methods. The dc.bubbleChart uses mixins to get the basic functionality of drawing a chart, which are listed below &minus;</p>
<ul class="list">
<li>dc.bubbleMixin</li>
<li>dc.coordinateGridMixin</li>
</ul>
<p>The complete class diagram of the dc.bubbleChart is as follows &minus;</p>
<img src="/dcjs/images/bubble_chart_methods.jpg" alt="Bubble Chart Methods" />
<p>The dc.bubbleChart gets all the methods of the above-specified mixins. It also has its own methods to draw the bubble chart, which are explained below &minus;</p>
<h3>elasticRadius( [radius])</h3>
<p>This method is used to enable the bubble radius. If we disable this, then the bubble radius will be rescaled automatically.</p>
<h3>sortBubbleSize( [sortBubbleSize])</h3>
<p>This method is used to enable the sorting feature in bubbles. Smaller bubbles will come first and then they gradually increase.</p>
<h2>Draw a Bubble Chart</h2>
<p>Let us draw a bubble chart in DC. To do this, we need to follow the steps given below &minus;</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define a variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.bubbleChart('#bubble');
</pre>
<p>Here, the bubbleChart function is mapped with the id bubble.</p>
<h3>Step 2: Read the data</h3>
<p>Read data from the <b>howell1.csv</b> file.</p>
<pre class="prettyprint notranslate">
d3.csv("data/howell1.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If data is not present, then it returns an error. Now, assign the data to a crossfilter. Here, we have already downloaded the howell1.csv file. The same file will be used here and it will look similar to the following code block.</p>
<pre class="result notranslate">
"height","weight","age","male"
151.765,47.8256065,63,1
139.7,36.4858065,63,0
136.525,31.864838,65,0
156.845,53.0419145,41,1
145.415,41.276872,51,0
163.83,62.992589,35,1
149.225,38.2434755,32,0
168.91,55.4799715,27,1
147.955,34.869885,19,0
165.1,54.487739,54,1
154.305,49.89512,47,0

....................
.....................
</pre>
<h3>Step 3: Fetch the records</h3>
<p>Let us fetch the records using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
people.forEach(function(x) {
   if(x.male == 1) {
      x.gender = "Male";
   } else {
      x.gender = "Female";
   }
   x.heightRange = (((Math.floor(x.height / 10)) + 1) * 10);
   x.weightRange = (((Math.floor(x.weight / 10)) + 1) * 10);
});
</pre>
<p>Here, we have checked the gender and have set the x-axis height and width range using the above formula.</p>
<h3>Step 4: Set the dimension</h3>
<p>We can set the dimension using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var genderDimension = mycrossfilter.dimension(function(data) {
   return [ data.gender, data.heightRange, data.weightRange ];
});
</pre>
<p>After the dimension has been assigned, group the gender using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var genderGroup = genderDimension.group().reduceCount();
</pre>
<h3>Step 5: Generate the chart</h3>
<p>Now, generate a bubble chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart.width(1200)
   .height(400)
   .margins({top: 10, right: 50, bottom: 30, left: 60})
   .dimension(genderDimension)
   .group(genderGroup)
   .keyAccessor(function (p) {
      return p.key[1];
   })
   
   .valueAccessor(function (p) {
      return p.key[2];
   })
   
   .radiusValueAccessor(function (p) {
      return (Math.floor((p.value / 10)) + 1);
   })
</pre>
<p>Here,</p>
<ul class="list">
<li><p>We have assigned the chart width as 1200 and the height as 400.</p></li>
<li><p>Next, we have specified the margin points.</p></li>
<li><p>Then we have assigned the gender dimension and group.</p></li>
<li><p>Key and value accessor returns the key and value from the bubbles.</p></li>
<li><p>Calculate the radius value accessor function using the formula – <b>Math.floor((p.value / 10)) + 1</b>.</p></li>
</ul>
<h3>Step 6: Draw bubbles</h3>
<p>Now, draw the bubbles using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
.x(d3.scale.linear().domain([0, 240]))
.y(d3.scale.linear().domain([-40, 120]))
.r(d3.scale.linear().domain([0, 20]))
.minRadiusWithLabel(1000)
.yAxisPadding(100)
.xAxisPadding(200)
.maxBubbleRelativeSize(0.07)
.renderHorizontalGridLines(true)
.renderVerticalGridLines(true)
.renderLabel(true)
.renderTitle(true)
.title(function (p) {
   return p.key[0]
   + "\n"
   + "Height: " + p.key[1] + " cm\n"
   + "Weight: " + p.key[2] + " kg\n"
   + "Count: " + p.value;
});
</pre>
<p>Here,</p>
<ul class="list">
<li><p>The d3.scale.linear function is used to construct a new linear scale with the specified domain range [0,240] for the x-axis.</p></li>
<li><p>Similarly, we assigned y and radius linear scale values.</p></li>
<li><p>We specified the minimum radius label value as 1000, x-axis and y-axis padding values as 200 and 100 respectively.</p></li>
<li><p>Next, we have specified a maximum bubble relative size value as 0.7.</p></li>
<li><p>Render the horizontal and vertical grid lines, then map with the title for bubble key and values.</p></li>
</ul>
<h3>Step 7: Set TickFormat</h3>
<p>Set the ticket formats for x and y-axis using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart.yAxis().tickFormat(function (s) {
   return s + " cm";
});

chart.xAxis().tickFormat(function (s) {
   return s + " kg";
});
</pre>
<p>Finally, render the chart using the <b>chart.render()</b> method.</p>
<h3>Step 8: Working example</h3>
<p>The complete code listing is as shown in the following code block. Create a web page <b>bubble.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Bubble chart Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "bubble"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var chart = dc.bubbleChart('#bubble');

         d3.csv("data/howell1.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            people.forEach(function(x) {
               if(x.male == 1) {
                  x.gender = "Male";
               } else {
                  x.gender = "Female";
               }
               x.heightRange = (((Math.floor(x.height / 10)) + 1) * 10);
               x.weightRange = (((Math.floor(x.weight / 10)) + 1) * 10);
            });

            var genderDimension = mycrossfilter.dimension(function(data) {
               return [ data.gender, data.heightRange, data.weightRange ];
            });
            var genderGroup = genderDimension.group().reduceCount();

            chart.width(1200)
               .height(400)
               .margins({top: 10, right: 50, bottom: 30, left: 60})
               .dimension(genderDimension)
               .group(genderGroup)
               .keyAccessor(function (p) {
                  return p.key[1];
               })
               
               .valueAccessor(function (p) {
                  return p.key[2];
               })
               
               .radiusValueAccessor(function (p) {
                  return (Math.floor((p.value / 10)) + 1);
               })
               
               .x(d3.scale.linear().domain([0, 240]))
               .y(d3.scale.linear().domain([-40, 120]))
               .r(d3.scale.linear().domain([0, 20]))
               .minRadiusWithLabel(1000)
               .yAxisPadding(100)
               .xAxisPadding(200)
               .maxBubbleRelativeSize(0.07)
               .renderHorizontalGridLines(true)
               .renderVerticalGridLines(true)
               .renderLabel(true)
               .renderTitle(true)
               .title(function (p) {
                  return p.key[0]
                  + "\n"
                  + "Height: " + p.key[1] + " cm\n"
                  + "Weight: " + p.key[2] + " kg\n"
                  + "Count: " + p.value;
               });
               
            chart.yAxis().tickFormat(function (s) {
               return s + " cm";
            });
               
            chart.xAxis().tickFormat(function (s) {
               return s + " kg";
            });

            chart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/bubble_chart.htm" height="360px" width="660px"></iframe>
<h1>DC.js - Heat Map</h1>
<p>A Heat Map is a graphical representation of data in the form of a map, in which data values are represented as colors. This chapter explains about a heat map in detail.</p>
<p>Before moving on to draw a heat map, we should understand the <b>dc.heatMap</b> class and its methods. The dc.heatMap uses mixins to get the basic functionality of drawing a chart, which are listed below &minus;</p>
<ul class="list">
<li>dc.colorMixin</li>
<li>dc.marginMixin</li>
<li>dc.baseMixin</li>
</ul>
<p>The complete class diagram of the dc.heatMap is as follows &minus;</p>
<img src="/dcjs/images/heat_map.jpg" alt="Heat Map" />
<p>The dc.heatMap gets all the methods of the above-specified mixins. It has its own methods to draw the heat map, which are explained below &minus;</p>
<h3>boxOnClick( [handler])</h3>
<p>This method is used to get or set the handler, when an individual cell is clicked in the heatmap.</p>
<h3>cols( [cols])</h3>
<p>This method is used get or set the keys to create the columns of the heatmap.</p>
<h3>colsLabel( [label])</h3>
<p>This method is used to get or set the column label, which is represented as the column name. Similarly, we can perform a row label as well.</p>
<h3>rows( [rows])</h3>
<p>This method is used to get or set the values used to create the rows of the heatmap.</p>
<h3>xAxisOnClick( [handler])</h3>
<p>This method is used to get or set the handler, when a column tick is clicked in the x-axis.</p>
<h3>xBorderRadius( [border])</h3>
<p>This method is used to set the X border radius. If the value is set to 0, then you will get full rectangles.</p>
<h2>Draw a Heatmap</h2>
<p>Let us draw a heatmap in DC. To do this, we need to follow the steps given below &minus;</p>
<h3>Step 1: Define a variable</h3>
<p>Let us define a variable as shown below &minus;</p>
<pre class="prettyprint notranslate">
var chart = dc.heatMap('#heatmap');
</pre>
<p>Here, the heatMap function is mapped with the id heatmap.</p>
<h3>Step 2: Read the data</h3>
<p>Read the data from the <b>howell1.csv</b> file as shown below &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/howell1.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>Here, we have used the same howell1.csv file and it looks as shown below &minus;</p>
<pre class="result notranslate">
"height","weight","age","male"
151.765,47.8256065,63,1
139.7,36.4858065,63,0
136.525,31.864838,65,0
156.845,53.0419145,41,1
145.415,41.276872,51,0
163.83,62.992589,35,1
149.225,38.2434755,32,0
168.91,55.4799715,27,1
147.955,34.869885,19,0
165.1,54.487739,54,1
154.305,49.89512,47,0

......................
......................
</pre>
<h3>Step 3: Fetch the records</h3>
<p>Let us fetch the records using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
people.forEach(function(x) {
   x.age = Math.floor(x.age) + 1;
   x.heightRange = Math.floor(x.height / 10) + 1;
   x.weightRange = Math.floor(x.weight / 10) + 1;
   if(x.male == 1) {
      x.gender = 1;
   } else {
      x.gender = 2;
   }
});
</pre>
<p>Here, we have checked the gender and have set the height and width range of the x-axis by using the above formula.</p>
<h3>Step 4: Set the dimension</h3>
<p>You can set the dimension using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var ageDimension = mycrossfilter.dimension(function(data) { 
   return [+data.gender, +data.heightRange];
});
</pre>
<p>After the dimension has been assigned, group the gender using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var genderGroup = genderDimension.group().reduceCount();
</pre>
<h3>Step 5: Generate a chart</h3>
<p>Now, generate a heatmap using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
chart
   .width(20 * 45 + 80)
   .height(2 * 45 + 40)
   .dimension(ageDimension)
   .group(ageGroup)
   .keyAccessor(function(d) { return +d.key[1]; })
   .valueAccessor(function(d) { return +d.key[0]; })
   .colorAccessor(function(d) { return +d.value; })
   .title(function(d) {
      return "Height Range:   " + ((d.key[1] - 1) * 10) + " - " + (d.key[1] * 10) + "cm\n" +
      "Gender:  " + (d.key[0] == 1 ? "Male" : "Female") + "\n" +
      "Count: " + (d.value) + " count";
   })
   .calculateColorDomain()

chart.render();
});
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 20 &times; 45 + 80 and height as 2 &times; 45 + 40.</li>
<li>Then we have assigned the gender dimension and group.</li>
<li>Key and value accessor returns the key and value from the heatmaps.</li>
<li>We have to use the colorAccessor() function to return the color.</li>
<li>Finally, set the title and render the chart.</li>
</ul>
<h3>Step 6: Working example</h3>
<p>The complete coding is as follows. Create a web page <b>heatmap.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC heat map Sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div id = "heatmap"&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var chart = dc.heatMap('#heatmap');

         d3.csv("data/howell1.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            people.forEach(function(x) {
               x.age = Math.floor(x.age) + 1;
               x.heightRange = Math.floor(x.height / 10) + 1;
               x.weightRange = Math.floor(x.weight / 10) + 1;
               if(x.male == 1) {
                  x.gender = 1;
               } else {
                  x.gender = 2;
               }
            });

            var ageDimension = mycrossfilter.dimension(function(data) { 
               return [+data.gender, +data.heightRange];
            });

            var ageGroup = ageDimension.group().reduceCount();
            chart
               .width(20 * 45 + 80)
               .height(2 * 45 + 40)
               .dimension(ageDimension)
               .group(ageGroup)
               .keyAccessor(function(d) { return +d.key[1]; })
               .valueAccessor(function(d) { return +d.key[0]; })
               .colorAccessor(function(d) { return +d.value; })
               .title(function(d) {
                  return "Height Range:   " + ((d.key[1] - 1) * 10) + " - " +
                  (d.key[1] * 10) + "cm\n" +
                  "Gender:  " + (d.key[0] == 1 ? "Male" : "Female") + "\n" +
                  "Count: " + (d.value) + " count";})
               .calculateColorDomain()

            chart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/heat_map.htm" height="340px" width="660px"></iframe>
<h1>DC.js - Data Count</h1>
<p>Data count is used to display the total number of records in the data set. It performs the following two types of count &minus;</p>
<ul class="list">
<li><p><b>Total-count</b> &minus; total number of records.</p></li>
<li><p><b>Filter-count</b> &minus; number of records matched by the current filters.</p></li>
</ul>
<h2>Data Count Methods</h2>
<p>Before moving on to use a data count, we should understand the <b>dc.dataCount</b> class and its methods. The dc.dataCount class uses a mixin to get the basic functionality of displaying a data count, which is &minus;</p>
<ul class="list">
<li>dc.baseMixin</li>
</ul>
<p>The dc.dataCount gets all the methods of this mixin and has its own method to show the data count as explained below &minus;</p>
<h3>formatNumber( [formatter])</h3>
<p>This method is used to get or set a format for the filter count and the total count.</p>
<h3>html( [options])</h3>
<p>It is used get or set the HTML templates to show the number of selected items.</p>
<p><b>For example</b> &minus;</p>
<pre class="prettyprint notranslate">
counter.html ({
   all: 'HTML template to use if all items are selected'
})
</pre>
<p>Here, ‘all’ is used to select all the items using the %total-count. If we want to only use some of the items, then we can use some records using %filter-count option.</p>
<h3>Data count example</h3>
<p>Let us perform the data count in DC. To do this, we need to follow the steps given below &minus;</p>
<h3>Step 1: Add styles</h3>
<p>Let us add styles in the CSS using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
.dc-chart { font-size: 12px; }
</pre>
<p>Here, we have assigned styles for the chart.</p>
<h3>Step 2: Create a variable</h3>
<p>Let us create a variable in DC as shown below &minus;</p>
<pre class="prettyprint notranslate">
var barChart = dc.barChart('#line'); 
var countChart = dc.dataCount("#mystats");
</pre>
<p>Here, we have assigned a barChart variable id in line, whereas the countChart id is mystats.</p>
<h3>Step 3: Read the data</h3>
<p>Read the data from the people.csv file as shown below &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If the data is not present, then it returns an error. Now, assign the data to a crossfilter.</p>
<p>Here, we are using the people.csv file, which was used in our previous charting examples. It looks as shown below &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

.........................................
........................................
</pre>
<h3>Step 4: Set the dimension</h3>
<p>You can set the dimension using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
// age dimension
var ageDimension = mycrossfilter.dimension(function(data) { 
   return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
});
</pre>
<p>After the dimension has been assigned, group the age using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var ageGroup = ageDimension.group().reduceCount();
</pre>
<h3>Step 5: Generate a chart</h3>
<p>Now, generate a bar chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">barChart
   .width(400)
   .height(200)
   .x(d3.scale.linear().domain([15,70]))
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .elasticY(true)
   .elasticX(true)
   .dimension(ageDimension)
   .group(ageGroup);
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 400 and height as 200.</li>
<li>Next, we have specified the domain range as [15,70].</li>
<li>We have set the x-axis label as age and y-axis label as count.</li>
<li>We have specified the elasticY and X function as true.</li>
</ul>
<h3>Step 6: Create and render the count chart</h3>
<p>Now, create and render the count chart using the coding below &minus;</p>
<pre class="prettyprint notranslate">
countChart
   .dimension(mycrossfilter)
   .group(mycrossfilter.groupAll());

barChart.render();
countChart.render();
</pre>
<p>Here, we have assigned the dimension to a crossfilter variable. Finally, group all the records based on the age.</p>
<h3>Step 7: Working example</h3>
<p>The complete code is as follows. Create a web page <b>datacount.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC datacount sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css" /&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css" /&gt;
   
      &lt;style&gt;
         .dc-chart { font-size: 12px; }
      &lt;/style&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div style = "width: 600px;"&gt;
            &lt;div id = "mystats" class = "dc-data-count" style = "float: right"&gt;
               &lt;span class = "filter-count"&gt;&lt;/span&gt; selected out of &lt;span
                  class = "total-count"&gt;&lt;/span&gt; | &lt;a href = "javascript:dc.filterAll();
                  dc.renderAll();"&gt;Reset All&lt;/a&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both; padding-top: 20px;"&gt;
            &lt;div&gt;
               &lt;div id = "line"&gt;&lt;/div&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var barChart = dc.barChart('#line'); // , 'myChartGroup');
         var countChart = dc.dataCount("#mystats");

         d3.csv("data/people.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            // age dimension
            var ageDimension = mycrossfilter.dimension(function(data) { 
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
            });
            var ageGroup = ageDimension.group().reduceCount();

            barChart
               .width(400)
               .height(200)
               .x(d3.scale.linear().domain([15,70]))
               .yAxisLabel("Count")
               .xAxisLabel("Age")
               .elasticY(true)
               .elasticX(true)
               .dimension(ageDimension)
               .group(ageGroup);

            countChart
               .dimension(mycrossfilter)
               .group(mycrossfilter.groupAll());

            barChart.render();
            countChart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<p>Data count initial page is shown below.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/data_count.htm" height="360px" width="660px"></iframe>
<p>After selecting a particular age, it shows the counts as shown in the screenshot below.</p>
<img src="/dcjs/images/data_count.jpg" alt="Data Count" />
<h1>DC.js - Data Table</h1>
<p>Data table is used to display the records in a tabular format. It lists out the crossfilter dataset records as explained in this chapter in detail.</p>
<h2>Data Table Methods</h2>
<p>Before moving on to draw a data table, we should understand the <b>dc.dataTable</b> class and its methods. It uses a mixin to get the basic functionality of drawing a data table chart, which is defined below &minus;</p>
<ul class="list">
<li>dc.baseMixin</li>
</ul>
<p>The dc.dataTable gets all the methods of this mixin and has its own methods to draw the data table, which are explained as follows.</p>
<h3>beginSlice( [slice])</h3>
<p>This method is used to get or set the index of the beginning slice. This method is useful when implementing pagination.</p>
<p>Similarly, you can perform the endSlice() function as well.</p>
<h3>columns( [columns])</h3>
<p>This method is used to get or set the column functions. It uses the following method to specify the columns to display.</p>
<pre class="prettyprint notranslate">
chart.columns([
   function(d) { return d.mark; },
   function(d) { return d.low; },
   function(d) { return d.high; },
   function(d) { return numberFormat(d.high - d.low); },
   function(d) { return d.volume; }
]);
</pre>
<p>Here, d represents a row in the data set. We can use HTML to display columns in the data table.</p>
<h3>group(groupFunction)</h3>
<p>This method is used to perform the group function for the data table.</p>
<h3>order( [order])</h3>
<p>It is used to sort the order function. If the order is ascending, then the dimension() will use .bottom() to fetch the data, otherwise it will use dimension().top().</p>
<h2>Data Table Example</h2>
<p>Let us make a data table in DC. To do this, we need to follow the steps given below &minus;</p>
<h3>Step 1: Add styles</h3>
<p>Let us add styles in the CSS using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
.dc-chart { font-size: 12px; }
.dc-table-group { padding-left: 10px; font-size: 14px; font-weight: bold; }
.dc-table-column { padding-left: 10px; font-size: 12px; font-weight: normal; }
</pre>
<p>Here, we have assigned styles for the chart, table-group and the grid-column.</p>
<h3>Step 2: Create a variable</h3>
<p>Let us create a variable in DC as shown below &minus;</p>
<pre class="prettyprint notranslate">
var barChart = dc.barChart('#line'); // 
var countChart = dc.dataCount("#mystats");
var tableChart = dc.dataTable("#mytable");
</pre>
<p>Here, we have assigned a barChart variable id in line, countChart id is mystats and the tableChart id is mytable.</p>
<h3>Step 3: Read the data</h3>
<p>Read the data from the people.csv file as shown below &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If the data is not present, then it returns an error. Now, assign the data to a crossfilter. Here, we have used the same people.csv file, which was used in our previous charting examples.</p>
<p>It looks like as follows &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

..........................................
..........................................
</pre>
<h3>Step 4: Set the dimension</h3>
<p>You can set the dimension using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var ageDimension = mycrossfilter.dimension(function(data) { 
   return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
});
</pre>
<p>After the dimension has been assigned, group the age using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var ageGroup = ageDimension.group().reduceCount();
</pre>
<h3>Step 5: Generate a chart</h3>
<p>Now, generate a bar chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
barChart
   .width(400)
   .height(200)
   .x(d3.scale.linear().domain([15,70]))
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .elasticY(true)
   .elasticX(true)
   .dimension(ageDimension)
   .group(ageGroup);
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 400 and height as 200.</li>
<li>Next, we have specified the domain range as [15,70].</li>
<li>We have set the x-axis label as age and y-axis label as count.</li>
<li>We have specified the elasticY and X function as true.</li>
</ul>
<h3>Step 6: Create the data table</h3>
<p>Now, create the data table using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
countChart
   .dimension(mycrossfilter)
   .group(mycrossfilter.groupAll());

tableChart
   .dimension(ageDimension)
   .group(function (data) {
      return ~~((Date.now() - new Date(data.DOB)) / (31557600000));
   })
</pre>
<p>Here, we have specified the age dimension and group the data.</p>
<h3>Step 7: Render the table</h3>
<p>Now, render the grid using the coding below &minus;</p>
<pre class="prettyprint notranslate">
.size(Infinity)
   .columns(['name', 'DOB'])
   .sortBy(function (d) {
      return d.value;
   })
   .order(d3.ascending);

barChart.render();
countChart.render();
tableChart.render();
</pre>
<p>Here, we have sorted the columns using the DOB and sort the records.</p>
<h3>Step 8: Working example</h3>
<p>The complete code is as follows. Create a web page datatable.html and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC datatable sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;
   
      &lt;style&gt;
         .dc-chart { font-size: 12px; }
         .dc-table-group { padding-left: 10px; font-size: 14px; font-weight: bold; }
         .dc-table-column { padding-left: 10px; font-size: 12px; font-weight: normal; }
      &lt;/style&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div style = "width: 600px;"&gt;
            &lt;div id = "mystats" class = "dc-data-count" style = "float: right"&gt;
               &lt;span class = "filter-count"&gt;&lt;/span&gt; selected out of &lt;span
               class = "total-count"&gt;&lt;/span&gt; | &lt;a href = "javascript:dc.filterAll();
               dc.renderAll();"&gt;Reset All&lt;/a&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both; padding-top: 20px;"&gt;
            &lt;div&gt;
               &lt;div id = "line"&gt;&lt;/div&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both"&gt;
            &lt;div id = "mytable"&gt;&lt;/div&gt;
         &lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var barChart = dc.barChart('#line'); // , 'myChartGroup');
         var countChart = dc.dataCount("#mystats");
         var tableChart = dc.dataTable("#mytable");

         d3.csv("data/people.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            // age dimension
            var ageDimension = mycrossfilter.dimension(function(data) { 
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
            });
            var ageGroup = ageDimension.group().reduceCount();

            barChart
               .width(400)
               .height(200)
               .x(d3.scale.linear().domain([15,70]))
               .yAxisLabel("Count")
               .xAxisLabel("Age")
               .elasticY(true)
               .elasticX(true)
               .dimension(ageDimension)
               .group(ageGroup);

            countChart
               .dimension(mycrossfilter)
               .group(mycrossfilter.groupAll());

            tableChart
               .dimension(ageDimension)
               .group(function (data) {
                  return ~~((Date.now() - new Date(data.DOB)) / (31557600000));
               })
               .size(Infinity)
               .columns(['name', 'DOB'])
               .sortBy(function (d) {
                  return d.value;
               })
               .order(d3.ascending);

            barChart.render();
            countChart.render();
            tableChart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and you will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/data_table.htm" height="600px" width="660px"></iframe>
<!--<p>First, the data table looks as shown in the following screenshot.</p>
<img src="/dcjs/images/data_table.jpg" alt="Data Table" />-->
<p>After selecting an age between 20 and 30, it displays the table records as shown in the screenshot below &minus;</p>
<img src="/dcjs/images/table_records.jpg" alt="Table Records" />
<h1>DC.js - Data Grid</h1>
<p>Data grid is used to filter and display the records. This chapter explains about data grid in detail.</p>
<h2>Data Grid Methods</h2>
<p>Before moving on to draw a data grid, we should understand the <b>dc.dataGrid</b> class and its methods. This class uses a mixin to get the basic functionality of drawing a data grid chart, which is defined below &minus;</p>
<ul class="list">
<li>dc.baseMixin</li>
</ul>
<p>The dc.dataGrid gets all the methods of this mixin as well as has its own methods to draw the data grid, which is explained below &minus;</p>
<h3>beginSlice( [slice])</h3>
<p>This method is used to get or set the index of the beginning slice. This method is useful when implementing pagination.</p>
<p>Similarly, you can perform endSlice().</p>
<h3>group(function)</h3>
<p>This method is used to perform the group function for the data grid.</p>
<h3>html( [html])</h3>
<p>This method is used to get or set the function to generate a dynamic html.</p>
<h3>order( [order])</h3>
<p>It is used to sort the order function.</p>
<h3>size( [size])</h3>
<p>It is used to display the number of items in the grid.</p>
<h3>sortBy( [sortByFunction])</h3>
<p>This method is used to get or set the sort-by function. We can sort a particular field using this function. For example: we can sort by age, which is defined below &minus;</p>
<pre class="prettyprint notranslate">
chart.sortBy(function(d) {
   return d.age;
});
</pre>
<h2>Data Grid Example</h2>
<p>Let us perform a data grid in DC. To do this, we need to follow the steps given below &minus;</p>
<h3>Step 1: Add styles</h3>
<p>Let us add styles in CSS using the coding below &minus;</p>
<pre class="prettyprint notranslate">
.dc-chart { font-size: 12px; }
.dc-grid-top { padding-left: 10px; font-size: 14px; font-weight: bold; }
.dc-grid-item { padding-left: 10px; font-size: 12px; font-weight: normal; }
</pre>
<p>Here, we have assigned the styles for the chart, grid-top and grid-item.</p>
<h3>Step 2: Create a variable</h3>
<p>Let us create a variable in DC as explained below &minus;</p>
<pre class="prettyprint notranslate">
var barChart = dc.barChart('#line'); 
var countChart = dc.dataCount("#mystats");
var gridChart = dc.dataGrid("#mygrid");
</pre>
<p>Here, we have assigned a barChart variable id in line, countChart id is mystats and gridChart id is mygrid.</p>
<h3>Step 3: Read the data</h3>
<p>Read the data from the <b>people.csv</b> file as shown below &minus;</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If data is not present, then it returns an error. Now, assign the data to a crossfilter.</p>
<p>Here, we used the same people.csv file, which was used in our previous charting examples. It looks like as shown below &minus;</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

..........................................
.........................................
</pre>
<h3>Step 4: Set the dimension</h3>
<p>You can set the dimension using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var ageDimension = mycrossfilter.dimension(function(data) { 
   return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
});
</pre>
<p>After the dimension has been assigned, group the age using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
var ageGroup = ageDimension.group().reduceCount();
</pre>
<h3>Step 5: Generate a chart</h3>
<p>Now, generate a bar chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
barChart
   .width(400)
   .height(200)
   .x(d3.scale.linear().domain([15,70]))
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .elasticY(true)
   .elasticX(true)
   .dimension(ageDimension)
   .group(ageGroup);
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 400 and height as 200.</li>
<li>Next, we have specified the domain range as [15,70].</li>
<li>We have set the x-axis label as age and y-axis label as count.</li>
<li>We have specified the elasticY and X function as true.</li>
</ul>
<h3>Step 6: Create the grid chart</h3>
<p>Now, create the grid chart using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
gridChart
   .dimension(ageDimension)
   .group(function (data) {
      return ~~((Date.now() - new Date(data.DOB)) / (31557600000));
   })
</pre>
<h3>Step 7: Render the grid</h3>
<p>Now, render the grid using the coding given below &minus;</p>
<pre class="prettyprint notranslate">
.size(100)
   .htmlGroup (function(d) { 
      return 'Age: ' + d.key +
      '; Count: ' + d.values.length +
      ' people'
   })
   .html (function(d) { return d.name; })
   .sortBy(function (d) {
      return d.name;
   })
   .order(d3.ascending);

barChart.render();
countChart.render();
gridChart.render();
</pre>
<p>Here, we have sorted the name using the html() function and have finally rendered the chart.</p>
<h3>Step 8: Working example</h3>
<p>The complete code is as follows. Create a webpage <b>datagrid.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC datagrid sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;
      
      &lt;style&gt;
         .dc-chart { font-size: 12px; }
         .dc-grid-top { padding-left: 10px; font-size: 14px; font-weight: bold; }
         .dc-grid-item { padding-left: 10px; font-size: 12px; font-weight: normal; }
      &lt;/style&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div style = "width: 600px;"&gt;
            &lt;div id = "mystats" class = "dc-data-count" style = "float: right"&gt;
               &lt;span class = "filter-count"&gt;&lt;/span&gt; selected out of &lt;span
                  class = "total-count"&gt;&lt;/span&gt; | &lt;a href = "javascript:dc.filterAll();
                  dc.renderAll();"&gt;Reset All&lt;/a&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both; padding-top: 20px;"&gt;
            &lt;div&gt;
               &lt;div id = "line"&gt;&lt;/div&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both"&gt;
            &lt;div class = "dc-data-grid" id = "mygrid"&gt;&lt;/div&gt;
         &lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var barChart = dc.barChart('#line'); 
         var countChart = dc.dataCount("#mystats");
         var gridChart = dc.dataGrid("#mygrid");

         d3.csv("data/people.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            // age dimension
            var ageDimension = mycrossfilter.dimension(function(data) { 
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
            });
            var ageGroup = ageDimension.group().reduceCount();

            barChart
               .width(400)
               .height(200)
               .x(d3.scale.linear().domain([15,70]))
               .yAxisLabel("Count")
               .xAxisLabel("Age")
               .elasticY(true)
               .elasticX(true)
               .dimension(ageDimension)
               .group(ageGroup);

            countChart
               .dimension(mycrossfilter)
               .group(mycrossfilter.groupAll());

            gridChart
               .dimension(ageDimension)
               .group(function (data) {
                  return ~~((Date.now() - new Date(data.DOB)) / (31557600000));
               })
               .size(100)
               .htmlGroup (function(d) { 
                  return 'Age: ' + d.key +
                  '; Count: ' + d.values.length +
                  ' people'
               })
               .html (function(d) { return d.name; })
               .sortBy(function (d) {
                  return d.name;
               })
               .order(d3.ascending);

            barChart.render();
            countChart.render();
            gridChart.render();
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<p>Initially, the grid chart looks like the following screenshot.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/data_grid.htm" height="600px" width="660px"></iframe>
<!--<img src="/dcjs/images/grid_chart.jpg" alt="Grid Chart" />-->
<p>If you select a particular age between 63 and 66, it filters out the following records.</p>
<img src="/dcjs/images/filters_records.jpg" alt="Filters Records" />
<h1>DC.js - Legend</h1>
<p>Legend is an attachable screen customization. It can be added to other DC charts to render horizontal legend labels. This chapter explains about legend in detail.</p>
<h2>Legend Methods</h2>
<p>Legend supports the following important methods. Let us go through each one of them in detail.</p>
<h3>autoItemWidth( [width])</h3>
<p>This method is used to set an automatic width for legend items on or off. If true, itemWidth is ignored. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
legend.autoItemWidth = function (width) {
   if (!arguments.length) {
      return _width;
   }
}
</pre>
<h3>gap( [gap])</h3>
<p>This method is used to set or get a gap between the legend items. It is defined as follows &minus;</p>
<pre class="prettyprint notranslate">
legend.gap = function (gap) {
   if (!arguments.length) {
      return _gap;
   }
}
</pre>
<h3>horizontal( [h])</h3>
<p>This method is used to position the legend horizontally and is defined as follows.</p>
<pre class="prettyprint notranslate">
_legend.horizontal = function (h) {
   if (!arguments.length) {
      return _h;
   }
};
</pre>
<h3>itemHeight( [itemHeight])</h3>
<p>This method is used to set or get the legend item height.</p>
<pre class="prettyprint notranslate">
legend.itemHeight = function (itemHeight) {
   if (!arguments.length) {
      return _itemHeight;
   }
};
</pre>
<h3>itemWidth( [itemWidth])</h3>
<p>This method is used to set or get the legend the item width for a horizontal legend.</p>
<pre class="prettyprint notranslate">
_legend.itemWidth = function (itemWidth) {
   if (!arguments.length) {
      return _itemWidth;
   }
};
</pre>
<h3>legendText( [text])</h3>
<p>This method is used to set or get the legend text function. The legend widget uses this function to render the legend text for each item. If no function is specified, the legend widget will display the names associated with each group. A simple example is shown below &minus;</p>
<pre class="prettyprint notranslate">
legend.legendText(dc.pluck('name'))
</pre>
<h3>maxItems( [items])</h3>
<p>This method is used to display the maximum number of legend items.</p>
<h3>x( [x])</h3>
<p>It is used to set or get the x-coordinate for a legend widget and is defined below &minus;</p>
<pre class="prettyprint notranslate">
legend.x = function (x) {
   if (!arguments.length) {
      return _x;
   }
};
</pre>
<p>Similarly, you can also perform the y-coordinate.</p>
<h1>DC.js - Dashboard Working Example</h1>
<p>In this chapter, we will develop a dashboard in DC by clicking and selecting a chart.</p>
<h2>Working Example</h2>
<p>Now, we have the background and can start to write some code. It contains the following steps &minus;</p>
<h3>Step 1: Add styles</h3>
<p>Let us add styles in the CSS using the coding given below.</p>
<pre class="prettyprint notranslate">
&lt;style&gt;
   .dc-chart { font-size: 12px; }
   .dc-grid-top { padding-left: 10px; font-size: 14px; font-weight: bold; }
   .dc-grid-item { padding-left: 10px; font-size: 12px; font-weight: normal; }
&lt;/style&gt;
</pre>
<p>Here, we have assigned styles for the chart, grid-top and the grid-item.</p>
<h3>Step 2: Create a variable</h3>
<p>Let us create a variable in DC as shown below.</p>
<pre class="prettyprint notranslate">
var barChart = dc.barChart('#line');
var pieChart = dc.pieChart('#pie'); 
var countChart = dc.dataCount("#mystats");
var gridChart = dc.dataGrid("#mygrid");
</pre>
<p>Here, we have assigned a barChart variable id in line, countChart id is mystats, pieChart is pie and gridChart id is mygrid.</p>
<h3>Step 3: Read the data</h3>
<p>Read the data from the people.csv file as shown below.</p>
<pre class="prettyprint notranslate">
d3.csv("data/people.csv", function(errors, people) {
   var mycrossfilter = crossfilter(people);
}
</pre>
<p>If the data is not present, then it returns an error. Now, assign the data to a crossfilter. Here, we have used the same <b>people.csv</b> file, which we have used in our previous charting examples. It looks as shown below.</p>
<pre class="result notranslate">
id,name,gender,DOB,MaritalStatus,CreditCardType
1,Damaris,Female,1973-02-18,false,visa-electron
2,Barbe,Female,1969-04-10,true,americanexpress
3,Belia,Female,1960-04-16,false,maestro
4,Leoline,Female,1995-01-19,true,bankcard
5,Valentine,Female,1992-04-16,false,
6,Rosanne,Female,1985-01-05,true,bankcard
7,Shalna,Female,1956-11-01,false,jcb
8,Mordy,Male,1990-03-27,true,china-unionpay

.........................................
.........................................
</pre>
<h3>Step 4: Set the dimension for age</h3>
<p>You can set the dimension using the coding below.</p>
<pre class="prettyprint notranslate">
var ageDimension = mycrossfilter.dimension(function(data) { 
   return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
});
</pre>
<p>After the dimension has been assigned, group the age using the coding given below.</p>
<pre class="prettyprint notranslate">
var ageGroup = ageDimension.group().reduceCount();
</pre>
<h3>Step 5: Set the dimension for gender</h3>
<p>You can set the dimension using the coding below.</p>
<pre class="prettyprint notranslate">
// gender dimension
var genderDimension = mycrossfilter.dimension(function(data) { return data.gender; });
var genderGroup = genderDimension.group().reduceCount();
</pre>
<h3>Step 6: Generate a bar chart</h3>
<p>Now, generate a bar chart using the coding below.</p>
<pre class="prettyprint notranslate">
barChart
   .width(400)
   .height(200)
   .x(d3.scale.linear().domain([15,70]))
   .yAxisLabel("Count")
   .xAxisLabel("Age")
   .elasticY(true)
   .elasticX(true)
   .dimension(ageDimension)
   .group(ageGroup);
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 400 and height as 200.</li>
<li>Next, we have specified the domain range as [15, 70].</li>
<li>We have set the x-axis label as age and the y-axis label as count.</li>
<li>We have specified the elasticY and X function as true.</li>
</ul>
<h3>Step 7: Generate a pie chart</h3>
<p>Now, generate a pie chart using the coding below.</p>
<pre class="prettyprint notranslate">
pieChart
   .width(200)
   .height(100)
   .dimension(genderDimension)
   .group(genderGroup);
</pre>
<p>Here,</p>
<ul class="list">
<li>We have assigned the chart width as 200 and height as 100.</li>
<li>Now, group the dimension by gender.</li>
</ul>
<h3>Step 8: Create the grid and count chart</h3>
<p>Now, create the grid and count the chart using the coding given below.</p>
<pre class="prettyprint notranslate">
countChart
   .dimension(mycrossfilter)
   .group(mycrossfilter.groupAll());

gridChart
   .dimension(ageDimension)
   .group(function (data) {
      return ~~((Date.now() - new Date(data.DOB)) / (31557600000));
   })
</pre>
<h3>Step 9: Render the grid and count</h3>
<p>Now, render the grid and count using the coding below.</p>
<pre class="prettyprint notranslate">
.size(100)
   .htmlGroup (function(d) { 
      return 'Age: ' + d.key +
      '; Count: ' + d.values.length +
      ' people'
   })
   .html (function(d) { return d.name; })
   .sortBy(function (d) {
      return d.name;
   })
   .order(d3.ascending);

barChart.render();
pieChart.render();
countChart.render();
gridChart.render();
</pre>
<p>Here, we have sorted the name by using the html() function and have finally rendered the chart.</p>
<h3>Step 10: Working example</h3>
<p>The complete code is as follows. Create a webpage <b>dashboard.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;DC dashboard sample&lt;/title&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/bootstrap.css"&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "css/dc.css"/&gt;
      
      &lt;style&gt;
         .dc-chart { font-size: 12px; }
         .dc-grid-top { padding-left: 10px; font-size: 14px; font-weight: bold; }
         .dc-grid-item { padding-left: 10px; font-size: 12px; font-weight: normal; }
      &lt;/style&gt;

      &lt;script src = "js/d3.js"&gt;&lt;/script&gt;
      &lt;script src = "js/crossfilter.js"&gt;&lt;/script&gt;
      &lt;script src = "js/dc.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div&gt;
         &lt;div style = "width: 600px;"&gt;
            &lt;div id = "mystats" class = "dc-data-count" style = "float: right"&gt;
               &lt;span class = "filter-count"&gt;&lt;/span&gt; selected out of &lt;span
                  class = "total-count"&gt;&lt;/span&gt; | &lt;a href = "javascript:dc.filterAll();
                  dc.renderAll();"&gt;Reset All&lt;/a&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both; padding-top: 20px;"&gt;
            &lt;div&gt;
               &lt;div id = "line"&gt;&lt;/div&gt;
               &lt;div id = "pie"&gt;&lt;/div&gt;
            &lt;/div&gt;
         &lt;/div&gt;

         &lt;div style = "clear: both"&gt;
            &lt;div class = "dc-data-grid" id = "mygrid"&gt;&lt;/div&gt;
         &lt;/div&gt;
      &lt;/div&gt;

      &lt;script language = "javascript"&gt;
         var barChart = dc.barChart('#line'); // , 'myChartGroup');
         var pieChart = dc.pieChart('#pie'); //, 'myChartGroup');
         var countChart = dc.dataCount("#mystats");
         var gridChart = dc.dataGrid("#mygrid");

         d3.csv("data/people.csv", function(errors, people) {
            var mycrossfilter = crossfilter(people);

            // age dimension
            var ageDimension = mycrossfilter.dimension(function(data) { 
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000)) 
            });
            var ageGroup = ageDimension.group().reduceCount();

            // gender dimension
            var genderDimension = mycrossfilter.dimension(function(data) { 
               return data.gender; 
            });
            var genderGroup = genderDimension.group().reduceCount();

         barChart
            .width(400)
            .height(200)
            .x(d3.scale.linear().domain([15,70]))
            .yAxisLabel("Count")
            .xAxisLabel("Age")
            .elasticY(true)
            .elasticX(true)
            .dimension(ageDimension)
            .group(ageGroup);

         pieChart
            .width(200)
            .height(100)
            .dimension(genderDimension)
            .group(genderGroup);

         countChart
            .dimension(mycrossfilter)
            .group(mycrossfilter.groupAll());

         gridChart
            .dimension(ageDimension)
            .group(function (data) {
               return ~~((Date.now() - new Date(data.DOB)) / (31557600000));
            })
            .size(100)
            .htmlGroup (function(d) { 
               return 'Age: ' + d.key +
               '; Count: ' + d.values.length +
               ' people'
            })
            .html (function(d) { return d.name; })
            .sortBy(function (d) {
               return d.name;
            })
            .order(d3.ascending);

         barChart.render();
         pieChart.render();
         countChart.render();
         gridChart.render();
      });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/dcjs/src/dashboard.htm" height="600px" width="660px"></iframe>
<p>You can check yourself by clicking bar, pie charts and see how the data changes.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/dcjs/dcjs_dashboard_working_example.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/dcjs/dcjs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
