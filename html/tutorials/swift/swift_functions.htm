<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Swift - Functions - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Swift - Functions - A function is a set of statements organized together to perform a specific task. A Swift 4 function can be as simple as a simple C function to as complex as an "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/swift/swift_functions.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#f05c02;
}
a.demo {
    background:#f05c02;
}
li.heading {
    background:#f05c02;
}
.course-box{background:#f05c02}
.home-intro-sub p{color:#f05c02}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/swift/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/swift/images/swift-mini-logo.jpg" alt="Swift Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Swift Tutorial</li>
<li><a href="/swift/index.htm">Swift - Home</a></li>
<li><a href="/swift/swift_overview.htm">Swift - Overview</a></li>
<li><a href="/swift/swift_environment.htm">Swift - Environment</a></li>
<li><a href="/swift/swift_basic_syntax.htm">Swift - Basic Syntax</a></li>
<li><a href="/swift/swift_data_types.htm">Swift - Data Types</a></li>
<li><a href="/swift/swift_variables.htm">Swift - Variables</a></li>
<li><a href="/swift/swift_optionals.htm">Swift - Optionals</a></li>
<li><a href="/swift/swift_tuples.htm">Swift - Tuples</a></li>
<li><a href="/swift/swift_constants.htm">Swift - Constants</a></li>
<li><a href="/swift/swift_literals.htm">Swift - Literals</a></li>
<li><a href="/swift/swift_operators.htm">Swift - Operators</a></li>
<li><a href="/swift/swift_decision_making.htm">Swift - Decision Making</a></li>
<li><a href="/swift/swift_loops.htm">Swift - Loops</a></li>
<li><a href="/swift/swift_strings.htm">Swift - Strings</a></li>
<li><a href="/swift/swift_characters.htm">Swift - Characters</a></li>
<li><a href="/swift/swift_arrays.htm">Swift - Arrays</a></li>
<li><a href="/swift/swift_sets.htm">Swift - Sets</a></li>
<li><a href="/swift/swift_dictionaries.htm">Swift - Dictionaries</a></li>
<li><a href="/swift/swift_functions.htm">Swift - Functions</a></li>
<li><a href="/swift/swift_closures.htm">Swift - Closures</a></li>
<li><a href="/swift/swift_enumerations.htm">Swift - Enumerations</a></li>
<li><a href="/swift/swift_structures.htm">Swift - Structures</a></li>
<li><a href="/swift/swift_classes.htm">Swift - Classes</a></li>
<li><a href="/swift/swift_properties.htm">Swift - Properties</a></li>
<li><a href="/swift/swift_methods.htm">Swift - Methods</a></li>
<li><a href="/swift/swift_subscripts.htm">Swift - Subscripts</a></li>
<li><a href="/swift/swift_inheritance.htm">Swift - Inheritance</a></li>
<li><a href="/swift/swift_initialization.htm">Swift - Initialization</a></li>
<li><a href="/swift/swift_deinitialization.htm">Swift - Deinitialization</a></li>
<li><a href="/swift/swift_arc_overview.htm">Swift - ARC Overview</a></li>
<li><a href="/swift/swift_optional_chaining.htm">Swift - Optional Chaining</a></li>
<li><a href="/swift/swift_type_casting.htm">Swift - Type Casting</a></li>
<li><a href="/swift/swift_extensions.htm">Swift - Extensions</a></li>
<li><a href="/swift/swift_protocols.htm">Swift - Protocols</a></li>
<li><a href="/swift/swift_generics.htm">Swift - Generics</a></li>
<li><a href="/swift/swift_access_control.htm">Swift - Access Control</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Swift Useful Resources</li>
<li><a href="/swift/compile_swift_online.htm">Swift - Compile Online</a></li>
<li><a href="/swift/swift_quick_guide.htm">Swift - Quick Guide</a></li>
<li><a href="/swift/swift_useful_resources.htm">Swift - Useful Resources</a></li>
<li><a href="/swift/swift_discussion.htm">Swift - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Swift - Functions</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/swift/swift_dictionaries.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/swift/swift_closures.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>A function is a set of statements organized together to perform a specific task. A Swift 4 function can be as simple as a simple C function to as complex as an Objective C language function. It allows us to pass local and global parameter values inside the function calls.</p>
<ul class="list">
<li><p><b>Function Declaration</b> &minus; tells the compiler about a function's name, return type, and parameters.</p></li>
<li><p><b>Function Definition</b> &minus; It provides the actual body of the function.</p></li>
</ul>
<p>Swift 4 functions contain parameter type and its return types.</p>
<h2>Function Definition</h2>
<p>In Swift 4, a function is defined by the "func" keyword. When a function is newly defined, it may take one or several values as input 'parameters' to the function and it will process the functions in the main body and pass back the values to the functions as output 'return types'.</p>
<p>Every function has a function name, which describes the task that the function performs. To use a function, you "call" that function with its name and pass input values (known as arguments) that match the types of the function's parameters. Function parameters are also called as 'tuples'.</p>
<p>A function's arguments must always be provided in the same order as the function's parameter list and the return values are followed by &rarr;.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
func funcname(Parameters) -&gt; returntype {
   Statement1
   Statement2
   ---
   Statement N
   return parameters
}
</pre>
<p>Take a look at the following code. The student’s name is declared as string datatype declared inside the function 'student' and when the function is called, it will return student’s name.</p>
<div class="demo-view">
<a href="http://tpcg.io/LRdK5a" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func student(name: String) -&gt; String {
   return name
}

print(student(name: "First Program"))
print(student(name: "About Functions"))
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
First Program
About Functions
</pre>
<h2>Calling a Function</h2>
<p>Let us suppose we defined a function called 'display' to Consider for example to display the numbers a function with function name 'display' is initialized first with argument 'no1' which holds integer data type. Then the argument 'no1' is assigned to argument 'a' which hereafter will point to the same data type integer. Now the argument 'a' is returned to the function. Here display() function will hold the integer value and return the integer values when each and every time the function is invoked.</p>
<div class="demo-view">
<a href="http://tpcg.io/aIm6Wj" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func display(no1: Int) -&gt; Int {
   let a = no1
   return a
}

print(display(no1: 100))
print(display(no1: 200))
</pre>
<p>When we run above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
100
200
</pre>
<h2>Parameters and Return Values</h2>
<p>Swift 4 provides flexible function parameters and its return values from simple to complex values. Similar to that of C and Objective C, functions in Swift 4 may also take several forms.</p>
<h3>Functions with Parameters</h3>
<p>A function is accessed by passing its parameter values to the body of the function. We can pass single to multiple parameter values as tuples inside the function.</p>
<div class="demo-view">
<a href="http://tpcg.io/mOvrdL" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func mult(no1: Int, no2: Int) -&gt; Int {
   return no1*no2
}

print(mult(no1: 2, no2: 20))
print(mult(no1: 3, no2: 15))
print(mult(no1: 4, no2: 30))
</pre>
<p>When we run above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
40
45
120
</pre>
<h2>Functions without Parameters</h2>
<p>We may also have functions without any parameters.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
func funcname() -&gt; datatype {
   return datatype
}
</pre>
<p>Following is an example having a function without a parameter &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/pot0RK" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func votersname() -&gt; String {
   return "Alice"
}
print(votersname()) 
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
Alice
</pre>
<h2>Functions with Return Values</h2>
<p>Functions are also used to return string, integer, and float data type values as return types. To find out the largest and smallest number in a given array function 'ls' is declared with large and small integer datatypes.</p>
<p>An array is initialized to hold integer values. Then the array is processed and each and every value in the array is read and compared for its previous value. When the value is lesser than the previous one it is stored in 'small' argument, otherwise it is stored in 'large' argument and the values are returned by calling the function.</p>
<div class="demo-view">
<a href="http://tpcg.io/sfuXsE" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func ls(array: [Int]) -&gt; (large: Int, small: Int) {
   var lar = array[0]
   var sma = array[0]

   for i in array[1..&lt;array.count] {
      if i &lt; sma {
         sma = i
      } else if i &gt; lar {
         lar = i
      }
   }
   return (lar, sma)
}

let num = ls(array: [40,12,-5,78,98])
print("Largest number is: \(num.large) and smallest number is: \(num.small)")
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
Largest number is: 98 and smallest number is: -5
</pre>
<h2>Functions without Return Values</h2>
<p>Some functions may have arguments declared inside the function without any return values. The following program declares <b>a</b> and <b>b</b> as arguments to the sum() function. inside the function itself the values for arguments <b>a</b> and <b>b</b> are passed by invoking the function call sum() and its values are printed thereby eliminating return values.</p>
<div class="demo-view">
<a href="http://tpcg.io/AeI1yi" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func sum(a: Int, b: Int) {
   let a = a + b
   let b = a - b
   print(a, b)
}

sum(a: 20, b: 10)
sum(a: 40, b: 10)
sum(a: 24, b: 6)
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
30 20
50 40
30 24
</pre>
<h2>Functions with Optional Return Types</h2>
<p>Swift 4 introduces 'optional' feature to get rid of problems by introducing a safety measure. Consider for example we are declaring function values return type as integer but what will happen when the function returns a string value or either a nil value. In that case compiler will return an error value. 'optional' are introduced to get rid of these problems.</p>
<p>Optional functions will take two forms 'value' and a 'nil'. We will mention 'Optionals' with the key reserved character '?' to check whether the tuple is returning a value or a nil value.</p> 
<div class="demo-view">
<a href="http://tpcg.io/E6SvAs" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func minMax(array: [Int]) -&gt; (min: Int, max: Int)? {
   if array.isEmpty { return nil }
   var currentMin = array[0]
   var currentMax = array[0]
   
   for value in array[1..&lt;array.count] {
      if value &lt; currentMin {
         currentMin = value
      } else if value &gt; currentMax {
         currentMax = value
      }
   }
   return (currentMin, currentMax)
}

if let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {
   print("min is \(bounds.min) and max is \(bounds.max)")
}
</pre>
<p>When we run above program using playground, we get following result &minus;</p>
<pre class="result notranslate">
min is -6 and max is 109
</pre>
<p>''Optionals' are used to check 'nil' or garbage values thereby consuming lot of time in debugging and make the code efficient and readable for the user.</p>
<h2>Functions Local Vs External Parameter Names</h2>
<h3>Local Parameter Names</h3>
<p>Local parameter names are accessed inside the function alone.</p>
<pre class="result notranslate">
func sample(number: Int) {
   print(number)
}
</pre>
<p>Here, the <b>func</b> sample argument number is declared as internal variable since it is accessed internally by the function sample(). Here the 'number' is declared as local variable but the reference to the variable is made outside the function with the following statement &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/fYWC4G" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func sample(number: Int) {
   print(number)
}

sample(number: 1)
sample(number: 2)
sample(number: 3)
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
1
2
3
</pre>
<h2>External Parameter Names</h2>
<p>External parameter names allow us to name a function parameters to make their purpose more clear. For example below you can name two function parameters and then call that function as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/cSpDwh" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func pow(firstArg a: Int, secondArg b: Int) -&gt; Int {
   var res = a
   for _ in 1..&lt;b {
      res = res * a
   }
   print(res)
   return res
}

pow(firstArg:5, secondArg:3)
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
125
</pre>
<h2>Variadic Parameters</h2>
<p>When we want to define function with multiple number of arguments, then we can declare the members as 'variadic' parameters. Parameters can be specified as variadic by (···) after the parameter name.</p>
<div class="demo-view">
<a href="http://tpcg.io/kvKSr6" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func vari&lt;N&gt;(members: N...){
   for i in members {
      print(i)
   }
}

vari(members: 4,3,5)
vari(members: 4.5, 3.1, 5.6)
vari(members: "Swift 4", "Enumerations", "Closures")
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
4
3
5
4.5
3.1
5.6
Swift 4
Enumerations
Closures
</pre>
<h2>Constant, Variable and I/O Parameters</h2>
<p>Functions by default consider the parameters as 'constant', whereas the user can declare the arguments to the functions as variables also. We already discussed that 'let' keyword is used to declare constant parameters and variable parameters is defined with 'var' keyword.</p>
<p>I/O parameters in Swift 4 provide functionality to retain the parameter values even though its values are modified after the function call. At the beginning of the function parameter definition, 'inout' keyword is declared to retain the member values.</p>
<p>It derives the keyword 'inout' since its values are passed 'in' to the function and its values are accessed and modified by its function body and it is returned back 'out' of the function to modify the original argument.</p>
<p>Variables are only passed as an argument for in-out parameter since its values alone are modified inside and outside the function. Hence no need to declare strings and literals as in-out parameters. '&amp;' before a variable name refers that we are passing the argument to the in-out parameter.</p>
<div class="demo-view">
<a href="http://tpcg.io/WZ7Trc" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func temp(a1: inout Int, b1: inout Int) {
   let t = a1
   a1 = b1
   b1 = t
}

var no = 2
var co = 10
temp(a1: &amp;no, b1: &amp;co)
print("Swapped values are \(no), \(co)")
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
Swapped values are 10, 2
</pre>
<h2>Function Types &amp; its Usage</h2>
<p>Each and every function follows the specific function by considering the input parameters and outputs the desired result.</p>
<pre class="result notranslate">
func inputs(no1: Int, no2: Int) -&gt; Int {
   return no1/no2
}
</pre>
<p>Following is an example &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/svjmOF" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func inputs(no1: Int, no2: Int) -&gt; Int {
   return no1/no2
}

print(inputs(no1: 20, no2: 10))
print(inputs(no1: 36, no2: 6))
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
2
6
</pre>
<p>Here the function is initialized with two arguments <b>no1</b> and <b>no2</b> as integer data types and its return type is also declared as 'int'</p>
<pre class="result notranslate">
Func inputstr(name: String) -&gt; String {
   return name
}
</pre>
<p>Here the function is declared as <b>string</b> datatype.</p>
<p>Functions may also have <b>void</b> data types and such functions won't return anything.</p>
<div class="demo-view">
<a href="http://tpcg.io/mN0NVs" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func inputstr() {
   print("Swift 4 Functions")
   print("Types and its Usage")
}
inputstr()
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
Swift 4 Functions
Types and its Usage
</pre>
<p>The above function is declared as a void function with no arguments and no return values.</p>
<h2>Using Function Types</h2>
<p>Functions are first passed with integer, float or string type arguments and then it is passed as constants or variables to the function as mentioned below.</p>
<pre class="prettyprint notranslate">
var addition: (Int, Int) -&gt; Int = sum
</pre>
<p>Here sum is a function name having 'a' and 'b' integer variables which is now declared as a variable to the function name addition. Hereafter both addition and sum function both have same number of arguments declared as integer datatype and also return integer values as references.</p>
<div class="demo-view">
<a href="http://tpcg.io/7R2x1q" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func sum(a: Int, b: Int) -&gt; Int {
   return a + b
}
var addition: (Int, Int) -&gt; Int = sum
print("Result: \(addition(40, 89))")
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
Result: 129
</pre>
<h2>Function Types as Parameter Types &amp; Return Types</h2>
<p>We can also pass the function itself as parameter types to another function.</p>
<pre class="prettyprint notranslate">
func sum(a: Int, b: Int) -&gt; Int {
   return a + b
}
var addition: (Int, Int) -&gt; Int = sum
print("Result: \(addition(40, 89))")

func another(addition: (Int, Int) -&gt; Int, a: Int, b: Int) {
   print("Result: \(addition(a, b))")
}
another(sum, 10, 20)
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
Result: 129
Result: 30
</pre>
<h2>Nested Functions</h2>
<p>A nested function provides the facility to call the outer function by invoking the inside function.</p>
<div class="demo-view">
<a href="http://tpcg.io/WWsZ2D" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
func calcDecrement(forDecrement total: Int) -&gt; () -&gt; Int {
   var overallDecrement = 0
   func decrementer() -&gt; Int {
      overallDecrement -= total
      return overallDecrement
   }
   return decrementer
}

let decrem = calcDecrement(forDecrement: 30)
print(decrem())
</pre>
<p>When we run the above program using playground, we get the following result &minus;</p>
<pre class="result notranslate">
-30
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/swift/swift_dictionaries.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/swift/swift_closures.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
