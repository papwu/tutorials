<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Spring MVC - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Spring MVC - Quick Guide - The Spring Web MVC framework provides a model-view-controller architecture and ready components that can be used to develop flexible and loosely coupled web app"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/springmvc/springmvc_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#387b2c;
}
a.demo {
    background:#387b2c;
}
li.heading {
    background:#387b2c;
}
.course-box{background:#387b2c}
.home-intro-sub p{color:#387b2c}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/springmvc/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/springmvc/images/springmvc-mini-logo.jpg" alt="Spring MVC Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Spring MVC Basics</li>
<li><a href="/springmvc/index.htm">Spring MVC - Home</a></li>
<li><a href="/springmvc/springmvc_overview.htm">Spring MVC - Overview</a></li>
<li><a href="/springmvc/springmvc_environment_setup.htm">Spring MVC - Environment Setup</a></li>
<li><a href="/springmvc/springmvc_hello_world_example.htm">Spring MVC - Hello World Example</a></li>
<li class="heading">Spring MVC - Form Handling</li>
<li><a href="/springmvc/springmvc_form_handling.htm">Spring MVC - Form Handling</a></li>
<li><a href="/springmvc/springmvc_page_redirection.htm">Spring MVC - Page Redirection</a></li>
<li><a href="/springmvc/springmvc_static_pages.htm">Spring MVC - Static Pages</a></li>
<li class="heading">Spring MVC - Form Tag library</li>
<li><a href="/springmvc/springmvc_textbox.htm">Spring MVC - Textbox</a></li>
<li><a href="/springmvc/springmvc_password.htm">Spring MVC - Password</a></li>
<li><a href="/springmvc/springmvc_textarea.htm">Spring MVC - Textarea</a></li>
<li><a href="/springmvc/springmvc_checkbox.htm">Spring MVC - Checkbox</a></li>
<li><a href="/springmvc/springmvc_checkboxes.htm">Spring MVC - Checkboxes</a></li>
<li><a href="/springmvc/springmvc_radiobutton.htm">Spring MVC - Radiobutton</a></li>
<li><a href="/springmvc/springmvc_radiobuttons.htm">Spring MVC - Radiobuttons</a></li>
<li><a href="/springmvc/springmvc_dropdown.htm">Spring MVC - Dropdown</a></li>
<li><a href="/springmvc/springmvc_listbox.htm">Spring MVC - Listbox</a></li>
<li><a href="/springmvc/springmvc_hidden.htm">Spring MVC - Hidden</a></li>
<li><a href="/springmvc/springmvc_errors.htm">Spring MVC - Errors</a></li>
<li><a href="/springmvc/springmvc_upload.htm">Spring MVC - Upload</a></li>
<li class="heading">Spring MVC - Handler Mapping</li>
<li><a href="/springmvc/springmvc_beannameurlhandlermapping.htm">Bean Name Url Handler Mapping</a></li>
<li><a href="/springmvc/springmvc_controllerclassnamehandlermapping.htm">Controller Class Name Handler Mapping</a></li>
<li><a href="/springmvc/springmvc_simpleurlhandlermapping.htm">Simple Url Handler Mapping</a></li>
<li class="heading">Spring MVC - Controller</li>
<li><a href="/springmvc/springmvc_multiactioncontroller.htm">Spring MVC - Multi Action Controller</a></li>
<li><a href="/springmvc/springmvc_propertiesmethodnameresolver.htm">Properties Method Name Resolver</a></li>
<li><a href="/springmvc/springmvc_parametermethodnameresolver.htm">Parameter Method Name Resolver</a></li>
<li><a href="/springmvc/springmvc_parameterizableviewcontroller.htm">Parameterizable View Controller</a></li>
<li class="heading">Spring MVC - View Resolver</li>
<li><a href="/springmvc/springmvc_internalresourceviewresolver.htm">Internal Resource View Resolver</a></li>
<li><a href="/springmvc/springmvc_xmlviewresolver.htm">Spring MVC - Xml View Resolver</a></li>
<li><a href="/springmvc/springmvc_resourcebundleviewresolver.htm">Resource Bundle View Resolver</a></li>
<li><a href="/springmvc/springmvc_multiple_resolver_mapping.htm">Multiple Resolver Mapping</a></li>
<li class="heading">Spring MVC - Integration</li>
<li><a href="/springmvc/springmvc_hibernate_validator.htm">Spring MVC - Hibernate Validator</a></li>
<li><a href="/springmvc/springmvc_rss_feed.htm">Spring MVC - Generate RSS Feed</a></li>
<li><a href="/springmvc/springmvc_xml.htm">Spring MVC - Generate XML</a></li>
<li><a href="/springmvc/springmvc_json.htm">Spring MVC - Generate JSON</a></li>
<li><a href="/springmvc/springmvc_excel.htm">Spring MVC - Generate Excel</a></li>
<li><a href="/springmvc/springmvc_pdf.htm">Spring MVC - Generate PDF</a></li>
<li><a href="/springmvc/springmvc_log4j.htm">Spring MVC - Using log4j</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Spring Questions and Answers</li>
<li><a href="/spring/spring_questions_answers.htm">Spring - Questions and Answers</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Spring Useful Resources</li>
<li><a href="/springmvc/springmvc_quick_guide.htm">Spring MVC - Quick Guide</a></li>
<li><a href="/springmvc/springmvc_useful_resources.htm">Spring MVC - Useful Resources</a></li>
<li><a href="/springmvc/springmvc_discussion.htm">Spring MVC - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Spring MVC - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/spring/spring_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/springmvc/springmvc_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Spring - MVC Framework Overview</h1>
<p>The Spring Web MVC framework provides a model-view-controller architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between these elements.</p>
<ul class="list">
<li><p>The <b>Model</b> encapsulates the application data and in general, they will consist of <b>POJO</b>.</p></li>
<li><p>The <b>View</b>  is responsible for rendering the model data and in general, it generates <b>HTML</b> output that the client's browser can interpret.</p></li>
<li><p>The <b>Controller</b> is responsible for processing <b>User Requests</b> and <b>Building Appropriate Model</b> and passes it to the view for rendering.</p></li>
</ul>
<h2>The DispatcherServlet</h2>
<p>The Spring Web model-view-controller (MVC) framework is designed around a DispatcherServlet that handles all the HTTP requests and responses. The request processing workflow of the Spring Web MVC DispatcherServlet is shown in the following illustration.</p>
<img src="/springmvc/images/spring_dispatcherservlet.png" alt="Spring DispatcherServlet" />
<p>Following is the sequence of events corresponding to an incoming HTTP request to DispatcherServlet &minus;</p>
<ul class="list">
<li><p>After receiving an HTTP request, DispatcherServlet consults the <b>HandlerMapping</b> to call the appropriate Controller.</p></li>
<li><p>The Controller takes the request and calls the appropriate service methods based on used <b>GET</b> or <b>POST method</b>. The service method will set model data based on defined business logic and returns view name to the DispatcherServlet.</p></li>
<li><p>The DispatcherServlet will take help from <b>ViewResolver</b> to pick up the defined view for the request.</p></li>
<li><p>Once view is finalized, The DispatcherServlet passes the model data to the view, which is finally rendered, on the browsers.</p></li>
</ul>
<p>All the above-mentioned components, i.e. HandlerMapping, Controller and ViewResolver are parts of <b>WebApplicationContext</b>, which is an extension of the plain <b>ApplicationContext</b> with some extra features necessary for web applications.</p>
<h2>Required Configuration</h2>
<p>We need to map requests that you want the DispatcherServlet to handle, by using a URL mapping in the <b>web.xml</b> file. The following is an example to show declaration and mapping for <b>HelloWeb</b> DispatcherServlet &minus;</p>
<pre class="prettyprint notranslate">
&lt;web-app id = "WebApp_ID" version = "2.4"
   xmlns = "http://java.sun.com/xml/ns/j2ee" 
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://java.sun.com/xml/ns/j2ee 
   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;
 
   &lt;display-name&gt;Spring MVC Application&lt;/display-name&gt;

   &lt;servlet&gt;
      &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;
      &lt;servlet-class&gt;
         org.springframework.web.servlet.DispatcherServlet
      &lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
   &lt;/servlet&gt;

   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;
      &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</pre>
<p>The <b>web.xml</b> file will be kept in the <b>WebContent/WEB-INF</b> directory of your web application. Upon initialization of the <b>HelloWeb</b> DispatcherServlet, the framework will try to load the application context from a file named <b>[servlet-name]-servlet.xml</b> located in the application's WebContent/WEB-INF directory. In this case, our file will be <b>HelloWeb-servlet.xml</b>.</p>
<p>Next, the <b>&lt;servlet-mapping&gt;</b> tag indicates which URLs will be handled by which DispatcherServlet. Here, all the HTTP requests ending with .jsp will be handled by the <b>HelloWeb</b> DispatcherServlet.</p>
<p>If you do not want to go with the default filename as <b>[servlet-name]-servlet.xml</b> and default location as WebContent/WEB-INF, you can customize this file name and location by adding the servlet listener <b>ContextLoaderListener</b> in your web.xml file as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;web-app...&gt;

   &lt;!-------- <i>DispatcherServlet</i> definition goes here-----&gt;
   ....
   &lt;context-param&gt;
      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
      &lt;param-value&gt;/WEB-INF/HelloWeb-servlet.xml&lt;/param-value&gt;
   &lt;/context-param&gt;

   &lt;listener&gt;
      &lt;listener-class&gt;
         org.springframework.web.context.ContextLoaderListener
      &lt;/listener-class&gt;
   &lt;/listener&gt;
&lt;/web-app&gt;
</pre>
<p>Now, let us check the required configuration for <b>HelloWeb-servlet.xml</b> file, placed in your web application's WebContent/WEB-INF directory.</p>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;

&lt;/beans&gt;
</pre>
<p>Following are some important points about <b>HelloWeb-servlet.xml</b> file &minus;</p>
<ul class="list">
<li><p>The <b>[servlet-name]-servlet.xml</b> file will be used to create the beans defined, overriding the definitions of any beans defined with the same name in the global scope.</p></li>
<li><p>The <b>&lt;context:component-scan...&gt;</b> tag will be used to activate the Spring MVC annotation scanning capability, which allows to make use of annotations like <b>@Controller</b> and <b>@RequestMapping</b>, etc.</p></li>
<li><p>The <b>InternalResourceViewResolver</b> will have rules defined to resolve the view names. As per the above-defined rule, a logical view named <b>hello</b> is delegated to a view implementation located at <b>/WEB-INF/jsp/hello.jsp</b>.</p></li>
</ul>
<p>Let us now understand how to create the actual components i.e., Controller, Model and View.</p>
<h2>Defining a Controller</h2>
<p>The DispatcherServlet delegates the request to the controllers to execute the functionality specific to it. The <b>@Controller</b> annotation indicates that a particular class serves the role of a controller. The <b>@RequestMapping</b> annotation is used to map a URL to either an entire class or a particular handler method.</p>
<pre class="prettyprint notranslate">
@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");
      return "hello";
   }

}
</pre>
<p>The <b>@Controller</b> annotation defines the class as a Spring MVC controller. Here, the first usage of <b>@RequestMapping</b> indicates that all handling methods on this controller are relative to the <b>/hello</b> path.</p>
<p>The next annotation <b>@RequestMapping (method = RequestMethod.GET)</b> is used to declare the <b>printHello()</b> method as the controller's default service method to handle HTTP GET request. We can define another method to handle any POST request at the same URL.</p>
<p>We can also write the above controller in another form, where we can add additional attributes in the @RequestMapping as follows &minus;</p>
<pre class="prettyprint notranslate">
@Controller
public class HelloController{
 
   @RequestMapping(value = "/hello", method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");
      return "hello";
   }

}
</pre>
<p>The <b>value</b> attribute indicates the URL to which the handler method is mapped and the <b>method</b> attribute defines the service method to handle the HTTP GET request.</p>
<p>Following are some important points to be noted regarding the controller defined above &minus;</p>
<ul class="list">
<li><p>You will define the required business logic inside a service method. You can call another method inside this method as per the requirement.</p></li>
<li><p>Based on the business logic defined, you will create a model within this method. You can set different model attributes and these attributes will be accessed by the view to present the result. This example creates a model with its attribute "message".</p></li>
<li><p>A defined service method can return a String, which contains the name of the <b>view</b> to be used to render the model. This example returns "hello" as the logical view name.</p></li>
</ul>
<h2>Creating JSP Views</h2>
<p>Spring MVC supports many types of views for different presentation technologies. These include - <b>JSPs, HTML, PDF, Excel Worksheets, XML, Velocity Templates, XSLT, JSON, Atom</b> and <b>RSS</b> feeds, <b>JasperReports</b>, etc. However, the most common ones are the JSP templates written with JSTL. So, let us write a simple hello view in /WEB-INF/hello/hello.jsp &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello Spring MVC&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here <b>${message}</b> Here is the attribute, which we have setup inside the Controller. You can have multiple attributes to be displayed inside your view.</p>
<h1>Spring MVC - Environment Setup</h1>
<p>This chapter will guide us on how to prepare a development environment to start your work with the Spring Framework. This chapter will also teach us how to setup <b>JDK, Tomcat</b> and <b>Eclipse</b> on your machine before you setup the Spring Framework &minus;</p>
<h2>Step 1 - Setup Java Development Kit (JDK)</h2>
<p>You can download the latest version from Oracle's Java site &minus; <a rel="nofollow" href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank">Java SE Downloads</a>. You will find instructions for installing JDK in downloaded files, follow the given instructions to install and configure the setup. Once done with the setup, set PATH and JAVA_HOME environment variables to refer to the directory that contains<b>java</b> and <b>javac</b>, typically <b>java_install_dir/bin</b> and <b>java_install_dir</b> respectively.</p>
<p>If you are running Windows and installed the JDK in <b>C:\jdk1.6.0_15</b>, you would have to put the following line in your <b>C:\autoexec.bat file</b>.</p>
<pre class="result notranslate">
set PATH = C:\jdk1.6.0_15\bin;%PATH%
set JAVA_HOME = C:\jdk1.6.0_15
</pre>
<p>Alternatively, on Windows NT/2000/XP, you could also right-click on My Computer &rarr; select Properties &rarr; Advanced &rarr; Environment Variables. Then, you would update the PATH value and click on the OK button.</p>
<p>On UNIX (Solaris, Linux, etc.), if the SDK is installed in <b>/usr/local/jdk1.6.0_15</b> and you use the C shell, then you should key-in the following command into your <b>.cshrc</b> file.</p>
<pre class="result notranslate">
setenv PATH /usr/local/jdk1.6.0_15/bin:$PATH
setenv JAVA_HOME /usr/local/jdk1.6.0_15
</pre>
<p>Alternatively, if you use an Integrated Development Environment (IDE) like <b>Borland JBuilder, Eclipse, IntelliJ IDEA</b> or <b>Sun ONE Studio</b>, then compile and run a simple program to confirm that the IDE knows where Java is installed, otherwise do proper setup as given in the documents of IDE.</p>
<h2>Step 2 &minus; Install Apache Common Logging API</h2>
<p>You can download the latest version of Apache Commons Logging API from <a rel="nofollow" href="https://commons.apache.org/logging/download_logging.cgi" target="_blank">https://commons.apache.org/logging/</a>. Once you have downloaded the installation, unpack the binary distribution into a convenient location.</p>
<p>For example – C:\commons-logging-1.1.1 on windows, or /usr/local/commons-logging1.1.1 on Linux/Unix. This directory will have the following jar files and other supporting documents, etc.</p>
<img src="/springmvc/images/common_logging_files.jpg" alt="Common Logging API" />
<p>Make sure you set your CLASSPATH variable on this directory properly, otherwise you will face problem while running your application.</p>
<h2>Step 3 - Setup Eclipse IDE</h2>
<p>All the examples in this tutorial have been written using the Eclipse IDE. Therefore, it is recommended that we should have the latest version of Eclipse installed on the machine.</p>
<p>To install Eclipse IDE, download the latest Eclipse binaries from the following link <a rel="nofollow" target="_blank" href="https://www.eclipse.org/downloads/">https://www.eclipse.org/downloads/</a>. Once the installation is downloaded, unpack the binary distribution into a convenient location.</p>
<p>For example in – C:\eclipse on windows, or /usr/local/eclipse on Linux/Unix and finally set PATH variable appropriately.</p>
<p>Eclipse can be started by executing the following commands on a windows machine, or we can simply double click on the eclipse.exe.</p>
<pre class="result notranslate">
 %C:\eclipse\eclipse.exe
</pre>
<p>Eclipse can be started by executing the following commands on a UNIX (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$/usr/local/eclipse/eclipse
</pre>
<p>After a successful startup, if everything is fine, then it should display the following screen.</p>
<img src="/springmvc/images/eclipsehomepage.jpg" alt="Eclipse Home page" />
<h2>Step 4 - Setup Spring Framework Libraries</h2>
<p>Now if everything is fine, then we can proceed to setup the Spring Framework. Following are the steps to download and install the framework on the machine.</p>
<ul class="list">
<li><p>Make a choice whether you want to install Spring on Windows or UNIX and then proceed to the next step to download <b>.zip file</b> for windows and <b>.tz</b> file for Unix.</p></li>
<li><p>Download the latest version of Spring framework binaries from <a target="_blank" rel="nofollow" href=" https://repo.spring.io/release/org/springframework/spring"> https://repo.spring.io/release/org/springframework/spring</a>.</p></li>
<li><p>We have downloaded the <b>spring-framework-4.3.1.RELEASE-dist.zip</b> on the Windows Machine and when we unzip the downloaded file, it will give out the directory structure inside – E:\spring as follows.</p></li>
</ul>
<img src="/springmvc/images/spring_directories.jpg" alt="Spring Directories" />
<p>You will find all the Spring libraries in the directory <b>E:\spring\libs</b>. Make sure you set your CLASSPATH variable on this directory properly; otherwise, we will face a problem while running the application. If we use Eclipse, then it is not required to set the CLASSPATH because all the setting will be done through Eclipse.</p>
<p>Once you are done with this last step, you are ready to proceed for your first Spring Example, which you will see in the next chapter.</p>
<h1>Spring MVC - Hello World Example</h1>
<p>The following example shows how to write a simple web based <b>Hello World</b> application using the Spring MVC Framework. To start with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a Dynamic Web Project with a name <b>HelloWeb</b> and create a package com.tutorialspoint under the src folder in the created project.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Drag and drop the following Spring and other libraries into the folder <b>WebContent/WEB-INF/lib</b>.</i>.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a Java class <b>HelloController</b> under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Create Spring configuration <b>files web.xml</b> and <b>HelloWeb-servlet.xml</b> under the WebContent/WEB-INF folder.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>Create a sub-folder with a name <b>jsp</b> under the WebContent/WEB-INFfolder. Create a view file <b>hello.jsp</b> under this sub-folder.</td>
</tr>
<tr>
<td class="ts">6</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");

      return "hello";
   }

}
</pre> 
<h2>web.xml</h2>
<pre class="prettyprint notranslate">
&lt;web-app id = "WebApp_ID" version = "2.4"
   xmlns = "http://java.sun.com/xml/ns/j2ee" 
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://java.sun.com/xml/ns/j2ee 
   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;

   &lt;display-name&gt;Spring MVC Application&lt;/display-name&gt;

   &lt;servlet&gt;
      &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;
      &lt;servlet-class&gt;
         org.springframework.web.servlet.DispatcherServlet
      &lt;/servlet-class&gt;
      &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
   &lt;/servlet&gt;

   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;HelloWeb&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
 
&lt;/web-app&gt;
</pre>
<h2>HelloWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;
 
&lt;/beans&gt;
</pre>
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Following is the list of Spring and other libraries to be included in the web application. We can just drag these files and drop them in – <b>WebContent/WEB-INF/lib</b> folder.</p>
<ul class="list">
<li><p>servlet-api-x.y.z.jar</p></li>
<li><p>commons-logging-x.y.z.jar</p></li>
<li><p>spring-aop-x.y.z.jar</p></li>
<li><p>spring-beans-x.y.z.jar</p></li>
<li><p>spring-context-x.y.z.jar</p></li>
<li><p>spring-core-x.y.z.jar</p></li>
<li><p>spring-expression-x.y.z.jar</p></li>
<li><p>spring-webmvc-x.y.z.jar</p></li>
<li><p>spring-web-x.y.z.jar</p></li>
</ul>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your <b>HelloWeb.war</b> file in Tomcat's <b>webapps</b> folder.</p>
<p>Now start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Now, try to access the URL &minus; <b>http://localhost:8080/HelloWeb/hello</b>. If everything is fine with the Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_web_hello_world.png" alt="Spring Web Hello World" />
<p>You should note that in the given URL, <b>HelloWeb</b> is the application name and hello is the virtual subfolder, which we have mentioned in our controller using @RequestMapping("/hello"). You can use direct root while mapping your URL using <b>@RequestMapping("/")</b>, in this case you can access the same page using short URL <b>http://localhost:8080/HelloWeb/</b>, but it is advised to have different functionalities under different folders.</p>
<h1>Spring MVC - Form Handling Example</h1>
<p>The following example shows how to write a simple web based <b>Hello World</b> application using the Spring MVC Framework. To start with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes Student, StudentController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files student.jsp, result.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>Student.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class Student {
   private Integer age;
   private String name;
   private Integer id;

   public void setAge(Integer age) {
      this.age = age;
   }
   public Integer getAge() {
      return age;
   }

   public void setName(String name) {
      this.name = name;
   }
   public String getName() {
      return name;
   }

   public void setId(Integer id) {
      this.id = id;
   }
   public Integer getId() {
      return id;
   }
}
</pre>
<h2>StudentController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class StudentController {

   @RequestMapping(value = "/student", method = RequestMethod.GET)
   public ModelAndView student() {
      return new ModelAndView("student", "command", new Student());
   }
   
   @RequestMapping(value = "/addStudent", method = RequestMethod.POST)
   public String addStudent(@ModelAttribute("SpringWeb")Student student, 
   ModelMap model) {
      model.addAttribute("name", student.getName());
      model.addAttribute("age", student.getAge());
      model.addAttribute("id", student.getId());
      
      return "result";
   }
}
</pre> 
<p>Here, the first service method <b>student()</b>, we have passed a blank Studentobject in the ModelAndView object with name "command". This is done because the spring framework expects an object with name "command", if we use &lt;form:form&gt; tags in the JSP file. So, when the student() method is called, it returns student.jsp view.</p>
<p>The second service method <b>addStudent()</b> will be called against a POST method on the HelloWeb/addStudent URL. You will prepare your model object based on the submitted information. Finally, a "result" view will be returned from the service method, which will result in rendering result.jsp.</p>
<h2>student.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri="http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;h2&gt;Student Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addStudent"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "name"&gt;Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "name" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "age"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "age" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "id"&gt;id&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "id" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>result.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted Student Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;${name}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Age&lt;/td&gt;
            &lt;td&gt;${age}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;ID&lt;/td&gt;
            &lt;td&gt;${id}&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once we are done with creating source and configuration files, export your application. Right click on your application, use Export &rarr; WAR File option and save the <b>SpringWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Now, try a URL– http://localhost:8080/SpringWeb/student and you should see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/student_form.png" alt="Spring Student Form" />
<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_student_form_result.png" alt="Spring Student Form Result" />
<h1>Spring MVC - Page Redirection Example</h1>
<p>The following example shows how to write a simple web based application, which makes use of redirect to transfer an http request to another page. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework &minus;</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class WebController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files index.jsp, final.jsp under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>WebController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class WebController {

   @RequestMapping(value = "/index", method = RequestMethod.GET)
   public String index() {
	   return "index";
   }
   
   @RequestMapping(value = "/redirect", method = RequestMethod.GET)
   public String redirect() {
     
      return "redirect:finalPage";
   }
   
   @RequestMapping(value = "/finalPage", method = RequestMethod.GET)
   public String finalPage() {
     
      return "final";
   }
}
</pre>
<p>Following is the content of Spring view file <b>index.jsp</b>. This will be a landing page, this page will send a request to the access-redirect service method, which will redirect this request to another service method and finally a <b>final.jsp</b>page will be displayed.</p>
<h2>index.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring Page Redirection&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;Spring Page Redirection&lt;/h2&gt;
      &lt;p&gt;Click below button to redirect the result to new page&lt;/p&gt;
      &lt;form:form method = "GET" action = "/HelloWeb/redirect"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;
                  &lt;input type = "submit" value = "Redirect Page"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>final.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   
   &lt;head&gt;
      &lt;title&gt;Spring Page Redirection&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;h2&gt;Redirected Page&lt;/h2&gt;
   &lt;/body&gt;

&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export &rarr; WAR File option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL –http://localhost:8080/HelloWeb/index and you should see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_redirect_form.jpg" alt="Spring Redirect Form" />
<p>Now click on the "Redirect Page" button to submit the form and to get to the final redirected page. We should see the following screen, if everything is fine with our Spring Web Application &minus;</p>
<img src="/springmvc/images/spring_redirect_form_result.png" alt="Spring Redirect Form Result" />
<h1>Spring MVC - Static Pages Example</h1>
<p>The following example shows how to write a simple web based application using Spring MVC Framework, which can access static pages along with dynamic pages with the help of a <b>&lt;mvc:resources&gt;</b> tag.</p>
<p>To begin with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class WebController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a static file <b>final.htm</b> under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Update the Spring configuration file HelloWeb-servlet.xml under the WebContent/WEB-INF folder as shown below.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>The final step is to create the content of the source and configuration files and export the application, which is explained below.</td>
</tr>
</table>
<h2>WebController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class WebController {

   @RequestMapping(value = "/index", method = RequestMethod.GET)
   public String index() {
	   return "index";
   }
   
   @RequestMapping(value = "/staticPage", method = RequestMethod.GET)
   public String redirect() {
     
      return "redirect:/pages/final.htm";
   }
}
</pre>
<h2>HelloWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "  http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:mvc = "http://www.springframework.org/schema/mvc"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;
 
   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;
     
   &lt;bean id = "viewResolver" class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
   
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;
   &lt;mvc:resources mapping = "/pages/**" location = "/WEB-INF/pages/" /&gt;
   &lt;mvc:annotation-driven/&gt;
&lt;/beans&gt;
</pre>
<p>Here, the <b>&lt;mvc:resources..../&gt;</b> tag is being used to map static pages. The mapping attribute must be an <b>Ant pattern</b> that specifies the URL pattern of an http requests. The location attribute must specify one or more valid resource directory locations having static pages including images, stylesheets, JavaScript, and other static content. Multiple resource locations may be specified using a comma-separated list of values.</p>
<p>Following is the content of Spring view file <b>WEB-INF/jsp/index.jsp</b>. This will be a landing page; this page will send a request to access the <b>staticPage service method</b>, which will redirect this request to a static page available in WEB-INF/pages folder.</p>
<h2>index.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring Landing Page&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;Spring Landing Pag&lt;/h2&gt;
      &lt;p&gt;Click below button to get a simple HTML page&lt;/p&gt;
      &lt;form:form method = "GET" action = "/HelloWeb/staticPage"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;
                  &lt;input type = "submit" value = "Get HTML Page"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>final.htm</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring Static Page&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;A simple HTML page&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export &rarr; WAR File option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Now try to access the URL – http://localhost:8080/HelloWeb/index. If everything is fine with the Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_static_page.png" alt="Spring static page" />
<p>Click on "Get HTML Page" button to access a static page mentioned in the staticPage service method. If everything is fine with your Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_static_page_result.png" alt="Spring static page Result" />
<h1>Spring MVC - Text Box Example</h1>
<p>The following example shows how to use Text boxes in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework &minus;</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World Example chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java classes Student, StudentController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view files student.jsp, result.jsp under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>Student.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class Student {
   private Integer age;
   private String name;
   private Integer id;

   public void setAge(Integer age) {
      this.age = age;
   }
   public Integer getAge() {
      return age;
   }

   public void setName(String name) {
      this.name = name;
   }
   public String getName() {
      return name;
   }

   public void setId(Integer id) {
      this.id = id;
   }
   public Integer getId() {
      return id;
   }
}
</pre>
<h2>StudentController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class StudentController {

   @RequestMapping(value = "/student", method = RequestMethod.GET)
   public ModelAndView student() {
      return new ModelAndView("student", "command", new Student());
   }
   
   @RequestMapping(value = "/addStudent", method = RequestMethod.POST)
   public String addStudent(@ModelAttribute("SpringWeb")Student student, 
      ModelMap model) {
      model.addAttribute("name", student.getName());
      model.addAttribute("age", student.getAge());
      model.addAttribute("id", student.getId());
      
      return "result";
   }
}
</pre> 
<p>Here, the first service method <b>student()</b>, we have passed a blank Studentobject in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using <b>&lt;form:form&gt;</b> tags in your JSP file. So, when the student() method is called it returns <b>student.jsp view</b>.</p>
<p>The second service method <b>addStudent()</b> will be called against a POST method on the <b>HelloWeb/addStudent</b> URL. You will prepare your model object based on the submitted information. Finally, a "result" view will be returned from the service method, which will result in rendering result.jsp</p>
<h2>student.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Student Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addStudent"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "name"&gt;Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "name" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "age"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "age" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "id"&gt;id&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "id" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:input /&gt;</b> tag to render an HTML text box. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:input path = "name" /&gt;
</pre>
<p>It will render following HTML content.</p>
<pre class="result notranslate">
&lt;input id = "name" name = "name" type = "text" value = ""/&gt;
</pre>
<h2>result.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted Student Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;${name}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Age&lt;/td&gt;
            &lt;td&gt;${age}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;ID&lt;/td&gt;
            &lt;td&gt;${id}&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once we are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL – <b>http://localhost:8080/HelloWeb/student</b> and we will see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/text_box_spring_student_form.png" alt="Textbox Spring Student Form" />
<p>After submitting the required information, click on the submit button to submit the form. We should see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/text_box_spring_student_form_result.png" alt="Textbox Spring Student Form Result" />
<h1>Spring MVC - Password Example</h1>
<p>The following example describes how to use Password in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;

   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      return new ModelAndView("user", "command", new User());
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());

      return "users";
   }
}
</pre> 
<p>Here, the first service method <b>user()</b>, we have passed a blank User object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the user() method is called it returns user.jsp view.</p>
<p>The Second service method <b>addUser()</b> will be called against a POST method on the HelloWeb/addUser URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using the &lt;form:password /&gt; tag to render an HTML password box. For example &minus;</p>
<pre class="result notranslate">
&lt;form:password path = "password" /&gt;
</pre>
<p>It will render the following HTML content.</p>
<pre class="result notranslate">
&lt;input id = "password" name = "password" type = "password" value = ""/&gt;
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once we are done with creating source and configuration files, export the application. Right click on your application, use Export &rarr; WAR File option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL –http://localhost:8080/HelloWeb/user and we will see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_password.png" alt="Spring Password Form" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_password_result.png" alt="Spring Password Form Result" />
<h1>Spring MVC - TextArea Example</h1>
<p>The following example explains how to use TextArea in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC &minus; Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;

   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      return new ModelAndView("user", "command", new User());
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
	  
      return "users";
   }
}
</pre> 
<p>Here, for the first service method user(), we have passed a blank User object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the user() method is called, it returns the user.jsp view.</p>
<p>The second service method addUser() will be called against a POST method on the HelloWeb/addUser URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

   &lt;h2&gt;User Information&lt;/h2&gt;
   &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
            &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
            &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
            &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td colspan = "2"&gt;
               &lt;input type = "submit" value = "Submit"/&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;  
   &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:textarea /&gt;</b> tag to render a HTML textarea box. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;
</pre>
<p>It will render the following HTML content.</p>
<pre class="prettyprint notranslate">
&lt;textarea id = "address" name = "address" rows = "5" cols = "30"&gt;&lt;/textarea&gt;
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;   
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export &rarr; WAR File option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL –http://localhost:8080/HelloWeb/user and we will see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_textarea.png" alt="Spring TextArea Form" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_textarea_result.png" alt="Spring TextArea Form Result" />
<h1>Spring MVC - Checkbox Example</h1>
<p>The following example describes how to use a Single Checkbox in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspointas explained in the Spring MVC - Hello World Example chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view files user.jsp, users.jsp under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;
   private boolean receivePaper;	

   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public boolean isReceivePaper() {
      return receivePaper;
   }
   public void setReceivePaper(boolean receivePaper) {
      this.receivePaper = receivePaper;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      return new ModelAndView("user", "command", new User());
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
      model.addAttribute("receivePaper", user.isReceivePaper());
      return "users";
   }
}
</pre> 
<p>Here, for the first service method user(), we have passed a blank User object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the user() method is called it returns the user.jsp view.</p>
<p>The second service method addUser() will be called against a POST method on the HelloWeb/addUser URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "receivePaper"&gt;Subscribe Newsletter&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkbox path = "receivePaper" /&gt;&lt;/td&gt;
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:checkboxes /&gt;</b> tag to render an HTML checkbox box.</p>
<p>For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:checkbox path="receivePaper" /&gt;
</pre>
<p>It will render following HTML content.</p>
<pre class="result notranslate">
&lt;input id="receivePaper1" name = "receivePaper" type = "checkbox" value = "true"/&gt;
&lt;input type = "hidden" name = "_receivePaper" value = "on"/&gt;
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td&gt;Subscribed to Newsletter&lt;/td&gt;
            &lt;td&gt;${receivePaper}&lt;/td&gt;
         &lt;/tr&gt;    	  
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export &rarr; WAR File option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL – http://localhost:8080/HelloWeb/user and we will see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_checkbox.png" alt="Spring Checkbox Form" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_checkbox_result.png" alt="Spring Checkbox Form Result" />
<h1>Spring MVC - Checkboxes Example</h1>
<p>The following example explains how to use Multiple Checkboxes in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;
   private boolean receivePaper;
   private String [] favoriteFrameworks;   

   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public boolean isReceivePaper() {
      return receivePaper;
   }
   public void setReceivePaper(boolean receivePaper) {
      this.receivePaper = receivePaper;
   }
   public String[] getFavoriteFrameworks() {
      return favoriteFrameworks;
   }
   public void setFavoriteFrameworks(String[] favoriteFrameworks) {
      this.favoriteFrameworks = favoriteFrameworks;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      User user = new User();	  
	  user.setFavoriteFrameworks((new String []{"Spring MVC","Struts 2"}));
	  ModelAndView modelAndView = new ModelAndView("user", "command", user);
	  return modelAndView;
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
      model.addAttribute("receivePaper", user.isReceivePaper());
	  model.addAttribute("favoriteFrameworks", user.getFavoriteFrameworks());
      return "users";
   }
   
   @ModelAttribute("webFrameworkList")
   public List&lt;String&gt; getWebFrameworkList() {
      List&lt;String&gt; webFrameworkList = new ArrayList&lt;String&gt;();
      webFrameworkList.add("Spring MVC");
      webFrameworkList.add("Struts 1");
      webFrameworkList.add("Struts 2");
      webFrameworkList.add("Apache Wicket");
      return webFrameworkList;
   }
}
</pre> 
<p>Here, for the first service method <b>user()</b>, we have passed a blank <b>User</b> object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the <b>user()</b> method is called, it returns the <b>user.jsp</b> view.</p>
<p>The second service method <b>addUser()</b> will be called against a POST method on the <b>HelloWeb/addUser</b> URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "receivePaper"&gt;Subscribe Newsletter&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkbox path = "receivePaper" /&gt;&lt;/td&gt;
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteFrameworks"&gt;Favorite Web Frameworks&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkboxes items = "${webFrameworkList}" path = "favoriteFrameworks" /&gt;&lt;/td&gt;       
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:checkboxes /&gt;</b> tag to render HTML checkboxes.</p>
<pre class="result notranslate">
&lt;form:checkboxes items = "${webFrameworkList}" path = "favoriteFrameworks" /&gt;
</pre>
<p>It will render following HTML content.</p>
<pre class="prettyprint notranslate">
&lt;span&gt;
   &lt;input id = "favoriteFrameworks1" name = "favoriteFrameworks" type = "checkbox" value = "Spring MVC" checked = "checked"/&gt;
   &lt;label for = "favoriteFrameworks1"&gt;Spring MVC&lt;/label&gt;
&lt;/span&gt;
&lt;span&gt;
   &lt;input id = "favoriteFrameworks2" name = "favoriteFrameworks" type = "checkbox" value = "Struts 1"/&gt;
   &lt;label for = "favoriteFrameworks2"&gt;Struts 1&lt;/label&gt;
&lt;/span&gt;
&lt;span&gt;
   &lt;input id = "favoriteFrameworks3" name = "favoriteFrameworks" type = "checkbox" value = "Struts 2" checked = "checked"/&gt;
   &lt;label for = "favoriteFrameworks3"&gt;Struts 2&lt;/label&gt;
&lt;/span&gt;
&lt;span&gt;
   &lt;input id = "favoriteFrameworks4" name = "favoriteFrameworks" type = "checkbox" value = "Apache Wicket"/&gt;
   &lt;label for = "favoriteFrameworks4"&gt;Apache Wicket&lt;/label&gt;
&lt;/span&gt;
&lt;input type = "hidden" name = "_favoriteFrameworks" value = "on"/&gt;
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td&gt;Subscribed to Newsletter&lt;/td&gt;
            &lt;td&gt;${receivePaper}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Favorite Web Frameworks&lt;/td&gt;
            &lt;td&gt; &lt;% String[] favoriteFrameworks = (String[])request.getAttribute("favoriteFrameworks");
            for(String framework: favoriteFrameworks) {
               out.println(framework);
            }
            %&gt;&lt;/td&gt;
         &lt;/tr&gt;     	  
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL <b>http://localhost:8080/HelloWeb/user</b> and we will see the following screen if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_checkboxes.png" alt="Spring Checkboxes Form" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_checkboxes_result.png" alt="Spring Checkboxes Form Result" />
<h1>Spring MVC - RadioButton Example</h1>
<p>The following example show how to use RadioButton in forms using the Spring Web MVC framework. To start with it, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using Spring Web Framework &minus;</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;
   private boolean receivePaper;
   private String [] favoriteFrameworks;   
   private String gender;
   
   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public boolean isReceivePaper() {
      return receivePaper;
   }
   public void setReceivePaper(boolean receivePaper) {
      this.receivePaper = receivePaper;
   }
   public String[] getFavoriteFrameworks() {
      return favoriteFrameworks;
   }
   public void setFavoriteFrameworks(String[] favoriteFrameworks) {
      this.favoriteFrameworks = favoriteFrameworks;
   }
   public String getGender() {
      return gender;
   }
   public void setGender(String gender) {
      this.gender = gender;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      User user = new User();	  
	  user.setFavoriteFrameworks((new String []{"Spring MVC","Struts 2"}));
      user.setGender("M");
	  ModelAndView modelAndView = new ModelAndView("user", "command", user);
	  return modelAndView;
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
      model.addAttribute("receivePaper", user.isReceivePaper());
	  model.addAttribute("favoriteFrameworks", user.getFavoriteFrameworks());
      model.addAttribute("gender", user.getGender());
      return "users";
   }
   
   @ModelAttribute("webFrameworkList")
   public List&lt;String&gt; getWebFrameworkList() {
      List&lt;String&gt; webFrameworkList = new ArrayList&lt;String&gt;();
      webFrameworkList.add("Spring MVC");
      webFrameworkList.add("Struts 1");
      webFrameworkList.add("Struts 2");
      webFrameworkList.add("Apache Wicket");
      return webFrameworkList;
   }
}
</pre> 
<p>Here, the first service method <b>user()</b>, we have passed a blank <b>User</b> object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the <b>user()</b> method is called, it returns the <b>user.jsp</b> view.</p>
<p>The second service method <b>addUser()</b> will be called against a POST method on the <b>HelloWeb/addUser</b> URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "receivePaper"&gt;Subscribe Newsletter&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkbox path = "receivePaper" /&gt;&lt;/td&gt;
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteFrameworks"&gt;Favorite Web Frameworks&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkboxes items = "${webFrameworkList}" path = "favoriteFrameworks" /&gt;&lt;/td&gt;       
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "gender"&gt;Gender&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobutton path = "gender" value = "M" label = "Male" /&gt;
                  &lt;form:radiobutton path = "gender" value = "F" label = "Female" /&gt;
               &lt;/td&gt;
            &lt;/tr&gt; 	  
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:radiobutton /&gt;</b> tag to render HTML radiobutton.</p>
<pre class="prettyprint notranslate">
&lt;form:radiobutton path = "gender" value = "M" label = "Male" /&gt;
&lt;form:radiobutton path = "gender" value = "F" label = "Female" /&gt;
</pre>
<p>It will render following HTML content.</p>
<pre class="prettyprint notranslate">
&lt;input id = "gender1" name = "gender" type = "radio" value = "M" checked = "checked"/&gt;&lt;label for = "gender1"&gt;Male&lt;/label&gt;
&lt;input id = "gender2" name = "gender" type = "radio" value = "F"/&gt;&lt;label for = "gender2"&gt;Female&lt;/label&gt;
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
&lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;  
         
         &lt;tr&gt;
            &lt;td&gt;Subscribed to Newsletter&lt;/td&gt;
            &lt;td&gt;${receivePaper}&lt;/td&gt;
         &lt;/tr&gt;    
         
         &lt;tr&gt;
            &lt;td&gt;Favorite Web Frameworks&lt;/td&gt;
            &lt;td&gt; &lt;% String[] favoriteFrameworks = (String[])request.getAttribute("favoriteFrameworks");
               for(String framework: favoriteFrameworks) {
                  out.println(framework);
               }
            %&gt;&lt;/td&gt;
         &lt;/tr&gt;     	 
         
         &lt;tr&gt;
            &lt;td&gt;Gender&lt;/td&gt;
            &lt;td&gt;${(gender=="M"? "Male" : "Female")}&lt;/td&gt;
         &lt;/tr&gt;    	  
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL – <b>http://localhost:8080/HelloWeb/user</b> and we will see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_radiobutton.png" alt="Spring RadioButton Form" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_radiobutton_result.png" alt="Spring RadioButton Form Result" />
<h1>Spring MVC - RadioButtons Example</h1>
<p>The following example explains how to use RadioButtons in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;
   private boolean receivePaper;
   private String [] favoriteFrameworks;   
   private String gender;
   private String favoriteNumber;
   
   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public boolean isReceivePaper() {
      return receivePaper;
   }
   public void setReceivePaper(boolean receivePaper) {
      this.receivePaper = receivePaper;
   }
   public String[] getFavoriteFrameworks() {
      return favoriteFrameworks;
   }
   public void setFavoriteFrameworks(String[] favoriteFrameworks) {
      this.favoriteFrameworks = favoriteFrameworks;
   }
   public String getGender() {
      return gender;
   }
   public void setGender(String gender) {
      this.gender = gender;
   }
   public String getFavoriteNumber() {
      return favoriteNumber;
   }
   public void setFavoriteNumber(String favoriteNumber) {
      this.favoriteNumber = favoriteNumber;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      User user = new User();	  
	  user.setFavoriteFrameworks((new String []{"Spring MVC","Struts 2"}));
      user.setGender("M");
	  ModelAndView modelAndView = new ModelAndView("user", "command", user);
	  return modelAndView;
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
      model.addAttribute("receivePaper", user.isReceivePaper());
      model.addAttribute("favoriteFrameworks", user.getFavoriteFrameworks());
      model.addAttribute("gender", user.getGender());
      model.addAttribute("favoriteNumber", user.getFavoriteNumber());
      return "users";
   }
   
   @ModelAttribute("webFrameworkList")
   public List&lt;String&gt; getWebFrameworkList() {
      List&lt;String&gt; webFrameworkList = new ArrayList&lt;String&gt;();
      webFrameworkList.add("Spring MVC");
      webFrameworkList.add("Struts 1");
      webFrameworkList.add("Struts 2");
      webFrameworkList.add("Apache Wicket");
      return webFrameworkList;
   }
   
   @ModelAttribute("numbersList")
   public List&lt;String&gt; getNumbersList() {
      List&lt;String&gt; numbersList = new ArrayList&lt;String&gt;();
      numbersList.add("1");
      numbersList.add("2");
      numbersList.add("3");
      numbersList.add("4");
      return numbersList;
   }
}
</pre> 
<p>Here, for the first service method user(), we have passed a blank User object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when user() method is called, it returns the user.jsp view.</p>
<p>The second service method <b>addUser()</b> will be called against a POST method on the <b>HelloWeb/addUser</b> URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "receivePaper"&gt;Subscribe Newsletter&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkbox path = "receivePaper" /&gt;&lt;/td&gt;
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteFrameworks"&gt;Favorite Web Frameworks&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkboxes items = "${webFrameworkList}" path = "favoriteFrameworks" /&gt;&lt;/td&gt; 
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "gender"&gt;Gender&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobutton path = "gender" value = "M" label = "Male" /&gt;
                  &lt;form:radiobutton path = "gender" value = "F" label = "Female" /&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteNumber"&gt;Favorite Number&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobuttons path = "favoriteNumber" items = "${numbersList}" /&gt;        	
               &lt;/td&gt;
            &lt;/tr&gt;  	  
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:radiobuttons /&gt;</b>tag to render the HTML radiobuttons. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:radiobuttons path = "favoriteNumber" items="${numbersList}" /&gt;
</pre>
<p>It will render the following HTML content.</p>
<pre class="prettyprint notranslate">
&lt;span&gt;
   &lt;input id = "favoriteNumber1" name = "favoriteNumber" type = "radio" value = "1"/&gt;
   &lt;label for = "favoriteNumber1"&gt;1&lt;/label&gt;
&lt;/span&gt;
&lt;span&gt;
   &lt;input id = "favoriteNumber2" name = "favoriteNumber" type = "radio" value = "2"/&gt;
   &lt;label for = "favoriteNumber2"&gt;2&lt;/label&gt;
&lt;/span&gt;
&lt;span&gt;
   &lt;input id = "favoriteNumber3" name = "favoriteNumber" type = "radio" value = "3"/&gt;
   &lt;label for = "favoriteNumber3"&gt;3&lt;/label&gt;
&lt;/span&gt;
&lt;span&gt;
   &lt;input id = "favoriteNumber4" name = "favoriteNumber" type = "radio" value = "4"/&gt;
   &lt;label for = "favoriteNumber4"&gt;4&lt;/label&gt;
&lt;/span&gt;    
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td&gt;Subscribed to Newsletter&lt;/td&gt;
            &lt;td&gt;${receivePaper}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Favorite Web Frameworks&lt;/td&gt;
            &lt;td&gt; &lt;% String[] favoriteFrameworks = (String[])request.getAttribute("favoriteFrameworks");
               for(String framework: favoriteFrameworks) {
                  out.println(framework);
               }
            %&gt;&lt;/td&gt;
         &lt;/tr&gt;     	 
         &lt;tr&gt;
            &lt;td&gt;Gender&lt;/td&gt;
            &lt;td&gt;${(gender=="M"? "Male" : "Female")}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Favourite Number&lt;/td&gt;
            &lt;td&gt;${favoriteNumber}&lt;/td&gt;
         &lt;/tr&gt;     	  
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try the following URL – <b>http://localhost:8080/HelloWeb/user</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_radiobuttons.png" alt="Spring RadioButtons Form" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_radiobuttons_result.png" alt="Spring RadioButtons Form Result" />
<h1>Spring MVC - Dropdown Example</h1>
<p>The following example describes how to use Dropdown in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;
   private boolean receivePaper;
   private String [] favoriteFrameworks;   
   private String gender;
   private String favoriteNumber;
   private String country;
   
   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public boolean isReceivePaper() {
      return receivePaper;
   }
   public void setReceivePaper(boolean receivePaper) {
      this.receivePaper = receivePaper;
   }
   public String[] getFavoriteFrameworks() {
      return favoriteFrameworks;
   }
   public void setFavoriteFrameworks(String[] favoriteFrameworks) {
      this.favoriteFrameworks = favoriteFrameworks;
   }
   public String getGender() {
      return gender;
   }
   public void setGender(String gender) {
      this.gender = gender;
   }
   public String getFavoriteNumber() {
      return favoriteNumber;
   }
   public void setFavoriteNumber(String favoriteNumber) {
      this.favoriteNumber = favoriteNumber;
   }
   public String getCountry() {
      return country;
   }
   public void setCountry(String country) {
      this.country = country;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      User user = new User();	  
	  user.setFavoriteFrameworks((new String []{"Spring MVC","Struts 2"}));
      user.setGender("M");
	  ModelAndView modelAndView = new ModelAndView("user", "command", user);
	  return modelAndView;
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
      model.addAttribute("receivePaper", user.isReceivePaper());
	  model.addAttribute("favoriteFrameworks", user.getFavoriteFrameworks());
      model.addAttribute("gender", user.getGender());
      model.addAttribute("favoriteNumber", user.getFavoriteNumber());
      model.addAttribute("country", user.getCountry());     
      return "users";
   }
   
   @ModelAttribute("webFrameworkList")
   public List&lt;String&gt; getWebFrameworkList() {
      List&lt;String&gt; webFrameworkList = new ArrayList&lt;String&gt;();
      webFrameworkList.add("Spring MVC");
      webFrameworkList.add("Struts 1");
      webFrameworkList.add("Struts 2");
      webFrameworkList.add("Apache Wicket");
      return webFrameworkList;
   }
   
   @ModelAttribute("numbersList")
   public List&lt;String&gt; getNumbersList() {
      List&lt;String&gt; numbersList = new ArrayList&lt;String&gt;();
      numbersList.add("1");
      numbersList.add("2");
      numbersList.add("3");
      numbersList.add("4");
      return numbersList;
   }

   @ModelAttribute("countryList")
   public Map&lt;String, String&gt; getCountryList() {
      Map&lt;String, String&gt; countryList = new HashMap&lt;String, String&gt;();
      countryList.put("US", "United States");
      countryList.put("CH", "China");
      countryList.put("SG", "Singapore");
      countryList.put("MY", "Malaysia");
      return countryList;
   }
}
</pre> 
<p>Here, for the first service method <b>user()</b>, we have passed a blank <b>User</b> object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So when the <b>user()</b> method is called, it returns the <b>user.jsp</b> view.</p>
<p>The second service method <b>addUser()</b> will be called against a POST method on the <b>HelloWeb/addUser</b> URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

   &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "receivePaper"&gt;Subscribe Newsletter&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkbox path = "receivePaper" /&gt;&lt;/td&gt;
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteFrameworks"&gt;Favorite Web Frameworks&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkboxes items = "${webFrameworkList}" path = "favoriteFrameworks" /&gt;&lt;/td&gt;       
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "gender"&gt;Gender&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobutton path = "gender" value = "M" label = "Male" /&gt;
                  &lt;form:radiobutton path = "gender" value = "F" label = "Female" /&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteNumber"&gt;Favorite Number&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobuttons path = "favoriteNumber" items = "${numbersList}" /&gt;        	
               &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "country"&gt;Country&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:select path = "country"&gt;
                     &lt;form:option value = "NONE" label = "Select"/&gt;
                     &lt;form:options items = "${countryList}" /&gt;
                  &lt;/form:select&gt;     	
               &lt;/td&gt;
            &lt;/tr&gt;   	  
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>&lt;form:select /&gt; , &lt;form:option /&gt;</b> and <b>&lt;form:options /&gt;</b> tags to render HTML select. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:select path = "country"&gt;
   &lt;form:option value = "NONE" label = "Select"/&gt;
   &lt;form:options items = "${countryList}" /&gt;
&lt;/form:select&gt;     	
</pre>
<p>It will render following HTML content.</p>
<pre class="prettyprint notranslate">
&lt;select id = "country" name = "country"&gt;
   &lt;option value = "NONE"&gt;Select&lt;/option&gt;
   &lt;option value = "US"&gt;United States&lt;/option&gt;
   &lt;option value = "CH"&gt;China&lt;/option&gt;
   &lt;option value = "MY"&gt;Malaysia&lt;/option&gt;
   &lt;option value = "SG"&gt;Singapore&lt;/option&gt;
&lt;/select&gt;  
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td&gt;Subscribed to Newsletter&lt;/td&gt;
            &lt;td&gt;${receivePaper}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Favorite Web Frameworks&lt;/td&gt;
            &lt;td&gt; &lt;% String[] favoriteFrameworks = (String[])request.getAttribute("favoriteFrameworks");
               for(String framework: favoriteFrameworks) {
                  out.println(framework);
               }
            %&gt;&lt;/td&gt;
         &lt;/tr&gt;     	 
         &lt;tr&gt;
            &lt;td&gt;Gender&lt;/td&gt;
            &lt;td&gt;${(gender=="M"? "Male" : "Female")}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Favourite Number&lt;/td&gt;
            &lt;td&gt;${favoriteNumber}&lt;/td&gt;
         &lt;/tr&gt;   
         &lt;tr&gt;
            &lt;td&gt;Country&lt;/td&gt;
            &lt;td&gt;${country}&lt;/td&gt;
         &lt;/tr&gt;   	  
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use the <b>Export &rarr; WAR File</b> option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL – <b>http://localhost:8080/HelloWeb/user</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_dropdown.png" alt="Spring dropdown Form" />
<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_dropdown_result.png" alt="Spring dropdown Form Result" />
<h1>Spring MVC - Listbox Example</h1>
<p>The following example shows how to use Listbox in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User, UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files user.jsp, users.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
	
   private String username;
   private String password;
   private String address;
   private boolean receivePaper;
   private String [] favoriteFrameworks;   
   private String gender;
   private String favoriteNumber;
   private String country;
   private String [] skills;
   
   public String getUsername() {
      return username;
   }
   public void setUsername(String username) {
      this.username = username;
   }

   public String getPassword() {
      return password;
   }
   public void setPassword(String password) {
      this.password = password;
   }
   public String getAddress() {
      return address;
   }
   public void setAddress(String address) {
      this.address = address;
   }
   public boolean isReceivePaper() {
      return receivePaper;
   }
   public void setReceivePaper(boolean receivePaper) {
      this.receivePaper = receivePaper;
   }
   public String[] getFavoriteFrameworks() {
      return favoriteFrameworks;
   }
   public void setFavoriteFrameworks(String[] favoriteFrameworks) {
      this.favoriteFrameworks = favoriteFrameworks;
   }
   public String getGender() {
      return gender;
   }
   public void setGender(String gender) {
      this.gender = gender;
   }
   public String getFavoriteNumber() {
      return favoriteNumber;
   }
   public void setFavoriteNumber(String favoriteNumber) {
      this.favoriteNumber = favoriteNumber;
   }
   public String getCountry() {
      return country;
   }
   public void setCountry(String country) {
      this.country = country;
   }
   public String[] getSkills() {
      return skills;
   }
   public void setSkills(String[] skills) {
      this.skills = skills;
   }
}

</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class UserController {

   @RequestMapping(value = "/user", method = RequestMethod.GET)
   public ModelAndView user() {
      User user = new User();	  
	  user.setFavoriteFrameworks((new String []{"Spring MVC","Struts 2"}));
      user.setGender("M");
	  ModelAndView modelAndView = new ModelAndView("user", "command", user);
	  return modelAndView;
   }

   @RequestMapping(value = "/addUser", method = RequestMethod.POST)
   public String addUser(@ModelAttribute("SpringWeb")User user, 
      ModelMap model) {
      model.addAttribute("username", user.getUsername());
      model.addAttribute("password", user.getPassword());
      model.addAttribute("address", user.getAddress());
      model.addAttribute("receivePaper", user.isReceivePaper());
	  model.addAttribute("favoriteFrameworks", user.getFavoriteFrameworks());
      model.addAttribute("gender", user.getGender());
      model.addAttribute("favoriteNumber", user.getFavoriteNumber());
      model.addAttribute("country", user.getCountry());
      model.addAttribute("skills", user.getSkills());
      return "users";
   }
   
   @ModelAttribute("webFrameworkList")
   public List&lt;String&gt; getWebFrameworkList() {
      List&lt;String&gt; webFrameworkList = new ArrayList&lt;String&gt;();
      webFrameworkList.add("Spring MVC");
      webFrameworkList.add("Struts 1");
      webFrameworkList.add("Struts 2");
      webFrameworkList.add("Apache Wicket");
      return webFrameworkList;
   }
   
   @ModelAttribute("numbersList")
   public List&lt;String&gt; getNumbersList() {
      List&lt;String&gt; numbersList = new ArrayList&lt;String&gt;();
      numbersList.add("1");
      numbersList.add("2");
      numbersList.add("3");
      numbersList.add("4");
      return numbersList;
   }

   @ModelAttribute("countryList")
   public Map&lt;String, String&gt; getCountryList() {
      Map&lt;String, String&gt; countryList = new HashMap&lt;String, String&gt;();
      countryList.put("US", "United States");
      countryList.put("CH", "China");
      countryList.put("SG", "Singapore");
      countryList.put("MY", "Malaysia");
      return countryList;
   }
   
   @ModelAttribute("skillsList")
   public Map&lt;String, String&gt; getSkillsList() {
      Map&lt;String, String&gt; skillList = new HashMap&lt;String, String&gt;();
      skillList.put("Hibernate", "Hibernate");
      skillList.put("Spring", "Spring");
      skillList.put("Apache Wicket", "Apache Wicket");
      skillList.put("Struts", "Struts");
      return skillList;
   }
}
</pre> 
<p>Here, for the first service method <b>user()</b>, we have passed a blank <b>User</b> object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the <b>user()</b> method is called, it returns the <b>user.jsp</b> view.</p>
<p>The second service method <b>addUser()</b> will be called against a POST method on the <b>HelloWeb/addUser</b> URL. You will prepare your model object based on the submitted information. Finally, the "users" view will be returned from the service method, which will result in rendering the users.jsp.</p>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;User Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addUser"&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "username"&gt;User Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "username" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "password"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:password path = "password" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "address"&gt;Address&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:textarea path = "address" rows = "5" cols = "30" /&gt;&lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "receivePaper"&gt;Subscribe Newsletter&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkbox path = "receivePaper" /&gt;&lt;/td&gt;
            &lt;/tr&gt; 
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteFrameworks"&gt;Favorite Web Frameworks&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:checkboxes items = "${webFrameworkList}" path = "favoriteFrameworks" /&gt;&lt;/td&gt;       
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "gender"&gt;Gender&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobutton path = "gender" value = "M" label = "Male" /&gt;
                  &lt;form:radiobutton path = "gender" value = "F" label = "Female" /&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "favoriteNumber"&gt;Favorite Number&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:radiobuttons path = "favoriteNumber" items = "${numbersList}" /&gt;        	
               &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "country"&gt;Country&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:select path = "country"&gt;
                     &lt;form:option value = "NONE" label = "Select"/&gt;
                     &lt;form:options items = "${countryList}" /&gt;
                  &lt;/form:select&gt;     	
               &lt;/td&gt;
            &lt;/tr&gt;  
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "skills"&gt;Skills&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;
                  &lt;form:select path = "skills" items = "${skillsList}"
                     multiple = "true" /&gt;
               &lt;/td&gt;
            &lt;/tr&gt;  	  
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using a <b>&lt;form:select /&gt;</b> tag , with the attribute <b>multiple=true</b> to render an HTML listbox. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:select path = "skills" items = "${skillsList}" multiple = "true" /&gt;
</pre>
<p>It will render following HTML content.</p>
<pre class="prettyprint notranslate">
&lt;select id = "skills" name = "skills" multiple = "multiple"&gt;
   &lt;option value = "Struts"&gt;Struts&lt;/option&gt;
   &lt;option value = "Hibernate"&gt;Hibernate&lt;/option&gt;
   &lt;option value = "Apache Wicket"&gt;Apache Wicket&lt;/option&gt;
   &lt;option value = "Spring"&gt;Spring&lt;/option&gt;
&lt;/select&gt;
&lt;input type = "hidden" name = "_skills" value = "1"/&gt;
</pre>
<h2>users.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted User Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Username&lt;/td&gt;
            &lt;td&gt;${username}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Password&lt;/td&gt;
            &lt;td&gt;${password}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Address&lt;/td&gt;
            &lt;td&gt;${address}&lt;/td&gt;
         &lt;/tr&gt;  
         &lt;tr&gt;
            &lt;td&gt;Subscribed to Newsletter&lt;/td&gt;
            &lt;td&gt;${receivePaper}&lt;/td&gt;
         &lt;/tr&gt;    
         &lt;tr&gt;
            &lt;td&gt;Favorite Web Frameworks&lt;/td&gt;
            &lt;td&gt; &lt;% String[] favoriteFrameworks = (String[])request.getAttribute("favoriteFrameworks");
               for(String framework: favoriteFrameworks) {
                  out.println(framework);
               }
            %&gt;&lt;/td&gt;
         &lt;/tr&gt;     	 
         &lt;tr&gt;
            &lt;td&gt;Gender&lt;/td&gt;
            &lt;td&gt;${(gender=="M"? "Male" : "Female")}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Favourite Number&lt;/td&gt;
            &lt;td&gt;${favoriteNumber}&lt;/td&gt;
         &lt;/tr&gt;   
         &lt;tr&gt;
            &lt;td&gt;Country&lt;/td&gt;
            &lt;td&gt;${country}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Skills&lt;/td&gt;
            &lt;td&gt; &lt;% String[] skills = (String[])request.getAttribute("skills");
            for(String skill: skills) {
               out.println(skill);
            }
            %&gt;&lt;/td&gt;
         &lt;/tr&gt;   	  
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL &minus; <b>http://localhost:8080/HelloWeb/user</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_listbox.png" alt="Spring listbox Form" />
<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_listbox_result.png" alt="Spring listbox Form Result" />
<h1>Spring MVC - Hidden Field Example</h1>
<p>The following example describes how to use a Hidden Field in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes Student, StudentController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files student.jsp, result.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>Student.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class Student {
   private Integer age;
   private String name;
   private Integer id;

   public void setAge(Integer age) {
      this.age = age;
   }
   public Integer getAge() {
      return age;
   }

   public void setName(String name) {
      this.name = name;
   }
   public String getName() {
      return name;
   }

   public void setId(Integer id) {
      this.id = id;
   }
   public Integer getId() {
      return id;
   }
}
</pre>
<h2>StudentController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.ui.ModelMap;

@Controller
public class StudentController {

   @RequestMapping(value = "/student", method = RequestMethod.GET)
   public ModelAndView student() {
      return new ModelAndView("student", "command", new Student());
   }
   
   @RequestMapping(value = "/addStudent", method = RequestMethod.POST)
   public String addStudent(@ModelAttribute("SpringWeb")Student student, 
      ModelMap model) {
      model.addAttribute("name", student.getName());
      model.addAttribute("age", student.getAge());
      model.addAttribute("id", student.getId());
      
      return "result";
   }
}
</pre> 
<p>Here, for the first service method <b>student()</b>, we have passed a blank <b>Studentobject</b> in the ModelAndView object with the name "command", because the spring framework expects an object with the name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the <b>student()</b> method is called, it returns the <b>student.jsp</b> view.</p>
<p>The second service method <b>addStudent()</b> will be called against a POST method on the <b>HelloWeb/addStudent</b> URL. You will prepare your model object based on the submitted information. Finally, a "result" view will be returned from the service method, which will result in rendering result.jsp </p>
<h2>student.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Student Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addStudent"&gt;
         &lt;table&gt;
            &lt;tr&gt;
              &lt;td&gt;&lt;form:label path = "name"&gt;Name&lt;/form:label&gt;&lt;/td&gt;
              &lt;td&gt;&lt;form:input path = "name" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;&lt;form:label path = "age"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
              &lt;td&gt;&lt;form:input path = "age" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td&gt;&lt;&nbsp;&lt;/td&gt;
              &lt;td&gt;&lt;form:hidden path = "id" value = "1" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td colspan = "2"&gt;
                  &lt;input type = "submit" value = "Submit"/&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using the <b>&lt;form:hidden /&gt;</b> tag to render a HTML hidden field.</p>
<p>For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:hidden path = "id" value = "1"/&gt;
</pre>
<p>It will render following HTML content.</p>
<pre class="result notranslate">
&lt;input id = "id" name = "id" type = "hidden" value = "1"/&gt;
</pre>
<h2>result.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted Student Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;${name}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Age&lt;/td&gt;
            &lt;td&gt;${age}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;ID&lt;/td&gt;
            &lt;td&gt;${id}&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application and use <b>Export &rarr; WAR File</b> option and save your <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL – <b>http://localhost:8080/HelloWeb/student</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_hidden.png" alt="Spring Hidden Field" />
<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_hidden_result.png" alt="Spring Hidden Field Result" />
<h1>Spring MVC - Error Handling Example</h1>
<p>The following example shows how to use Error Handling and Validators in forms using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td>1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td>2</td>
<td>Create Java classes Student, StudentController and StudentValidator under the com.tutorialspoint package.</td>
</tr>
<tr>
<td>3</td>
<td>Create view files addStudent.jsp, result.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td>4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>Student.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class Student {
   private Integer age;
   private String name;
   private Integer id;

   public void setAge(Integer age) {
      this.age = age;
   }
   public Integer getAge() {
      return age;
   }

   public void setName(String name) {
      this.name = name;
   }
   public String getName() {
      return name;
   }

   public void setId(Integer id) {
      this.id = id;
   }
   public Integer getId() {
      return id;
   }
}
</pre>
<h2>StudentValidator.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;
import org.springframework.validation.Validator;

public class StudentValidator implements Validator {

   @Override
   public boolean supports(Class&lt;?&gt; clazz) {
      return Student.class.isAssignableFrom(clazz);
   }

   @Override
   public void validate(Object target, Errors errors) {		
      ValidationUtils.rejectIfEmptyOrWhitespace(errors, 
         "name", "required.name","Field name is required.");
   }
}

</pre>
<h2>StudentController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class StudentController {

   @Autowired
   @Qualifier("studentValidator")
   private Validator validator;

   @InitBinder
   private void initBinder(WebDataBinder binder) {
      binder.setValidator(validator);
   }

   @RequestMapping(value = "/addStudent", method = RequestMethod.GET)
   public ModelAndView student() {
      return new ModelAndView("addStudent", "command", new Student());
   }

   @ModelAttribute("student")
   public Student createStudentModel() {	
      return new Student();
   }

   @RequestMapping(value = "/addStudent", method = RequestMethod.POST)
   public String addStudent(@ModelAttribute("student") @Validated Student student, 
      BindingResult bindingResult, Model model) {

      if (bindingResult.hasErrors()) {
         return "addStudent";
      }
      model.addAttribute("name", student.getName());
      model.addAttribute("age", student.getAge());
      model.addAttribute("id", student.getId());

      return "result";
   }
}

</pre>
<h2>HelloWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;
 
   &lt;bean id = "studentValidator" class = "com.tutorialspoint.StudentValidator" /&gt;
&lt;/beans&gt;
</pre> 
<p>Here, for the first service method <b>student()</b>, we have passed a blank Studentobject in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when student() method is called, it returns <b>addStudent.jsp</b> view.</p>
<p>The second service method <b>addStudent()</b> will be called against a POST method on the <b>HelloWeb/addStudent</b> URL. You will prepare your model object based on the submitted information. Finally, a "result" view will be returned from the service method, which will result in rendering the result.jsp. In case there are errors generated using validator then same view "addStudent" is returned, Spring automatically injects error messages from <b>BindingResult</b> in view.</p>
<h2>addStudent.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;style&gt;
      .error {
         color: #ff0000;
      }

      .errorblock {
         color: #000;
         background-color: #ffEEEE;
         border: 3px solid #ff0000;
         padding: 8px;
         margin: 16px;
      }
   &lt;/style&gt;
   
   &lt;body&gt;
      &lt;h2&gt;Student Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/HelloWeb/addStudent" commandName = "student"&gt;
      &lt;form:errors path = "*" cssClass = "errorblock" element = "div" /&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "name"&gt;Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "name" /&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:errors path = "name" cssClass = "error" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "age"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "age" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "id"&gt;id&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "id" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
               &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here we are using <b>&lt;form:errors /&gt;</b> tag with path="*" to render error messages. For example</p>
<pre class="prettyprint notranslate">
&lt;form:errors path = "*" cssClass = "errorblock" element = "div" /&gt;
</pre>
<p>It will render the error messages for all input validations.</p>
<p>We are using <b>&lt;form:errors /&gt;</b> tag with path="name" to render error message for name field. For example</p>
<pre class="prettyprint notranslate">
&lt;form:errors path = "name" cssClass = "error" /&gt;
</pre>
<p>It will render error messages for the name field validations.</p>
<h2>result.jsp</h2>
<pre class="prettyprint notran.slate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted Student Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;${name}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Age&lt;/td&gt;
            &lt;td&gt;${age}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
           &lt;td&gt;ID&lt;/td&gt;
           &lt;td&gt;${id}&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL &minus; <b>http://localhost:8080/HelloWeb/addStudent</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_validation.png" alt="Spring Validation" />
<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_validation_result.png" alt="Spring Validation Result" />
<h1>Spring MVC - File Upload Example</h1>
<p>The following example shows how to use File Upload Control in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes FileModel, FileUploadController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files fileUpload.jsp, success.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Create a folder <b>temp</b> under the WebContent sub-folder.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>Download Apache Commons FileUpload library <a target="_blank" rel="nofollow" href="https://commons.apache.org/proper/commons-fileupload/download_fileupload.cgi">commons-fileupload.jar</a> and Apache Commons IO library <a target="_blank" rel="nofollow" href="https://commons.apache.org/proper/commons-io/download_io.cgi">commons-io.jar</a>. Put them in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">6</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>FileModel.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.web.multipart.MultipartFile;

public class FileModel {
   private MultipartFile file;

   public MultipartFile getFile() {
      return file;
   }

   public void setFile(MultipartFile file) {
      this.file = file;
   }
}
</pre>
<h2>FileUploadController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.io.File;
import java.io.IOException;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class FileUploadController {
	
   @Autowired
   ServletContext context; 

   @RequestMapping(value = "/fileUploadPage", method = RequestMethod.GET)
   public ModelAndView fileUploadPage() {
      FileModel file = new FileModel();
      ModelAndView modelAndView = new ModelAndView("fileUpload", "command", file);
      return modelAndView;
   }

   @RequestMapping(value="/fileUploadPage", method = RequestMethod.POST)
   public String fileUpload(@Validated FileModel file, BindingResult result, ModelMap model) throws IOException {
      if (result.hasErrors()) {
         System.out.println("validation errors");
         return "fileUploadPage";
      } else {            
         System.out.println("Fetching file");
         MultipartFile multipartFile = file.getFile();
         String uploadPath = context.getRealPath("") + File.separator + "temp" + File.separator;
         //Now do something with file...
         FileCopyUtils.copy(file.getFile().getBytes(), new File(uploadPath+file.getFile().getOriginalFilename()));
         String fileName = multipartFile.getOriginalFilename();
         model.addAttribute("fileName", fileName);
         return "success";
      }
   }
}
</pre>
<h2>HelloWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;
 
   &lt;bean id = "multipartResolver"
      class = "org.springframework.web.multipart.commons.CommonsMultipartResolver" /&gt;
&lt;/beans&gt;
</pre> 
<p>Here, for the first service method <b>fileUploadPage()</b>, we have passed a blank <b>FileModel</b> object in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when <b>fileUploadPage()</b> method is called, it returns <b>fileUpload.jsp</b> view.</p>
<p>The second service method <b>fileUpload()</b> will be called against a POST method on the <b>HelloWeb/fileUploadPage</b> URL. You will prepare the file to be uploaded based on the submitted information. Finally, a "success" view will be returned from the service method, which will result in rendering success.jsp.</p>
<h2>fileUpload.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType="text/html; charset = UTF-8" %&gt;
&lt;%@ taglib prefix = "form" uri = "http://www.springframework.org/tags/form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;File Upload Example&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;form:form method = "POST" modelAttribute = "fileUpload"
         enctype = "multipart/form-data"&gt;
         Please select a file to upload : 
         &lt;input type = "file" name = "file" /&gt;
         &lt;input type = "submit" value = "upload" /&gt;
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using <b>modelAttribute</b> attribute with value="fileUpload" to map the file Upload control with the server model.</p>
<h2>success.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;File Upload Example&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      FileName : 
      lt;b&gt; ${fileName} &lt;/b&gt; - Uploaded Successfully.
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the HelloWeb.war file in the Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL– <b>http://localhost:8080/HelloWeb/fileUploadPage</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_file_upload.png" alt="Spring File Upload" />
<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_upload_result.png" alt="Spring File Upload Result" />
<h1>Spring MVC - Bean Name Url Handler Mapping Example</h1>
<p>The following example shows how to use Bean Name URL Handler Mapping using the Spring Web MVC Framework. The <b>BeanNameUrlHandlerMapping</b> class is the default handler mapping class, which maps the URL request(s) to the name of the beans mentioned in the configuration.</p>
<pre class="prettyprint notranslate">
&lt;beans&gt;
   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;

   &lt;bean name = "/helloWorld.htm" 
      class = "com.tutorialspoint.HelloController" /&gt;

   &lt;bean name = "/hello*" 
      class = "com.tutorialspoint.HelloController" /&gt; 

   &lt;bean name = "/welcome.htm"
      class = "com.tutorialspoint.WelcomeController"/&gt;   
&lt;/beans&gt;
</pre> 
<p>For example, using the above configuration, if URI</p>
<ul class="list">
<li><p>/helloWorld.htm or /hello{any letter}.htm is requested, DispatcherServlet will forward the request to the <b>HelloController</b>.</p></li>
<li><p>/welcome.htm is requested, DispatcherServlet will forward the request to the <b>WelcomeController</b>.</p></li>
<li><p>/welcome1.htm is requested, DispatcherServlet will not find any controller and server will throw 404 status error.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes HelloController, WelcomeController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files hello.jsp, welcome.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of all source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class HelloController extends AbstractController{
  
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("hello");
      model.addObject("message", "Hello World!");
      return model;
   }
}
</pre>
<h2>WelcomeController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class WelcomeController extends AbstractController{
  
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("welcome");
      model.addObject("message", "Welcome!");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;

   &lt;bean name = "/helloWorld.htm" 
      class = "com.tutorialspoint.HelloController" /&gt;

   &lt;bean name = "/hello*" 
      class = "com.tutorialspoint.HelloController" /&gt; 

   &lt;bean name = "/welcome.htm"
      class = "com.tutorialspoint.WelcomeController"/&gt;   
&lt;/beans&gt;
</pre> 
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>welcome.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in the Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder by using a standard browser. Try a URL &minus; <b>http://localhost:8080/TestWeb/helloWorld.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping.png" alt="Spring Bean Name Url Handler Mapping 1" />
<p>Try a URL &minus; <b>http://localhost:8080/TestWeb/hello.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping1.png" alt="Spring Bean Name Url Handler Mapping 2" />
<p>Try a URL <b>http://localhost:8080/TestWeb/welcome.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping2.png" alt="Spring Bean Name Url Handler Mapping 3" />
<p>Try a URL <b>http://localhost:8080/TestWeb/welcome1.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping3.png" alt="Spring Bean Name Url Handler Mapping 4" />
<h1>Spring MVC - Controller Class Name Handler Mapping Example</h1>
<p>The following example shows how to use the Controller Class Name Handler Mapping using the Spring Web MVC framework. The <b>ControllerClassNameHandlerMapping</b> class is the convention-based handler mapping class, which maps the URL request(s) to the name of the controllers mentioned in the configuration. This class takes the Controller names and converts them to lower case with a leading "/".</p>
<p>For example &minus; HelloController maps to "/hello*" URL.</p>
<pre class="prettyprint notranslate">
&lt;beans&gt;
   &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/&gt;
 
   &lt;bean class = "com.tutorialspoint.HelloController" /&gt;

   &lt;bean class = "com.tutorialspoint.WelcomeController"/&gt;   
&lt;/beans&gt;
</pre> 
<p>For example, using above configuration, if URI</p>
<ul class="list">
<li><p>/helloWorld.htm or /hello{any letter}.htm is requested, DispatcherServlet will forward the request to the <b>HelloController</b>.</p></li>
<li><p>/welcome.htm is requested, DispatcherServlet will forward the request to the <b>WelcomeController</b>.</p></li>
<li><p>/Welcome.htm is requested where W is capital cased, DispatcherServlet will not find any controller and the server will throw 404 status error.</p></li>
</ul>
<p>To start with it, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes HelloController and WelcomeController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files hello.jsp, welcome.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class HelloController extends AbstractController{
  
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("hello");
      model.addObject("message", "Hello World!");
      return model;
   }
}
</pre>
<h2>WelcomeController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class WelcomeController extends AbstractController{
  
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("welcome");
      model.addObject("message", "Welcome!");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"/&gt;
 
   &lt;bean class = "com.tutorialspoint.HelloController" /&gt;

   &lt;bean class = "com.tutorialspoint.WelcomeController"/&gt;  
&lt;/beans&gt;
</pre> 
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType="text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>welcome.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset=UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on the application, use the <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL &minus; <b>http://localhost:8080/TestWeb/helloWorld.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping.png" alt="Spring Controller Class Name Handler Mapping 1" />
<p>Try a URL <b>http://localhost:8080/TestWeb/hello.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping1.png" alt="Spring Controller Class Name Handler Mapping 2" />
<p>Try a URL <b>http://localhost:8080/TestWeb/welcome.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping2.png" alt="Spring Controller Class Name Handler Mapping 3" />
<p>Try a URL <b>http://localhost:8080/TestWeb/Welcome.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping4.png" alt="Spring Controller Class Name Handler Mapping 4" />
<h1>Spring MVC - Simple Url Handler Mapping Example</h1>
<p>The following example shows how to use Simple URL Handler Mapping using the Spring Web MVC framework. The SimpleUrlHandlerMapping class helps to explicitly-map URLs with their controllers respectively.</p>
<pre class="prettyprint notranslate">
&lt;beans&gt;
   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
      &lt;property name = "mappings"&gt;
         &lt;props&gt;
            &lt;prop key = "/welcome.htm"&gt;welcomeController&lt;/prop&gt;		   
            &lt;prop key = "/helloWorld.htm"&gt;helloController&lt;/prop&gt;
         &lt;/props&gt;
      &lt;/property&gt;
   &lt;/bean&gt;

   &lt;bean id = "helloController" class = "com.tutorialspoint.HelloController" /&gt;

   &lt;bean id = "welcomeController" class = "com.tutorialspoint.WelcomeController"/&gt;  
&lt;/beans&gt;
</pre> 
<p>For example, using above configuration, if URI</p>
<ul class="list">
<li><p>/helloWorld.htm is requested, DispatcherServlet will forward the request to the <b>HelloController</b>.</p></li>
<li><p>/welcome.htm is requested, DispatcherServlet will forward the request to the <b>WelcomeController</b>.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <b>TestWeb</b> under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes HelloController and WelcomeController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files hello.jsp and welcome.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class HelloController extends AbstractController{
  
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("hello");
      model.addObject("message", "Hello World!");
      return model;
   }
}
</pre>
<h2>WelcomeController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class WelcomeController extends AbstractController{
  
   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("welcome");
      model.addObject("message", "Welcome!");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
      &lt;property name = "mappings"&gt;
         &lt;props&gt;
            &lt;prop key = "/welcome.htm"&gt;welcomeController&lt;/prop&gt;		   
            &lt;prop key = "/helloWorld.htm"&gt;helloController&lt;/prop&gt;
         &lt;/props&gt;
      &lt;/property&gt;
   &lt;/bean&gt;

   &lt;bean id = "helloController" class = "com.tutorialspoint.HelloController" /&gt;

   &lt;bean id = "welcomeController" class = "com.tutorialspoint.WelcomeController"/&gt;   
&lt;/beans&gt;
</pre> 
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>welcome.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Welcome&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use the <b>Export &rarr; WAR File</b> option and save your <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder by using a standard browser. Try a URL &minus; <b>http://localhost:8080/TestWeb/helloWorld.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping.png" alt="Spring Controller Class Name Handler Mapping 1" />
<p>Try a URL <b>http://localhost:8080/TestWeb/welcome.htm</b> and you should see the following result if everything is fine with your Spring Web Application.</p>
<img src="/springmvc/images/spring_beanname_urlmapping2.png" alt="Spring Controller Class Name Handler Mapping 2" />
<h1>Spring MVC - Multi Action Controller Example</h1>
<p>The following example shows how to use the Multi Action Controller using the Spring Web MVC framework. The <b>MultiActionController</b> class helps to map multiple URLs with their methods in a single controller respectively.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("home");
      model.addObject("message", "Home");
      return model;
   }

   public ModelAndView add(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Add");
      return model;
   }

   public ModelAndView remove(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Remove");
      return model;
   }
}
</pre>
<pre class="prettyprint notranslate">
&lt;bean class = "org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;
&lt;bean name = "/home.htm" class = "com.tutorialspoint.UserController" /&gt; 
&lt;bean name = "/user/*.htm" class = "com.tutorialspoint.UserController" /&gt; 
</pre>
<p>For example, using the above configuration, if URI &minus;</p>
<ul class="list">
<li><p>/home.htm is requested, DispatcherServlet will forward the request to the UserController <b>home()</b> method.</p></li>
<li><p>user/add.htm is requested, DispatcherServlet will forward the request to the UserController <b>add()</b> method.</p></li>
<li><p>user/remove.htm is requested, DispatcherServlet will forward the request to the UserController <b>remove()</b> method.</p></li>
</ul>
<p>To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <b>TestWeb</b> under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class UserController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files home.jsp and user.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("home");
      model.addObject("message", "Home");
      return model;
   }

   public ModelAndView add(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Add");
      return model;
   }

   public ModelAndView remove(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Remove");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/&gt;
   &lt;bean name = "/home.htm" 
      class = "com.tutorialspoint.UserController" /&gt; 
   &lt;bean name = "/user/*.htm" 
      class = "com.tutorialspoint.UserController" /&gt;    
&lt;/beans&gt;
</pre> 
<h2>home.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;meta http-equiv = "Content-Type" content = "text/html; charset = ISO-8859-1"&gt;
      &lt;title&gt;Home&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;a href = "user/add.htm" &gt;Add&lt;/a&gt; &lt;br&gt;
      &lt;a href = "user/remove.htm" &gt;Remove&lt;/a&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Now, try a URL &minus; <b>http://localhost:8080/TestWeb/home.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_multiaction_controller.png" alt="Spring Multi Action Controller 1" />
<p>Try a URL <b>http://localhost:8080/TestWeb/user/add.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_multiaction_controller1.png" alt="Spring Multi Action Controller 2" />
<h1>Spring MVC - Properties Method Name Resolver Example</h1>
<p>The following example shows how to use the Properties Method Name Resolver method of a Multi Action Controller using Spring Web MVC framework. The <b>MultiActionController</b> class helps to map multiple URLs with their methods in a single controller respectively.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Home");
      return model;
   }

   public ModelAndView add(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Add");
      return model;
   }

   public ModelAndView remove(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Remove");
      return model;
   }
}
</pre>
<pre class="prettyprint notranslate">
&lt;bean class = "com.tutorialspoint.UserController"&gt;
   &lt;property name = "methodNameResolver"&gt;
      &lt;bean class = "org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver"&gt;
         &lt;property name = "mappings"&gt;
            &lt;props&gt;
               &lt;prop key = "/user/home.htm"&gt;home&lt;/prop&gt;
               &lt;prop key = "/user/add.htm"&gt;add&lt;/prop&gt;
               &lt;prop key = "/user/remove.htm"&gt;update&lt;/prop&gt;	  
            &lt;/props&gt;
         &lt;/property&gt;
      &lt;/bean&gt;
   &lt;/property&gt;
&lt;/bean&gt;
</pre>
<p>For example, using the above configuration, if URI &minus;</p>
<ul class="list">
<li><p>/user/home.htm is requested, DispatcherServlet will forward the request to the UserController <b>home()</b> method.</p></li>
<li><p>/user/add.htm is requested, DispatcherServlet will forward the request to the UserController <b>add()</b> method.</p></li>
<li><p>/user/remove.htm is requested, DispatcherServlet will forward the request to the UserController <b>remove()</b> method.</p></li>
</ul>
<p>To start with it, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java class UserController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file user.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Home");
      return model;
   }

   public ModelAndView add(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Add");
      return model;
   }

   public ModelAndView remove(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Remove");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"&gt; 
      &lt;property name = "caseSensitive" value = "true" /&gt;
   &lt;/bean&gt;
   &lt;bean class = "com.tutorialspoint.UserController"&gt;
      &lt;property name = "methodNameResolver"&gt;
          &lt;bean class = "org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver"&gt;
            &lt;property name = "mappings"&gt;
               &lt;props&gt;
                  &lt;prop key = "/user/home.htm"&gt;home&lt;/prop&gt;
                  &lt;prop key = "/user/add.htm"&gt;add&lt;/prop&gt;
                  &lt;prop key = "/user/remove.htm"&gt;update&lt;/prop&gt;	  
               &lt;/props&gt;
            &lt;/property&gt;
         &lt;/bean&gt;
      &lt;/property&gt;
   &lt;/bean&gt;  
&lt;/beans&gt;
</pre> 
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Now, try a URL &minus; <b>http://localhost:8080/TestWeb/user/add.htm</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_multiaction_controller1.png" alt="Spring Multi Action Controller" />
<h1>Spring MVC - Parameter Method Name Resolver Example</h1>
<p>The following example shows how to use the Parameter Method Name Resolver of a Multi Action Controller using the Spring Web MVC framework. The <b>MultiActionController</b> class helps to map multiple URLs with their methods in a single controller respectively.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Home");
      return model;
   }

   public ModelAndView add(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Add");
      return model;
   }

   public ModelAndView remove(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Remove");
      return model;
   }
}
</pre>
<pre class="prettyprint notranslate">
&lt;bean class = "com.tutorialspoint.UserController"&gt;
   &lt;property name = "methodNameResolver"&gt;
      &lt;bean class = "org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver"&gt;
         &lt;property name = "paramName" value = "action"/&gt;
      &lt;/bean&gt;
   &lt;/property&gt;
&lt;/bean&gt;
</pre>
<p>For example, using the above configuration, if URI &minus;</p>
<ul class="list">
<li><p>/user/*.htm?action=home is requested, DispatcherServlet will forward the request to the UserController <b>home()</b> method.</p></li>
<li><p>/user/*.htm?action=add is requested, DispatcherServlet will forward the request to the UserController <b>add()</b> method.</p></li>
<li><p>/user/*.htm?action=remove is requested, DispatcherServlet will forward the request to the UserController <b>remove()</b> method.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class UserController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file user.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Home");
      return model;
   }

   public ModelAndView add(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Add");
      return model;
   }

   public ModelAndView remove(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Remove");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"&gt; 
      &lt;property name = "caseSensitive" value = "true" /&gt;
   &lt;/bean&gt;
   &lt;bean class = "com.tutorialspoint.UserController"&gt;
      &lt;property name = "methodNameResolver"&gt;
         &lt;bean class = "org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver"&gt;
            &lt;property name = "paramName" value = "action"/&gt;
         &lt;/bean&gt;
      &lt;/property&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre> 
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType="text/html; charset=UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Now, try a URL &minus; <b>http://localhost:8080/TestWeb/user/test.htm?action=home</b> and we will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_multiaction_controller2.png" alt="Spring Multi Action Controller" />
<h1>Spring MVC - Parameterizable View Controller Example</h1>
<p>The following example shows how to use the Parameterizable View Controller method of a Multi Action Controller using the Spring Web MVC framework. The Parameterizable View allows mapping a webpage with a request.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Home");
      return model;
   } 
}
</pre>
<p></p>
<pre class="prettyprint notranslate">
&lt;bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
   &lt;property name="mappings"&gt;
      &lt;value&gt;
         index.htm=userController
      &lt;/value&gt;
   &lt;/property&gt;
&lt;/bean&gt;
&lt;bean id="userController" class="org.springframework.web.servlet.mvc.ParameterizableViewController"&gt;
   &lt;property name="viewName" value="user"/&gt;
&lt;/bean&gt;
</pre>
<p>For example, using the above configuration, if URI.</p>
<ul class="list">
<li><p>/index.htm is requested, DispatcherServlet will forward the request to the <b>UserController</b> controller with viewName set as user.jsp.</p></li>
</ul>
<p>To start with it, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class UserController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file user.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.multiaction.MultiActionController;

public class UserController extends MultiActionController{
	
   public ModelAndView home(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      ModelAndView model = new ModelAndView("user");
      model.addObject("message", "Home");
      return model;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
      &lt;property name = "suffix" value = ".jsp"/&gt;
   &lt;/bean&gt;

   &lt;bean class = "org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"&gt;
      &lt;property name = "mappings"&gt;
         &lt;value&gt;
            index.htm = userController
         &lt;/value&gt;
      &lt;/property&gt;
   &lt;/bean&gt;
   &lt;bean id = "userController" class = "org.springframework.web.servlet.mvc.ParameterizableViewController"&gt;
      &lt;property name = "viewName" value="user"/&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre> 
<h2>user.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType="text/html; charset=UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;Hello World&lt;/h2&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Now, try a URL – <b>http://localhost:8080/TestWeb/index.htm</b> and you will see the following screen, if everything is fine with the Spring Web Application.</p>
<img src="/springmvc/images/spring_multiaction_controller3.png" alt="Spring Multi Action Controller" />
<h1>Spring MVC - Internal Resource View Resolver Example</h1>
<p>The <b>InternalResourceViewResolver</b> is used to resolve the provided URI to actual URI. The following example shows how to use the InternalResourceViewResolver using the Spring Web MVC Framework. The InternalResourceViewResolver allows mapping webpages with requests.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");

      return "hello";
   }
}
</pre> 
<pre class="prettyprint notranslate">
&lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
   &lt;property name = "prefix" value = "/WEB-INF/jsp/"/&gt;
   &lt;property name = "suffix" value = ".jsp"/&gt;
&lt;/bean&gt;
</pre>
<p>For example, using the above configuration, if URI</p>
<ul class="list">
<li><p>/hello is requested, DispatcherServlet will forward the request to the prefix + viewname + suffix = /WEB-INF/jsp/hello.jsp.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and then consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspointas explained in the Spring MVC - Hello World Example chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java classes HelloController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file hello.jsp under jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");

      return "hello";
   }

}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;
 
&lt;/beans&gt;
</pre>
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL – <b>http://localhost:8080/TestWeb/hello</b> and if everything is fine with the Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_internalresourceviewresolver.png" alt="Spring Internal Resource View Resolver"/>
<h1>Spring MVC - Xml View Resolver Example</h1>
<p>The XmlViewResolver is used to resolve the view names using view beans defined in xml file. The following example shows how to use the XmlViewResolver using Spring Web MVC framework.</p>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;bean class = "org.springframework.web.servlet.view.XmlViewResolver"&gt;
   &lt;property name = "location"&gt;
      &lt;value&gt;/WEB-INF/views.xml&lt;/value&gt;
   &lt;/property&gt;
&lt;/bean&gt;
</pre>
<h2>views.xml</h2>
<pre class="prettyprint notranslate">
&lt;bean id = "hello"
   class = "org.springframework.web.servlet.view.JstlView"&gt;
   &lt;property name = "url" value = "/WEB-INF/jsp/hello.jsp" /&gt;
&lt;/bean&gt;
</pre>
<p>For example, using the above configuration, if URI &minus;</p>
<ul class="list">
<li><p>/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean hello in the view.xml.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class HelloController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file hello.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Download JSTL library <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/javax.servlet/jstl/1.2">jstl.jar</a>. Put it in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");

      return "hello";
   }

}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.XmlViewResolver"&gt;
      &lt;property name = "location"&gt;
         &lt;value&gt;/WEB-INF/views.xml&lt;/value&gt;
      &lt;/property&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre>
<h2>views.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean id = "hello"
      class = "org.springframework.web.servlet.view.JstlView"&gt;
      &lt;property name = "url" value = "/WEB-INF/jsp/hello.jsp" /&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre>
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL &minus; <b>http://localhost:8080/HelloWeb/hello</b> and if everything is fine with the Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_internalresourceviewresolver.png" alt="Spring Internal Resource View Resolver" />
<h1>Spring MVC - Resource Bundle View Resolver Example</h1>
<p>The <b>ResourceBundleViewResolver</b> is used to resolve the view names using view beans defined in the properties file. The following example shows how to use the ResourceBundleViewResolver using the Spring Web MVC Framework.</p>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
   &lt;property name = "basename" value = "views" /&gt;
&lt;/bean&gt;
</pre>
<p>Here, the <b>basename</b> refers to name of the resource bundle, which carries the views. The default name of the resource bundle is <b>views.properties</b>, which can be overridden using the basename property.</p>
<h2>views.properties</h2>
<pre class="result notranslate">
hello.(class) = org.springframework.web.servlet.view.JstlView
hello.url = /WEB-INF/jsp/hello.jsp
</pre>
<p>For example, using the above configuration, if URI &minus;</p>
<ul class="list">
<li><p>/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean hello in the views.properties.</p></li>
<li><p>Here, "hello" is the view name to be matched. Whereas, <b>class</b> refers to the view type and URL is the view's location.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class HelloController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file hello.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Create a properties file views.properties under the src folder.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>Download JSTL library <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/javax.servlet/jstl/1.2">jstl.jar</a>. Put it in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">6</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");

      return "hello";
   }

}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
      &lt;property name = "basename" value = "views" /&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre>
<h2>views.properties</h2>
<pre class="prettyprint notranslate">
hello.(class) = org.springframework.web.servlet.view.JstlView
hello.url = /WEB-INF/jsp/hello.jsp
</pre>
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType="text/html; charset=UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your HelloWeb.war file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL &minus; <b>http://localhost:8080/HelloWeb/hello</b> and if everything is fine with the Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_internalresourceviewresolver.png" alt="Spring Internal Resource View Resolver" />
<h1>Spring MVC - Multiple Resolver Mapping Example</h1>
<p>In case you want to use a Multiple View Resolver in a Spring MVC application then priority order can be set using the order property. The following example shows how to use the <b>ResourceBundleViewResolver</b> and the <b>InternalResourceViewResolver</b> in the Spring Web MVC Framework.</p>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
   &lt;property name = "basename" value = "views" /&gt;
   &lt;property name = "order" value = "0" /&gt;
&lt;/bean&gt;
&lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
   &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
   &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;property name = "order" value = "1" /&gt;
&lt;/bean&gt;
</pre>
<p>Here, the order property defines the ranking of a view resolver. In this, 0 is the first resolver and 1 is the next resolver and so on.</p>
<h2>views.properties</h2>
<pre class="prettyprint notranslate">
hello.(class) = org.springframework.web.servlet.view.JstlView
hello.url = /WEB-INF/jsp/hello.jsp
</pre>
<p>For example, using the above configuration, if URI &minus;</p>
<ul class="list">
<li><p>/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean hello in views.properties.</p></li>
</ul>
<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class HelloController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create a view file hello.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Create a properties file views.properties under the SRC folder.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>Download the JSTL library <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/javax.servlet/jstl/1.2">jstl.jar</a>. Put it in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">6</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
 
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      model.addAttribute("message", "Hello Spring MVC Framework!");

      return "hello";
   }

}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.ResourceBundleViewResolver"&gt;
      &lt;property name = "basename" value = "views" /&gt;
      &lt;property name = "order" value = "0" /&gt;
   &lt;/bean&gt;
   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
      &lt;property name = "order" value = "1" /&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre>
<h2>views.properties</h2>
<pre class="prettyprint notranslate">
hello.(class) = org.springframework.web.servlet.view.JstlView
hello.url = /WEB-INF/jsp/hello.jsp
</pre>
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL &minus; <b>http://localhost:8080/HelloWeb/hello</b>, if everything is fine with the Spring Web Application, we will see the following screen.</p>
<img src="/springmvc/images/spring_internalresourceviewresolver.png" alt="Spring Internal Resource View Resolver" />
<h1>Spring MVC - Hibernate Validator Example</h1>
<p>The following example shows how to use Error Handling and Validators in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with the name <b>TestWeb</b> under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes Student, StudentController and StudentValidator under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create view files addStudent.jsp and result.jsp under the jsp sub-folder.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Download Hibernate Validator library <a target="_blank" rel="nofollow" href="http://hibernate.org/validator/">Hibernate Validator</a>. Extract hibernate-validator-5.3.4.Final.jar and required dependencies present under the required folder of the downloaded zip file. Put them in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>Create a properties file messages.properties under the SRC folder.</td>
</tr>
<tr>
<td class="ts">6</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>Student.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.hibernate.validator.constraints.NotEmpty;
import org.hibernate.validator.constraints.Range;

public class Student {

   @Range(min = 1, max = 150) 
   private Integer age;
   @NotEmpty
   private String name;
   private Integer id;

   public void setAge(Integer age) {
      this.age = age;
   }
   public Integer getAge() {
      return age;
   }

   public void setName(String name) {
      this.name = name;
   }
   public String getName() {
      return name;
   }

   public void setId(Integer id) {
      this.id = id;
   }
   public Integer getId() {
      return id;
   }
}
</pre>
<h2>StudentController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class StudentController {

   @RequestMapping(value = "/addStudent", method = RequestMethod.GET)
   public ModelAndView student() {
      return new ModelAndView("addStudent", "command", new Student());
   }

   @ModelAttribute("student")
   public Student createStudentModel() {	
      return new Student();
   }

   @RequestMapping(value = "/addStudent", method = RequestMethod.POST)
   public String addStudent(@ModelAttribute("student") @Validated Student student, 
      BindingResult bindingResult, Model model) {
      if (bindingResult.hasErrors()) {
         return "addStudent";
      }
      model.addAttribute("name", student.getName());
      model.addAttribute("age", student.getAge());
      model.addAttribute("id", student.getId());

      return "result";
   }
}
</pre>
<h2>messages.properties</h2>
<pre class="prettyprint notranslate">
NotEmpty.student.name = Name is required!
Range.student.age = Age value must be between 1 and 150!
</pre>
<p>Here, the key is &lt;Annotation&gt;.&lt;object-name&gt;.&lt;attribute&gt;. Value is the message to be displayed.</p>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:mvc = "http://www.springframework.org/schema/mvc"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;

   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;
   &lt;mvc:annotation-driven /&gt;
   &lt;bean class = "org.springframework.context.support.ResourceBundleMessageSource"
      id = "messageSource"&gt;
      &lt;property name = "basename" value = "messages" /&gt;
   &lt;/bean&gt;
   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;      
   &lt;/bean&gt;
&lt;/beans&gt;
</pre> 
<p>Here, for the first service method <b>student()</b>, we have passed a blank <b>Studentobject></b> in the ModelAndView object with name "command", because the spring framework expects an object with name "command", if you are using &lt;form:form&gt; tags in your JSP file. So, when the <b>student()</b> method is called, it returns <b>addStudent.jsp</b> view.</p>
<p>The second service method <b>addStudent()</b> will be called against a POST method on the <b>HelloWeb/addStudent</b> URL. You will prepare your model object based on the submitted information. Finally, a "result" view will be returned from the service method, which will result in rendering the result.jsp. In case there are errors generated using validator then same view "addStudent" is returned, Spring automatically injects error messages from <b>BindingResult</b> in view.</p>
<h2>addStudent.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;style&gt;
      .error {
         color: #ff0000;
      }

      .errorblock {
         color: #000;
         background-color: #ffEEEE;
         border: 3px solid #ff0000;
         padding: 8px;
         margin: 16px;
      }
   &lt;/style&gt;
   &lt;body&gt;

      &lt;h2&gt;Student Information&lt;/h2&gt;
      &lt;form:form method = "POST" action = "/TestWeb/addStudent" commandName = "student"&gt;
      &lt;form:errors path = "*" cssClass = "errorblock" element = "div" /&gt;
         &lt;table&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "name"&gt;Name&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "name" /&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:errors path = "name" cssClass = "error" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "age"&gt;Age&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "age" /&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:errors path = "age" cssClass = "error" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td&gt;&lt;form:label path = "id"&gt;id&lt;/form:label&gt;&lt;/td&gt;
               &lt;td&gt;&lt;form:input path = "id" /&gt;&lt;/td&gt;
               &lt;/tr&gt;
            &lt;tr&gt;
               &lt;td colspan = "2"&gt;
               &lt;input type = "submit" value = "Submit"/&gt;
               &lt;/td&gt;
            &lt;/tr&gt;
         &lt;/table&gt;  
      &lt;/form:form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we are using the &lt;form:errors /&gt; tag with path="*" to render error messages. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:errors path = "*" cssClass = "errorblock" element = "div" /&gt;
</pre>
<p>It will render error messages for all input validations. We are using &lt;form:errors /&gt; tag with path = "name" to render error message for the name field.</p>
<p>For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;form:errors path = "name" cssClass = "error" /&gt;
&lt;form:errors path = "age" cssClass = "error" /&gt;
</pre>
<p>It will render error messages for name and age field validations.</p>
<h2>result.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@taglib uri = "http://www.springframework.org/tags/form" prefix = "form"%&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Spring MVC Form Handling&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;

      &lt;h2&gt;Submitted Student Information&lt;/h2&gt;
      &lt;table&gt;
         &lt;tr&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;${name}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;Age&lt;/td&gt;
            &lt;td&gt;${age}&lt;/td&gt;
         &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;ID&lt;/td&gt;
            &lt;td&gt;${id}&lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;  
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>HelloWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL &minus; <b>http://localhost:8080/TestWeb/addStudent</b> and we will see the following screen, if you have entered invalid values.</p>
<img src="/springmvc/images/spring_hibernate_validation.png" alt="Spring Validation Result" />
<h1>Spring MVC - Generate RSS Feed Example</h1>
<p>The following example shows how to generate RSS Feed using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and then consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with the name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes RSSMessage, RSSFeedViewer and RSSController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Download the Rome library <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/com.rometools/rome/1.5.0">Rome</a> and its dependencies rome-utils, jdom and slf4j from the same maven repository page. Put them in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Create a properties file messages.properties under the SRC folder.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>RSSMessage.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.Date;

public class RSSMessage {
   String title;
   String url;
   String summary;
   Date createdDate;
   public String getTitle() {
      return title;
   }
   public void setTitle(String title) {
      this.title = title;
   }
   public String getUrl() {
      return url;
   }
   public void setUrl(String url) {
      this.url = url;
   }
   public String getSummary() {
      return summary;
   }
   public void setSummary(String summary) {
      this.summary = summary;
   }
   public Date getCreatedDate() {
      return createdDate;
   }
   public void setCreatedDate(Date createdDate) {
      this.createdDate = createdDate;
   }	
}
</pre>
<h2>RSSFeedViewer.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.view.feed.AbstractRssFeedView;

import com.rometools.rome.feed.rss.Channel;
import com.rometools.rome.feed.rss.Content;
import com.rometools.rome.feed.rss.Item;

public class RSSFeedViewer extends AbstractRssFeedView {

   @Override
   protected void buildFeedMetadata(Map&lt;String, Object&gt; model, Channel feed,
      HttpServletRequest request) {

      feed.setTitle("TutorialsPoint Dot Com");
      feed.setDescription("Java Tutorials and Examples");
      feed.setLink("http://www.tutorialspoint.com");

      super.buildFeedMetadata(model, feed, request);
   }

   @Override
   protected List&lt;Item&gt; buildFeedItems(Map&lt;String, Object&gt; model,
      HttpServletRequest request, HttpServletResponse response) throws Exception {
   
      List&lt;RSSMessage&gt; listContent = (List&lt;RSSMessage&gt;) model.get("feedContent");
      List&lt;Item&gt; items = new ArrayList&lt;Item&gt;(listContent.size());

      for(RSSMessage tempContent : listContent ){

         Item item = new Item();

         Content content = new Content();
         content.setValue(tempContent.getSummary());
         item.setContent(content);

         item.setTitle(tempContent.getTitle());
         item.setLink(tempContent.getUrl());
         item.setPubDate(tempContent.getCreatedDate());

         items.add(item);
      }

      return items;		
   }
}
</pre>
<h2>RSSController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class RSSController {
   @RequestMapping(value="/rssfeed", method = RequestMethod.GET)
   public ModelAndView getFeedInRss() {

      List&lt;RSSMessage&gt; items = new ArrayList&lt;RSSMessage&gt;();

      RSSMessage content  = new RSSMessage();
      content.setTitle("Spring Tutorial");
      content.setUrl("http://www.tutorialspoint/spring");
      content.setSummary("Spring tutorial summary...");
      content.setCreatedDate(new Date());
      items.add(content);

      RSSMessage content2  = new RSSMessage();
      content2.setTitle("Spring MVC");
      content2.setUrl("http://www.tutorialspoint/springmvc");
      content2.setSummary("Spring MVC tutorial summary...");
      content2.setCreatedDate(new Date());
      items.add(content2);

      ModelAndView mav = new ModelAndView();
      mav.setViewName("rssViewer");
      mav.addObject("feedContent", items);

      return mav;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"   
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;
   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.BeanNameViewResolver" /&gt;

   &lt;bean id = "rssViewer" class = "com.tutorialspoint.RSSFeedViewer" /&gt;
&lt;/beans&gt;
</pre> 
<p>Here, we have created a RSS feed POJO RSSMessage and a RSS Message Viewer, which extends the <b>AbstractRssFeedView</b> and overrides its method. In RSSController, we have generated a sample RSS Feed.</p>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL &minus; <b>http://localhost:8080/TestWeb/rssfeed</b> and we will see the following screen.</p>
<img src="/springmvc/images/spring_rss_feed.png" alt="Spring RSS Generation" />
<h1>Spring MVC - Generate XML Example</h1>
<p>The following example shows how to generate XML using the Spring Web MVC Framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes User and UserController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement(name = "user")
public class User {
   private String name;
   private int id;
   public String getName() {
      return name;
   }
   @XmlElement
   public void setName(String name) {
      this.name = name;
   }
   public int getId() {
      return id;
   }
   @XmlElement
   public void setId(int id) {
      this.id = id;
   }	
}
</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/user")
public class UserController {
	
   @RequestMapping(value="{name}", method = RequestMethod.GET)
   public @ResponseBody User getUser(@PathVariable String name) {

      User user = new User();

      user.setName(name);
      user.setId(1);
      return user;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"   
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:mvc = "http://www.springframework.org/schema/mvc"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;
   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;
   &lt;mvc:annotation-driven /&gt;
&lt;/beans&gt;
</pre> 
<p>Here, we have created an XML Mapped POJO User and in the UserController, we have returned the User. Spring automatically handles the XML conversion based on <b>RequestMapping</b>.</p>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL – <b>http://localhost:8080/TestWeb/mahesh</b> and we will see the following screen.</p>
<img src="/springmvc/images/spring_xml_result.png" alt="Spring XML Generation" />
<h1>Spring MVC - Generate JSON Example</h1>
<p>The following example shows how to generate JSON using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework &minus;</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java classes <i>User</i>, <i>UserController</i> under the <i>com.tutorialspoint</i> package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Download Jackson libraries <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core">Jackson Core, Jackson Databind and Jackson Annotations</a> from maven repository page. Put them in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of all the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>User.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

public class User {
   private String name;
   private int id;
   public String getName() {
      return name;
   }  
   public void setName(String name) {
      this.name = name;
   }
   public int getId() {
      return id;
   }   
   public void setId(int id) {
      this.id = id;
   }	
}
</pre>
<h2>UserController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/user")
public class UserController {
	
   @RequestMapping(value="{name}", method = RequestMethod.GET)
   public @ResponseBody User getUser(@PathVariable String name) {

      User user = new User();

      user.setName(name);
      user.setId(1);
      return user;
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = http://www.springframework.org/schema/beans"
   xmlns:context = http://www.springframework.org/schema/context"   
   xmlns:xsi = http://www.w3.org/2001/XMLSchema-instance"
   xmlns:mvc = http://www.springframework.org/schema/mvc"
   xsi:schemaLocation = 
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;
   &lt;context:component-scan base-package = com.tutorialspoint" /&gt;
   &lt;mvc:annotation-driven /&gt;
&lt;/beans&gt;
</pre> 
<p>Here, we have created a Simple POJO User and in UserController we have returned the User. Spring automatically handles the JSON conversion based on RequestMapping and Jackson jar present in the classpath.</p>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL – <b>http://localhost:8080/TestWeb/mahesh</b> and we will see the following screen.</p>
<img src="/springmvc/images/spring_json_result.png" alt="Spring JSON Generation" />
<h1>Spring MVC - Generate Excel Example</h1>
<p>The following example shows how to generate Excel using the Spring Web MVC Framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes UserExcelView and ExcelController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Download the Apache POI library <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/org.apache.poi/poi/3.15">Apache POI</a> from the maven repository page. Put it in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>ExcelController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class ExcelController extends AbstractController {

   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      //user data
      Map&lt;String,String&gt; userData = new HashMap&lt;String,String&gt;();
      userData.put("1", "Mahesh");
      userData.put("2", "Suresh");
      userData.put("3", "Ramesh");
      userData.put("4", "Naresh");
      return new ModelAndView("UserSummary","userData",userData);
   }
}
</pre>
<h2>UserExcelView.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.web.servlet.view.document.AbstractExcelView;

public class UserExcelView extends AbstractExcelView {

   @Override
   protected void buildExcelDocument(Map&lt;String, Object&gt; model,
      HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response)
      throws Exception {
      Map&lt;String,String&gt; userData = (Map&lt;String,String&gt;) model.get("userData");
      //create a wordsheet
      HSSFSheet sheet = workbook.createSheet("User Report");

      HSSFRow header = sheet.createRow(0);
      header.createCell(0).setCellValue("Roll No");
      header.createCell(1).setCellValue("Name");

      int rowNum = 1;
      for (Map.Entry&lt;String, String&gt; entry : userData.entrySet()) {
         //create the row data
         HSSFRow row = sheet.createRow(rowNum++);
         row.createCell(0).setCellValue(entry.getKey());
         row.createCell(1).setCellValue(entry.getValue());
      }   
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"   
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:mvc = "http://www.springframework.org/schema/mvc"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;
   
   &lt;bean class = "org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" /&gt;

   &lt;bean class = "com.tutorialspoint.ExcelController" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.XmlViewResolver"&gt;
      &lt;property name = "location"&gt;
         &lt;value&gt;/WEB-INF/views.xml&lt;/value&gt;
      &lt;/property&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre> 
<h2>views.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean id = "UserSummary" class = "com.tutorialspoint.UserExcelView"&gt;&lt;/bean&gt;
&lt;/beans&gt;
</pre>
<p>Here, we have created an ExcelController and an ExcelView. Apache POI library deals with Microsoft Office file formats and will convert the data to an excel document.</p>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL &minus; <b>http://localhost:8080/TestWeb/excel</b> and we will see the following screen.</p>
<img src="/springmvc/images/spring_excel_result.png" alt="Spring Excel Generation" />
<h1>Spring MVC - Generate PDF Example</h1>
<p>The following example shows how to generate a PDF using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create Java classes UserPDFView and PDFController under the com.tutorialspoint package.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Download the iText library &minus; <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/com.lowagie/itext/2.1.7">iText</a> from the maven repository page. Put it in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>PDFController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.AbstractController;

public class PDFController extends AbstractController {

   @Override
   protected ModelAndView handleRequestInternal(HttpServletRequest request,
      HttpServletResponse response) throws Exception {
      //user data
      Map&lt;String,String&gt; userData = new HashMap&lt;String,String&gt;();
      userData.put("1", "Mahesh");
      userData.put("2", "Suresh");
      userData.put("3", "Ramesh");
      userData.put("4", "Naresh");
      return new ModelAndView("UserSummary","userData",userData);
   }
}

</pre>
<h2>UserExcelView.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.view.document.AbstractPdfView;

import com.lowagie.text.Document;
import com.lowagie.text.Table;
import com.lowagie.text.pdf.PdfWriter;

public class UserPDFView extends AbstractPdfView {

   protected void buildPdfDocument(Map&lt;String, Object&gt; model, Document document,
      PdfWriter pdfWriter, HttpServletRequest request, HttpServletResponse response)
      throws Exception {
      Map&lt;String,String&gt; userData = (Map&lt;String,String&gt;) model.get("userData");

      Table table = new Table(2);
      table.addCell("Roll No");
      table.addCell("Name");

      for (Map.Entry&lt;String, String&gt; entry : userData.entrySet()) {
         table.addCell(entry.getKey());
         table.addCell(entry.getValue());
      }
      document.add(table);
   }
}
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"   
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:mvc = "http://www.springframework.org/schema/mvc"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;
   &lt;bean class = "org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" /&gt;

   &lt;bean class = "com.tutorialspoint.PDFController" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.XmlViewResolver"&gt;
      &lt;property name = "location"&gt;
         &lt;value&gt;/WEB-INF/views.xml&lt;/value&gt;
      &lt;/property&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre> 
<h2>views.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd"&gt;

   &lt;bean id = "UserSummary" class = "com.tutorialspoint.UserPDFView"&gt;&lt;/bean&gt;
&lt;/beans&gt;
</pre>
<p>Here, we have created a PDFController and UserPDFView. iText library deals with the PDF file formats and will convert the data to a PDF document.</p>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save the <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. We can also try the following URL &minus; <b>http://localhost:8080/TestWeb/pdf</b> and if all goes as planned, we will see the following screen.</p>
<img src="/springmvc/images/spring_pdf_result.png" alt="Spring PDF Generation" />
<h1>Spring MVC - Integrate LOG4J Example</h1>
<p>The following example shows how to integrate LOG4J using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.</p>
<table class="table table-bordered">
<tr>
<th class="ts">Step</th>
<th class="ts">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with the name TestWeb under a package com.tutorialspoint as explained in the Spring MVC - Hello World chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create a Java class HelloController under the com.tutorialspointpackage.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Download the log4j library <a target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/log4j/log4j/1.2.17">LOG4J</a> from the maven repository page. Put it in your CLASSPATH.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Create a log4j.properties under the SRC folder.</td>
</tr>
<tr>
<td class="ts">5</td>
<td>The final step is to create the content of the source and configuration files and export the application as explained below.</td>
</tr>
</table>
<h2>HelloController.java</h2>
<pre class="prettyprint notranslate">
package com.tutorialspoint;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.ui.ModelMap;

@Controller
@RequestMapping("/hello")
public class HelloController{
   private static final Logger LOGGER = Logger.getLogger(HelloController.class);
   @RequestMapping(method = RequestMethod.GET)
   public String printHello(ModelMap model) {
      LOGGER.info("printHello started.");

      //logs debug message
      if(LOGGER.isDebugEnabled()){
         LOGGER.debug("Inside:  printHello");
      }
      //logs exception
      LOGGER.error("Logging a sample exception", new Exception("Testing"));

      model.addAttribute("message", "Hello Spring MVC Framework!");
      LOGGER.info("printHello ended.");
      return "hello";
   }
}
</pre>
<h2>log4j.properties</h2>
<pre class="prettyprint notranslate">
# Root logger option
log4j.rootLogger = DEBUG, stdout, file

# Redirect log messages to console
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n

# Redirect log messages to a log file
log4j.appender.file = org.apache.log4j.RollingFileAppender
#outputs to Tomcat home
log4j.appender.file.File = ${catalina.home}/logs/myapp.log
log4j.appender.file.MaxFileSize = 5MB
log4j.appender.file.MaxBackupIndex = 10
log4j.appender.file.layout = org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
</pre>
<h2>TestWeb-servlet.xml</h2>
<pre class="prettyprint notranslate">
&lt;beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:context = "http://www.springframework.org/schema/context"   
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns:mvc = "http://www.springframework.org/schema/mvc"
   xsi:schemaLocation = "
   http://www.springframework.org/schema/beans     
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/context 
   http://www.springframework.org/schema/context/spring-context-3.0.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;
   &lt;context:component-scan base-package = "com.tutorialspoint" /&gt;

   &lt;bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver"&gt;
      &lt;property name = "prefix" value = "/WEB-INF/jsp/" /&gt;
      &lt;property name = "suffix" value = ".jsp" /&gt;
   &lt;/bean&gt;
&lt;/beans&gt;
</pre> 
<h2>hello.jsp</h2>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;h2&gt;${message}&lt;/h2&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we have configured the LOG4J to log details on the Tomcat console and in the file present in &amp;t; tomcat home &rarr; logs as myapp.log.</p>
<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use <b>Export &rarr; WAR File</b> option and save your <b>TestWeb.war</b> file in Tomcat's webapps folder.</p>
<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL &minus;<b>http://localhost:8080/TestWeb/hello</b> and we will see the following screen on Tomcat's log.</p>
<img src="/springmvc/images/spring_log4j_result.png" alt="Spring LOG4J Generation" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/spring/spring_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/springmvc/springmvc_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
