<!DOCTYPE html>
<html lang="en-US">
<head>
<title>XSLT Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="XSLT Quick Guide - Before learning XSLT, we should first understand XSL which stands for EXtensible Stylesheet Language. It is similar to XML as CSS is to HTML."/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/xslt/xslt_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#2B569A;
}
a.demo {
    background:#2B569A;
}
li.heading {
    background:#2B569A;
}
.course-box{background:#2B569A}
.home-intro-sub p{color:#2B569A}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/xslt/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/xslt/images/xslt-mini-logo.jpg" alt="XSLT Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">XSLT Tutorial</li>
<li><a href="/xslt/index.htm">XSLT - Home</a></li>
<li><a href="/xslt/xslt_overview.htm">XSLT - Overview</a></li>
<li><a href="/xslt/xslt_syntax.htm">XSLT - Syntax</a></li>
<li><a href="/xslt/xslt_template.htm">XSLT - &lt;template&gt;</a></li>
<li><a href="/xslt/xslt_valueof.htm">XSLT - &lt;value-of&gt;</a></li>
<li><a href="/xslt/xslt_foreach.htm">XSLT - &lt;for-each&gt;</a></li>
<li><a href="/xslt/xslt_sort.htm">XSLT - &lt;sort&gt;</a></li>
<li><a href="/xslt/xslt_if.htm">XSLT - &lt;if&gt;</a></li>
<li><a href="/xslt/xslt_choose.htm">XSLT - &lt;choose&gt;</a></li>
<li><a href="/xslt/xslt_key.htm">XSLT - &lt;key&gt;</a></li>
<li><a href="/xslt/xslt_message.htm">XSLT - &lt;message&gt;</a></li>
<li><a href="/xslt/xslt_apply_template.htm">XSLT - &lt;apply-template&gt;</a></li>
<li><a href="/xslt/xslt_import_stylesheet.htm">XSLT - &lt;import&gt;</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">XSLT Useful Resources</li>
<li><a href="/xslt/xslt_quick_guide.htm">XSLT - Quick Guide</a></li>
<li><a href="/xslt/xslt_useful_resources.htm">XSLT - Useful Resources</a></li>
<li><a href="/xslt/xslt_discussion.htm">XSLT - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>XSLT Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/xslt/xslt_import_stylesheet.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/xslt/xslt_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>XSLT Overview</h1>
<h2>XSL</h2>
<p>Before learning XSLT, we should first understand XSL which stands for E<b>X</b>tensible <b>S</b>tylesheet <b>L</b>anguage. It is similar to XML as CSS is to HTML.</p>
<h3>Need for XSL</h3>
<p>In case of HTML document, tags are predefined such as table, div, and span; and the browser knows how to add style to them and display those using CSS styles. But in case of XML documents, tags are not predefined. In order to understand and style an XML document, World Wide Web Consortium (W3C) developed XSL which can act as XML based Stylesheet Language. An XSL document specifies how a browser should render an XML document.</p>
<p>Following are the main parts of XSL &minus;</p>
<ul class="list">
<li><p><b>XSLT</b> &minus; used to transform XML document into various other types of document.</p></li>
<li><p><b>XPath</b> &minus; used to navigate XML document.</p></li>
<li><p><b>XSL-FO</b> &minus; used to format XML document.</p></li>
</ul>
<h2>What is XSLT</h2>
<p>XSLT, Extensible Stylesheet Language Transformations, provides the ability to transform XML data from one format to another automatically.</p>
<h3>How XSLT Works</h3>
<p>An XSLT stylesheet is used to define the transformation rules to be applied on the target XML document. XSLT stylesheet is written in XML format. XSLT Processor takes the XSLT stylesheet and applies the transformation rules on the target XML document and then it generates a formatted document in the form of XML, HTML, or text format. This formatted document is then utilized by XSLT formatter to generate the actual output which is to be displayed to the end-user.</p>
<img src="/xslt/images/xlst_working.jpg" alt="Work flow of XSLT" />
<h3>Advantages</h3>
<p>Here are the advantages of using XSLT &minus;</p>
<ul class="list">
<li><p>Independent of programming. Transformations are written in a separate xsl file which is again an XML document.</p></li>
<li><p>Output can be altered by simply modifying the transformations in xsl file. No need to change any code. So Web designers can edit the stylesheet and can see the change in the output quickly.</p></li>
</ul>
<h1>XSLT Syntax</h1>
<p>Let’s suppose we have the following sample XML file, students.xml, which is required to be transformed into a well-formatted HTML document.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt;
&lt;class&gt; 
   &lt;student rollno = "393"&gt;
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt;
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt;
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p>We need to define an XSLT style sheet document for the above XML document to meet the following criteria &minus;</p>
<ul class="list">
<li><p>Page should have a title <b>Students</b>.</p></li>
<li><p>Page should have a table of student details.</p></li>
<li><p>Columns should have following headers: Roll No, First Name, Last Name, Nick Name, Marks</p></li>
<li><p>Table must contain details of the students accordingly.</p></li>
</ul>
<h2>Step 1: Create XSLT document</h2>
<p>Create an XSLT document to meet the above requirements, name it as students.xsl and save it in the same location where students.xml lies.</p>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate" id="students_xsl">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;
&lt;!-- xsl stylesheet declaration with xsl namespace: 
Namespace tells the xlst processor about which 
element is to be processed and which is used for output purpose only 
--&gt; 
&lt;xsl:stylesheet version = "1.0" 
xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;   
&lt;!-- xsl template declaration:  
template tells the xlst processor about the section of xml 
document which is to be formatted. It takes an XPath expression. 
In our case, it is matching document root element and will 
tell processor to process the entire document with this template. 
--&gt; 
   &lt;xsl:template match = "/"&gt; 
      &lt;!-- HTML tags 
         Used for formatting purpose. Processor will skip them and browser 
            will simply render them. 
      --&gt; 
		
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
				
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
				
               &lt;!-- for-each processing instruction 
               Looks for each element matching the XPath expression 
               --&gt; 
				
               &lt;xsl:for-each select="class/student"&gt; 
                  &lt;tr&gt; 
                     &lt;td&gt; 
                        &lt;!-- value-of processing instruction 
                        process the value of the element matching the XPath expression 
                        --&gt; 
                        &lt;xsl:value-of select = "@rollno"/&gt; 
                     &lt;/td&gt; 
						
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
						
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
					
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Step 2: Link the XSLT Document to the XML Document</h2>
<p>Update student.xml document with the following xml-stylesheet tag. Set href value to students.xsl</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
... 
&lt;/class&gt; 
</pre>
<h2>Step 3: View the XML Document in Internet Explorer</h2>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt;
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;   
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students.jpg" alt="Formatted Output" />
<h1>XSLT &lt;template&gt;</h1>
<p>&lt;xsl:template&gt; defines a way to reuse templates in order to generate the desired output for nodes of a particular type/context.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:template&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:template 
   name = Qname 
   match = Pattern 
   priority = number 
   mode = QName &gt;
&lt;/xsl:template&gt;
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td><p><b>name</b></p>
<p>Name of the element on which template is to be applied.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">2</td>
<td><p><b>match</b></p>
<p>Pattern which signifies the element(s) on which template is to be applied.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">3</td>
<td><p><b>priority</b></p>
<p>Priority number of a template. Matching template with low priority is not considered in from in front of high priority template.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">4</td>
<td><p><b>mode</b></p>
<p>Allows element to be processed multiple times to produce a different result each time.</p>
</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Number of occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td><p><b>Parent elements</b></p></td>
<td style="text-align:center;vertical-align:middle"><p>xsl:stylesheet, xsl:transform</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Child elements</b></p></td>
<td><p>xsl:apply-imports,xsl:apply-templates,xsl:attribute, xsl:call-template, xsl:choose, xsl:comment, xsl:copy, xsl:copy-of, xsl:element, xsl:fallback, xsl:for-each, xsl:if, xsl:message, xsl:number, xsl:param, xsl:processing-instruction, xsl:text, xsl:value-of, xsl:variable, output elements</p></td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This template rule has a pattern that identifies &lt;student&gt; elements and produces an output in a tabular format.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students_imports.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;  
	
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt;
					
               &lt;xsl:for-each select = "class/student"&gt; 
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt;
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students.jpg" alt="Formatted Output" />
<h1>XSLT &lt;value-of&gt;</h1>
<p>&lt;xsl:value-of&gt; tag puts the value of the selected node as per XPath expression, as text.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:value-of&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:value-of
   select = Expression
   disable-output-escaping = "yes" | "no" &gt;
&lt;/xsl:value-of&gt;
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td><p><b>Select</b></p>
<p>XPath Expression to be evaluated in current context.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">2</td>
<td><p><b>disable-outputescaping</b></p>
<p>Default-"no". If "yes", output text will not escape xml characters from text.</p>
</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th>Number of Occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td><p><b>Parent elements</b></p></td>
<td><p>xsl:attribute, xsl:comment, xsl:copy, xsl:element, xsl:fallback, xsl:for-each, xsl:if, xsl:message, xsl:otherwise, xsl:param, xsl:processing instruction, xsl:template, xsl:variable, xsl:when, xsl:with-param, output elements</p></td>
</tr>
<tr>
<td><p><b>Child elements</b></p></td>
<td><p>None</p></td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt;.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
   &lt;xsl:stylesheet version = "1.0" 
      xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;
		
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
					
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Verify the output</h2>
<img src="/xslt/images/xlst_students.jpg" alt="Formatted Output" />
<h1>XSLT &lt;for-each&gt;</h1>
<p>&lt;xsl:for-each&gt; tag applies a template repeatedly for each node.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:for-each&gt;</b> element</p>
<pre class="result notranslate">
&lt;xsl:for-each
   select = Expression &gt;  
&lt;/xsl:for-each&gt;
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td><p><b>Select</b></p>
<p>XPath Expression to be evaluated in current context to determine the set of nodes to be iterated.</p>
</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th>Number of Occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Parent elements</b></p></td>
<td><p>xsl:attribute, xsl:comment, xsl:copy, xsl:element, xsl:fallback, xsl:foreach, xsl:if, xsl:message, xsl:otherwise, xsl:param, xsl:processinginstruction, xsl:template, xsl:variable, xsl:when, xsl:with-param, output elements.</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Child elements</b></p></td>
<td><p>xsl:apply-imports, xsl:apply-templates, xsl:attribute, xsl:call-template, xsl:choose, xsl:comment, xsl:copy, xsl:copy-of, xsl:element, xsl:fallback, xsl:for-each, xsl:if, xsl:message, xsl:number, xsl:processing-instruction, xsl:sort, xsl:text, xsl:value-of, xsl:variable.</p></td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute rollno and its child &lt;firstname&gt;,&lt;lastname&gt;&lt;nickname&gt; and &lt;marks&gt; by iterating over each student.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
   &lt;xsl:stylesheet version = "1.0" 
      xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
					
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
					
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students.jpg" alt="Formatted Output" />
<h1>XSLT &lt;sort&gt;</h1>
<p>&lt;xsl:sort&gt; tag specifies a sort criteria on the nodes.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:sort&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:sort 
   select = string-expression  
   lang = { nmtoken } 
   data-type = { "text" | "number" | QName } 
   order = { "ascending" | "descending" } 
   case-order = { "upper-first" | "lower-first" } &gt; 
&lt;/xsl:sort&gt; 
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td><p><b>select</b></p>
<p>Sorting key of the node.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">2</td>
<td><p><b>lang</b></p>
<p>Language alphabet used to determine sort order.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">3</td>
<td><p><b>data-type</b></p>
<p>Data type of the text.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">4</td>
<td><p><b>order</b></p>
<p>Sorting order. Default is "ascending".</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">5</td>
<td><p><b>case-order</b></p>
<p>Sorting order of string by capitalization. Default is "upper-first".</p>
</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<td><b>Number of occurrences</b></td>
<td>Unlimited</td>
</tr>
<tr>
<td><b>Parent elements</b></td>
<td>xsl:apply-templates, xsl:for-each</td>
</tr>
<tr>
<td><b>Child elements</b></td>
<td>None</td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student sort them by first name.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt;
   &lt;/student&gt;
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;    
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
					
                  &lt;xsl:sort select = "firstname"/&gt; 
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
            &lt;/table&gt;
         &lt;/body&gt;
      &lt;/html&gt;
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students_sorted.jpg" alt="Formatted Sort Output" />
<h1>XSLT &lt;if&gt;</h1>
<p>&lt;xsl:if&gt; tag specifies a conditional test against the content of nodes.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:if&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:if 
  test = boolean-expression &gt; 
&lt;/xsl:if&gt; 
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td><p><b>test</b></p>
<p>The condition in the xml data to test.</p>
</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th>Number of Occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Parent elements</b></p>
<td><p>xsl:attribute, xsl:comment, xsl:copy, xsl:element, xsl:fallback, xsl:for-each, xsl:if, xsl:message, xsl:otherwise, xsl:param, xsl:processing-instruction, xsl:template, xsl:variable, xsl:when, xsl:with-param, output elements</p></td>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Child elements</b></p>
<td><p>xsl:apply-templates, xsl:attribute, xsl:call-template, xsl:choose, xsl:comment, xsl:copy, xsl:copy-of, xsl:element, xsl:for-each, xsl:if, xsl:processing-instruction, xsl:text, xsl:value-of, xsl:variable, output elements</p></td>
</td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student. It checks marks to be greater than 90 and then prints the student(s) details.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
					
                  &lt;xsl:if test = "marks &gt; 90"&gt; 
                     &lt;tr&gt; 
                        &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                        &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                        &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                        &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                        &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                     &lt;/tr&gt; 
                  &lt;/xsl:if&gt; 
               &lt;/xsl:for-each&gt; 
					
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students_if.jpg" alt="Formatted IF Output" />
<h1>XSLT &lt;choose&gt;</h1>
<p>&lt;xsl:choose&gt; tag specifies a multiple conditional tests against the content of nodes in conjunction with the &lt;xsl:otherwise&gt; and &lt;xsl:when&gt; elements.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:choose&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:choose &gt;
&lt;/xsl:choose&gt;
</pre>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th>Number of Occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Parent elements</b></p></td>
<td><p>xsl:attribute, xsl:comment, xsl:copy, xsl:element, xsl:fallback, xsl:for-each, xsl:if, xsl:message, xsl:otherwise, xsl:param, xsl:processing-instruction, xsl:template, xsl:variable, xsl:when, xsl:with-param, output elements</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Child elements</b></p></td>
<td><p>xsl:otherwise, xsl:when</p></td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student. It checks and then prints the grade details.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt;
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;   
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
                  &lt;th&gt;Grade&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
					
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
							
                     &lt;td&gt; 
                        &lt;xsl:choose&gt; 
                           &lt;xsl:when test = "marks &gt; 90"&gt; 
                              High 
                           &lt;/xsl:when&gt; 
									
                           &lt;xsl:when test = "marks &gt; 85"&gt; 
                              Medium 
                           &lt;/xsl:when&gt; 
									
                           &lt;xsl:otherwise&gt; 
                              Low 
                           &lt;/xsl:otherwise&gt; 
                        &lt;/xsl:choose&gt; 
                     &lt;/td&gt; 
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students_choose.jpg" alt="Formatted Choose Output" />
<h1>XSLT &lt;key&gt;</h1>
<p>&lt;xsl:key&gt; tag element specifies a named name-value pair assigned to a specific element in an XML document. This key is used with the key() function in XPath expressions to access the assigned elements in an XML document.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:key&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:key 
   name = QName 
   match = Pattern 
   use = Expression &gt; 
&lt;/xsl:key&gt;
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">S.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td style="text-align:center;vertical-align:middle"><p><b>Name</b></p>
<p>Name of the key to be used.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">2</td>
<td style="text-align:center;vertical-align:middle"><p><b>Match</b></p>
<p>Patterns used to identify a node that holds this key.</p>
</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">3</td>
<td><p><b>Use</b></p>
<p>XPath expression to identify the value of the nodes of xml document.</p>
</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<td style="text-align:center;vertical-align:middle"><b>Number of Occurrences</b></td>
<td>Unlimited</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><b>Parent elements</b></td>
<td>xsl:stylesheet</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><b>Child elements</b></td>
<td>None</td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student. It checks key as firstname to be one of the student's name and then prints the student details.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;
   &lt;xsl:key name = "firstname-search" match = "student" use = "firstname"/&gt; 
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "key('firstname-search', 'Dinkar')"&gt; 
				
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                  &lt;/tr&gt; 
					
               &lt;/xsl:for-each&gt; 
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students_key.jpg" alt="Formatted Key Output" />
<h1>XSLT &lt;message&gt;</h1>
<p>&lt;message&gt; tag element helps to debug an XSLT processing. It is similar to javascript alerts. &lt;xsl:&gt; tag buffers a message to XSLT processor which terminates the processing and sends a message to the caller application to display the error message.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:message&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:message 
   terminate = "yes" | "no" &gt;
&lt;/xsl:message&gt;
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td><p><b>terminate</b></p>
<p>It specifies whether the transformation should terminate upon executing this instruction or not. Default is "yes".</p></td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th>Number of Occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><b>Parent elements</b></td>
<td><p>xsl:attribute, xsl:comment, xsl:copy, xsl:element, xsl:fallback, xsl:foreach, xsl:if, xsl:message, xsl:otherwise, xsl:param, xsl:processinginstruction, xsl:template, xsl:variable, xsl:when, xsl:with-param, output elements</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Child elements</b></p></td>
<td><p>xsl:apply-templates, xsl:attribute, xsl:call-template, xsl:choose, xsl:comment, xsl:copy, xsl:copy-of, xsl:element, xsl:for-each, xsl:if, xsl:processing-instruction, xsl:text, xsl:value-of, xsl:variable, output elements</p></td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a table of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student. It checks key as firstname to be present and then prints the student details, otherwise displays an error message.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;   
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
					
                  &lt;xsl:if test = "firstname = ''"&gt; 
                     &lt;xsl:message terminate = "yes"&gt;A first name field is empty. 
                     &lt;/xsl:message&gt; 
                  &lt;/xsl:if&gt; 
					
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt;
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt; 
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students_message.jpg" alt="Formatted Message Output" />
<h1>XSLT &lt;apply-template&gt;</h1>
<p>&lt;xsl:apply-template&gt; tag signals the XSLT processor to find the appropriate template to apply, based on the type and context of each selected node.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:apply-template&gt;</b> element.</p>
<pre class="result notranslate">
&lt;xsl:apply-template 
   select = Expression 
   mode = QName &gt; 
&lt;/xsl:apply-template&gt; 
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1</td>
<td style="text-align:center;vertical-align:middle"><p><b>select</b></p>
<p>Used to process nodes selected by an XPath expression, instead of processing all the children.</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">2</td>
<td style="text-align:center;vertical-align:middle"><p><b>mode</b></p>
<p>Allows an element as specified by its Qualified Names to be processed multiple times, each time producing a different result.</p></td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<th>Number of occurrences</th>
<th style="text-align:center">Unlimited</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Parent elements</b></p></td>
<td><p>xsl:attribute, xsl:comment, xsl:copy, xsl:element, xsl:fallback, xsl:foreach, xsl:if, xsl:message, xsl:otherwise, xsl:param, xsl:processinginstruction, xsl:template, xsl:variable, xsl:when, xsl:with-param, output elements</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><p><b>Child elements</b></p></td>
<td><p>xsl:sort, xsl:with-param</p></td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a list of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt; 
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;   
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;xsl:apply-templates select = "class/student" /&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  

   &lt;xsl:template match = "class/student"&gt; 
      &lt;xsl:apply-templates select = "@rollno" /&gt; 
      &lt;xsl:apply-templates select = "firstname" /&gt; 
      &lt;xsl:apply-templates select = "lastname" /&gt; 
      &lt;xsl:apply-templates select = "nickname" /&gt; 
      &lt;xsl:apply-templates select = "marks" /&gt; 
      &lt;br /&gt; 
   &lt;/xsl:template&gt;  

   &lt;xsl:template match = "@rollno"&gt; 
      &lt;span style = "font-size = 22px;"&gt; 
         &lt;xsl:value-of select = "." /&gt; 
      &lt;/span&gt; 
      &lt;br /&gt; 
   &lt;/xsl:template&gt;  

   &lt;xsl:template match = "firstname"&gt; 
      First Name:&lt;span style = "color:blue;"&gt; 
         &lt;xsl:value-of select = "." /&gt; 
      &lt;/span&gt; 
      &lt;br /&gt; 
   &lt;/xsl:template&gt;  

   &lt;xsl:template match = "lastname"&gt; 
      Last Name:&lt;span style = "color:green;"&gt; 
         &lt;xsl:value-of select = "." /&gt; 
      &lt;/span&gt; 
      &lt;br /&gt; 
   &lt;/xsl:template&gt;  

   &lt;xsl:template match = "nickname"&gt; 
      Nick Name:&lt;span style = "color:red;"&gt; 
         &lt;xsl:value-of select = "." /&gt; 
      &lt;/span&gt; 
      &lt;br /&gt; 
   &lt;/xsl:template&gt;  

   &lt;xsl:template match = "marks"&gt; 
      Marks:&lt;span style = "color:gray;"&gt; 
         &lt;xsl:value-of select = "." /&gt; 
      &lt;/span&gt; 
      &lt;br /&gt; 
   &lt;/xsl:template&gt;  
	
&lt;/xsl:stylesheet&gt;
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students_applytemplate.jpg" alt="Formatted Apply Template Output" />
<h1>XSLT &lt;import&gt;</h1>
<p>&lt;xsl:import&gt; tag imports the contents of one stylesheet into another. Importing a style sheet has higher precedence over imported stylesheet.</p>
<h2>Declaration</h2>
<p>Following is the syntax declaration of <b>&lt;xsl:import&gt;</b> element.</p>
<pre class="prettyprint notranslate">
&lt;xsl:import href = "uri"&gt; 
&lt;/xsl:import&gt;
</pre>
<h2>Attributes</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Name &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle">1.</td>
<td style="text-align:center;vertical-align:middle"><p><b>href</b></p>
<p>used to pass the path of xslt stylesheet to be imported</p>.</td>
</tr>
</table>
<h2>Elements</h2>
<table class="table table-bordered">
<tr>
<td style="text-align:center;vertical-align:middle"><b>Number of occurrences</b></td>
<td>Unlimited</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><b>Parent elements</b></td>
<td>xsl:stylesheet, xsl:transform</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle"><b>Child elements</b></td>
<td>none</td>
</tr>
</table>
<h2>Demo Example</h2>
<p>This example creates a list of &lt;student&gt; element with its attribute <b>rollno</b> and its child &lt;firstname&gt;, &lt;lastname&gt;, &lt;nickname&gt;, and &lt;marks&gt; by iterating over each student. Here we have created two xsl stylesheets where students_imports.xsl stylesheet imports students.xsl and students.xml is linked to students_imports.xsl.</p>
<p><b>students.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0"?&gt; 
&lt;?xml-stylesheet type = "text/xsl" href = "students_imports.xsl"?&gt; 
&lt;class&gt; 
   &lt;student rollno = "393"&gt;
      &lt;firstname&gt;Dinkar&lt;/firstname&gt; 
      &lt;lastname&gt;Kad&lt;/lastname&gt; 
      &lt;nickname&gt;Dinkar&lt;/nickname&gt; 
      &lt;marks&gt;85&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "493"&gt; 
      &lt;firstname&gt;Vaneet&lt;/firstname&gt; 
      &lt;lastname&gt;Gupta&lt;/lastname&gt; 
      &lt;nickname&gt;Vinni&lt;/nickname&gt; 
      &lt;marks&gt;95&lt;/marks&gt; 
   &lt;/student&gt; 
   &lt;student rollno = "593"&gt; 
      &lt;firstname&gt;Jasvir&lt;/firstname&gt; 
      &lt;lastname&gt;Singh&lt;/lastname&gt; 
      &lt;nickname&gt;Jazz&lt;/nickname&gt; 
      &lt;marks&gt;90&lt;/marks&gt; 
   &lt;/student&gt; 
&lt;/class&gt;
</pre>
<p><b>students.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;    
   &lt;xsl:template match = "/"&gt; 
      &lt;html&gt; 
         &lt;body&gt; 
            &lt;h2&gt;Students&lt;/h2&gt; 
            &lt;table border = "1"&gt; 
               &lt;tr bgcolor = "#9acd32"&gt; 
                  &lt;th&gt;Roll No&lt;/th&gt; 
                  &lt;th&gt;First Name&lt;/th&gt; 
                  &lt;th&gt;Last Name&lt;/th&gt; 
                  &lt;th&gt;Nick Name&lt;/th&gt; 
                  &lt;th&gt;Marks&lt;/th&gt; 
               &lt;/tr&gt; 
					
               &lt;xsl:for-each select = "class/student"&gt; 
					
                  &lt;tr&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "@rollno"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "firstname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "lastname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "nickname"/&gt;&lt;/td&gt; 
                     &lt;td&gt;&lt;xsl:value-of select = "marks"/&gt;&lt;/td&gt; 
                  &lt;/tr&gt; 
               &lt;/xsl:for-each&gt; 
            &lt;/table&gt; 
         &lt;/body&gt; 
      &lt;/html&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt;
</pre>
<p><b>students_imports.xsl</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;xsl:stylesheet version = "1.0" 
   xmlns:xsl = "http://www.w3.org/1999/XSL/Transform"&gt;  
   &lt;xsl:import href = "students.xsl"/&gt;  
   &lt;xsl:template match = "/"&gt; 
      &lt;xsl:apply-imports/&gt; 
   &lt;/xsl:template&gt;  
&lt;/xsl:stylesheet&gt; 
</pre>
<h2>Output</h2>
<img src="/xslt/images/xlst_students.jpg" alt="Formatted Import Template Output" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/xslt/xslt_import_stylesheet.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/xslt/xslt_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
