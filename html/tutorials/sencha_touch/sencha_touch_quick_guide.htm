<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Sencha Touch - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Sencha Touch - Quick Guide - Sencha Touch is a popular framework of Sencha for creating a user interface for mobile applications. It helps the developer create a mobile app using simple HTM"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/sencha_touch/sencha_touch_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#26a210;
}
a.demo {
    background:#26a210;
}
li.heading {
    background:#26a210;
}
.course-box{background:#26a210}
.home-intro-sub p{color:#26a210}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/sencha_touch/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/sencha_touch/images/sencha-touch-mini-logo.jpg" alt="Sencha Touch Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Sencha Touch Tutorial</li>
<li><a href="/sencha_touch/index.htm">Sencha Touch - Home</a></li>
<li><a href="/sencha_touch/sencha_touch_overview.htm">Sencha Touch - Overview</a></li>
<li><a href="/sencha_touch/sencha_touch_environment.htm">Sencha Touch - Environment</a></li>
<li><a href="/sencha_touch/sencha_touch_naming_convention.htm">Sencha Touch - Naming Convention</a></li>
<li><a href="/sencha_touch/sencha_touch_architecture.htm">Sencha Touch - Architecture</a></li>
<li><a href="/sencha_touch/sencha_touch_mvc_explanation.htm">Sencha Touch - MVC Explanation</a></li>
<li><a href="/sencha_touch/sencha_touch_first_app.htm">Sencha Touch - First App</a></li>
<li><a href="/sencha_touch/sencha_touch_build_application.htm">Sencha Touch - Build Application</a></li>
<li><a href="/sencha_touch/sencha_touch_migration_steps.htm">Sencha Touch - Migration Steps</a></li>
<li><a href="/sencha_touch/sencha_touch_core_concepts.htm">Sencha Touch - Core Concepts</a></li>
<li><a href="/sencha_touch/sencha_touch_data.htm">Sencha Touch - Data</a></li>
<li><a href="/sencha_touch/sencha_touch_theme.htm">Sencha Touch - Theme</a></li>
<li><a href="/sencha_touch/sencha_touch_device_profile.htm">Sencha Touch - Device Profile</a></li>
<li><a href="/sencha_touch/sencha_touch_dependencies.htm">Sencha Touch - Dependencies</a></li>
<li><a href="/sencha_touch/sencha_touch_environment_detection.htm">Environment Detection</a></li>
<li><a href="/sencha_touch/sencha_touch_events.htm">Sencha Touch - Events</a></li>
<li><a href="/sencha_touch/sencha_touch_layout.htm">Sencha Touch - Layout</a></li>
<li><a href="/sencha_touch/sencha_touch_history_and_support.htm">Sencha Touch - History &amp; Support</a></li>
<li><a href="/sencha_touch/sencha_touch_upload_and_download.htm">Sencha Touch - Upload &amp; Download</a></li>
<li><a href="/sencha_touch/sencha_touch_view_components.htm">Sencha Touch - View Components</a></li>
<li><a href="/sencha_touch/sencha_touch_packaging.htm">Sencha Touch - Packaging</a></li>
<li><a href="/sencha_touch/sencha_touch_best_practice.htm">Sencha Touch - Best Practice</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Sencha Touch Useful Resources</li>
<li><a href="/sencha_touch/sencha_touch_quick_guide.htm">Sencha Touch - Quick Guide</a></li>
<li><a href="/sencha_touch/sencha_touch_useful_resources.htm">Sencha Touch - Useful Resources</a></li>
<li><a href="/sencha_touch/sencha_touch_discussion.htm">Sencha Touch - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Sencha Touch - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/sencha_touch/sencha_touch_best_practice.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/sencha_touch/sencha_touch_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Sencha Touch - Overview</h1>
<p>Sencha Touch is a popular framework of Sencha for creating a user interface for mobile applications. It helps the developer create a mobile app using simple HTML, CSS, JS which supports many mobile devices such as android, IOS, BlackBerry, and Windows. It is based on MVC architecture. The latest version of Sencha Touch is 2.4.</p>
<h2>History of Sencha Touch</h2>
<p>After releasing Sencha's other product, ExtJs, which was for web application, there was a need to develop a framework which works on mobile devices too.</p>
<p>The first version of Sencha Touch was 0.9 beta version, which supported Android and IOS devices. Later, the first main release of Sencha Touch version 1.0 was in November 2010, which was the first stable version and supported Blackberry devices too.</p>
<p>The latest release of Sencha Touch is version 2.4 released in June 2015, which supports many devices such as Windows, Tizen along with Android, IOS, BlackBerry OS 10, Google Chrome for Android and mobile Safari, etc.</p>
<h2>Features of Sencha Touch</h2>
<p>Following are the most prominent features of Sencha Touch &minus;</p>
<ul class="list">
<li><p>Customizable and more than 50 build in UI widgets with a collection of rich UI such as lists, carousels, forms, menus, and toolbars, built specifically for mobile platforms.</p></li>
<li><p>Code compatibility of new versions with the older one.</p></li>
<li><p>A flexible layout manager that helps organize the display of data and content across multiple mobile devices with different OS.</p></li>
<li><p>The framework includes a robust data package that can consume data from any backend data source.</p></li>
<li><p>Adaptive layouts, animations, and smooth scrolling for a better mobile web application experience for the use.</p></li>
<li><p>Out-of-the-box, native-looking themes for every major platform enables to make web and hybrid applications match the look and feel of the target platforms.</p></li>
</ul>
<h2>Sencha Touch ─ Benefits</h2>
<p>Sencha Touch is the leading standard for business-grade web application development. It offers the tools necessary to build robust applications for most of the mobile devices providing a single platform for developing applications. Following are some of the benefits &minus;</p>
<ul class="list">
<li><p>Provides a responsive touch feature, hence the user can easily navigate while using the mobile app.</p></li>
<li><p>Provides compatibility with all the latest versions of IOS, Android and Blackberry, and Windows.</p></li>
<li><p>Provides fastest possible speed desirable for any mobile application.</p></li>
<li><p>Provides a cost-effective solution with its cross-platform compatibility.</p></li>
<li><p>Based on the native APIs and basic web development languages such as HTML, CSS, JS which makes it easier for a developer to understand Sencha Touch.</p></li>
</ul>
<h2>Sencha Touch ─ Limitations</h2>
<p>Sencha Touch API doesn't have the following capability &minus;</p>
<ul class="list">
<li><p>The app does not have access to the device’s camera, contacts, and accelerometer.</p></li>
<li><p>It does not provide the push notification facility. For this, we have to use websockets or long polling.</p></li>
<li><p>According to general public license policy, it is free for open source applications however paid for commercial applications.</p></li>
<li><p>It is not good for hardcore graphics and animation apps such as for gaming apps.</p></li>
</ul>
<h2>Sencha Touch ─ Tools</h2>
<h3>Sencha SDK</h3>
<p>This is Sencha development kit used to create a skeleton of the project. We use the command "sencha -sdk path/to/touch generate app appName" to create an app with the name given in the command.</p>
<p>When the app is created, you can see the following files in the app &minus;</p>
<ul class="list">
<li><p><b>app</b> &minus; This folder contains model, view, controller and store files for the app.</p></li>
<li><p><b>app.js</b> &minus; This is the main JS file for your application. From this file, the Sencha code flow starts.</p></li>
<li><p><b>app.json</b> &minus; This is the configuration file for the app, all the configuration details presents here.</p></li>
<li><p><b>index.html</b> &minus; This is the main html file where we include the app.js and other Sencha related files.</p></li>
<li><p><b>package.json</b> &minus; This file has all the dependency and other information related to the app.</p></li>
<li><p><b>resources</b> &minus; This folder includes all the CSS files and images required for the application.</p></li>
</ul>
<h3>Sencha CMD</h3>
<p>Sencha CMD is a command line tool, which provides the features of Sencha Touch code minification, scaffolding, build generation, and other useful features for production purpose.</p>
<p>We use command "Sencha app build package" in the command prompt to build the application for this. Go to the app directory in the command prompt and type the above command. Once the build is successful, we will see the minified version of the application basically used for production purpose.</p>
<p>This can be downloaded from <a href="https://www.sencha.com/products/extjs/cmd-download/" rel="nofollow" target="_blank"><i class="icon icon-arrow-circle-o-left big-font"></i>  https://www.sencha.com/products/extjs/cmd-download/</a></p> 
<h3>Sencha Inspector</h3>
<p>Sencha Inspector is a debugging tool to debug any issue in Sencha code during development.</p>
<h1>Sencha Touch - Environment</h1>
<h2>Local Environment Setup</h2>
<p>This section guides you on how to download and set up Sencha Touch on your machine. Please follow the steps to set up the environment.</p>
<h2>Downloading library files</h2>
<p>Download a commercial version of Sencha Touch library files from the following link <a href="https://www.sencha.com/products/download" rel="nofollow" target="_blank">https://www.sencha.com</a>. You will get the trial version from the site on your registered mail id, which will be a zipped folder named sencha-touch-2.4.2-commercial.</p>
<p>Unzip the folder and you will find various JavaScript and CSS files to include in your application. Include  mostly the following files &minus;</p>
<P><b>Javascript Files</b> &minus; JS file which you can find under folder \sencha-touch-2.4.2commercial\touch-2.4.2 are &minus;</p>
<table class="table table-bordered">
<tr>
<th>Sr.No</th>
<th style="text-align:center">File &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>sencha-touch.js</b></p>
<p>This is the core file which contains all functionalities to run the application.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>sencha-touch-all.js</b></p>
<p>This file contains all the code minified with no comments in the file.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>sencha-touch-debug.js</b></p>
<p>This is the unminified version of sencha-touch-all.js for debugging purpose.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>sencha-touch-all-debug.js</b></p>
<p>This file is also unminified and is used for development purpose as it contains all the comments and console logs to check any errors/issues.</p>
</td>
</tr>
</table>
<p>You can add these files to your projects JS folder or you can provide a direct path where the files reside in your system.</p>
<p><b>CSS Files</b> &minus; There are number of theme based files which you can find under folder I:\sencha touch\sencha-touch-2.4.2-commercial\touch-2.4.2\resources\css\sencha-touch.css</p>
<p>These library files will be added in Sencha Touch application as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "../sencha-touch-2.4.2-commercial/touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;  
      &lt;link href = "../sencha-touch-2.4.2-commercial/touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type ="text/javascript" src = "app.js" &gt; &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>You can keep Sencha Touch application code in app.js file.</p>
<h2>CDN Setup</h2>
<p>CDN is content delivery network with which you do not need to download the Sencha Touch library files, instead you can directly add CDN link for ExtJS to your program as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;    
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel="stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "app.js" &gt; &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<h2>Popular Editors</h2>
<p>As it is a JavaScript framework used for developing web applications, the project will have HTML, JS files, and to write your Ext JS programs, you will need a text editor. There are multiple IDEs available in the market. But for now, you can consider one of the following &minus;</p>
<ul class="list">
<li><p><b>Notepad</b> &minus; On Windows machine, you can use any simple text editor such as Notepad (Recommended for this tutorial), Notepad++.</p></li>
<li><p><b>Brackets</b> &minus; Another popular IDE which can be downloaded from <a href="http://brackets.io/" rel="nofollow" target="_blank"><i class="icon icon-arrow-circle-o-left big-font"></i>http://brackets.io/</a>.</p></li>
<li><p><b>Sublime</b> &minus; Another popular IDE which can be downloaded from <a href="https://www.sublimetext.com/3" rel="nofollow" target="_blank"><i class="icon icon-arrow-circle-o-left big-font"></i>https://www.sublimetext.com/3/</a>.</p></li>
</ul>
<h1>Sencha Touch - Naming Convention</h1>
<p><b>Naming convention</b> is a set of rules to be followed for identifiers. It makes the code easily readable and understandable for other programmers as well.</p>
<p>Naming convention in Sencha Touch follows the standard JavaScript convention, which is not mandatory but a good practice to follow. It should follow camel case syntax for naming the class, method, variable, and properties.</p>
<p>If the name is combined with two words, the second word will start with an uppercase letter always. For example, doLayout(), StudentForm, firstName, etc.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center">Name &amp; Convention</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Class Name</b></p>
<p>It should start with an uppercase letter, followed by camel case. For example, StudentClass</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Method Name</b></p>
<p>It should start with a lowercase letter, followed by camel case. For example, studentMethod()</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Variable Name</b></p>
<p>It should start with a lowercase letter, followed by camel case. For example, studentName</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Constant Name</b></p>
<p>It should be in uppercase only. For example, COUNT, MAX_VALUE</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Property Name</b></p>
<p>It should start with a lowercase letter, followed by camel case. For example, enableColumnResize = true</p>
</td>
</tr>
</table>
<h1>Sencha Touch - Architecture</h1>
<p>The bottom layer for any mobile application is OS, on top of that anything or everything is built. Then we have the browsers on which we will be running the applications. It could be Chrome, Safari, IE anything. The upper layer is a W3 standards, which is common for all. Sencha Touch stands or is built on top of W3 standards, which is nothing but HTML5, which makes a single application compatible with different browsers of different devices.</p>
<p>Sencha Touch is a combination of three frameworks &minus; ExtJs, JqTouch, and Raphael (vector drawing). It follows MVC architecture. MVC separates the code into more manageable chunks.</p>
<p>Although the architecture is not mandatory for the program, however, it is a best practice to follow this structure to make your code highly maintainable and organized.</p>
<h2>Project Structure With Sencha Touch App</h2>
<pre  class="prettyprint notranslate">
----------src
----------resources
-------------------CSS files
-------------------Images
----------JavaScript
--------------------App Folder
-------------------------------Controller
------------------------------------Contoller.js
-------------------------------Model
------------------------------------Model.js
-------------------------------Store
------------------------------------Store.js
-------------------------------View
------------------------------------View.js
-------------------------------Utils
------------------------------------Utils.js
--------------------------------app.js
-----------HTML files
</pre>
<p>Sencha Touch app folder will reside in the JavaScript folder of your project.</p>
<p>The App will contain controller, view, model, store, and utility files with app.js.</p>
<p><b>app.js</b> &minus; The main file from where the flow of program will start. It should be included in main HTML file using &lt;script&gt; tag. App calls the controller of application for rest of the functionality.</p>
<p><b>Controller.js</b> &minus; It is the controller file of Sencha Touch MVC architecture. This contains all the control of the application, the events listeners, and most of the functionality of the code. It performs the following tasks: routing, intermediate between view and model, and executes events.</p>
<p><b>View.js</b> &minus; It contains the interface part of the application, which shows up to the user. Sencha Touch uses various UI rich views, which can be extended and customized  according to the requirement.</p>
<p><b>Store.js</b> &minus; It contains the locally cached data, which is to be rendered on view with the help of model objects. Store fetches the data using proxies, which has the path defined for services to fetch the backend data.</p>
<p><b>Model.js</b> &minus; It contains the objects which binds the store data to view. It is the representation of the real-world object, which basically deals with the database.</p>
<p><b>Utils.js</b> &minus; It is not included in MVC architecture but it is a best practice to use this so as to make the code clean, less complex, and more readable. We can write methods in this file and call them in controller or view renderer wherever required. It is helpful for code reusability purpose as well.</p>
<h1>Sencha Touch - MVC</h1>
<p>MVC stands for Model View Controller. It is an architectural pattern which separates the application into logical components making it more manageable.</p>
<p>The following diagram shows how MVC architecture works &minus;</p>
<img src="/sencha_touch/images/mvc.jpg" alt="MVC" />
<p><b>Controller</b> &minus; Controller controls whole application it notify view if model is changed and performs actions based on user inputs.</p>
<p><b>View</b> &minus; It contains the interface part of the application which is visual to user. It notify controller to change model on user input.</p>
<p><b>Model</b> &minus; It contains the objects which binds the store data to view. It is representation of the real world object which basically deals with database. It also notify controller for any change in view.</p>
<h1>Sencha Touch - First Program</h1>
<p>In this chapter, we will list down the steps to write the first Hello World program in Ext JS.</p>
<h2>Step 1</h2>
<p>Create an index.htm page in an editor of our choice. Include the required library files in the head section of html page as follows.</p>
<h3>index.htm</h3>
<div class="demo-view">
<a href="http://tpcg.io/tb6Zjk" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;
      &lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application( {
            name: 'Sencha', launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true, items: [{
                     title: 'Home', iconCls: 'home', html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Explanation</h3>
<ul class="list">
<li><p>Ext.application() method is the starting point of Sencha Touch application. It creates a global variable called 'Sencha' declared with the name property - all the Application's classes such as its Models, Views and Controllers will reside under this single namespace, which reduces the chances of colliding global variables and file names.</p></li>
<li><p>launch() method is called once the page is ready and all the JavaScript files are loaded.</p></li>
<li><p>Ext.create() method is used to create an object in Sencha Touch. Here, we are creating an object of simple panel class Ext.tab.Panel.</p></li>
<li><p>Ext.tab.Panel is the predefined class in Sencha Touch for creating a panel.</p></li>
<li><p>Every Sencha Touch class has different properties to perform some basic functionalities.</p></li>
</ul>
<p>Ext.Panel class has various properties such as &minus;</p>
<ul class="list">
<li><p><b>fullscreen</b> property is to make use of a complete screen, hence the panel will take fullscreen space.</p></li>
<li><p><b>items</b> property is the container for various items.</p></li>
<li><p><b>iconCls</b> is the class used for displaying different icons.</p></li>
<li><p><b>title</b> property is to provide the title to the panel.</p></li>
<li><p><b>html</b> property is the html content to be shown in the panel.</p></li>
</ul>
<h3>Step 2</h3>
<p>Open the index.htm file in a standard browser and you will get the following output.</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/first_program.htm"></iframe>
<h1>Sencha Touch - Builds</h1>
<p>Today's demand for a web application is to develop a fast application with less development efforts. Sencha Touch helps in doing so with ease as it provide a number of build libraries to choose from, based on the development or production code along with the facility to create a custom build.</p>
<p>Sencha Touch build libraries loads the classes dynamically. Dynamic loading stands for the classes that gets loaded when required and only those classes will be included which are required in the application. This makes the application run faster as the number of files to be loaded reduces, simultaneously decreasing the time to load.</p>
<p>Sencha Touch 2.x provides the following five build libraries.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Builds &amp; Usage</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>sencha-touchdebug.js</b></p>
<p>This build is used while developing the application locally. It is a nonminified version with all the comments and debug logs for easy debugging while development.</p>
</td> 
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>senchatouch.js</b></p>
<p>This file is used for production purpose. It is the minified version when we have a custom build.</p>
</td> 
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>sencha-touchall.js</b></p>
<p>This file is used for production purpose. It is the minified version when we do not have a custom build.</p>
</td> 
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>sencha-touchall-debug.js</b></p>
<p>This file is used for debugging in production. It is not minified and has all the comments and debug logs.</p>
</td> 
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>sencha-touchall-compat.js</b></p>
<p>This build is used to migrate the version 1.x to version 2.x. It gives a warning wherever version 1.x code is not compatible and needs code modification.</p>
</td> 
</tr>
</table>
<p>With the above mentioned builds, Sencha Touch provides a facility to create custom builds.</p>
<h2>Advantages of Having a Custom Build</h2>
<p>Custom build does not load all the touch files. It loads only those files, which we are using in the application, which makes the application faster and easily maintainable.</p>
<p>Sencha CMD is used to create a custom build. To create a custom build in Sencha CMD, go to the directory where the app file resides and type one of the following commands to create a build.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Command &amp; Usage</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>sencha app build native</b></p>
<p>Builds the app and prepares a file called packager.temp.json that you can use to package an application--the packager.temp.json is the same as packager.json, but contains additional paths.</p>
</td> 
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>sencha app build -run native</b></p>
<p>Builds and automatically packages the application, and launches the appropriate simulator.</p>
</td> 
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>sencha app build package</b></p>
<p>Builds the app with packaging support, but does not configure a packager JSON file. This is useful for projects that manually maintain multiple packager.json files.</p>
</td> 
</tr>
</table>
<p>Once the build is successful, it will generate all-classes.js file which we need to include in our index.html to make it production ready.</p>
<p>Following code shows the changes to be done for production ready code.</p>
<p><b>Index.html before building application</b></p>
<pre class="prettyprint notranslate ">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-debug.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript" src = "app.js"&gt; &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p><b>Index.html after building the application</b></p>
<pre class="prettyprint notranslate ">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript" src = "app.js"&gt; &lt;/script&gt;
      &lt;script type = "text/javascript" src = "app-classes.js"&gt; &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h1>Sencha Touch - Migration</h1>
<p>Sencha Touch comes with various rectifications from the earlier version.</p>
<p>Sencha Touch 2 comes with the backward compatibility build, which makes the migration process easier from version 1.x to 2.x.</p>
<p>This build just makes the work easier by providing a warning and the logs whenever any migration issue occurs or code change is required, so the user will get to know where the changes are must, to make sure the application works with the latest version.</p>
<p>Sencha Touch 2.x migration requires the following code changes.</p>
<h2>Class System</h2>
<p><b>Code in Sencha Touch 1.x</b> &minus;</p>
<pre class="prettyprint notranslate">
MyApp.view.StudentPanel = Ext.extend(Ext.Panel, {
   scroll: 'vertical',
   html: 'Student Panel'
   initComponent: function() {
      Ext.getCmp('StudentIdDiv').update('This is a Student panel');
   }
});
</pre>
<p><b>Code in Sencha Touch 2.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.view.StudentPanel', {
   extend: 'Ext.Panel',

   config: {
      scroll: 'vertical',
      html: 'Student Panel'
   },

   initialize: function() {
      Ext.getCmp('StudentIdDiv').setHtml('This is a Student panel')
   }
});
</pre>
<p>By looking at both the versions, you can see the way to create class is changes which is now inspired by ExtJs such as &minus;</p>
<ul class="list">
<li><p>Ext.extend is changed to Ext.define.</p></li>
<li><p>All the configuration parameters related to the class are now defined under config parameter.</p></li>
<li><p>The initComponent is changed to initialize() method.</p></li>
<li><p>In Sencha Touch 2.x, we can have setHtml() and getHtml() functions to update html or to get the value.</p></li>
</ul>
<h2>MVC Architecture</h2>
<p>Sencha Touch 1.x code was modular and based on MVC architecture. Sencha Touch 2.x follows a different syntax for writing model, view, and controller. Let’s see the difference of model, view, and controller files in different versions.</p>
<h3>Model</h3>
<p><b>Code in Sencha Touch 1.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.regModel('MyApp.model.StudentModel', {
   fields: [
      {name: 'name',  type: 'string'},
      {name: 'age',   type: 'int'}
   ]
});
</pre>
<p><b>Code in Sencha Touch 2.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.model.StudentModel', {
   extend: 'Ext.data.Model', config: {
      fields: [
         {name: 'name',  type: 'string'},
         {name: 'age',   type: 'int'}
      ]
   }
});
</pre>
<p>Ext.regModel is changed to Ext.define which extends Ext.data.Model.</p>
<p>All the fields come under config section now in 2.x version.</p>
<h3>View</h3>
<p><b>Code in Sencha Touch 1.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.Panel("studentView", {
   items: [{}]
});
</pre>
<p><b>Code in Sencha Touch 2.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.view.StudentView', {
   extend: 'Ext.tab.Panel',
   items: [{}]
});  
</pre>
<p>View is almost the same, the only change being the view name follows the 2.x version namespacing such as Myapp.view.StudentView and code is writing in Ext.define method as like model.</p>
<h3>Controller</h3>
<p><b>Code in Sencha Touch 1.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.regController("studentController", {
   someMethod: function() {
      alert('Method is called');
   }
});
</pre>
<p><b>Code in Sencha Touch 2.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.controller.studentController', {
   extend: 'Ext.app.Controller', someMethod: function() {
      alert('Method is called');
   }
});
</pre>
<p>Same as model in controller. Also the Ext.regController is changed into Ext.define, which extends Ext.app.Controller.</p>
<h3>Application</h3>
<p><b>Code in Sencha Touch 1.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.application({
   name: 'MyApp',
   launch: function() {
      Ext.create('MyApp.view.StudentView');
   }
});
</pre>
<p><b>Code in Sencha Touch 2.x</b> &minus;</p>
<pre class="prettyprint notranslate">
Ext.application({
   name: 'MyApp',
   models: ['studentModel'],
   controllers: ['studentController'],
   views: ['studentView'],
   stores: ['studentStore'],

   launch: function() {
      Ext.create('MyApp.view.Main');
   }
});
</pre>
<p>The major difference between version 1.x and version 2.x is, in 2.x we declare all model, views, controllers, and stores in the application itself.</p>
<h1>Sencha Touch - Core Concept</h1>
<p>Sencha Touch has various core concepts such as class system, ajax, controllers, etc.</p>
<p>Following table lists the link for core concepts of Sencha Touch.</p>
<table style="text-align:center" class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Concept &amp; Description Link</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/sencha_touch/sencha_touch_class_system.htm">Class System</a>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/sencha_touch/sencha_touch_components.htm">Components</a>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<a href="/sencha_touch/sencha_touch_controllers.htm">Controllers</a>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<a href="/sencha_touch/sencha_touch_bb_support.htm">BlackBerry support</a>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<a href="/sencha_touch/sencha_touch_ajax.htm">Use of Ajax</a>
</td>
</tr>
</table>
<h1>Sencha Touch - Data Package</h1>
<p>Data package in Sencha Touch is responsible for carrying out any kind of data manipulation either storing or loading the data.</p>
<p>Data packages are related to model, store, and proxies.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Concept &amp; Description Link</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Model</b></p>
<p>It is the collection of data and fields with which we display all the values on UI. 
<a href="/sencha_touch/sencha_touch_data_model.htm">Description</a></p></td>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Store</b></p>
<p>It is a collection of model instances which basically stores the data locally. In store we write all the events and rest calls to get data.
<a href="/sencha_touch/sencha_touch_data_store.htm">Description</a></p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Proxy</b></p>
<p>It is basically responsible for loading data in store. Mostly we use ajax proxy to load store data.
<a href="/sencha_touch/sencha_touch_data_proxy.htm">Description</a></p></td>
</tr>
</table>
<h1>Sencha Touch - Theme</h1>
<p>Sencha Touch provides a number of themes to be used in your applications. You can add different themes in place of classic theme and see the difference in the output based on the device we are using for the application. This is done simply by replacing the theme CSS file as explained in the following example.</p>
<h2>Desktop Theme</h2>
<p>Consider your very first Hello World application. The following CSS from the application is used for desktop theme.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css
</pre>
<p>To see the effect, try the following program &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/Yk7Xgl" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type="text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true,
                  items: [{
                     title: 'Home',
                     iconCls: 'home',
                     html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/desktop_theme.htm"></iframe>
<h2>Windows Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application &minus;</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css
</pre>
<p>Add the following CSS to use Windows theme.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/wp.css
</pre>
<p>To see the effect, try the following program &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/s4I0Ka" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/wp.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true,
                  items: [{
                     title: 'Home',
                     iconCls: 'home',
                     html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/windows_theme.htm"></iframe>
<h2>IOS Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css
</pre>
<p>Add the following CSS to use Windows theme</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/cupertino.css
</pre>
<p>To see the effect, try the following program &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/FCnau1" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/cupertino.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true,
                  items: [{
                     title: 'Home',
                     iconCls: 'home',
                     html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/ios_theme.htm"></iframe>
<h2>IOS Classic Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application &minus;</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css
</pre>
<p>Add the following CSS to use Windows theme &minus;</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/cupertino-classic.css
</pre>
<p>To see the effect, try the following program &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/ROa9bA" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/cupertino-classic.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true,
                  items: [{
                     title: 'Home',
                     iconCls: 'home',
                     html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/ios_classic_theme.htm"></iframe>
<h2>Android Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css
</pre>
<p>Add the following CSS to use Windows theme.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/mountainview.css
</pre>
<p>To see the effect, try the following program &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/hyrce6" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/mountainview.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true,
                  items: [{
                     title: 'Home',
                     iconCls: 'home',
                     html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/android_theme.htm"></iframe>
<h2>BlackBerry Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css
</pre>
<p>Add the following CSS to use Windows theme.</p>
<pre class="result notranslate">
https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/bb10.css
</pre>
<p>To see the effect, try the following program &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/GI6g7e" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/bb10.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               Ext.create("Ext.tab.Panel", {
                  fullscreen: true,
                  items: [{
                     title: 'Home',
                     iconCls: 'home',
                     html: 'Welcome to sencha touch'
                  }]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/bb_theme.htm"></iframe>
<h1>Sencha Touch - Device Profile</h1>
<p>In today's world of technologies, we have multiple devices such as mobile, tablet, desktop, and laptop with different screen sizes. Hence, there is a need to develop applications, which are accessible from all the devices with good look and feel. However, to develop different code for different devices is very time consuming and costly.</p>
<p>Sencha Touch helps us in this regard, by offering a device profile feature. Based on the active profile, the different dependencies will be run and applicable.</p>
<p>We can declare device profile while writing an application code. We can have multiple devices as &minus;</p>
<pre class="prettyprint notranslate">
Ext.application({
   name: 'MyApp',
   profiles: ['Phone', 'Tablet']
});
</pre>
<p>Once it is done, the profiles will be loaded as &minus;</p>
<ul class="list">
<li>MyApp.profiles.Phone.js</li>
<li>MyApp.profiles.Tablet.js</li>
</ul>
<h2>Writing a simple phone profile</h2>
<pre class="prettyprint notranslate">
Ext.define('Mail.profile.Phone', {
   extend: 'Ext.app.Profile',

   config: {
      name: 'Phone',
      views: ['phoneView']
   },

   isActive: function() {
      return Ext.os.is('Phone');
   }
});
</pre>
<h2>Writing a simple tablet profile</h2>
<pre class="prettyprint notranslate">
Ext.define('Mail.profile.Tablet', {
   extend: 'Ext.app.Profile',

   config: {
      name: 'Tablet',
      views: ['tableView']
   },

   isActive: function() {
      return Ext.os.is('Tablet');
   }
});
</pre>
<p>As we can see in profile, we have isActive function which determines if the particular device is active. If the device is active, the corresponding dependencies will be loaded and instantiated.</p>
<p>As mentioned in the above example, if we are using phone device then phone profile's isActive function will return true and the dependencies related to the phone device will be loaded; here phoneView will be loaded. If the device is a tablet then phone profile's isActive function will return false and tablet profile's isActive function will return true and dependency tabletView will be loaded.</p>
<h2>Launch Process</h2>
<p>One more point to be noticed here is when we have profiles in the application, then the loading and instantiation of application code will be in the following order &minus;</p>
<ul class="list">
<li>Controllers are instantiated first and each controller's init function will be loaded.</li>
<li>Profile's launch function will be called.</li>
<li>Application's launch function will be called.</li>
</ul>
<p>Both profile and application's launch functions are optional, so if we do not define any one of them they will not get called.</p> 
<p>Take a look at the following code to check where and how the different launch and init functions can be defined.</p>
<h2>Controller's init function</h2>
<pre class="prettyprint notranslate">
Ext.define('MyApp.controller.Main', {
   extend: 'Ext.app.Controller',
   
   init : function (){
      Ext.Msg.alert('Controller's init method');
   },
   
   config: {
      refs: {
         tab: '#divId
     }
   }
});
</pre>
<h2>Profile's launch function</h2>
<pre class="prettyprint notranslate">
Ext.define('Mail.profile.Tablet', {
   extend: 'Ext.app.Profile',

   config: {
      name: 'Tablet', views: ['tableView']
   },

   isActive: function() {
      return Ext.os.is('Tablet');
   }
   launch : function() {
      Ext.Msg.alert('profile's launch function');
   }
});
</pre>
<h2>Application's launch function</h2>
<pre class="prettyprint notranslate">
Ext.application({
   name: 'Sencha', launch: function() {
      Ext.Msg.alert(Application's launch function);
   }
});
</pre>
<h1>Sencha Touch - Dependencies</h1>
<p>There are certain ways defined in Sencha Touch to declare dependencies, one within the application and the other inside the classes.</p>
<p>Let’s take a look at the different ways to define dependencies.</p>
<h2>Application Level Dependencies</h2>
<p>Here, we declare all the dependencies when we create Ext.application.</p>
<pre class="prettyprint notranslate">
Ext.application({
   name: 'MyApp',
   views: ['StudentsView'],
   models: ['StudentsModel'],
   controllers: ['StudentsController'],
   stores: ['StudentsStore'],
   profiles: ['Phone', 'Tablet']
});
</pre>
<p>Now, when the application gets loaded, all the dependencies will be loaded at the same time. The path of the other files will be &minus;</p>
<ul class="list">
<li>MyApp.views.StudentsView</li>
<li>MyApp.models.StudentsModel</li>
<li>MyApp.stores.StudentsStore etc.</li>
</ul>
<p>The above way of declaration not only loads the file, it also decides which profile it should keep as active. After loading the controller, it makes sure to instantiate it. Once the stores are loaded, it instantiates them and provides one id if not already given.</p>
<h2>Profile-specific Dependencies</h2>
<p>When we are using profiles in an application, there may be possibilities that few functionalities are only required for some specific profile.</p>
<p>Profile specific dependencies are declared in the profiles itself instead of the application level declaration.</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.profile.Tablet', {
   extend: 'Ext.app.Profile', config: {
      views: ['StudentView'], controllers: ['StudentController'], models: ['StudentModel']
   }
});
</pre>
<p>Dependencies get loaded irrespective of the profile being active or not. However, based on the active profile, further processing such as instantiating controller and stores happens.</p>
<h2>Nested Dependencies</h2>
<p>When we have larger application we have multiple controllers, models, views, and stores.</p>
<p>It is always good to keep modularity in larger applications. For that, we can define subfolders and while declaring dependencies we can use subfolder name to declare.</p>
<pre class="prettyprint notranslate">
Ext.application({
   name: 'MyApp',
   controllers: ['Controller', 'nested.NewController'],
   views: ['class.Cview', 'SView']
});
</pre>
<p>In the above case, following files will be loaded &minus;</p>
<ul class="list">
<li>MyApp.controllers.Controller</li>
<li>MyApp.controllers.nested.NewController</li>
<li>MyApp.Views.Sview</li>
<li>MyApp.Views.class.Cview</li>
</ul>
<h2>External Dependencies</h2>
<p>We can specify the dependencies outside the application by giving fully qualified names of the classes as &minus;</p>
<pre class="prettyprint notranslate">
Ext.Loader.setPath({
   'Class': 'Class'
});

Ext.application({
   views: ['Class.view.LoginForm', 'Welcome'],
   controllers: ['Class.controller.Sessions', 'Main'],
   models: ['Class.model.User']
});
</pre>
<p>In the above case, following files will be loaded &minus;</p>
<ul class="list">
<li>Class/view/LoginForm.js</li>
<li>Class/controller/Sessions.js</li>
<li>Class/model/User.js</li>
<li>app/view/Welcome.js</li>
<li>app/controller/Main.js</li>
</ul>
<h1>Sencha Touch - Environment Detection</h1>
<p>It helps you in identifying which operating system you are using, which browser you are working on, and what are the features available for your environment.</p>
<p>Sencha Touch provides different functions to get information specific to the environment. All the methods mentioned below can be checked in, if the condition is  if(Ext.os.is.Windows){} and is based on the condition tasks can be performed.</p>
<p>All the following methods return Boolean value.</p>
<h2>Operating System</h2>
<p>Ext.os is a class that gives you different methods to know which operating system we are working on.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Ext.os.is.webOS</b></p>
<p>This function will return true if you are using webos operating system else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Ext.os.is.RIMTable</b></p>
<p>This function will return true if you are using RIMTable  operating system else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Ext.os.is.Linux</b></p>
<p>This function will return true if you are using Linux  operating system else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Ext.os.is.Windows</b></p>
<p>This function will return true if you are using windows operating system else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Ext.os.is.MacOs</b></p>
<p>This function will return true if you are using Mac operating system else it returns false.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Ext.os.is.BlackBerry</b></p>
<p>This function will return true if you are using BlackBerry operating system else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Ext.os.is.iOS</b></p>
<p>This function will return true if you are using IOS operating system else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Ext.os.is.Android</b></p>
<p>This function will return true if you are using Android operating system else it returns false.</p>
</td>
</tr>
</table>
<h2>Device Detection</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Ext.os.is.iPad</b></p>
<p>This function will return true if you are using iPad else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Ext.os.is.iPhone</b></p>
<p>This function will return true if you are using iPhone else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Ext.os.is.iPod</b></p>
<p>This function will return true if you are using iPod else it returns false.</p>
</td>
</tr>
</table>
<h2>Version of Operating System</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Ext.os.name</b></p>
<p>It returns the name of the operating system.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Ext.os.version.version</b></p>
<p>It gives the version of operating system we are using.</p>
</td>
</tr>
</table>
<h2>Browser Detection</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Ext.browser.is.IE</b></p>
<p>This function returns true if we are using Internet explorer browser else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Ext.browser.is.FF</b></p>
<p>This function returns true if we are using FireFox browser else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Ext.browser.is.Chrome</b></p>
<p>This function returns true if we are using Chrome browser else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Ext.browser.is.Opera</b></p>
This function returns true if we are using Opera browser else it returns false.
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Ext.browser.is.Safari</b></p>
<p>This function returns true if we are using Safari  browser else it returns false.</p>
</td>
</tr>
</table>
<p>This function Ext.browser provides various other functions &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Ext.browser.userAgent 
</b></p> 
<p>It returns the current userAgent.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td> 
<p><b>Ext.browser.isSecure</b></p>
<p>It returns true if the current page is using SSL.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Ext.browser.isStrict</b></p> 
<p>It returns true if the browser is in strict mode.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td> 
<p><b>Ext.browser.engineName 
</b></p>
<p>It returns the browser engine name (WebKit, Gecko, Presto, Trident and Other).</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td> 
<p><b>Ext.browser.engineVersion</b></p>
<p>It returns the version of the browser engine.</p>
</td>
</tr>
</table>
<h2>Features</h2>
<p>Ext.feature.has is to check if the browser has following feature or not.</p>
<table class="table table-bordered">
<tr>
<th>Sr.No</th>
<th>Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td> 
<p><b>Ext.feature.has.Audio</b></p>
<p>This method returns true if browser supports audio tag feature of html5.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td> 
<p><b>Ext.feature.has.Canvas
</b></p>
<p>This method returns true if browser supports canvas tag feature of html5.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td> 
<p><b>Ext.feature.has.classList
</b></p>
<p>This method returns true if browser supports classlist feature of html5 which is used to add, remove and toggle css classes for the html element.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td> 
<p><b>Ext.feature.has.Css3dTransforms
</b></p>
<p>This method returns true if browser supports Css 3d Transform feature of css3.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Ext.feature.has.CssAnimations</b></p>
<p>This method returns true if browser supports animations of css3.</p> 
</td>
</tr>
<tr>
<td class="ts">6</td>
<td> 
<p><b>Ext.feature.has.CssTransforms
</b></p>
<p>This method returns true if browser supports Css transform feature of css3.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td> 
<p><b>Ext.feature.has.CssTransitions</b></p>
<p>This method returns true if browser supports transition feature of css3.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Ext.feature.has.DeviceMotion</b></p>
<p>This method returns true if browser supports the device motion feature.</p> 
</td>
</tr>
<tr>
<td class="ts">9</td>
<td> 
<p><b>Ext.feature.has.Geolocation
</b></p>
<p>This method returns true if browser supports the Geolocation feature of html5.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>Ext.feature.has.History</b></p>
<p>This method returns true if browser Supports history feature of html.</p>
</td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>Ext.feature.has.Orientation</b></p>
<p>This method returns true if browser can detect which the device orientation.</p>
</td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>Ext.feature.has.OrientationChange
</b></p>
<p>This method returns true if browser can detect change in Orientation of the device.</p>
</td>
</tr>
<tr>
<td class="ts">13</td>
<td>
<p><b>Ext.feature.has.Range
</b></p>
<p>Range is a type of html input tag for range slider element so if browser supports slider this function returns true.</p>
</td>
</tr>
<tr>
<td class="ts">14</td>
<td>
<p><b>Ext.feature.has.SqlDatabase</b></p>
<p>Web sql database is a web page api for storing data n database on which we can perform query operations. This method returns true if browser supports web Sql Database.</p>
</td>
</tr>
<tr>
<td class="ts">15</td>
<td>
<p><b>Ext.feature.has.Svg</b></p>
<p>Svg stands for Scalable Vector Graphics this method returns true if browser supports html 5's svg feature.</p>
</td>
</tr>
<tr>
<td class="ts">16</td>
<td>
<p><b>Ext.feature.has.Touch</b></p>
<p>This method returns true if browser has Touch feature.</p>
</td>
</tr>
<tr>
<td class="ts">17</td>
<td><p><b>Ext.feature.has.Video</b></p>
<p>This method returns true if browser supports html 5  video tags.</p>
</td>
</tr>
<tr>
<td class="ts">18</td>
<td>
<p><b>Ext.feature.has.Vml</b></p>
<p>Vml stands for vector markup language which is an xml based markup language. So this method returns true if browser has supports vml.</p>
</td>
</tr>
<tr>
<td class="ts">19</td>
<td>
<p><b>Ext.feature.has.WebSockets</b></p>
<p>Web socket is basically a communication protocol for computers which supports two communication between clients and server.
This method returns true if browser Supports WebSockets else it returns false.</p>
</td>
</tr>
</table>
<h1>Sencha Touch - Events</h1>
<p>Events are something which get fired when something happens to the class. For example, when a button is getting clicked or before/after an element is rendered.</p>
<h2>Methods of Writing Events</h2>
<p>Following are the methods of writing events.</p>
<ul class="list">
<li>Built-in events using listeners.</li>
<li>Attaching events later</li>
<li>Custom events</li>
</ul>
<h3>Built-in Events Using Listeners</h3>
<p>Sencha Touch provides listener property for writing events and custom events in Sencha Touch files.</p>
<h3>Writing listener in Sencha Touch</h3>
<p>We will add the listener in the previous program itself by adding listen property to the panel, shown as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/hmmoCX" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha', launch: function() {
               Ext.create('Ext.Panel', {
                  html: 'My Panel', fullscreen: true, listeners: {
                     painted: function() {
                        Ext.Msg.alert('I was painted to the screen');
                     }
                  }
               });
            }
         });
      &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>This will  produce following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/event_listener.htm"></iframe>
<p>This way we can also write multiple events in listeners property.</p>
<h3>Multiple events in the same listener</h3>
<div class="demo-view">
<a href="http://tpcg.io/qX5oT3" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;   
         Ext.application({
            name: 'Sencha',
            launch: function() {
               var myButton = Ext.Viewport.add({
                  xtype: 'button',
                  centered: true,
                  text: 'Click me'
               });

               myButton.on({
                  tap: function() {
                     var randomWidth = 100 + Math.round(Math.random() * 200);
                     this.setWidth(randomWidth);
                  },
                  widthchange: function(button, newWidth, oldWidth) {
                     alert('My width changed from ' + oldWidth + ' to ' + newWidth);
                  }
               });
            }
         });       
      &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/events_with_multiple_listener.htm"></iframe>
<h2>Attaching event later</h2>
<p>In the previous method of writing events, we have written events in listeners at the time of creating elements.</p>
<p>The other way to attach events is as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/91WDE6" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               var myButton = Ext.Viewport.add({
                  xtype: 'button',
                  centered: true,
                  text: 'Click me'
               });
               
               myButton.on('tap', function() {
                  alert("Event listener attached by .on");
               });
            }
         });
      &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/attaching_events_later.htm"></iframe>
<h2>Custom events</h2>
<p>We can write custom events in Sencha Touch and fire the events with fireEvent method. Following example explains how to write custom events.</p>
<div class="demo-view">
<a href="http://tpcg.io/NaYahe" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.application({
            name: 'Sencha',
            launch: function() {
               var myButton = Ext.Viewport.add({
                  xtype: 'button',
                  centered: true,
                  text: "Just wait 5 seconds",

                  listeners: {
                     myEvent: function(button, points) {
                        alert('myEvent was fired! You score ' + points + ' points');
                     }
                  }
               });

               Ext.defer(function() {
                  var number = Math.ceil(Math.random() * 100);
                  myButton.fireEvent('myEvent', myButton, number);
               }, 5000);
            }
         });
      &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>Once the page is loaded and the document is ready, the UI page with button will appear and as we are firing an event after 5 seconds, once the document is ready the alert box will appear after 5 seconds.</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/attaching_events_later_using_fireEvent.htm"></iframe>
<p>Here we have written the custom event 'myEvent' and we are firing events as button.fireEvent(eventName);</p>
<h1>Sencha Touch - Layout</h1>
<p>Layout is the way the elements are arranged in a container. That could be horizontal, vertical, or any other. Sencha Touch has different layouts defined in its library though we can always write custom layouts as well.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Layout &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/sencha_touch/layout_hbox.htm">hBox</a>
<p>This layout allows the element to be distributed in a horizontal manner.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/sencha_touch/layout_vbox.htm">vBox</a>
<p>This layout allows the element to be distributed in a vertical manner. This is one of the commonly used layout.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<a href="/sencha_touch/layout_fit.htm">Fit</a>
<p>In this layout, the container is filled with a single panel and when there is no specific requirement related to the layout, then this layout is used.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<a href="/sencha_touch/layout_card.htm">Card(TabPanel)</a>
<p>This layout arranges different components in tab fashion. Tabs will be displayed on top of the container. Every time only one tab is visible and each tab is considered as a different component.</p>
</td>
</tr>
</table>
<h1>Sencha Touch - History Support</h1>
<p>Sencha Touch comes with full history support and deep linking facilities.</p>
<p>It has the simplest back button functionality, which helps the user navigate between the screens, without even refreshing the page or application.</p>
<p>It also provides routes functionality, which helps the user navigate to any URL. Based on the URL provided in the browser window, it calls specific functions to perform a specific task.</p>
<p>Look at the following example for back button functionality.</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/nested_list.htm"></iframe>
<p>This example shows the nested list which is nothing but a list inside a list, so when you click any of the list items, it opens another list and a back button appears on top of the screen.</p>
<p>For complete code base, you can check <a href = "/sencha_touch/view_nested_list.htm"> <i class="icon icon-arrow-circle-o-left big-font"></i> Nested List</a> under view component section.</p>
<h2>Routing</h2>
<p>Simplest example of routes</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.controller.Main', {
   extend: 'Ext.app.Controller',

   config: {
      routes: {
         login: 'showLogin',
		 'user/:id': 'userId'
      }
   },

   showLogin: function() {
      Ext.Msg.alert('This is the login page');
   },
   userId: function(id) {
      Ext.Msg.alert('This is the login page specific to the used Id provided');
   }
});
</pre>
<p>In the above example if browser URL is https://myApp.com/#login then the function showLogin will be called.</p>
<p>We can provide parameters in the URL and based on the specific parameter the function can get called. For example If the URL is https://myApp.com/#user/3 then the another function userId will be called and the specific ID can be used inside the functions.</p>
<h3>Advance routing</h3>
<p>Sometime we have advance parameters which includes comma, blank space and special characters etc. for this if we use the above way of writing routes then it will not work. To solve this problem Sencha touch provides conditional routing where we can specify condition of what type of data the parameter should accept.</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.controller.Main', {
   extend: 'Ext.app.Controller', config: {
      routes: {
         login/:id: {
            action: showLogin, conditions: {':id: "[0-9a-zA-Z\.]+" }      
         }
      },

      showLogin: function() {
         Ext.Msg.alert('This is the login page with specific id which matches criteria');
      }     
   }
});
</pre>
<p>So as in the above example we have given regex in the condition which clearly states what type of data should be allowed as URL parameter.</p>
<h3>Sharing same URL across different device profiles</h3>
<p>As Sencha touch provides device profile so the same application code can be used across multiple devices there may be possibilities that different profiles may have different functionality for the same URL.</p>
<p>To resolve this issue Sencha touch gives us freedom to write routing in the main controller and the called function to be written in the all the profile with their profile specific ones.</p>
<pre class="prettyprint notranslate">
Ext.define('MyApp.controller.Main', {
   extend: 'Ext.app.Controller', config: {
      routes: {
         login: 'showLogin'
      }
   },
});
// For phone profile
Ext.define('MyApp.controller.phone.Main, {
   extend: 'MyApp.controller.Main, showLogin: function() {
      Ext.Msg.alert('This is the login page for mobile phone profile');
   }
});
// For tablet profile
Ext.define('MyApp.controller.tablet.Main, {
   extend: 'MyApp.controller.Main,showLogin: function() {
      Ext.Msg.alert('This is the login page for tablet profile');
   }
});
</pre>
<p>As example shows we have one main controller which has showLogin function and we have two different profiles(Phone/ Tablet). Both the profile has showLogin function with different code specific to the profile.</p>
<p>This way we can share same URL across multiple profile devices with their specific functionalities.</p>
<h1>Sencha Touch - Upload &amp; Download</h1>
<p>Sencha Touch provides XHR2 configuration to work with Ajax and Ajax2 development.</p>
<p>XHR2 is xmlHttpRequest level 2, which used to request data from the server. For any web application, data resides at the server and once the page is loaded, the data should be accessed from the server with the help of Ajax requests.</p>
<p>XHR2 in Sencha Touch provides the progress bar feature, which shows the user the amount of data transferred for a particular request. XHR2 is newly added so we need to check if the browser supports it or not.</p>
<p>Following is the function to check whether the browser supports XHR2 &minus;</p>
<pre class="result notranslate">
if (Ext.feature.has.XHR2) {
   // Here we can write functionality to work if browser supports XHR2 
}  
</pre>
<p>We can even check if the progressive upload with XHR2 is supported by the browser or not.</p>
<pre class="result notranslate">
if (Ext.feature.has.XHRUploadProgress) {
   // Here we can write functionality to work if browser supports progressive uploads
}
</pre>
<p>Various new XHR2 features are included in Sencha Touch.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No</th>
<th style="text-align:center">Features &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>XHR2: true</b></p>
<p>This is used to enable and disable XHR2 functionality in the application.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Ext.field.File</b></p>
<p>New file field is added to give more cality about the type of field.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Ext.field.FileInput</b></p>
<p>This to provide FileInput.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Ext.progressIndicator</b></p>
<p>This is to provide exact percentage of data transferred in terms of progress bar.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>xtype: fileinput</b></p>
<p>To create instance of fileInput class.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>xtype: filefield</b></p>
<p>To create instance of file class.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>responseType : value</b></p>
<p>This parameter allows various types of responses as text, document, blob etc.</p>
</td>
</tr>
</table>
<p>Following are the examples to send simple ajax request with and without parameter and uploading files using ajax.</p>
<h3>Simple Ajax request without parameters - Success</h3>
<div class="demo-view">
<a href="http://tpcg.io/6AbzCu" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.setup({
            requires: [ 'Ext.Panel', 'Ext.Button', 'Ext.form.Panel'], onReady: function() {
               var request = {
                  url: 'https://www.tutorialspoint.com/sencha_touch/index.htm',
                  method: 'POST',
                  xhr2: true,
                  success: function(response) {
                     Ext.Msg.alert('Ajax call successful');
                  },
                  failure: function(response) {
                     Ext.Msg.alert('Ajax call failed');
                  }
               };
               Ext.Viewport.add({
                  xtype:"panel",
                  layout:"vbox",
                  fullscreen:true,
                  items: [
                     {
                        xtype:"button",
                        text: "Ajax",
                        ui: 'confirm',
                        handler: function(){
                           Ext.Ajax.request(request);
                        }
                     }
                  ]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/ajax_success.htm"></iframe>
<p>The above example shows the success ajax call as the URL mentioned is correct. In this example, we are not passing any parameter, it’s just a simple ajax request which hits the URL mentioned.</p>
<p>If you are using the chrome browser in the developer tool, navigate to the network section, you can see the request which is being sent and the response which we get.</p>
<h3>Simple Ajax request without parameters - Failure</h3>
<div class="demo-view">
<a href="http://tpcg.io/brdEDf" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.setup({
            requires: [
               'Ext.Panel',
               'Ext.Button',
               'Ext.form.Panel'
            ],
            onReady: function() {
               var request = {
                  url: 'https://www.tutorialspoint.com/sencha_touch/indexx.htm',
                  method: 'POST',
                  xhr2: true,
                  success: function(response) {
                     Ext.Msg.alert('Ajax call successful');
                  },
                  failure: function(response) {
                     Ext.Msg.alert('Ajax call failed');
                  }
               };
               Ext.Viewport.add({
                  xtype:"panel",
                  layout:"vbox",
                  fullscreen:true,
                  items: [
                     {
                        xtype:"button",
                        text: "Ajax",
                        ui: 'confirm',
                        handler: function(){
                           Ext.Ajax.request(request);
                        }
                     }
                  ]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/ajax_failure.htm"></iframe>
<p>In the above example, just to show how ajax failure works we have mentioned the wrong URL. Compare this and the previous example, you will find the difference.</p>
<h3>Sending parameters in Ajax request</h3>
<div class="demo-view">
<a href="http://tpcg.io/YeecsN" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.setup({
            requires: [
               'Ext.Panel',
               'Ext.Button',
               'Ext.form.Panel'
            ],

            onReady: function() {
               var formData = new FormData();
               formData.append("firstName", "Hi");
               formData.append("lastName", "Reader");

               // Request will be sent as part of the payload instead of standard post data
               var request = {
                  url: 'https://www.tutorialspoint.com/sencha_touch/sencha_json.php',
                  method: 'POST',
                  xhr2: true,
                  data: formData,
                  success: function(response) {
                     var out = Ext.getCmp("output");
                     response = Ext.JSON.decode(response.responseText, true);
                     Ext.Msg.alert(response.message);
                  },
                  failure: function(response) {
                     var out = Ext.getCmp("output");
                     Ext.Msg.alert('Ajax failed!');
                  }
               };

               Ext.Viewport.add({
                  xtype:"panel",
                  layout:"vbox",
                  fullscreen:true,
                  items: [
                     {
                        xtype:"button",
                        text: "Ajax",
                        ui: 'confirm',
                        handler: function(){
                           Ext.Ajax.request(request);
                        }
                     }
                  ]
               });
            }
         });      
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/ajax_with_parameter.htm"></iframe>
<p>In this example, we are passing parameters with the ajax using data property of ajax call.</p>
<h3>Uploading files using Ajax</h3>
<div class="demo-view">
<a href="http://tpcg.io/nAG0bU" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/resources/css/sencha-touch.css" rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" src = "https://cdn.sencha.com/touch/sencha-touch-2.4.2/sencha-touch-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.setup({
            requires: [
               'Ext.Panel',
               'Ext.MessageBox',
               'Ext.Button',
               'Ext.ProgressIndicator',
               'Ext.form.Panel',
               'Ext.field.FileInput'
            ],

            onReady: function() {
               var progressIndicator = Ext.create("Ext.ProgressIndicator", {
                  loadingText: "Uploading: {percent}%"
               });

               var request = {
                  url: 'https://www.tutorialspoint.com/sencha_touch/sencha_json.php',
                  method: 'POST',
                  xhr2: true,
                  progress:progressIndicator,
                  success: function(response) {
                     Ext.Msg.alert('File uploaded successfully.');
                  },
                  failure: function(response) {
                     Ext.Msg.alert('File upload failed.');
                  }
               };

               Ext.Viewport.add(progressIndicator);
               Ext.Viewport.add({
                  xtype:"panel",
                  layout:"vbox",
                  fullscreen:true,
                  items: [
                     {
                        xtype:"fileinput",
                        accept:"image/jpeg"
                     },
                     {
                        xtype:"button",
                        text: "Upload",
                        ui: 'confirm',
                        handler: function(){
                           var input = Ext.Viewport.down("fileinput").input;
                           var files = input.dom.files;
                           if (files.length) {
                              request.binaryData = files[0];
                              Ext.Ajax.request(request);
                           }else {
                              Ext.Msg.alert("Please Select a JPG");
                           }
                        }
                     }
                  ]
               });
            }
         });
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>It will produce the following result &minus;</p>
<iframe onLoad="resizeFrame(this)" class="result" src="/sencha_touch/src/ajax_upload.htm"></iframe>
<p>This example shows how to upload data using ajax call. In this example, we are using the progress bar indicator to show the progress while uploading the file.</p>
<h1>Sencha Touch - View Components</h1>
<p>Sencha Touch provides various UI components, which can be customized according to requirements. </p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.N0.</th>
<th style="text-align:center">Component &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/sencha_touch/view_carousel.htm">Carousel</a>
<p>This UI component is used to display Carousel.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/sencha_touch/view_list.htm">List</a>
<p>This UI component is used to display lists.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<a href="/sencha_touch/view_nested_list.htm">Nested List</a>
<p>This UI component is used to display nested list.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<a href="/sencha_touch/view_form.htm">Form</a>
<p>This UI component is used to display Forms.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<a href="/sencha_touch/view_chart.htm">Chart</a>
<p>This UI component is used to display different types of charts.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<a href="/sencha_touch/view_floating.htm">Floating Component</a>
<p>This UI component is used to display floating component.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<a href="/sencha_touch/view_tab_panel.htm">Tab Panel</a>
<p>This UI component is used to display Tab panel view.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<a href="/sencha_touch/view_navigation.htm">Navigation View</a>
<p>This UI component is used to display navigation view.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<a href="/sencha_touch/view_action_menu.htm">Action Menu</a>
<p>This UI component is used to display action menu bar.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<a href="/sencha_touch/data_view.htm">Data View</a>
<p>This UI component is used to display data view.</p>
</td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<a href="/sencha_touch/view_map.htm">Map</a>
<p>This UI component is used to display google map.</p>
</td>
</tr>
</table>
<h1>Sencha Touch - Packaging</h1>
<p>Sencha Touch comes with native packaging features.</p>
<p>Following are the links for native packaging concepts of Sencha Touch.</p>
<table style="text-align:center" class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Concept &amp; Description Link</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/sencha_touch/sencha_touch_native_ios.htm">Native iOS provisioning</a>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/sencha_touch/sencha_touch_native_apis.htm">Native APIs</a>
</td>
</tr>
</table>
<h1>Sencha Touch - Best Practice</h1>
<h2>Basic JavaScript best practice</h2>
<p>It is a good practice to keep all JavaScript-related code in a separate <b>js (external JS)</b> file, instead of writing it in the <b>&lt;script&gt;</b> tag under the head section or inline JavaScript in the document body.</p>
<p>Always perform a null check before the element is being used in further logic.</p>
<p>Always follow the naming convention, as it makes the code easy to understand by any other programmer.</p>
<p>To make the code easily understandable, it is always preferred to write comments for JS methods with clear logic behind what a function does.</p>
<h2>Best practice specific to Sencha Touch</h2>
<p>Use Sencha Touch recommended folder structure, which will be helpful during JS compression or minification.</p>
<p>It is highly recommended to use the listener (onclick/onblur, etc.) in the controller instead of writing it in the html page itself.</p>
<p>Do not create the store instance, when the store is being called from the view.</p>
<p>When we create an instance of a store, we should always destroy it, as it impacts the performance.</p>
<p>While using Sencha Touch, do not specify any other simple JavaScript file. Use all the functions from Ext classes (mentioned in controller or utils).</p>
<p>When the model mapping and the name are same, then do not specify mapping. Only name will solve the purpose.</p>
<p>Do not use unnecessary properties in view. Use only the property which is required and it value which is different from the default value.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/sencha_touch/sencha_touch_best_practice.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/sencha_touch/sencha_touch_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
