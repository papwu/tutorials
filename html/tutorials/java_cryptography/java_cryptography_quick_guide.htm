<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Java Cryptography - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Java Cryptography - Quick Guide - Cryptography is the art and science of making a cryptosystem that is capable of providing information security."/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/java_cryptography/java_cryptography_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#0d8ac7;
}
a.demo {
    background:#0d8ac7;
}
li.heading {
    background:#0d8ac7;
}
.course-box{background:#0d8ac7}
.home-intro-sub p{color:#0d8ac7}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/java_cryptography/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/java_cryptography/images/java-cryptography-mini-logo.jpg" alt="Java Cryptography Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Java Cryptography Tutorial</li>
<li><a href="/java_cryptography/index.htm">Java Cryptography - Home</a></li>
<li><a href="/java_cryptography/java_cryptography_introduction.htm">Java Cryptography - Introduction</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Message Digest and MAC</li>
<li><a href="/java_cryptography/java_cryptography_message_digest.htm">Java Cryptography - Message Digest</a></li>
<li><a href="/java_cryptography/java_cryptography_creating_mac.htm">Java Cryptography - Creating a MAC</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Keys and Key Store</li>
<li><a href="/java_cryptography/java_cryptography_keys.htm">Java Cryptography - Keys</a></li>
<li><a href="/java_cryptography/java_cryptography_storing_keys.htm">Java Cryptography - Storing keys</a></li>
<li><a href="/java_cryptography/java_cryptography_retrieving_keys.htm">Java Cryptography - Retrieving keys</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Generating Keys</li>
<li><a href="/java_cryptography/java_cryptography_keygenerator.htm">KeyGenerator</a></li>
<li><a href="/java_cryptography/java_cryptography_keypairgenerator.htm">KeyPairGenerator</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Digital Signature</li>
<li><a href="/java_cryptography/java_cryptography_creating_signature.htm">Creating Signature</a></li>
<li><a href="/java_cryptography/java_cryptography_verifying_signature.htm">Verifying Signature</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Cipher Text</li>
<li><a href="/java_cryptography/java_cryptography_encrypting_data.htm">Java Cryptography - Encrypting Data</a></li>
<li><a href="/java_cryptography/java_cryptography_decrypting_data.htm">Java Cryptography - Decrypting Data</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Java Cryptography Resources</li>
<li><a href="/java_cryptography/java_cryptography_quick_guide.htm">Java Cryptography - Quick Guide</a></li>
<li><a href="/java_cryptography/java_cryptography_useful_resources.htm">Java Cryptography - Resources</a></li>
<li><a href="/java_cryptography/java_cryptography_discussion.htm">Java Cryptography - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Java Cryptography - Quick Guide</h1>
<hr />
<!-- /60931893/tutorial_top -->
<div id='div-gpt-ad-1532153686945-4' class='topgooglead'>
<script>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1532153686945-4'); });
</script>
</div>
<div class="clearer"></div>
<h1>Java Cryptography - Introduction</h1>
<p>Cryptography is the art and science of making a cryptosystem that is capable of providing information security.</p>
<p>Cryptography deals with the actual securing of digital data. It refers to the design of mechanisms based on mathematical algorithms that provide fundamental information security services. You can think of cryptography as the establishment of a large toolkit containing different techniques in security applications.</p>
<h2>What is Cryptanalysis?</h2>
<p>The art and science of breaking the cipher text is known as cryptanalysis.</p>
<p>Cryptanalysis is the sister branch of cryptography and they both co-exist. The cryptographic process results in the cipher text for transmission or storage. It involves the study of cryptographic mechanism with the intention to break them. Cryptanalysis is also used during the design of the new cryptographic techniques to test their security strengths.</p>
<h2>Cryptography Primitives</h2>
<p>Cryptography primitives are nothing but the tools and techniques in Cryptography that can be selectively used to provide a set of desired security services &minus;</p>
<ul class="list">
<li>Encryption</li>
<li>Hash functions</li>
<li>Message Authentication codes (MAC)</li>
<li>Digital Signatures</li>
</ul>
<h2>Cryptography in Java</h2>
<p>The Java Cryptography Architecture (JCA) is a set of API’s to implement concepts of modern cryptography such as digital signatures, message digests, certificates, encryption, key generation and management, and secure random number generation etc.</p>
<p>Using JCA developers can build their applications integrating security in them.</p>
<p>To integrate security in your applications rather than depending on the complicated security algorithms you can easily call the respective API’s provided in JCA for required services.</p>
<h1>Java Cryptography - Message Digest</h1>
<p>Hash functions are extremely useful and appear in almost all information security applications.</p>
<p>A hash function is a mathematical function that converts a numerical input value into another compressed numerical value. The input to the hash function is of arbitrary length but output is always of fixed length.</p>
<p>Values returned by a hash function are called <b>message digest</b> or simply <b>hash values</b>. The following picture illustrated hash function.</p>
<img src="/java_cryptography/images/message_digest.jpg" alt="Message Digest" />
<p>Java provides a class named <b>MessageDigest</b> which belongs to the package java.security. This class supports algorithms such as SHA-1, SHA 256, MD5 algorithms to convert an arbitrary length message to a message digest.</p>
<p>To convert a given message to a message digest, follow the steps given below &minus;</p>
<h2>Step 1: Create a MessageDigest object</h2>
<p>The MessageDigest class provides a method named <b>getInstance()</b>. This method accepts a String variable specifying the name of the algorithm to be used and returns a MessageDigest object implementing the specified algorithm.</p>
<p>Create MessageDigest object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
MessageDigest md = MessageDigest.getInstance("SHA-256");
</pre>
<h2>Step 2: Pass data to the created MessageDigest object</h2>
<p>After creating the message digest object, you need to pass the message/data to it. You can do so using the <b>update()</b> method of the <b>MessageDigest</b> class, this method accepts a byte array representing the message and adds/passes it to the above created MessageDigest object.</p>
<pre class="result notranslate">
md.update(msg.getBytes());
</pre>
<h2>Step 3: Generate the message digest</h2>
<p>You can generate the message digest using the <b>digest()</b> method od the MessageDigest class this method computes the hash function on the current object and returns the message digest in the form of byte array.</p>
<p>Generate the message digest using the digest method.</p>
<pre class="result notranslate">
byte[] digest = md.digest();
</pre>
<h3>Example</h3>
<p>Following is an example which reads data from a file and generate a message digest and prints it.</p>
<div class="demo-view">
<a href="http://tpcg.io/IACAaX" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
import java.security.MessageDigest;
import java.util.Scanner;

public class MessageDigestExample {
   public static void main(String args[]) throws Exception{
      //Reading data from user
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter the message");
      String message = sc.nextLine();
	  
      //Creating the MessageDigest object  
      MessageDigest md = MessageDigest.getInstance("SHA-256");

      //Passing data to the created MessageDigest Object
      md.update(message.getBytes());
      
      //Compute the message digest
      byte[] digest = md.digest();      
      System.out.println(digest);  
     
      //Converting the byte array in to HexString format
      StringBuffer hexString = new StringBuffer();
      
      for (int i = 0;i&lt;digest.length;i++) {
         hexString.append(Integer.toHexString(0xFF &amp; digest[i]));
      }
      System.out.println("Hex format : " + hexString.toString());     
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result notranslate">
Enter the message
Hello how are you
[B@55f96302
Hex format: 2953d33828c395aebe8225236ba4e23fa75e6f13bd881b9056a3295cbd64d3
</pre>
<h1>Java Cryptography - Creating a MAC</h1>
<p>MAC (<b>M</b>essage <b>A</b>uthentication <b>C</b>ode) algorithm is a symmetric key cryptographic technique to provide message authentication. For establishing MAC process, the sender and receiver share a symmetric key K.</p>
<p>Essentially, a MAC is an encrypted checksum generated on the underlying message that is sent along with a message to ensure message authentication.</p>
<p>The process of using MAC for authentication is depicted in the following illustration &minus;</p>
<img src="/java_cryptography/images/creating_mac.jpg" alt="Creating MAC" />
<p>In Java the <b>Mac</b> class of the <b>javax.crypto</b> package provides the functionality of message authentication code. Follow the steps given below to create message authentication code using this class.</p>
<h2>Step 1: Create a KeyGenerator object</h2>
<p>The <b>KeyGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a <b>KeyGenerator</b> object that generates secret keys.</p>
<p>Create <b>KeyGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating a KeyGenerator object
KeyGenerator keyGen = KeyGenerator.getInstance("DES");
</pre>
<h2>Step 2: Create SecureRandom object</h2>
<p>The <b>SecureRandom</b> class of the <b>java.Security</b> package provides a strong random number generator which is used to generate random numbers in Java. Instantiate this class as shown below.</p>
<pre class="result notranslate">
//Creating a SecureRandom object
SecureRandom secRandom = new SecureRandom();
</pre>
<h2>Step 3: Initialize the KeyGenerator</h2>
<p>The <b>KeyGenerator</b> class provides a method named <b>init()</b> this method accepts the <b>SecureRandom</b> object and initializes the current <b>KeyGenerator</b>.</p>
<p>Initialize the KeyGenerator object created in the previous step using this method.</p>
<pre class="result notranslate">
//Initializing the KeyGenerator
keyGen.init(secRandom);
</pre>
<h2>Step 4: Generate key</h2>
<p>Generate key using <b>generateKey()</b> method of the <b>KeyGenerator</b> class as shown below.</p>
<pre class="result notranslate">
//Creating/Generating a key
Key key = keyGen.generateKey();
</pre>
<h2>Step 5: Initialize the Mac object</h2>
<p>The <b>init()</b> method of the Mac class accepts an Key object and initializes the current Mac object using the given key.</p>
<pre class="result notranslate">
//Initializing the Mac object
mac.init(key);
</pre>
<h2>Step 6: Finish the mac operation</h2>
<p>The <b>doFinal()</b> method of the Mac class is used to finish the Mac operation. Pass the required data in the form of byte array to this method and finsh the operation as shown below.</p>
<pre class="result notranslate">
//Computing the Mac
String msg = new String("Hi how are you");
byte[] bytes = msg.getBytes();
byte[] macResult = mac.doFinal(bytes);
</pre>
<h3>Example</h3>
<p>The following example demonstrates the generation of Message Authentication Code (MAC) using JCA. Here, we take a simple message "Hi how are you" and, generate a Mac for that message.</p>
<div class="demo-view">
<a href="http://tpcg.io/lTFveo" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
import java.security.Key;
import java.security.SecureRandom;

import javax.crypto.KeyGenerator;
import javax.crypto.Mac;

public class MacSample {
   public static void main(String args[]) throws Exception{
      //Creating a KeyGenerator object
      KeyGenerator keyGen = KeyGenerator.getInstance("DES");

      //Creating a SecureRandom object
      SecureRandom secRandom = new SecureRandom();

      //Initializing the KeyGenerator
      keyGen.init(secRandom);

      //Creating/Generating a key
      Key key = keyGen.generateKey();	 

      //Creating a Mac object
      Mac mac = Mac.getInstance("HmacSHA256");

      //Initializing the Mac object
      mac.init(key);

      //Computing the Mac
      String msg = new String("Hi how are you");
      byte[] bytes = msg.getBytes();      
      byte[] macResult = mac.doFinal(bytes);

      System.out.println("Mac result:");
      System.out.println(new String(macResult));     
   }
}
</pre>
<h3>Output</h3>
<p>The above program will generate the following output &minus;</p>
<pre class="result notranslate">
Mac result:
HÖ„^ÇƒÎ_Utbh…?š_üzØSSÜh_ž_œa0ŽV?
</pre>
<h1>Java Cryptography - Keys</h1>
<p>A cryptosystem is an implementation of cryptographic techniques and their accompanying infrastructure to provide information security services. A cryptosystem is also referred to as a <b>cipher system</b>.</p>
<p>The various components of a basic cryptosystem are <b>Plaintext, Encryption Algorithm, Ciphertext, Decryption Algorithm,</b> Encryption Key and, Decryption Key.</p>
<p>Where,</p>
<ul class="list">
<li><p><b>Encryption Key</b> is a value that is known to the sender. The sender inputs the encryption key into the encryption algorithm along with the plaintext in order to compute the cipher text.</p></li>
<li><p><b>Decryption Key</b> is a value that is known to the receiver. The decryption key is related to the encryption key, but is not always identical to it. The receiver inputs the decryption key into the decryption algorithm along with the cipher text in order to compute the plaintext.</p></li>
</ul>
<p>Fundamentally there are two types of keys/cryptosystems based on the type of encryption-decryption algorithms.</p>
<h2>Symmetric Key Encryption</h2>
<p>The encryption process where <b>same keys are used for encrypting and decrypting</b> the information is known as Symmetric Key Encryption.</p>
<p>The study of symmetric cryptosystems is referred to as <b>symmetric cryptography</b>. Symmetric cryptosystems are also sometimes referred to as <b>secret key cryptosystems</b>.</p>
<p>Following are a few common examples of symmetric key encryption &minus;</p>
<ul class="list">
<li>Digital Encryption Standard (DES)</li>
<li>Triple-DES (3DES)</li>
<li>IDEA</li>
<li>BLOWFISH</li>
</ul>
<h2>Asymmetric Key Encryption</h2>
<p>The encryption process where <b>different keys are used for encrypting and decrypting the information</b> is known as Asymmetric Key Encryption. Though the keys are different, they are mathematically related and hence, retrieving the plaintext by decrypting cipher text is feasible.</p>
<h1>Java Cryptography - Storing keys</h1>
<p>The Keys and certificates used/generated are stored in a data base called as keystore. By default this database is stored in a file named <b>.keystore</b>.</p>
<p>You can access the contents of this database using the <b>KeyStore</b> class of the <b>java.security</b> package. This manages three different entries namely, PrivateKeyEntry, SecretKeyEntry, TrustedCertificateEntry.</p>
<ul class="list">
<li>PrivateKeyEntry</li>
<li>SecretKeyEntry</li>
<li>TrustedCertificateEntry</li>
</ul>
<h2>Storing a Key in keystore</h2>
<p>In this section, we will learn how to store a key in a keystore. To store a key in the keystore, follow the steps given below.</p>
<h3>Step 1: Create a KeyStore object</h3>
<p>The <b>getInstance()</b> method of the <b>KeyStore</b> class of the <b>java.security</b> package accepts a string value representing the type of the keystore and returns a KeyStore object.</p>
<p>Create an object of the KeyStore class using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating the KeyStore object
KeyStore keyStore = KeyStore.getInstance("JCEKS");
</pre>
<h3>Step 2: Load the KeyStore object</h3>
<p>The <b>load()</b> method of the KeyStore class accepts a FileInputStream object representing the keystore file and a String parameter specifying the password of the KeyStore.</p>
<p>In general, the KeyStore is stored in the file named <b>cacerts</b>, in the location <b>C:/Program Files/Java/jre1.8.0_101/lib/security/</b> and its default password is <b>changeit</b>, load it using the <b>load()</b> method as shown below.</p>
<pre class="result notranslate">
//Loading the KeyStore object
char[] password = "changeit".toCharArray();
String path = "C:/Program Files/Java/jre1.8.0_101/lib/security/cacerts";
java.io.FileInputStream fis = new FileInputStream(path);
keyStore.load(fis, password);
</pre>
<h3>Step 3: Create the KeyStore.ProtectionParameter object</h3>
<p>Instantiate the KeyStore.ProtectionParameter as shown below.</p>
<pre class="result notranslate">
//Creating the KeyStore.ProtectionParameter object
KeyStore.ProtectionParameter protectionParam = new KeyStore.PasswordProtection(password);
</pre>
<h3>Step 4: Create a SecretKey object</h3>
<p>Create the <b>SecretKey</b> (interface) object by instantiating its Sub class <b>SecretKeySpec</b>. While instantiating you need to pass password and algorithm as parameters to its constructor as shown below.</p>
<pre class="result notranslate">
//Creating SecretKey object
SecretKey mySecretKey = new SecretKeySpec(new String(keyPassword).getBytes(), "DSA");
</pre>
<h3>Step 5: Create a SecretKeyEntry object</h3>
<p>Create an object of the <b>SecretKeyEntry</b> class by passing the <b>SecretKey</b> object created in the above step as shown below.</p>
<pre class="result notranslate">
//Creating SecretKeyEntry object
KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(mySecretKey);
</pre>
<h3>Step 6: Set an entry to the KeyStore</h3>
<p>The <b>setEntry()</b> method of the <b>KeyStore</b> class accepts a String parameter representing the keystore entry alias, a <b>SecretKeyEntry</b> object, a ProtectionParameter object and, stores the entry under the given alias.</p>
<p>Set the entry to the keystore using the <b>setEntry()</b> method as shown below.</p>
<pre class="result notranslate">
//Set the entry to the keystore
keyStore.setEntry("secretKeyAlias", secretKeyEntry, protectionParam);
</pre>
<p><b>Example</b></p>
<p>The following example stores keys into the keystore existing in the “cacerts” file (windows 10 operating system).</p>
<pre class="prettyprint notranslate">
import java.io.FileInputStream;
import java.security.KeyStore;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class StoringIntoKeyStore{
   public static void main(String args[]) throws Exception {
      //Creating the KeyStore object
      KeyStore keyStore = KeyStore.getInstance("JCEKS");

      //Loading the KeyStore object
      char[] password = "changeit".toCharArray();
      String path = "C:/Program Files/Java/jre1.8.0_101/lib/security/cacerts";
      java.io.FileInputStream fis = new FileInputStream(path);
      keyStore.load(fis, password);
      
      //Creating the KeyStore.ProtectionParameter object
      KeyStore.ProtectionParameter protectionParam = new KeyStore.PasswordProtection(password);

      //Creating SecretKey object
      SecretKey mySecretKey = new SecretKeySpec("myPassword".getBytes(), "DSA");
      
      //Creating SecretKeyEntry object
      KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(mySecretKey);
      keyStore.setEntry("secretKeyAlias", secretKeyEntry, protectionParam);

      //Storing the KeyStore object
      java.io.FileOutputStream fos = null;
      fos = new java.io.FileOutputStream("newKeyStoreName");
      keyStore.store(fos, password);
      System.out.println("data stored");
   }
}
</pre>
<p><b>Output</b></p>
<p>The above program generates the following output &minus;</p>
<pre class="result notranslate">
System.out.println("data stored");
</pre>
<h1>Java Cryptography - Retrieving keys</h1>
<p>In this chapter, we will learn how to retrieve a key from the keystore using Java Cryptography.</p>
<p>To retrieve a key from the keystore, follow the steps given below.</p>
<h2>Step 1: Create a KeyStore object</h2>
<p>The <b>getInstance()</b> method of the <b>KeyStore</b> class of the <b>java.security</b> package accepts a string value representing the type of the keystore and returns a KeyStore object.</p>
<p>Create an object of the KeyStore class using this method as shown below.</p>
<pre class="result notranslate">
//Creating the KeyStore object
KeyStore keyStore = KeyStore.getInstance("JCEKS");
</pre>
<h2>Step 2: Load the KeyStore object</h2>
<p>The <b>load()</b> method of the KeyStore class accepts a <b>FileInputStream</b> object representing the keystore file and a String parameter specifying the password of the KeyStore.</p>
<p>In general, the KeyStore is stored in the file named <b>cacerts</b>, in the location <b>C:/Program Files/Java/jre1.8.0_101/lib/security/</b> and its default password is <b>changeit</b>, load it using the <b>load()</b> method as shown below.</p>
<pre class="result notranslate">
//Loading the KeyStore object
char[] password = "changeit".toCharArray();
String path = "C:/Program Files/Java/jre1.8.0_101/lib/security/cacerts";
java.io.FileInputStream fis = new FileInputStream(path);
keyStore.load(fis, password);
</pre>
<h2>Step 3: Create the KeyStore.ProtectionParameter object</h2>
<p>Instantiate the KeyStore.ProtectionParameter as shown below.</p>
<pre class="result notranslate">
//Creating the KeyStore.ProtectionParameter object
KeyStore.ProtectionParameter protectionParam = new KeyStore.PasswordProtection(password);
</pre>
<h2>Step 4: Create a SecretKey object</h2>
<p>Create the <b>SecretKey</b> (interface) object by instantiating its Sub class <b>SecretKeySpec</b>. While instantiating you need to pass password and algorithm as parameters to its constructor as shown below.</p>
<pre class="result notranslate">
//Creating SecretKey object
SecretKey mySecretKey = new SecretKeySpec(new String(keyPassword).getBytes(), "DSA");
</pre>
<h2>Step 5: Create a SecretKeyEntry object</h2>
<p>Create an object of the <b>SecretKeyEntry</b> class by passing the <b>SecretKey</b> object created in the above step as shown below.</p>
<pre class="result notranslate">
//Creating SecretKeyEntry object
KeyStore.SecretKeyEntry secretKeyEntry = new KeyStore.SecretKeyEntry(mySecretKey);
</pre>
<h2>Step 6: set an entry to the KeyStore</h2>
<p>The <b>setEntry()</b> method of the <b>KeyStore</b> class accepts a String parameter representing the keystore entry alias, a <b>SecretKeyEntry</b> object, a ProtectionParameter object and, stores the entry under the given alias.</p>
<p>Set the entry to the keystore using the <b>setEntry()</b> method as shown below.</p>
<pre class="result notranslate">
//Set the entry to the keystore
keyStore.setEntry("secretKeyAlias", secretKeyEntry, protectionParam);
</pre>
<h2>Step 7: Create the KeyStore.SecretKeyEntry object</h2>
<p>The <b>getEntry()</b> method of the KeyStore class accepts an alias (String parameter) and, an object of the ProtectionParameter class as parameters and returns a <b>KeyStoreEntry</b> object then you can cast this it into <b>KeyStore.SecretKeyEntry</b> object.</p>
<p>Create an object of the KeyStore.SecretKeyEntry class by passing the alias for required key and the protection parameter object created in the previous steps, to the <b>getEntry()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating the KeyStore.SecretKeyEntry object
KeyStore.SecretKeyEntry secretKeyEnt = (KeyStore.SecretKeyEntry)keyStore.getEntry("secretKeyAlias", protectionParam);
</pre>
<h2>Step 8: Create the key object of the retrieved entry</h2>
<p>The <b>getSecretKey()</b> method of the <b>SecretKeyEntry</b> class returns a SecretKey object. Using this method create a SecretKey object as shown below.</p>
<pre class="result notranslate">
//Creating SecretKey object
SecretKey mysecretKey = secretKeyEnt.getSecretKey();      
System.out.println(mysecretKey);
</pre>
<h3>Example</h3>
<p>Following example shows how to retrieve keys from a key store. Here, we store a key in a keystore, which is in the “cacerts” file (windows 10 operating system), retrieve it, and display some of the properties of it such as the algorithm used to generate the key and, the format of the retrieved key.</p>
<pre class="prettyprint notranslate">
import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.KeyStore.ProtectionParameter;
import java.security.KeyStore.SecretKeyEntry;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class RetrievingFromKeyStore{
   public static void main(String args[]) throws Exception{
      //Creating the KeyStore object
      KeyStore keyStore = KeyStore.getInstance("JCEKS");

      //Loading the the KeyStore object
      char[] password = "changeit".toCharArray();
      java.io.FileInputStream fis = new FileInputStream(
         "C:/Program Files/Java/jre1.8.0_101/lib/security/cacerts");
      
      keyStore.load(fis, password);
      
      //Creating the KeyStore.ProtectionParameter object
      ProtectionParameter protectionParam = new KeyStore.PasswordProtection(password);

      //Creating SecretKey object
      SecretKey mySecretKey = new SecretKeySpec("myPassword".getBytes(), "DSA");
      
      //Creating SecretKeyEntry object
      SecretKeyEntry secretKeyEntry = new SecretKeyEntry(mySecretKey);
      keyStore.setEntry("secretKeyAlias", secretKeyEntry, protectionParam);

      //Storing the KeyStore object
      java.io.FileOutputStream fos = null;
      fos = new java.io.FileOutputStream("newKeyStoreName");
      keyStore.store(fos, password);
      
      //Creating the KeyStore.SecretKeyEntry object
      SecretKeyEntry secretKeyEnt = (SecretKeyEntry)keyStore.getEntry("secretKeyAlias", protectionParam);

      //Creating SecretKey object
      SecretKey mysecretKey = secretKeyEnt.getSecretKey();      
      System.out.println("Algorithm used to generate key : "+mysecretKey.getAlgorithm());   
      System.out.println("Format used for the key: "+mysecretKey.getFormat());
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result notranslate">
Algorithm used to generate key: DSA
Format of the key: RAW
</pre>
<h1>Java Cryptography - KeyGenerator</h1>
<p>Java provides <b>KeyGenerator</b> class this class is used to generate secret keys and objects of this class are reusable.</p>
<p>To generate keys using the KeyGenerator class follow the steps given below.</p>
<h2>Step 1: Create a KeyGenerator object</h2>
<p>The <b>KeyGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a KeyGenerator object that generates secret keys.</p>
<p>Create <b>KeyGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating a KeyGenerator object
KeyGenerator keyGen = KeyGenerator.getInstance("DES");
</pre>
<h2>Step 2: Create SecureRandom object</h2>
<p>The <b>SecureRandom</b> class of the <b>java.Security</b> package provides a strong random number generator which is used to generate random numbers in Java. Instantiate this class as shown below.</p>
<pre class="result notranslate">
//Creating a SecureRandom object
SecureRandom secRandom = new SecureRandom();
</pre>
<h2>Step 3: Initialize the KeyGenerator</h2>
<p>The <b>KeyGenerator</b> class provides a method named <b>init()</b> this method accepts the SecureRandom object and initializes the current <b>KeyGenerator</b>.</p>
<p>Initialize the KeyGenerator object created in the previous step using the <b>init()</b> method.</p>
<pre class="result notranslate">
//Initializing the KeyGenerator
keyGen.init(secRandom);
</pre>
<h3>Example</h3>
<p>Following example demonstrates the key generation of the secret key using the KeyGenerator class of the <b>javax.crypto</b> package.</p>
<pre class="prettyprint notranslate">
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;

import java.security.Key;
import java.security.SecureRandom;

public class KeyGeneratorExample {
   public static void main(String args[]) throws Exception{
      //Creating a KeyGenerator object
      KeyGenerator keyGen = KeyGenerator.getInstance("DES");
      
      //Creating a SecureRandom object
      SecureRandom secRandom = new SecureRandom();
      
      //Initializing the KeyGenerator
      keyGen.init(secRandom);
      
      //Creating/Generating a key
      Key key = keyGen.generateKey();
      
      System.out.println(key);      
      Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");      
      cipher.init(cipher.ENCRYPT_MODE, key);      

      String msg = new String("Hi how are you");
      byte[] bytes = cipher.doFinal(msg.getBytes());      
      System.out.println(bytes);      
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result notranslate">
com.sun.crypto.provider.DESKey@18629
[B@2ac1fdc4
</pre>
<h1>Java Cryptography - KeyPairGenerator</h1>
<p>Java provides the <b>KeyPairGenerator</b> class. This class is used to generate pairs of public and private keys. To generate keys using the <b>KeyPairGenerator</b> class, follow the steps given below.</p>
<h2>Step 1: Create a KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a KeyPairGenerator object that generates keys.</p>
<p>Create <b>KeyPairGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating KeyPair generator object
KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
</pre>
<h2>Step 2: Initialize the KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides a method named <b>initialize()</b> this method is used to initialize the key pair generator. This method accepts an integer value representing the key size.</p>
<p>Initialize the KeyPairGenerator object created in the previous step using this method as shown below.</p>
<pre class="result notranslate">
//Initializing the KeyPairGenerator
keyPairGen.initialize(2048);
</pre>
<h2>Step 3: Generate the KeyPairGenerator</h2>
<p>You can generate the <b>KeyPair</b> using the <b>generateKeyPair()</b> method of the <b>KeyPairGenerator</b> class. Generate the key pair using this method as shown below.</p>
<pre class="result notranslate">
//Generate the pair of keys
KeyPair pair = keyPairGen.generateKeyPair();
</pre>
<h2>Step 4: Get the private key/public key</h2>
<p>You can get the private key from the generated KeyPair object using the <b>getPrivate()</b> method as shown below.</p>
<pre class="result notranslate">
//Getting the private key from the key pair
PrivateKey privKey = pair.getPrivate();
</pre>
<p>You can get the public key from the generated KeyPair object using the <b>getPublic()</b> method as shown below.</p>
<pre class="result notranslate">
//Getting the public key from the key pair
PublicKey publicKey = pair.getPublic();
</pre>
<h3>Example</h3>
<p>Following example demonstrates the key generation of the secret key using the KeyPairGenerator class of the <b>javax.crypto</b> package.</p>
<div class="demo-view">
<a href="http://tpcg.io/1PZdgD" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;

public class KeyPairGenertor {
   public static void main(String args[]) throws Exception{
      //Creating KeyPair generator object
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
      
      //Initializing the KeyPairGenerator
      keyPairGen.initialize(2048);
      
      //Generating the pair of keys
      KeyPair pair = keyPairGen.generateKeyPair();
      
      //Getting the private key from the key pair
      PrivateKey privKey = pair.getPrivate();   
      
      //Getting the public key from the key pair
      PublicKey publicKey = pair.getPublic(); 
      System.out.println("Keys generated");
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result notranslate">
Keys generated
</pre>
<h1>Java Cryptography - Creating Signature</h1>
<p>Digital signatures allow us to verify the author, date and time of signatures, authenticate the message contents. It also includes authentication function for additional capabilities.</p>
<img src="/java_cryptography/images/creating_signature.jpg" alt="Creating Signature" />
<h2>Advantages of digital signature</h2>
<p>In this section, we will learn about the different reasons that call for the use of digital signature. There are several reasons to implement digital signatures to communications &minus;</p>
<h3>Authentication</h3>
<p>Digital signatures help to authenticate the sources of messages. For example, if a bank’s branch office sends a message to central office, requesting for change in balance of an account. If the central office could not authenticate that message is sent from an authorized source, acting of such request could be a grave mistake.</p>
<h3>Integrity</h3>
<p>Once the message is signed, any change in the message would invalidate the signature.</p>
<h3>Non-repudiation</h3>
<p>By this property, any entity that has signed some information cannot at a later time deny having signed it.</p>
<h2>Creating the digital signature</h2>
<p>Let us now learn how to create a digital signature. You can create digital signature using Java following the steps given below.</p>
<h3>Step 1: Create a KeyPairGenerator object</h3>
<p>The <b>KeyPairGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a KeyPairGenerator object that generates keys.</p>
<p>Create <b>KeyPairGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating KeyPair generator object
KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
</pre>
<h3>Step 2: Initialize the KeyPairGenerator object</h3>
<p>The <b>KeyPairGenerator</b> class provides a method named <b>initialize()</b> this method is used to initialize the key pair generator. This method accepts an integer value representing the key size.</p>
<p>Initialize the KeyPairGenerator object created in the previous step using the <b>initialize()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing the KeyPairGenerator
keyPairGen.initialize(2048);
</pre>
<h3>Step 3: Generate the KeyPairGenerator</h3>
<p>You can generate the <b>KeyPair</b> using the <b>generateKeyPair()</b> method. Generate the key pair using the <b>generateKeyPair()</b> method as shown below.</p>
<pre class="result notranslate">
//Generate the pair of keys
KeyPair pair = keyPairGen.generateKeyPair();
</pre>
<h3>Step 4: Get the private key from the pair</h3>
<p>You can get the private key from the generated KeyPair object using the <b>getPrivate()</b> method.</p>
<p>Get the private key using the <b>getPrivate()</b> method as shown below.</p>
<pre class="result notranslate">
//Getting the private key from the key pair
PrivateKey privKey = pair.getPrivate();   
</pre>
<h3>Step 5: Create a signature object</h3>
<p>The <b>getInstance()</b> method of the <b>Signature</b> class accepts a string parameter representing required signature algorithm and returns the respective Signature object.</p>
<p>Create an object of the Signature class using the <b>getInstance()</b> method.</p>
<pre class="result notranslate">
//Creating a Signature object
Signature sign = Signature.getInstance("SHA256withDSA");
</pre>
<h3>Step 6: Initialize the Signature object</h3>
<p>The <b>initSign()</b> method of the Signature class accepts a <b>PrivateKey</b> object and initializes the current Signature object.</p>
<p>Initialize the Signature object created in the previous step using the <b>initSign()</b> method as shown below.</p>
<pre class="result notranslate">
//Initialize the signature
sign.initSign(privKey);
</pre>
<h3>Step 7: Add data to the Signature object</h3>
<p>The <b>update()</b> method of the Signature class accepts a byte array representing the data to be signed or verified and updates the current object with the data given.</p>
<p>Update the initialized Signature object by passing the data to be signed to the <b>update()</b> method in the form of byte array as shown below.</p>
<pre class="result notranslate">
byte[] bytes = "Hello how are you".getBytes();      

//Adding data to the signature
sign.update(bytes);
</pre>
<h3>Step 8: Calculate the Signature</h3>
<p>The <b>sign()</b> method of the <b>Signature</b> class returns the signature bytes of the updated data.</p>
<p>Calculate the Signature using the <b>sign()</b> method as shown below.</p>
<pre class="result notranslate">
//Calculating the signature
byte[] signature = sign.sign();
</pre>
<p><b>Example</b></p>
<p>Following Java program accepts a message from the user and generates a digital signature for the given message.</p>
<div class="demo-view">
<a href="http://tpcg.io/Qs7Wca" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.Signature;
import java.util.Scanner;

public class CreatingDigitalSignature {
   public static void main(String args[]) throws Exception {
      //Accepting text from user
      Scanner sc = new Scanner(System.in);
      System.out.println("Enter some text");
      String msg = sc.nextLine();
      
      //Creating KeyPair generator object
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
      
      //Initializing the key pair generator
      keyPairGen.initialize(2048);
      
      //Generate the pair of keys
      KeyPair pair = keyPairGen.generateKeyPair();
      
      //Getting the private key from the key pair
      PrivateKey privKey = pair.getPrivate();
      
      //Creating a Signature object
      Signature sign = Signature.getInstance("SHA256withDSA");
      
      //Initialize the signature
      sign.initSign(privKey);
      byte[] bytes = "msg".getBytes();
      
      //Adding data to the signature
      sign.update(bytes);
      
      //Calculating the signature
      byte[] signature = sign.sign();
      
      //Printing the signature
      System.out.println("Digital signature for given text: "+new String(signature, "UTF8"));
   }
}
</pre>
<p><b>Output</b></p>
<p>The above program generates the following output &minus;</p>
<pre class="result  notranslate">
Enter some text
Hi how are you
Digital signature for given text: 0=@gRD???-?.???? /yGL?i??a!?
</pre>
<h1>Java Cryptography - Verifying Signature</h1>
<p>You can create digital signature using Java and verify it following the steps given below.</p>
<h2>Step 1: Create a KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a KeyPairGenerator object that generates keys.</p>
<p>Create <b>KeyPairGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating KeyPair generator object
KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
</pre>
<h2>Step 2: Initialize the KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides a method named <b>initialize()</b> method. This method is used to initialize the key pair generator. This method accepts an integer value representing the key size.</p>
<p>Initialize the KeyPairGenerator object created in the previous step using the <b>initialize()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing the KeyPairGenerator
keyPairGen.initialize(2048);
</pre>
<h2>Step 3: Generate the KeyPairGenerator</h2>
<p>You can generate the <b>KeyPair</b> using the <b>generateKeyPair()</b> method. Generate the keypair using this method as shown below.</p>
<pre class="result notranslate">
//Generate the pair of keys
KeyPair pair = keyPairGen.generateKeyPair();
</pre>
<h2>Step 4: Get the private key from the pair</h2>
<p>You can get the private key from the generated KeyPair object using the <b>getPrivate()</b> method.</p>
<p>Get the private key using the <b>getPrivate()</b> method as shown below.</p>
<pre class="result notranslate">
//Getting the private key from the key pair
PrivateKey privKey = pair.getPrivate();   
</pre>
<h2>Step 5: Create a signature object</h2>
<p>The <b>getInstance()</b> method of the <b>Signature</b> class accepts a string parameter representing required signature algorithm and returns the respective Signature object.</p>
<p>Create an object of the Signature class using the <b>getInstance()</b> method.</p>
<pre class="result notranslate">
//Creating a Signature object
Signature sign = Signature.getInstance("SHA256withDSA");
</pre>
<h2>Step 6: Initialize the Signature object</h2>
<p>The <b>initSign()</b> method of the Signature class accepts a <b>PrivateKey</b> object and initializes the current Signature object.</p>
<p>Initialize the Signature object created in the previous step using the <b>initSign()</b> method as shown below.</p>
<pre class="result notranslate">
//Initialize the signature
sign.initSign(privKey);
</pre>
<h2>Step 7: Add data to the Signature object</h2>
<p>The <b>update()</b> method of the Signature class accepts a byte array representing the data to be signed or verified and updates the current object with the data given.</p>
<p>Update the initialized Signature object by passing the data to be signed to the <b>update()</b> method in the form of byte array as shown below.</p>
<pre class="result notranslate">
byte[] bytes = "Hello how are you".getBytes();      

//Adding data to the signature
sign.update(bytes);
</pre>
<h2>Step 8: Calculate the Signature </h2>
<p>The <b>sign()</b> method of the <b>Signature</b> class returns the signature bytes of the updated data.</p>
<p>Calculate the Signature using the sign() method as shown below.</p>
<pre class="result notranslate">
//Calculating the signature
byte[] signature = sign.sign();
</pre>
<h2>Step 9: Initialize the signature object for verification</h2>
<p>To verify a Signature object you need to initialize it first using the <b>initVerify()</b> method it method accepts a <b>PublicKey</b> object.</p>
<p>Therefore, initialize the Signature object for verification using the <b>initVerify()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing the signature
sign.initVerify(pair.getPublic());
</pre>
<h2>Step 10: Update the data to be verified </h2>
<p>Update the initialized (for verification) object with the data the data to be verified using the update method as shown below.</p>
<pre class="result notranslate">
//Update the data to be verified
sign.update(bytes);
</pre>
<h2>Step 11: Verify the Signature</h2>
<p>The <b>verify()</b> method of the Signature class accepts another signature object and verifies it with the current one. If a match occurs, it returns true else it returns false.</p>
<p>Verify the signature using this method as shown below.</p>
<pre class="result notranslate">
//Verify the signature
boolean bool = sign.verify(signature);
</pre>
<h3>Example</h3>
<p>Following Java program accepts a message from the user, generates a digital signature for the given message, and verifies it.</p>
<div class="demo-view">
<a href="http://tpcg.io/O7K1iz" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.Signature;

import java.util.Scanner;

public class SignatureVerification {
   public static void main(String args[]) throws Exception{
      //Creating KeyPair generator object
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
	      
      //Initializing the key pair generator
      keyPairGen.initialize(2048);
	      
      //Generate the pair of keys
      KeyPair pair = keyPairGen.generateKeyPair();
      
      //Getting the privatekey from the key pair
      PrivateKey privKey = pair.getPrivate();

      //Creating a Signature object
      Signature sign = Signature.getInstance("SHA256withDSA");

      //Initializing the signature
      sign.initSign(privKey);
      byte[] bytes = "Hello how are you".getBytes();
      
      //Adding data to the signature
      sign.update(bytes);
      
      //Calculating the signature
      byte[] signature = sign.sign();      
      
      //Initializing the signature
      sign.initVerify(pair.getPublic());
      sign.update(bytes);
      
      //Verifying the signature
      boolean bool = sign.verify(signature);
      
      if(bool) {
         System.out.println("Signature verified");   
      } else {
         System.out.println("Signature failed");
      }
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result  notranslate">
Signature verified
</pre>
<h1>Java Cryptography - Encrypting Data</h1>
<p>You can encrypt given data using the Cipher class of the <b>javax.crypto</b> package. Follow the steps given below to encrypt given data using Java.</p>
<h2>Step 1: Create a KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a KeyPairGenerator object that generates keys.</p>
<p>Create <b>KeyPairGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating KeyPair generator object
KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
</pre>
<h2>Step 2: Initialize the KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides a method named <b>initialize()</b> this method is used to initialize the key pair generator. This method accepts an integer value representing the key size.</p>
<p>Initialize the KeyPairGenerator object created in the previous step using the <b>initialize()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing the KeyPairGenerator
keyPairGen.initialize(2048);
</pre>
<h2>Step 3: Generate the KeyPairGenerator</h2>
<p>You can generate the <b>KeyPair</b> using the <b>generateKeyPair()</b> method of the <b>KeyPairGenerator</b> class. Generate the key pair using this method as shown below.</p>
<pre class="result notranslate">
//Generate the pair of keys
KeyPair pair = keyPairGen.generateKeyPair();
</pre>
<h2>Step 4: Get the public key</h2>
<p>You can get the public key from the generated <b>KeyPair</b> object using the <b>getPublic()</b> method as shown below.</p>
<p>Get the public key using this method as shown below.</p>
<pre class="result notranslate">
//Getting the public key from the key pair
PublicKey publicKey = pair.getPublic();
</pre>
<h2>Step 5: Create a Cipher object</h2>
<p>The <b>getInstance()</b> method of <b>Cipher</b> class accepts a String variable representing the required transformation and returns a Cipher object that implements the given transformation.</p>
<p>Create the Cipher object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating a Cipher object
Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
</pre>
<h2>Step 6: Initialize the Cipher object</h2>
<p>The <b>init()</b> method of the <b>Cipher</b> class accepts two parameters an integer parameter representing the operation mode (encrypt/decrypt) and, a Key object representing the public key.</p>
<p>Initialize the Cypher object using the <b>init()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing a Cipher object
cipher.init(Cipher.ENCRYPT_MODE, publicKey);
</pre>
<h2>Step 7: Add data to the Cipher object</h2>
<p>The <b>update()</b> method of the Cipher class accepts a byte array representing the data to be encrypted and updates the current object with the data given.</p>
<p>Update the initialized Cipher object by passing the data to the <b>update()</b> method in the form of byte array as shown below.</p>
<pre class="result notranslate">
//Adding data to the cipher
byte[] input = "Welcome to Tutorialspoint".getBytes();	  
cipher.update(input);
</pre>
<h2>Step 8: Encrypt the data</h2>
<p>The <b>doFinal()</b> method of the Cipher class completes the encryption operation. Therefore, finish the encryption using this method as shown below.</p>
<pre class="result notranslate">
//Encrypting the data
byte[] cipherText = cipher.doFinal();
</pre>
<h3>Example</h3>
<p>Following Java program accepts text from user, encrypts it using RSA algorithm and, prints the encrypted format of the given text.</p>
<div class="demo-view">
<a href="http://tpcg.io/8y5MRF" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Signature;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;

public class CipherSample {
   public static void main(String args[]) throws Exception{
      //Creating a Signature object
      Signature sign = Signature.getInstance("SHA256withRSA");
      
      //Creating KeyPair generator object
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
      
      //Initializing the key pair generator
      keyPairGen.initialize(2048);
      
      //Generating the pair of keys
      KeyPair pair = keyPairGen.generateKeyPair();      
	
      //Creating a Cipher object
      Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        
      //Initializing a Cipher object
      cipher.init(Cipher.ENCRYPT_MODE, pair.getPublic());
	  
      //Adding data to the cipher
      byte[] input = "Welcome to Tutorialspoint".getBytes();	  
      cipher.update(input);
	  
      //encrypting the data
      byte[] cipherText = cipher.doFinal();	 
      System.out.println(new String(cipherText, "UTF8"));
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result  notranslate">
Encrypted Text: 
"???:]J_?]???;Xl??????*@??u???r??=T&???_?_??.??i?????(?$_f?zD??????ZGH??g???
g?E:_??bz^??f?~o???t?}??u=uzp\UI????Z??l[?G?3??Y?UAEfKT?f?O??N_?d__?????a_?15%?^?
'p?_?$,9"{??^??y??_?t???,?W?PCW??~??[?$??????e????f?Y-Zi__??_??w?_?&QT??`?`~?[?K_??_???
</pre>
<h1>Java Cryptography - Decrypting Data</h1>
<p>You can decrypt the encrypted data using the Cipher class of the <b>javax.crypto</b> package. Follow the steps given below to decrypt given data using Java.</p>
<h2>Step 1: Create a KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides <b>getInstance()</b> method which accepts a String variable representing the required key-generating algorithm and returns a KeyPairGenerator object that generates keys.</p>
<p>Create <b>KeyPairGenerator</b> object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating KeyPair generator object
KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("DSA");
</pre>
<h2>Step 2: Initialize the KeyPairGenerator object</h2>
<p>The <b>KeyPairGenerator</b> class provides a method named <b>initialize()</b> this method is used to initialize the key pair generator. This method accepts an integer value representing the key size.</p>
<p>Initialize the KeyPairGenerator object created in the previous step using the <b>initialize()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing the KeyPairGenerator
keyPairGen.initialize(2048);
</pre>
<h2>Step 3: Generate the KeyPairGenerator</h2>
<p>You can generate the <b>KeyPair</b> using the <b>generateKeyPair()</b> method of the <b>KeyPairGenerator</b> class. Generate the key pair using this method as shown below.</p>
<pre class="result notranslate">
//Generate the pair of keys
KeyPair pair = keyPairGen.generateKeyPair();
</pre>
<h2>Step 4: Get the public key</h2>
<p>You can get the public key from the generated KeyPair object using the <b>getPublic()</b> method as shown below.</p>
<pre class="result notranslate">
//Getting the public key from the key pair
PublicKey publicKey = pair.getPublic();
</pre>
<h2>Step 5: Create a Cipher object</h2>
<p>The <b>getInstance()</b> method of <b>Cipher</b> class accepts a String variable representing the required transformation and returns a Cipher object that implements the given transformation.</p>
<p>Create the Cipher object using the <b>getInstance()</b> method as shown below.</p>
<pre class="result notranslate">
//Creating a Cipher object
Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
</pre>
<h2>Step 6: Initialize the Cipher object</h2>
<p>The <b>init()</b> method of the Cipher class accepts two parameters</p>
<ul class="list">
<li>An integer parameter representing the operation mode (encrypt/decrypt)</li>
<li>Key object representing the public key</li>
</ul>
<p>Initialize the Cypher object using the <b>init()</b> method as shown below.</p>
<pre class="result notranslate">
//Initializing a Cipher object
cipher.init(Cipher.ENCRYPT_MODE, publicKey);
</pre>
<h2>Step 7: Add data to the Cipher object</h2>
<p>The <b>update()</b> method of the Cipher class accepts a byte array representing the data to be encrypted and updates the current object with the data given.</p>
<p>Update the initialized Cipher object by passing the data to the <b>update()</b> method in the form of byte array as shown below.</p>
<pre class="result notranslate">
//Adding data to the cipher
byte[] input = "Welcome to Tutorialspoint".getBytes();	  
cipher.update(input);
</pre>
<h2>Step 8: Encrypt the data</h2>
<p>The <b>doFinal()</b> method of the Cipher class completes the encryption operation. Therefore, finish the encryption using this method as shown below.</p>
<pre class="result notranslate">
//Encrypting the data
byte[] cipherText = cipher.doFinal();
</pre>
<h2>Step 9: Initialize the Cipher object for decryption</h2>
<p>To decrypt the cypher encrypted in the previous steps you need to initialize it for decryption.</p>
<p>Therefore, initialize the cipher object by passing the parameters Cipher.DECRYPT_MODE and PrivateKey object as shown below.</p>
<pre class="result notranslate">
//Initializing the same cipher for decryption
cipher.init(Cipher.DECRYPT_MODE, pair.getPrivate());
</pre>
<h2>Step 10: Decrypt the data</h2>
<p>Finally, Decrypt the encrypted text using the <b>doFinal()</b> method as shown below.</p>
<pre class="result notranslate">
//Decrypting the text
byte[] decipheredText = cipher.doFinal(cipherText);
</pre>
<h3>Example</h3>
<p>Following Java program accepts text from user, encrypts it using RSA algorithm and, prints the cipher of the given text, decrypts the cipher and prints the decrypted text again.</p>
<pre class="prettyprint notranslate">
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.Signature;

import javax.crypto.Cipher;

public class CipherDecrypt {
   public static void main(String args[]) throws Exception{
	   //Creating a Signature object
      Signature sign = Signature.getInstance("SHA256withRSA");
      
      //Creating KeyPair generator object
      KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
      
      //Initializing the key pair generator
      keyPairGen.initialize(2048);
      
      //Generate the pair of keys
      KeyPair pair = keyPairGen.generateKeyPair();   
      
      //Getting the public key from the key pair
      PublicKey publicKey = pair.getPublic();  

      //Creating a Cipher object
      Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");

      //Initializing a Cipher object
      cipher.init(Cipher.ENCRYPT_MODE, publicKey);
	  
      //Add data to the cipher
      byte[] input = "Welcome to Tutorialspoint".getBytes();	  
      cipher.update(input);
	  
      //encrypting the data
      byte[] cipherText = cipher.doFinal();	 
      System.out.println( new String(cipherText, "UTF8"));

      //Initializing the same cipher for decryption
      cipher.init(Cipher.DECRYPT_MODE, pair.getPrivate());
      
      //Decrypting the text
      byte[] decipheredText = cipher.doFinal(cipherText);
      System.out.println(new String(decipheredText));
   }
}
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<pre class="result notranslate">
Encrypted Text:
]/[?F3?D?p
v?w?!?H???^?A??????P?u??FA?
?
???_?? ???_jMH-??&gt;??OP?'?j?_?n`
?_??'`????o??_GL??g???g_f?????f|???LT?|?Vz_TDu#??\?&lt;b,,?$C2???Bq?#?lDB`??g,^??K?_?v???`}
?;LX?a?_5e???#???_?6?/B&B_???^?__Ap^#_?q?IEh????_?,??*??]~_?_?D?
_y???lp??a?P_U{

Decrypted Text:
Welcome to Tutorialspoint
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/java_cryptography/java_cryptography_decrypting_data.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/java_cryptography/java_cryptography_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
