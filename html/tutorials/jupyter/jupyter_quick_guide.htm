<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Jupyter - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Jupyter - Quick Guide - Project Jupyter is a suite of software products used in interactive computing. IPython was originally developed by Fernando Perez in 2001 as an enhanced Python "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/jupyter/jupyter_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#F27727;
}
a.demo {
    background:#F27727;
}
li.heading {
    background:#F27727;
}
.course-box{background:#F27727}
.home-intro-sub p{color:#F27727}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/jupyter/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/jupyter/images/jupyter-mini-logo.jpg" alt="Jupyter Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Jupyter Tutorial</li>
<li><a href="/jupyter/index.htm">Jupyter - Home</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">IPython</li>
<li><a href="/jupyter/ipython_introduction.htm">IPython - Introduction</a></li>
<li><a href="/jupyter/ipython_installation.htm">IPython - Installation</a></li>
<li><a href="/jupyter/ipython_getting_started.htm">IPython - Getting Started</a></li>
<li><a href="/jupyter/ipython_running_editing_python_script.htm">Running &amp; Editing Python Script</a></li>
<li><a href="/jupyter/ipython_history_command.htm">IPython - History Command</a></li>
<li><a href="/jupyter/ipython_system_commands.htm">IPython - System Commands</a></li>
<li><a href="/jupyter/ipython_command_line_options.htm">IPython - Command Line Options</a></li>
<li><a href="/jupyter/ipython_dynamic_object_introspection.htm">Dynamic Object Introspection</a></li>
<li><a href="/jupyter/ipython_io_caching.htm">IPython - IO Caching</a></li>
<li><a href="/jupyter/setting_ipython_default_python_environment.htm">Setting IPython as Default Python Environment</a></li>
<li><a href="/jupyter/ipython_importing_python_shell_code.htm">Importing Python Shell Code</a></li>
<li><a href="/jupyter/embedding_ipython.htm">IPython - Embedding IPython</a></li>
<li><a href="/jupyter/ipython_magic_commands.htm">IPython - Magic Commands</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Jupyter</li>
<li><a href="/jupyter/jupyter_project_overview.htm">Project Jupyter - Overview</a></li>
<li><a href="/jupyter/jupyter_notebook_introduction.htm">Jupyter Notebook - Introduction</a></li>
<li><a href="/jupyter/jupyter_notebook_working_with_jupyter_online.htm">Working With Jupyter Online</a></li>
<li><a href="/jupyter/jupyter_notebook_installation_getting_started.htm">Installation and Getting Started</a></li>
<li><a href="/jupyter/jupyter_notebook_dashboard.htm">Jupyter Notebook - Dashboard</a></li>
<li><a href="/jupyter/jupyter_notebook_user_interface.htm">Jupyter Notebook - User Interface</a></li>
<li><a href="/jupyter/jupyter_notebook_types_of_cells.htm">Jupyter Notebook - Types of Cells</a></li>
<li><a href="/jupyter/jupyter_notebook_editing.htm">Jupyter Notebook - Editing</a></li>
<li><a href="/jupyter/jupyter_notebook_markdown_cells.htm">Jupyter Notebook - Markdown Cells</a></li>
<li><a href="/jupyter/jupyter_notebook_cell_magic_functions.htm">Cell Magic Functions</a></li>
<li><a href="/jupyter/jupyter_notebook_plotting.htm">Jupyter Notebook - Plotting</a></li>
<li><a href="/jupyter/jupyter_converting_notebooks.htm">Converting Notebooks</a></li>
<li><a href="/jupyter/jupyter_notebook_ipywidgets.htm">Jupyter Notebook - IPyWidgets</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">QtConsole</li>
<li><a href="/jupyter/jupyter_qtconsole_getting_started.htm">QtConsole - Getting Started</a></li>
<li><a href="/jupyter/jupyter_qtconsole_multiline_editing.htm">QtConsole - Multiline Editing</a></li>
<li><a href="/jupyter/jupyter_qtconsole_inline_graphics.htm">QtConsole - Inline Graphics</a></li>
<li><a href="/jupyter/jupyter_qtconsole_save_to_html.htm">QtConsole - Save to Html</a></li>
<li><a href="/jupyter/jupyter_qtconsole_multiple_consoles.htm">QtConsole - Multiple Consoles</a></li>
<li><a href="/jupyter/jupyter_qtconsole_connecting_to_jupyter_notebook.htm">Connecting to Jupyter Notebook</a></li>
<li><a href="/jupyter/sharing_jupyter_notebook_using_github_and_nbviewer.htm">Using github and nbviewer</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">JupyterLab</li>
<li><a href="/jupyter/jupyterlab_overview.htm">JupyterLab - Overview</a></li>
<li><a href="/jupyter/jupyterlab_installation_and_getting_started.htm">Installation &amp; Getting Started</a></li>
<li><a href="/jupyter/jupyterlab_interface.htm">JupyterLab - Interface</a></li>
<li><a href="/jupyter/jupyterlab_installing_r_kernel.htm">JupyterLab - Installing R Kernel</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Jupyter Resources</li>
<li><a  href="/jupyter/jupyter_quick_guide.htm">Jupyter - Quick Guide</a></li>
<li><a  href="/jupyter/jupyter_useful_resources.htm">Jupyter - Useful Resources</a></li>
<li><a  href="/jupyter/jupyter_discussion.htm">Jupyter - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Jupyter - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/jupyter/jupyterlab_installing_r_kernel.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/jupyter/jupyter_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>IPython - Introduction</h1>
<p>Project Jupyter is a suite of software products used in interactive computing. IPython was originally developed by Fernando Perez in 2001 as an enhanced Python interpreter. A web based interface to IPython terminal in the form of IPython notebook was introduced in 2011. In 2014, Project Jupyter started as a spin-off project from IPython.</p>
<p>Packages under Jupyter project include &minus;</p>
<ul class="list">
<li><p><b>Jupyter notebook</b> &minus; A web based interface to programming environments of Python, Julia, R and many others</p></li>
<li><p><b>QtConsole</b> &minus; Qt based terminal for Jupyter kernels similar to IPython</p></li>
<li><p><b>nbviewer</b> &minus; Facility to share Jupyter notebooks</p></li>
<li><p><b>JupyterLab</b> &minus; Modern web based integrated interface for all products.</p></li>
</ul>
<p>Standard distribution of Python comes with a <b>REPL (Read-Evaluate-Print Loop)</b> environment in the form of Python shell with <b>&gt;&gt;&gt;</b> prompt. IPython (stands for Interactive Python) is an enhanced interactive environment for Python with many functionalities compared to the standard Python shell.</p>
<h2>Features of IPython</h2>
<p>IPython offers more features compared to the standard Python. They are as follows &minus;</p>
<ul class="list">
<li><p>Offers a powerful interactive Python shell.</p></li>
<li><p>Acts as a main kernel for Jupyter notebook and other front end tools of Project Jupyter.</p></li>
<li><p>Possesses object introspection ability. Introspection is the ability to check properties of an object during runtime.</p></li>
<li><p>Syntax highlighting.</p></li>
<li><p>Stores the history of interactions.</p></li>
<li><p>Tab completion of keywords, variables and function names.</p></li>
<li><p>Magic command system useful for controlling Python environment and performing OS tasks.</p></li>
<li><p>Ability to be embedded in other Python programs.</p></li>
<li><p>Provides access to Python debugger.</p></li>
</ul>
<h2>History and Development</h2>
<p>IPython was originally developed by Fernando Perez in 2001. Its current version is IPython7.0.1 which requires Python 3.4 version or higher. IPython 6.0 was the first version to support Python 3. Users having Python 2.7 should work with IPython’s version 2.0 to 5.7</p>
<p>The concept of computational notebooks started in 80s decade when MATLAB and Mathematica were released. These GUI frontends to the interactive shell had features like text formatting, adding graphics, table and adding mathematical symbols. Sage notebook is also a web based notebook.</p>
<p>Creaters of IPython started working on notebook interface for IPython shell in 2005. IPython notebook soon added support of other languages like R and Julia. It was in 2014, that Perez started Jupyter project as a spin-off project from IPython, since IPython project was becoming big with products like notebook server and Qt console added to it.</p>
<p>Since IPython 4.0, all additional components were shifted to Project Jupyter and adding support of other languages to IPython notebook. IPython continues to focus on improvement of its enhanced interpreter feature. It also provides primary kernel to Jupyter notebook frontend.</p>
<h1>IPython - Installation</h1>
<p>IPython is included by default in Anaconda distribution of Python. It can be downloaded from Anaconda’s download page <a href="https://www.anaconda.com/download/" rel="nofollow" target="_blank">www.anaconda.com/download/</a> Binaries for all major OS (Windows, MacOS and Linux) and architecture (32 bit and 64 bit) are available on this link.</p>
<p>To install IPython separately in standard Python installation, you can use pip command as shown below &minus;</p>
<pre class="result notranslate">
pip3 install ipython
</pre>
<p>IPython internally uses following packages &minus;</p>
<table class="table table-bordered">
<tr>
<th>Sr.No.</th>
<th class="ts">IPython dependencies &amp; Functionality</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>colorama</b></p>
<p>Cross-platform API for printing colored terminal text from Python</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>jedi</b></p>
<p>An autocompletion tool for Python</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>pickleshare</b></p>
<p>Small ‘shelve’ like datastore with concurrency support</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>prompt_toolkit</b></p>
<p>Library for building powerful interactive command lines in Python</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>pygments</b></p>
<p>Syntax highlighting package written in Python</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>simplegeneric</b></p>
<p>Simple generic functions</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>traitlets</b></p>
<p>Configuration system for Python applications.</p></td>
</tr>
</table>
<p>In general, all dependencies get installed automatically. Else, you can install them individually using pip.</p>
<h1>IPython - Getting Started</h1>
<p>This chapter will explain how to get started with working on IPython.</p>
<h2>Starting IPython from Command Prompt.</h2>
<p>Before proceeding to understand about IPython in depth, note that instead of the regular <b>&gt;&gt;&gt;</b>, you will notice two major Python prompts as explained below &minus;</p>
<ul class="list">
<li><p><b>In[1]</b> appears before any input expression.</p></li>
<li><p><b>Out[1]</b> appears before the Output appears.</p></li>
</ul>
<p>Besides, the numbers in the square brackets are incremented automatically. Observe the following screenshot for a better understanding &minus;</p>
<img src="/jupyter/images/ipython_cmd.jpg" alt="IPython Command Prompt" />
<p>Now, if you have installed Anaconda distribution of Python, open Anaconda prompt from start menu.</p>
<img src="/jupyter/images/anaconda_prompt.jpg" alt="Anaconda prompt" />
<h2>Start IPython from conda prompt</h2>
<p>When compared to regular Python console, we can notice a difference. The IPython shell shows syntax highlighting by using different colour scheme for different elements like expression, function, variable etc.</p>
<img src="/jupyter/images/ipython_shell.jpg" alt="IPython shell" />
<p>Another useful enhancement is tab completion. We know that each object has one or more methods available as defined in its class. IPython pops up appropriate list of methods as you press tab key after dot in front of object.</p>
<p>In the following example, a string is defined. As a response, the methods of string class are shown.</p>
<img src="/jupyter/images/string_class_methods.jpg" alt="String Class Methods" />
<p>IPython provides information of any object by putting ‘?’ in front of it. It includes docstring, function definitions and constructor details of class. For example to explore the string object var defined above, in the input prompt enter <b>var?</b>. The result will show all information about it. Observe the screenshot given below for a better understanding &minus;</p>
<img src="/jupyter/images/ipython_info.jpg" alt="IPython Info" />
<h2>Magic Functions</h2>
<p>IPython’s in-built magic functions are extremely powerful. There are two types of magic functions.</p>
<ul class="list">
<li><b>Line magics</b>, which work very much like DOS commands.</li>
<li><b>Cell magics</b>, which work on multiple lines of code.</li>
</ul>
<p>We shall learn about line magic functions and cell magic functions in detail in subsequent chapters.</p>
<h1>IPython - Running and Editing Python Script</h1>
<p>In this chapter, let us understand how to run and edit a Python script.</p>
<h2>Run Command</h2>
<p>You can use <b>run</b> command in the input prompt to run a Python script. The run command is actually line magic command and should actually be written as <b>%run</b>. However, the <b>%automagic</b> mode is always on by default, so you can omit this.</p>
<pre class="result notranslate">
In [1]: run hello.py
Hello IPython
</pre>
<h2>Edit Command</h2>
<p>IPython also provides edit magic command. It invokes default editor of the operating system. You can open it through Windows Notepad editor and the script can be edited. Once you close it after saving its input, the output of modified script will be displayed.</p>
<pre class="result notranslate">
In [2]: edit hello.py
Editing... done. Executing edited code...
Hello IPython
welcome to interactive computing
</pre>
<p>Note that hello.py initially contained only one statement and after editing one more statement was added. If no file name is given to edit command, a temporary file is created. Observe the following code that shows the same.</p>
<pre class="result notranslate">
In [7]: edit
IPython will make a temporary file named:
C:\Users\acer\AppData\Local\Temp\ipython_edit_4aa4vx8f\ipython_edit_t7i6s_er.py
Editing... done. Executing edited code...
magic of IPython
Out[7]: 'print ("magic of IPython")'
</pre>
<h1>IPython - History Command</h1>
<p>IPython preserves both the commands and their results of the current session. We can scroll through the previous commands by pressing the up and down keys.</p>
<p>Besides, last three objects of output are stored in special variables _, __ and ___. The <b>history</b> magic command shows previous commands in current session as shown in the screenshot given below &minus;</p>
<img src="/jupyter/images/history_command.jpg" alt="History Command" />
<h1>IPython - System Commands</h1>
<p>If the statement in the input cell starts with the exclamation symbol (!), it is treated as a system command for underlying operating system. For example, <b>!ls</b> (for linux) and <b>!dir</b> (for windows) displays the contents of current directory</p>
<img src="/jupyter/images/exclamation_symbol_command.jpg" alt="Exclamation Symbol (!) Command" />
<p>The output of system command can also be assigned to a Python variable as shown below &minus;</p>
<img src="/jupyter/images/output_system_command.jpg" alt="Output of system command" />
<p>The variable stores output without colors and splits at newline characters.</p>
<p>It is also possible to combine Python variables or expressions with system command calls. Variable in curly brackets {} can be embedded in command text. Observe the following example &minus;</p>
<img src="/jupyter/images/system_command_calls.jpg" alt="System Command Calls" />
<p>Here is another example to understand that prefixing Python variable with $ also achieves the same result.</p>
<img src="/jupyter/images/prefixing_python_variable.jpg" alt="Prefixing Python Variable" />
<h1>IPython - Command Line Options</h1>
<p>In this chapter, let us understand how to work with various command line options in IPython.</p>
<h2>Invoking IPython Program</h2>
<p>You can invoke an IPython program using the following options &minus;</p>
<pre class="result notranslate">
C:\python36> ipython [subcommand] [options] [-c cmd | -m mod | file] [--] [arg]
</pre>
<p>The file option is a Python script with .py extension. If no other option is given, the script is executed and command prompt reappears.</p>
<pre class="result notranslate">
C:\python36>ipython hello.py
Hello IPython
welcome to interactive computing
</pre>
<h2>Subcommands and Parameters</h2>
<p>An IPython command accepts the following subcommand options &minus;</p>
<ul class="list">
<li><p><b>Profile</b> &minus; Create and manage IPython profiles.</p></li>
<li><p><b>Kernel</b> &minus; Start a kernel without an attached frontend.</p></li>
<li><p><b>Locate</b> &minus; Print the path to the IPython dir.</p></li>
<li><p><b>History</b> &minus; Manage the IPython history database.</p></li>
</ul>
<p>An IPython profile subcommand accepts the following parameters &minus;</p>
<ul class="list">
<li><p><b>ipython profile create myprofile</b> &minus; Creates a new profile.</p></li>
<li><p><b>ipython profile list</b> &minus; Lists all available profiles.</p></li>
<li><p><b>ipython locate profile myprofile</b> &minus; Locates required profile.</p></li>
</ul>
<p>To install new IPython kernel, use the following command &minus;</p>
<pre class="result notranslate">
Ipython kernel –install –name
</pre>
<p>To print the path to the IPython dir, use the following command &minus;</p>
<pre class="result notranslate">
C:\python36>ipython locate myprofile
C:\Users\acer\.ipython
</pre>
<p>Besides, we know that &minus;</p>
<ul class="list">
<li><p>The <b>history</b> subcommand manages IPython history database.</p></li>
<li><p>The <b>trim</b> option reduces the IPython history database to the last 1000 entries.</p></li>
<li><p>The <b>clear</b> option deletes all entries.</p></li>
</ul>
<p>Some of the other important command line options of IPython are listed below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:12%;">Sr.No.</th>
<th class="ts">IPython Command &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>--automagic</b></p>
<p>Turn on the auto calling of magic commands.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>--pdb</b></p>
<p>Enable auto calling the pdb debugger after every exception.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>--pylab</b></p>
<p>Pre-load matplotlib and numpy for interactive use with the default matplotlib backend.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>--matplotlib</b></p>
<p>Configure matplotlib for interactive use with the default matplotlib backend.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>--gui=options</b></p>
<p>Enable GUI event loop integration with any of ('glut', 'gtk', 'gtk2','gtk3', 'osx', 'pyglet', 'qt', 'qt4', 'qt5', 'tk', 'wx', 'gtk2', 'qt4').</p></td>
</tr>
</table>
<p>The sample usage of some of the IPython command line options are shown in following table &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:12%;">Sr.No.</th>
<th class="ts">IPython Command &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>ipython --matplotlib</b></p>
<p>enable matplotlib integration</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>ipython --matplotlib=qt</b></p>
<p>enable matplotlib integration with qt4 backend</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>ipython --profile=myprofile</b></p>
<p>start with profile foo</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>ipython profile create myprofile</b></p>
<p>create profile foo w/ default config files</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>ipython help profile</b></p>
<p>show the help for the profile subcmd</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>ipython locate</b></p>
<p>print the path to the IPython directory</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>ipython locate profile myprofile</b></p>
<p>print the path to the directory for profile `myprofile`</p></td>
</tr>
</table>
<h1>IPython - Dynamic Object Introspection</h1>
<p>IPython has different ways of obtaining information about Python objects dynamically. In this chapter, let us learn the ways of dynamic object introspection in IPython.</p>
<p>Use of <b>?</b> and <b>??</b> provides specific and more detailed information about the object. In the first example discussed below, a simple integer object a is created. Its information can be procured by typing a ? in the input cell.</p>
<img src="/jupyter/images/dynamic_object_introspection.jpg" alt="Dynamic Object Introspection in IPython" />
<p>In the second example, let us define a function and introspect this function object with <b>?</b> and <b>??</b>.</p>
<img src="/jupyter/images/function_and_introspect.jpg" alt="Function and Introspect" />
<p>Note that the magic function <b>%psearch</b> is equivalent to the use of <b>?</b> or <b>??</b> for fetching object information.</p>
<h1>IPython - IO Caching</h1>
<p>The input and output cells on IPython console are numbered incrementally. In this chapter, let us look into IO caching in Python in detail.</p>
<p>In IPython, inputs are retrieved using up arrow key. Besides, all previous inputs are saved and can be retrieved. The variables <b>_i</b>, <b>__i</b>, and <b>___i</b> always store the previous three input entries. In addition, <b>In</b> and <b>_in</b> variables provides lists of all inputs. Obviously <b>_in[n]</b> retrieves input from nth input cell. The following IPython session helps you to understand this phenomenon &minus;</p>
<pre class="prettyprint notranslate">
In [1]: print ("Hello")
Hello

In [2]: 2+2
Out[2]: 4

In [3]: x = 10

In [4]: y = 2

In [5]: pow(x,y)
Out[5]: 100

In [6]: _iii, _ii, _i
Out[6]: ('x = 10', 'y = 2', 'pow(x,y)')

In [7]: In
Out[7]:
['',
   'print ("Hello")',
   '2+2',
   'x = 10',
   'y = 2',
   'pow(x,y)',
   '_iii, _ii, _i',
   'In'
]
   
In [8]: In[5] 9. IPython — IO
Out[8]: 'pow(x,y)'

In [9]: _ih
Out[9]:
['',
   'print ("Hello")',
   '2+2',
   'x = 10',
   'y = 2',
   'pow(x,y)',
   '_iii, _ii, _i',
   'In',
   'In[5]',
   '_ih'
]
   
In [11]: _ih[4]
Out[11]: 'y = 2'

In [12]: In[1:4]
Out[12]: ['print ("Hello")', '2+2', 'x=10']
</pre>
<p>Similarly, single, double and triple underscores act as variables to store previous three outputs. Also <b>Out</b> and <b>_oh</b> form a dictionary object of cell number and output of cells performing action (not including assignment statements). To retrieve contents of specific output cell, use <b>Out[n]</b> or <b>_oh[n]</b>. You can also use slicing to get output cells within a range.</p>
<pre class="prettyprint notranslate">
In [1]: print ("Hello")
Hello

In [2]: 2+2
Out[2]: 4

In [3]: x = 10

In [4]: y = 3

In [5]: pow(x,y)
Out[5]: 1000

In [6]: ___, __, _
Out[6]: ('', 4, 1000)

In [7]: Out
Out[7]: {2: 4, 5: 1000, 6: ('', 4, 1000)}

In [8]: _oh
Out[8]: {2: 4, 5: 1000, 6: ('', 4, 1000)}

In [9]: _5
Out[9]: 1000

In [10]: Out[6]
Out[10]: ('', 4, 1000)
</pre>
<h1>Setting IPython as Default Python Environment</h1>
<p>Different environment variables influence Python’s behaviour. PYTHONSTARTUP environment variable is assigned to a Python script. As an effect, this script gets executed before Python prompt appears. This is useful if certain modules are to be loaded by default every time a new Python session starts.</p>
<p>The following script (start.py) imports IPython module and executes start_ipython() function to replace default Python shell with prompt <b>(&gt;&gt;&gt;)</b> by IPython shell when Python executable is invoked.</p>
<pre class="result notranslate">
import os, IPython
os.environ['PYTHONSTARTUP'] = ''
IPython.start_ipython()
raise SystemExit
</pre>
<p>Assuming that this file is stored in Python’s installation directory (c:\python36), set PYTHONSTARTUP environment variable and start Python from command line. Then IPython shell appears as shown below &minus;</p>
<img src="/jupyter/images/python_installation_directory.jpg" alt="Python’s Installation Directory" />
<p>Note that the environment variable can be permanently set using System Properties dialog in Windows and using export command on Linux.</p>
<h1>IPython - Importing Python Shell Code</h1>
<p>IPython can read from standard Python console with default <b>&gt;&gt;&gt;</b> prompt and another IPython session. The following screenshot shows a for loop written in standard Python shell &minus;</p>
<img src="/jupyter/images/standard_python_shell_loop.jpg" alt="Standard Python Shell Loop" />
<p>Copy the code (along with Python prompt) and paste the same in IPython input cell. IPython intelligently filters out the input prompts (&gt;&gt;&gt; and ...) or IPython ones (In [N]: and ...:)</p>
<img src="/jupyter/images/ipython_input_cell.jpg" alt="IPython Input Cell" />
<p>Similarly, code from one IPython session can be pasted in another. The first screenshot given below shows definition of SayHello() function in one IPython window &minus;</p>
<img src="/jupyter/images/ipython_window.jpg" alt="IPython window" />
<p>Now, let us select the code and paste in another IPython shell and call SayHello() function.</p>
<img src="/jupyter/images/ipython_shell_cmd.jpg" alt="IPython shell Cmd" />
<h1>Embedding IPython</h1>
<p>The embed() function of IPython module makes it possible to embed IPython in your Python codes’ namespace. Thereby you can leverage IPython features like object introspection and tab completion, in default Python environment.</p>
<img src="/jupyter/images/ipython_module.jpg" alt="IPython module" />
<p>Python objects present in the global namespace before embedding, will be available to IPython.</p>
<img src="/jupyter/images/python_objects.jpg" alt="Python objects" />
<p>If new objects are formed while in IPython or previous objects are modified, they will be automatically available to default environment after exiting IPython. Embedded IPython shell doesn’t change the state of earlier code or objects.</p>
<p>However, if IPython is embedded in local namespace like inside a function, the objects inside it will not be available once it is closed. Here, we have defined a function add(). Inside add() we invoke IPython and declared a variable. If we try to access variable in IPython after it is closed, NameError exception will be raised.</p>
<img src="/jupyter/images/ipython_nameerror_exception.jpg" alt="IPython NameError Exception" />
<h1>IPython - Magic Commands</h1>
<p>Magic commands or magic functions are one of the important enhancements that IPython offers compared to the standard Python shell. These magic commands are intended to solve common problems in data analysis using Python. In fact, they control the behaviour of IPython itself.</p>
<p>Magic commands act as convenient functions where Python syntax is not the most natural one. They are useful to embed invalid python syntax in their work flow.</p>
<h2>Types of Magic Commands</h2>
<p>There are two types of magic commands &minus;</p>
<ul class="list">
<li>Line magics</li>
<li>Cell magics</li>
</ul>
<h3>Line Magics</h3>
<p>They are similar to command line calls. They start with % character. Rest of the line is its argument passed without parentheses or quotes. Line magics can be used as expression and their return value can be assigned to variable.</p>
<h3>Cell Magics</h3>
<p>They have %% character prefix. Unlike line magic functions, they can operate on multiple lines below their call. They can in fact make arbitrary modifications to the input they receive, which need not even be a valid Python code at all. They receive the whole block as a single string.</p>
<p>To know more about magic functions, the built-in magics and their docstrings, use the magic command. Information of a specific magic function is obtained by %<b>magicfunction?</b> Command. Let us now describe some of the built-in line and cell magic commands.</p>
<h3>Built-in line magics</h3>
<pre class="result notranslate">
%autocall [mode]
</pre>
<p>This magic function makes a function automatically callable without having to use parentheses. It takes three possible mode parameters: <b>0 (off), 1 (smart) is default</b> or <b>2 (always on)</b>.</p>
<img src="/jupyter/images/built_in_line_magics.jpg" alt="Built-in line Magics" />
<h3>%automagic</h3>
<p>Magic functions are callable without having to type the initial % if set to 1. Without arguments it toggles on/off. To deactivate, set to 0.</p>
<p>The following example shows a magic function <b>%pwd</b> (displays present working directory) being called without leading % when %automagic set to 1</p>
<img src="/jupyter/images/automagic.jpg" alt="%automagic" />
<h3>%cd</h3>
<p>This line magic changes the current directory. This command automatically maintains an internal list of directories you visit during your IPython session, in the variable _dh. You can also do ‘cd -&lt;tab&gt;’ to see directory history conveniently.</p>
<img src="/jupyter/images/cd.jpg" alt="%cd" />
<h3>Usage</h3>
<p>The %cd command can be used in the following ways &minus;</p>
<ul class="list">
<li><p><b>%cd &lt;dir&gt;</b> &minus; Changes current working directory to &lt;dir&gt;</p></li>
<li><p><b>%cd..</b> &minus; Changes current directory to parent directory</p></li>
<li><p><b>%cd</b> &minus; changes to last visited directory.</p></li>
</ul>
<h3>%dhist</h3>
<p>This magic command prints all directories you have visited in current session. Every time %cd command is used, this list is updated in <b>_dh</b> variable.</p>
<img src="/jupyter/images/dhist.jpg" alt="%dhist" />
<h3>%edit</h3>
<p>This magic command calls upon the default text editor of current operating system (Notepad for Windows) for editing a Python script. The script is executed as the editor is closed.</p>
<h3>%env</h3>
<p>This magic command will list all environment variables. It also reads value of particular variable or set the value of environment variable.</p>
<p><b>Usage</b></p>
<p>The %cd command can be used in the following ways &minus;</p>
<ul class="list">
<li><p><b>%env</b> &minus; Lists all environment variables</p></li>
<li><p><b>%env var</b> &minus; Gets value for var</p></li>
<li><p><b>%env var val</b> &minus; Sets value for var</p></li>
</ul>
<img src="/jupyter/images/env.jpg" alt="%env" />
<h3>%gui [GUINAME]</h3>
<p>When used without argument this command enables or disables IPython GUI event loop integration. With GUINAME argument, this magic replaces the default GUI toolkits by the specified one.</p>
<table class="table table-bordered">
<tr>
<th style="width:12%;">Sr.No.</th>
<th class="ts">Command &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>%gui wx</b></p>
<p>enable wxPython event loop integration</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>%gui qt4|qt</b></p>
<p>enable PyQt4 event loop integration</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>%gui qt5</b></p>
<p>enable PyQt5 event loop integration</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>%gui gtk</b></p>
<p>enable PyGTK event loop integration</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>%gui gtk3</b></p>
<p>enable Gtk3 event loop integration</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>%gui tk</b></p>
<p>enable Tk event loop integration</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>%gui osx</b></p>
<p>enable Cocoa event loop integration</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p>(requires %matplotlib 1.1)</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>%gui</b></p>
<p>disable all event loop integration</p></td>
</tr>
</table>
<h3>%lsmagic</h3>
<p>Displays all magic functions currently available</p>
<img src="/jupyter/images/lsmagic.jpg" alt="%lsmagic" />
<h3>%matplotlib</h3>
<p>This function activates matplotlib interactive support during an IPython session. However, it does not import matplotlib library. The matplotlib default GUI toolkit is TkAgg. But you can explicitly request a different GUI backend. You can see a list of the available backends as shown &minus;</p>
<pre class="result notranslate">
In [4]: %matplotlib --list
Available matplotlib backends: 
['osx', 'qt4', 'qt5', 'gtk3', 'notebook', 'wx', 'qt', 'nbagg','gtk', 'tk', 'inline']
</pre>
<p>The IPython session shown here plots a sine wave using <b>qt</b> toolkit &minus;</p>
<img src="/jupyter/images/matplotlib.jpg" alt="%matplotlib" />
<p>While using Jupyter notebook, %matplotlib inline directive displays plot output in the browser only.</p>
<h3>%notebook</h3>
<p>This function converts current IPython history into an IPython notebook file with ipynb extension. The input cells in previous example are saved as sine.ipynb</p>
<pre class="result notranslate">
%notebook sine.ipynb
</pre>
<h3>%pinfo</h3>
<p>This function is similar to object introspection ? character. To obtain information about an object, use the following command &minus;</p>
<pre class="result notranslate">
%pinfo object
</pre>
<p>This is synonymous to <b>object?</b> or <b>?object</b>.</p>
<h3>%precision</h3>
<p>This magic function restricts a floating point result to specified digits after decimal.</p>
<img src="/jupyter/images/precision.jpg" alt="%precision" />
<h3>%pwd</h3>
<p>This magic function returns the present working directory.</p>
<img src="/jupyter/images/pwd.jpg" alt="%pwd" />
<h3>%pylab</h3>
<p>This function populates current IPython session with matplotlib, and numpy libraries.</p>
<img src="/jupyter/images/pylab.jpg" alt="%pylab" />
<h3>%recall</h3>
<p>When executed without any parameter, this function executes previous command.</p>
<p>Note that in <b>%recall n</b>, number in front of it is input cell number. Hence the command in the nth cell is recalled. You can recall commands in section of cells by using command such as <b>%recall 1-4</b>. Current input cell is populated with recalled cell and the cursor blinks till the enter key is pressed.</p>
<img src="/jupyter/images/recall.jpg" alt="%recall" />
<h3>%run</h3>
<p>This command runs a Python script from within IPython shell.</p>
<img src="/jupyter/images/run.jpg" alt="%run" />
<h3>%time</h3>
<p>This command displays time required by IPython environment to execute a Python expression.</p>
<img src="/jupyter/images/time.jpg" alt="%time" />
<h3>%timeit</h3>
<p>This function also displays time required by IPython environment to execute a Python expression. Time execution of a Python statement or expression uses the timeit module. This function can be used both as a line and cell magic as explained here &minus;</p>
<ul class="list">
<li><p>In <b>line mode</b> you can time a single-line.</p></li>
<li><p>In <b>cell mode</b>, the statement in the first line is used as setup code and the body of the cell is timed. The cell body has access to any variables created in the setup code.</p></li>
</ul>
<h3>%who</h3>
<p>This line magic prints all interactive variables, with some minimal formatting. If any arguments are given, only variables whose type matches one of these are printed.</p>
<img src="/jupyter/images/who.jpg" alt="%who" />
<h2>IPython Custom Line Magic function</h2>
<p>IPython’s core library contains register_line_magic decorator. A user defined function is converted into a line magic function using this decorator.</p>
<img src="/jupyter/images/ipython_Line_magic_function.jpg" alt="IPython Custom Line Magic function" />
<h1>Project Jupyter - Overview</h1>
<p>Project Jupyter started as a spin-off from IPython project in 2014. IPython’s language-agnostic features were moved under the name – Jupyter. The name is a reference to core programming languages supported by Jupyter which are Julia, Python and RProducts under Jupyter project are intended to support interactive data science and scientific computing.</p>
<p>The project Jupyter consists of various products described as under &minus;</p>
<ul class="list">
<li><p><b>IPykernel</b> &minus; This is a package that provides IPython kernel to Jupyter.</p></li>
<li><p><b>Jupyter client</b> &minus; This package contains the reference implementation of the Jupyter protocol. It is also a client library for starting, managing and communicating with Jupyter kernels.</p></li>
<li><p><b>Jupyter notebook</b> &minus; This was earlier known as IPython notebook. This is a web based interface to IPython kernel and kernels of many other programming languages.</p></li>
<li><p><b>Jupyter kernels</b> &minus; Kernel is the execution environment of a programming language for Jupyter products.</p></li>
</ul>
<p>The list of Jupyter kernels is given below &minus;</p>
<table class="table table-bordered">
<tr>
<th class="ts">Kernel</th>
<th class="ts">Language</th>
<th class="ts">URL</th>
</tr>
<tr>
<td class="ts">IJulia</td>
<td class="ts">Julia</td>
<td><p><a href="https://github.com/JuliaLang/IJulia.jl" target="_blank" rel="nofollow">https://github.com/JuliaLang</a></p></td>
</tr>
<tr>
<td class="ts">IHaskell</td>
<td class="ts">Haskell</td>
<td><p><a href="https://github.com/gibiansky/IHaskell" target="_blank" rel="nofollow">https://github.com/gibiansky</a></p></td>
</tr>
<tr>
<td class="ts">IRuby</td>
<td class="ts">Ruby</td>
<td><p><a href="https://github.com/SciRuby" target="_blank" rel="nofollow">https://github.com/SciRuby/iruby</a></p></td>
</tr>
<tr>
<td class="ts">IJavaScript</td>
<td class="ts">JavaScript</td>
<td><p><a href="https://github.com/n-riesco/ijavascript" target="_blank" rel="nofollow">https://github.com/n-riesco</a></p></td>
</tr>
<tr>
<td class="ts">IPHP</td>
<td class="ts">PHP</td>
<td><p><a href="https://github.com/dawehner/jupyter-php" target="_blank" rel="nofollow">https://github.com/dawehner</a></p></td>
</tr>
<tr>
<td class="ts">IRKernel</td>
<td class="ts">R</td>
<td><p><a href="https://irkernel.github.io/" target="_blank" rel="nofollow">http://irkernel.github.io/</a></p></td>
</tr>
</table>
<ul class="list">
<li><p><b>Qtconsole</b> &minus; A rich Qt-based console for working with Jupyter kernels</p></li>
<li><p><b>nbconvert</b> &minus; Converts Jupyter notebook files in other formats</p></li>
<li><p><b>JupyterLab</b> &minus; Web based integrated interface for notebooks, editors, consoles etc.</p></li>
<li><p><b>nbviewer</b> &minus; HTML viewer for notebook files</p></li>
</ul>
<h1>Jupyter Notebook - Introduction</h1>
<p>IPython notebook was developed by Fernando Perez as a web based front end to IPython kernel. As an effort to make an integrated interactive computing environment for multiple language, Notebook project was shifted under Project Jupyter providing front end for programming environments Juila and R in addition to Python.</p>
<p>A notebook document consists of rich text elements with HTML formatted text, figures, mathematical equations etc. The notebook is also an executable document consisting of code blocks in Python or other supporting languages.</p>
<p>Jupyter notebook is a client-server application. The application starts the server on local machine and opens the notebook interface in web browser where it can be edited and run from. The notebook is saved as ipynb file and can be exported as html, pdf and LaTex files.</p>
<h1>Working with Jupyter Online</h1>
<p>If you are new to Jupyter, you can try features of Jupyter notebook before installing on your local machine. For this purpose, visit <a href="https://jupyter.org/try" target="_blank" rel="nofollow">https://jupyter.org</a> in your browser and choose <b>‘Try Jupyter with Python’</b> option.</p>
<img src="/jupyter/images/try_jupyter_with_python.jpg" alt="Try Jupyter with Python" />
<p>This will open home page of <a href="https://mybinder.org/" target="_blank" rel="nofollow">https://mybinder.org</a> From the File menu, choose new notebook option to open a blank Jupyter in your browser. The input cell, as similar to that in IPython terminal, will be displayed. You can execute any Python expression in it.</p>
<img src="/jupyter/images/jupyter_new_notebook.jpg" alt="Jupyter New Notebook" />
<h1>Installation and Getting Started</h1>
<p>You can easily install Jupyter notebook application using pip package manager.</p>
<pre class="result notranslate">
pip3 install jupyter
</pre>
<p>To start the application, use the following command in the command prompt window.</p>
<pre class="result notranslate">
c:\python36>jupyter notebook
</pre>
<p>The server application starts running at default port number 8888 and browser window opens to show notebook dashboard.</p>
<img src="/jupyter/images/jupyter_notebook_dashboard.jpg" alt="Jupyter Notebook Dashboard" />
<p>Observe that the dashboard shows a dropdown near the right border of browser with an arrow beside the New button. It contains the currently available notebook kernels. Now, choose Python 3, then a new notebook opens in a new tab. An input cell as similar to that of in IPython console is displayed.</p>
<p>You can execute any Python expression in it. The result will be displayed in the Out cell.</p>
<img src="/jupyter/images/result_out_cell.jpg" alt="Result Out Cell" />
<h1>Jupyter Notebook - Dashboard</h1>
<p>The dashboard of Jupyter Notebook contains three tabs as shown in the screenshot given below &minus;</p>
<img src="/jupyter/images/jupyter_dashboard.jpg" alt="Jupyter Dashboard" />
<h2>Files Tab</h2>
<p>The "Files" tab displays files and folders under current directory from which notebook app was invoked. The row corresponding to a notebook which is currently open and the running status is shown just beside the last modified column. It also displays Upload button using which a file can be uploaded to notebook server.</p>
<h2>Running Tab</h2>
<p>The "Running" tab shows which of the notebooks are currently running.</p>
<h2>Cluster Tab</h2>
<p>The third tab, "Clusters", is provided by IPython parallel. IPython's parallel computing framework, an extended version of the IPython kernel.</p>
<p>From the New dropdown choose Terminal to open a cmd window. You can now start an IPython terminal here.</p>
<img src="/jupyter/images/ipython_terminal.jpg" alt="IPython Terminal" />
<h1>Jupyter Notebook - User Interface</h1>
<p>In the user interface of Jupyter, just beside the logo in the header, the file name is displayed.</p>
<img src="/jupyter/images/jupyter_filename_creation.jpg" alt="Jupyter Filename Creation" />
<p>You can find the menu bar below the header. Each menu contains many options that will be discussed later.</p>
<img src="/jupyter/images/jupyter_notebook_menubar.jpg" alt="Jupyter Notebook MenuBar" />
<p>A row of icons forming toolbar helps user to perform often required operations</p>
<img src="/jupyter/images/jupyter_notebook_toolbar.jpg" alt="Jupyter Notebook ToolBar" />
<p>The notebook has two modes &minus; <b>Command mode</b> and <b>Edit mode</b>. Notebook enters edit mode when a cell is clicked. Notice the pencil symbol just besides name of kernel.</p>
<img src="/jupyter/images/jupyter_notebook_editmode.jpg" alt="Jupyter Notebook Editmode" />
<p>Kernel indicator symbol is displayed just to the right of kernel name. Note that a hollow circle means kernel is idle and solid circle means it is busy.</p>
<img src="/jupyter/images/jupyter_notebook_kernel_indicator.jpg" alt="Jupyter Notebook Kernel Indicator" />
<h2>File Menu</h2>
<p>The following are the options available in the File menu &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:12%;">Sr.No.</th>
<th class="ts">File menu &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>New notebook</b></p>
<p>choose the kernel to start new notebook</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Open</b></p>
<p>Takes user to dashboard to choose notebook to open</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Save as</b></p>
<p>save current notebook and start new kernel</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Rename</b></p>
<p>rename current notebook</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Save</b></p>
<p>saves current notebook and stores current checkpoint</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>Revert</b></p>
<p>reverts state of notebook to earlier checkpoint</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>Download</b></p>
<p>export notebook in one of various file formats</p></td>
</tr>
</table>
<p>The file formats that are available are shown below &minus;</p>
<img src="/jupyter/images/file_formats.jpg" alt="File Formats" />
<h2>Edit Menu</h2>
<p>Edit menu consists of buttons to perform cut, copy and paste cells, delete selected cell, split and merge cells, move cells up and down, find and replace within notebook, cut/copy attachments and insert image.</p>
<h2>View Menu</h2>
<p>Buttons in this menu help us to hide/display header, toolbar and cell numbers.</p>
<h2>Insert Menu</h2>
<p>This menu gives you options for inserting cell before or after the current cell.</p>
<h2>Cell Menu</h2>
<p>The options in this menu let user run all or specific cells in the notebook. You can also set the cell type to code type, markdown or raw nbconvert type.</p>
<h2>Kernel Menu</h2>
<p>From this menu you can start, interrupt, restart or shutdown the kernel. You can also start a new kernel.</p>
<h2>Widgets Menu</h2>
<p>From this menu you can save, clear, download or embed widget state.</p>
<h2>Help menu</h2>
<p>Various predefined keyboard shortcuts are displayed from this menu. You can also edit the shortcuts as per your convenience.</p>
<h1>Jupyter Notebook - Types of Cells</h1>
<p>Cells in Jupyter notebook are of three types &minus; <b>Code, Markdown</b> and <b>Raw</b>.</p>
<h2>Code Cells</h2>
<p>Contents in this cell are treated as statements in a programming language of current kernel. Default kernel is Python. So, we can write Python statements in a code cell. When such cell is run, its result is displayed in an output cell. The output may be text, image, matplotlib plots or HTML tables. Code cells have rich text capability.</p>
<h2>Markdown Cells</h2>
<p>These cells contain text formatted using markdown language. All kinds of formatting features are available like making text bold and italic, displaying ordered or unordered list, rendering tabular contents etc. Markdown cells are especially useful to provide documentation to the computational process of the notebook.</p>
<h2>Raw Cells</h2>
<p>Contents in raw cells are not evaluated by notebook kernel. When passed through nbconvert, they will be rendered as desired. If you type LatEx in a raw cell, rendering will happen after nbconvert is applied.</p>
<img src="/jupyter/images/raw_cells.jpg" alt="Raw Cells" />
<h1>Jupyter Notebook - Editing</h1>
<p>While the menu bar and toolbar lets you perform various operations on notebook, it is desirable to be able to use keyboard shortcuts to perform them quickly.</p>
<p>Jupyter Notebooks have two different keyboard input modes &minus;</p>
<ul class="list">
<li><p><b>Command Mode</b> &minus; Binds the keyboard to notebook level actions. Indicated by a grey cell border with a blue left margin.</p></li>
<li><p><b>Edit Mode</b> &minus; When you are typing in a cell. Indicated by a green cell border.</p></li>
</ul>
<p>Command Mode (press Esc to enable)</p>
<table class="table table-bordered">
<tr>
<td style="width:21%;"><p><b>F</b></p></td>
<td>find and replace</td>
<td style="width:15%;"><p><b>1</b></p></td>
<td>change cell to heading 1</td>
</tr>
<tr>
<td><p><b>Ctrl-Shift-F</b></p></td>
<td>open the command palette</td>
<td><p><b>2</b></p></td>
<td style="vertical-align:middle;">change cell to heading 2</td>
</tr>
<tr>
<td><p><b>Ctrl-Shift-P</b></p></td>
<td>open the command palette</td>
<td><p><b>3</b></p></td>
<td style="vertical-align:middle;">change cell to heading 3</td>
</tr>
<tr>
<td><p><b>Enter</b></p></td>
<td>enter edit mode</td>
<td class="ts"><p><b>4</b></p></td>
<td>change cell to heading 4</td>
</tr>
<tr>
<td><p><b>P</b></p></td>
<td>open the command palette</td>
<td><p><b>5</b></p></td>
<td style="vertical-align:middle;">change cell to heading 5</td>
</tr>
<tr>
<td><p><b>Shift-Enter</b></p></td>
<td>run cell, select below</td>
<td><p><b>6</b></p></td>
<td style="vertical-align:middle;">change cell to heading 6</td>
</tr>
<tr>
<td><p><b>Ctrl-Enter</b></p></td>
<td>run selected cells</td>
<td><p><b>A</b></p></td>
<td>insert cell above</td>
</tr>
<tr>
<td><p><b>Alt-Enter</b></p></td>
<td>run cell and insert below</td>
<td><p><b>B</b></p></td>
<td>insert cell below</td>
</tr>
<tr>
<td><p><b>Y</b></p></td>
<td>change cell to code</td>
<td><p><b>X</b></p></td>
<td>cut selected cells</td>
</tr>
<tr>
<td><p><b>M</b></p></td>
<td>change cell to markdown</td>
<td><p><b>C</b></p></td>
<td>copy selected cells</td>
</tr>
<tr>
<td><p><b>R</b></p></td>
<td>change cell to raw</td>
<td><p><b>V</b></p></td>
<td>paste cells below</td>
</tr>
<tr>
<td><p><b>K</b></p></td>
<td>select cell above</td>
<td><p><b>Z</b></p></td>
<td>undo cell deletion</td>
</tr>
<tr>
<td><p><b>Up</b></p></td>
<td>select cell above</td>
<td><p><b>D,D</b></p></td>
<td>delete selected cells</td>
</tr>
<tr>
<td><p><b>Down</b></p></td>
<td>select cell below</td>
<td><p><b>Shift-M</b></p></td>
<td><p>merge selected cells, or current cell with cell below if only one cell is selected</p></td>
</tr>
<tr>
<td><p><b>J</b></p></td>
<td>select cell below</td>
<td><p><b>Shift-V</b></p></td>
<td>paste cells above</td>
</tr>
<tr>
<td><p><b>Shift-K</b></p></td>
<td>extend selected cells above</td>
<td><p><b>L</b></p></td>
<td style="vertical-align:middle;">toggle line numbers</td>
</tr>
<tr>
<td><p><b>Shift-Up</b></p></td>
<td>extend selected cells above</td>
<td><p><b>O</b></p></td>
<td style="vertical-align:middle;">toggle output of selected cells</td>
</tr>
<tr>
<td><p><b>Shift-Down</b></p></td>
<td>extend selected cells below</td>
<td><p><b>Shift-O</b></p></td>
<td>toggle output scrolling of selected cells</td>
</tr>
<tr>
<td><p><b>Shift-J</b></p></td>
<td>extend selected cells below</td>
<td><p><b>I,I</b></p></td>
<td style="vertical-align:middle;">interrupt the kernel</td>
</tr>
<tr>
<td><p><b>Ctrl-S</b></p></td>
<td>Save and Checkpoint</td>
<td><p><b>0,0</b></p></td>
<td>restart the kernel (with dialog)</td>
</tr>
<tr>
<td><p><b>S</b></p></td>
<td>Save and Checkpoint</td>
<td><p><b>Esc</b></p></td>
<td style="vertical-align:middle;">close the pager</td>
</tr>
<tr>
<td><p><b>Shift-L</b></p></td>
<td>toggles line numbers in all cells, and persist the setting</td>
<td><p><b>Q</b></p></td>
<td style="vertical-align:middle;">close the pager</td>
</tr>
<tr>
<td><p><b>Shift-Space</b></p></td>
<td>scroll notebook up</td>
<td><p><b>Space</b></p></td>
<td>scroll notebook down</td>
</tr>
</table>
<p>Edit Mode (press Enter to enable)</p>
<table class="table table-bordered">
<tr>
<td><p><b>Tab</b></p></td>
<td>code completion or indent</td>
<td><p><b>Ctrl-Home</b></p></td>
<td>go to cell start</td>
</tr>
<tr>
<td><p><b>Shift-Tab</b></p></td>
<td>tooltip</td>
<td><p><b>Ctrl-Up</b></p></td>
<td>go to cell start</td>
</tr>
<tr>
<td><p><b>Ctrl-]</b></p></td>
<td>indent</td>
<td><p><b>Ctrl-End</b></p></td>
<td>go to cell end</td>
</tr>
<tr>
<td><p><b>Ctrl-[</b></p></td>
<td>dedent</td>
<td><p><b>Ctrl-Down</b></p></td>
<td>go to cell end</td>
</tr>
<tr>
<td><p><b>Ctrl-A</b></p></td>
<td>select all</td>
<td><p><b>Ctrl-Left</b></p></td>
<td>go one word left</td>
</tr>
<tr>
<td><p><b>Ctrl-Z</b></p></td>
<td>undo</td>
<td><p><b>Ctrl-Right</b></p></td>
<td>go one word right</td>
</tr>
<tr>
<td><p><b>Ctrl-/</b></p></td>
<td>comment</td>
<td><p><b>Ctrl-M</b></p></td>
<td>enter command mode</td>
</tr>
<tr>
<td><p><b>Ctrl-D</b></p></td>
<td>delete whole line</td>
<td><p><b>Ctrl-Shift-F</b></p></td>
<td>open the command palette</td>
</tr>
<tr>
<td><p><b>Ctrl-U</b></p></td>
<td>undo selection</td>
<td><p><b>Ctrl-Shift-P</b></p></td>
<td>open the command palette</td>
</tr>
<tr>
<td><p><b>Insert</b></p></td>
<td>toggle overwrite flag</td>
<td><p><b>Esc</b></p></td>
<td>enter command mode</td>
</tr>
<tr>
<td><p><b>Ctrl-Backspace</b></p></td>
<td style="vertical-align:middle;">delete word before</td>
<td><p><b>Ctrl-Y</b></p></td>
<td>redo</td>
</tr>
<tr>
<td><p><b>Ctrl-Delete</b></p></td>
<td>delete word after</td>
<td><p><b>Alt-U</b></p></td>
<td>redo selection</td>
</tr>
<tr>
<td><p><b>Shift-Enter</b></p></td>
<td>run cell, select below</td>
<td><p><b>Ctrl-Shift-Minus</b></p></td>
<td style="vertical-align:middle;">split cell at cursor</td>
</tr>
<tr>
<td><p><b>Ctrl-Enter</b></p></td>
<td>run selected cells</td>
<td><p><b>Down</b></p></td>
<td>move cursor down</td>
</tr>
<tr>
<td><p><b>Alt-Enter</b></p></td>
<td>run cell and insert below</td>
<td><p><b>Up</b></p></td>
<td>move cursor up</td>
</tr>
<tr>
<td><p><b>Ctrl-S</b></p></td>
<td>Save and Checkpoint</td>
<td><p><b></b></p></td>
<td></td>
</tr>
</table>
<h1>Jupyter Notebook - Markdown Cells</h1>
<p>Markdown cell displays text which can be formatted using markdown language. In order to enter a text which should not be treated as code by Notebook server, it must be first converted as markdown cell either from cell menu or by using keyboard shortcut M while in command mode. The In[] prompt before cell disappears.</p>
<h2>Header cell</h2>
<p>A markdown cell can display header text of 6 sizes, similar to HTML headers. Start the text in markdown cell by # symbol. Use as many # symbols corresponding to level of header you want. It means single # will render biggest header line, and six # symbols renders header of smallest font size. The rendering will take place when you run the cell either from cell menu or run button of toolbar.</p>
<p>Following screenshot shows markdown cells in edit mode with headers of three different levels.</p>
<img src="/jupyter/images/markdown_cells_three_levels.jpg" alt=" Markdown Cells Three Levels" />
<p>When cells are run, the output is as follows &minus;</p>
<img src="/jupyter/images/markdown_cells_output.jpg" alt="Markdown Cells Output" />
<p>Note that Jupyter notebook markdown doesn’t support WYSWYG feature. The effect of formatting will be rendered only after the markdown cell is run.</p>
<h2>Ordered Lists</h2>
<p>To render a numbered list as is done by &lt;ol&gt; tag of HTML, the First item in the list should be numbered as 1. Subsequent items may be given any number. It will be rendered serially when the markdown cell is run. To show an indented list, press tab key and start first item in each sublist with 1.</p>
<p>If you give the following data for markdown &minus;</p>
<img src="/jupyter/images/ordered_lists.jpg" alt="Ordered Lists"/>
<p>It will display the following list &minus;</p>
<img src="/jupyter/images/ordered_list_output.jpg" alt="Ordered List Output" />
<h2>Bullet lists</h2>
<p>Each item in the list will display a solid circle if it starts with – symbol where as solid square symbol will be displayed if list starts with * symbol. The following example explains this feature &minus;</p>
<img src="/jupyter/images/bullet_lists.jpg" alt="Bullet Lists" />
<p>The rendered markdown shows up as below &minus;</p>
<img src="/jupyter/images/bullet_lists_output.jpg" alt="Bullet Lists Output" />
<h2>Hyperlinks</h2>
<p>Markdown text starting with http or https automatically renders hyperlink. To attach link to text, place text in square brackets [] and link in parentheses () optionally including hovering text. Following screenshot will explain this.</p>
<img src="/jupyter/images/including_hyperlink.jpg" alt="Hyperlink Including" />
<p>The rendered markdown appears as shown below &minus;</p>
<img src="/jupyter/images/hyperlink_included.jpg" alt="Hyperlink Included" />
<h2>Bold and Italics</h2>
<p>To show a text in bold face, put it in between double underscores or two asterisks. To show in italics, put it between single underscores or single asterisks.</p>
<img src="/jupyter/images/applying_bold_italics.jpg" alt="Applying Bold and Italics" />
<p>The result is as shown below &minus;</p>
<img src="/jupyter/images/bold_italics_output.jpg" alt="Bold and Italics Output" />
<h2>Images</h2>
<p>To display image in a markdown cell, choose ‘Insert image’ option from Edit menu and browse to desired image file. The markdown cell shows its syntax as follows &minus;</p>
<img src="/jupyter/images/logo_attachment.jpg" alt="Logo Attachment" />
<p>Image will be rendered on the notebook as shown below &minus;</p>
<img src="/jupyter/images/jupyter_logo.jpg" alt="Jupyter Logo" />
<h2>Table</h2>
<p>In a markdown cell, a table can be constructed using | (pipe symbol) and – (dash) to mark columns and rows. Note that the symbols need not be exactly aligned while typing. It should only take respective place of column borders and row border. Notebook will automatically resize according to content. A table is constructed as shown below &minus;</p>
<img src="/jupyter/images/table_construction.jpg" alt="Table Construction" />
<p>The output table will be rendered as shown below &minus;</p>
<img src="/jupyter/images/table_output.jpg" alt="Table Output" />
<h1>Jupyter Notebook - Cell Magic Functions</h1>
<p>In this chapter, let us understand cell magic functions and their functionalities.</p>
<h2>%%html</h2>
<p>This cell magic function renders contents of code cell as html script.</p>
<img src="/jupyter/images/html_script.jpg" alt="Html Script" />
<h2>%%js or %%javascript</h2>
<p>You can embed javascript code in Jupyter notebook cell with the help of this cell magic command.</p>
<img src="/jupyter/images/javascript_code.jpg" alt="Embedding JavaScript code" />
<p></p>
<img src="/jupyter/images/javascript_code_output.jpg" alt="JavaScript Code Output" />
<h2>%%writefile</h2>
<p>Contents of code cell are written to a file using this command.</p>
<img src="/jupyter/images/write_file.jpg" alt="Write File" />
<h1>Jupyter Notebook - Plotting</h1>
<p>IPython kernel of Jupyter notebook is able to display plots of code in input cells. It works seamlessly with <b>matplotlib</b> library. The inline option with the <b>%matplotlib</b> magic function renders the plot out cell even if <b>show()</b> function of plot object is not called. The <b>show()</b> function causes the figure to be displayed below in[] cell without out[] with number.</p>
<img src="/jupyter/images/matplotlib_library.jpg" alt="Matplotlib Library" />
<p>Now, add <b>plt.show()</b> at the end and run the cell again to see the difference.</p>
<p>Note that the %matplotlib notebook magic renders interactive plot.</p>
<p>Just below the figure, you can find a tool bar to switch views, pan, zoom and download options.</p>
<img src="/jupyter/images/matplotlib_library_toolbar.jpg" alt="Matplotlib Library Toolbar" />
<p>Importantly, if you modify the data underneath the plot, the display changes dynamically without drawing another plot.</p>
<p>In the above example, change the data sets of x and y in the cell below and plot the figure again, the figure above will get dynamically refreshed.</p>
<img src="/jupyter/images/modifying_data_underneath.jpg" alt="Modify Data Underneath" />
<h1>Jupyter - Converting Notebooks</h1>
<p>Jupyter notebook files have <b>.ipynb</b> extension. Notebook is rendered in web browser by the notebook app. It can be exported to various file formats by using download as an option in the file menu. Jupyter also has a command line interface in the form of <b>nbconvert</b> option. By default, nbconvert exports the notebook to HTML format. You can use the following command for tis purpose &minus;</p>
<pre class="result notranslate">
jupyter nbconvert mynotebook.ipynb
</pre>
<p>This will convert <b>mynotebook.ipynb</b> to the <b>mynotebook.html</b>. Other export format is specified with <b>`--to`</b> clause.</p>
<p>Note that other options include ['asciidoc', 'custom', 'html', 'latex', 'markdown', 'notebook', 'pdf', 'python', 'rst', 'script', 'slides']</p>
<p>HTML includes 'basic' and 'full' templates. You can specify that in the command line as shown below &minus;</p>
<pre class="result notranslate">
jupyter nbconvert --to html --template basic mynotebook.ipynb
</pre>
<p>LaTex is a document preparation format used specially in scientific typesetting. Jupyter includes 'base', 'article' and 'report' templates.</p>
<pre class="result notranslate">
jupyter nbconvert --to latex –template report mynotebook.ipynb
</pre>
<p>To generate PDF via latex, use the following command &minus;</p>
<pre class="result notranslate">
jupyter nbconvert mynotebook.ipynb --to pdf
</pre>
<p>Notebook can be exported to HTML slideshow. The conversion uses Reveal.js in the background. To serve the slides by an HTTP server, add --postserve on the command-line. To make slides that does not require an internet connection, just place the Reveal.js library in the same directory where <b>your_talk.slides.html</b> is located.</p>
<pre class="result notranslate">
jupyter nbconvert myslides.ipynb --to slides --post serve
</pre>
<p>The markdown option converts notebook to simple markdown output. Markdown cells are unaffected, and code cells indented 4 spaces.</p>
<pre class="result notranslate">
--to markdown
</pre>
<p>You can use <b>rst</b> option to convert notebook to Basic reStructuredText output. It is useful as a starting point for embedding notebooks in Sphinx docs.</p>
<pre class="result notranslate">
--to rst
</pre>
<p>This is the simplest way to get a Python (or other language, depending on the kernel) script out of a notebook.</p>
<pre class="result notranslate">
--to script
</pre>
<h1>Jupyter Notebook - IPyWidgets</h1>
<p>IPyWidgets is a Python library of HTML interactive widgets for Jupyter notebook. Each UI element in the library can respond to events and invokes specified event handler functions. They enhance the interactive feature of Jupyter notebook application.</p>
<p>In order to incorporate widgets in the notebook, we have to import the following module as shown below &minus;</p>
<pre class="result notranslate">
from ipywidgets import widgets
</pre>
<p>Some basic IPyWidgets are explained here &minus;</p>
<h2>Text input</h2>
<p>The <b>widgets.text()</b> function renders widgets in the notebook. It is similar to text box form element in HTML. The object of this widget has <b>on_submit()</b> method which listens to activity of the text field and can invoke event handler given as an argument to it.</p>
<h2>Button</h2>
<p>This widget is similar to HTML button. When it is clicked, the event is registered by <b>on_click()</b> method which calls the click event handler.</p>
<h2>IntSlider</h2>
<p>A slider control which displays the incrementing integer values. There is also a FloatSlider and IntRangeSlider (changing integer between a range)</p>
<h2>Label</h2>
<p>This widget is useful to display non editable text in the notebook.</p>
<h2>display()</h2>
<p>This function from <b>ipywidgets</b> module renders the widget object in notebook’s input cell.</p>
<h2>Interact</h2>
<p>This function automatically renders a widget depending upon type of data argument given to it. First argument to this function is the event handler and second is a value passed to event handler itself.</p>
<p>Following example shows three label widgets, two text widgets and a button with ‘add’ caption. When the button is clicked, sum of numbers in two text input fields is displayed on the lowermost label.</p>
<img src="/jupyter/images/form_creation.jpg" alt="Form Creation" />
<h1>Jupyter QtConsole - Getting Started</h1>
<p>In this chapter, let us understand how to get started with QtConsole. This chapter will give you an overview about this software and explains its installation steps.</p>
<h2>Overview</h2>
<p>The Qt console is a GUI application similar to IPython terminal. However, it provides a number of enhancements which are not available in text based IPython terminal. The enhance features are inline figures, multi-line editing with syntax highlighting, graphical calltips, etc. The Qt console can use any Jupyter kernel, default being IPython kernel.</p>
<h2>Installation</h2>
<p>Jupyter QtConsole is a part of Project Jupyter. Anaconda distribution is already having QTconsole application in it. In order to install it individually, use pip command as shown below &minus;</p>
<pre class="result notranslate">
pip3 install qtconsole
</pre>
<p>You can also use the conda command for this purpose &minus;</p>
<pre class="result notranslate">
conda install qtconsole
</pre>
<p>You can start Jupyter console from Anaconda navigator. To start it from the command line, you should use the following command, either from the Windows command prompt or Anaconda prompt &minus;</p>
<pre class="result notranslate">
jupyter qtonsole
</pre>
<p>You get a terminal similar to IPython terminal with first In[] prompt. You can now execute any Python expression exactly like we do in IPython terminal or Jupyter notebook</p>
<img src="/jupyter/images/jupyter_qtconsole.jpg" alt="Jupyter QtConsole" />
<h1>Jupyter QtConsole - Multiline Editing</h1>
<p>Multiline editing is one of the features which is not available in IPython terminal. In order to enter more than one statements in a single input cell, press <b>ctrl+enter</b> after the first line. Subsequently, just pressing enter will go on adding new line in the same cell. To stop entering new lines and running cell, press enter key one more time at the end. The cell will run and output will be displayed in next out[] cell.</p>
<img src="/jupyter/images/multiline_editing.jpg" alt="Multiline Editing" />
<h1>Jupyter QtConsole - Inline Graphics</h1>
<p>Another important enhancement offered by QtConsole is the ability to display inline graphics, especially plots. The feature works well with Matplotlib as well as other plotting libraries.</p>
<img src="/jupyter/images/lnline_graphics.jpg" alt="Inline Graphics" />
<h1>Jupyter QtConsole - Save to HTML</h1>
<p>This option to save the QtConsole output as HTML file is available in File menu. You can choose to create file with inline image or the plotted figure as external png file in an adjacent folder (named as qt_files).</p>
<img src="/jupyter/images/qtconsole_output_html.jpg" alt="QtConsole output as HTML" />
<h1>Jupyter QtConsole - Multiple Consoles</h1>
<p>You can open more than one tabs in Jupyter console application. Three options in File menu are provided for this purpose.</p>
<ul class="list">
<li><p><b>New Tab with New kernel</b> &minus; You can load a new kernel with this file menu.</p></li>
<li><p><b>New Tab with Existing kernel</b> &minus; Using this option, you can choose from additional kernels apart from IPython kernel.</p></li>
<li><p><b>New Tab with Same Kernel</b> &minus; This creates a slave of kernel loaded on a particular tab. As a result, object initialized on master tab will be accessible in slave and vice versa.</p></li>
</ul>
<img src="/jupyter/images/multiple_consoles.jpg" alt="Multiple Consoles" />
<h1>Connecting to Jupyter Notebook</h1>
<p>There is a %qtconsole magic command available for use with Jupyter notebook. This invokes the QtConsole as a slave terminal to notebook frontend. As a result, data between notebook and Qtconsole terminal can be shared.</p>
<img src="/jupyter/images/connecting_jupyter_notebook.jpg" alt="Connecting Jupyter Notebook" />
<p>You can see that the variable in notebook is accessible within <b>qtconsole</b> window. Also, a new variable in Qtconsole is used back in notebook.</p>
<p>Observe that the input and output cells are numbered incrementally between the two.</p>
<h1>Using github and nbviewer</h1>
<p><b>Sharing Jupyter notebook – Using github and nbviewer</b></p>
<p>Jupyter Notebook files with <b><i>.ipynb</i></b> extension in a GitHub repository will be rendered as static HTML files when they are opened. The interactive features of the notebook, such as custom JavaScript plots, will not work in your repository on GitHub.</p>
<p>To share notebook file using github, login to <a href="https://github.com/" target="_blank" rel="nofollow">https://github.com</a>and create a public repository. Then upload your files using upload file button as shown below &minus;</p>
<img src="/jupyter/images/github.jpg" alt="Github" />
<p>This will give you an option to commit the changes made to the repository. Then, the repository will show uploaded file as below &minus;</p>
<img src="/jupyter/images/updated_repository.jpg" alt="Updated Repository" />
<p>Click on the uploaded file to view inside github viewer. You can share the highlighted URL to others.</p>
<img src="/jupyter/images/inside_github_viewer.jpg" alt="Inside Github viewer" />
<p>Another way to view the notebook file online is by using nbviewer utility of Project Jupyter. Open <a href="https://nbviewer.jupyter.org/" target="_blank" rel="nofollow">https://nbviewer.jupyter.org/</a>  and put URL of file in your repository in the textfield as shown. Press Go button to view the notebook.</p>
<img src="/jupyter/images/nbviewer.jpg" alt="nbviewer" />
<p>Both these methods display notebook file as static html. To be able to execute code in the notebook, open it using Binder application of Jupyter project.</p>
<img src="/jupyter/images/binder_application.jpg" alt="Binder Application" />
<p>In the nbviewer window you will see ‘Execute on Binder’ button. Click on it and you will see the notebook file opened exactly like you open it from local dashboard of notebook server on your local machine. You can perform all actions like add/edit cells, run the cells etc.</p>
<img src="/jupyter/images/execute_on_binder.jpg" alt="Execute On Binder" />
<h1>JupyterLab - Overview</h1>
<p>Project Jupyter describes JupyterLab as a next generation web based user interfaces for all products under the Jupyter ecosystem. It enables you to work seamlessly with notebook, editors and terminals in an extensible manner.</p>
<p>Some of the important features of JupyterLab are discussed below &minus;</p>
<ul class="list">
<li><p>Code Console acts as scratchpad for running code interactively. It has full support for rich output and can be linked to a notebook kernel to log notebook activity.</p></li>
<li><p>Any text file (Markdown, Python, R, LaTeX, etc.) can be run interactively in any Jupyter kernel.</p></li>
<li><p>Notebook cell output can be shown into its own tab, or along with the notebook, enabling simple dashboards with interactive controls backed by a kernel.</p></li>
<li><p>Live editing of document reflects in other viewers such as editors or consoles. It is possible to have live preview of Markdown, Delimiter-separated Values, or Vega/Vega-Lite documents.</p></li>
</ul>
<p>JupyterLab can handle many file formats (images, CSV, JSON, Markdown, PDF etc.). It also displays rich output in these formats. JupyterLab provides customizable keyboard shortcuts uses key maps from many well-known text editors.</p>
<h1>JupyterLab - Installation and Getting Started</h1>
<p>You can try online the features of JupyterLab before installing. Visit <a href="https://jupyter.org/try" target="_blank" rel="nofollow">https://jupyter.org/try</a> and choose ‘try JupyterLab’ option.</p>
<img src="/jupyter/images/jupyter_lab.jpg" alt="JupyterLab" />
<p>The launcher tab shows currently available kernels and consoles. You can start a new notebook based/terminal based on any of them. The left column is also having tabs for file browser, running kernels and tabs and settings view.</p>
<p>JupyterLab is normally installed automatically with Anaconda distribution. However, it can also be installed separately by using following conda command &minus;</p>
<pre class="result notranslate">
conda install -c conda-forge jupyterlab
</pre>
<p>You can also use the pip command for this purpose &minus;</p>
<pre class="result notranslate">
pip3 install jupyterlab
</pre>
<p>To start JupyterLab application, most convenient way is from Anaconda Navigator if it is installed.</p>
<img src="/jupyter/images/anaconda_navigator.jpg" alt="Anaconda Navigator" />
<p>Alternately start it from command line from Windows/Linux command terminal or Anaconda prompt using this command &minus;</p>
<pre class="result notranslate">
jupyter lab
</pre>
<p>Either way, the JupyterLab application’s launch screen looks like this &minus;</p>
<img src="/jupyter/images/launch_screen.jpg" alt="JupyterLab launch screen" />
<h1>JupyterLab - Interface</h1>
<p>To start a new notebook, click the desired kernel. In above screenshot, one kernel is seen that is Python3 kernel. Click it to start a Python notebook. Observe that its functionality is similar to the one we have studied in this tutorial.</p>
<img src="/jupyter/images/start_python_notebook.jpg" alt="Start a Python Notebook" />
<h2>Menu Bar</h2>
<p>The menu bar is at the top of window. The default menus you can find in this are &minus;</p>
<ul class="list">
<li><p><b>File</b> &minus; Actions related to files and directories.</p></li>
<li><p><b>Edit</b> &minus; Actions related to editing documents and other activities.</p></li>
<li><p><b>View</b> &minus; Actions that alter the appearance of JupyterLab.</p></li>
<li><p><b>Run</b> &minus; Actions for running code in different activities such as notebooks and code consoles.</p></li>
<li><p><b>Kernel</b> &minus; Actions for managing kernels, which are separate processes for running code.</p></li>
<li><p><b>Tabs</b> &minus; A list of the open documents and activities in the dock panel.</p></li>
<li><p><b>Settings</b> &minus; Common settings and an advanced settings editor.</p></li>
<li><p><b>Help</b> &minus; A list of JupyterLab and kernel help links.</p></li>
</ul>
<p>The left sidebar shows buttons for starting a new launcher, adding a folder, uploading file and refresh file list. The right pane is the main working area where notebook, console and terminals are shown in tabbed view.</p>
<p>To start a new console, click + symbol in the left side bar to open a new launcher and then click the console option. The console will open in new tab on the right pane.</p>
<img src="/jupyter/images/starting_new_console.jpg" alt="Starting New Console" />
<p>Note that the input cell is at the bottom, but when it is run, the cell and its corresponding output cell appears in upper part of console tab.</p>
<p>The launcher also allows you open a text editor and a terminal in which IPython shell can be invoked.</p>
<img src="/jupyter/images/ipython_shell_text_editor.jpg" alt="IPython shell Text Editor" />
<h1>JupyterLab - Installing R Kernel</h1>
<p>Project Jupyter now supports kernels of programming environments. We shall now see how to install R kernel in anaconda distribution.</p>
<p>In Anaconda prompt window enter following command &minus;</p>
<pre class="result notranslate">
conda install -c r r-essentials
</pre>
<p>Now, from the launcher tab, choose R kernel to start a new notebook.</p>
<img src="/jupyter/images/launcher_tab_r_kernel.jpg" alt="Launcher Tab R kernel" />
<p>The following is a screenshot of Jupyter notebook having R kernel &minus;</p>
<img src="/jupyter/images/jupyter_notebook_r_kernel.jpg" alt="Jupyter notebook having R kernel" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/jupyter/jupyterlab_installing_r_kernel.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/jupyter/jupyter_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
