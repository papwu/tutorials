<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Struts 2 - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Struts 2 - Quick Guide - Model View Controller or MVC as it is popularly called, is a software design pattern for developing web applications. A Model View Controller pattern is made up"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/struts_2/struts_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#0c2444;
}
a.demo {
    background:#0c2444;
}
li.heading {
    background:#0c2444;
}
.course-box{background:#0c2444}
.home-intro-sub p{color:#0c2444}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/struts_2/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/struts_2/images/struts-mini-logo.jpg" alt="Struts2 Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Struts 2 Tutorial</li>
<li><a href="/struts_2/index.htm">Struts2 - Home</a></li>
<li><a href="/struts_2/basic_mvc_architecture.htm">Struts2 - Basic MVC Architecture</a></li>
<li><a href="/struts_2/struts_overview.htm">Struts2 - Overview</a></li>
<li><a href="/struts_2/struts_environment_setup.htm">Struts2 - Environment Setup</a></li>
<li><a href="/struts_2/struts_architecture.htm">Struts2 - Architecture</a></li>
<li><a href="/struts_2/struts_examples.htm">Struts2 - Examples</a></li>
<li><a href="/struts_2/struts_configuration.htm">Struts2 - Configuration</a></li>
<li><a href="/struts_2/struts_actions.htm">Struts2 - Actions</a></li>
<li><a href="/struts_2/struts_interceptors.htm">Struts2 - Interceptors</a></li>
<li><a href="/struts_2/struts_result_types.htm">Struts2 - Result Types</a></li>
<li><a href="/struts_2/struts_value_stack_ognl.htm">Struts2 - Value Stack/OGNL</a></li>
<li><a href="/struts_2/struts_file_uploads.htm">Struts2 - File Uploads</a></li>
<li><a href="/struts_2/struts_database_access.htm">Struts2 - Database Access</a></li>
<li><a href="/struts_2/struts_sending_email.htm">Struts2 - Sending Email</a></li>
<li><a href="/struts_2/struts_validations.htm">Struts2 - Validations</a></li>
<li><a href="/struts_2/struts_localization.htm">Struts2 - Localization</a></li>
<li><a href="/struts_2/struts_type_conversion.htm">Struts2 - Type Conversion</a></li>
<li><a href="/struts_2/struts_themes_templates.htm">Struts2 - Themes/Templates</a></li>
<li><a href="/struts_2/struts_exception_handling.htm">Struts2 - Exception Handling</a></li>
<li><a href="/struts_2/struts_annotations.htm">Struts2 - Annotations</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Struts 2 Tags</li>
<li><a href="/struts_2/struts_control_tags.htm">Struts2 - Control Tags</a></li>
<li><a href="/struts_2/struts_data_tags.htm">Struts2 - Data Tags</a></li>
<li><a href="/struts_2/struts_form_tags.htm">Struts2 - Form Tags</a></li>
<li><a href="/struts_2/struts_ajax_tags.htm">Struts2 - Ajax Tags</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Struts 2 Integrations</li>
<li><a href="/struts_2/struts_spring.htm">Struts2 - Spring</a></li>
<li><a href="/struts_2/struts_tiles.htm">Struts2 - Tiles</a></li>
<li><a href="/struts_2/struts_hibernate.htm">Struts2 - Hibernate</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Struts 2 Useful Resources</li>
<li><a href="/struts_2/struts_questions_answers.htm">Struts2 - Questions and Answers</a></li>
<li><a href="/struts_2/struts_quick_guide.htm">Struts2 - Quick Guide</a></li>
<li><a href="/struts_2/struts_useful_resources.htm">Struts2 - Useful Resources</a></li>
<li><a href="/struts_2/struts_discussion.htm">Struts2 - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Struts 2 - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/struts_2/struts_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/struts_2/struts_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Basic MVC Architecture</h1>
<p><b><u>M</u></b>odel <b><u>V</u></b>iew <b><u>C</u></b>ontroller or <b>MVC</b> as it is popularly called, is a software design pattern for developing web applications. A Model View Controller pattern is made up of the following three parts &minus;</p>
<ul class="list">
<li><p><b>Model</b> &minus; The lowest level of the pattern which is responsible for maintaining data.</p></li>
<li><p><b>View</b> &minus; This is responsible for displaying all or a portion of the data to the user.</p></li>
<li><p><b>Controller</b> &minus; Software Code that controls the interactions between the Model and View.</p></li>
</ul>
<p>MVC is popular as it isolates the application logic from the user interface layer and supports separation of concerns. Here the Controller receives all requests for the application and then works with the Model to prepare any data needed by the View. The View then uses the data prepared by the Controller to generate a final presentable response. The MVC abstraction can be graphically represented as follows.</p>
<img src="/struts_2/images/struts-mvc.jpg" alt="Struts MVC"  title="Struts MVC" /> 
<h2>The Model</h2> 
<p>The model is responsible for managing the data of the application. It responds to the request from the view and it also responds to instructions from the controller to update itself.</p>
<h2>The View</h2>
<p>It means presentation of data in a particular format, triggered by a controller's decision to present the data. They are script-based templating systems like JSP, ASP, PHP and very easy to integrate with AJAX technology.</p>
<h2>The Controller</h2> 
<p>The controller is responsible for responding to the user input and perform interactions on the data model objects. The controller receives the input, it validates the input and then performs the business operation that modifies the state of the data model.</p>
<p><b>Struts2</b> is a MVC based framework. In the coming chapters, let us see how we can use the MVC methodology within Struts2.</p>
<h1>Struts 2 - Overview</h1>
<p><b>Struts2</b> is a popular and mature web application framework based on the MVC design pattern. Struts2 is not just a new version of Struts 1, but it is a complete rewrite of the Struts architecture.</p>
<p>The Webwork framework initially started with Struts framework as the basis and its goal was to offer an enhanced and improved framework built on Struts to make web development easier for the developers.</p>
<p>After a while, the Webwork framework and the Struts community joined hands to create the famous Struts2 framework.</p>
<h2>Struts 2 Framework Features</h2>
<p>Here are some of the great features that may force you to consider Struts2 &minus;</p>
<ul class="list">
<li><p><b>POJO Forms and POJO Actions</b> &minus; Struts2 has done away with the Action Forms that were an integral part of the Struts framework. With Struts2, you can use any POJO to receive the form input. Similarly, you can now see any POJO as an Action class.</p></li>
<li><p><b>Tag Support</b> &minus; Struts2 has improved the form tags and the new tags which allow the developers to write less code.</p></li>
<li><p><b>AJAX Support</b> &minus; Struts2 has recognized the take over by Web2.0 technologies, and has integrated AJAX support into the product by creating AJAX tags, this function is very similar to the standard Struts2 tags.</p></li>
<li><p><b>Easy Integration</b> &minus; Integration with other frameworks like Spring, Tiles and SiteMesh is now easier with a variety of integration available with Struts2.</p></li>
<li><p><b>Template Support</b> &minus; Support for generating views using templates.</p></li>
<li><p><b>Plugin Support</b> &minus; The core Struts2 behavior can be enhanced and augmented by the use of plugins. A number of plugins are available for Struts2.</p></li>
<li><p><b>Profiling</b> &minus; Struts2 offers integrated profiling to debug and profile the application. In addition to this, Struts also offers integrated debugging with the help of built in debugging tools.</p></li>
<li><p><b>Easy to Modify Tags</b> &minus; Tag markups in Struts2 can be tweaked using Freemarker templates. This does not require JSP or java knowledge. Basic HTML, XML and CSS knowledge is enough to modify the tags.</p></li>
<li><p><b>Promote Less configuration</b> &minus; Struts2 promotes less configuration with the help of using default values for various settings. You don't have to configure something unless it deviates from the default settings set by Struts2.</p></li>
<li><p><b>View Technologies</b> &minus; Struts2 has a great support for multiple view options (JSP, Freemarker, Velocity and XSLT)</p></li>
</ul>
<p>Listed above are the Top 10 features of <b>Struts 2</b> which makes it as an Enterprise ready framework.</p>
<h2>Struts 2 Disadvantages</h2>
<p>Though Struts 2 comes with a list of great features, there are some limitations of the current version - Struts 2 which needs further improvement. Listed are some of the main points &minus;</p>
<ul class="list">
<li><p><b>Bigger Learning Curve</b> &minus; To use MVC with Struts, you have to be comfortable with the standard JSP, Servlet APIs and a large & elaborate framework.</p></li>
<li><p><b>Poor Documentation</b> &minus; Compared to the standard servlet and JSP APIs, Struts has fewer online resources, and many first-time users  find the online Apache documentation confusing and poorly organized.</p></li>
<li><p><b>Less Transparent</b> &minus; With Struts applications, there is a lot more going on behind the scenes than with normal Java-based Web applications which makes it difficult to understand the framework.</p></li>
</ul>
<p>Final note, a good framework should provide generic behavior that many different types of applications can make use of it.</p>
<p><b>Struts 2</b> is one of the best web frameworks and being highly used for the development of Rich Internet Applications (RIA).</p>
<h1>Struts 2 - Environment Setup</h1>
<p>Our first task is to get a minimal Struts 2 application running. This chapter will guide you on how to prepare a development environment to start your work with Struts 2.</p>
<p>I assume that you already have JDK (5+), Tomcat and Eclipse installed on your machine. If you do not have these components installed, then follow the given steps on fast track &minus;</p>
<h2>Step 1 - Setup Java Development Kit (JDK)</h2>
<p>You can download the latest version of SDK from Oracle's Java site &minus; <a rel="nofollow" href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank">Java SE Downloads</a>. You will find instructions for installing JDK in downloaded files, follow the given instructions to install and configure the setup. Finally, set PATH and JAVA_HOME environment variables to refer to the directory that contains java and javac, typically java_install_dir/bin and java_install_dir respectively.</p>
<p>If you are running Windows and installed the SDK in C:\jdk1.5.0_20, you should be inputting the following line in your C:\autoexec.bat file.</p>
<pre class="prettyprint notranslate">
set PATH = C:\jdk1.5.0_20\bin;%PATH%
set JAVA_HOME = C:\jdk1.5.0_20
</pre>
<p>Alternatively, on Windows NT/2000/XP &minus;</p>
<ul class="list">
<li><p>You can right-click on My Computer, Select Properties, then Advanced, then Environment Variables. Then, you would update the PATH value and press the OK button.</p></li>
<li><p>On Unix (Solaris, Linux, etc.), if the SDK is installed in /usr/local/jdk1.5.0_20 and you use the C shell, you would put the following into your .cshrc file.</p></li>
</ul>
<p>On Unix (Solaris, Linux, etc.), if the SDK is installed in /usr/local/jdk1.5.0_20 and you use the C shell, you would put the following into your .cshrc file.</p>
<pre class="prettyprint notranslate">
setenv PATH /usr/local/jdk1.5.0_20/bin:$PATH
setenv JAVA_HOME /usr/local/jdk1.5.0_20
</pre>
<p>Alternatively, if you use an Integrated Development Environment (IDE) like Borland JBuilder, Eclipse, IntelliJ IDEA, or Sun ONE Studio, compile and run a simple program to confirm that the IDE knows where you installed Java, otherwise do proper setup as per the given document of IDE.</p>
<h2>Step 2 - Setup Apache Tomcat</h2>
<p>You can download the latest version of Tomcat from <a rel="nofollow" href="https://tomcat.apache.org/" target="_blank">https://tomcat.apache.org/</a>. Once you downloaded the installation, unpack the binary distribution into a convenient location.</p>
<p>For example in C:\apache-tomcat-6.0.33 on windows, or /usr/local/apachetomcat-6.0.33 on Linux/Unix and create CATALINA_HOME environment variable pointing to these locations.</p>
<p>You can start Tomcat by executing the following commands on windows machine, or you can simply double click on startup.bat</p>
<pre class="prettyprint notranslate">
%CATALINA_HOME%\bin\startup.bat
 
or
 
C:\apache-tomcat-6.0.33\bin\startup.bat
</pre>
<p>Tomcat can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="prettyprint notranslate">
$CATALINA_HOME/bin/startup.sh
 
or
 
/usr/local/apache-tomcat-6.0.33/bin/startup.sh
</pre>
<p>After a successful startup, the default web applications included with Tomcat will be available by visiting <b>http://localhost:8080/</b>. If everything is fine, then it should display the following result &minus;</p>
<img src="/struts_2/images/tomcathomepage.jpg" alt="Tomcat Home page" />
<p>Further information about configuring and running Tomcat can be found in the documentation included here, as well as on the Tomcat website: <a rel="nofollow" href="https://tomcat.apache.org/" target="_blank">https://tomcat.apache.org/</a></p>
<p>Tomcat can be stopped by executing the following commands on windows machine &minus;</p>
<pre class="prettyprint notranslate">
%CATALINA_HOME%\bin\shutdown

or

C:\apache-tomcat-5.5.29\bin\shutdown
</pre>
<p>Tomcat can be stopped by executing the following commands on Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="prettyprint notranslate">
$CATALINA_HOME/bin/shutdown.sh

or

/usr/local/apache-tomcat-5.5.29/bin/shutdown.sh
</pre>
<h2>Step 3 - Setup Eclipse (IDE)</h2>
<p>All the examples in this tutorial are written using Eclipse IDE. I suggest that, you have the latest version of Eclipse installed in your machine.</p>
<p>To install Eclipse Download the latest Eclipse binaries from <a rel="nofollow" target="_blank" href="https://www.eclipse.org/downloads/">https://www.eclipse.org/downloads/</a>. Once you download the installation, unpack the binary distribution into a convenient location.</p>
<p>For example in C:\eclipse on windows, or /usr/local/eclipse on Linux/Unix and finally set PATH variable appropriately. Eclipse can be started by executing the following commands on windows machine, or you can simply double click on eclipse.exe</p>
<pre class="prettyprint notranslate">
%C:\eclipse\eclipse.exe
</pre>
<p>Eclipse can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="prettyprint notranslate">
$/usr/local/eclipse/eclipse
</pre>
<p>After a successful startup, if everything is fine, it should display the following result &minus;</p>
<img src="/struts_2/images/eclipsehomepage.jpg" alt="Eclipse Home page" />
<h2>Step 4 - Setup Struts2 Libraries</h2>
<p>Now if everything is fine, then you can proceed to setup your Struts2 framemwork. Following are the simple steps to download and install Struts2 on your machine.</p>
<ul class="list">
<li><p>Make a choice whether you want to install Struts2 on Windows, or Unix and then proceed to the next step to download .zip file for windows and .tz file for Unix.</p></li>
<li><p>Download the latest version of Struts2 binaries from <a target="_blank" rel="nofollow" href="https://struts.apache.org/download.cgi">https://struts.apache.org/download.cgi</a>.</p></li>
<li><p>At the time of writing this tutorial, I downloaded <b>struts-2.0.14-all.zip</b> and when you unzip the downloaded file it will give you directory structure inside C:\struts-2.2.3 as follows.</p></li>
</ul>
<img src="/struts_2/images/struts_directories.jpg" alt="Sturts Directories" />
<p>Second step is to extract the zip file in any location, I downloaded &amp; extracted <b>struts-2.2.3-all.zip</b> in <b>c:\</b> folder on my Windows 7 machine so that I have all the jar files into <b>C:\struts-2.2.3\lib</b>. Make sure you set your CLASSPATH variable properly otherwise you will face problem while running your application.</p>
<h1>Struts 2 - Architecture</h1>
<p>From a high level, Struts2 is a pull-MVC (or MVC2) framework. The Model-ViewController pattern in Struts2 is implemented with the following five core components &minus;</p>
<ul class="list">
<li>Actions</li>
<li>Interceptors</li>
<li>Value Stack / OGNL</li>
<li>Results / Result types</li>
<li>View technologies</li>
</ul>
<p><b>Struts 2</b> is slightly different from a traditional MVC framework, where the action takes the role of the model rather than the controller, although there is some overlap.</p>
<img src="/struts_2/images/struts_2_architecture.gif" alt="Struts 2 Architecture" />
<p>The above diagram depicts the <b><u>M</u></b>odel, <b><u>V</u></b>iew and <b><u>C</u></b>ontroller to the Struts2 high level architecture. The controller is implemented with a <b>Struts2</b> dispatch servlet filter as well as interceptors, this model is implemented with actions, and the view is a combination of result types and results. The value stack and OGNL provides common thread, linking and enabling integration between the other components.</p>
<p>Apart from the above components, there will be a lot of information that relates to configuration. Configuration for the web application, as well as configuration for actions, interceptors, results, etc.</p>
<p>This is the architectural overview of the Struts 2 MVC pattern. We will go through each component in more detail in the subsequent chapters.</p>
<h2>Request Life Cycle</h2>
<p>Based on the above diagram, you can understand the work flow through user's request life cycle in <b>Struts 2</b> as follows &minus;</p>
<ul class="list">
<li><p>User sends a request to the server for requesting for some resource (i.e. pages).</p></li>
<li><p>The Filter Dispatcher looks at the request and then determines the appropriate Action.</p></li>
<li><p>Configured interceptor functionalities applies such as validation, file upload etc.</p></li>
<li><p>Selected action is performed based on the requested operation.</p></li>
<li><p>Again, configured interceptors are applied to do any post-processing if required.</p></li>
<li><p>Finally, the result is prepared by the view and returns the result to the user.</p></li>
</ul>
<h1>Struts 2 - Hello World Example</h1>
<p>As you have already learnt from the Struts 2 architecture, when you click on a hyperlink or submit an HTML form in a Struts 2 web-application, the input is collected by the Controller which is sent to a Java class called Actions. After the Action is executed, a result selects a resource to render the response. The resource is generally a JSP, but it can also be a PDF file, an Excel spreadsheet, or a Java applet window.</p>
<p>Assuming that you already have built your development environment. Now, let us proceed for building our first <b>Hello World Struts2</b> project. The aim of this project is to build a web application that collects the user's name and displays "Hello World" followed by the user name.</p>
<p>We would have to create following four components for any Struts 2 project &minus;</p>
<table class="table table-bordered"> 
<tr>
<th style="width:10%">Sr.No</th>
<th style="text-align:center;">Components &amp; Description</th>
</tr> 
<tr>
<td class="ts">1</td>
<td><p><b>Action</b></p>
<p>Create an action class which will contain complete business logic and control the interaction between the user, the model, and the view.</p>
</td>
</tr> 
<tr>
<td class="ts">2</td>
<td><p><b>Interceptors</b></p>
<p>Create interceptors if required, or use existing interceptors. This is part of Controller.</p>
</td>
</tr> 
<tr>
<td class="ts">3</td>
<td><p><b>View</b></p>
<p>Create a JSPs to interact with the user to take input and to present the final messages.</p>
</td>
</tr> 
<tr>
<td class="ts">4</td>
<td><p><b>Configuration Files</b></p>
<p>Create configuration files to couple the Action, View and Controllers. These files are struts.xml, web.xml, struts.properties.</p>
</td>
</tr> 
</table>
<p>I am going to use Eclipse IDE, so that all the required components will be created under a Dynamic Web Project. Let us now start with creating Dynamic Web Project.</p>
<h2>Create a Dynamic Web Project</h2>
<p>Start your Eclipse and then go with <b>File &gt; New &gt; Dynamic Web Project</b> and enter project name as <b>HelloWorldStruts2</b> and set rest of the options as given in the following screen &minus;</p>
<img src="/struts_2/images/helloworldstruts1.jpg" alt="Hello World Sturts1" />
<p>Select all the default options in the next screens and finally check <b>Generate Web.xml deployment descriptor</b> option. This will create a dynamic web project for you in Eclipse. Now go with <b>Windows &gt; Show View &gt; Project Explorer</b>, and you will see your project window something as below &minus;</p>
<img src="/struts_2/images/helloworldstruts2.jpg" alt="Hello World Sturts2" />
<p>Now copy following files from struts 2 lib folder <b>C:\struts-2.2.3\lib</b> to our project's <b>WEB-INF\lib</b> folder. To do this, you can simply drag and drop all the following files into WEB-INF\lib folder.</p>
<ul class="list">
<li>commons-fileupload-x.y.z.jar</li>
<li>commons-io-x.y.z.jar</li>
<li>commons-lang-x.y.jar</li>
<li>commons-logging-x.y.z.jar</li>
<li>commons-logging-api-x.y.jar</li>
<li>freemarker-x.y.z.jar</li>
<li>javassist-.xy.z.GA</li>
<li>ognl-x.y.z.jar</li>
<li>struts2-core-x.y.z.jar</li>
<li>xwork-core.x.y.z.jar</li>
</ul>
<h2>Create Action Class</h2>
<p>Action class is the key to Struts 2 application and we implement most of the business logic in action class. So let us create a java file HelloWorldAction.java under <b>Java Resources &gt; src</b> with a package name <b>com.tutorialspoint.struts2</b> with the contents given below.</p>
<p>The Action class responds to a user action when user clicks a URL. One or more of the Action class's methods are executed and a String result is returned. Based on the value of the result, a specific JSP page is rendered.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.struts2;

public class HelloWorldAction {
   private String name;

   public String execute() throws Exception {
      return "success";
   }
   
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
}
</pre>
<p>This is a very simple class with one property called "name". We have standard getters and setter methods for the "name" property and an execute method that returns the string "success".</p>
<p>The Struts 2 framework will create an object of the <b>HelloWorldAction</b> class and call the executed method in response to a user's action. You put your business logic inside this method which finally returns the String constant. In other words, for each URL, you would have to implement one action class and either you can use that class name directly as your action name or you can map to some other name using struts.xml file as shown below.</p>
<h2>Create a View</h2>
<p>We need a JSP to present the final message, this page will be called by Struts 2 framework when a predefined action will happen and this mapping will be defined in struts.xml file. So let us create the below jsp file <b>HelloWorld.jsp</b> in the WebContent folder in your eclipse project. To do this, right click on the WebContent folder in the project explorer and select <b>New &gt;JSP File</b>.</p>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;%@ taglib prefix = "s" uri = "/struts-tags" %&gt;

&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      Hello World, &lt;s:property value = "name"/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The taglib directive tells the Servlet container that this page will be using the <b>Struts 2</b> tags and that these tags will be preceded by <b>s</b>.</p>
<p>The s:property tag displays the value of action class property "name&gt; which is returned by the method <b>getName()</b> of the HelloWorldAction class.</p>
<h2>Create Main Page</h2>
<p>We also need to create <b>index.jsp</b> in the WebContent folder. This file will serve as the initial action URL where a user can click to tell the Struts 2 framework to call a defined method of the HelloWorldAction class and render the HelloWorld.jsp view.</p>
<pre class="prettyprint notranslate">
&lt;%@ page language = "java" contentType = "text/html; charset = ISO-8859-1"
   pageEncoding = "ISO-8859-1"%&gt;
&lt;%@ taglib prefix = "s" uri = "/struts-tags"%&gt;
   &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" 
"http://www.w3.org/TR/html4/loose.dtd"&gt;

&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;h1&gt;Hello World From Struts2&lt;/h1&gt;
      &lt;form action = "hello"&gt;
         &lt;label for = "name"&gt;Please enter your name&lt;/label&gt;&lt;br/&gt;
         &lt;input type = "text" name = "name"/&gt;
         &lt;input type = "submit" value = "Say Hello"/&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The <b>hello</b> action defined in the above view file will be mapped to the HelloWorldAction class and its execute method using struts.xml file. When a user clicks on the Submit button it will cause the Struts 2 framework to run the execute method defined in the HelloWorldAction class and based on the returned value of the method, an appropriate view will be selected and rendered as a response.</p>
<h2>Configuration Files</h2>
<p>We need a mapping to tie the URL, the HelloWorldAction class (Model), and the HelloWorld.jsp (the view) together. The mapping tells the Struts 2 framework which class will respond to the user's action (the URL), which method of that class will be executed, and what view to render based on the String result that method returns.</p>
<p>So let us create a file called <b>struts.xml</b>. Since Struts 2 requires struts.xml to be present in the classes folder. Hence, create struts.xml file under the WebContent/WEB-INF/classes folder. Eclipse does not create the "classes" folder by default, so you need to do this yourself. To do this, right click on the WEB-INF folder in the project explorer and select <b>New &gt; Folder</b>. Your struts.xml should look like &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
   "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;

&lt;struts&gt;
   &lt;constant name = "struts.devMode" value = "true" /&gt;
   
   &lt;package name = "helloworld" extends = "struts-default"&gt;
     &lt;action name = "hello" 
         class = "com.tutorialspoint.struts2.HelloWorldAction" 
         method = "execute"&gt;
         &lt;result name = "success"&gt;/HelloWorld.jsp&lt;/result&gt;
      &lt;/action&gt;
   &lt;/package&gt;
&lt;/struts&gt;
</pre>
<p>Few words which need to be understood regarding the above configuration file. Here, we set the constant <b>struts.devMode</b> to <b>true</b>, because we are working in development environment and we need to see some useful log messages. Then, we define a package called <b>helloworld</b>.</p>
<p>Creating a package is useful when you want to group your actions together. In our example, we named our action as "hello" which is corresponding to the URL <b>/hello.action</b> and is backed up by the<b>HelloWorldAction.class</b>. The <b>execute</b> method of <b>HelloWorldAction.class</b> is the method that is run when the URL <b>/hello.action</b> is invoked. If the outcome of the execute method returns "success", then we take the user to <b>HelloWorld.jsp</b>.</p>
<p>Next step is to create a <b>web.xml</b> file which is an entry point for any request to Struts 2. The entry point of Struts2 application will be a filter defined in deployment descriptor (web.xml). Hence, we will define an entry of org.apache.struts2.dispatcher.FilterDispatcher class in web.xml. The web.xml file needs to be created under the WEB-INF folder under WebContent. Eclipse had already created a skeleton web.xml file for you when you created the project. So, lets just modify it as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;web-app xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns = "http://java.sun.com/xml/ns/javaee" 
   xmlns:web = "http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   xsi:schemaLocation = "http://java.sun.com/xml/ns/javaee 
   http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
   id = "WebApp_ID" version = "3.0"&gt;
   
   &lt;display-name&gt;Struts 2&lt;/display-name&gt;
   
   &lt;welcome-file-list&gt;
      &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
   &lt;/welcome-file-list&gt;
   
   &lt;filter&gt;
      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;filter-class&gt;
         org.apache.struts2.dispatcher.FilterDispatcher
      &lt;/filter-class&gt;
   &lt;/filter&gt;

   &lt;filter-mapping&gt;
      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
   &lt;/filter-mapping&gt;
&lt;/web-app&gt;
</pre>
<p>We have specified index.jsp to be our welcome file. Then we have configured the Struts2 filter to run on all urls (i.e, any url that match the pattern /*)</p>
<h2>To Enable Detailed Log</h2>
<p>You can enable complete logging functionality while working with Struts 2 by creating <b>logging.properties</b> file under <b>WEB-INF/classes</b> folder. Keep the following two lines in your property file &minus;</p>
<pre class="prettyprint notranslate">
org.apache.catalina.core.ContainerBase.[Catalina].level = INFO
org.apache.catalina.core.ContainerBase.[Catalina].handlers = \
   java.util.logging.ConsoleHandler
</pre>
<p>The default logging.properties specifies a ConsoleHandler for routing logging to stdout and also a FileHandler. A handler's log level threshold can be set using SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST or ALL.</p>
<p>That's it. We are ready to run our Hello World application using Struts 2 framework.</p>
<h2>Procedure for Executing the Application</h2>
<p>Right click on the project name and click <b>Export &gt; WAR File</b> to create a War file.</p>
<p>Then deploy this WAR in the Tomcat's webapps directory.</p>
<p>Finally, start Tomcat server and try to access URL <b>http://localhost:8080/HelloWorldStruts2/index.jsp</b>. This will give you following screen &minus;</p>
<img src="/struts_2/images/helloworldstruts4.jpg" alt="Hello World Struts4" />
<p>Enter a value "Struts2" and submit the page. You should see the next page</p>
<img src="/struts_2/images/helloworldstruts5.jpg" alt="Hello World Struts5" />
<p>Note that you can define <b>index</b> as an action in struts.xml file and in that case you can call index page as <b>http://localhost:8080/HelloWorldStruts2/index.action</b>. Check below how you can define index as an action &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
   "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;
&lt;struts&gt;
   &lt;constant name = "struts.devMode" value = "true" /&gt;
   &lt;package name = "helloworld" extends = "struts-default"&gt;

      &lt;action name = "index"&gt;
         &lt;result &gt;/index.jsp&lt;/result&gt;
      &lt;/action&gt;

      &lt;action name = "hello" 
         class = "com.tutorialspoint.struts2.HelloWorldAction" 
         method = "execute"&gt;
         &lt;result name = "success"&gt;/HelloWorld.jsp&lt;/result&gt;
      &lt;/action&gt;

   &lt;/package&gt;
&lt;/struts&gt;
</pre>
<h1>Struts 2 - Configuration Files</h1>
<p>This chapter will take you through basic configuration which is required for a <b>Struts 2</b> application. Here we will see what can be configured with the help of few important configuration files like <b>web.xml, struts.xml, strutsconfig.xml</b> and <b>struts.properties</b></p>
<p>Honestly speaking, you can start working by just using <b>web.xml</b> and <b>struts.xml</b> configuration files (as you have already witnessed in our previous chapter where our example worked using these two files). However, for your knowledge we will  explain regarding other files also.</p>
<h2>The web.xml File</h2>
<p>The web.xml configuration file is a J2EE configuration file that determines how elements of the HTTP request are processed by the servlet container. It is not strictly a Struts2 configuration file, but it is a file that needs to be configured for Struts2 to work.</p>
<p>As discussed earlier, this file provides an entry point for any web application. The entry point of Struts2 application will be a filter defined in deployment descriptor (web.xml). Hence we will define an entry of  <i>FilterDispatcher</i> class in web.xml. The web.xml file needs to be created under the folder <b>WebContent/WEB-INF</b>.</p>
<p>This is the first configuration file you will need to configure if you are starting without the aid of a template or tool that generates it (such as Eclipse or Maven2).</p>
<p>Following is the content of web.xml file which we used in our last example.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;web-app xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xmlns = "http://java.sun.com/xml/ns/javaee" 
   xmlns:web = "http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   xsi:schemaLocation = "http://java.sun.com/xml/ns/javaee 
   http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
   id = "WebApp_ID" version = "3.0"&gt;
   
   &lt;display-name&gt;Struts 2&lt;/display-name&gt;
   &lt;welcome-file-list&gt;
      &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
   &lt;/welcome-file-list&gt;
   
   &lt;filter&gt;
      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;filter-class&gt;
         org.apache.struts2.dispatcher.FilterDispatcher
      &lt;/filter-class&gt;
   &lt;/filter&gt;

   &lt;filter-mapping&gt;
      &lt;filter-name&gt;struts2&lt;/filter-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
   &lt;/filter-mapping&gt;

&lt;/web-app&gt;
</pre>
<p>Note that we map the Struts 2 filter to <b>/*</b>, and not to <b>/*.action</b> which means that all urls will be parsed by the struts filter. We will cover this when we will go through the Annotations chapter.</p>
<h2>The Struts.xml File</h2>
<p>The <b>struts.xml</b> file contains the configuration information that you will be modifying as actions are developed. This file can be used to override default settings for an application, for example <i>struts.devMode = false</i> and other settings which are defined in property file. This file can be created under the folder <b>WEB-INF/classes</b>.</p>
<p>Let us have a look at the struts.xml file we created in the Hello World example explained in previous chapter.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
   "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;
&lt;struts&gt;
   &lt;constant name = "struts.devMode" value = "true" /&gt;
   &lt;package name = "helloworld" extends = "struts-default"&gt;
     
      &lt;action name = "hello" 
         class = "com.tutorialspoint.struts2.HelloWorldAction" 
         method = "execute"&gt;
         &lt;result name = "success"&gt;/HelloWorld.jsp&lt;/result&gt;
      &lt;/action&gt;
      
      &lt;-- more actions can be listed here --&gt;

   &lt;/package&gt;
   &lt;-- more packages can be listed here --&gt;

&lt;/struts&gt;
</pre>
<p>The first thing to note is the <b>DOCTYPE</b>. All struts configuration file needs to have the correct doctype as shown in our little example. &lt;struts&gt; is the root tag element, under which we declare different packages using &lt;package&gt; tags. Here &lt;package&gt; allows separation and modularization of the configuration. This is very useful when you have a large project and project is divided into different modules.</p>
<p>For example, if your project has three domains - business_application, customer_application and staff_application, then you could create three packages and store associated actions in the appropriate package.</p>
<p>The package tag has the following attributes &minus;</p>
<table class="table table-bordered"> 
<tr>
<th style="width:10%">Sr.No</th>
<th style="text-align:center;">Attribute &amp; Description</th>
</tr> 
<tr>
<td class="ts">1</td>
<td><p><b>name (required)</b></p>
<p>The unique identifier for the package</p>
</td>
</tr>
</tr> 
<tr>
<td class="ts">2</td>
<td><p><b>extends</b></p>
<p>Which package does this package extend from? By default, we use struts-default as the base package.</p>
</td>
</tr>
</tr> 
<tr>
<td class="ts">3</td>
<td><p><b>abstract</b></p>
<p>If marked true, the package is not available for end user consumption.</p>
</td>
</tr>
</tr> 
<tr>
<td class="ts">4</td>
<td><p><b>namespace</b></p>
<p>Unique namespace for the actions</p>
</td>
</tr>
</tr> 
</table>
<p>The <b>constant</b> tag along with name and value attributes should be used to override any of the following properties defined in <b>default.properties</b>, like we just set <b>struts.devMode</b> property. Setting <b>struts.devMode</b> property allows us to see more debug messages in the log file.</p>
<p>We define <b>action</b> tags corresponds to every URL we want to access and we define a class with execute() method which will be accessed whenever we will access corresponding URL.</p>
<p>Results determine what gets returned to the browser after an action is executed. The string returned from the action should be the name of a result. Results are configured per-action as above, or as a "global" result, available to every action in a package. Results have optional <b>name</b> and <b>type</b> attributes. The default name value is "success".</p>
<p>Struts.xml file can grow big over time and so breaking it by packages is one way of modularizing it, but <b>Struts</b> offers another way to modularize the struts.xml file. You could split the file into multiple xml files and import them in the following fashion.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
   "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;

&lt;struts&gt;
   &lt;include file="my-struts1.xml"/&gt;
   &lt;include file="my-struts2.xml"/&gt;
&lt;/struts&gt;
</pre>
<p>The other configuration file that we haven't covered is the struts-default.xml. This file contains the standard configuration settings for Struts and you would not have to touch these settings for 99.99% of your projects. For this reason, we are not going into too much detail on this file. If you are interested, take a look into the at the <b>default.properties</b> file available in struts2-core-2.2.3.jar file.</p>
<h2>The Struts-config.xml File</h2>
<p>The struts-config.xml configuration file is a link between the View and Model components in the Web Client but you would not have to touch these settings for 99.99% of your projects.</p>
<p>The configuration file basically contains following main elements &minus;</p>
<table class="table table-bordered"> 
<tr>
<th style="width:10%">Sr.No</th>
<th style="text-align:center;">Interceptor &amp; Description</th>
</tr> 
<tr>
<td class="ts">1</td>
<td><p><b>struts-config</b></p>
<p>This is the root node of the configuration file.</p>
</td>
</tr> 
<tr>
<td class="ts">2</td>
<td><p><b>form-beans</b></p>
<p>This is where you map your ActionForm subclass to a name. You use this name as an alias for your ActionForm throughout the rest of the strutsconfig.xml file, and even on your JSP pages.</p>
</td>
</tr> 
<tr>
<td class="ts">3</td>
<td><p><b>global forwards</b></p>
<p>This section maps a page on your webapp to a name. You can use this name to refer to the actual page. This avoids hardcoding URLs on your web pages.</p>
</td>
</tr> 
<tr>
<td class="ts">4</td>
<td><p><b>action-mappings</b></p>
<p>This is where you declare form handlers and they are also known as action mappings.</p>
</td>
</tr> 
<tr>
<td class="ts">5</td>
<td><p><b>controller</b></p>
<p>This section configures Struts internals and rarely used in practical situations.</p>
</td>
</tr> 
<tr>
<td class="ts">6</td>
<td><p><b>plug-in</b></p>
<p>This section tells Struts where to find your properties files, which contain prompts and error messages</p>
</td>
</tr> 
</table>
<p>Following is the sample struts-config.xml file &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "ISO-8859-1" ?&gt;
&lt;!DOCTYPE struts-config PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 1.0//EN"
   "http://jakarta.apache.org/struts/dtds/struts-config_1_0.dtd"&gt;

&lt;struts-config&gt;

   &lt;!-- ========== Form Bean Definitions ============ --&gt;
   &lt;form-beans&gt;
      &lt;form-bean name = "login" type = "test.struts.LoginForm" /&gt;
   &lt;/form-beans&gt;

   &lt;!-- ========== Global Forward Definitions ========= --&gt;
   &lt;global-forwards&gt;
   &lt;/global-forwards&gt;

   &lt;!-- ========== Action Mapping Definitions ======== --&gt;
   &lt;action-mappings&gt;
      &lt;action
         path = "/login"
         type = "test.struts.LoginAction" &gt;

         &lt;forward name = "valid" path = "/jsp/MainMenu.jsp" /&gt;
         &lt;forward name = "invalid" path = "/jsp/LoginView.jsp" /&gt;
      &lt;/action&gt;
   &lt;/action-mappings&gt;

   &lt;!-- ========== Controller Definitions ======== --&gt;
   &lt;controller contentType = "text/html;charset = UTF-8"
      debug = "3" maxFileSize = "1.618M" locale = "true" nocache = "true"/&gt;

&lt;/struts-config&gt;
</pre>
<p>For more detail on struts-config.xml file, kindly check your struts documentation.</p>
<h2>The Struts.properties File</h2>
<p>This configuration file provides a mechanism to change the default behavior of the framework. Actually, all the properties contained within the <b>struts.properties</b> configuration file can also be configured in the <b>web.xml</b> using the <b>init-param</b>, as well using the constant tag in the <b>struts.xml</b> configuration file. But, if you like to keep the things separate and more struts specific, then you can create this file under the folder <b>WEB-INF/classes</b>.</p>
<p>The values configured in this file will override the default values configured in <b>default.properties</b> which is contained in the struts2-core-x.y.z.jar distribution. There are a couple of properties that you might consider changing using the <b>struts.properties</b> file &minus;</p>
<pre class="prettyprint notranslate">
### When set to true, Struts will act much more friendly for developers
struts.devMode = true

### Enables reloading of internationalization files
struts.i18n.reload = true

### Enables reloading of XML configuration files
struts.configuration.xml.reload = true

### Sets the port that the server is run on
struts.url.http.port = 8080
</pre>
<p>Here any line starting with <b>hash</b> (#) will be assumed as a comment and it will be ignored by <b>Struts 2</b>.</p>
<h1>Struts 2 - Actions</h1>
<p><b>Actions</b> are the core of the Struts2 framework, as they are for any MVC (Model View Controller) framework. Each URL is mapped to a specific action, which provides the processing logic which is necessary to service the request from the user.</p>
<p>But the action also serves in two other important capacities. Firstly, the action plays an important role in the transfer of data from the request through to the view, whether its a JSP or other type of result. Secondly, the action must assist the framework in determining which result should render the view that will be returned in the response to the request.</p>
<h2>Create Action</h2>
<p>The only requirement for actions in <b>Struts2</b> is that there must be one noargument method that returns either a String or Result object and must be a POJO. If the no-argument method is not specified, the default behavior is to use the execute() method.</p>
<p>Optionally you can extend the <b>ActionSupport</b> class which implements six interfaces including <b>Action</b> interface. The Action interface is as follows &minus;</p>
<pre class="prettyprint notranslate">
public interface Action {
   public static final String SUCCESS = "success";
   public static final String NONE = "none";
   public static final String ERROR = "error";
   public static final String INPUT = "input";
   public static final String LOGIN = "login";
   public String execute() throws Exception;
}
</pre>
<p>Let us take a look at the action method in the Hello World example &minus;</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.struts2;

public class HelloWorldAction {
   private String name;

   public String execute() throws Exception {
      return "success";
   }
   
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
}
</pre>
<p>To illustrate the point that the action method controls the view, let us make the following change to the <b>execute</b> method and extend the class ActionSupport as follows &minus;</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.struts2;

import com.opensymphony.xwork2.ActionSupport;

public class HelloWorldAction extends ActionSupport {
   private String name;

   public String execute() throws Exception {
      if ("SECRET".equals(name)) {
         return SUCCESS;
      } else {
         return ERROR;  
      }
   }
   
   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }
}
</pre>
<p>In this example, we have some logic in the execute method to look at the name attribute. If the attribute equals to the string <b>"SECRET"</b>, we return <b>SUCCESS</b> as the result otherwise we return <b>ERROR</b> as the result. Because we have extended ActionSupport, so we can use String constants <b>SUCCESS</b> and ERROR. Now, let us modify our struts.xml file as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
   "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;

&lt;struts&gt;
   &lt;constant name = "struts.devMode" value = "true" /&gt;
   &lt;package name = "helloworld" extends = "struts-default"&gt;
      &lt;action name = "hello" 
         class = "com.tutorialspoint.struts2.HelloWorldAction"
         method = "execute"&gt;
         &lt;result name = "success"&gt;/HelloWorld.jsp&lt;/result&gt;
         &lt;result name = "error"&gt;/AccessDenied.jsp&lt;/result&gt;
      &lt;/action&gt;
   &lt;/package&gt;
&lt;/struts&gt;
</pre>
<h2>Create a View</h2>
<p>Let us create the below jsp file <b>HelloWorld.jsp</b> in the WebContent folder in your eclipse project. To do this, right click on the WebContent folder in the project explorer and select <b>New &gt;JSP File</b>. This file will be called in case return result is SUCCESS which is a String constant "success" as defined in Action interface &minus;</p>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;%@ taglib prefix = "s" uri = "/struts-tags" %&gt;

&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      Hello World, &lt;s:property value = "name"/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Following is the file which will be invoked by the framework in case action result is ERROR which is equal to String constant "error". Following is the content of <b>AccessDenied.jsp</b></p>
<pre class="prettyprint notranslate">
&lt;%@ page contentType = "text/html; charset = UTF-8" %&gt;
&lt;%@ taglib prefix = "s" uri = "/struts-tags" %&gt;

&lt;html&gt;  
   &lt;head&gt;
      &lt;title&gt;Access Denied&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      You are not authorized to view this page.
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>We also need to create <b>index.jsp</b> in the WebContent folder. This file will serve as the initial action URL where the user can click to tell the Struts 2 framework to call the <b>execute</b>method of the HelloWorldAction class and render the HelloWorld.jsp view.</p>
<pre class="prettyprint notranslate">
&lt;%@ page language = "java" contentType = "text/html; charset = ISO-8859-1"
   pageEncoding = "ISO-8859-1"%&gt;
&lt;%@ taglib prefix = "s" uri = "/struts-tags"%&gt;
   &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" 
   "http://www.w3.org/TR/html4/loose.dtd"&gt;

&lt;html&gt;  
   &lt;head&gt;
      &lt;title&gt;Hello World&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;h1&gt;Hello World From Struts2&lt;/h1&gt;
      &lt;form action = "hello"&gt;
         &lt;label for = "name"&gt;Please enter your name&lt;/label&gt;&lt;br/&gt;
         &lt;input type = "text" name = "name"/&gt;
         &lt;input type = "submit" value = "Say Hello"/&gt;
      &lt;/form&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>That's it, there is no change required for web.xml file, so let us use the same web.xml which we had created in <b>Examples</b> chapter. Now, we are ready to run our <b>Hello World</b> application using Struts 2 framework.</p>
<h2>Execute the Application</h2>
<p>Right click on the project name and click <b>Export &gt; WAR</b> File to create a War file. Then deploy this WAR in the Tomcat's webapps directory. Finally, start Tomcat server and try to access URL <b>http://localhost:8080/HelloWorldStruts2/index.jsp</b>. This will give you following screen &minus;</p>
<img src="/struts_2/images/helloworldstruts4.jpg" alt="Hello World Struts4" />
<p>Let us enter a word as "SECRET" and you should see the following page &minus;</p>
<img src="/struts_2/images/helloworldstruts51.jpg" alt="helloworldstruts51" />
<p>Now enter any word other than "SECRET" and you should see the following page &minus;</p>
<img src="/struts_2/images/helloworldstruts6.jpg" alt="helloworldstruts6" />
<h2>Create Multiple Actions</h2>
<p>You will frequently define more than one actions to handle different requests and to provide different URLs to the users, accordingly you will define different classes as defined below &minus;</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.struts2;
import com.opensymphony.xwork2.ActionSupport;

class MyAction extends ActionSupport {
   public static String GOOD = SUCCESS;
   public static String BAD = ERROR;
}

public class HelloWorld extends ActionSupport {
   ...
   public String execute() {
      if ("SECRET".equals(name)) return MyAction.GOOD;
      return MyAction.BAD;
   }
   ...
}

public class SomeOtherClass extends ActionSupport {
   ...
   public String execute() {
      return MyAction.GOOD;
   }
   ...
}
</pre>
<p>You will configure these actions in struts.xml file as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" Encoding = "UTF-8"?&gt;
&lt;!DOCTYPE struts PUBLIC
   "-//Apache Software Foundation//DTD Struts Configuration 2.0//EN"
   "http://struts.apache.org/dtds/struts-2.0.dtd"&gt;

&lt;struts&gt;
   &lt;constant name = "struts.devMode" value = "true" /&gt;
   
   &lt;package name = "helloworld" extends = "struts-default"&gt;
      &lt;action name = "hello" 
         class = "com.tutorialspoint.struts2.HelloWorld" 
         method = "execute"&gt;
         &lt;result name = "success"&gt;/HelloWorld.jsp&lt;/result&gt;
         &lt;result name = "error"&gt;/AccessDenied.jsp&lt;/result&gt;
      &lt;/action&gt;
      
      &lt;action name = "something" 
         class = "com.tutorialspoint.struts2.SomeOtherClass" 
         method = "execute"&gt;
         &lt;result name = "success"&gt;/Something.jsp&lt;/result&gt;
         &lt;result name = "error"&gt;/AccessDenied.jsp&lt;/result&gt;
      &lt;/action&gt;
   &lt;/package&gt;
&lt;/struts&gt;
</pre>
<p>As you can see in the above hypothetical example, the action results <b>SUCCESS</b> and <b>ERROR’s</b> are duplicated.</p>
<p>To get around this issue, it is suggested that you create a class which contains the result outcomes.</p>
<h1>Struts 2 - Interceptors</h1>
<p>Interceptors are conceptually the same as servlet filters or the JDKs Proxy class. Interceptors allow for crosscutting functionality to be implemented separately from the action as well as the framework. You can achieve the following using interceptors &minus;</p>
<ul class="list">
<li><p>Providing preprocessing logic before the action is called.</p></li>
<li><p>Providing postprocessing logic after the action is called.</p></li>
<li><p>Catching exceptions so that alternate processing can be performed.</p></li>
</ul>
<p>Many of the features provided in the <b>Struts2</b> framework are implemented using interceptors;</p>
<p><b>Examples</b> include exception handling, file uploading, lifecycle callbacks, etc. In fact, as Struts2 emphasizes much of its functionality on interceptors, it is not likely to have 7 or 8 interceptors assigned per action.</p>
<h2>Struts2 Framework Interceptors</h2>
<p>Struts 2 framework provides a good list of out-of-the-box interceptors that come preconfigured and ready to use. Few of the important interceptors are listed below &minus;</p>
<table class="table table-bordered"> 
<tr>
<th style="width:10%">Sr.No</th>
<th style="text-align:center;">Interceptor &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>alias</b></p>
<p>Allows parameters to have different name aliases across requests.</p>
</td>
</tr> 
<tr>
<td class="ts">2</td>
<td><p><b>checkbox</b></p>
<p>Assists in managing check boxes by adding a parameter value of false for check boxes that are not checked.</p>
</td>
</tr> 
<tr>
<td class="ts">3</td>
<td><p><b>conversionError</b></p>
<p>Places error information from converting strings to parameter types into the action's field errors.</p>
</td>
</tr> 
<tr>
<td class="ts">4</td>
<td><p><b>createSession</b></p>
<p>Automatically creates an HTTP session if one does not already exist.</p>
</td>
</tr> 
<tr>
<td class="ts">5</td>
<td><p><b>debugging</b></p>
<p>Provides several different debugging screens to the developer.</p>
</td>
</tr> 
<tr>
<td class="ts">6</td>
<td><p><b>execAndWait</b></p>
<p>Sends the user to an intermediary waiting page while the action executes in the background.</p>
</td>
</tr> 
<tr>
<td class="ts">7</td>
<td><p><b>exception</b></p>
<p>Maps exceptions that are thrown from an action to a result, allowing automatic exception handling via redirection.</p>
</td>
</tr> 
<tr>
<td class="ts">8</td>
<td><p><b>fileUpload</b></p>
<p>Facilitates easy file uploading.</p>
</td>
</tr> 
<tr>
<td class="ts">9</td>
<td><p><b>i18n</b></p>
<p>Keeps track of the selected locale during a user's session.</p>
</td>
</tr> 
<tr>
<td class="ts">10</td>
<td><p><b>logger</b></p>
<p>Provides simple logging by outputting the name of the action being executed.</p>
</td>
</tr> 
<tr>
<td class="ts">11</td>
<td><p><b>params</b></p>
<p>Sets the request parameters on the action.</p>
</td>
</tr> 
<tr>
<td class="ts">12</td>
<td><p><b>prepare</b></p>
<p>This is typically used to do pre-processing work, such as setup database connections.</p>
</td>
</tr> 
<tr>
<td class="ts">13</td>
<td><p><b>profile</b></p>
<p>Allows simple profiling information to be logged for actions.</p>
</td>
</tr> 
<tr>
<td class="ts">14</td>
<td><p><b>scope</b></p>
<p>Stores and retrieves the action's state in the session or application scope.</p>
</td>
</tr> 
<tr>
<td class="ts">15</td>
<td><p><b>ServletConfig</b></p>
<p>Provides the action with access to various servlet-based information.</p>
</td>
</tr> 
<tr>
<td class="ts">16</td>
<td><p><b>timer</b></p>
<p>Provides simple profiling inf