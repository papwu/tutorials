<!DOCTYPE html>
<html lang="en-US">
<head>
<title>LeafletJS - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="LeafletJS - Quick Guide - Leaflet.js is an open-source library using which we can deploy simple, interactive, lightweight web maps."/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/leafletjs/leafletjs_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#83c043;
}
a.demo {
    background:#83c043;
}
li.heading {
    background:#83c043;
}
.course-box{background:#83c043}
.home-intro-sub p{color:#83c043}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/leafletjs/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/leafletjs/images/leafletjs-mini-logo.jpg" alt="LeafletJS Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">LeafletJS Tutorial</li>
<li><a href="/leafletjs/index.htm">LeafletJS - Home</a></li>
<li><a href="/leafletjs/leafletjs_getting_started.htm">LeafletJS - Getting Started</a></li>
<li><a href="/leafletjs/leafletjs_markers.htm">LeafletJS - Markers</a></li>
<li><a href="/leafletjs/leafletjs_vector_layers.htm">LeafletJS - Vector Layers</a></li>
<li><a href="/leafletjs/leafletjs_multi_polyline_and_polygon.htm">LeafletJS - Multi Polyline &amp; Polygon</a></li>
<li><a href="/leafletjs/leafletjs_layers_group.htm">LeafletJS - Layers Group</a></li>
<li><a href="/leafletjs/leafletjs_event_handling.htm">LeafletJS - Event Handling</a></li>
<li><a href="/leafletjs/leafletjs_overlay.htm">LeafletJS - Overlays</a></li>
<li><a href="/leafletjs/leafletjs_controls.htm">LeafletJS - Controls</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">LeafletJS Useful Resources</li>
<li><a href="/leafletjs/leafletjs_quick_guide.htm">LeafletJS - Quick Guide</a></li>
<li><a href="/leafletjs/leafletjs_useful_resources.htm">LeafletJS - Useful Resources</a></li>
<li><a href="/leafletjs/leafletjs_discussion.htm">LeafletJS - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>LeafletJS - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/leafletjs/leafletjs_controls.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/leafletjs/leafletjs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>LeafletJS - Getting Started</h1>
<h2>What is Leaflet.js</h2>
<p>Leaflet.js is an open-source library using which we can deploy simple, interactive, lightweight web maps.</p>
<ul class="list">
<li><p>Leaflet JavaScript library allows you to use layers such as Tile layers, WMS, Markers, Popups, Vector layers (polylines, polygons, circles, etc.), Image overlays and GeoJSON.</p></li>
<li><p>You can interact with the Leaflet maps by dragging the map, zooming (by double click or, wheel scroll), using keyboard, using event handling, and by dragging the markers.</p></li>
<li><p>Leaflet supports browsers such as Chrome, Firefox, Safari 5+, Opera 12+, IE 7–11 on desktop and, browsers like Safari, Android, Chrome, Firefox for mobiles.</p></li>
</ul>
<h2>Steps to Load the Map on a Webpage</h2>
<p>Follow the steps given below to load a map on your webpage &minus;</p>
<h3>Step 1: Create an HTML Page</h3>
<p>Create a basic HTML page with <b>head</b> and <b>body</b> tags as shown below &minus;</p>
<pre class="result notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      ...........
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Step 2 : Load the Leaflet CSS Script</h3>
<p>Include the Leaflet CSS script in the example &minus;</p>
<pre class="result notranslate">
&lt;head&gt;
   &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" /&gt;
&lt;/head&gt;
</pre>
<h3>Step 3: Load the Leaflet Script</h3>
<p>Load or include the Leaflet API using the script tag &minus;</p>
<pre class="result notranslate">
&lt;head&gt;
   &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
&lt;/head&gt;
</pre>
<h3>Step 4: Create the Container</h3>
<p>To hold the map, we have to create a container element. Generally, the &lt;div&gt; tag (a generic container) is used for this purpose.</p>
<p>Create a container element and define its dimensions &minus;</p>
<pre class="result notranslate">
&lt;div id = "sample" style = "width:900px; height:580px;"&gt;&lt;/div&gt;
</pre>
<h3>Step 5: Map Options</h3>
<p>Leaflet provides several options such as types Control options, Interaction Options, Map State Options, Animation Options, etc. By setting values to these, we can customize the map as desired.</p>
<p>Create a <b>mapOptions</b> object (it is created just like a literal) and set values for the options center and zoom, where</p>
<ul class="list">
<li><p><b>center</b> &minus; As a value to this option, you need to pass a <b>LatLng</b> object specifying the location where we want to center the map. (Just specify the latitude and longitude values within <b>[]</b> braces)</p></li>
<li><p><b>zoom</b> &minus; As a value to this option, you need to pass an integer representing the zoom level of the map, as shown below.</p></li>
</ul>
<pre class="result notranslate">
var mapOptions = {
   center: [17.385044, 78.486671],
   zoom: 10
}
</pre>
<h3>Step 6: Create a Map Object</h3>
<p>Using the <b>Map</b> class of leaflet API, you can create a map on a page. You can create a map object by instantiating the called <b>Map</b> of the Leaflet API. While instantiating this class, you need to pass two parameters &minus;</p>
<ul class="list">
<li><p>As a parameter to this option, you need to pass a String variable representing the DOM id or an instance of the &lt;div&gt; element. Here, the &lt;div&gt;element is an HTML container to hold the map.</p></li>
<li><p>An optional object literal with map options.</p></li>
</ul>
<p>Create a Map object by passing the id of the &lt;div&gt; element and mapOptions object created in the previous step.</p>
<pre class="result notranslate">
var map = new L.map('map', mapOptions);
</pre>
<h3>Step 7: Creating the Layer Object</h3>
<p>You can load and display various types of maps (tile layers) by instantiating the <b>TileLayer</b> class. While instantiating it you need to pass an URL template requesting the desired tile layer(map) from the service provider, in the form of a String variable.</p>
<p>Create the tile layer object as shown below.</p>
<pre class="result notranslate">
var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
</pre>
<p>Here we have used the <b>openstreetmap</b>.</p>
<h3>Step 8: Add Layer to the Map</h3>
<p>Finally add the layer created in the previous step to the map object using the <b>addlayer()</b> method as shown below.</p>
<pre class="result notranslate">
map.addLayer(layer);
</pre>
<h3>Example</h3>
<p>The following example shows how to load an <b>open street map</b> of Hyderabad city with a zoom value of 10.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet sample&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 10
         }
         
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         
         // Adding layer to the map
         map.addLayer(layer);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/open_street_map.jpg" alt="Open Street Map" />
<h2>Leaflet Map Providers</h2>
<p>Just like <b>open street map</b>, you can load the layers of various service providers such as Open Topo, Thunder forest, Hydda, ESRI, Open weather, NASA GIBS, etc. To do so, you need to pass their respective URL while creating the <b>TileLayer</b> object</p>
<pre class="result notranslate">
var layer = new L.TileLayer('URL of the required map');
</pre>
<p>The following table lists the URL’s and their respective sample maps of the layers provided by Openstreetmap.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:8%;">Map Type</th>
<th style="text-align:center;">URL and Output</th>
</tr>
<tr>
<td style="vertical-align:middle;">Mapnik</td>
<td><p><b>http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</b></p>
<p><img src="/leafletjs/images/map_providers.jpg" alt="Map Providers"/></p></td>
</tr>
<tr>
<td style="vertical-align:middle;">Black And White</td>
<td><p><b>http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png</b></p>
<p><img src="/leafletjs/images/black_and_white_map.jpg" alt="Black and White Map" /></p></td>
</tr>
<tr>
<td style="vertical-align:middle;">DE</td>
<td><p><b>http://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/ {y}.png</b></p>
<p><img src="/leafletjs/images/de.jpg" alt="DE"/></p></td>
</tr>
<tr>
<td style="vertical-align:middle;">France</td>
<td><p><b>http://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png</b></p>
<p><img src="/leafletjs/images/france.jpg" alt="France"/></p></td>
</tr>
<tr>
<td style="vertical-align:middle;">Hot</td>
<td><p><b>http://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png</b></p>
<p><img src="/leafletjs/images/hot.jpg" alt="Hot"/></p></td>
</tr>
<tr>
<td style="vertical-align:middle;">BZH</td>
<td><p><b>http://tile.openstreetmap.bzh/br/{z}/{x}/{y}.png</b></p>
<p><img src="/leafletjs/images/bzh.jpg" alt="BZH" /></p></td>
</tr>
</table>
<h1>LeafletJS - Markers</h1>
<p>To mark a single location on the map, leaflet provides markers. These markers use a standard symbol and these symbols can be customized. In this chapter, we will see how to add markers and how to customize, animate, and remove them.</p>
<h2>Adding a Simple Marker</h2>
<p>To add a marker to a map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Instantiate the <b>Marker</b> class by passing a <b>latlng</b> object representing the position to be marked, as shown below.</p>
<pre class="result notranslate">
// Creating a marker
var marker = new L.Marker([17.385044, 78.486671]);
</pre>
<p><b>Step 5</b> &minus; Add the marker object created in the previous steps to the map using the <b>addTo()</b> method of the <b>Marker</b> class.</p>
<pre class="result notranslate">
// Adding marker to the map
marker.addTo(map);
</pre>
<h3>Example</h3>
<p>The following code sets the marker on the city named Hyderabad (India).</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet sample&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 10
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         
         // Adding layer to the map
         map.addLayer(layer);
         
         // Creating a marker
         var marker = L.marker([17.385044, 78.486671]);
         
         // Adding marker to the map
         marker.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/simple_marker.jpg" alt="Simple Marker"/>
<h2>Binding Pop-ups to the Marker</h2>
<p>To bind a simple popup displaying a message to a marker, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Instantiate the <b>Marker</b> class by passing a <b>latlng</b> object representing the position to be marked.</p>
<p><b>Step 5</b> &minus; Attach popup to the marker using <b>bindPopup()</b> as shown below.</p>
<pre class="result notranslate">
// Adding pop-up to the marker
marker.bindPopup('Hi Welcome to Tutorialspoint').openPopup();
</pre>
<p><b>Step 6</b> &minus; Finally, add the <b>Marker</b> object created in the previous steps to the map using the <b>addTo()</b> method of the <b>Marker</b> class.</p>
<h3>Example</h3>
<p>The following code sets the marker on the city Hyderabad (India) and adds a pop-up to it.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Binding pop-Ups to marker&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 15
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);         // Adding layer to the map
         var marker = L.marker([17.438139, 78.395830]);    // Creating a Marker
         
         // Adding popup to the marker
         marker.bindPopup('This is Tutorialspoint').openPopup();
         marker.addTo(map); // Adding marker to the map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output</p>
<img src="/leafletjs/images/popups_to_the_marker.jpg" alt="Pop-ups to the Marker" />
<h2>Marker Options</h2>
<p>While creating a marker, you can also pass a <b>marker options</b> variable in addition to the latlang object. Using this variable, you can set values to various options of the marker such as icon, dragable, keyboard, title, alt, zInsexOffset, opacity, riseOnHover, riseOffset,  pane, dragable, etc.</p>
<p>To create a map using map options, you need to follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a variable for markerOptions and specify values to the required options.</p>
<p>Create a <b>markerOptions</b> object (it is created just like a literal) and set values for the options <b>iconUrl</b> and <b>iconSize</b>.</p>
<pre class="prettyprint notranslate">
// Options for the marker
var markerOptions = {
   title: "MyLocation",
   clickable: true,
   draggable: true
}
</pre>
<p><b>Step 5</b> &minus; Instantiate the <b>Marker</b> class by passing a <b>latlng</b> object representing the position to be marked and the options object, created in the previous step.</p>
<pre class="result notranslate">
// Creating a marker
var marker = L.marker([17.385044, 78.486671], markerOptions);
</pre>
<p><b>Step 6</b> &minus; Finally, add the <b>Marker</b> object created in the previous steps to the map using the <b>addTo()</b> method of the <b>Marker</b> class.</p>
<h3>Example</h3>
<p>The following code sets the marker on the city Hyderabad (India). This marker is clickable, dragable with the title <b>MyLocation</b>.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Marker Options Example&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 10
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        
         // Adding layer to the map
         map.addLayer(layer);
         
         // Creating a Marker
         var markerOptions = {
            title: "MyLocation",
            clickable: true,
            draggable: true
         }
         // Creating a marker
         var marker = L.marker([17.385044, 78.486671], markerOptions);
         
         // Adding marker to the map
         marker.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output</p>
<img src="/leafletjs/images/marker_options.jpg" alt="Marker Options" />
<h2>Marker Custom Icons</h2>
<p>Instead of the default icon provided by the Leaflet library, you can also add your own icon. You can use the following steps to add a custom icon to the map instead of the default one.</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a variable for <b>markerOptions</b> and specify values to the required options &minus;</p>
<ul class="list">
<li><p><b>iconUrl</b> &minus; As a value to this option, you need to pass a <b>String</b> object specifying the path of the image which you want to use as an icon.</p></li>
<li><p><b>iconSize</b> &minus; Using this option, you can specify the size of the icon.</p></li>
</ul>
<p><b>Note</b> &minus; In addition to these, you can also set values to other options such as iconSize, shadowSize, iconAnchor, shadowAnchor, and popupAnchor.</p>
<p>Create a custom icon using <b>L.icon()</b> by passing the above options variable as shown below.</p>
<pre class="result notranslate">
// Icon options
var iconOptions = {
   iconUrl: 'logo.png',
   iconSize: [50, 50]
}

// Creating a custom icon
var customIcon = L.icon(iconOptions);
</pre>
<p><b>Step 5</b> &minus; Create a variable for markerOptions and specify values to the required options. In addition to these, specify the icon by passing the icon variable created in the previous step as a value.</p>
<pre class="result notranslate">
// Options for the marker
var markerOptions = {
   title: "MyLocation",
   clickable: true,
   draggable: true,
   icon: customIcon
}
</pre>
<p><b>Step 6</b> &minus; Instantiate the <b>Marker</b> class by passing a <b>latlng</b> object representing the position to be marked and the options object created in the previous step.</p>
<pre class="result notranslate">
// Creating a marker
var marker = L.marker([17.438139, 78.395830], markerOptions);
</pre>
<p><b>Step 7</b> &minus; Finally, add the <b>Marker</b> object created in the previous steps to the map using the <b>addTo()</b> method of the <b>Marker</b> class.</p>
<h3>Example</h3>
<p>The following code sets the marker on the location of Tutorialspoint. Here we are using the logo of Tutorialspoint instead of the default marker.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Marker Custom Icons Example&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.438139, 78.395830],
            zoom: 10
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');

         // Adding layer to the map
         map.addLayer(layer);
         
         // Icon options
         var iconOptions = {
            iconUrl: 'logo.png',
            iconSize: [50, 50]
         }
         // Creating a custom icon
         var customIcon = L.icon(iconOptions);
         
         // Creating Marker Options
         var markerOptions = {
            title: "MyLocation",
            clickable: true,
            draggable: true,
            icon: customIcon
         }
         // Creating a Marker
         var marker = L.marker([17.438139, 78.395830], markerOptions);
         
         // Adding popup to the marker
         marker.bindPopup('Hi welcome to Tutorialspoint').openPopup();
         
         // Adding marker to the map
         marker.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output</p>
<img src="/leafletjs/images/marker_custom_icons.jpg" alt="Marker Custom Icons" />
<h1>LeafletJS - Vector Layers</h1>
<p>In the previous chapter, we learned how to use markers in Leaflet. Along with markers, we can also add various shapes such as circles, polygons, rectangles, polylines, etc. In this chapter, we will discuss how to use the shapes provided by Google Maps.</p>
<h2>Polyline</h2>
<p>To draw polyline overlay on a map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a <b>latlangs</b> variable to hold the points to draw polyline, as shown below.</p>
<pre class="result notranslate">
// Creating latlng object
var latlngs = [
   [17.385044, 78.486671],
   [16.506174, 80.648015],
   [17.000538, 81.804034],
   [17.686816, 83.218482]
];
</pre>
<p><b>Step 5</b> &minus; Create a polyline using the <b>L.polyline()</b>. To draw the polyline, pass the locations as variable and an option to specify the color of the lines.</p>
<pre class="result notranslate">
// Creating a poly line
var polyline = L.polyline(latlngs, {color: 'red'});
</pre>
<p><b>Step 6</b> &minus; Add the polyline to the map using the <b>addTo()</b> method of the <b>Polyline</b> class.</p>
<pre class="result notranslate">
// Adding to poly line to map
polyline.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code which draws a polyline, covering the cities Hyderabad, Vijayawada, Rajamahendrawaram and, Vishakhapatnam (India).</p>
<pre class="prettyprint notranslate">
DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Poly lines&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [16.506174, 80.648015],
            zoom: 7
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         
         // Adding layer to the map
         map.addLayer(layer);
         
         // Creating latlng object
         var latlngs = [
            [17.385044, 78.486671],
            [16.506174, 80.648015],
            [17.000538, 81.804034],
            [17.686816, 83.218482]
         ];
         // Creating a poly line
         var polyline = L.polyline(latlngs, {color: 'red'});
         
         // Adding to poly line to map
         polyline.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output</p>
<img src="/leafletjs/images/polyline.jpg" alt="Polyline" />
<h2>Polygon</h2>
<p>To draw a polygon overlay on a map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a <b>latlangs</b> variable to hold the points to draw the polygon.</p>
<pre class="result notranslate">
// Creating latlng object
var latlngs = [
   [17.385044, 78.486671],
   [16.506174, 80.648015],
   [17.686816, 83.218482]
];
</pre>
<p><b>Step 5</b> &minus; Create a polygon using the <b>L.polygon()</b>. Pass the locations/points as variable to draw the polygon, and an option to specify the color of the polygon.</p>
<pre class="result notranslate">
// Creating a polygon
var polygon = L.polygon(latlngs, {color: 'red'});
</pre>
<p><b>Step 6</b> &minus; Add the polygon to the map using the <b>addTo()</b> method of the <b>Polygon</b> class.</p>
<pre class="result notranslate">
// Adding to polygon to map
polygon.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code to draw a polygon covering the cities Hyderabad, Vijayawada, and Vishakhapatnam (India).</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Polygons&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [16.506174, 80.648015],
            zoom: 7
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
        
         // Adding layer to the map
         map.addLayer(layer);
         
         // Creating latlng object
         var latlngs = [
            [17.385044, 78.486671],
            [16.506174, 80.648015],
            [17.686816, 83.218482]
         ];
         // Creating a polygon
         var polygon = L.polygon(latlngs, {color: 'red'});
         
         // Adding to polygon to map
         polygon.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/polygon.jpg" alt="Polygon" />
<h2>Rectangle</h2>
<p>To draw a Rectangle overlay on a map using Leaflet JavaScript library, follow the steps given below</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a latlangs variable to hold the points to draw a rectangle on the map.</p>
<pre class="result notranslate">
// Creating latlng object
var latlngs = [
   [17.342761, 78.552432],
   [16.396553, 80.727725]
];
</pre>
<p><b>Step 5</b> &minus; Create a rectangle using the <b>L.rectangle()</b> function. Pass the locations/points as a variable to draw a rectangle and <b>rectangleOptions</b> to specify the color and weight of the rectangle.</p>
<pre class="result notranslate">
// Creating rectOptions
var rectOptions = {color: 'Red', weight: 1}

// Creating a rectangle
var rectangle = L.rectangle(latlngs, rectOptions);
</pre>
<p><b>Step 6</b> &minus; Add the rectangle to the map using the <b>addTo()</b> method of the <b>Polygon</b> class.</p>
<pre class="result notranslate">
// Adding to rectangle to map
rectangle.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code to draw a rectangle on the map using Leaflet JavaScript library.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Rectangle&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [16.506174, 80.648015],
            zoom: 7
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer); // Adding layer to the map
         
         // Creating latlng object
         var latlngs = [
            [17.342761, 78.552432],
            [16.396553, 80.727725]
         ];
         var rectOptions = {color: 'Red', weight: 1}   // Creating rectOptions
        
         // Creating a rectangle
         var rectangle = L.rectangle(latlngs, rectOptions);
         rectangle.addTo(map);   // Adding to rectangle to map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/rectangle.jpg" alt="Rectangle" />
<h2>Circle</h2>
<p>To draw a circle overlay on a map using Leaflet JavaScript library follow the steps given below.</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a latlangs variable to hold the center of the circle as shown below.</p>
<pre class="result notranslate">
// Center of the circle
var circleCenter = [17.385044, 78.486671];
</pre>
<p><b>Step 5</b> &minus; Create a variable circleOptions to specify values to the options color, fillColor and, fillOpacity as shown below.</p>
<pre class="result notranslate">
// Circle options
var circleOptions = {
   color: 'red',
   fillColor: '#f03',
   fillOpacity: 0
}
</pre>
<p><b>Step 6</b> &minus; Create a circle using <b>L.circle()</b>. Pass the center of the circle, radius, and the circle options to this function.</p>
<pre class="result notranslate">
// Creating a circle
var circle = L.circle(circleCenter, 50000, circleOptions);
</pre>
<p><b>Step 7</b> &minus; Add the above-created circle to the map using the <b>addTo()</b> method of the <b>Polyline</b> class.</p>
<pre class="result notranslate">
// Adding circle to the map
circle.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code to draw a circle with the coordinates of the city Hyderabad as its radius.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Circle&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 7
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);        // Adding layer to the map
         var circleCenter = [17.385044, 78.486671];     // Center of the circle
         
         // Circle options
         var circleOptions = {
            color: 'red',
            fillColor: '#f03',
            fillOpacity: 0
         }
         // Creating a circle
         var circle = L.circle(circleCenter, 50000, circleOptions);
         circle.addTo(map);     // Adding circle to the map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/circle.jpg" alt="Circle" />
<h1>LeafletJS - Multi Polyline and Polygon</h1>
<p>In the previous chapter, we learnt how to add various shapes such as circles, polygons, rectangles, polylines, etc. In this chapter, let us discuss how to add multi-polygons, multirectangles, and polylines.</p>
<h2>Multi-Polyline</h2>
<p>To draw a multi-polyline overlay on a map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a latlangs variable to hold the points to draw the multi-polyline.</p>
<pre class="result notranslate">
// Creating latlng object
var latlang = [
   [[17.385044, 78.486671], [16.506174, 80.648015], [17.686816, 83.218482]],
   [[13.082680, 80.270718], [12.971599, 77.594563],[15.828126, 78.037279]]
];
</pre>
<p><b>Step 5</b> &minus; Create a multi-polyline using the <b>L.multiPolyline()</b> function. Pass the locations as variable to draw a multi-polyline and an option to specify the color and weight of the lines.</p>
<pre class="result notranslate">
// Creating multi polyline options
var multiPolyLineOptions = {color:'red'};

// Creating multi polylines
var multipolyline = L.multiPolyline(latlang , multiPolyLineOptions);
</pre>
<p><b>Step 6</b> &minus; Add multi-polyline to the map using the <b>addTo()</b> method of the <b>Multipolyline</b> class.</p>
<pre class="result notranslate">
// Adding multi polyline to map
multipolyline.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code to draw a multi-polyline covering the cities Hyderabad, Vijayawada, and Vishakhapatnam; and Kurnool, Bengaluru, and Chennai.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Multi Polylines&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [16.506174, 80.648015],
            zoom: 7
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         
         // Adding layer to the map
         map.addLayer(layer);
         
         // Creating latlng object
         var latlang = [
            [[17.385044, 78.486671], [16.506174, 80.648015], [17.686816, 83.218482]],
            [[13.082680, 80.270718], [12.971599, 77.594563],[15.828126, 78.037279]]
         ];
         
         // Creating poly line options
         var multiPolyLineOptions = {color:'red'};
         
         // Creating multi poly-lines
         var multipolyline = L.multiPolyline(latlang , multiPolyLineOptions);
         
         // Adding multi poly-line to map
         multipolyline.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/multi_polyline_map.jpg" alt="Multi-Polyline Map" />
<h2>Multi Polygon</h2>
<p>To draw a multi-polygon overlay on a map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create a latlangs variable to hold the points to draw the multi polygon.</p>
<pre class="result notranslate">
// Creating latlng object
var latlang = [
   [[17.385044, 78.486671], [16.506174, 80.648015], [17.686816, 83.218482]],
   [[13.082680, 80.270718], [12.971599, 77.594563],[15.828126, 78.037279]]
];
</pre>
<p><b>Step 5</b> &minus; Create a multi-polygon using the <b>L.multiPolygon()</b> function. Pass the locations as variable to draw the multi-polygon and an option to specify the color and weight of the lines.</p>
<pre class="result notranslate">
// Creating multi polygon options
var multiPolygonOptions = {color:'red'};

// Creating multi polygon
var multipolygon = L.multiPolygon(latlang , multiPolygonOptions);
</pre>
<p><b>Step 6</b> &minus; Add the multi-polygon to the map using the <b>addTo()</b> method of the <b>MultiPolygon</b> class.</p>
<pre class="result notranslate">
// Adding multi polygon to map
multipolygon.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code to draw a multi-polygon touching the cities Hyderabad, Vijayawada, and Vishakhapatnam; and Kurnool, Bengaluru, and Chennai.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Multi Polygons&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [16.506174, 80.648015],
            zoom: 7
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         
         // Adding layer to the map
         map.addLayer(layer);
         
         // Creating latlng object
         var latlang = [
            [[17.385044, 78.486671], [16.506174, 80.648015], [17.686816, 83.218482]],
            [[13.082680, 80.270718], [12.971599, 77.594563],[15.828126, 78.037279]]
         ];
         // Creating multi polygon options
         var multiPolygonOptions = {color:'red', weight:8};
         
         // Creating multi polygons
         var multipolygon = L.multiPolygon(latlang , multiPolygonOptions);
         
         // Adding multi polygon to map
         multipolygon.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/multipolygon_map.jpg" alt="Multi Polygon Map" />
<h1>LeafletJS - Layers Group</h1>
<h2>Layer Groups</h2>
<p>Using layer group, you can add multiple layers to a map and manage them as a single layer.</p>
<p>Follow the steps given below to create a <b>LayerGroup</b> and add it to the map.</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create elements (layers) such as markers, polygons, circles, etc., that are needed, by instantiating the respective classes as shown below.</p>
<pre class="result notranslate">
// Creating markers
var hydMarker = new L.Marker([17.385044, 78.486671]);
var vskpMarker = new L.Marker([17.686816, 83.218482]);
var vjwdMarker = new L.Marker([16.506174, 80.648015]);

// Creating latlng object
var latlngs = [
   [17.385044, 78.486671],
   [16.506174, 80.648015],
   [17.686816, 83.218482]
];
// Creating a polygon
var polygon = L.polygon(latlngs, {color: 'red'});
</pre>
<p><b>Step 5</b> &minus; Create the Layer Group using <b>l.layerGroup()</b>. Pass the above created markers, polygons, etc., as shown below.</p>
<pre class="result notranslate">
// Creating layer group
var layerGroup = L.layerGroup([hydMarker, vskpMarker, vjwdMarker, polygon]);
</pre>
<p><b>Step 6</b> &minus; Add the layer group created in the previous step using the <b>addTo()</b> method.</p>
<pre class="result notranslate">
// Adding layer group to map
layerGroup.addTo(map);
</pre>
<h3>Example</h3>
<p>The following code creates a layer group which holds 3 markers and a polygon, and adds it to the map.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Layer Group&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 7
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);      // Adding layer to the map
         
         // Creating markers
         var hydMarker = new L.Marker([17.385044, 78.486671]);
         var vskpMarker = new L.Marker([17.686816, 83.218482]);
         var vjwdMarker = new L.Marker([16.506174, 80.648015]);
         
         // Creating latlng object
         var latlngs = [
            [17.385044, 78.486671],
            [16.506174, 80.648015],
            [17.686816, 83.218482]
         ];
         // Creating a polygon
         var polygon = L.polygon(latlngs, {color: 'red'});
         
         // Creating layer group
         var layerGroup = L.layerGroup([hydMarker, vskpMarker, vjwdMarker, polygon]);
         layerGroup.addTo(map);    // Adding layer group to map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/layergroup_map.jpg" alt="Layer Group Map" />
<h3>Adding a layer (element)</h3>
<p>You can add a layer to the feature group using the <b>addLayer()</b> method. To this method, you need to pass the element that is to be added.</p>
<p>You can add a circle with the city Hyderabad at the center.</p>
<pre class="result notranslate">
// Creating a circle
var circle = L.circle([16.506174, 80.648015], 50000, {color: 'red', fillColor:
   '#f03', fillOpacity: 0} );

// Adding circle to the layer group
layerGroup.addLayer(circle);
</pre>
<p>It will produce the following output. &minus;</p>
<img src="/leafletjs/images/add_layergroup_map.jpg" alt="Add Layer Group Map" />
<h3>Removing a Layer (Element)</h3>
<p>You can remove a layer from the feature group using the <b>removeLayer()</b> method. To this method, you need to pass the element that is to be removed.</p>
<p>You can remove the marker on the city named Vijayawada as shown below.</p>
<pre class="result notranslate">
// Removing layer from map
layerGroup.removeLayer(vjwdMarker);
</pre>
<p>It will produce the following output &minus;</p>
<img src="/leafletjs/images/remove_layer_map.jpg" alt="Remove Layer Map" />
<h2>Feature Groups</h2>
<p>It is similar to <b>LayerGroup</b> but it allows mouse events and bind popups to it. You can also set style to the entire group using <b>setStyle()</b> method.</p>
<p>Follow the steps given below to create a Feature Group and add it to the map.</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create elements (layers) such as markers, polygons, and circles that are needed, by instantiating the respective classes as shown below.</p>
<pre class="result notranslate">
// Creating markers
var hydMarker = new L.Marker([17.385044, 78.486671]);
var vskpMarker = new L.Marker([17.686816, 83.218482]);
var vjwdMarker = new L.Marker([16.506174, 80.648015]);

// Creating latlng object
var latlngs = [
   [17.385044, 78.486671],
   [16.506174, 80.648015],
   [17.686816, 83.218482]
];
// Creating a polygon
var polygon = L.polygon(latlngs, {color: 'red'});>
</pre>
<p><b>Step 5</b> &minus; Create Feature Group using <b>l.featureGroup()</b>. Pass the above-created markers, polygons, etc., as shown below.</p>
<pre class="result notranslate">
// Creating feature group
var featureGroup = L.featureGroup([hydMarker, vskpMarker, vjwdMarker, polygon]);
</pre>
<p><b>Step 6</b> &minus; If you set style to the feature group, it will be applied to each element (layer) in the group. You can do so using the <b>setStyle()</b> method and to this method, you need to pass values to the options such as color and opacity etc.</p>
<p>Set the style to the feature group created in the above step.</p>
<pre class="result notranslate">
// Setting style to the feature group
featureGroup.setStyle({color:'blue',opacity:.5});
</pre>
<p><b>Step 7</b> &minus; Bind the popup using the <b>bindPopup()</b> method, as shown below.</p>
<pre class="result notranslate">
// Binding popup to the feature group
featureGroup.bindPopup("Feature Group");
</pre>
<p><b>Step 8</b> &minus; Add the feature group created in the previous step using the <b>addTo()</b> method.</p>
<pre class="result notranslate">
// Adding layer group to map
featureGroup.addTo(map);
</pre>
<h3>Example</h3>
<p>The following code creates a feature group which holds 3 markers and a polygon, and adds it to the map.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Feature Group&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 7
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);      // Adding layer to the map
         
         // Creating markers
         var hydMarker = new L.Marker([17.385044, 78.486671]);
         var vskpMarker = new L.Marker([17.686816, 83.218482]);
         var vjwdMarker = new L.Marker([16.506174, 80.648015]);
         
         // Creating latlng object
         var latlngs = [
            [17.385044, 78.486671],
            [16.506174, 80.648015],
            [17.686816, 83.218482]
         ];
         var polygon = L.polygon(latlngs, {color: 'red'}); // Creating a polygon
         
         // Creating feature group
         var featureGroup = L.featureGroup([hydMarker, vskpMarker, vjwdMarker, polygon]);
         featureGroup.setStyle({color:'blue',opacity:.5});
         featureGroup.bindPopup("Feature Group");
         featureGroup.addTo(map);      // Adding layer group to map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/featuregroup_map.jpg" alt="Add Layer Group Map" />
<h1>LeafletJS - Event Handling</h1>
<p>The Leaflet JavaScript program can respond to various events generated by the user. In this chapter, we will provide a few examples demonstrating how to perform event handling while working with Leaflet.</p>
<h2>Event Handling</h2>
<p>Follow the steps given below to add events to the map.</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Add the handler to the map, as shown below.</p>
<pre class="result notranslate">
map.on("click", function(e){
   new L.Marker([e.latlng.lat, e.latlng.lng]).addTo(map);
})
</pre>
<h3>Example</h3>
<p>The following code demonstrates even handling using Leaflet. When executed, if you click on the map, a marker will be created on that particular location.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Leaflet Polygons&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [16.506174, 80.648015],
            zoom: 7
         }
         var map = new L.map('map', mapOptions);    // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer); // Adding layer to the map
         
         map.on("click", function(e){
            new L.Marker([e.latlng.lat, e.latlng.lng]).addTo(map);
         })
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/event_handling.jpg" alt="Event Handling" />
<h1>LeafletJS - Overlays</h1>
<p>Instead of map overlays, you can also use image, video overlays in a Leaflet application. In this chapter, we will see how to use such overlays.</p>
<h2>Image Overlay</h2>
<p>Follow the steps given below to use an image overlay.</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create the image overlay using <b>L.imageOverlay()</b>. Pass the URL of the image and an object representing image bounds, as shown below.</p>
<pre class="result notranslate">
// Creating Image overlay
var imageUrl = 'tpPoster.jpg';
var imageBounds = [[17.342761, 78.552432], [16.396553, 80.727725]];
var overlay = L.imageOverlay(imageUrl, imageBounds);
</pre>
<p><b>Step 5</b> &minus; Add the overlay to the map using <b>addTo()</b> method of the <b>imageOverlay</b> class, as shown below.</p>
<pre class="result notranslate">
// Adding overlay to the map
overlay.addTo(map);
</pre>
<h3>Example</h3>
<p>The following code demonstrates the usage of image overlay.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Image Overlay Example&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.342761, 78.552432],
            zoom: 8
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);  // Adding layer to the map
         
         // Creating Image overlay
         var imageUrl = 'tpPoster.jpg';
         var imageBounds = [[17.342761, 78.552432], [16.396553, 80.727725]];
         var overlay = L.imageOverlay(imageUrl, imageBounds);
         overlay.addTo(map);
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/overlay.jpg" alt="Overlay" />
<h1>LeafletJS - Controls</h1>
<p>Leaflet provides various controls such as zoom, attribution, scale, etc., where &minus;</p>
<ul class="list">
<li><p><b>Zoom</b> &minus; By default, this control exists at the top left corner of the map. It has two buttons <b>"+"</b> and <b>"–"</b>, using which you can zoom-in or zoom-out the map. You can remove the default zoom control by setting the <b><i>zoomControl</i></b> option of the map options to <b>false</b>.</p></li>
<li><p><b>Attribution</b> &minus; By default, this control exists at the bottom right corner of the map. It displays the attribution data in a small textbox. By default, it displays the text. You can remove the default attribution control by setting the <b>attributionControl</b> option of the map options to <b>false</b>.</p></li>
<li><p><b>Scale</b> &minus; By default, this control exists at the bottom left corner of the map. It displays the current center of the screen.</p></li>
</ul>
<p>In this chapter, we will explain how you can create and add all these three controls to your map using Leaflet JavaScript library.</p>
<h2>Zoom</h2>
<p>To add a zoom control of your own to the map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create the zoomOptions variable and define your own text values for the zoom-in and zoom-out options, instead of the default ones (+ and -).</p>
<p>Then, create the zoom control by passing the zoomOptions variable to <b>L.control.zoom()</b> as shown below.</p>
<pre class="result notranslate">
// zoom control options
var zoomOptions = {
   zoomInText: '1',
   zoomOutText: '0',
};
// Creating zoom control
var zoom = L.control.zoom(zoomOptions);
</pre>
<p><b>Step 5</b> &minus; Add the zoom control object created in the previous step to the map using the <b>addTo()</b> method.</p>
<pre class="result notranslate">
// Adding zoom control to the map
zoom.addTo(map);
</pre>
<h3>Example</h3>
<p>Following is the code to add your own zoom control to your map, instead of the default one. Here, on pressing 1, the map zooms in, and on pressing 0, the map zooms out.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Zoom Example&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 10,
            zoomControl: false
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);   // Adding layer to the map
         
         // zoom control options
         var zoomOptions = {
            zoomInText: '1',
            zoomOutText: '0',
         };
         var zoom = L.control.zoom(zoomOptions);   // Creating zoom control
         zoom.addTo(map);   // Adding zoom control to the map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/zoom_map.jpg" alt="Zoom Map" />
<h2>Attribution</h2>
<p>To add an attribution of your own to the map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the layer object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create the <b>attrOptions</b> variable and define your own prefix value instead of the default one (leaflet).</p>
<p>Then, create the attribution control by passing the <b>attrOptions</b> variable to <b>L.control.attribution()</b> as shown below.</p>
<pre class="result notranslate">
// Attribution options
var attrOptions = {
   prefix: 'attribution sample'
};

// Creating an attribution
var attr = L.control.attribution(attrOptions);
</pre>
<p><b>Step 5</b> &minus; Add the <b>attribution control</b> object created in the previous step to the map using the <b>addTo()</b> method.</p>
<pre class="result notranslate">
// Adding attribution to the map
attr.addTo(map);
</pre>
<h3>Example</h3>
<p>The following code adds our own attribution control to your map, instead of the default one. Here, instead the text <i>attribution sample</i> will be displayed.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Attribution Example&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css"/&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width: 900px; height: 580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 10,
            attributionControl: false
         }
         var map = new L.map('map', mapOptions); // Creating a map object
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer);    // Adding layer to the map
         
         // Attribution options
         var attrOptions = {
            prefix: 'attribution sample'
         };
         
         // Creating an attribution
         var attr = L.control.attribution(attrOptions);
         attr.addTo(map);  // Adding attribution to the map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/attribution_map.jpg" alt="Attribution Map" />
<h2>Scale</h2>
<p>To add a scale control of your own to the map using Leaflet JavaScript library, follow the steps given below &minus;</p>
<p><b>Step 1</b> &minus; Create a <b>Map</b> object by passing a &lt;<i>div</i>&gt; element (String or object) and map options (optional).</p>
<p><b>Step 2</b> &minus; Create a <b>Layer</b> object by passing the URL of the desired tile.</p>
<p><b>Step 3</b> &minus; Add the <b>layer</b> object to the map using the <b>addLayer()</b> method of the <b>Map</b> class.</p>
<p><b>Step 4</b> &minus; Create scale control by passing the using <b>L.control.scale()</b> as shown below.</p>
<pre class="result notranslate">
// Creating scale control
var scale = L.control.scale();
</pre>
<p><b>Step 5</b> &minus; Add the <b>scale control</b> object created in the previous step to the map using the <b>addTo()</b> method as shown below.</p>
<pre class="result notranslate">
// Adding scale control to the map
scale.addTo(map);
</pre>
<h3>Example</h3>
<p>The following code adds scale control to your map.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Scale Example&lt;/title&gt;
      &lt;link rel = "stylesheet" href = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" /&gt;
      &lt;script src = "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"&gt;&lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "map" style = "width:900px; height:580px"&gt;&lt;/div&gt;
      &lt;script&gt;
         // Creating map options
         var mapOptions = {
            center: [17.385044, 78.486671],
            zoom: 10
         }
         // Creating a map object
         var map = new L.map('map', mapOptions);
         
         // Creating a Layer object
         var layer = new L.TileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
         map.addLayer(layer); // Adding layer to the map
         var scale = L.control.scale(); // Creating scale control
         scale.addTo(map); // Adding scale control to the map
      &lt;/script&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>It generates the following output &minus;</p>
<img src="/leafletjs/images/scale_map.jpg" alt="Scale Map" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/leafletjs/leafletjs_controls.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/leafletjs/leafletjs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
