<!DOCTYPE html>
<html lang="en-US">
<head>
<title>RESTful Web Services - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="RESTful Web Services - Quick Guide - REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It revolves around resource where every compon"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/restful/restful_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#008db9;
}
a.demo {
    background:#008db9;
}
li.heading {
    background:#008db9;
}
.course-box{background:#008db9}
.home-intro-sub p{color:#008db9}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/restful/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/restful/images/restful-mini-logo.jpg" alt="RESTful Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">RESTful Tutorial</li>
<li><a href="/restful/index.htm">RESTful - Home</a></li>
<li><a href="/restful/restful_introduction.htm">RESTful - Introduction</a></li>
<li><a href="/restful/restful_environment.htm">RESTful - Environment Setup</a></li>
<li><a href="/restful/restful_first_application.htm">RESTful - First Application</a></li>
<li><a href="/restful/restful_resources.htm">RESTful - Resources</a></li>
<li><a href="/restful/restful_messages.htm">RESTful - Messages</a></li>
<li><a href="/restful/restful_addressing.htm">RESTful - Addressing</a></li>
<li><a href="/restful/restful_methods.htm">RESTful - Methods</a></li>
<li><a href="/restful/restful_statelessness.htm">RESTful - Statelessness</a></li>
<li><a href="/restful/restful_caching.htm">RESTful - Caching</a></li>
<li><a href="/restful/restful_security.htm">RESTful - Security</a></li>
<li><a href="/restful/restful_jax_rs.htm">RESTful - Java (JAX-RS)</a></li>
<li class="heading">RESTful Useful Resources</li>
<li><a href="/restful/restful_questions_answers.htm">RESTful - Questions and Answers</a></li>
<li><a href="/restful/restful_quick_guide.htm">RESTful - Quick Guide</a></li>
<li><a href="/restful/restful_useful_resources.htm">RESTful - Useful Resources</a></li>
<li><a href="/restful/restful_discussion.htm">RESTful - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>RESTful Web Services - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/restful/restful_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/restful/restful_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>RESTful Web Services - Introduction</h1>
<h2>What is REST architecture?</h2>
<p>REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It revolves around resource where every component is a resource and a resource is accessed by a common interface using HTTP standard methods. REST was first introduced by Roy Fielding in 2000.</p>
<p>In REST architecture, a REST Server simply provides access to resources and REST client accesses and modifies the resources. Here each resource is identified by URIs/ global IDs. REST uses various representation to represent a resource like text, JSON, XML. JSON is the most popular one.</p>
<h3>HTTP methods</h3>
<p>Following four HTTP methods are commonly used in REST based architecture.</p>
<ul class="list">
<li><p><b>GET</b> &minus; Provides a read only access to a resource.</p></li>
<li><p><b>POST</b> &minus; Used to create a new resource.</p></li>
<li><p><b>DELETE</b> &minus; Used to remove a resource.</p></li>
<li><p><b>PUT</b> &minus; Used to update a existing resource or create a new resource.</p></li>
</ul>
<h2>Introduction to RESTFul web services</h2>
<p>A web service is a collection of open protocols and standards used for exchanging data between applications or systems. Software applications written in various programming languages and running on various platforms can use web services to exchange data over computer networks like the Internet in a manner similar to inter-process communication on a single computer. This interoperability (e.g., between Java and Python, or Windows and Linux applications) is due to the use of open standards.</p>
<p>Web services based on REST Architecture are known as RESTful web services. These webservices uses HTTP methods to implement the concept of REST architecture. A RESTful web service usually defines a URI, Uniform Resource Identifier a service, provides resource representation such as JSON and set of HTTP Methods.</p>
<h2>Creating RESTFul Webservice</h2>
<p>In next chapters, we'll create a webservice say user management with following functionalities &minus;</p>
<table class="table table-bordered">
<tr>
<th>Sr.No.</th>
<th>URI</th>
<th>HTTP Method</th>
<th>POST body</th>
<th>Result</th>
</tr>
<tr>
<td>1</td>
<td>/UserService/users</td>
<td>GET</td><td>empty</td>
<td>Show list of all the users.</td>
</tr>
<tr>
<td>2</td>
<td>/UserService/addUser</td>
<td>POST</td>
<td>JSON String</td>
<td>Add details of new user.</td>
</tr>
<tr>
<td>3</td>
<td>/UserService/getUser/:id</td>
<td>GET</td><td>empty</td>
<td>Show details of a user.</td>
</tr>
</table>
<h1>RESTful Web Services - Environment Setup</h1>
<p>This tutorial will guide you on how to prepare a development environment to start your work with <b>Jersey Framework</b> to create RESTful Web Services. Jersey framework implements <b>JAX-RS 2.0</b> API, which is a standard specification to create RESTful Web Services. This tutorial will also teach you how to setup <b>JDK, Tomcat</b> and <b>Eclipse</b> on your machine before you the Jersey Framework is setup.</p>
<h2>Setup Java Development Kit (JDK)</h2>
<p>You can download the latest version of SDK from Oracle's Java site &minus; <a target="_blank" rel="nofollow" href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">Java SE Downloads</a>. You will find the instructions for installing JDK in the downloaded files. Follow the given instructions to install and configure the setup. Finally set the <b>PATH</b> and <b>JAVA_HOME</b> environment variables to refer to the directory that contains <b>Java</b> and <b>Javac</b>, typically java_install_dir/bin and java_install_dir respectively.</p>
<p>If you are running Windows and installed the JDK in C:\jdk1.7.0_75, you would have to put the following line in your C:\autoexec.bat file.</p>
<pre class="result notranslate">
set PATH = C:\jdk1.7.0_75\bin;%PATH% 
set JAVA_HOME = C:\jdk1.7.0_75
</pre>
<p>Alternatively, on Windows NT/2000/XP, you could also right-click on My Computer &rarr; select Properties &rarr; then Advanced &rarr; then Environment Variables. Then, you would update the PATH value and press the OK button.</p>
<p>On Unix (Solaris, Linux, etc.), if the SDK is installed in /usr/local/jdk1.7.0_75 and you use the C Shell, you would put the following into your .cshrc file.</p>
<pre class="result notranslate">
setenv PATH /usr/local/jdk1.7.0_75/bin:$PATH 
setenv JAVA_HOME /usr/local/jdk1.7.0_75
</pre>
<p>Alternatively, if you use an Integrated Development Environment (IDE) like Borland JBuilder, Eclipse, IntelliJ IDEA, or Sun ONE Studio, compile and run a simple program to confirm that the IDE knows where you installed Java, otherwise do proper setup as given document of the IDE.</p>
<h2>Setup Eclipse IDE</h2>
<p>All the examples in this tutorial have been written using the Eclipse IDE. So, I would suggest you should have the latest version of Eclipse installed on your machine.</p>
<p>To install Eclipse IDE, download the latest Eclipse binaries from <a target="_blank" rel="nofollow" href="https://www.eclipse.org/downloads/">https://www.eclipse.org/downloads/</a>. Once you downloaded the installation, unpack the binary distribution to a convenient location. For example, in C:\eclipse on windows, or /usr/local/eclipse on Linux/Unix and finally set the PATH variable appropriately.</p>
<p>Eclipse can be started by executing the following commands on a windows machine, or you can simply double click on eclipse.exe.</p>
<pre class="result notranslate">
%C:\eclipse\eclipse.exe
</pre>
<p>Eclipse can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$/usr/local/eclipse/eclipse 
</pre>
<p>After a successful startup, if everything is fine, then your screen should display the following result &minus;</p>
<img src="/restful/images/eclipse_home_page.jpg" alt="Eclipse Home Page" />
<h2>Setup Jersey Framework Libraries</h2>
<p>Now, if everything is fine, then you can proceed to setup the Jersey framework. Following are a few simple steps to download and install the framework on your machine.</p>
<ul class="list">
<li><p>Make a choice whether you want to install Jersey on Windows, or Unix and then proceed to the next step to download the .zip file for windows and then the .tz file for Unix.</p></li>
<li><p>Download the latest version of Jersey framework binaries from the following link – <a target="_blank" rel="nofollow" href="https://jersey.java.net/download.html">https://jersey.java.net/download.html</a>.</p></li>
<li><p>At the time of writing this tutorial, I downloaded <b>jaxrs-ri-2.17.zip</b> on my Windows machine and when you unzip the downloaded file it will give you the directory structure inside E:\jaxrs-ri-2.17\jaxrs-ri as shown in the following screenshot.</p></li>
</ul>
<img src="/restful/images/jaxrs_directories.jpg" alt="Jaxrs Directory" />
<p>You will find all the Jersey libraries in the directories <b>C:\jaxrs-ri-2.17\jaxrs-ri\lib</b> and dependencies in <b>C:\jaxrs-ri-2.17\jaxrs-ri\ext</b>. Make sure you set your CLASSPATH variable on this directory properly otherwise you will face problem while running your application. If you are using Eclipse, then it is not required to set the CLASSPATH because all the settings will be done through Eclipse.</p>
<h2>Setup Apache Tomcat</h2>
<p>You can download the latest version of Tomcat from <a target="_blank" rel="nofollow" href="https://tomcat.apache.org/">https://tomcat.apache.org/</a>. Once you downloaded the installation, unpack the binary distribution into a convenient location. For example in C:\apache-tomcat-7.0.59 on windows, or /usr/local/apache-tomcat-7.0.59 on Linux/Unix and set CATALINA_HOME environment variable pointing to the installation locations.</p>
<p>Tomcat can be started by executing the following commands on a windows machine, or you can simply double click on startup.bat.</p>
<pre class="result notranslate">
%CATALINA_HOME%\bin\startup.bat
</pre>
<p>or</p>
<pre class="result notranslate">
C:\apache-tomcat-7.0.59\bin\startup.bat 
</pre>
<p>Tomcat can be started by executing the following commands on a Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$CATALINA_HOME/bin/startup.sh
</pre>
<p>or</p>
<pre class="result notranslate">
/usr/local/apache-tomcat-7.0.59/bin/startup.sh
</pre>
<p>After a successful startup, the default web applications included with Tomcat will be available by visiting <b>http://localhost:8080/</b>. If everything is fine then it should display the following result &minus;</p>
<img src="/restful/images/tomcat.jpg" alt="Tomcat" />
<p>Further information about configuring and running Tomcat can be found in the documentation included on this page. This information can also be found on the Tomcat website &minus; <a target="_blank" rel="nofollow" href="https://tomcat.apache.org">https://tomcat.apache.org.</a></p>
<p>Tomcat can be stopped by executing the following commands on a windows machine &minus;</p>
<pre class="result notranslate">
%CATALINA_HOME%\bin\shutdown 
</pre>
<p>or</p>
<pre class="result notranslate">
C:\apache-tomcat-7.0.59\bin\shutdown 
</pre>
<p>Tomcat can be stopped by executing the following commands on Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$CATALINA_HOME/bin/shutdown.sh 
</pre>
<p>or</p>
<pre class="result notranslate">
/usr/local/apache-tomcat-7.0.59/bin/shutdown.sh
</pre>
<p>Once you are done with this last step, you are ready to proceed for your first Jersey example which you will see in the next chapter.</p>
<h1>RESTful Web Services - First Application</h1>
<p>Let us start writing the actual RESTful web services with Jersey Framework. Before you start writing your first example using the Jersey Framework, you have to make sure that you have setup your Jersey environment properly as explained in the <a href="/restful/restful_environment.htm">RESTful Web Services - Environment Setup</a> chapter. Here, I am also assuming that you have a little working knowledge of Eclipse IDE.</p>
<p>So, let us proceed to write a simple Jersey Application which will expose a web service method to display the list of users.</p>
<h2>Creating a Java Project</h2>
<p>The first step is to create a Dynamic Web Project using Eclipse IDE. Follow the option <b>File &rarr; New &rarr; Project</b> and finally select the <b>Dynamic Web Project</b> wizard from the wizard list. Now name your project as <b>UserManagement</b> using the wizard window as shown in the following screenshot &minus;</p>
<img src="/restful/images/wizard.jpg" alt="Dynamic Web Project Wizard" />
<p>Once your project is created successfully, you will have the following content in your <b>Project Explorer</b> &minus;</p>
<img src="/restful/images/usermanagement_dir.jpg" alt="Usermanagement Directories" />
<h3>Adding the Required Libraries</h3>
<p>As a second step let us add Jersey Framework and its dependencies (libraries) in our project. Copy all jars from following directories of download jersey zip folder in WEB-INF/lib directory of the project.</p>
<ul class="list">
<li>\jaxrs-ri-2.17\jaxrs-ri\api</li>
<li>\jaxrs-ri-2.17\jaxrs-ri\ext</li>
<li>\jaxrs-ri-2.17\jaxrs-ri\lib</li>
</ul>
<p>Now, right click on your project name <b>UserManagement</b> and then follow the option available in context menu &minus; <b>Build Path &rarr; Configure Build Path</b> to display the Java Build Path window.</p>
<p>Now use <b>Add JARs</b> button available under <b>Libraries</b> tab to add the JARs present in WEBINF/lib directory.</p>
<h2>Creating the Source Files</h2>
<p>Now let us create the actual source files under the <b>UserManagement</b> project. First we need to create a package called <b>com.tutorialspoint</b>. To do this, right click on src in package explorer section and follow the option &minus; <b>New &rarr; Package</b>.</p>
<p>Next we will create <b>UserService.java, User.java,UserDao.java</b> files under the com.tutorialspoint package.</p>
<p><b>User.java</b></p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;  

import java.io.Serializable;  
import javax.xml.bind.annotation.XmlElement; 
import javax.xml.bind.annotation.XmlRootElement; 
@XmlRootElement(name = "user") 

public class User implements Serializable {  
   private static final long serialVersionUID = 1L; 
   private int id; 
   private String name; 
   private String profession;  
   public User(){} 
    
   public User(int id, String name, String profession){  
      this.id = id; 
      this.name = name; 
      this.profession = profession; 
   }  
   public int getId() { 
      return id; 
   }  
   @XmlElement 
   public void setId(int id) { 
      this.id = id; 
   } 
   public String getName() { 
      return name; 
   } 
   @XmlElement
   public void setName(String name) { 
      this.name = name; 
   } 
   public String getProfession() { 
      return profession; 
   } 
   @XmlElement 
   public void setProfession(String profession) { 
      this.profession = profession; 
   }   
} 
</pre>
<p><b>UserDao.java</b></p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;  

import java.io.File; 
import java.io.FileInputStream; 
import java.io.FileNotFoundException;  
import java.io.FileOutputStream; 
import java.io.IOException; 
import java.io.ObjectInputStream; 
import java.io.ObjectOutputStream; 
import java.util.ArrayList; 
import java.util.List;  

public class UserDao { 
   public List&lt;User&gt; getAllUsers(){ 
      
      List&lt;User&gt; userList = null; 
      try { 
         File file = new File("Users.dat"); 
         if (!file.exists()) { 
            User user = new User(1, "Mahesh", "Teacher"); 
            userList = new ArrayList&lt;User&gt;(); 
            userList.add(user); 
            saveUserList(userList); 
         } 
         else{ 
            FileInputStream fis = new FileInputStream(file); 
            ObjectInputStream ois = new ObjectInputStream(fis); 
            userList = (List&lt;User&gt;) ois.readObject(); 
            ois.close(); 
         } 
      } catch (IOException e) { 
         e.printStackTrace(); 
      } catch (ClassNotFoundException e) { 
         e.printStackTrace(); 
      }   
      return userList; 
   } 
   private void saveUserList(List&lt;User&gt; userList){ 
      try { 
         File file = new File("Users.dat"); 
         FileOutputStream fos;  
         fos = new FileOutputStream(file); 
         ObjectOutputStream oos = new ObjectOutputStream(fos); 
         oos.writeObject(userList); 
         oos.close(); 
      } catch (FileNotFoundException e) { 
         e.printStackTrace(); 
      } catch (IOException e) { 
         e.printStackTrace(); 
      } 
   }    
}
</pre>
<p><b>UserService.java</b></p>
<pre class="prettyprint notranslate">
package com.tutorialspoint;  

import java.util.List; 
import javax.ws.rs.GET; 
import javax.ws.rs.Path; 
import javax.ws.rs.Produces; 
import javax.ws.rs.core.MediaType;  
@Path("/UserService") 

public class UserService {  
   UserDao userDao = new UserDao();  
   @GET 
   @Path("/users") 
   @Produces(MediaType.APPLICATION_XML) 
   public List&lt;User&gt; getUsers(){ 
      return userDao.getAllUsers(); 
   }  
}
</pre>
<p>There are two important points to be noted about the main program,</p>
<h3>UserService.java</h3>
<ul class="list">
<li><p>The first step is to specify a path for the web service using @Path annotation to the UserService.</p></li>
<li><p>The second step is to specify a path for the particular web service method using @Path annotation to method of UserService.</p></li>
</ul>
<h2>Creating the Web.xml configuration File</h2>
<p>You need to create a Web xml Configuration file which is an XML file and is used to specify Jersey framework servlet for our application.</p>
<p><b>web.xml</b></p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;web-app xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"  
   xmlns = "http://java.sun.com/xml/ns/javaee"  
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee  
   http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"  
   id = "WebApp_ID" version = "3.0"&gt; 
   &lt;display-name&gt;User Management&lt;/display-name&gt; 
   &lt;servlet&gt; 
      &lt;servlet-name&gt;Jersey RESTful Application&lt;/servlet-name&gt; 
      &lt;servlet-class&gt;org.glassfish.jersey.servlet.ServletContainer&lt;/servlet-class&gt; 
      &lt;init-param&gt; 
         &lt;param-name&gt;jersey.config.server.provider.packages&lt;/param-name&gt; 
         &lt;param-value&gt;com.tutorialspoint&lt;/param-value&gt; 
      &lt;/init-param&gt; 
   &lt;/servlet&gt; 
   &lt;servlet-mapping&gt; 
      &lt;servlet-name&gt;Jersey RESTful Application&lt;/servlet-name&gt; 
      &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt; 
   &lt;/servlet-mapping&gt;   
&lt;/web-app&gt;
</pre>
<h3>Deploying the Program</h3>
<p>Once you are done with creating source and web configuration files, you are ready for this step which is compiling and running your program. To do this, using Eclipse, export your application as a war file and deploy the same in tomcat.</p>
<p>To create a WAR file using eclipse, follow the option <b>File &rarr; export &rarr; Web &rarr; War File</b> and finally select project UserManagement and destination folder. To deploy a war file in Tomcat, place the UserManagement.war in the <b>Tomcat Installation Directory &rarr; webapps directory</b> and start the Tomcat.</p>
<h3>Running the Program</h3>
<p>We are using <a target="_blank" rel="nofollow" href="https://www.getpostman.com/">Postman</a>, a Chrome extension, to test our webservices.</p>
<p>Make a request to UserManagement to get list of all the users. Put http://localhost:8080/UserManagement/rest/UserService/users in POSTMAN with GET request and see the following result.</p>
<img src="/restful/images/restful_postman.jpg" alt="RESTful API, All users"/>
<p>Congratulations, you have created your first RESTful Application successfully.</p>
<h1>RESTful Web Services - Resources</h1>
<h2>What is a Resource?</h2>
<p>REST architecture treats every content as a resource. These resources can be Text Files, Html Pages, Images, Videos or Dynamic Business Data. REST Server simply provides access to resources and REST client accesses and modifies the resources. Here each resource is identified by URIs/ Global IDs. REST uses various representations to represent a resource where Text, JSON, XML. The most popular representations of resources are XML and JSON.</p>
<h3>Representation of Resources</h3>
<p>A resource in REST is a similar Object in Object Oriented Programming or is like an Entity in a Database. Once a resource is identified then its representation is to be decided using a standard format so that the server can send the resource in the above said format and client can understand the same format.</p>
<p>For example, in <a href="/restful/restful_first_application.htm">RESTful Web Services - First Application</a> chapter, a user is a resource which is represented using the following XML format &minus;</p>
<pre class="prettyprint notranslate">
&lt;user&gt; 
   &lt;id&gt;1&lt;/id&gt; 
   &lt;name&gt;Mahesh&lt;/name&gt;
   &lt;profession&gt;Teacher&lt;/profession&gt; 
&lt;/user&gt; 
</pre>
<p>The same resource can be represented in JSON format as follows &minus;</p>
<pre class="prettyprint notranslate">
{ 
   "id":1, 
   "name":"Mahesh", 
   "profession":"Teacher" 
}
</pre>
<h3>Good Resources Representation</h3>
<p>REST does not impose any restriction on the format of a resource representation. A client can ask for JSON representation whereas another client may ask for XML representation of the same resource to the server and so on. It is the responsibility of the REST server to pass the client the resource in the format that the client understands.</p>
<p>Following are some important points to be considered while designing a representation format of a resource in RESTful Web Services.</p>
<ul class="list">
<li><p><b>Understandability</b> &minus; Both the Server and the Client should be able to understand and utilize the representation format of the resource.</p></li>
<li><p><b>Completeness</b> &minus; Format should be able to represent a resource completely. For example, a resource can contain another resource. Format should be able to represent simple as well as complex structures of resources.</p></li>
<li><p><b>Linkablity</b> &minus; A resource can have a linkage to another resource, a format should be able to handle such situations.</p></li>
</ul>
<p>However, at present most of the web services are representing resources using either XML or JSON format. There are plenty of libraries and tools available to understand, parse, and modify XML and JSON data.</p>
<h1>RESTful Web Services - Messages</h1>
<p>RESTful Web Services make use of HTTP protocols as a medium of communication between client and server. A client sends a message in form of a HTTP Request and the server responds in the form of an HTTP Response. This technique is termed as Messaging. These messages contain message data and metadata i.e. information about message itself. Let us have a look on the HTTP Request and HTTP Response messages for HTTP 1.1.</p>
<h2>HTTP Request</h2>
<img src="/restful/images/http_request.jpg" alt="HTTP Request" />
<p>An HTTP Request has five major parts &minus;</p>
<ul class="list">
<li><p><b>Verb</b> &minus; Indicates the HTTP methods such as GET, POST, DELETE, PUT, etc.</p></li>
<li><p><b>URI</b> &minus; Uniform Resource Identifier (URI) to identify the resource on the server.</p></li>
<li><p><b>HTTP Version</b> &minus; Indicates the HTTP version. For example, HTTP v1.1.</p></li>
<li><p><b>Request Header</b> &minus; Contains metadata for the HTTP Request message as key-value pairs. For example, client (or browser) type, format supported by the client, format of the message body, cache settings, etc.</p></li>
<li><p><b>Request Body</b> &minus; Message content or Resource representation.</p></li>
</ul>
<h2>HTTP Response</h2>
<img src="/restful/images/http_response.jpg" alt="HTTP Response" />
<p>An HTTP Response has four major parts &minus;</p>
<ul class="list">
<li><p><b>Status/Response Code</b> &minus; Indicates the Server status for the requested resource. For example, 404 means resource not found and 200 means response is ok.</p></li>
<li><p><b>HTTP Version</b> &minus; Indicates the HTTP version. For example HTTP v1.1.</p></li>
<li><p><b>Response Header</b> &minus; Contains metadata for the HTTP Response message as keyvalue pairs. For example, content length, content type, response date, server type, etc.</p></li>
<li><p><b>Response Body</b> &minus; Response message content or Resource representation.</p></li>
</ul>
<h3>Example</h3>
<p>As we have explained in the <a href="/restful/restful_first_application.htm">RESTful Web Services - First Application chapter</a>, let us put http://localhost:8080/UserManagement/rest/UserService/users in the POSTMAN with a GET request. If you click on the Preview button which is near the send button of Postman and then click on the Send button, you may see the following output.</p>
<img src="/restful/images/postman_request_response.jpg" alt="HTTP Request/Response" />
<p>Here you can see, the browser sent a GET request and received a response body as XML.</p>
<h1>RESTful Web Services - Addressing</h1>
<p>Addressing refers to locating a resource or multiple resources lying on the server. It is analogous to locate a postal address of a person.</p>
<p>Each resource in REST architecture is identified by its URI (Uniform Resource Identifier). A URI is of the following format &minus;</p>
<pre class="result notranslate">
&lt;protocol&gt;://&lt;service-name&gt;/&lt;ResourceType&gt;/&lt;ResourceID&gt;
</pre>
<p>Purpose of an URI is to locate a resource(s) on the server hosting the web service. Another important attribute of a request is VERB which identifies the operation to be performed on the resource. For example, in <a href="/restful/restful_first_application.htm">RESTful Web Services - First Application</a> chapter, the URI is <b>http://localhost:8080/UserManagement/rest/UserService/users</b> and the VERB is GET.</p>
<h2>Constructing a Standard URI</h2>
<p>The following are important points to be considered while designing a URI &minus;</p>
<ul class="list">
<li><p><b>Use Plural Noun</b> &minus; Use plural noun to define resources. For example, we've used users to identify users as a resource.</p></li>
<li><p><b>Avoid using spaces</b> &minus; Use underscore (_) or hyphen (-) when using a long resource name. For example, use authorized_users instead of authorized%20users.</p></li>
<li><p><b>Use lowercase letters</b> &minus; Although URI is case-insensitive, it is a good practice to keep the url in lower case letters only.</p></li>
<li><p><b>Maintain Backward Compatibility</b> &minus; As Web Service is a public service, a URI once made public should always be available. In case, URI gets updated, redirect the older URI to a new URI using the HTTP Status code, 300.</p></li>
<li><p><b>Use HTTP Verb</b> &minus; Always use HTTP Verb like GET, PUT and DELETE to do the operations on the resource. It is not good to use operations name in the URI.</p></li>
</ul>
<h3>Example</h3>
<p>Following is an example of a poor URI to fetch a user.</p>
<pre class="result notranslate">
http://localhost:8080/UserManagement/rest/UserService/getUser/1 
</pre>
<p>Following is an example of a good URI to fetch a user.</p>
<pre class="result notranslate">
http://localhost:8080/UserManagement/rest/UserService/users/1
</pre>
<h1>RESTful Web Services - Methods</h1>
<p>As we have discussed in the earlier chapters that RESTful Web Service uses a lot of HTTP verbs to determine the operation to be carried out on the specified resource(s). The following table states the examples of the most commonly used HTTP Verbs.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">HTTP Method, URI and Operation</th>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;"></p>1</td>
<td><p><b>GET</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users</p>
<p>Gets the list of users.</p>
<p>(Read Only)</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">2</p></td>
<td><p><b>GET</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users/1</p>
<p>Gets the User of Id 1</p>
<p>(Read Only)</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">3</p></td>
<td><p><b>PUT</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users/2</p>
<p>Inserts User with Id 2</p>
<p>(Idempotent)</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">4</p></td>
<td><p><b>POST</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users/2</p>
<p>Updates the User with Id 2</p>
<p>(N/A)</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">5</p></td>
<td><p><b>DELETE</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users/1</p>
<p>Deletes the User with Id 1</p>
<p>(Idempotent)</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">6</p></td>
<td><p><b>OPTIONS</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users</p>
<p>Lists out the supported operations in a web service.</p>
<p>(Read Only)</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">7</p></td>
<td><p><b>HEAD</b></p>
<p>http://localhost:8080/UserManagement/rest/UserService/users</p>
<p>Returns the HTTP Header only, no Body.</p>
<p>(Read Only)</p>
</td>
</tr>
</table>
<p>The following points are to be considered.</p>
<ul class="list">
<li><p>GET operations are read only and are safe.</p></li>
<li><p>PUT and DELETE operations are idempotent, which means their result will always be the same, no matter how many times these operations are invoked.</p></li>
<li><p>PUT and POST operation are nearly the same with the difference lying only in the result where the PUT operation is idempotent and POST operation can cause a different result.</p></li>
</ul>
<h3>Example</h3>
<p>Let us update an Example created in the <a href="/restful/restful_first_application.htm">RESTful Web Services - First Application</a> chapter to create a Web service which can perform CRUD (Create, Read, Update, Delete) operations. For simplicity, we have used a file I/O to replace Database operations.</p>
<p>Let us update the <b>User.java, UserDao.java</b> and <b>UserService.java</b> files under the com.tutorialspoint package.</p>
<h3>User.java</h3>
<pre class="prettyprint notranslate">
package com.tutorialspoint; 

import java.io.Serializable;  
import javax.xml.bind.annotation.XmlElement; 
import javax.xml.bind.annotation.XmlRootElement; 
@XmlRootElement(name = "user") 

public class User implements Serializable {  
   private static final long serialVersionUID = 1L; 
   private int id; 
   private String name; 
   private String profession;  
   public User(){}  
   
   public User(int id, String name, String profession){ 
      this.id = id; 
      this.name = name; 
      this.profession = profession; 
   }  
    
   public int getId() {
      return id; 
   } 
   @XmlElement 
   public void setId(int id) { 
      this.id = id; 
   } 
   public String getName() { 
      return name; 
   } 
   @XmlElement 
      public void setName(String name) { 
      this.name = name; 
   } 
   public String getProfession() { 
      return profession; 
   } 
   @XmlElement 
   public void setProfession(String profession) { 
      this.profession = profession; 
   }   
   @Override 
   public boolean equals(Object object){ 
      if(object == null){ 
         return false; 
      }else if(!(object instanceof User)){ 
         return false; 
      }else { 
         User user = (User)object; 
         if(id == user.getId() 
            && name.equals(user.getName()) 
            && profession.equals(user.getProfession())){ 
               return true; 
         }
      } 
      return false; 
   }  
} 
</pre>
<h3>UserDao.java</h3>
<pre class="prettyprint notranslate">
package com.tutorialspoint;  

import java.io.File; 
import java.io.FileInputStream; 
import java.io.FileNotFoundException; 
import java.io.FileOutputStream; 
import java.io.IOException; 
import java.io.ObjectInputStream; 
import java.io.ObjectOutputStream; 
import java.util.ArrayList; 
import java.util.List;  

public class UserDao { 
   public List&lt;User&gt; getAllUsers(){ 
      List&lt;User&gt; userList = null; 
      try { 
         File file = new File("Users.dat"); 
         if (!file.exists()) { 
            User user = new User(1, "Mahesh", "Teacher"); 
            userList = new ArrayList&lt;User&gt;(); 
            userList.add(user); 
            saveUserList(userList);   
         } 
         else{ 
            FileInputStream fis = new FileInputStream(file); 
            ObjectInputStream ois = new ObjectInputStream(fis); 
            userList = (List&lt;User&gt;) ois.readObject(); 
            ois.close(); 
         }
      } catch (IOException e) { 
         e.printStackTrace(); 
      } catch (ClassNotFoundException e) { 
         e.printStackTrace(); 
      }   
      return userList; 
   }  
   public User getUser(int id){ 
      List&lt;User&gt; users = getAllUsers();  
      for(User user: users){ 
         if(user.getId() == id){ 
            return user; 
         } 
      } 
      return null; 
   }  
   public int addUser(User pUser){ 
      List&lt;User&gt; userList = getAllUsers(); 
      boolean userExists = false; 
      for(User user: userList){ 
         if(user.getId() == pUser.getId()){ 
            userExists = true; 
            break; 
         } 
      }   
      if(!userExists){ 
         userList.add(pUser); 
         saveUserList(userList); 
         return 1; 
      } 
      return 0; 
   }
   public int updateUser(User pUser){ 
      List&lt;User&gt; userList = getAllUsers();  
      for(User user: userList){ 
         if(user.getId() == pUser.getId()){ 
            int index = userList.indexOf(user);    
            userList.set(index, pUser); 
            saveUserList(userList); 
            return 1; 
         } 
      }   
      return 0; 
   }  
   public int deleteUser(int id){ 
      List&lt;User&gt; userList = getAllUsers();  
      for(User user: userList){ 
         if(user.getId() == id){ 
            int index = userList.indexOf(user);    
            userList.remove(index); 
            saveUserList(userList); 
            return 1;    
         } 
      }   
      return 0; 
   }  
   private void saveUserList(List&lt;User&gt; userList){ 
      try { 
         File file = new File("Users.dat"); 
         FileOutputStream fos;  
         fos = new FileOutputStream(file);
         ObjectOutputStream oos = new ObjectOutputStream(fos);   
         oos.writeObject(userList); 
         oos.close(); 
      } catch (FileNotFoundException e) { 
         e.printStackTrace(); 
      } catch (IOException e) { 
         e.printStackTrace(); 
      } 
   } 
}
</pre>
<h3>UserService.java</h3>
<pre class="prettyprint notranslate">
package com.tutorialspoint;  

import java.io.IOException; 
import java.util.List;  
import javax.servlet.http.HttpServletResponse; 
import javax.ws.rs.Consumes; 
import javax.ws.rs.DELETE; 
import javax.ws.rs.FormParam; 
import javax.ws.rs.GET; 
import javax.ws.rs.OPTIONS; 
import javax.ws.rs.POST; 
import javax.ws.rs.PUT; 
import javax.ws.rs.Path; 
import javax.ws.rs.PathParam; 
import javax.ws.rs.Produces; 
import javax.ws.rs.core.Context; 
import javax.ws.rs.core.MediaType;  
@Path("/UserService") 

public class UserService { 
  
   UserDao userDao = new UserDao(); 
   private static final String SUCCESS_RESULT = "&lt;result&gt;success&lt;/result&gt;"; 
   private static final String FAILURE_RESULT = "&lt;result&gt;failure&lt;/result&gt;";  
   @GET 
   @Path("/users") 
   @Produces(MediaType.APPLICATION_XML) 
   public List&lt;User&gt; getUsers(){ 
      return userDao.getAllUsers(); 
   }  
   @GET 
   @Path("/users/{userid}") 
   @Produces(MediaType.APPLICATION_XML) 
   public User getUser(@PathParam("userid") int userid){ 
      return userDao.getUser(userid); 
   }  
   @PUT 
   @Path("/users") 
   @Produces(MediaType.APPLICATION_XML) 
   @Consumes(MediaType.APPLICATION_FORM_URLENCODED) 
   public String createUser(@FormParam("id") int id, 
      @FormParam("name") String name, 
      @FormParam("profession") String profession, 
      @Context HttpServletResponse servletResponse) throws IOException{ 
      User user = new User(id, name, profession); 
      int result = userDao.addUser(user); 
      if(result == 1){ 
         return SUCCESS_RESULT; 
      } 
      return FAILURE_RESULT; 
   }  
   @POST 
   @Path("/users")  
   @Produces(MediaType.APPLICATION_XML)
   @Consumes(MediaType.APPLICATION_FORM_URLENCODED) 
   public String updateUser(@FormParam("id") int id, 
      @FormParam("name") String name, 
      @FormParam("profession") String profession, 
      @Context HttpServletResponse servletResponse) throws IOException{ 
      User user = new User(id, name, profession); 
      int result = userDao.updateUser(user); 
      if(result == 1){ 
         return SUCCESS_RESULT; 
      } 
      return FAILURE_RESULT; 
   }  
   @DELETE 
   @Path("/users/{userid}") 
   @Produces(MediaType.APPLICATION_XML) 
   public String deleteUser(@PathParam("userid") int userid){ 
      int result = userDao.deleteUser(userid); 
      if(result == 1){ 
         return SUCCESS_RESULT; 
      } 
      return FAILURE_RESULT; 
   }  
   @OPTIONS 
   @Path("/users") 
   @Produces(MediaType.APPLICATION_XML) 
   public String getSupportedOperations(){ 
      return "&lt;operations&gt;GET, PUT, POST, DELETE&lt;/operations&gt;"; 
   } 
}
</pre>
<p>Now using Eclipse, export your application as a <b>WAR File</b> and deploy the same in Tomcat. To create a WAR file using eclipse, follow this path – <b>File &rarr; export &rarr; Web &rarr; War File</b> and finally select project UserManagement and the destination folder. To deploy a WAR file in Tomcat, place the UserManagement.war in the <b>Tomcat Installation Directory &rarr; webapps</b> directory and the start Tomcat.</p>
<h2>Testing the Web Service</h2>
<p>Jersey provides APIs to create a Web Service Client to test web services. We have created a sample test class <b>WebServiceTester.java</b> under the com.tutorialspoint package in the same project.</p>
<h3>WebServiceTester.java</h3>
<pre class="prettyprint notranslate">
package com.tutorialspoint;  

import java.util.List; 
import javax.ws.rs.client.Client; 
import javax.ws.rs.client.ClientBuilder; 
import javax.ws.rs.client.Entity; 
import javax.ws.rs.core.Form; 
import javax.ws.rs.core.GenericType; 
import javax.ws.rs.core.MediaType;  

public class WebServiceTester  {  
   private Client client; 
   private String REST_SERVICE_URL = "
   http://localhost:8080/UserManagement/rest/UserService/users"; 
   private static final String SUCCESS_RESULT = "&lt;result&gt;success&lt;/result&gt;"; 
   private static final String PASS = "pass"; 
   private static final String FAIL = "fail";  
   private void init(){ 
      this.client = ClientBuilder.newClient(); 
   }  
   public static void main(String[] args){ 
      WebServiceTester tester = new WebServiceTester(); 
      //initialize the tester 
      tester.init(); 
      //test get all users Web Service Method 
      tester.testGetAllUsers(); 
      //test get user Web Service Method  
      tester.testGetUser();
      //test update user Web Service Method 
      tester.testUpdateUser(); 
      //test add user Web Service Method 
      tester.testAddUser(); 
      //test delete user Web Service Method 
      tester.testDeleteUser(); 
   } 
   //Test: Get list of all users 
   //Test: Check if list is not empty 
   private void testGetAllUsers(){ 
      GenericType&lt;List&lt;User&gt;&gt; list = new GenericType&lt;List&lt;User&gt;&gt;() {}; 
      List&lt;User&gt; users = client 
         .target(REST_SERVICE_URL) 
         .request(MediaType.APPLICATION_XML) 
         .get(list); 
      String result = PASS; 
      if(users.isEmpty()){ 
         result = FAIL; 
      } 
      System.out.println("Test case name: testGetAllUsers, Result: " + result ); 
   } 
   //Test: Get User of id 1 
   //Test: Check if user is same as sample user 
   private void testGetUser(){ 
      User sampleUser = new User(); 
      sampleUser.setId(1);  
      User user = client 
         .target(REST_SERVICE_URL) 
         .path("/{userid}") 
         .resolveTemplate("userid", 1) 
         .request(MediaType.APPLICATION_XML) 
         .get(User.class); 
      String result = FAIL; 
      if(sampleUser != null && sampleUser.getId() == user.getId()){
         result = PASS; 
      } 
      System.out.println("Test case name: testGetUser, Result: " + result ); 
   } 
   //Test: Update User of id 1 
   //Test: Check if result is success XML. 
   private void testUpdateUser(){ 
      Form form = new Form(); 
      form.param("id", "1"); 
      form.param("name", "suresh"); 
      form.param("profession", "clerk");  
      String callResult = client 
         .target(REST_SERVICE_URL) 
         .request(MediaType.APPLICATION_XML) 
         .post(Entity.entity(form, 
         MediaType.APPLICATION_FORM_URLENCODED_TYPE), 
         String.class); 
      String result = PASS; 
      if(!SUCCESS_RESULT.equals(callResult)){ 
         result = FAIL; 
      }  
      System.out.println("Test case name: testUpdateUser, Result: " + result); 
   } 
   //Test: Add User of id 2 
   //Test: Check if result is success XML. 
   private void testAddUser(){ 
      Form form = new Form(); 
      form.param("id", "2"); 
      form.param("name", "naresh"); 
      form.param("profession", "clerk");  
      String callResult = client 
         .target(REST_SERVICE_URL) 
         .request(MediaType.APPLICATION_XML) 
         .put(Entity.entity(form, 
         MediaType.APPLICATION_FORM_URLENCODED_TYPE), 
         String.class); 
    
      String result = PASS; 
      if(!SUCCESS_RESULT.equals(callResult)){ 
         result = FAIL; 
      }  
      System.out.println("Test case name: testAddUser, Result: " + result ); 
   } 
   //Test: Delete User of id 2 
   //Test: Check if result is success XML. 
   private void testDeleteUser(){ 
      String callResult = client 
         .target(REST_SERVICE_URL) 
         .path("/{userid}") 
         .resolveTemplate("userid", 2) 
         .request(MediaType.APPLICATION_XML) 
         .delete(String.class);  
      String result = PASS; 
      if(!SUCCESS_RESULT.equals(callResult)){ 
         result = FAIL; 
      } 
      System.out.println("Test case name: testDeleteUser, Result: " + result); 
   } 
}
</pre>
<p>Now run the tester using Eclipse. Right click on the file and follow the option <b>Run as &rarr; Java Application</b>. You will see the following result in the Eclipse console &minus;</p>
<pre class="result notranslate">
Test case name: testGetAllUsers, Result: pass 
Test case name: testGetUser, Result: pass 
Test case name: testUpdateUser, Result: pass 
Test case name: testAddUser, Result: pass 
Test case name: testDeleteUser, Result: pass 
</pre>
<h1>RESTful Web Services - Statelessness</h1>
<p>As per the REST architecture, a RESTful Web Service should not keep a client state on the server. This restriction is called Statelessness. It is the responsibility of the client to pass its context to the server and then the server can store this context to process the client's further request. For example, session maintained by server is identified by session identifier passed by the client.</p>
<p>RESTful Web Services should adhere to this restriction. We have seen this in the <a href="/restful/restful_methods.htm">RESTful Web Services - Methods</a> chapter, that the web service methods are not storing any information from the client they are invoked from.</p>
<p><b>Consider the following URL &minus;</b></p>
<p>https://localhost:8080/UserManagement/rest/UserService/users/1</p>
<p>If you hit the above url using your browser or using a java based client or using Postman, result will always be the User XML whose Id is 1 because the server does not store any information about the client.</p>
<pre class="prettyprint notranslate">
&lt;user&gt; 
   &lt;id&gt;1&lt;/id&gt; 
   &lt;name&gt;mahesh&lt;/name&gt; 
   &lt;profession&gt;1&lt;/profession&gt; 
&lt;/user&gt;
</pre>
<h2>Advantages of Statelessness</h2>
<p>Following are the benefits of statelessness in RESTful Web Services &minus;</p>
<ul class="list">
<li><p>Web services can treat each method request independently.</p></li>
<li><p>Web services need not maintain the client's previous interactions. It simplifies the application design.</p></li>
<li><p>As HTTP is itself a statelessness protocol, RESTful Web Services work seamlessly with the HTTP protocols.</p></li>
</ul>
<h2>Disadvantages of Statelessness</h2>
<p>Following are the disadvantages of statelessness in RESTful Web Services &minus;</p>
<ul class="list">
<li><p>Web services need to get extra information in each request and then interpret to get the client's state in case the client interactions are to be taken care of.</p></li>
</ul>
<h1>RESTful Web Services - Caching</h1>
<p>Caching refers to storing the server response in the client itself, so that a client need not make a server request for the same resource again and again. A server response should have information about how caching is to be done, so that a client caches the response for a time-period or never caches the server response.</p>
<p>Following are the headers which a server response can have in order to configure a client's caching &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Header &amp; Description</th>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">1</p>
</td>
<td><p><b>Date</b></p>
<p>Date and Time of the resource when it was created.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">2</p></td>
<td><p><b>Last Modified</b></p>
<p>Date and Time of the resource when it was last modified.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">3</p></td>
<td><p><b>Cache-Control</b></p>
<p>Primary header to control caching.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">4</p></td>
<td><p><b>Expires</b></p>
<p>Expiration date and time of caching.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">5</p></td>
<td><p><b>Age</b></p>
<p>Duration in seconds from when resource was fetched from the server.</p>
</td>
</tr>
</table>
<h2>Cache-Control Header</h2>
<p>Following are the details of a Cache-Control header &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Directive &amp; Description</th>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">1</p></td>
<td><p><b>Public</b></p>
<p>Indicates that resource is cacheable by any component.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">2</p></td>
<td><p><b>Private</b></p>
<p>Indicates that resource is cacheable only by the client and the server, no intermediary can cache the resource.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">3</p></td>
<td><p><b>no-cache/no-store</b></p>
<p>Indicates that a resource is not cacheable.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">4</p></td>
<td><p><b>max-age</b></p>
<p>Indicates the caching is valid up to max-age in seconds. After this, client has to make another request.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">5</p></td>
<td><p><b>must-revalidate</b></p>
<p>Indication to server to revalidate resource if max-age has passed.</p>
</td>
</tr>
</table>
<h2>Best Practices</h2>
<ul class="list">
<li><p>Always keep static contents like images, CSS, JavaScript cacheable, with expiration date of 2 to 3 days.</p></li>
<li><p>Never keep expiry date too high.</p></li>
<li><p>Dynamic content should be cached for a few hours only.</p></li>
</ul>
<img src="/restful/images/cache_control.jpg" alt="Best practices for Cache-Control" />
<h1>RESTful Web Services - Security</h1>
<p>As RESTful Web Services work with HTTP URL Paths, it is very important to safeguard a RESTful Web Service in the same manner as a website is secured.</p>
<p>Following are the best practices to be adhered to while designing a RESTful Web Service &minus;</p>
<ul class="list">
<li><p><b>Validation</b> &minus; Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.</p></li>
<li><p><b>Session Based Authentication</b> &minus; Use session based authentication to authenticate a user whenever a request is made to a Web Service method.</p></li>
<li><p><b>No Sensitive Data in the URL</b> &minus; Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.</p></li>
<li><p><b>Restriction on Method Execution</b> &minus; Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.</p></li>
<li><p><b>Validate Malformed XML/JSON</b> &minus; Check for well-formed input passed to a web service method.</p></li>
<li><p><b>Throw generic Error Messages</b> &minus; A web service method should use HTTP error messages like 403 to show access forbidden, etc.</p></li>
</ul>
<h2>HTTP Code</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">HTTP Code &amp; Description</th>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">1</p></td>
<td><p><b>200</b></p>
<p><b>OK</b> &minus; shows success.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">2</p></td>
<td><p><b>201</b></p>
<p><b>CREATED</b> &minus; when a resource is successfully created using POST or PUT request. Returns link to the newly created resource using the location header.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">3</p></td>
<td><p><b>204</b></p>
<p><b>NO CONTENT</b> &minus; when response body is empty. For example, a DELETE request.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">4</p></td>
<td><p><b>304</b></p>
<p><b>NOT MODIFIED</b> &minus; used to reduce network bandwidth usage in case of conditional GET requests. Response body should be empty. Headers should have date, location, etc.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">5</p></td>
<td><p><b>400</b></p>
<p><b>BAD REQUEST</b> &minus; states that an invalid input is provided. For example, validation error, missing data.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">6</p></td>
<td><p><b>401</b></p>
<p><b>UNAUTHORIZED</b> &minus; states that user is using invalid or wrong authentication token. </p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">7</p></td>
<td><p><b>403</b></p>
<p><b>FORBIDDEN</b> &minus; states that the user is not having access to the method being used. For example, Delete access without admin rights.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">8</p></td>
<td><p><b>404</b></p>
<p><b>NOT FOUND</b> &minus; states that the method is not available.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">9</p></td>
<td><p><b>409</b></p>
<p><b>CONFLICT</b> &minus; states conflict situation while executing the method. For example, adding duplicate entry.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">10</p></td>
<td><p><b>500</b></p>
<p><b>INTERNAL SERVER ERROR</b> &minus; states that the server has thrown some exception while executing the method.</p>
</td>
</tr>
</table>
<h1>RESTful Web Services - Java (JAX-RS)</h1>
<p><b>JAX-RS</b> stands for JAVA API for RESTful Web Services. JAX-RS is a JAVA based programming language API and specification to provide support for created RESTful Web Services. Its 2.0 version was released on the 24th May 2013. JAX-RS uses annotations available from Java SE 5 to simplify the development of JAVA based web services creation and deployment. It also provides supports for creating clients for RESTful Web Services.</p>
<h2>Specifications</h2>
<p>Following are the most commonly used annotations to map a resource as a web service resource.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center">Sr.No.</th>
<th style="text-align:center">Annotation &amp; Description</th>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">1</p></td>
<td><p><b>@Path</b></p>
<p>Relative path of the resource class/method.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">2</p></td>
<td><p><b>@GET</b></p>
<p>HTTP Get request, used to fetch resource.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">3</p></td>
<td><p><b>@PUT</b></p>
<p>HTTP PUT request, used to update resource.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">4</p></td>
<td><p><b>@POST</b></p>
<p>HTTP POST request, used to create a new resource.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">5</p></td>
<td><p><b>@DELETE</b></p>
<p>HTTP DELETE request, used to delete resource.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">6</p></td>
<td><p><b>@HEAD</b></p>
<p>HTTP HEAD request, used to get status of method availability.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">7</p></td>
<td><p><b>@Produces</b></p>
<p>States the HTTP Response generated by web service. For example, APPLICATION/XML, TEXT/HTML, APPLICATION/JSON etc.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">8</p></td>
<td><p><b>@Consumes</b></p>
<p>States the HTTP Request type. For example, application/x-www-formurlencoded to accept form data in HTTP body during POST request.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">9</p></td>
<td><p><b>@PathParam</b></p>
<p>Binds the parameter passed to the method to a value in path.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">10</p></td>
<td><p><b>@QueryParam</b></p>
<p>Binds the parameter passed to method to a query parameter in the path.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">11</p></td>
<td><p><b>@MatrixParam</b></p>
<p>Binds the parameter passed to the method to a HTTP matrix parameter in path.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">12</p></td>
<td><p><b>@HeaderParam</b></p>
<p>Binds the parameter passed to the method to a HTTP header.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">13</p></td>
<td><p><b>@CookieParam </b></p>
<p>Binds the parameter passed to the method to a Cookie.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">14</p></td>
<td><p><b>@FormParam</b></p>
<p>Binds the parameter passed to the method to a form value.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">15</p></td>
<td><p><b>@DefaultValue</b></p>
<p>Assigns a default value to a parameter passed to the method.</p>
</td>
</tr>
<tr>
<td style="vertical-align:middle;"><p style="text-align:center;">16</p></td>
<td><p><b>@Context</b></p>
<p>Context of the resource. For example, HTTPRequest as a context.</p>
</td>
</tr>
</table>
<p><b>Note</b> &minus; We have used Jersey, a reference implementation of JAX-RS 2.0 by Oracle, in the <a href="/restful/restful_first_application.htm">RESTful Web Services - First Application</a> and <a href="/restful/restful_methods.htm">RESTful Web Services - Methods</a> chapters.</p>

<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/restful/restful_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/restful/restful_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
