<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Python Design Patterns - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Python Design Patterns - Quick Guide - Design patterns are used to represent the pattern used by developers to create software or web application. These patterns are selected based on the requirement"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/python_design_patterns/python_design_patterns_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#f15d04;
}
a.demo {
    background:#f15d04;
}
li.heading {
    background:#f15d04;
}
.course-box{background:#f15d04}
.home-intro-sub p{color:#f15d04}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/python_design_patterns/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/python_design_patterns/images/python-design-patterns-mini-logo.jpg" alt="Python Design Patterns " />
</div>
<ul class="toc chapters">
<li class="heading">Python Design Patterns Tutorial</li>
<li><a href="/python_design_patterns/index.htm">Python Design Patterns - Home</a></li>
<li><a href="/python_design_patterns/python_design_patterns_introduction.htm">Introduction</a></li>
<li><a href="/python_design_patterns/python_design_patterns_gist.htm">Python Design Patterns - Gist</a></li>
<li><a href="/python_design_patterns/python_design_patterns_model_view_controller.htm">Model View Controller Pattern</a></li>
<li><a href="/python_design_patterns/python_design_patterns_singleton.htm">Python Design Patterns - Singleton</a></li>
<li><a href="/python_design_patterns/python_design_patterns_factory.htm">Python Design Patterns - Factory</a></li>
<li><a href="/python_design_patterns/python_design_patterns_builder.htm">Python Design Patterns - Builder</a></li>
<li><a href="/python_design_patterns/python_design_patterns_prototype.htm">Python Design Patterns - Prototype</a></li>
<li><a href="/python_design_patterns/python_design_patterns_facade.htm">Python Design Patterns - Facade</a></li>
<li><a href="/python_design_patterns/python_design_patterns_command.htm">Python Design Patterns - Command</a></li>
<li><a href="/python_design_patterns/python_design_patterns_adapter.htm">Python Design Patterns - Adapter</a></li>
<li><a href="/python_design_patterns/python_design_patterns_decorator.htm">Python Design Patterns - Decorator</a></li>
<li><a href="/python_design_patterns/python_design_patterns_proxy.htm">Python Design Patterns - Proxy</a></li>
<li><a href="/python_design_patterns/python_design_patterns_chain_of_responsibility.htm">Chain of Responsibility Pattern</a></li>
<li><a href="/python_design_patterns/python_design_patterns_observer.htm">Python Design Patterns - Observer</a></li>
<li><a href="/python_design_patterns/python_design_patterns_state.htm">Python Design Patterns - State</a></li>
<li><a href="/python_design_patterns/python_design_patterns_strategy.htm">Python Design Patterns - Strategy</a></li>
<li><a href="/python_design_patterns/python_design_patterns_template.htm">Python Design Patterns - Template</a></li>
<li><a href="/python_design_patterns/python_design_patterns_flyweight.htm">Python Design Patterns - Flyweight</a></li>
<li><a href="/python_design_patterns/python_design_patterns_abstract_factory.htm">Abstract Factory</a></li>
<li><a href="/python_design_patterns/python_design_patterns_object_oriented.htm">Object Oriented</a></li>
<li><a href="/python_design_patterns/python_design_patterns_object_oriented_concepts_implementation.htm">Object Oriented Concepts Implementation</a></li>
<li><a href="/python_design_patterns/python_design_patterns_iterator.htm">Python Design Patterns - Iterator</a></li>
<li><a href="/python_design_patterns/python_design_patterns_dictionaries.htm">Dictionaries</a></li>
<li><a href="/python_design_patterns/python_design_patterns_lists_data_structure.htm">Lists Data Structure</a></li>
<li><a href="/python_design_patterns/python_design_patterns_sets.htm">Python Design Patterns - Sets</a></li>
<li><a href="/python_design_patterns/python_design_patterns_queues.htm">Python Design Patterns - Queues</a></li>
<li><a href="/python_design_patterns/python_design_patterns_strings_and_serialization.htm">Strings &amp; Serialization</a></li>
<li><a href="/python_design_patterns/python_design_patterns_concurrency_in_python.htm">Concurrency in Python</a></li>
<li><a href="/python_design_patterns/python_design_patterns_anti.htm">Python Design Patterns - Anti</a></li>
<li><a href="/python_design_patterns/python_design_patterns_exception_handling.htm">Exception Handling</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Python Design Patterns Resources</li>
<li><a href="/python_design_patterns/python_design_patterns_quick_guide.htm">Quick Guide</a></li>
<li><a href="/python_design_patterns/python_design_patterns_useful_resources.htm">Python Design Patterns - Resources</a></li>
<li><a href="/python_design_patterns/python_design_patterns_discussion.htm">Discussions</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Python Design Patterns - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/python_design_patterns/python_design_patterns_exception_handling.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/python_design_patterns/python_design_patterns_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Python Design Patterns - Introduction</h1>
<p>Design patterns are used to represent the pattern used by developers to create software or web application. These patterns are selected based on the requirement analysis. The patterns describe the solution to the problem, when and where to apply the solution and the consequences of the implementation.</p>
<h2>Structure of a design pattern</h2>
<p>The documentation of design pattern is maintained in a way that focuses more on the technology that is used and in what ways. The following diagram explains the basic structure of design pattern documentation.</p>
<img src="/python_design_patterns/images/design_pattern.jpg" alt="Design Pattern" />
<h3>Pattern Name</h3>
<p>It describes the pattern in short and effective manner.</p>
<h3>Intent/Motive</h3>
<p>It describes what the pattern does.</p>
<h3>Applicability</h3>
<p>It describes the list of situations where pattern is applicable.</p>
<h3>Participants and consequences</h3>
<p>Participants include classes and objects that participate in the design pattern with a list of consequences that exist with the pattern.</p>
<h2>Why Python?</h2>
<p>Python is an open source scripting language. It has libraries that support a variety of design patterns. The syntax of python is easy to understand and uses English keywords.</p>
<p>Python provides support for the list of design patterns that are mentioned below. These design patterns will be used throughout this tutorial &minus;</p>
<ul class="list">
<li>Model View Controller Pattern</li>
<li>Singleton pattern</li>
<li>Factory pattern</li>
<li>Builder Pattern</li>
<li>Prototype Pattern</li>
<li>Facade Pattern</li>
<li>Command Pattern</li>
<li>Adapter Pattern</li>
<li>Prototype Pattern</li>
<li>Decorator Pattern</li>
<li>Proxy Pattern</li>
<li>Chain of Responsibility Pattern</li>
<li>Observer Pattern</li>
<li>State Pattern</li>
<li>Strategy Pattern</li>
<li>Template Pattern</li>
<li>Flyweight Pattern</li>
<li>Abstract Factory Pattern</li>
<li>Object Oriented Pattern</li>
</ul>
<h3>Benefits of using design pattern</h3>
<p>Following are the different benefits of design pattern &minus;</p>
<ul class="list">
<li><p>Patterns provide developer a selection of tried and tested solutions for the specified problems.</p></li>
<li><p>All design patterns are language neutral.</p></li>
<li><p>Patterns help to achieve communication and maintain well documentation.</p></li>
<li><p>It includes a record of accomplishment to reduce any technical risk to the project.</p></li>
<li><p>Design patterns are highly flexible to use and easy to understand.</p></li>
</ul>
<h1>Python Design Patterns - Gist</h1>
<p>Python is an open source scripting language, which is high-level, interpreted, interactive and object-oriented. It is designed to be highly readable. The syntax of Python language is easy to understand and uses English keywords frequently.</p>
<h2>Features of Python Language</h2>
<p>In this section, we will learn about the different features of Python language.</p>
<h3>Interpreted</h3>
<p>Python is processed at runtime using the interpreter. There is no need to compile program before execution. It is similar to PERL and PHP.</p>
<h3>Object-Oriented</h3>
<p>Python follows object-oriented style and design patterns. It includes class definition with various features like encapsulation, polymorphism and many more.</p>
<h3>Portable</h3>
<p>Python code written in Windows operating system and can be used in Mac operating system. The code can be reused and portable as per the requirements.</p>
<h3>Easy to code</h3>
<p>Python syntax is easy to understand and code. Any developer can understand the syntax of Python within few hours. Python can be described as “programmer-friendly”</p>
<h3>Extensible</h3>
<p>If needed, a user can write some of Python code in C language as well. It is also possible to put python code in source code in different languages like C++. This makes Python an extensible language.</p>
<h2>Important Points</h2>
<p>Consider the following important points related to Python programming language &minus;</p>
<ul class="list">
<li><p>It includes functional and structured programming methods as well as object-oriented programming methods.</p></li>
<li><p>It can be used as scripting language or as a programming language.</p></li>
<li><p>It includes automatic garbage collection.</p></li>
<li><p>It includes high-level dynamic data types and supports various dynamic type checking.</p></li>
<li><p>Python includes a feature of integration with C, C++ and languages like Java.</p></li>
</ul>
<h2>How to download python language in your system?</h2>
<p>To download Python language in your system, follow this link &minus;</p>
<a rel="nofollow" href="https://www.python.org/downloads/" target="_blank">https://www.python.org/downloads/</a>
<p></p>
<img src="/python_design_patterns/images/python_language.jpg" alt="Python Language" />
<p>It includes packages for various operating systems like Windows, MacOS and Linux distributions.</p>
<h2>The Important Tools in Python</h2>
<p>In this section, we will learn in brief about a few important tools in Python.</p>
<h3>Python Strings</h3>
<p>The basic declaration of strings is as follows &minus;</p>
<pre class="result notranslate">
str = 'Hello World!'
</pre>
<h3>Python Lists</h3>
<p>The lists of python can be declared as compound data types separated by commas and enclosed within square brackets ([]).</p>
<pre class="result notranslate">
list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']
</pre>
<h3>Python Tuples</h3>
<p>A tuple is dynamic data type of Python, which consists of number of values separated by commas. Tuples are enclosed with parentheses.</p>
<pre class="result notranslate">
tinytuple = (123, 'john')
</pre>
<h3>Python Dictionary</h3>
<p>Python dictionary is a type of hash table. A dictionary key can be almost any data type of Python. The data types are usually numbers or strings.</p>
<pre class="result notranslate">
tinydict = {'name': 'omkar','code':6734, 'dept': 'sales'}
</pre>
<h2>What constitutes a design pattern in Python?</h2>
<p>Python helps in constituting a design pattern using the following parameters &minus;</p>
<ul class="list">
<li>Pattern Name</li>
<li>Intent</li>
<li>Aliases</li>
<li>Motivation</li>
<li>Problem</li>
<li>Solution</li>
<li>Structure</li>
<li>Participants</li>
<li>Constraints</li>
<li>Sample Code</li>
</ul>
<h1>Model View Controller Pattern</h1>
<p>Model View Controller is the most commonly used design pattern. Developers find it easy to implement this design pattern.</p>
<p>Following is a basic architecture of the Model View Controller &minus;</p>
<img src="/python_design_patterns/images/architecture.jpg" alt="Architecture" />
<p>Let us now see how the structure works.</p>
<h3>Model</h3>
<p>It consists of pure application logic, which interacts with the database. It includes all the information to represent data to the end user.</p>
<h3>View</h3>
<p>View represents the HTML files, which interact with the end user. It represents the model’s data to user.</p>
<h3>Controller</h3>
<p>It acts as an intermediary between view and model. It listens to the events triggered by view and queries model for the same.</p>
<h3>Python code</h3>
<p>Let us consider a basic object called “Person” and create an MVC design pattern.</p>
<p><b>Model.py</b></p>
<pre class="prettyprint notranslate">
import json

class Person(object):
   def __init__(self, first_name = None, last_name = None):
      self.first_name = first_name
      self.last_name = last_name
   #returns Person name, ex: John Doe
   def name(self):
      return ("%s %s" % (self.first_name,self.last_name))
		
   @classmethod
   #returns all people inside db.txt as list of Person objects
   def getAll(self):
      database = open('db.txt', 'r')
      result = []
      json_list = json.loads(database.read())
      for item in json_list:
         item = json.loads(item)
         person = Person(item['first_name'], item['last_name'])
         result.append(person)
      return result
</pre>
<p>It calls for a method, which fetches all the records of the Person table in database. The records are presented in JSON format.</p>
<h3>View</h3>
<p>It displays all the records fetched within the model. View never interacts with model; controller does this work (communicating with model and view).</p>
<pre class="prettyprint notranslate">
from model import Person
def showAllView(list):
   print 'In our db we have %i users. Here they are:' % len(list)
   for item in list:
      print item.name()
def startView():
   print 'MVC - the simplest example'
   print 'Do you want to see everyone in my db?[y/n]'
def endView():
   print 'Goodbye!'
</pre>
<h3>Controller</h3>
<p>Controller interacts with model through the <b>getAll()</b> method which fetches all the records displayed to the end user.</p>
<pre class="prettyprint notranslate">
from model import Person
import view

def showAll():
   #gets list of all Person objects
   people_in_db = Person.getAll()
   #calls view
   return view.showAllView(people_in_db)

def start():
   view.startView()
   input = raw_input()
   if input == 'y':
      return showAll()
   else:
      return view.endView()

if __name__ == "__main__":
   #running controller function
   start()
</pre>
<h1>Python Design Patterns - Singleton</h1>
<p>This pattern restricts the instantiation of a class to one object. It is a type of creational pattern and involves only one class to create methods and specified objects.</p>
<p>It provides a global point of access to the instance created.</p>
<img src="/python_design_patterns/images/singleton_pattern.jpg" alt="Singleton Pattern" />
<h2>How to implement a singleton class?</h2>
<p>The following program demonstrates the implementation of singleton class where it prints the instances created multiple times.</p>
<pre class="prettyprint notranslate">
class Singleton:
   __instance = None
   @staticmethod 
   def getInstance():
      """ Static access method. """
      if Singleton.__instance == None:
         Singleton()
      return Singleton.__instance
   def __init__(self):
      """ Virtually private constructor. """
      if Singleton.__instance != None:
         raise Exception("This class is a singleton!")
      else:
         Singleton.__instance = self
s = Singleton()
print s

s = Singleton.getInstance()
print s

s = Singleton.getInstance()
print s
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/implementation_of_singleton.jpg" alt="Implementation of Singleton" />
<p>The number of instances created are same and there is no difference in the objects listed in output.</p>
<h1>Python Design Patterns - Factory</h1>
<p>The factory pattern comes under the creational patterns list category. It provides one of the best ways to create an object. In factory pattern, objects are created without exposing the logic to client and referring to the newly created object using a common interface.</p>
<p>Factory patterns are implemented in Python using factory method. When a user calls a method such that we pass in a string and the return value as a new object is implemented through factory method. The type of object used in factory method is determined by string which is passed through method.</p>
<p>In the example below, every method includes object as a parameter, which is implemented through factory method.</p>
<h2>How to implement a factory pattern?</h2>
<p>Let us now see how to implement a factory pattern.</p>
<pre class="prettyprint notranslate">
class Button(object):
   html = ""
   def get_html(self):
      return self.html

class Image(Button):
   html = "&lt;img&gt;&lt;/img&gt;"

class Input(Button):
   html = "&lt;input&gt;&lt;/input&gt;"

class Flash(Button):
   html = "&lt;obj&gt;&lt;/obj&gt;"

class ButtonFactory():
   def create_button(self, typ):
      targetclass = typ.capitalize()
      return globals()[targetclass]()

button_obj = ButtonFactory()
button = ['image', 'input', 'flash']
for b in button:
   print button_obj.create_button(b).get_html()
</pre>
<p>The button class helps to create the html tags and the associated html page. The client will not have access to the logic of code and the output represents the creation of html page.</p>
<h3>Output</h3>
<img src="/python_design_patterns/images/factory_pattern.jpg" alt="Factory Pattern" />
<h3>Explanation</h3>
<p>The python code includes the logic of html tags, which specified value. The end user can have a look on the HTML file created by the Python code.</p>
<h1>Python Design Patterns - Builder</h1>
<p>Builder Pattern is a unique design pattern which helps in building complex object using simple objects and uses an algorithmic approach. This design pattern comes under the category of creational pattern. In this design pattern, a builder class builds the final object in step-by-step procedure. This builder is independent of other objects.</p>
<h3>Advantages of Builder Pattern</h3>
<ul class="list">
<li><p>It provides clear separation and a unique layer between construction and representation of a specified object created by class.</p></li>
<li><p>It provides better control over construction process of the pattern created.</p></li>
<li><p>It gives the perfect scenario to change the internal representation of objects.</p></li>
</ul>
<h2>How to implement builder pattern?</h2>
<p>In this section, we will learn how to implement the builder pattern.</p>
<pre class="prettyprint notranslate">
class Director:
   __builder = None
   
   def setBuilder(self, builder):
      self.__builder = builder
   
   def getCar(self):
      car = Car()
      
      # First goes the body
      body = self.__builder.getBody()
      car.setBody(body)
      
      # Then engine
      engine = self.__builder.getEngine()
      car.setEngine(engine)
      
      # And four wheels
      i = 0
      while i &lt; 4:
         wheel = self.__builder.getWheel()
			car.attachWheel(wheel)
         i += 1
      return car

# The whole product
class Car:
   def __init__(self):
      self.__wheels = list()
      self.__engine = None
      self.__body = None

   def setBody(self, body):
      self.__body = body

   def attachWheel(self, wheel):
      self.__wheels.append(wheel)

   def setEngine(self, engine):
      self.__engine = engine

   def specification(self):
      print "body: %s" % self.__body.shape
      print "engine horsepower: %d" % self.__engine.horsepower
      print "tire size: %d\'" % self.__wheels[0].size

class Builder:
      def getWheel(self): pass
      def getEngine(self): pass
      def getBody(self): pass

class JeepBuilder(Builder):
   
   def getWheel(self):
      wheel = Wheel()
      wheel.size = 22
      return wheel
   
   def getEngine(self):
      engine = Engine()
      engine.horsepower = 400
      return engine
   
   def getBody(self):
      body = Body()
      body.shape = "SUV"
      return body

# Car parts
class Wheel:
   size = None

class Engine:
   horsepower = None

class Body:
   shape = None

def main():
   jeepBuilder = JeepBuilder() # initializing the class
   
   director = Director()
   
   # Build Jeep
   print "Jeep"
   director.setBuilder(jeepBuilder)
   jeep = director.getCar()
   jeep.specification()
   print ""

if __name__ == "__main__":
   main()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/builder_pattern.jpg" alt="Builder Pattern" />
<h1>Python Design Patterns - Prototype</h1>
<p>Prototype design pattern helps to hide the complexity of the instances created by the class. The concept of the existing object will differ with that of the new object, which is created from scratch.</p>
<p>The newly copied object may have some changes in the properties if required. This approach saves time and resources that go in for the development of a product.</p>
<h2>How to implement a prototype pattern?</h2>
<p>Let us now see how to implement a prototype pattern.</p>
<pre class="prettyprint notranslate">
import copy

class Prototype:

   _type = None
   _value = None

   def clone(self):
      pass

   def getType(self):
      return self._type

   def getValue(self):
      return self._value

class Type1(Prototype):

   def __init__(self, number):
      self._type = "Type1"
      self._value = number

   def clone(self):
      return copy.copy(self)

class Type2(Prototype):

   """ Concrete prototype. """

   def __init__(self, number):
      self._type = "Type2"
      self._value = number

   def clone(self):
      return copy.copy(self)

class ObjectFactory:

   """ Manages prototypes.
   Static factory, that encapsulates prototype
   initialization and then allows instatiation
   of the classes from these prototypes.
   """

   __type1Value1 = None
   __type1Value2 = None
   __type2Value1 = None
   __type2Value2 = None

   @staticmethod
   def initialize():
      ObjectFactory.__type1Value1 = Type1(1)
      ObjectFactory.__type1Value2 = Type1(2)
      ObjectFactory.__type2Value1 = Type2(1)
      ObjectFactory.__type2Value2 = Type2(2)

   @staticmethod
   def getType1Value1():
      return ObjectFactory.__type1Value1.clone()

   @staticmethod
   def getType1Value2():
      return ObjectFactory.__type1Value2.clone()

   @staticmethod
   def getType2Value1():
      return ObjectFactory.__type2Value1.clone()

   @staticmethod
   def getType2Value2():
      return ObjectFactory.__type2Value2.clone()

def main():
   ObjectFactory.initialize()
   
   instance = ObjectFactory.getType1Value1()
   print "%s: %s" % (instance.getType(), instance.getValue())
   
   instance = ObjectFactory.getType1Value2()
   print "%s: %s" % (instance.getType(), instance.getValue())
   
   instance = ObjectFactory.getType2Value1()
   print "%s: %s" % (instance.getType(), instance.getValue())
   
   instance = ObjectFactory.getType2Value2()
   print "%s: %s" % (instance.getType(), instance.getValue())

if __name__ == "__main__":
   main()
</pre>
<h3>Output</h3>
<p>The above program will generate the following output &minus;</p>
<img src="/python_design_patterns/images/prototype_pattern.jpg" alt="Prototype Pattern" />
<p>The output helps in creating new objects with the existing ones and it is clearly visible in the output mentioned above.</p>
<h1>Python Design Patterns - Facade</h1>
<p>Facade design pattern provides a unified interface to a set of interfaces in a subsystem. It defines a higher-level interface that any subsystem can use.</p>
<p>A facade class knows which subsystem is responsible for a request.</p>
<h2>How to design a facade pattern?</h2>
<p>Let us now see how to design a facade pattern.</p>
<pre class="prettyprint notranslate">
class _IgnitionSystem(object):
   
   @staticmethod
   def produce_spark():
      return True

class _Engine(object):

   def __init__(self):
      self.revs_per_minute = 0

   def turnon(self):
      self.revs_per_minute = 2000
   
   def turnoff(self):
      self.revs_per_minute = 0

class _FuelTank(object):
   
   def __init__(self, level=30):
      self._level = level
   
   @property
   def level(self):
      return self._level
   
   @level.setter
	def level(self, level):
      self._level = level

class _DashBoardLight(object):

   def __init__(self, is_on=False):
      self._is_on = is_on

   def __str__(self):
      return self.__class__.__name__

   @property
   def is_on(self):
      return self._is_on
   
   @is_on.setter
   def is_on(self, status):
      self._is_on = status
   
   def status_check(self):
      if self._is_on:
         print("{}: ON".format(str(self)))
      else:
         print("{}: OFF".format(str(self)))

class _HandBrakeLight(_DashBoardLight):
   pass

class _FogLampLight(_DashBoardLight):
   pass

class _Dashboard(object):
   
   def __init__(self):
      self.lights = {"handbreak": _HandBrakeLight(), "fog": _FogLampLight()}
   
   def show(self):
	   for light in self.lights.values():
      light.status_check()

# Facade
class Car(object):
   
   def __init__(self):
      self.ignition_system = _IgnitionSystem()
      self.engine = _Engine()
      self.fuel_tank = _FuelTank()
      self.dashboard = _Dashboard()
   
   @property
   def km_per_litre(self):
      return 17.0
   
   def consume_fuel(self, km):
      litres = min(self.fuel_tank.level, km / self.km_per_litre)
      self.fuel_tank.level -= litres
   
   def start(self):
      print("\nStarting...")
      self.dashboard.show()
      if self.ignition_system.produce_spark():
         self.engine.turnon()
      else:
         print("Can't start. Faulty ignition system")
   
   def has_enough_fuel(self, km, km_per_litre):
      litres_needed = km / km_per_litre
      if self.fuel_tank.level &gt; litres_needed:
         return True
      else:
         return False
	   
      def drive(self, km = 100):
         print("\n")
         if self.engine.revs_per_minute > 0:
            while self.has_enough_fuel(km, self.km_per_litre):
               self.consume_fuel(km)
               print("Drove {}km".format(km))
               print("{:.2f}l of fuel still left".format(self.fuel_tank.level))
         else:
            print("Can't drive. The Engine is turned off!")
         
         def park(self):
            print("\nParking...")
            self.dashboard.lights["handbreak"].is_on = True
            self.dashboard.show()
            self.engine.turnoff()
         
         def switch_fog_lights(self, status):
            print("\nSwitching {} fog lights...".format(status))
            boolean = True if status == "ON" else False
            self.dashboard.lights["fog"].is_on = boolean
            self.dashboard.show()
         
         def fill_up_tank(self):
            print("\nFuel tank filled up!")
            self.fuel_tank.level = 100
				
# the main function is the Client
def main():
   car = Car()
   car.start()
   car.drive()
   car.switch_fog_lights("ON")
   car.switch_fog_lights("OFF")
	car.park()
   car.fill_up_tank()
   car.drive()
   car.start()
   car.drive()

if __name__ == "__main__":
   main()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/facade_pattern.jpg" alt="Facade Pattern" />
<h3>Explanation</h3>
<p>This program is designed with a scenario. It is that of starting the engine of a car or any driving vehicle. If you observe the code, it includes the associated functions to drive, to park and to consume fuel as well.</p>
<h1>Python Design Patterns - Command</h1>
<p>Command Pattern adds a level of abstraction between actions and includes an object, which invokes these actions.</p>
<p>In this design pattern, client creates a command object that includes a list of commands to be executed. The command object created implements a specific interface.</p>
<p>Following is the basic architecture of the command pattern &minus;</p>
<img src="/python_design_patterns/images/architecture_of_command_pattern.jpg" alt="Architecture of Command Pattern" />
<h2>How to implement the command pattern?</h2>
<p>We will now see how to implement the design pattern.</p>
<pre class="prettyprint notranslate">
def demo(a,b,c):
   print 'a:',a
   print 'b:',b
   print 'c:',c

class Command:
   def __init__(self, cmd, *args):
      self._cmd=cmd
      self._args=args

   def __call__(self, *args):
      return apply(self._cmd, self._args+args)
cmd = Command(dir,__builtins__)
print cmd()

cmd = Command(demo,1,2)
cmd(3)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/command_pattern.jpg" alt="Command Pattern" />
<h3>Explanation</h3>
<p>The output implements all the commands and keywords listed in Python language. It prints the necessary values of the variables.</p>
<h1>Python Design Patterns - Adapter</h1>
<p>Adapter pattern works as a bridge between two incompatible interfaces. This type of design pattern comes under structural pattern as this pattern combines the capability of two independent interfaces.</p>
<p>This pattern involves a single class, which is responsible to join functionalities of independent or incompatible interfaces. A real life example could be the case of a card reader, which acts as an adapter between memory card and a laptop. You plug in the memory card into the card reader and the card reader into the laptop so that memory card can be read via the laptop.</p>
<p>The adapter design pattern helps to work classes together. It converts the interface of a class into another interface based on requirement. The pattern includes a speciation a polymorphism which names one name and multiple forms. Say for a shape class which can use as per the requirements gathered.</p>
<p>There are two types of adapter pattern &minus;</p>
<h3>Object Adapter Pattern</h3>
<p>This design pattern relies on object implementation. Hence, it is called the Object Adapter Pattern.</p>
<h3>Class Adapter Pattern</h3>
<p>This is an alternative way to implement the adapter design pattern. The pattern can be implemented using multiple inheritances.</p>
<h2>How to implement the adapter pattern?</h2>
<p>Let us now see how to implement the adapter pattern.</p>
<pre class="prettyprint notranslate">
class EuropeanSocketInterface:
   def voltage(self): pass

   def live(self): pass
   def neutral(self): pass
   def earth(self): pass

# Adaptee
class Socket(EuropeanSocketInterface):
   def voltage(self):
      return 230

	def live(self):
      return 1
   
   def neutral(self):
      return -1
   
   def earth(self):
      return 0

# Target interface
class USASocketInterface:
   def voltage(self): pass
   def live(self): pass
   def neutral(self): pass

# The Adapter
class Adapter(USASocketInterface):
   __socket = None
   def __init__(self, socket):
      self.__socket = socket
   
   def voltage(self):
      return 110
   
   def live(self):
      return self.__socket.live()
   
   def neutral(self):
      return self.__socket.neutral()

# Client
class ElectricKettle:
   __power = None
   
   def __init__(self, power):
	   self.__power = power
   
   def boil(self):
      if self.__power.voltage() &gt; 110:
         print "Kettle on fire!"
      else:
         if self.__power.live() == 1 and \
            self.__power.neutral() == -1:
            print "Coffee time!"
         else:
            print "No power."

def main():
   # Plug in
   socket = Socket()
   adapter = Adapter(socket)
   kettle = ElectricKettle(adapter)
	
   # Make coffee
   kettle.boil()
	
   return 0
	
if __name__ == "__main__":
   main()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/adapter_pattern.jpg" alt="Adapter Pattern" />
<h3>Explanation</h3>
<p>The code includes adapter interface with various parameters and attributes. It includes Adaptee along with Target interface that implements all the attributes and displays the output as visible.</p>
<h1>Python Design Patterns - Decorator</h1>
<p>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.</p>
<p>This pattern creates a decorator class, which wraps the original class and provides additional functionality keeping the class methods signature intact.</p>
<p>The motive of a decorator pattern is to attach additional responsibilities of an object dynamically.</p>
<h2>How to implement decorator design pattern</h2>
<p>The code mentioned below is a simple demonstration of how to implement decorator design pattern in Python. The illustration involves demonstration of a coffee shop in the format of class. The coffee class created is an abstract, which means that it cannot be instantiated.</p>
<pre class="prettyprint notranslate">
import six
from abc import ABCMeta

@six.add_metaclass(ABCMeta)
class Abstract_Coffee(object):

   def get_cost(self):
      pass

   def get_ingredients(self):
      pass
   
   def get_tax(self):
      return 0.1*self.get_cost()

class Concrete_Coffee(Abstract_Coffee):
   
   def get_cost(self):
      return 1.00
   
   def get_ingredients(self):
      return 'coffee'

@six.add_metaclass(ABCMeta)
class Abstract_Coffee_Decorator(Abstract_Coffee):
   
   def __init__(self,decorated_coffee):
      self.decorated_coffee = decorated_coffee
   
   def get_cost(self):
      return self.decorated_coffee.get_cost()
   
   def get_ingredients(self):
      return self.decorated_coffee.get_ingredients()

class Sugar(Abstract_Coffee_Decorator):
   
   def __init__(self,decorated_coffee):
      Abstract_Coffee_Decorator.__init__(self,decorated_coffee)
   
   def get_cost(self):
      return self.decorated_coffee.get_cost()
   
   def get_ingredients(self):
	   return self.decorated_coffee.get_ingredients() + ', sugar'

class Milk(Abstract_Coffee_Decorator):
   
   def __init__(self,decorated_coffee):
      Abstract_Coffee_Decorator.__init__(self,decorated_coffee)
   
   def get_cost(self):
      return self.decorated_coffee.get_cost() + 0.25
   
   def get_ingredients(self):
      return self.decorated_coffee.get_ingredients() + ', milk'

class Vanilla(Abstract_Coffee_Decorator):
   
   def __init__(self,decorated_coffee):
      Abstract_Coffee_Decorator.__init__(self,decorated_coffee)
   
   def get_cost(self):
      return self.decorated_coffee.get_cost() + 0.75
   
   def get_ingredients(self):
      return self.decorated_coffee.get_ingredients() + ', vanilla'
</pre>
<p>The implementation of the abstract class of the coffee shop is done with a separate file as mentioned below &minus;</p>
<pre class="prettyprint notranslate">
import coffeeshop

myCoffee = coffeeshop.Concrete_Coffee()
print('Ingredients: '+myCoffee.get_ingredients()+
   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))

myCoffee = coffeeshop.Milk(myCoffee)
print('Ingredients: '+myCoffee.get_ingredients()+
   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))

myCoffee = coffeeshop.Vanilla(myCoffee)
print('Ingredients: '+myCoffee.get_ingredients()+
   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))

myCoffee = coffeeshop.Sugar(myCoffee)
print('Ingredients: '+myCoffee.get_ingredients()+
   '; Cost: '+str(myCoffee.get_cost())+'; sales tax = '+str(myCoffee.get_tax()))
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/decorator_pattern.jpg" alt="Decorator Pattern" />
<h1>Python Design Patterns - Proxy</h1>
<p>The proxy design pattern includes a new object, which is called “Proxy” in place of an existing object which is called the “Real Subject”. The proxy object created of the real subject must be on the same interface in such a way that the client should not get any idea that proxy is used in place of the real object. Requests generated by the client to the proxy are passed through the real subject.</p>
<p>The UML representation of proxy pattern is as follows &minus;</p>
<img src="/python_design_patterns/images/proxy_pattern.jpg" alt="Proxy Pattern" />
<h2>How to implement the proxy pattern?</h2>
<p>Let us now see how to implement the proxy pattern.</p>
<pre class="prettyprint notranslate">
class Image:
   def __init__( self, filename ):
      self._filename = filename
   
   def load_image_from_disk( self ):
      print("loading " + self._filename )
   
   def display_image( self ):
      print("display " + self._filename)

class Proxy:
   def __init__( self, subject ):
      self._subject = subject
      self._proxystate = None

class ProxyImage( Proxy ):
   def display_image( self ):
      if self._proxystate == None:
         self._subject.load_image_from_disk()
         self._proxystate = 1
      print("display " + self._subject._filename )

proxy_image1 = ProxyImage ( Image("HiRes_10Mb_Photo1") )
proxy_image2 = ProxyImage ( Image("HiRes_10Mb_Photo2") )

proxy_image1.display_image() # loading necessary
proxy_image1.display_image() # loading unnecessary
proxy_image2.display_image() # loading necessary
proxy_image2.display_image() # loading unnecessary
proxy_image1.display_image() # loading unnecessary
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/proxy_pattern_output.jpg" alt="Proxy Pattern Output" />
<p>The proxy pattern design helps in replicating the images that we created. The display_image() function helps to check if the values are getting printed in the command prompt.</p>
<h1>Chain of Responsibility</h1>
<p>The chain of responsibility pattern is used to achieve loose coupling in software where a specified request from the client is passed through a chain of objects included in it. It helps in building a chain of objects. The request enters from one end and moves from one object to another.</p>
<p>This pattern allows an object to send a command without knowing which object will handle the request.</p>
<h2>How to implement the chain of responsibility pattern?</h2>
<p>We will now see how to implement the chain of responsibility pattern.</p>
<pre class="prettyprint notranslate">
class ReportFormat(object):
   PDF = 0
   TEXT = 1
class Report(object):
   def __init__(self, format_):
      self.title = 'Monthly report'
      self.text = ['Things are going', 'really, really well.']
      self.format_ = format_

class Handler(object):
   def __init__(self):
      self.nextHandler = None

   def handle(self, request):
      self.nextHandler.handle(request)

class PDFHandler(Handler):

   def handle(self, request):
      if request.format_ == ReportFormat.PDF:
         self.output_report(request.title, request.text)
      else:
         super(PDFHandler, self).handle(request)
	
   def output_report(self, title, text):
      print '&lt;html&gt;'
      print ' &lt;head&gt;'
      print ' &lt;title&gt;%s&lt;/title&gt;' % title
      print ' &lt;/head&gt;'
      print ' &lt;body&gt;'
      for line in text:
         print ' &lt;p&gt;%s</p>' % line
      print ' &lt;/body&gt;'
      print '&lt;/html&gt;'

class TextHandler(Handler):
   
   def handle(self, request):
      if request.format_ == ReportFormat.TEXT:
         self.output_report(request.title, request.text)
      else:
         super(TextHandler, self).handle(request)
   
   def output_report(self, title, text):
      print 5*'*' + title + 5*'*'
      for line in text:
         print line

class ErrorHandler(Handler):
   def handle(self, request):
      print "Invalid request"

if __name__ == '__main__':
   report = Report(ReportFormat.TEXT)
   pdf_handler = PDFHandler()
   text_handler = TextHandler()

   pdf_handler.nextHandler = text_handler
   text_handler.nextHandler = ErrorHandler()
	pdf_handler.handle(report)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/design_chain_pattern.jpg" alt="Design Chain Pattern" />
<h3>Explanation</h3>
<p>The above code creates a report for monthly tasks where it sends commands through each function. It takes two handlers – for PDF and for text. It prints the output once the required object executes each function.</p>
<h1>Python Design Patterns - Observer</h1>
<p>In this pattern, objects are represented as observers that wait for an event to trigger. An observer attaches to the subject once the specified event occurs. As the event occurs, the subject tells the observers that it has occurred.</p>
<p>The following UML diagram represents the observer pattern &minus;</p>
<img src="/python_design_patterns/images/observer_pattern.jpg" alt="Observer Pattern" />
<h2>How to implement the observer pattern?</h2>
<p>Let us now see how to implement the observer pattern.</p>
<pre class="prettyprint notranslate">
import threading
import time
import pdb

class Downloader(threading.Thread):
   
   def run(self):
      print 'downloading'
      for i in range(1,5):
         self.i = i
         time.sleep(2)
			print 'unfunf'
         return 'hello world'

class Worker(threading.Thread):
   def run(self):
      for i in range(1,5):
         print 'worker running: %i (%i)' % (i, t.i)
         time.sleep(1)
         t.join()

         print 'done'

t = Downloader()
t.start()

time.sleep(1)

t1 = Worker()
t1.start()

t2 = Worker()
t2.start()

t3 = Worker()
t3.start()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/observer_pattern_output.jpg" alt="Observer Pattern Output" />
<h3>Explanation</h3>
<p>The above code explains the procedure of downloading a particular result. As per the observer pattern logic, every object is treated as observer. It prints the output when event is triggered.</p>
<h1>Python Design Patterns - State</h1>
<p>It provides a module for state machines, which are implemented using subclasses, derived from a specified state machine class. The methods are state independent and cause transitions declared using decorators.</p>
<h2>How to implement the state pattern?</h2>
<p>The basic implementation of state pattern is shown below &minus;</p>
<pre class="prettyprint notranslate">
class ComputerState(object):

   name = "state"
   allowed = []

   def switch(self, state):
      """ Switch to new state """
      if state.name in self.allowed:
         print 'Current:',self,' =&gt; switched to new state',state.name
         self.__class__ = state
      else:
         print 'Current:',self,' =&gt; switching to',state.name,'not possible.'

   def __str__(self):
      return self.name

class Off(ComputerState):
   name = "off"
   allowed = ['on']

class On(ComputerState):
   """ State of being powered on and working """
   name = "on"
   allowed = ['off','suspend','hibernate']

class Suspend(ComputerState):
   """ State of being in suspended mode after switched on """
   name = "suspend"
   allowed = ['on']

class Hibernate(ComputerState):
   """ State of being in hibernation after powered on """
   name = "hibernate"
   allowed = ['on']

class Computer(object):
   """ A class representing a computer """
   
   def __init__(self, model='HP'):
      self.model = model
      # State of the computer - default is off.
      self.state = Off()
   
   def change(self, state):
      """ Change state """
      self.state.switch(state)

if __name__ == "__main__":
   comp = Computer()
   comp.change(On)
   comp.change(Off)
   comp.change(On)
   comp.change(Suspend)
   comp.change(Hibernate)
   comp.change(On)
   comp.change(Off)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/design_pattern_output.jpg" alt="Design Pattern Output" />
<h1>Python Design Patterns - Strategy</h1>
<p>The strategy pattern is a type of behavioral pattern. The main goal of strategy pattern is to enable client to choose from different algorithms or procedures to complete the specified task. Different algorithms can be swapped in and out without any complications for the mentioned task.</p>
<p>This pattern can be used to improve flexibility when external resources are accessed.</p>
<h2>How to implement the strategy pattern?</h2>
<p>The program shown below helps in implementing the strategy pattern.</p>
<pre class="prettyprint notranslate">
import types

class StrategyExample:
   def __init__(self, func = None):
      self.name = 'Strategy Example 0'
      if func is not None:
         self.execute = types.MethodType(func, self)

   def execute(self):
      print(self.name)

def execute_replacement1(self): 
   print(self.name + 'from execute 1')

def execute_replacement2(self):
   print(self.name + 'from execute 2')

if __name__ == '__main__':
   strat0 = StrategyExample()
   strat1 = StrategyExample(execute_replacement1)
   strat1.name = 'Strategy Example 1'
   strat2 = StrategyExample(execute_replacement2)
   strat2.name = 'Strategy Example 2'
   strat0.execute()
   strat1.execute()
   strat2.execute()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/strategy_pattern.jpg" alt="Strategy Pattern" />
<h3>Explanation</h3>
<p>It provides a list of strategies from the functions, which execute the output. The major focus of this behavior pattern is behavior.</p>
<h1>Python Design Patterns - Template</h1>
<p>A template pattern defines a basic algorithm in a base class using abstract operation where subclasses override the concrete behavior. The template pattern keeps the outline of algorithm in a separate method. This method is referred as the template method.</p>
<p>Following are the different features of the template pattern &minus;</p>
<ul class="list">
<li><p>It defines the skeleton of algorithm in an operation</p></li>
<li><p>It includes subclasses, which redefine certain steps of an algorithm.</p></li>
</ul>
<pre class="prettyprint notranslate">
class MakeMeal:

   def prepare(self): pass
   def cook(self): pass
   def eat(self): pass

   def go(self):
      self.prepare()
      self.cook()
      self.eat()

class MakePizza(MakeMeal):
   def prepare(self):
      print "Prepare Pizza"
   
   def cook(self):
      print "Cook Pizza"
   
   def eat(self):
      print "Eat Pizza"

class MakeTea(MakeMeal):
   def prepare(self):
      print "Prepare Tea"
	
   def cook(self):
      print "Cook Tea"
   
   def eat(self):
      print "Eat Tea"

makePizza = MakePizza()
makePizza.go()

print 25*"+"

makeTea = MakeTea()
makeTea.go()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/template_pattern.jpg" alt="Template Pattern" />
<h3>Explanation</h3>
<p>This code creates a template to prepare meal. Here, each parameter represents the attribute to create a part of meal like tea, pizza, etc.</p>
<p>The output represents the visualization of attributes.</p>
<h1>Python Design Patterns - Flyweight</h1>
<p>The flyweight patterb comes under the structural design patterns category. It provides a way to decrease object count. It includes various features that help in improving application structure. The most important feature of the flyweight objects is immutable. This means that they cannot be modified once constructed. The pattern uses a HashMap to store reference objects.</p>
<h2>How to implement the flyweight pattern?</h2>
<p>The following program helps in implementing the flyweight pattern &minus;</p>
<pre class="prettyprint notranslate">
class ComplexGenetics(object):
   def __init__(self):
      pass
   
   def genes(self, gene_code):
      return "ComplexPatter[%s]TooHugeinSize" % (gene_code)
class Families(object):
   family = {}
   
   def __new__(cls, name, family_id):
      try:
         id = cls.family[family_id]
      except KeyError:
         id = object.__new__(cls)
         cls.family[family_id] = id
      return id
   
   def set_genetic_info(self, genetic_info):
      cg = ComplexGenetics()
      self.genetic_info = cg.genes(genetic_info)
   
   def get_genetic_info(self):
      return (self.genetic_info)

def test():
   data = (('a', 1, 'ATAG'), ('a', 2, 'AAGT'), ('b', 1, 'ATAG'))
   family_objects = []
   for i in data:
      obj = Families(i[0], i[1])
      obj.set_genetic_info(i[2])
      family_objects.append(obj)
   
   for i in family_objects:
      print "id = " + str(id(i))
      print i.get_genetic_info()
   print "similar id's says that they are same objects "

if __name__ == '__main__':
   test()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/flyweight_pattern.jpg" alt="Flyweight Pattern" />
<h1>Python Design Patterns - Abstract Factory</h1>
<p>The abstract factory pattern is also called factory of factories. This design pattern comes under the creational design pattern category. It provides one of the best ways to create an object.</p>
<p>It includes an interface, which is responsible for creating objects related to Factory.</p>
<h2>How to implement the abstract factory pattern?</h2>
<p>The following program helps in implementing the abstract factory pattern.</p>
<pre class="prettyprint notranslate">
class Window:
   __toolkit = ""
   __purpose = ""

   def __init__(self, toolkit, purpose):
      self.__toolkit = toolkit
      self.__purpose = purpose
   
   def getToolkit(self):
      return self.__toolkit
   
   def getType(self):
      return self.__purpose

class GtkToolboxWindow(Window):
   def __init__(self):
      Window.__init__(self, "Gtk", "ToolboxWindow")

class GtkLayersWindow(Window):
   def __init__(self):
      Window.__init__(self, "Gtk", "LayersWindow")

class GtkMainWindow(Window):
   def __init__(self):
      Window.__init__(self, "Gtk", "MainWindow")

class QtToolboxWindow(Window):
   def __init__(self):
      Window.__init__(self, "Qt", "ToolboxWindow")

class QtLayersWindow(Window):
   def __init__(self):
      Window.__init__(self, "Qt", "LayersWindow")

class QtMainWindow(Window):
   def __init__(self):
      Window.__init__(self, "Qt", "MainWindow")

# Abstract factory class
class UIFactory:
   def getToolboxWindow(self): pass
   def getLayersWindow(self): pass
   def getMainWindow(self): pass

class GtkUIFactory(UIFactory):
   def getToolboxWindow(self):
      return GtkToolboxWindow()
   def getLayersWindow(self):
      return GtkLayersWindow()
   def getMainWindow(self):
      return GtkMainWindow()

class QtUIFactory(UIFactory):
   def getToolboxWindow(self):
      return QtToolboxWindow()
   def getLayersWindow(self):
      return QtLayersWindow()
   def getMainWindow(self):
      return QtMainWindow()

if __name__ == "__main__":
   gnome = True
   kde = not gnome
   
   if gnome:
      ui = GtkUIFactory()
   elif kde:
      ui = QtUIFactory()
   
   toolbox = ui.getToolboxWindow()
   layers = ui.getLayersWindow()
   main = ui.getMainWindow()
   
   print "%s:%s" % (toolbox.getToolkit(), toolbox.getType())
   print "%s:%s" % (layers.getToolkit(), layers.getType())
   print "%s:%s" % (main.getToolkit(), main.getType())
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/abstract_factory_pattern.jpg" alt="Abstract Factory Pattern" />
<h3>Explanation</h3>
<p>In the above program, the abstract factory creates objects for each window. It calls for each method, which executes the output as expected.</p>
<h1>Python Design Patterns - Object Oriented</h1>
<p>The object oriented pattern is the most commonly used pattern. This pattern can be found in almost every programming language.</p>
<h2>How to implement the object oriented pattern?</h2>
<p>Let us now see how to implement the object oriented pattern.</p>
<pre class="prettyprint notranslate">
class Parrot:
   # class attribute
   species = "bird"
	
   # instance attribute
   def __init__(self, name, age):
      self.name = name
      self.age = age
		
# instantiate the Parrot class
blu = Parrot("Blu", 10)
woo = Parrot("Woo", 15)

# access the class attributes
print("Blu is a {}".format(blu.__class__.species))
print("Woo is also a {}".format(woo.__class__.species))

# access the instance attributes
print("{} is {} years old".format( blu.name, blu.age))
print("{} is {} years old".format( woo.name, woo.age))
</pre>
<h3>Output</h3>
<p>The above program generates the following output</p>
<img src="/python_design_patterns/images/object_oriented.jpg" alt="Object Oriented" />
<h3>Explanation</h3>
<p>The code includes class attribute and instance attributes, which are printed as per the requirement of the output. There are various features that form part of the object oriented pattern. The features are explained in the next chapter.</p>
<h1>Object Oriented Concepts Implementation</h1>
<p>In this chapter, we will focus on patterns using object oriented concepts and its implementation in Python. When we design our programs around blocks of statements, which manipulate the data around functions, it is called procedure-oriented programming. In object-oriented programming, there are two main instances called classes and objects.</p>
<h2>How to implement classes and object variables?</h2>
<p>The implementation of classes and object variables are as follows &minus;
</p>
<pre class="prettyprint notranslate">
class Robot:
   population = 0
   
   def __init__(self, name):
      self.name = name
      print("(Initializing {})".format(self.name))
      Robot.population += 1
   
   def die(self):
      print("{} is being destroyed!".format(self.name))
      Robot.population -= 1
      if Robot.population == 0:
         print("{} was the last one.".format(self.name))
      else:
         print("There are still {:d} robots working.".format(
            Robot.population))
   
   def say_hi(self):
      print("Greetings, my masters call me {}.".format(self.name))
   
   @classmethod
   def how_many(cls):
      print("We have {:d} robots.".format(cls.population))
droid1 = Robot("R2-D2")
droid1.say_hi()
Robot.how_many()

droid2 = Robot("C-3PO")
droid2.say_hi()
Robot.how_many()

print("\nRobots can do some work here.\n")

print("Robots have finished their work. So let's destroy them.")
droid1.die()
droid2.die()

Robot.how_many()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/object_oriented_concepts_implementation.jpg" alt="Object Oriented Concepts Implementation" />
<h3>Explanation</h3>
<p>This illustration helps to demonstrate the nature of class and object variables.</p>
<ul class="list">
<li><p>“population” belongs to the “Robot” class. Hence, it is referred to as a class variable or object.</p></li>
<li><p>Here, we refer to the population class variable as Robot.population and not as self.population.</p></li>
</ul>
<h1>Python Design Patterns - Iterator</h1>
<p>The iterator design pattern falls under the behavioral design patterns category. Developers come across the iterator pattern in almost every programming language. This pattern is used in such a way that it helps to access the elements of a collection (class) in sequential manner without understanding the underlying layer design.</p>
<h2>How to implement the iterator pattern?</h2>
<p>We will now see how to implement the iterator pattern.</p>
<pre class="prettyprint notranslate">
import time

def fib():
   a, b = 0, 1
   while True:
      yield b
      a, b = b, a + b

g = fib()

try:
   for e in g:
      print(e)
      time.sleep(1)

except KeyboardInterrupt:
   print("Calculation stopped")
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/iterator.jpg" alt="Iterator" />
<p>If you focus on the pattern, Fibonacci series is printed with the iterator pattern. On forceful termination of user, the following output is printed &minus;</p>
<img src="/python_design_patterns/images/fibonacci_series.jpg" alt="Fibonacci Series" />
<h3>Explanation</h3>
<p>This python code follows the iterator pattern. Here, the increment operators are used to start the count. The count ends on forceful termination by the user.</p>
<h1>Python Design Patterns - Dictionaries</h1>
<p>Dictionaries are the data structures, which include a key value combination. These are widely used in place of JSON – JavaScript Object Notation. Dictionaries are used for API (Application Programming Interface) programming. A dictionary maps a set of objects to another set of objects. Dictionaries are mutable; this means they can be changed as and when needed based on the requirements.</p>
<h2>How to implement dictionaries in Python?</h2>
<p>The following program shows the basic implementation of dictionaries in Python starting from its creation to its implementation.</p>
<pre class="prettyprint notranslate">
# Create a new dictionary
d = dict() # or d = {}

# Add a key - value pairs to dictionary
d['xyz'] = 123
d['abc'] = 345

# print the whole dictionary
print(d)

# print only the keys
print(d.keys())

# print only values
print(d.values())

# iterate over dictionary
for i in d :
   print("%s %d" %(i, d[i]))
	
# another method of iteration
for index, value in enumerate(d):
   print (index, value , d[value])

# check if key exist 23. Python Data Structure –print('xyz' in d)

# delete the key-value pair
del d['xyz']

# check again
print("xyz" in d)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/dictionaries.jpg" alt="Dictionaries" />
<p><b>Note &minus;</b>There are drawbacks related to the implementation of dictionaries in Python.</p>
<h3>Drawback</h3>
<p>Dictionaries do not support the sequence operation of the sequence data types like strings, tuples and lists. These belong to the built-in mapping type.</p>
<h1>Lists Data Structure</h1>
<p>The Lists data structure is a versatile datatype in Python, which can be written as a list of comma separated values between square brackets.</p>
<h3>Syntax</h3>
<p>Here is the basic syntax for the structure &minus;</p>
<pre class="result notranslate">
List_name = [ elements ];
</pre>
<p>If you observe, the syntax is declared like arrays with the only difference that lists can include elements with different data types. The arrays include elements of the same data type. A list can contain a combination of strings, integers and objects. Lists can be used for the implementation of stacks and queues.</p>
<p>Lists are mutable. These can be changed as and when needed.</p>
<h2>How to implement lists?</h2>
<p>The following program shows the implementations of lists &minus;</p>
<pre class="prettyprint notranslate">
my_list = ['p','r','o','b','e']
# Output: p
print(my_list[0])

# Output: o
print(my_list[2])

# Output: e
print(my_list[4])

# Error! Only integer can be used for indexing
# my_list[4.0]

# Nested List
n_list = ["Happy", [2,0,1,5]]

# Nested indexing

# Output: a
print(n_list[0][1])

# Output: 5
print(n_list[1][3])
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/list_data_structure.jpg" alt="Lists Data Structure" />
<p>The built-in functions of Python lists are as follows &minus;</p>
<ul class="list">
<li><p><b>Append()</b>&minus; It adds element to the end of list.</p></li>
<li><p><b>Extend()</b>&minus; It adds elements of the list to another list.</p></li>
<li><p><b>Insert()</b>&minus; It inserts an item to the defined index.</p></li>
<li><p><b>Remove()</b>&minus; It deletes the element from the specified list.</p> </li>
<li><p><b>Reverse()</b>&minus; It reverses the elements in list.</p></li>
<li><p><b>sort()</b> &minus; It helps to sort elements in chronological order.</p></li>
</ul>
<h1>Python Design Patterns - Sets</h1>
<p>A set can be defined as unordered collection that is iterable, mutable and there is no inclusion of duplicate elements in it. In Python, set class is a notation of mathematical set. The main advantage of using a set is that it includes highly optimized method for checking specific element.</p>
<p>Python includes a separate category called frozen sets. These sets are immutable objects that only support methods and operators that produce a required result.</p>
<h2>How to implement sets?</h2>
<p>The following program helps in the implementation of sets &minus;</p>
<pre class="prettyprint notranslate">
# Set in Python

# Creating two sets
set1 = set()
set2 = set()

# Adding elements to set1
for i in range(1, 6):
   set1.add(i)

# Adding elements to set2
for i in range(3, 8):
   set2.add(i)

print("Set1 = ", set1)
print("Set2 = ", set2)
print("\n")

# Union of set1 and set2
set3 = set1 | set2# set1.union(set2)
print("Union of Set1 &amp; Set2: Set3 = ", set3)

# Intersection of set1 and set2
set4 = set1 &amp; set2# set1.intersection(set2)
print("Intersection of Set1 &amp; Set2: Set4 = ", set4)
print("\n")

# Checking relation between set3 and set4
if set3 &gt; set4: # set3.issuperset(set4)
   print("Set3 is superset of Set4")
elif set3 &lt; set4: # set3.issubset(set4)
   print("Set3 is subset of Set4")
else : # set3 == set4
   print("Set3 is same as Set4")

# displaying relation between set4 and set3
if set4 &lt; set3: # set4.issubset(set3)
   print("Set4 is subset of Set3")
   print("\n")

# difference between set3 and set4
set5 = set3 - set4
print("Elements in Set3 and not in Set4: Set5 = ", set5)
print("\n")

# checkv if set4 and set5 are disjoint sets
if set4.isdisjoint(set5):
   print("Set4 and Set5 have nothing in common\n")

# Removing all the values of set5
set5.clear()

print("After applying clear on sets Set5: ")
print("Set5 = ", set5)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/sets.jpg" alt="Sets" />
<p>The frozen set can be demonstrated using the following program &minus;</p>
<pre class="prettyprint notranslate">
normal_set = set(["a", "b","c"])

# Adding an element to normal set is fine
normal_set.add("d")

print("Normal Set")
print(normal_set)

# A frozen set
frozen_set = frozenset(["e", "f", "g"])

print("Frozen Set")
print(frozen_set)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/frozen_set.jpg" alt="Frozen Set" />
<h1>Python Design Patterns - Queues</h1>
<p>Queue is a collection of objects, which define a simple data structure following the FIFO (Fast In Fast Out) and the LIFO (Last In First Out) procedures. The insert and delete operations are referred as <b>enqueue</b> and <b>dequeue</b> operations.</p>
<p>Queues do not allow random access to the objects they contain.</p>
<h2>How to implement the FIFO procedure?</h2>
<p>The following program helps in the implementation of FIFO &minus;</p>
<pre class="prettyprint notranslate">
import Queue

q = Queue.Queue()

#put items at the end of the queue
for x in range(4):
   q.put("item-" + str(x))

#remove items from the head of the queue
while not q.empty():
   print q.get()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/fifo.jpg" alt="Fifo" />
<h2>How to implement the LIFO procedure?</h2>
<p>The following program helps in the implementation of the LIFO procedure &minus;</p>
<pre class="prettyprint notranslate">
import Queue

q = Queue.LifoQueue()

#add items at the head of the queue
for x in range(4):
   q.put("item-" + str(x))

#remove items from the head of the queue
while not q.empty():
   print q.get()
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/lifo.jpg" alt="Lifo" />
<h2>What is a Priority Queue?</h2>
<p>Priority queue is a container data structure that manages a set of records with the ordered keys to provide quick access to the record with smallest or largest key in specified data structure.</p>
<h3>How to implement a priority queue?</h3>
<p>The implementation of priority queue is as follows &minus;</p>
<pre class="prettyprint notranslate">
import Queue

class Task(object):
   def __init__(self, priority, name):
      self.priority = priority
      self.name = name
   
   def __cmp__(self, other):
      return cmp(self.priority, other.priority)

q = Queue.PriorityQueue()

q.put( Task(100, 'a not agent task') )
q.put( Task(5, 'a highly agent task') )
q.put( Task(10, 'an important task') )

while not q.empty():
   cur_task = q.get()
	print 'process task:', cur_task.name
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/priority_queues.jpg" alt="Priority Queues" />
<h1>Strings and Serialization</h1>
<p>String serialization is the process of writing a state of object into a byte stream. In python, the “pickle” library is used for enabling serialization. This module includes a powerful algorithm for serializing and de-serializing a Python object structure. “Pickling” is the process of converting Python object hierarchy into byte stream and “unpickling” is the reverse procedure.</p>
<p>The demonstration of the pickle module is as follows &minus;</p>
<pre class="prettyprint notranslate">
import pickle

#Here's an example dict
grades = { 'Alice': 89, 'Bob': 72, 'Charles': 87 }

#Use dumps to convert the object to a serialized string
serial_grades = pickle.dumps( grades )
print(serial_grades)

#Use loads to de-serialize an object
received_grades = pickle.loads( serial_grades )
print(received_grades)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/serialization.jpg" alt="Serialization" />
<h1>Concurrency in Python</h1>
<p>Concurrency is often misunderstood as parallelism. Concurrency implies scheduling independent code to be executed in a systematic manner. This chapter focuses on the execution of concurrency for an operating system using Python.</p>
<p>The following program helps in the execution of concurrency for an operating system &minus;</p>
<pre class="prettyprint notranslate">
import os
import time
import threading
import multiprocessing

NUM_WORKERS = 4

def only_sleep():
   print("PID: %s, Process Name: %s, Thread Name: %s" % (
      os.getpid(),
      multiprocessing.current_process().name,
      threading.current_thread().name)
   )
   time.sleep(1)

def crunch_numbers():
   print("PID: %s, Process Name: %s, Thread Name: %s" % (
      os.getpid(),
      multiprocessing.current_process().name,
      threading.current_thread().name)
   )
   x = 0
   while x &lt; 10000000:
      x += 1
for _ in range(NUM_WORKERS):
   only_sleep()
end_time = time.time()
print("Serial time=", end_time - start_time)

# Run tasks using threads
start_time = time.time()
threads = [threading.Thread(target=only_sleep) for _ in range(NUM_WORKERS)]
[thread.start() for thread in threads]
[thread.join() for thread in threads]
end_time = time.time()

print("Threads time=", end_time - start_time)

# Run tasks using processes
start_time = time.time()
processes = [multiprocessing.Process(target=only_sleep()) for _ in range(NUM_WORKERS)]
[process.start() for process in processes]
[process.join() for process in processes]
end_time = time.time()

print("Parallel time=", end_time - start_time)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/concurrency.jpg" alt="Concurrency" />
<h3>Explanation</h3>
<p>“multiprocessing” is a package similar to the threading module. This package supports local and remote concurrency. Due to this module, programmers get the advantage to use multiple processes on the given system.</p>
<h1>Python Design Patterns - Anti</h1>
<p>Anti-patterns follow a strategy in opposition to predefined design patterns. The strategy includes common approaches to common problems, which can be formalized and can be generally considered as a good development practice. Usually, anti-patterns are opposite and undesirable. Anti- patterns are certain patterns used in software development, which are considered as bad programming practices.</p>
<h2>Important features of anti-patterns</h2>
<p>Let us now see a few important features of anti-patterns.</p>
<h3>Correctness</h3>
<p>These patterns literally break your code and make you do wrong things. Following is a simple illustration of this &minus;</p>
<pre class="prettyprint notranslate">
class Rectangle(object):
def __init__(self, width, height):
self._width = width
self._height = height
r = Rectangle(5, 6)
# direct access of protected member
print("Width: {:d}".format(r._width))
</pre>
<h3>Maintainability</h3>
<p>A program is said to be maintainable if it is easy to understand and modify as per the requirement. Importing module can be considered as an example of maintainability.</p>
<pre class="result notranslate">
import math
x = math.ceil(y)
# or
import multiprocessing as mp
pool = mp.pool(8)
</pre>
<h3>Example of anti-pattern</h3>
<p>Following example helps in the demonstration of anti-patterns &minus;</p>
<pre class="prettyprint notranslate">
#Bad
def filter_for_foo(l):
   r = [e for e in l if e.find("foo") != -1]
   if not check_some_critical_condition(r):
      return None
   return r

res = filter_for_foo(["bar","foo","faz"])

if res is not None:
   #continue processing
   pass

#Good
def filter_for_foo(l):
   r = [e for e in l if e.find("foo") != -1]
   if not check_some_critical_condition(r):
      raise SomeException("critical condition unmet!")
   return r

try:
   res = filter_for_foo(["bar","foo","faz"])
   #continue processing

except SomeException:
   i = 0
while i &lt; 10:
   do_something()
   #we forget to increment i
</pre>
<h3>Explanation</h3>
<p>The example includes the demonstration of good and bad standards for creating a function in Python.</p>
<h1>Python Design Patterns - Exception Handling</h1>
<p>Handling exceptions is also a primary criterion of design patterns. An exception is an error that happens during the execution of a program. When a particular error occurs, it is important to generate an exception. This helps in curbing program crashes.</p>
<h2>Why use exceptions?</h2>
<p>Exceptions are convenient ways of handling errors and special conditions in a program. When a user thinks that the specified code can produce an error then it is important to use exception handling.</p>
<h3>Example – Division by zero</h3>
<pre class="prettyprint notranslate">
import sys

randomList = ['a', 0, 2]

for entry in randomList:
   try:
      print("The entry is", entry)
      r = 1/int(entry)
      break
   except:
      print("Oops!",sys.exc_info()[0],"occured.")
      print("Next entry.")
      print()
print("The reciprocal of",entry,"is",r)
</pre>
<h3>Output</h3>
<p>The above program generates the following output &minus;</p>
<img src="/python_design_patterns/images/exceptions.jpg" alt="Exceptions" />
<h3>Raising Exceptions</h3>
<p>In Python programming specifically, exceptions are raised when corresponding error of code occurs at run time. This can be forcefully raised using the <b>“raise”</b> keyword.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
   raise KeyboardInterrupt
Traceback (most recent call last):
...
KeyboardInterrupt
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/python_design_patterns/python_design_patterns_exception_handling.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/python_design_patterns/python_design_patterns_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
