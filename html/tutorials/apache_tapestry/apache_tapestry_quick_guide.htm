<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Apache Tapestry - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Apache Tapestry - Quick Guide - Apache Tapestry is an open source web framework written in Java. It is a component based web framework. Tapestry components are Java Classes. They are neither i"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/apache_tapestry/apache_tapestry_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#84b540;
}
a.demo {
    background:#84b540;
}
li.heading {
    background:#84b540;
}
.course-box{background:#84b540}
.home-intro-sub p{color:#84b540}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/apache_tapestry/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/apache_tapestry/images/apache-tapestry-mini-logo.jpg" alt="Apache Tapestry Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Apache Tapestry Tutorial</li>
<li><a href="/apache_tapestry/index.htm">Apache Tapestry - Home</a></li>
<li><a href="/apache_tapestry/apache_tapestry_overview.htm">Apache Tapestry - Overview</a></li>
<li><a href="/apache_tapestry/apache_tapestry_architecture.htm">Apache Tapestry - Architecture</a></li>
<li><a href="/apache_tapestry/apache_tapestry_installation.htm">Apache Tapestry - Installation</a></li>
<li><a href="/apache_tapestry/apache_tapestry_quick_start.htm">Apache Tapestry - Quick Start</a></li>
<li><a href="/apache_tapestry/apache_tapestry_project_layout.htm">Apache Tapestry - Project Layout</a></li>
<li><a href="/apache_tapestry/apache_tapestry_convention_over_configuration.htm">Convention Over Configuration</a></li>
<li><a href="/apache_tapestry/apache_tapestry_annotation.htm">Apache Tapestry - Annotation</a></li>
<li><a href="/apache_tapestry/apache_tapestry_pages_and_components.htm">Pages and Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_templates.htm">Apache Tapestry - Templates</a></li>
<li><a href="/apache_tapestry/apache_tapestry_components.htm">Apache Tapestry - Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_built_in_components.htm">Built-In Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_forms_validation_components.htm">Forms &amp; Validation Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_ajax_component.htm">Apache Tapestry - Ajax Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_hibernate.htm">Apache Tapestry - Hibernate</a></li>
<li><a href="/apache_tapestry/apache_tapestry_storage.htm">Apache Tapestry - Storage</a></li>
<li><a href="/apache_tapestry/apache_tapestry_advanced_features.htm">Advanced Features</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Apache Tapestry Useful Resources</li>
<li><a href="/apache_tapestry/apache_tapestry_quick_guide.htm">Apache Tapestry - Quick Guide</a></li>
<li><a href="/apache_tapestry/apache_tapestry_useful_resources.htm">Apache Tapestry - Useful Resources</a></li>
<li><a href="/apache_tapestry/apache_tapestry_discussion.htm">Apache Tapestry - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Apache Tapestry - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/apache_tapestry/apache_tapestry_advanced_features.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/apache_tapestry/apache_tapestry_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Apache Tapestry - Overview</h1>
<p>Apache Tapestry is an open source web framework written in Java. It is a <b>component based web framework</b>. Tapestry components are Java Classes. They are neither inherited from a framework specific base class nor implementation of an interface and they are just plain POJOs (Plain old Java Objects).</p>
<p>The important feature of the Java used by tapestry is <b>Annotation</b>. Tapestry web pages are constructed by using one or more components, each having a XML based template and component class decorated with a lot of Tapestry's Annotations. Tapestry can create anything ranging from a tiny, single-page web application to a massive one consisting of hundreds of pages.</p>
<h2>Benefits of Tapestry</h2>
<p>Some of the benefits provided by tapestry are &minus;</p>
<ul class="list">
<li>Highly scalable web applications.</li>
<li>Adaptive API.</li>
<li>Fast and mature framework.</li>
<li>Persistent state storage management.</li>
<li>Build-in Inversion of Control.</li>
</ul>
<h2>Features of Tapestry</h2>
<p>Tapestry has the following features &minus;</p>
<ul class="list">
<li>Live class reloading</li>
<li>Clear and detailed exception reporting</li>
<li>Static structure, dynamic behaviors.</li>
<li>Extensive use of Plain Old Java Objects (POJOs)</li>
<li>Code less, deliver more.</li>
</ul>
<h2>Why Tapestry?</h2>
<p>Already Java has a lot of web frameworks like JSP, Struts, etc., Then, why do we need another framework? Most of the today's Java Web Frameworks are complex and have a steep learning curve. They are old fashioned and requires compile, test and deploy cycle for every update.</p>
<p>On the other hand, Tapestry provides a modern approach to web application programming by providing <b>live class reloading</b>. While other frameworks are introducing lots of interfaces, abstract &amp; base classes, Tapestry just introduces a small set of annotations and still provides the ability to write large application with rich AJAX support.</p>
<h1>Apache Tapestry - Architecture</h1>
<p>Tapestry tries to use the available features of Java as much as possible. For example, all Tapestry pages are simply POJOs. It does not enforce any custom interfaces or base class to write the application. Instead, it uses Annotation (a light weight option to extend the functionality of a Java class) to provide features. It is based on battle-tested <b>Java Servlet API</b> and is implemented as a Servlet Filter. It provides a new dimension to the web application and the programming is quite Simple, Flexible, Understandable and Robust.</p>
<h2>Workflow</h2>
<p>Let us discuss the sequence of action taking place when a tapestry page is requested.</p>
<img src="/apache_tapestry/images/workflow.jpg" alt="Workflow" />
<p><b>Step 1</b> &minus; The <b><i>Java Servlet</i></b> receives the page request. This Java Servlet is the configured in such a way that the incoming request will be forwarded to tapestry. The configuration is done in the <b>web.xml</b> as specified in the following program. Filter and Filter Mapping tag redirects all the request to <i>Tapestry Filter</i>.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
   "http://java.sun.com/dtd/web-app_2_3.dtd"&gt; 
&lt;web-app&gt; 
   &lt;display-name&gt;My Tapestry Application&lt;/display-name&gt; 
   &lt;context-param&gt; 
      &lt;param-name&gt;tapestry.app-package&lt;/param-name&gt; 
      &lt;param-value&gt;org.example.myapp&lt;/param-value&gt; 
   &lt;/context-param&gt; 
   &lt;filter&gt; 
      &lt;filter-name&gt;app&lt;/filter-name&gt; 
      &lt;filter-class&gt;org.apache.tapestry5.TapestryFilter&lt;/filter-class&gt; 
   &lt;/filter&gt; 
   &lt;filter-mapping&gt; 
      &lt;filter-name&gt;app&lt;/filter-name&gt; 
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt; 
   &lt;/filter-mapping&gt; 
&lt;/web-app&gt; 
</pre>
<p><b>Step 2</b> &minus; The <b>Tapestry Filter</b> calls the <b>HttpServletRequestHandler</b> Service by its <b>Service()</b> method.</p>
<p><b>Step 3</b> &minus; <b>HttpServletRequestHandler</b> stores the request and response in <b>RequestGlobals</b>. It also wraps the request and response as a Request and Response object and sends it to the RequestHandler.</p>
<p><b>Step 4</b> &minus; The <b>RequestHandler</b> is an abstraction on top of <b>HttpServletRequest</b> of Servlet API. Some of the salient feature of the tapestry is done in <b>RequestHandler</b> section. The feature of tapestry can be extended by writing a filter in RequestHandler. RequestHandler provides several build-in filters, which include &minus;</p>
<ul class="list">
<li><p><b>CheckForUpdates Filter</b> &minus; Responsible for live class reloading. This filter checks the java classes for changes and update the application as necessary.</p></li>
<li><p><b>Localization Filter</b> &minus; Identify the location of the user and provide localization support for the application.</p></li>
<li><p><b>StaticFiles Filter</b> &minus; Identify the static request and aborts the process. Once the process is aborted, Java Servlet takes control and process the request.</p></li>
<li><p><b>Error Filter</b> &minus; Catches the uncaught exception and presents the exception report page.</p></li>
</ul>
<p>The RequestHandler also modifies and stores the request and response in the RequestQlobalsand invokes the MasterDispatcher service.</p>
<p><b>Step 5</b> &minus; The <b>MasterDispatcher</b> is responsible for rendering the page by calling several dispatchers is a specific order. The four-main dispatchers called by MasterDispatcher is as follows &minus;</p>
<ul class="list">
<li><p><b>RootPath Dispatcher</b> &minus; It recognizes the root path “/” of the request and render the same as Start page.</p></li>
<li><p><b>Asset Dispatcher</b> &minus; It recognized the asset (Java assets) request by checking the url pattern /assets/ and sends the requested assets as byte streams.</p></li>
<li><p><b>PageRender Dispatcher</b> &minus; Bulk of the tapestry operations are done in PageRender Dispatcher and the next dispatcher Component Dispatcher. This dispatcher recognizes the particular page of that request and its activation context (extra information). It then renders that particular page and sends it to the client. For example, if the request url is /product/12123434, the dispatcher will check if any class with name product/12123434 is available. If found, it calls product/12123434 class, generate the response and send it to the client. If not, it checks for product class. If found, it calls product class with extra information 121234434, generates the response and sends it to the client. This extra information is called Activation Context. If no class is found, it simply forwards the request to Component Dispatcher.</p></li>
<li><p><b>Component Dispatcher</b> &minus; Component Dispatcher matches the URL of the page with the pattern – /&lt;class_name&gt;/&lt;component_id&gt;:&lt;event_type&gt;/&lt;activation_context&gt;. For example, /product/grid:sort/asc  represents the product class, grid component, sortevent type and asc activation context. Here, event_type is optional and if none is provided, the default event type action will be triggered. Usually, the response of the component dispatcher is to send a redirect to the client. Mostly, the redirect will match PageRender Dispatcher in the next request and proper response will be send to the client.</p></li>
</ul>
<h1>Apache Tapestry - Installation</h1>
<p>In this chapter, we will discuss how to install Tapestry on our machine.</p>
<h2>Prerequisite</h2>
<p>Tapestry's only dependency is <b>Core Java</b>. Tapestry is developed independently without using any third party library / framework. Even the IoC library used by tapestry is developed from the scratch. Web application written in tapestry can be built and deployed from console itself.</p>
<p>We can use <b>Maven, Eclipse</b> and <b>Jetty</b> to improve the development experience. Maven provides quick start application templates and options to host application in Jetty, Java's de-facto development server. Eclipse provides extensive project management features and integrates well with maven.</p>
<p>An ideal tapestry application development needs the following &minus;</p>
<ul class="list">
<li>Java 1.6 or later</li>
<li>Apache Maven</li>
<li>Eclipse IDE</li>
<li>Jetty Server</li>
</ul>
<h2>Verify Maven Installation</h2>
<p>Hopefully, you have installed Maven on your machine. To verify the Maven installation, type the command given below &minus;</p>
<pre class="result notranslate">
mvn --version
</pre>
<p>You could see the response as shown below &minus;</p>
<pre class="result notranslate">
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-1110T22:11:47+05:30) 
Maven home: /Users/workspace/maven/apache-maven-3.3.9 
Java version: 1.8.0_92, vendor: Oracle Corporation 
Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre 
Default locale: en_US, platform encoding: UTF-8 
OS name: "mac os x", version: "10.11.4", arch: "x86_64", family: "mac"
</pre>
<p>If Maven is not installed, then download and install the latest version of maven by visiting the <a target="_blank" rel="nofollow" href="https://maven.apache.org/">Maven</a> website.</p>
<h2>Download Tapestry</h2>
<p>The latest version of tapestry is 5.4 and can be downloaded from the <a target="_blank" rel="nofollow" href="https://tapestry.apache.org/">Tapestry</a> website. It is enough to download the <a target="_blank" rel="nofollow" href="https://www.apache.org/dyn/closer.cgi/tapestry/apache-tapestry-5.4.0-bin.zip">binary</a> package. If we use the Maven Quick Start Template, then it is not necessary to download Tapestry separately. Maven automatically downloads the necessary Tapestry Jars and configures the application. We will discuss how to create a basic Tapestry Application using Maven in the next chapter.</p>
<h1>Apache Tapestry - Quick Start</h1>
<p>After Tapestry installation, let us create a new initial project using Maven as shown below &minus;</p>
<pre class="result notranslate">
$ mvn archetype:generate -DarchetypeCatalog=http://tapestry.apache.org
</pre>
<p>You could see the response as shown below &minus;</p>
<pre class="result notranslate">
[INFO] Scanning for projects... 
[INFO] 
[INFO] --------------------------------------------------------------------------------- 
[INFO] Building Maven Stub Project (No POM) 1 
[INFO] ---------------------------------------------------------------------------------
[INFO] 
[INFO] &gt;&gt;&gt; maven-archetype-plugin:2.4:generate (default-cli) &gt; 
generatesources @ standalone-pom &gt;&gt;&gt; 
[INFO]  
[INFO] &lt;&lt;&lt; maven-archetype-plugin:2.4:generate (default-cli) 
&lt; generatesources @ standalone-pom &lt;&lt;&lt; 
[INFO] 
[INFO] --- maven-archetype-plugin:2.4:generate (default-cli) @ standalone-pom --- 
[INFO] Generating project in Interactive mode 
[INFO] No archetype defined. Using maven-archetype-quickstart 
(org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
</pre>
<p>After Maven building all the operations, choose archetype to create <b>Tapestry 5 QuickStart</b> project as follows &minus;</p>
<p><b>Choose archetype</b> &minus;</p>
<ul class="list">
<li><p><a target="_blank" rel="nofollow" href="https://tapestry.apache.org">https://tapestry.apache.org</a> &rarr;  org.apache.tapestry:quickstart (Tapestry 5 Quickstart Project)</p></li>
<li><p><a target="_blank" rel="nofollow" href="https://tapestry.apache.org">https://tapestry.apache.org</a> &rarr; org.apache.tapestry:tapestry-archetype (Tapestry 4.1.6 Archetype)</p></li>
</ul>
<p>Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 1</p>
<p>Now you will get a response like what is shown below &minus;</p>
<pre class="result notranslate">
Choose org.apache.tapestry:quickstart version: 
1: 5.0.19
2: 5.1.0.5 
3: 5.2.6 
4: 5.3.7 
5: 5.4.1 
</pre>
<p>Extract the QuickStart version number as follows &minus;</p>
<pre class="result notranslate">
Choose a number: 5: 5
</pre>
<p>Here, the QuickStart project takes the version for the option 5, “5.4.1”. Now, Tapestry archetype asks the following information one by one as follows &minus;</p>
<ul class="list">
<li><p><b>5.1 groupId</b> &minus; Define value for property 'groupId': : com.example</p></li>
<li><p><b>5.2 artifactId</b> &minus; Define value for property 'artifactId': : Myapp</p></li>
<li><p><b>5.3 version</b> &minus; Define value for property 'version':  1.0-SNAPSHOT: :</p></li>
<li><p><b>5.4 package name</b> &minus; Define value for property 'package':  com.example: : com.example.Myapp</p></li>
</ul>
<p>Now your screen asks confirmation from you &minus;</p>
<p>Confirm properties configuration &minus;</p>
<ul class="list">
<li><p><b>groupId</b> &minus; com.example</p></li>
<li><p><b>artifactId</b> &minus; Myapp</p></li>
<li><p><b>version</b> &minus; 1.0-SNAPSHOT</p></li>
<li><p><b>package</b> &minus; com.example.Myapp</p></li>
</ul>
<p>Verify all the properties and confirm the changes using the option shown below &minus;</p>
<pre class="result notranslate">
 Y: : Y 
</pre>
<p>You would see the screen like the one shown below.</p>
<pre class="result notranslate">
[INFO] ---------------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: quickstart:5.4.1 
[INFO] ---------------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: com.example 
[INFO] Parameter: artifactId, Value: Myapp 
[INFO] Parameter: version, Value: 1.0-SNAPSHOT 
[INFO] Parameter: package, Value: com.example.Myapp 
[INFO] Parameter: packageInPathFormat, Value: com/example/Myapp 
[INFO] Parameter: package, Value: com.example.Myapp 
[INFO] Parameter: version, Value: 1.0-SNAPSHOT 
[INFO] Parameter: groupId, Value: com.example 
[INFO] Parameter: artifactId, Value: Myapp 
[WARNING] Don't override file /Users/workspace/tapestry/Myapp/src/test/java 
[WARNING] Don't override file /Users/workspace/tapestry/Myapp/src/main/webapp 
[WARNING] Don't override file /Users/workspace/tapestry/Myapp/src/main/resources/com/
example/Myapp 
[WARNING] Don't override file /Users/workspace/tapestry/Myapp/src/test/resource 
[WARNING] Don't override file /Users/workspace/tapestry/Myapp/src/test/conf 
[WARNING] Don't override file /Users/workspace/tapestry/Myapp/src/site 
[INFO] project created from Archetype in dir: /Users/workspace/tapestry/Myapp 
[INFO] --------------------------------------------------------------------------------- 
[INFO] BUILD SUCCESS 
[INFO] --------------------------------------------------------------------------------- 
[INFO] Total time: 11:28 min 
[INFO] Finished at: 2016-09-14T00:47:23+05:30 
[INFO] Final Memory: 14M/142M 
[INFO] ---------------------------------------------------------------------------------
</pre>
<p>Here, you have successfully built the Tapestry Quick Start project. Move to the location of the newly created <b>Myapp</b> directory with the following command and start coding.</p>
<pre class="result notranslate">
cd Myapp 
</pre>
<h2>Run Application</h2>
<p>To run the skeleton project, use the following command.</p>
<pre class="result notranslate">
mvn jetty:run -Dtapestry.execution-mode=development
</pre>
<p>You get a screen like this,</p>
<pre class="result notranslate">
[INFO] Scanning for projects... 
[INFO] 
[INFO] ---------------------------------------------------------------------------------
[INFO] Building Myapp Tapestry 5 Application 1.0-SNAPSHOT 
[INFO] ---------------------------------------------------------------------------------
........ 
........ 
........ 
Application 'app' (version 1.0-SNAPSHOT-DEV) startup time: 346 ms to build IoC 
Registry, 1,246 ms overall.  
 ______                  __             ____ 
/_  __/__ ____  ___ ___ / /_______ __  / __/ 
 / / / _ `/ _ \/ -_|_-&lt;/ __/ __/ // / /__ \  
/_/  \_,_/ .__/\__/___/\__/_/  \_, / /____/ 
        /_/                   /___/  5.4.1 (development mode)   
[INFO] Started SelectChannelConnector@0.0.0.0:8080 
[INFO] Started Jetty Server
</pre>
<p>As of now, we have created a basic Quick Start project in Tapestry. To view the running application in the web browser, just type the following URL in the address bar and press enter &minus;</p>
<p><b>https://localhost:8080/myapp</b></p>
<p>Here, <b>myapp</b> is the name of the application and the default port of the application in development mode is 8080.</p>
<h2>Using Eclipse</h2>
<p>In the previous chapter, we discussed about how to create a Tapestry Quick Start application in CLI. This chapter explains about creating a skeleton application in <b>Eclipse IDE</b>.</p>
<p>Let us use a Maven archetype to create skeleton application. To configure a new application, you can follow the steps given below.</p>
<h3>Step 1: Open Eclipse IDE</h3>
<p>Open your Eclipse and choose File &rarr; New &rarr; Project… &rarr; option as shown in the following screenshot.</p>
<img src="/apache_tapestry/images/open_eclipse.jpg" alt="Open Eclipse" />
<p>Now, choose Maven &rarr; Maven project option.</p>
<p><b>Note</b> &minus; If Maven is not configured then configure and create a project.</p>
<p>After selecting the Maven project, click Next and again click the Next button.</p>
<img src="/apache_tapestry/images/maven_project.jpg" alt="Maven Project" />
<p>After that, you will get a screen where you should choose the configure option. Once it is configured, you will get the following screen.</p>
<img src="/apache_tapestry/images/configure_option.jpg" alt="Configure Option" />
<h3>Step 2: Catalog Configuration</h3>
<p>After the first step is done, you should click on <b>Add Remote Catalog</b>. Then add the following changes as shown in the following screenshot.</p>
<img src="/apache_tapestry/images/remote_catalog.jpg" alt="Remote Catalog" />
<p>Now, Apache Tapestry Catalog is added. Then, choose filter option org.apache.tapestry quickstart 5.4.1 as shown below.</p>
<img src="/apache_tapestry/images/added_catalog.jpg" alt="Added Catalog" />
<p>Then click Next and the following screen will appear.</p>
<img src="/apache_tapestry/images/group_id_field.jpg" alt="Group Id Field" />
<h3>Step 3: Configure GroupId, ArtifactId, version and package</h3>
<p>Add the following changes to the Tapestry Catalog configuration.</p>
<img src="/apache_tapestry/images/changes_configuration.jpg" alt="Changes Configuration" />
<p>Then click Finish button, now we have created the first skeleton application. The first time you use Maven, project creation may take a while as Maven downloads many JAR dependencies for Maven, Jetty and Tapestry. After Maven finishes, you'll see a new directory, MyFirstApplication in your Package Explorer view.</p>
<h3>Step 4: Run the application using Jetty server</h3>
<p>You can use Maven to run Jetty directly. Right-click on the MyFirstApplication project in your Package Explorer view and select Run As &rarr; Maven Build… you will the screen shown below.</p>
<img src="/apache_tapestry/images/jetty_server.jpg" alt="Jetty Server" />
<p>In the configuration dialog box, enter goals option as “jetty:run” then click Run button.</p>
<img src="/apache_tapestry/images/goals_option.jpg" alt="Goals Option" />
<p>Once Jetty is initialized, you'll see the following screen in your console.</p>
<img src="/apache_tapestry/images/jetty_initialized.jpg" alt="Jetty Initialized" />
<h3>Step 5: Run in the web browser</h3>
<p>Type the following URL to run the application in a web browser –</p>
<p><b>https://loclhost:8080/MyFirstApplication</b></p>
<img src="/apache_tapestry/images/run_web_browser.jpg" alt="Run Web Browser" />
<h3>Step 6: Stop the Jetty server</h3>
<p>To stop the Jetty server, click the red square icon in your console as shown below.</p>
<img src="/apache_tapestry/images/stop_server.jpg" alt="Stop Server" />
<h1>Apache Tapestry - Project Layout</h1>
<p>Here is the layout of the source code created by <b>Maven Quickstart CLI</b>. Also, this is the suggested layout of a standard Tapestry Application.</p>
<pre class="result notranslate">
├── build.gradle 
├── gradle 
│   └── wrapper 
│       ├── gradle-wrapper.jar 
│       └── gradle-wrapper.properties 
├── gradlew 
├── gradlew.bat 
├── pom.xml 
├── src 
│   ├── main 
│   │   ├── java 
│   │   │   └── com 
│   │   │       └── example 
│   │   │           └── MyFirstApplication 
│   │   │               ├── components 
│   │   │               ├── data 
│   │   │               ├── entities 
│   │   │               ├── pages 
│   │   │               └── services 
│   │   ├── resources 
│   │   │   ├── com 
│   │   │   │   └── example 
│   │   │   │       └── MyFirstApplication 
│   │   │   │           ├── components 
│   │   │   │           ├── logback.xml 
│   │   │   │           └── pages 
│   │   │   │               └── Index.properties  
│   │   │   ├── hibernate.cfg.xml 
│   │   │   └── log4j.properties
│   │   └── webapp 
│   │       ├── favicon.ico 
│   │       ├── images 
│   │       │   └── tapestry.png 
│   │       ├── mybootstrap 
│   │       │   ├── css 
│   │       │   │   ├── bootstrap.css 
│   │       │   │   └── bootstrap-theme.css 
│   │       │   ├── fonts 
│                   ├── glyphicons-halflings-regular.eot 
│   │       │   │   ├── glyphicons-halflings-regular.svg 
│   │       │   │   ├── glyphicons-halflings-regular.ttf 
│   │       │   │   ├── glyphicons-halflings-regular.woff 
│   │       │   │   └── glyphicons-halflings-regular.woff2 
│   │       │   └── js 
│   │       └── WEB-INF 
│   │           ├── app.properties 
│   │           └── web.xml 
│   ├── site 
│   │   ├── apt 
│   │   │   └── index.apt 
│   │   └── site.xml 
│   └── test 
│       ├── conf 
│       │   ├── testng.xml 
│       │   └── webdefault.xml 
│       ├── java 
│       │   └── PLACEHOLDER 
│       └── resources 
│           └── PLACEHOLDER 
└── target     
   ├── classes     
   │   ├── com  
   │   │   └── example
   │   │       └── MyFirstApplication     
   │   │           ├── components     
   │   │           ├── data     
   │   │           ├── entities     
   │   │           ├── logback.xml     
   │   │           ├── pages 
   │   │           │   └── Index.properties 
   │   │           └── services     
   │   ├── hibernate.cfg.xml 
   │   └── log4j.properties     
   ├── m2e-wtp 
   │   └── web-resources 
   │       └── META-INF     
   │           ├── MANIFEST.MF 
   │           └── maven 
   │               └── com.example 
   │                   └──MyFirstApplication     
   │                     ├── pom.properties 
   │                       └── pom.xml     
   ├── test-classes 
   │   └── PLACEHOLDER 
   └── work         
      ├── jsp         
      ├── sampleapp.properties 
      └── sampleapp.script
</pre>
<p>The default layout is arranged like the <b>WAR Internal File Format</b>. Using WAR format helps to run the application without packaging and deploying. This layout is just a suggestion, but the application can be arranged in any format, if it is packaged into a proper WAR format while deploying.</p>
<p>The source code can be divided into the following four main sections.</p>
<ul class="list">
<li><p><b>Java Code</b> &minus; All java source codes are placed under <b>/src/main/java</b> folder. Tapestry page classes are placed under the “Pages” folder and Tapestry component classes are placed under components folder. Tapestry service classes are placed under services folder.</p></li>
<li><p><b>ClassPath Resources</b> &minus; In Tapestry, most of the classes have associated resources (XML Template, JavaScript files, etc.). These resources are placed under the <b>/src/main/resources</b> folder. Tapestry Page Classes have its associated resources under the “Pages” folder and Tapestry components classes have its associated resources under the Components folder. These resources are packaged into the <b>WEB-INF/classes</b> folder of the WAR.</p></li>
<li><p><b>Context Resources</b> &minus; They are static resources of a web application like Images, Style Sheet and JavaScript Library <b>/ Modules. They are usually placed under the /src/main/webapp</b> folder and they are called <b>Context Resources</b>. Also, the web application description file (of Java Servlet), web.xml is placed under the <b>WEB-INF</b> folder of context resources.</p></li>
<li><p><b>Testing Code</b> &minus; These are optional files used to test the application and placed under the <b>src/test/java</b> and <b>src/test/</b>Resources Folders. They are not packaged into WAR.</p></li>
</ul>
<h1>Convention Over Configuration</h1>
<p>Apache Tapestry follows <b>Convention over Configuration</b> in every aspect of programming. Every feature of the framework does have a sensible default convention.</p>
<p>For example, as we learned in the Project Layout chapter, all pages need to be placed in the <b>/src/main/java/&laquo;package_path&raquo;/pages/</b> folder to be considered as Tapestry Pages.</p>
<p>In another sense, there is no need configure a particular Java Class as Tapestry Pages. It is enough to place the class in a pre-defined location. In some cases, it is odd to follow the default convention of Tapestry.</p>
<p>For example, Tapestry component can have a method <b>setupRender</b> which will be fired at the start the rendering phase. A developer may want to use their own opiniated name, say <b>initializeValue</b>. In this situation, Tapestry provides <b>Annotation</b> to override the conventions as shown in the following code block.</p>
<pre class="prettyprint notranslate">
void setupRender() { 
   // initialize component 
}  
@SetupRender 
void initializeValue() { 
   // initialize component 
}
</pre>
<p>Both ways of programming are valid in Tapestry. In short, Tapestry's default configuration is quite minimal. Only the <b>Apache Tapestry Filter (Java Servlet Filter)</b> needs to be configured in the “Web.xml” for the proper working of the application.</p>
<p>Tapestry provides one another way to configure application and it is called as the <b>AppModule.java</b>.</p>
<h1>Apache Tapestry - Annotation</h1>
<p>Annotation is a very important feature exploited by Tapestry to simplify the Web Application Development. Tapestry provides a lot of custom Annotations. It has Annotation for Classes, Methods and Member Fields. As discussed in the previous section, Annotation may also be used to override default convention of a feature. Tapestry annotations are grouped into four main categories and they are as follows.</p>
<h2>Component Annotation</h2>
<p>Used in Pages, Components and Mixins Classes. Some of the useful annotations are &minus;</p>
<ul class="list">
<li><p><b>@Property</b> &minus; It is applicable to fields. Used to convert a field into a Tapestry Property.</p></li>
<li><p><b>@Parameter</b> &minus; It is applicable to fields. Used to specify a field as parameter of a component.</p></li>
<li><p><b>@Environmental</b> &minus; It is applicable to fields. Used to share a private field between different components.</p></li>
<li><p><b>@import</b> &minus; It is applicable to classes and fields. Used to include Assets, CSS and JavaScript.</p></li>
<li><p><b>@Path</b> &minus; Used in conjunction with the @Inject annotation to inject an Asset based on a path.</p></li>
<li><p><b>@Log</b> &minus; It is applicable to classes and fields. Used for debugging purposes. Can be used emit component's event information like start of the event, end of the event, etc.</p></li>
</ul>
<h2>IoC annotation</h2>
<p>Used to inject objects into IoC Container. Some of the useful annotations are &minus;</p>
<ul class="list">
<li><p><b>@Inject</b> &minus; It is applicable to fields. Used to mark parameters that should be injected into the IoC container. It marks fields that should be injected into components.</p></li>
<li><p><b>@Value</b> &minus; It is applicable to fields. Used along with @inject annotation to inject a literal value instead of a service (which is default behavior of @Inject annotation).</p></li>
</ul>
<h2>Annotation for Data Holding Classes</h2>
<p>It is used to specify component specific information in a class (usually models or data holding classes) for high level components such as</p>
<ul class="list">
<li><p><b>Grid</b> (used to create advanced tabular data such as report, gallery, etc.,)</p></li>
<li><p><b>BeanEditForm</b> (Used to create advanced forms)</p></li>
<li><p><b>Hibernate</b> (Used in advanced database access), etc.</p></li>
</ul>
<p>These Annotations are aggregated and packaged into a separate jar without any tapestry dependency. Some of the annotations are &minus;</p>
<ul class="list">
<li><p><b>@DataType</b> &minus; It is used to specify the data type of the field. Tapestry component may use this information to create design or markup in the presentation layer.</p></li>
<li><p><b>@Validate</b> &minus; It is used to specify the validation rule for a field.</p></li>
</ul>
<p>These separations enable the Tapestry Application to use a <b>Multi-Tier Design</b>.</p>
<h1>Apache Tapestry - Pages and Components</h1>
<p>Tapestry Application is simply a collection of Tapestry Pages. They work together to form a well-defined Web Application. Each Page will have a corresponding XML Template and Zero, one or more Components. The Page and Component are same except that the Page is a root component and usually created by an application developer.</p>
<p><b>Components are children of the root Pagecomponent</b>. Tapestry have lots of built-in components and has the option to create a custom component.</p>
<img src="/apache_tapestry/images/page_component.jpg" alt="Page Component" />
<h2>Pages</h2>
<p>As discussed earlier, Pages are building blocks of a Tapestry Application. Pages are plain POJOs, placed under – <b>/src/main/java/&laquo;package_path&raquo;/pages/</b> folder. Every Page will have a corresponding <b>XML Template</b> and its default location is – <b>/src/main/resources/&laquo;package_name&raquo;/pages/</b>.</p>
<p>You can see here that the path structure is similar for Page and Template except that the template is in the <b>Resource Folder</b>.</p>
<p>For example, a user registration page in a Tapestry application with package name – <b>com.example.MyFirstApplication</b> will have the following Page and Template files &minus;</p>
<ul class="list">
<li><p><b>Java Class</b> &minus;</p> 
<p>/src/main/java/com/example/MyFirstApplication/pages/index.java</p></li>
<li><p><b>XML Template</b> &minus; </p>
<p>/src/main/resources/com/example/MyFirstApplication/pages/index.tml</p></li>
</ul>
<p>Let us create a simple <b>Hello World</b> page. First, we need to create a <b>Java Class</b> at – /src/main/java/com/example/MyFirstApplication/pages/HelloWorld.java”.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages; 
public class HelloWorld { 
}
</pre>
<p>Then, create an XML Template at –</p>
<p>“/src/main/resources/com/example/MyFirstApplication/pages/helloworld.html”.</p>
<pre class="prettyprint notranslate">
&lt;html xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;head&gt; 
      &lt;title&gt;Hello World Page&lt;/title&gt; 
   &lt;/head&gt; 
   &lt;body&gt; 
      &lt;h1&gt;Hello World&lt;/h1&gt; 
   &lt;/body&gt; 
&lt;/html&gt;
</pre>
<p>Now, this page can be accessed at <b>https://localhost:8080/myapp/helloworld</b>. This is a simple tapestry page. Tapestry offers lot more features to develop dynamic web pages, which we will discuss in the following chapters.</p>
<h1>Apache Tapestry - Templates</h1>
<p>Let us consider the Tapestry XML Template in this section. XML Template is a well-formed XML document. The presentation (User Interface) layer of a Page is XML Template. An XML Template have normal HTML markup in addition to the items given below &minus;</p>
<ul class="list">
<li>Tapestry Namespace</li>
<li>Expansions</li>
<li>Elements</li>
<li>Components</li>
</ul>
<p>Let us now discuss them in detail.</p>
<h2>Tapestry Namespace</h2>
<p>Tapestry Namespaces are nothing but XML Namespaces. Namespaces should be defined in the root element of the template. It is used to include Tapestry Components and component related information in the Template. The most commonly used namespaces are as follows &minus;</p>
<ul class="list">
<li><p>xmlns:t = “https://tapestry.apache.org/schema/tapestry_5_4.xsd” — It is used to identify Tapestry's Elements, Components and Attributes.</p></li>
<li><p>xmlns:p = “tapestry:parameter” — It is used to pass arbitrary chunks of code to components.</p></li>
</ul>
<p>An example of Tapestry Namespace is as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_3.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;head&gt; 
      &lt;title&gt;Hello World Page&lt;/title&gt; 
   &lt;/head&gt;  
   &lt;body&gt; 
      &lt;h1&gt;Hello World&lt;/h1&gt; 
      &lt;t:eventlink page = "Index"&gt;refresh page&lt;/t:eventlink&gt; 
   &lt;/body&gt; 
&lt;/html&gt;
</pre>
<h2>Expansions</h2>
<p>Expansion is simple and efficient method to dynamically change the XML Template during rendering phase of the Page. Expansion uses ${&lt;name&gt;} syntax. There are many options to express the expansion in the XML Template. Let us see some of the most commonly used options &minus;</p>
<h3>Property Expansions</h3>
<p>It maps the property defined in the corresponding Page class. It follows the Java Bean Specification for property definition in a Java class. It goes one step further by ignoring the cases for property name. Let us change the “Hello World” example using property expansion. The following code block is the modified Page class.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages; 
public class HelloWorld {   
   // Java Bean Property 
   public String getName { 
      return "World!"; 
   } 
}
</pre>
<p>Then, change the corresponding XML Template as shown below.</p>
<pre class="prettyprint notranslate">
&lt;html xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;head&gt; 
      &lt;title&gt;Hello World Page&lt;/title&gt; 
   &lt;/head&gt; 
   &lt;body&gt; 
      &lt;!-- expansion --&gt; 
      &lt;h1&gt;Hello ${name}&lt;/h1&gt; 
   &lt;/body&gt; 
&lt;/html&gt;
</pre>
<p>Here, we have defined <b>name</b> as <b>Java Bean Property</b> in the Page class and dynamically processed it in XML Template using expansion <b>${name}</b>.</p>
<h3>Message Expansion</h3>
<p>Each Page class may or may not have an associated Property file – <b>&laquo;page_name&raquo;.properties</b> in the resources folder. The property files are plain text files having a single key / value pair (message) per line. Let us create a property file for HelloWorld Page at –</p>
<p>“/src/main/resources/com/example/MyFirstApplication/pages/helloworld.properties” and add a “Greeting” message.</p>
<pre class="result notranslate">
Greeting = Hello
</pre>
<p>The <b>Greeting</b> message can be used in the XML Template as <b>${message:greeting}</b></p>
<pre class="prettyprint notranslate">
&lt;html xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;head&gt; 
      &lt;title&gt;Hello World Page&lt;/title&gt; 
   &lt;/head&gt; 
   &lt;body&gt; 
      &lt;!-- expansion --&gt; 
      &lt;h1&gt;${message:greeting} ${name}&lt;/h1&gt; 
   &lt;/body&gt; 
&lt;/html&gt;
</pre>
<h2>Elements</h2>
<p>Tapestry has a small set of elements to be used in XML Templates. Elements are predefined tags defined under the Tapestry namespace  &minus;</p>
<p><a target="_blank" rel="nofollow" href="https://tapestry.apache.org/schema/tapestry_5_4.xsd">https://tapestry.apache.org/schema/tapestry_5_4.xsd</a></p>
<p>Each element is created for a specific purpose. The available tapestry elements are as follows &minus;</p>
<h3>&lt;t:body&gt;</h3>
<p>When two components are nested, the parent component's template may have to wrap the child component's template. The &lt;t:body&gt; element is useful in this situation. One of the uses of &lt;t:body&gt; is in the Template Layout.</p>
<p>In general, the User Interface of a web application will have a Common Header, Footer, Menu, etc. These common items are defined in an XML Template and it is called Template Layout or Layout Component. In Tapestry, it needs to be created by an application developer. A Layout Component is just another component and is placed under the components folder, which has the following path – <b>src/main/&laquo;java|resources&raquo;/&laquo;package_name&raquo;/components</b>.</p>
<p>Let us create a simple layout component called <b>MyCustomLayout</b>. The code for MyCustomLayout is as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt; 
&lt;html xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;head&gt; 
      &lt;meta charset = "UTF-8" /&gt;
      &lt;title&gt;${title}&lt;/title&gt;  
   &lt;/head&gt; 
   &lt;body&gt; 
      &lt;div&gt;Sample Web Application&lt;/div&gt; 
      &lt;h1&gt;${title}&lt;/h1&gt; 
      &lt;t:body/&gt; 
      
      &lt;div&gt;(C) 2016 TutorialsPoint.&lt;/div&gt; 
   &lt;/body&gt; 
&lt;/html&gt; 
</pre>
<p></p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components;  

import org.apache.tapestry5.*; 
import org.apache.tapestry5.annotations.*; 
import org.apache.tapestry5.BindingConstants;  

public class MyCustomLayout { 
   @Property 
   @Parameter(required = true, defaultPrefix = BindingConstants.LITERAL) 
      private String title; 
}
</pre>
<p>In the MyCustomLayout component class, we declared a title field and by using annotation, we have made it mandatory. Now, change HelloWorld.html template to use our custom layout as shown in the code block below.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   t:type = "mycustomlayout" title = "Hello World Test page"
      xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;h1&gt;${message:greeting} ${name}&lt;/h1&gt; 
&lt;/html&gt;
</pre>
<p>We can see here that the XML Template does not have head and body tags. Tapestry will collect these details from the layout component and the &lt;t:body&gt; of the layout component will be replaced by the HelloWorld Template. Once everything is done, Tapestry will emit similar markup as specified below &minus;</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt; 
&lt;html&gt; 
   &lt;head&gt; 
      &lt;meta charset = "UTF-8" /&gt; 
      &lt;title&gt;Hello World Test Page&lt;/title&gt; 
   &lt;/head&gt; 
   &lt;body&gt; 
      &lt;div&gt;Sample Web Application&lt;/div&gt; 
      &lt;h1&gt;Hello World Test Page&lt;/h1&gt; 
      &lt;h1&gt;Hello World!&lt;/h1&gt; 
      &lt;div&gt;(C) 2016 TutorialsPoint.&lt;/div&gt; 
   &lt;/body&gt; 
&lt;/html&gt;
</pre>
<p>Layouts can be nested. For example, we may extend our custom layout by including administration functionality and use it for admin section as specified below.</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "MyCommonLayout" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   
   &lt;div&gt;&lt;!-- Admin related items --&gt;&lt;div&gt; 
   &lt;t:body/&gt; 
  
&lt;/html&gt;
</pre>
<h3>&lt;t:container&gt;</h3>
<p>The &lt;t:container&gt; is a top-level element and includes a tapestry namespace. This is used to specify the dynamic section of a component.</p>
<p>For example, a grid component may need a template to identify how to render its rows - tr (and column td) within a HTML table.</p>
<pre class="prettyprint notranslate">
&lt;t:container xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;td&gt;${name}&lt;/td&gt; 
   &lt;td&gt;${age}&lt;/td&gt; 
&lt;/t:container&gt;
</pre>
<h3>&lt;t:block&gt;</h3>
<p>The &lt;t:block&gt; is a placeholder for a dynamic section in the template. Generally, block element does not render. Only, components defined in the template uses block element. Components will inject data dynamically into the block element and render it. One of the popular use case is <b>AJAX</b>.</p>
<p>The block element provides the exact position and markup for the dynamic data to be rendered. Every block element should have a corresponding Java Property. Only then it can be dynamically rendered. The id of the block element should follow Java variable identifier rules. The partial sample is provided below.</p>
<pre class="prettyprint notranslate">
@Inject 
private Block block;  
&lt;html t:type = "mycustomlayout" title = "block example" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
&lt;h1&gt;${title}&lt;/h1&gt;  
&lt;!--  
   ... 
   ...  
--&gt; 
&lt;t:block t:id = "block"&gt; 
   &lt;h2&gt;Highly dynamic section&lt;/h2&gt; 
   I'v been updated through AJAX call 
   The current time is: &lt;strong&gt;${currentTime}&lt;/strong&gt;
&lt;/t:block&gt;  
&lt;!--  
   ... 
   ...  
--&gt;  
&lt;/html&gt;
</pre>
<h3>&lt;t:content&gt;</h3>
<p>The &lt;t:content&gt; element is used to specify the actual content of the template. In general, all the markup is considered part of the template. If &lt;t:content&gt; is specified, only the markup inside it will be considered. This feature is used by designers to design a page without a layout component.</p>
<h3>&lt;t:remove&gt;</h3>
<p>The &lt;t:remove&gt; is just the opposite of content element. The markup inside the remove element is not considered part of the template. It can be used for server only comments and for designing purposes.</p>
<h2>Assets</h2>
<p>Assets are static resource files such as style sheets, images and JavaScript files. Generally, assets are placed in the web application root directory <b>/src/main/webapp</b>.</p>
<pre class="result notranslate">
&lt;head&gt; 
   &lt;link href = "/css/site.css" rel = "stylesheet" type = "text/css"/&gt;
</pre>
<p>Tapestry also treats files stored in the <b>Java Classpath</b> as Assets. Tapestry provides advanced options to include Assets into the template through expansion option.</p>
<ul class="list">
<li><p><b>Context</b> &minus; Option to get assets available in web context.</p></li>
</ul>
<pre class="result notranslate">
&lt;img src = "${context:image/tapestry_banner.gif}" alt = "Banner"/&gt;
</pre>
<p><b>asset</b> &minus; Components usually store its own assets inside the jar file along with Java classes. Starting from Tapestry 5.4, the standard path to store assets in classpath is <b>META-INF/assets</b>. For libraries, the standard path to store assets is <b>META-INF/assets/&laquo;library_name&raquo;/. asset:</b> can also call <b>context:</b> expansion to get assets from the web context.</p>
<pre class="result notranslate">
&lt;img src = "${asset:context:image/tapestry_banner.gif}" alt = "Banner"/&gt;
</pre>
<p>Assets can be injected into the Tapestry Page or Component using Inject and Path annotation. The parameter for the Path annotation is relative path of the assets.</p>
<pre class="result notranslate">
@Inject 
@Path("images/edit.png") 
private Asset icon;
</pre>
<p>The <b>Path parameter</b> can also contain Tapestry symbols defined in the <b>AppModule.java</b> section.</p>
<p>For example, we can define a symbol, skin.root with value context:skins/basic and use it as shown below &minus;</p>
<pre class="result notranslate">
@Inject 
@Path("${skin.root}/style.css") 
private Asset style;
</pre>
<h3>Localization</h3>
<p>Including resources through tapestry provides extra functionality. One such functionality is “Localization”. Tapestry will check the current locale and include the proper resources.</p>
<p>For example, if the current locale is set as <b>de</b>, then <b>edit_de.png</b> will be included instead of edit.png.</p>
<h2>CSS</h2>
<p>Tapestry has built-in style sheet support. Tapestry will inject <b>tapestry.css</b> as a part of the core Javascript stack. From Tapestry 5.4, tapestry includes <b>bootstrap css framework</b> as well. We can include our own style sheet using normal link tag. In this case, the style sheets should be in the web root directory – <b>/src/main/webapp/</b>.</p>
<pre class="result notranslate">
&lt;head&gt; 
   &lt;link href = "/css/site.css" rel = "stylesheet" type = "text/css"/&gt;
</pre>
<p>Tapestry provides advanced options to include style sheets into the template through expansion option as discussed earlier.</p>
<pre class="result notranslate">
&lt;head&gt; 
   &lt;link href = "${context:css/site.css}" rel = "stylesheet" type = "text/css"/&gt; 
</pre>
<p>Tapestry also provides Import annotation to include style sheet directly into the Java classes.</p>
<pre class="prettyprint notranslate">
@Import(stylesheet="context:css/site.css") 
public class MyCommonLayout { 
} 
</pre>
<p>Tapestry provides a lot of options to manage style sheet through AppModule.java. Some of the important options are &minus;</p>
<ul class="list">
<li><p>The tapestry default style sheet may be removed.</p></li>
</ul>
<pre class="prettyprint notranslate">
@Contribute(MarkupRenderer.class) 

public static void 
deactiveDefaultCSS(OrderedConfiguration&lt;MarkupRendererFilter&gt; configuration) { 
   configuration.override("InjectDefaultStyleheet", null); 
} 
</pre>
<ul class="list">
<li><p>Bootstrap can also be disabled by overriding its path.</p></li>
</ul>
<pre class="result notranslate">
configuration.add(SymbolConstants.BOOTSTRAP_ROOT, "classpath:/METAINF/assets");
</pre>
<ul class="list">
<li><p>Enable dynamic minimizing of the assets (CSS and JavaScript). We need to include <b>tapestry-webresources</b> dependency (in pom.xml) as well.</p></li>
</ul>
<pre class="prettyprint notranslate">
@Contribute(SymbolProvider.class) 
@ApplicationDefaults 

public static void contributeApplicationDefaults( 
   MappedConfiguration&lt;String, String&gt; configuration) { 
   
   configuration.add(SymbolConstants.MINIFICATION_ENABLED, "true"); 
} 

&lt;dependency&gt; 
   &lt;groupId&gt;org.apache.tapestry&lt;/groupId&gt; 
   &lt;artifactId&gt;tapestry-webresources&lt;/artifactId&gt; 
   &lt;version&gt;5.4&lt;/version&gt; 
&lt;/dependency&gt; 
</pre>
<h2>Client Side JavaScript</h2>
<p>The current generation of web application heavily depends on JavaScript to provide rich client side experience. Tapestry acknowledges it and provide first class support for JavaScript. JavaScript support is deeply ingrained into the tapestry and available at every phase of the programming.</p>
<p>Earlier, Tapestry used to support only Prototype and Scriptaculous. But, from version 5.4, tapestry completely rewritten the JavaScript layer to make it as generic as possible and provide first class support for JQuery, the de-facto library for JavaScript. Also, tapestry encourages Modules based JavaScript programming and supports RequireJS, a popular client side implementation of AMD (Asynchronous Module Definition - JavaScript specification to support modules and its dependency in an asynchronous manner).</p>
<h3>Location</h3>
<p>JavaScript files are assets of the Tapestry Application. In accordance with asset rules, JavaScript files are placed either under web context, <b>/sr/main/webapp/</b> or placed inside the jar under <b>META-INF/assets/ location</b>.</p>
<h2>Linking JavaScript Files</h2>
<p>The simplest way to link JavaScript files in the XML Template is by directly using the script tag, which is &minus; <b>&lt;script language = "javascript" src = "relative/path/to/js"&gt;&lt;/script&gt;</b>. But, tapestry does not recommend these approaches. Tapestry provides several options to link JavaScript files right in the Page / Component itself. Some of these are given below.</p>
<ul class="list">
<li><p><b>@import annotation</b> &minus; @import annotation provides option to link multiple JavaScript library using context expression. It can be applied to both Page class and its method. If applied to a Page class, it applies to all its methods. If applied to a Page's Method, it only applies to that method and then Tapestry links the JavaScript library only when the method is invoked.</p></li>
</ul>
<pre class="prettyprint notranslate">
@Import(library = {"context:js/jquery.js","context:js/myeffects.js"}) 

public class MyComponent { 
   // ... 
}
</pre>
<ul class="list">
<li><p><b>JavaScriptSupport interface</b> &minus; The JavaScriptSupport is an interface defined by tapestry and it has a method, <b>importJavaScriptLibrary</b> to import JavaScript files. JavScriptSupport object can be easily created by simply declaring and annotating with @Environmental annotation.</p></li>
</ul>
<pre class="prettyprint notranslate">
@Inject @Path("context:/js/myeffects.js") 
private Asset myEffects;  

@Environmental 
private JavaScriptSupport javaScriptSupport;  
void setupRender() { 
   javaScriptSupport.importJavaScriptLibrary(myEffects); 
}
</pre>
<ul class="list">
<li><p>JavaScripSupport can only be injected into a component using the <b>@Environmental</b> annotation. For services, we need to use an <b>@Inject</b> annotation or add it as an argument in the service constructor method.</p></li>
</ul>
<pre class="prettyprint notranslate">
@Inject 
private JavaScriptSupport javaScriptSupport; 
public MyServiceImpl(JavaScriptSupport support) { 
   // ... 
}
</pre>
<ul class="list">
<li><p><b>addScript method</b> &minus; This is similar to the JavaScriptSupport interface except that it uses the <b>addScript</b> method and the code is directly added to the output at the bottom of the page.</p></li>
</ul>
<pre class="prettyprint notranslate">
void afterRender() { 
   javaScriptSupport.addScript(
      "$('%s').observe('click', hideMe());", container.getClientId()); 
}
</pre>
<h2>JavaScript Stack</h2>
<p>Tapestry allows a group of JavaScript files and related style sheets to be combined and used as one single entity. Currently, Tapestry includes Prototype based and JQuery based stacks.</p>
<p>A developer can develop their own stacks by implementing the <b>JavaScriptStack</b> interface and register it in the <b>AppModule.java</b>. Once registered, the stack can be imported using the <b>@import</b> annotation.</p>
<pre class="prettyprint notranslate">
@Contribute(JavaScriptStackSource.class) 
public static void addMyStack(
   MappedConfiguration&lt;String, JavaScriptStack&gt; configuration) { 
   
   configuration.addInstance("MyStack", myStack.class); 
}  

@Import(stack = "MyStack") 
public class myPage { 
}
</pre>
<h1>Apache Tapestry - Components</h1>
<p>As discussed earlier, Components and Pages are the same except that the Page is the root component and includes one or more child components. Components always resides inside a page and do almost all the dynamic functionality of the page.</p>
<p>Tapestry components renders a simple HTML links to complex grid functionality with <b>interactive AJAX</b>. A Component can include another component as well. Tapestry components consists of following items &minus;</p>
<ul class="list">
<li><p><b>Component Class</b> &minus; The main Java class of the component.</p></li>
<li><p><b>XML Template</b> &minus; XML template is similar to the Page template. The component class renders the template as the final output. Some components may not have templates. In this case, the output will be generated by the component class itself using the <b>MarkupWriter</b> class.</p></li>
<li><p><b>Body</b> &minus; The component specified inside the page template may have custom markup and it is called “Component body”. If the component template has <b>&lt;body /&gt;</b> element, then the &lt;body /&gt; element will be replaced by the body of the component. This is similar to the layout discussed earlier in the XML template section.</p></li>
<li><p><b>Rendering</b> &minus; Rendering is a process which transforms XML template and body of the component into actual output of the component.</p></li>
<li><p><b>Parameters</b> &minus; Used to create communication between component &amp; pages and thereby passing data between them.</p></li>
<li><p><b>Events</b> &minus; Delegates functionality from components to its container / parent (pages or another component). It is extensively used in page navigation purpose.</p></li>
</ul>
<h2>Rendering</h2>
<p>The rendering of a component is done in a series of pre-defined phases. Each phase in the component system should have a corresponding method defined by convention or annotation in the component class.</p>
<pre class="prettyprint notranslate">
// Using annotaion 
@SetupRender 
void initializeValues() { 
   // initialize values 
}

// using convention 
boolean afterRender() { 
   // do logic 
   return true; 
}
</pre>
<p>The phases, its method name and its annotations are listed below.</p>
<table align="center" style="text-align:center;" class="table table-bordered">
<tr>
<th style="text-align:center;">Annotation</th>
<th style="text-align:center;">Default Method Names</th>
</tr>
<tr>
<td>@SetupRender</td>
<td>setupRender()</td>
</tr>
<tr>
<td>@BeginRender</td>
<td>beginRender()</td>
</tr>
<tr>
<td>@BeforeRenderTemplate</td>
<td>beforeRenderTemplate()</td>
</tr>
<tr>
<td>@BeforeRenderBody</td>
<td>beforeRenderBody()</td>
</tr>
<tr>
<td>@AfterRenderBody</td>
<td>afterRenderBody()</td>
</tr>
<tr>
<td>@AfterRenderTemplate</td>
<td>afterRenderTemplate()</td>
</tr>
<tr>
<td>@AfterRender</td>
<td>afterRender()</td>
</tr>
<tr>
<td>@CleanupRender</td>
<td>cleanupRender()</td>
</tr>
</table>
<p>Each phase has a specific purpose and they are as follows &minus;</p>
<h3>SetupRender</h3>
<p>SetupRender kick-starts the rendering process. It usually sets up the parameters of the component.</p>
<h3>BeginRender</h3>
<p>BeginRender starts rendering the component. It usually renders the begin / start tag of the component.</p>
<h3>BeforeRenderTemplate</h3>
<p>BeforeRenderTemplate is used to decorate the XML template, adding special markup around the template. It also provides an option to skip the template rendering.</p>
<h3>BeforeRenderBody</h3>
<p>BeforeRenderTemplate provides an option to skip the rendering of the component's body element.</p>
<h3>AfterRenderBody</h3>
<p>AfterRenderBody will be called after the component's body is rendered.</p>
<h3>AfterRenderTemplate</h3>
<p>AfterRenderTemplate will be called after the component's template is rendered.</p>
<h3>AfterRender</h3>
<p>AfterRender is the counterpart of the BeginRender and usually renders the close tag.</p>
<h3>CleanupRender</h3>
<p>CleanupRender is the counterpart of the SetupRender. It releases / disposes all the objects created during rendering process.</p>
<p>The flow of the rendering phases is not forward only. It goes to and fro between phases depending on the return value of a phase.</p>
<p>For example, if the SetupRender method returns false, then rendering jumps to the CleanupRender phase and vice versa. To find a clear understanding of the flow between different phases, check the flow in the diagram given below.</p>
<img src="/apache_tapestry/images/annotation_list.jpg" alt="Annotation List" />
<h3>Simple Component</h3>
<p>Let us create a simple component, Hello which will have the output message as “Hello, Tapestry”. Following is the code of the Hello component and its template.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components;  
public class Hello {  
}
</pre>
<pre class="prettyprint notranslate">
&lt;html  
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
  
   &lt;div&gt; 
      &lt;p&gt;Hello, Tapestry (from component).&lt;/p&gt; 
   &lt;/div&gt; 
  
&lt;/html&gt;
</pre>
<p>The Hello component can be called in a page template as &minus;</p>
<pre class="prettyprint notranslate">
&lt;html title = "Hello component test page" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
&lt;t:hello /&gt;  
&lt;/html&gt;
</pre>
<p>Similarly, the component may render the same output using MarkupWriter instead of the template as shown below.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components; 
  
import org.apache.tapestry5.MarkupWriter; 
import org.apache.tapestry5.annotations.BeginRender;   

public class Hello { 
   @BeginRender 
   void renderMessage(MarkupWriter writer) { 
      writer.write("&lt;p&gt;Hello, Tapestry (from component)&lt;/p&gt;"); 
   } 
}
</pre>
<p>Let us change the component template and include the &lt;body /&gt; element as shown in the code block below.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;  
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;div&gt; 
      &lt;t:body /&gt; 
   &lt;/div&gt; 
&lt;/html&gt;
</pre>
<p>Now, the page template may include body in the component markup as shown below.</p>
<pre class="prettyprint notranslate">
&lt;html title = "Hello component test page" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;t:hello&gt; 
      &lt;p&gt;Hello, Tapestry (from page).&lt;/p&gt; 
   &lt;/t:hello&gt; 
&lt;/html&gt;
</pre>
<p>The output will be as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt; 
   &lt;div&gt; 
      &lt;p&gt;Hello, Tapestry (from page).&lt;/p&gt; 
   &lt;/div&gt; 
&lt;/html&gt;
</pre>
<h2>Parameters</h2>
<p>The primary purpose of these parameters is to create a connection between a field of the component and a property / resource of the page. Using parameters, component and its corresponding page communicate and transfer data between each other. This is called <b>Two Way Data Binding</b>.</p>
<p>For example, a textbox component used to represent the age in a user management page gets its initial value (available in the database) through the parameter. Again, after the user's age is updated and submitted back, the component will send back the updated age through the same parameter.</p>
<p>To create a new parameter in the component class, declare a field and specify a <b>@Parameter</b> annotation. This @Parameter has two optional arguments, which are &minus;</p>
<ul class="list">
<li><p><b>required</b> &minus; makes the parameter as mandatory. Tapestry raises exception if it is not provided.</p></li>
<li><p><b>value</b> &minus; specifies the default value of the parameter.</p></li>
</ul>
<p>The parameter should be specified in the page template as attributes of the component tag. The value of the attributes should be specified using Binding Expression / Expansion, which we discussed in the earlier chapters. Some of the expansion which we learned earlier are &minus;</p>
<ul class="list">
<li><p><b>Property expansion (prop:&laquo;val&raquo;)</b> &minus; Get the data from property of the page class.</p></li>
<li><p><b>Message expansion (message:&laquo;val&raquo;)</b> &minus; Get the data from key defined in index.properties file.</p></li>
<li><p><b>Context expansion (context:&laquo;val&raquo;)</b> &minus; Get the data from web context folder /src/main/webapp.</p></li>
<li><p><b>Asset expansion (asset:&laquo;val&raquo;)</b> &minus; Get the data from resources embedded in jar file, /META-INF/assets.</p></li>
<li><p><b>Symbol expansion (symbol:&laquo;val&raquo;)</b> &minus; Get the data from symbols defined in AppModule.javafile.</p></li>
</ul>
<p>Tapestry has many more useful expansions, some of which are given below &minus;</p>
<ul class="list">
<li><p><b>Literal expansion (literal:&laquo;val&raquo;)</b> &minus; A literal string.</p></li>
<li><p><b>Var expansion (var:&laquo;val&raquo;)</b> &minus; Allow a render variable of the component to be read or updated.</p></li>
<li><p><b>Validate expansion (validate:&laquo;val&raquo;)</b> &minus; A specialized string used to specify the validation rule of an object. For Example, validate:required, minLength = 5.</p></li>
<li><p><b>Translate (translate:&laquo;val&raquo;)</b> &minus; Used to specify the Translator class (converting client-side to server-side representation) in input validation.</p></li>
<li><p><b>Block (block:&laquo;val&raquo;)</b> &minus; The id of the block element within the template.</p></li>
<li><p><b>Component (component:&laquo;val&raquo;)</b> &minus; The id of the another component within the template.</p></li>
</ul>
<p>All the above expansions are read-only except Property expansion and Var expansion. They are used by the component to exchange data with page. When using expansion as attribute values, <b>${...}</b> should not be used. Instead just use the expansion without dollar and braces symbols.</p>
<h3>Component Using Parameter</h3>
<p>Let us create a new component, HelloWithParameter by modifying the Hello component to dynamically render the message by adding a <b>name</b> parameter in the component class and changing the component template and page template accordingly.</p>
<ul class="list">
<li><p>Create a new component class <b>HelloWithParameter.java</b>.</p></li>
<li><p>Add a private field and name it with the <b>@Parameter</b> annotation. Use the required argument to make it mandatory.</p></li>
</ul>
<pre class="result notranslate">
@Parameter(required = true) 
private String name;
</pre>
<ul class="list">
<li><p>Add a private field, result with <b>@Propery</b> annotation. The result property will be used in the component template. Component template does not have access to fields annotated with <b>@Parameter</b> and only able to access the fields annotated with <b>@Property</b>. The variable available in component templates are called Render Variables.</p></li>
</ul>
<pre class="result notranslate">
@Property 
 private String result;
</pre>
<ul class="list">
<li><p>Add a RenderBody method and copy the value from the name parameter to result property.</p></li>
</ul>
<pre class="prettyprint notranslate">
@BeginRender 
void initializeValues() { 
   result = name; 
}
</pre>
<ul class="list">
<li><p>Add a new component template <b>HelloWithParamter.tml</b> and use the result property to render the message.</p></li>
</ul>
<pre class="result notranslate">
&lt;div&gt; Hello, ${result} &lt;/div&gt;
</pre>
<ul class="list">
<li><p>Add a new property, Username in the test page (testhello.java).</p></li>
</ul>
<pre class="prettyprint notranslate">
public String getUsername() { 
   return "User1"; 
}
</pre>
<ul class="list">
<li><p>Use the newly created component in the page template and set the Username property in name parameter of <b>HelloWithParameter</b> component.</p></li>
</ul>
<pre class="result notranslate">
&lt;t:helloWithParameter name = "username" /&gt; 
</pre>
<p>The complete listing is as follows &minus;</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components;  

import org.apache.tapestry5.annotations.*;  
public class HelloWithParameter { 
   @Parameter(required = true) 
   private String name; 
     
   @Property 
   private String result; 
   
   @BeginRender 
   void initializeValues() { 
      result = name; 
   } 
}
</pre>
<pre class="prettyprint notranslate">
&lt;html  
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;div&gt; Hello, ${result} &lt;/div&gt; 
  
&lt;/html&gt;
</pre>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.*;  
public class TestHello { 
   public String getUsername() { 
      return "User1"; 
   } 
}
</pre>
<pre class="prettyprint notranslate">
&lt;html title = "Hello component test page" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   &lt;t:helloWithParameter name = "username" /&gt;
   
&lt;/html&gt; 
</pre>
<p>The result will be as follows &minus;</p>
<pre class="result notranslate">
&lt;div&gt; Hello, User1 &lt;/div&gt;
</pre>
<h3>Advanced Parameter</h3>
<p>In the previous chapters, we analyzed how to create and use a simple parameter in a custom component. An advanced parameter may contain complete markup as well. In this case, the markup should be specified inside the component tag such as the sub-section in the page template. The built-in if component have markup for both success and failure condition. The markup for success is specified as the body of the component tag and the markup of failure is specified using an <b>elseparameter</b>.</p>
<p>Let us see how to use the <b>if</b> component. The if component has two parameters &minus;</p>
<ul class="list">
<li><p><b>test</b> &minus; Simple property based parameter.</p></li>
<li><p><b>Else</b> &minus; Advanced parameter used to specify alternative markup, if the condition fails</p></li>
</ul>
<p>Tapestry will check the value of the test property using the following logic and return true or false. This is called <b>Type Coercion</b>, a way to convert an object of one type to another type with the same content.</p>
<ul class="list">
<li><p>If the data type is <b>String</b>, “True” if non-blank and not the literal string “False” (case insensitive).</p></li>
<li><p>If the data type is <b>Number</b>, True if non-zero.</p></li>
<li><p>If the data type is <b>Collection</b>, True if non-empty.</p></li>
<li><p>If the data type is <b>Object</b>, True (as long as it’s not null).</p></li>
</ul>
<p>If the condition passes, the component renders its body; otherwise, it renders the body of the else parameter.</p>
<p>The complete listing is as follows &minus;</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages; 
public class TestIf { 
   public String getUser() { 
      return "User1"; 
   } 
}
</pre>
<p></p>
<pre class="prettyprint notranslate">
&lt;html title = "If Test Page" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;body&gt; 
      &lt;h1&gt;Welcome!&lt;/h1&gt;  
      &lt;t:if test = "user"&gt; 
         Welcome back, ${user} 
         &lt;p:else&gt;
            Please &lt;t:pagelink page = "login"&gt;Login&lt;/t:pagelink&gt;  
         &lt;/p:else&gt; 
      &lt;/t:if&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<h2>Component Events / Page Navigation</h2>
<p>Tapestry application is a <b>collection of Pages</b> interacting with each other. Till now, we have learned how to create individual pages without any communication between them. A Component event's primary purpose is to provide interaction between pages (within pages as well) using server-side events. Most of the component events originate from client-side events.</p>
<p>For example, when a user clicks a link in a page, Tapestry will call the same page itself with target information instead of calling the target page and raises a server side event. Tapestry page will capture the event, process the target information and do a server side redirection to the target page.</p>
<p>Tapestry follows a <b>Post/Redirect/Get (RPG) design pattern</b> for page navigation. In RPG, when a user does a post request by submitting a form, the server will process the posted data, but does not return the response directly. Instead, it will do a client-side redirection to another page, which will output the result. An RPG pattern is used to prevent duplicate form submissions through browser back button, browser refresh button, etc., Tapestry provides an RPG pattern by providing the following two types of request.</p>
<ul class="list">
<li><p><b>Component Event Request</b> &minus; This type of request targets a particular component in a page and raises events within the component. This request only does a redirection and does not output the response.</p></li>
<li><p><b>Render Request</b> &minus; These types of requests target a page and stream the response back to the client.</p></li>
</ul>
<p>To understand the component events and page navigation, we need to know the URL pattern of the tapestry request. The URL pattern for both types of request is as follows &minus;</p>
<ul class="list">
<li><p><b>Component Event Requests</b> &minus;</p></li>
</ul>
<pre class="result notranslate">
/&lt;&lt;page_name_with_path&gt;&gt;.&lt;&lt;component_id|event_id&gt;&gt;/&lt;&lt;context_information&gt;&gt;
</pre>
<ul class="list">
<li><p><b>Render Request</b> &minus;</p></li>
</ul>
<pre class="result notranslate">
/&lt;&lt;page_name_with_path&gt;&gt;/&lt;&lt;context_information&gt;&gt;
</pre>
<p>Some of the examples of the URL patterns are &minus;</p>
<ul class="list">
<li><p>Index page can be requested by <b>https://&laquo;domain&raquo;/&laquo;app&raquo;/index</b>.</p></li>
<li><p>If the Index page is available under a sub-folder admin, then it can be requested by <b>https://&laquo;domain&raquo;/&laquo;app&raquo;/admin/index</b>.</p></li>
<li><p>If the user clicks on the <b>ActionLink component</b> with <b>id test</b> in the index page, then the URL will be <b>https://&laquo;domain&raquo;/&laquo;app&raquo;/index.test</b>.</p></li>
</ul>
<h2>Events</h2>
<p>By default, Tapestry raises <b>OnPassivate</b> and <b>OnActivate</b> events for all requests. For Component event request type, tapestry raises additional one or more events depending on the component. The ActionLink component raises an Action event, while a Form component raises multiple events such as <b>Validate, Success</b>, etc.,</p>
<p>The events can be handled in the page class using the corresponding method handler. The method handler is created either through a method naming convention or through the <b>@OnEvent</b> annotation. The format of the method naming convention is <b>On&laquo;EventName&raquo;From&laquo;ComponentId&raquo;</b>.</p>
<p>An action event of the ActionLink component with <b>id test</b> can be handled by either one of the following methods &minus;</p>
<pre class="prettyprint notranslate">
void OnActionFromTest() { 
}  
@OnEvent(component = "test", name = "action") 
void CustomFunctionName() { 
} 
</pre>
<p>If the method name does not have any particular component, then the method will be called for all component with matching events.</p>
<pre class="prettyprint notranslate">
void OnAction() { 
} 
</pre>
<h3>OnPassivate and OnActivate Event</h3>
<p>OnPassivate is used to provide context information for an OnActivate event handler. In general, Tapestry provides the context information and it can be used as an argument in the OnActivateevent handler.</p>
<p>For example, if the context information is 3 of type int, then the OnActivate event can be called as &minus;</p>
<pre class="prettyprint notranslate">
void OnActivate(int id) { 
} 
</pre>
<p>In some scenario, the context information may not be available. In this situation, we can provide the context information to OnActivate event handler through OnPassivate event handler. The return type of the OnPassivate event handler should be used as argument of OnActivate event handler.</p>
<pre class="prettyprint notranslate">
int OnPassivate() { 
   int id = 3; 
   return id; 
} 
void OnActivate(int id) { 
} 
</pre>
<h3>Event Handler Return Values</h3>
<p>Tapestry issues page redirection based on the return values of the event handler. Event handler should return any one of the following values.</p>
<ul class="list">
<li><p><b>Null Response</b> &minus; Returns null value. Tapestry will construct the current page URL and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
public Object onAction() { 
   return null; 
}
</pre>
<ul class="list">
<li><p><b>String Response</b> &minus; Returns the string value. Tapestry will construct the URL of the page matching the value and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
public String onAction() { 
   return "Index"; 
}
</pre>
<ul class="list">
<li><p><b>Class Response</b> &minus; Returns a page class. Tapestry will construct the URL of the returned page class and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
public Object onAction() { 
   return Index.class 
}
</pre>
<ul class="list">
<li><p><b>Page Response</b> &minus; Returns a field annotated with @InjectPage. Tapestry will construct the URL of the injected page and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
@InjectPage 
private Index index;  

public Object onAction(){ 
   return index; 
}
</pre>
<ul class="list">
<li><p><b>HttpError</b> &minus; Returns the HTTPError object. Tapestry will issue a client side HTTP error.</p></li>
</ul>
<pre class="prettyprint notranslate">
public Object onAction(){ 
   return new HttpError(302, "The Error message); 
}
</pre>
<ul class="list">
<li><p><b>Link Response</b> &minus; Returns a link instance directly. Tapestry will construct the URL from Link object and send to the client as redirect.</p></li>
<li><p><b>Stream Response</b> &minus; Returns the <b>StreamResponse</b> object. Tapestry will send the stream as response directly to the client browser. It is used to generate reports and images directly and send it to the client.</p></li>
<li><p><b>Url Response</b> &minus; Returns the <b>java.net.URL</b> object. Tapestry will get the corresponding URL from the object and send to the client as redirect.</p></li>
<li><p><b>Object Response</b> &minus; Returns any values other than above specified values. Tapestry will raise an error.</p></li>
</ul>
<h3>Event Context</h3>
<p>In general, event handler can get the context information using arguments. For example, if the context information is 3 of type int, then the event handler will be &minus;</p>
<pre class="result notranslate">
Object onActionFromTest(int id) {  
} 
</pre>
<p>Tapestry properly handles the context information and provides it to methods through arguments. Sometimes, Tapestry may not be able to properly handle it due to complexity of the programming. At that time, we may get the complete context information and process ourselves.</p>
<pre class="prettyprint notranslate">
Object onActionFromEdit(EventContext context) { 
   if (context.getCount() &gt; 0) { 
      this.selectedId = context.get(0); 
   } else { 
      alertManager.warn("Please select a document."); 
      return null; 
   } 
}
</pre>
<h1>Apache Tapestry - Built-In Components</h1>
<p>This chapter explains about the built-in components that Tapestry has with suitable examples. Tapestry supports more than 65 built-in components. You can also create custom components. Let us cover some of the notable components in detail.</p>
<h2>If Component</h2>
<p>The if component is used to render a block conditionally. The condition is checked by a test parameter.</p>
<p>Create a page <b>IfSample.java</b> as shown below &minus;</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

public class Ifsample {
   public String getUser() { 
      return "user1"; 
   } 
} 
</pre>
<p>Now, create a corresponding template file as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
     
   &lt;h3&gt;If-else component example &lt;/h3&gt; 
   &lt;t:if test = "user"&gt; 
      Hello ${user} 
      &lt;p:else&gt;
         &lt;h4&gt; You are not a Tapestry user &lt;/h4&gt; 
      &lt;/p:else&gt; 
   &lt;/t:if&gt; 
&lt;/html&gt;
</pre>
<p>Requesting the page will render the result as shown below.</p>
<p><b>Result</b> &minus; http://localhost:8080/MyFirstApplication/ifsample</p>
<img src="/apache_tapestry/images/if_component_result.jpg" alt="If Component Result" />
<h2>Unless and Delegate Component</h2>
<p>The <b>unless component</b> is just the opposite of the if component that was discussed above. While, the <b>delegate component</b> does not do any rendering on its own. Instead, it normally delegates the markup to block element. Unless and if components can use delegate and block to conditionally swap the dynamic content.</p>
<p>Create a page <b>Unless.java</b> as follows.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.Block; 
import org.apache.tapestry5.annotations.Property; 
import org.apache.tapestry5.ioc.annotations.Inject; 
import org.apache.tapestry5.PersistenceConstants; 
import org.apache.tapestry5.annotations.Persist;  

public class Unless { 
   @Property 
   @Persist(PersistenceConstants.FLASH) 
   private String value;  
   @Property 
   private Boolean bool; 
   @Inject 
   Block t, f, n;  
   
   public Block getCase() { 
      if (bool == Boolean.TRUE ) { 
         return t; 
      } else { 
         return f; 
      } 
   }   
} 
</pre>
<p>Now, create a corresponding template file as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
  
   &lt;h4&gt; Delegate component &lt;/h4&gt; 
   &lt;div class = "div1"&gt; 
      &lt;t:delegate to = "case"/&gt; 
   &lt;/div&gt; 
   &lt;h4&gt; If-Unless component &lt;/h4&gt;  
   
   &lt;div class = "div1"&gt; 
      &lt;t:if test = "bool"&gt; 
         &lt;t:delegate to = "block:t"/&gt; 
      &lt;/t:if&gt; 
      &lt;t:unless test = "bool"&gt; 
         &lt;t:delegate to = "block:notT"/&gt; 
      &lt;/t:unless&gt; 
   &lt;/div&gt;  
   
   &lt;t:block id = "t"&gt; 
      bool == Boolean.TRUE. 
   &lt;/t:block&gt; 
   
   &lt;t:block id = "notT"&gt; 
      bool = Boolean.FALSE. 
   &lt;/t:block&gt; 
   
   &lt;t:block id = "f"&gt; 
      bool == Boolean.FALSE. 
   &lt;/t:block&gt; 
&lt;/html&gt;
</pre>
<p>Requesting the page will render the result as shown below.</p>
<p><b>Result</b> &minus; http://localhost:8080/MyFirstApplication/unless</p>
<img src="/apache_tapestry/images/delegate_component.jpg" alt="Delegate Component" />
<h2>Loop Component</h2>
<p>The loop component is the basic component to loop over a collection items and render the body for every value / iteration.</p>
<p>Create a Loop page as shown below &minus;</p>
<h3>Loop.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property;  
public class Loop { 
   @Property 
   private int i; 
}
</pre>
<p>Then, create the corresponding template Loop.tml</p>
<h3>Loop.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;p&gt;This is sample parameter rendering example...&lt;/p&gt; 
   &lt;ol&gt;
      &lt;li t:type = "loop" source = "1..5" value = "var:i"&gt;${var:i}&lt;/li&gt; 
   &lt;/ol&gt; 
&lt;/html&gt;
</pre>
<p>Loop component has the following two parameters &minus;</p>
<ul class="list">
<li><p><b>source</b> &minus; Collection source. 1…5 is a property expansion used to create an array with a specified range.</p></li>
<li><p><b>var</b> &minus; Render variable. Used to render the current value in the body of the template.</p></li>
</ul>
<p>Requesting the page will render the result as shown below &minus;</p>
<img src="/apache_tapestry/images/loop_component.jpg" alt="Loop Component" />
<h2>PageLink Component</h2>
<p>A PageLink component is used to link a page from one page to another page. Create a PageLink test page as below &minus; <b>PageLink.java</b>.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  
   public class PageLink { 
}
</pre>
<p>Then, create a corresponding template file as shown below &minus;</p>
<h3>PageLink.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;body&gt; 
      &lt;h3&gt;&lt;u&gt;Page Link&lt;/u&gt; &lt;/h3&gt; 
      &lt;div class = "page"&gt; 
         &lt;t:pagelink page = "Index"&gt;Click here to navigate Index page&lt;/t:pagelink&gt;
         &lt;br/&gt; 
      &lt;/div&gt; 
   &lt;/body&gt; 
   
&lt;/html&gt;
</pre>
<p>The PageLink component has a page parameter which should refer the target tapestry page.</p>
<p><b>Result</b> &minus; http://localhost:8080/myFirstApplication/pagelink</p>
<img src="/apache_tapestry/images/page_link.jpg" alt="Page Link" />
<h2>EventLink Component</h2>
<p>The EventLink component sends the event name and the corresponding parameter through the URL. Create an EventsLink page class as shown below.</p>
<h3>EventsLink.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property;  
public class EventsLink { 
   @Property 
   private int x; 
   void onActivate(int count) { 
      this.x = x; 
   } 
   int onPassivate() { 
      return x; 
   } 
   void onAdd(int value) { 
      x += value; 
   }   
}
</pre>
<p>Then, create a corresponding “EventsLink” template file as follows &minus;</p>
<h3>EventsLink.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;h3&gt; Event link example &lt;/h3&gt; 
   AddedCount = ${x}. &lt;br/&gt; 
   &lt;t:eventlink t:event = "add" t:context = "literal:1"&gt;
      Click here to add count
   &lt;/t:eventlink&gt;&lt;br/&gt;  
&lt;/html&gt;
</pre>
<p>EventLink has the following two parameters &minus;</p>
<ul class="list">
<li><p><b>Event</b> &minus; The name of the event to be triggered in the EventLink component. By default, it points to the id of the component.</p></li>
<li><p><b>Context</b> &minus; It is an optional parameter. It defines the context for the link.</p></li>
</ul>
<p><b>Result</b> &minus; http://localhost:8080/myFirstApplication/EventsLink</p>
<img src="/apache_tapestry/images/event_link.jpg" alt="Event Link" />
<p>After clicking the count value, the page will display the event name in the URL as shown in the following output screenshot.</p>
<img src="/apache_tapestry/images/event_link_result.jpg" alt="Event Link Result" />
<h2>ActionLink Component</h2>
<p>The ActionLink component is similar to the EventLink component, but it only sends the target component id. The default event name is action.</p>
<p>Create a page “ActivationLinks.java” as shown below,</p>
<h3>ActivationLinks.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property;  
public class ActivationLinks {  
   @Property 
   private int x;  
   void onActivate(int count) { 
      this.x = x; 
   }  
   int onPassivate() { 
      return x; 
   } 
   void onActionFromsub(int value) { 
      x -= value; 
   } 
} 
</pre>
<p>Now, create a corresponding template file as shown below &minus;</p>
<h3>ActivationLinks.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "Newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;div class = "div1"&gt; 
      Count = ${count}. &lt;br/&gt; 
      &lt;t:actionlink t:id = "sub" t:context = "literal:1"&gt;
         Decrement
      &lt;/t:actionlink&gt;&lt;br/&gt; 
   &lt;/div&gt; 
   
&lt;/html&gt; 
</pre>
<p>Here, the <b>OnActionFromSub</b> method will be called when clicking the ActionLink component.</p>
<p><b>Result</b> &minus; http://localhost:8080/myFirstApplication/ActivationsLink</p>
<img src="/apache_tapestry/images/action_link.jpg" alt="Action Link" />
<h2>Alert Component</h2>
<p>An alert dialog box is mostly used to give a warning message to the users. For example, if the input field requires some mandatory text but the user does not provide any input, then as a part of validation, you can use an alert box to give a warning message.</p>
<p>Create a page “Alerts” as shown in the following program.</p>
<h3>Alerts.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

public class Alerts { 
   public String getUser() { 
      return "user1"; 
   } 
}
</pre>
<p>Then, create a corresponding template file as follows &minus;</p>
<h3>Alerts.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "Newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"  
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;h3&gt;Alerts&lt;/h3&gt; 
   &lt;div class = "alert alert-info"&gt; 
      &lt;h5&gt; Welcome ${user} &lt;/h5&gt; 
   &lt;/div&gt;
   
&lt;/html&gt;
</pre>
<p>An Alert has three severity levels, which are &minus;</p>
<ul class="list">
<li>Info</li>
<li>Warn</li>
<li>Error</li>
</ul>
<p>The above template is created using an info alert. It is defined as <b>alert-info</b>. You can create other severities depending on the need.</p>
<p>Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/Alerts</b></p>
<img src="/apache_tapestry/images/alerts.jpg" alt="Alerts" />
<h1>Forms &amp; Validation Components</h1>
<p>The <b>Form Component</b> is used to create a form in the tapestry page for user input. A form can contain text fields, date fields, checkbox fields, select options, submit button and more.</p>
<p>This chapter explains about some of the notable form components in detail.</p>
<h2>Checkbox Component</h2>
<p>A Checkbox Component is used to take a choice between two mutually exclusive options. Create a page using the Checkbox as shown below &minus;</p>
<h3>Checkbox.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property;  

public class Checkbox { 
   @Property 
   private boolean check1; 
   
   @Property 
   private boolean check2; 
}
</pre>
<p>Now, create a corresponding template <b>Checkbox.tml</b> as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;h3&gt; checkbox component&lt;/h3&gt;  
   &lt;t:form&gt; 
      &lt;t:checkbox t:id = "check1"/&gt; I have a bike &lt;br/&gt; 
      &lt;t:checkbox t:id = "check2"/&gt; I have a car 
   &lt;/t:form&gt;  
   
&lt;/html&gt; 
</pre>
<p>Here, the checkbox parameter id matches to the corresponding Boolean value.</p>
<p><b>Result</b> &minus; After requesting the page,http://localhost:8080/myFirstApplication/checkbox it produces the following result.</p>
<img src="/apache_tapestry/images/checkbox.jpg" alt="Checkbox" />
<h2>TextField Component</h2>
<p>The TextField component allows the user to edit a single line of text. Create a page <b>Text</b> as shown below.</p>
<h3>Text.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property; 
import org.apache.tapestry5.corelib.components.TextField;public class Text {  
   @Property 
   private String fname;  
   @Property 
   private String lname; 
}
</pre>
<p>Then, create a corresponding template as shown below – Text.tml</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   &lt;p&gt; Form application &lt;/p&gt;
   
   &lt;body&gt;  
      &lt;h3&gt; Text field created from Tapestry component &lt;/h3&gt; 
      &lt;t:form&gt;  
         &lt;table&gt; 
            &lt;tr&gt; 
               &lt;td&gt; 
                  Firstname: &lt;/td&gt; &lt;td&gt;&lt;t:textfield t:id = "fname" /&gt; 
               &lt;/td&gt; 
               &lt;td&gt;Lastname: &lt;/td&gt; &lt;td&gt; &lt;t:textfield t:id = "lname" /&gt; &lt;/td&gt; 
            &lt;/tr&gt; 
         &lt;/table&gt;  
      &lt;/t:form&gt;  
   &lt;/body&gt; 
   
&lt;/html&gt;
</pre>
<p>Here, the Text page includes a property named <b>fname</b> and <b>lname</b>. The component id's are accessed by the properties.</p>
<p>Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/Text</b></p>
<img src="/apache_tapestry/images/text_field.jpg" alt="Text Field" />
<h2>PasswordField Component</h2>
<p>The PasswordField is a specialized text field entry for password. Create a page Password as shown below &minus;</p>
<h3>Password.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property; 
import org.apache.tapestry5.corelib.components.PasswordField;  

public class Password {  
   @Property 
   private String pwd; 
}
</pre>
<p>Now, create a corresponding template file is as shown below &minus;</p>
<h3>Password.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   &lt;p&gt; Form application &lt;/p&gt;  
   &lt;h3&gt; Password field created from Tapestry component &lt;/h3&gt; 
   
   &lt;t:form&gt; 
      &lt;table&gt; 
         &lt;tr&gt; 
            &lt;td&gt; Password: &lt;/td&gt; 
            &lt;td&gt;&lt;t:passwordfield t:id = "pwd"/&gt; &lt;/td&gt; 
         &lt;/tr&gt; 
      &lt;/table&gt; 
   &lt;/t:form&gt;
   
&lt;/html&gt; 
</pre>
<p>Here, the PasswordField component has the parameter id, which points to the property <b>pwd</b>. Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/Password </b></p>
<img src="/apache_tapestry/images/password_field.jpg" alt="Password Field" />
<h2>TextArea Component</h2>
<p>The TextArea component is a multi-line input text control. Create a page TxtArea as shown below.</p>
<h3>TxtArea.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property; 
import org.apache.tapestry5.corelib.components.TextArea;  

public class TxtArea {  
   @Property 
   private String str;  
}
</pre>
<p>Then, create a corresponding template file is as shown below.</p>
<h3>TxtArea.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   &lt;h3&gt;TextArea component &lt;/h3&gt;
   
   &lt;t:form&gt;
      &lt;table&gt;
         &lt;tr&gt; 
            &lt;td&gt;&lt;t:textarea t:id = "str"/&gt;
            &lt;/td&gt;
         &lt;/tr&gt;
      &lt;/table&gt;
   &lt;/t:form&gt;
   
&lt;/html&gt;
</pre>
<p>Here, the TextArea component parameter id points to the property “str”. Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/TxtArea**</b></p>
<img src="/apache_tapestry/images/textarea_component.jpg" alt="TextArea Component" />
<h2>Select Component</h2>
<p>The Select component contains a drop-down list of choices. Create a page SelectOption as shown below.</p>
<h3>SelectOption.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property; 
import org.apache.tapestry5.corelib.components.Select;  

public class SelectOption { 
   @Property 
   private String color0; 
   
   @Property 
   
   private Color1 color1; 
   public enum Color1 { 
      YELLOW, RED, GREEN, BLUE, ORANGE 
   } 
}
</pre>
<p>Then, create a corresponding template is as follows &minus;</p>
<h3>SelectOption.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   &lt;p&gt; Form application &lt;/p&gt;
   &lt;h3&gt; select component &lt;/h3&gt;  
   
   &lt;t:form&gt; 
      &lt;table&gt; 
         &lt;tr&gt; 
            &lt;td&gt; Select your color here: &lt;/td&gt; 
            &lt;td&gt; &lt;select t:type = "select" t:id = "color1"&gt;&lt;/select&gt;&lt;/td&gt; 
         &lt;/tr&gt; 
      &lt;/table&gt; 
   &lt;/t:form&gt;
   
&lt;/html&gt;
</pre>
<p>Here, the Select component has two parameters &minus;</p>
<ul class="list">
<li><p><b>Type</b> &minus; Type of the property is an enum.</p></li>
<li><p><b>Id</b> &minus; Id points to the Tapestry property “color1”.</p></li>
</ul>
<p>Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/SelectOption </b></p>
<img src="/apache_tapestry/images/select_component.jpg" alt="Select Component" />
<h2>RadioGroup Component</h2>
<p>The RadioGroup component provides a container group for Radio components. The Radio and RadioGroup components work together to update a property of an object. This component should wrap around other Radio components. Create a new page “Radiobutton.java” as shown below &minus;</p>
<h3>Radiobutton.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.PersistenceConstants; 
import org.apache.tapestry5.annotations.Persist; 
import org.apache.tapestry5.annotations.Property;  

public class Radiobutton {  
   @Property 
   @Persist(PersistenceConstants.FLASH)  
   private String value; 
}
</pre>
<p>Then, create a corresponding template file is as shown below &minus;</p>
<h3>Radiobutton.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "Newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   &lt;h3&gt;RadioGroup component &lt;/h3&gt; 
   
   &lt;t:form&gt;
      &lt;t:radiogroup t:id = "value"&gt;
         &lt;t:radio t:id = "radioT" value = "literal:T" label = "Male" /&gt; 
         &lt;t:label for = "radioT"/&gt;&nbsp;&nbsp;  
         &lt;t:radio t:id = "radioF" value = "literal:F" label = "Female"/&gt; 
         &lt;t:label for = "radioF"/&gt;&nbsp;&nbsp; 
      &lt;/t:radiogroup&gt;
   &lt;/t:form&gt;
   
&lt;/html&gt;
</pre>
<p>Here, the RadioGroup component id is binding with property “value”. Requesting the page will produce the following result.</p>
<p><b>http://localhost:8080/myFirstApplication/Radiobutton</b></p>
<img src="/apache_tapestry/images/radio_group.jpg" alt="Radio Group" />
<h2>Submit Component</h2>
<p>When a user clicks a submit button, the form is sent to the address specified in the action setting of the tag. Create a page <b>SubmitComponent</b> as shown below.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  
import org.apache.tapestry5.annotations.InjectPage;  

public class SubmitComponent { 
   @InjectPage 
   private Index page1; 
   Object onSuccess() { 
      return page1; 
   }     
}
</pre>
<p>Now, create a corresponding template file as shown below.</p>
<h3>SubmitComponent.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   &lt;h3&gt;Tapestry Submit component &lt;/h3&gt; 
   
   &lt;body&gt; 
      &lt;t:form&gt; 
         &lt;t:submit t:id = "submit1" value = "Click to go Index"/&gt; 
      &lt;/t:form&gt; 
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<p>Here, the Submit component submits the value to the Index page. Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/SubmitComponent</b></p>
<img src="/apache_tapestry/images/submit_component.jpg" alt="Submit Component" />
<h2>Form Validation</h2>
<p>Form validation normally occurs at the server after the client has entered all the necessary data and then submitted the form. If the data entered by a client was incorrect or simply missing, the server would have to send all the data back to the client and request that the form be resubmitted with correct information.</p>
<p>Let us consider the following simple example to understand the process of validation.</p>
<p>Create a page <b>Validate</b> as shown below.</p>
<h3>Validate.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.Property; 
import org.apache.tapestry5.PersistenceConstants; 
import org.apache.tapestry5.annotations.Persist;  

public class Validate {  
   @Property 
   @Persist(PersistenceConstants.FLASH) 
   private String firstName; 
   
   @Property 
   @Persist(PersistenceConstants.FLASH) 
   private String lastName; 
}
</pre>
<p>Now, create a corresponding template file as shown below.</p>
<h3>Validate.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
  
   &lt;t:form&gt; 
      &lt;table&gt; 
         &lt;tr&gt; 
            &lt;td&gt;&lt;t:label for = "firstName"/&gt;:&lt;/td&gt; 
            &lt;td&gt;&lt;input t:type = "TextField" t:id = "firstName" 
            t:validate = "required, maxlength = 7" size = "10"/&gt;&lt;/td&gt;   
         &lt;/tr&gt; 
         &lt;tr&gt; 
            &lt;td&gt;&lt;t:label for = "lastName"/&gt;:&lt;/td&gt; 
            &lt;td&gt;&lt;input t:type = "TextField" t:id = "lastName" 
            t:validate = "required, maxLength = 5" size = "10"/&gt;&lt;/td&gt;  
         &lt;/tr&gt;  
      &lt;/table&gt;  
      &lt;t:submit t:id = "sub" value =" Form validation"/&gt;  
   &lt;/t:form&gt;
   
&lt;/html&gt;
</pre>
<p>Form Validation has the following significant parameters &minus;</p>
<ul class="list">
<li><p><b>Max</b> &minus; defines the maximum value, for e.g. = &laquo;maximum value, 20&raquo;.</p></li>
<li><p><b>MaxDate</b> &minus; defines the maxDate, for e.g. = &laquo;maximum date, 06/09/2013&raquo;. Similarly, you can assign MinDate as well.</p></li>
<li><p><b>MaxLength</b> &minus; maxLength for e.g. = &laquo;maximum length, 80&raquo;.</p></li>
<li><p><b>Min</b> &minus; minimum.</p></li>
<li><p><b>MinLength</b> &minus; minimum Length for e.g. = &laquo;minmum length, 2&raquo;.</p></li>
<li><p><b>Email</b> &minus; Email validation which uses either standard email regexp ^\w[._\w]*\w@\w[-._\w]*\w\.\w2,6$ or none.</p></li>
</ul>
<p>Requesting the page will produce the following result &minus;</p>
<p><b>http://localhost:8080/myFirstApplication/Validate</b></p>
<img src="/apache_tapestry/images/form_validation.jpg" alt="Form Validation" />
<h1>Apache Tapestry - Ajax Component</h1>
<p>AJAX stands for <b>Asynchronous JavaScript and XML</b>. It is a technique for creating better, faster and more interactive web applications with the help of <b>XML, JSON, HTML, CSS,</b> and <b>JavaScript</b>. AJAX allows you to send and receive data asynchronously without reloading the web page, so it is fast.</p>
<h2>Zone Component</h2>
<p>A Zone Component is used to provide the content (markup) as well as the position of the content itself. The body of the Zone Component is used internally by Tapestry to generate the content. Once the dynamic content is generated, Tapestry will send it to the client, rerender the data in the correct place, trigger and animate the HTML to draw the attention of the user.</p>
<p>This Zone component is used along with an EventLink component. An EventLink has option to tie it to a particular zone using the <b>t:zone</b> attributes. Once the zone is configured in EventLink, clicking the EventLink will trigger the zone update. In addition, the EventLink events (refreshZone) can be used to control the generation of dynamic data.</p>
<p>A simple example of AJAX is as follows &minus;</p>
<h3>AjaxZone.tml</h3>
<pre class="prettyprint notranslate">
&lt;html t:type = "Newlayout" title = "About MyFirstApplication" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;body&gt; 
      &lt;h1&gt;Ajax time zone example&lt;/h1&gt;  
      &lt;div class = "div1"&gt;  
         &lt;a t:type = "eventlink" t:event = "refreshZone" href = "#" 
            t:zone = "timeZone"&gt;Ajax Link &lt;/a&gt;&lt;br/&gt;&lt;br/&gt; 
         &lt;t:zone t:id = "timeZone" id = "timeZone"&gt;Time zone: ${serverTime}&lt;/t:zone&gt; 
      &lt;/div&gt;  
   &lt;/body&gt;
   
&lt;/html&gt; 
</pre>
<h3>AjaxZone.java</h3>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import java.util.Date; 
import org.apache.tapestry5.annotations.InjectComponent; 
import org.apache.tapestry5.corelib.components.Zone; 
import org.apache.tapestry5.ioc.annotations.Inject; 
import org.apache.tapestry5.services.Request;  

public class AjaxZone { 
   @Inject 
   private Request request; 
   
   @InjectComponent 
   private Zone timeZone; 
   
   void onRefreshPage() { 
   } 
   
   Object onRefreshZone() { 
      return request.isXHR() ? timeZone.getBody() : null; 
   } 
   
   public Date getServerTime() { 
      return new Date(); 
   } 
} 
</pre>
<p>The result will show at: http://localhost:8080/MyFirstApplication/AjaxZone</p>
<img src="/apache_tapestry/images/ajax_time_zone.jpg" alt="Ajax Time Zone" />
<h1>Apache Tapestry - Hibernate</h1>
<p>In this chapter, we will discuss about the integration of <b>BeanEditForm</b> and <b>Grid component</b> with Hibernate. Hibernate is integrated into the tapestry through the hibernate module. To enable hibernate module, add tapestry-hibernate dependency and optionally <b>hsqldb</b> in the <b>pom.xml</b> file. Now, configure hibernate through the <b>hibernate.cfg.xml</b> file placed at the root of the resource folder.</p>
<h2>pom.xml (partial)</h2>
<pre class="prettyprint notranslate">
&lt;dependency&gt; 
   &lt;groupId&gt;org.apache.tapestry&lt;/groupId&gt; 
   &lt;artifactId&gt;tapestry-hibernate&lt;/artifactId&gt; 
   &lt;version&gt;${tapestry-release-version}&lt;/version&gt; 
&lt;/dependency&gt;  

&lt;dependency&gt; 
   &lt;groupId&gt;org.hsqldb&lt;/groupId&gt; 
   &lt;artifactId&gt;hsqldb&lt;/artifactId&gt; 
   &lt;version&gt;2.3.2&lt;/version&gt; 
&lt;/dependency&gt;
</pre>
<h2>Hibernate.cfg.xml</h2>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE hibernate-configuration PUBLIC 
   "-//Hibernate/Hibernate Configuration DTD 3.0//EN" 
   "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd"&gt; 

&lt;hibernate-configuration&gt; 
   &lt;session-factory&gt; 
      &lt;property name = "hibernate.connection.driver_class"&gt;
         org.hsqldb.jdbcDriver
      &lt;/property&gt; 
      &lt;property name = "hibernate.connection.url"&gt;
         jdbc:hsqldb:./target/work/sampleapp;shutdown = true
      &lt;/property&gt; 
      &lt;property name = "hibernate.dialect"&gt;
         org.hibernate.dialect.HSQLDialect
      &lt;/property&gt; 
      
      &lt;property name = "hibernate.connection.username"&gt;sa&lt;/property&gt; 
      &lt;property name = "hibernate.connection.password"&gt;&lt;/property&gt; 
      &lt;property name = "hbm2ddl.auto"&gt;update&lt;/property&gt;
      &lt;property name = "hibernate.show_sql"&gt;true&lt;/property&gt; 
      &lt;property name = "hibernate.format_sql"&gt;true&lt;/property&gt; 
   &lt;/session-factory&gt; 
&lt;/hibernate-configuration&gt; 
</pre>
<p>Let us see how to create the <b>employee add page</b> using the BeanEditForm component and the <b>employee list page</b> using the Grid component. The persistence layer is handled by Hibernate module.</p>
<p>Create an employee class and decorate it with @Entity annotation. Then, add validation annotation for relevant fields and hibernate related annotation @Id and @GeneratedValue for id field. Also, create gender as enum type.</p>
<h2>Employee.java</h2>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.entities;  

import javax.persistence.Entity; 
import javax.persistence.GeneratedValue; 
import javax.persistence.GenerationType; 
import javax.persistence.Id;  
import org.apache.tapestry5.beaneditor.NonVisual; 
import org.apache.tapestry5.beaneditor.Validate;  

@Entity 
public class Employee {  
   @Id 
   @GeneratedValue(strategy = GenerationType.IDENTITY) 
   @NonVisual 
   public Long id;  

   @Validate("required") 
   public String firstName;  
 
   @Validate("required") 
   public String lastName; 

   @Validate("required") 
   public String userName;  

   @Validate("required") 
   public String password;  

   @Validate("required") 
   public String email;  
   public String phone;  

   @Validate("required") 
   public String Street;  

   @Validate("required") 
   public String city;  

   @Validate("required") 
   public String state;  

   @Validate("required,regexp=^\\d{5}(-\\d{4})?$") 
   public String zip; 
} 
Gender.java (enum)  
package com.example.MyFirstApplication.data;  

public enum Gender { 
   Male, Female 
}
</pre>
<p>Create the employee list page, <b>ListEmployee.java</b> in the new folder employee under pages and corresponding template file ListEmployee.tml at <b>/src/main/resources/pages/employee</b> folder. Tapestry provides a short URL for sub folders by removing repeated data.</p>
<p>For example, the ListEmployee page can be accessed by a normal URL – (/employee/listemployee) and by the short URL – (/employee/list).</p>
<p>Inject the Hibernate session into the list page using @Inject annotation. Define a property <b>getEmployees</b> in the list page and populate it with employees using injected session object. Complete the code for employee class as shown below.</p>
<h2>ListEmployee.java</h2>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages.employee;  

import java.util.List;  
import org.apache.tapestry5.annotations.Import; 
import org.apache.tapestry5.ioc.annotations.Inject;  
import org.hibernate.Session; 
import com.example.MyFirstApplication.entities.Employee; 
import org.apache.tapestry5.annotations.Import;  
@Import(stylesheet="context:mybootstrap/css/bootstrap.css") 

public class ListEmployee { 
   @Inject 
   private Session session; 
   
   public List&lt;Employee&gt; getEmployees() { 
      return session.createCriteria(Employee.class).list(); 
   } 
} 
</pre>
<p>Create the template file for ListEmployee class. The template will have two main components, which are &minus;</p>
<ul class="list">
<li><p><b>PageLink</b> &minus; Create employee link page.</p></li>
<li><p><b>Grid</b> &minus; Used to render the employee details. The grid component has sources attributes to inject employee list and include attributes to include the fields to be rendered.</p></li>
</ul>
<p>ListEmployee.tml (list all employees)</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "simplelayout" title = "List Employee" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt; 
   &lt;h1&gt;Employees&lt;/h1&gt; 
   
   &lt;ul&gt; 
      &lt;li&gt;&lt;t:pagelink page = "employee/create"&gt;Create new employee&lt;/t:pagelink&gt;&lt;/li&gt; 
   &lt;/ul&gt;  
   &lt;t:grid source = "employees" 
      include = "userName,firstName,lastName,gender,dateOfBirth,phone,city,state"/&gt;  
&lt;/html&gt;
</pre>
<p>Create employee creation template file and include BeanEditForm component. The component has the following attributes &minus;</p>
<ul class="list">
<li><p><b>object</b> &minus; Includes source.</p></li>
<li><p><b>reorder</b> &minus; Defines the order of the fields to be rendered.</p></li>
<li><p><b>submitlabel</b> &minus; The message of the form submission button</p></li>
</ul>
<p>The complete coding is as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html t:type = "simplelayout" title = "Create New Address" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd"&gt;  
   &lt;t:beaneditform  
      object = "employee"  
      submitlabel = "message:submit-label" 
      reorder = "userName,password,firstName,lastName,
      dateOfBirth,gender,email,phone,s treet,city,state,zip" /&gt;  
&lt;/html&gt; 
</pre>
<p>Create employee creation class and include session, employee property, list page (navigation link) and define the OnSuccess event (place to update the data) of the component. The session data is persisted into the database using the hibernate session.</p>
<p>The complete coding is as follows &minus;</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages.employee;  

import com.example.MyFirstApplication.entities.Employee; 
import com.example.MyFirstApplication.pages.employee.ListEmployee; 
import org.apache.tapestry5.annotations.InjectPage; 
import org.apache.tapestry5.annotations.Property;  
import org.apache.tapestry5.hibernate.annotations.CommitAfter; 
import org.apache.tapestry5.ioc.annotations.Inject; 
import org.hibernate.Session;  

public class CreateEmployee { 
   @Property 
   private Employee employee;  
   @Inject 
   private Session session;  
   @InjectPage 
   private ListEmployee listPage;  
   @CommitAfter 
   Object onSuccess() { 
      session.persist(employee);  
      return listPage; 
   } 
}
</pre>
<p>Add the <b>CreateEmployee.properties</b> file and include the message to be used in form validations. The complete code is as follows &minus;</p>
<pre class="result notranslate">
zip-regexp=^\\d{5}(-\\d{4})?$ 
zip-regexp-message = Zip Codes are five or nine digits. Example: 02134 or 901251655. 
submit-label = Create Employee 
</pre>
<p>The screenshot of the employee creation page and listing page are shown below &minus;</p>
<img src="/apache_tapestry/images/employee_creation.jpg" alt="Employee Creation" />
<p></p>
<img src="/apache_tapestry/images/creation_page.jpg" alt="Creation Page" />
<h1>Apache Tapestry - Storage</h1>
<p>Every web application should have some way to store certain user data like user object, user preferences, etc. For example, in a shopping cart application, the user's selected items / products should be saved in a temporary bucket (cart) until the user prefers to buy the products. We can save the items in a database, but it will be too expensive since all users are not going to buy the selected items. So, we need a temporary arrangement to store / persist the items. Apache Tapestry Provides two ways to persist the data and they are &minus;</p>
<ul class="list">
<li>Persistence page data</li>
<li>Session Storage</li>
</ul>
<p>Both has its own advantages and limitations. We will check it in the following sections.</p>
<h2>Persistence Page Data</h2>
<p>The Persistence Page Data is a simple concept to persist data in a single page between requests and it is also called as <b>Page Level Persistence</b>. It can be done using the <b>@Persist</b> annotation.</p>
<pre class="result notranslate">
@Persist 
public int age; 
</pre>
<p>Once a field is annotated with @Persist, the field's value will be persisted across request and if the value is changed during request, it will be reflected when it is accessed next time. Apache Tapestry provides five types of strategy to implement the @Persist concept. They are as follows &minus;</p>
<ul class="list">
<li><p><b>Session Strategy</b> &minus; The data is persisted using the Session and it is a default strategy.</p></li>
<li><p><b>Flash Strategy</b> &minus; The data is persisted using Session as well, but it is a very short lived one. The data will be available in only one subsequent request.</p></li>
</ul>
<pre class="result notranslate">
@Persist(PersistenceConstants.FLASH) 
private int age;
</pre>
<ul class="list">
<li><p><b>Client Strategy</b> &minus; The data is persisted in the client side such as URL query string, hidden field in the form, etc.</p></li>
</ul>
<pre class="result notranslate">
@Persist(PersistenceConstants.FLASH) 
private int age; 
</pre>
<ul class="list">
<li><p><b>Hibernate Entity Strategy</b> &minus; The data is persisted using the Hibernate module as Entity. The entity will be stored in Hibernate and its reference (Java class name and its primary key) will be saved as token in <b>HttpSession</b>. The entity will be restored by using the token available in HttpSession.</p></li>
</ul>
<pre class="result notranslate">
@Persist(HibernatePersistenceConstants.ENTITY) 
private Category category;
</pre>
<ul class="list">
<li><p><b>JPA Entity Strategy</b> &minus; The data is persisted using a JPA module. It will only able to store Entity.</p></li>
</ul>
<pre class="result notranslate">
@Persist(JpaPersistenceConstants.ENTITY) 
private User user; 
</pre>
<h2>Session Storage</h2>
<p>Session storage is an advanced concept used to store data which needs to be available across pages like data in multiple page wizard, logged in user details, etc. The Session Storage provides two options, one to store complex object and another to store simple values</p>
<ul class="list">
<li><p><b>Session Store Object</b> &minus; Used to store complex object.</p></li>
<li><p><b>Session Attributes</b> &minus; Used to store simple values.</p></li>
</ul>
<h3>Session Store Object (SSO)</h3>
<p>An SSO can be created using <b>@SessionStore</b> annotation. The SSO will store the object using type of the object. For example, the <b>Cart Object</b> will be stored using a Cart class name as token. So, any complex object can be stored once in an application (one per user).</p>
<pre class="prettyprint notranslate">
public class MySSOPage { 
   @SessionState 
   private ShoppingCart cart; 
}
</pre>
<p>An SSO is a specialized store and should be used to store only complex / special object. Simple data types can also be stored using an SSO, but storing simple data types like String makes it only store one “String” value in the application. Using a single “String” value in the application is simply not possible. You can use simple data types as Apache Tapestry provides Session Attributes.</p>
<h3>Session Attributes</h3>
<p>Session Attributes enable the data to be stored by name instead of its type.</p>
<pre class="prettyprint notranslate">
public class MyPage { 
   @SessionAttribute  
   private String loggedInUsername; 
}
</pre>
<p>By default, Session Attributes uses the field name to refer the data in session. We can change the reference name by annotation parameter as shown below &minus;</p>
<pre class="prettyprint notranslate">
public class MyPage { 
   @SessionAttribute("loggedInUserName") 
   private String userName; 
}
</pre>
<p>One of the main issues in using name as session reference is that we may accidentally use the same name in more than one class / page. In this case, the data stored maybe changed unexpectedly. To fix this issue, it will be better to use the name along with class / page name and package name like <b>com.myapp.pages.register.email</b>, where com.myapp.pages is the package name, register is the page / class name and finally email is variable (to be stored) name.</p>
<h1>Apache Tapestry - Advanced Features</h1>
<p>In this chapter, we will discuss a few advanced features of Apache Tapestry in detail.</p>
<h2>Inversion of Control</h2>
<p>Tapestry provides built-in Inversion of Control library. Tapestry is deeply integrated into IoC and uses IoC for all its features. Tapestry IoC configuration is based on Java itself instead of XML like many other IoC containers. Tapestry IoC based modules are packaged into JAR file and just dropped into the classpath with zero configuration. Tapestry IoC usage is based on lightness, which means &minus;</p>
<ul class="list">
<li><p>Small interfaces of two or three methods.</p></li>
<li><p>Small methods with two or three parameters.</p></li>
<li><p>Anonymous communication via events, rather than explicit method invocations.</p></li>
</ul>
<h2>Modules</h2>
<p>Module is a way to extend the functionality of the Tapestry application. Tapestry has both built-in modules and large number of third-party modules. Hibernate is one of the hot and very useful module provided by Tapestry. It also has modules integrating JMX, JPA, Spring Framework, JSR 303 Bean Validation, JSON, etc. Some of the notable third-party modules are &minus;</p>
<ul class="list">
<li>Tapestry-Cayenne</li>
<li>Tapestry5-googleanalytics</li>
<li>Gang of tapestry 5 - Tapestry5-HighCharts</li>
<li>Gang of tapestry 5 - Tapestry5-jqPlot</li>
<li>Gang of tapestry 5 - Tapestry5-Jquery</li>
<li>Gang of tapestry 5 - Tapestry5-Jquery-mobile</li>
<li>Gang of tapestry 5 - Tapestry5-Portlet</li>
</ul>
<h2>Runtime Exceptions</h2>
<p>One of the best feature of the tapestry is <b>Detailed Error Reporting</b>. Tapestry helps a developer by providing the state of art exception reporting. Tapestry exception report is simple HTML with detailed information. Anyone can easily understand the report. Tapestry shows the error in HTML as well as save the exception in a plain text with date and time of the exception occurred. This will help developer to check the exception in production environment as well. The developer can remain confident of fixing any issues like broken templates, unexpected null values, unmatched request, etc.,</p>
<h2>Live Class and Template Reloading</h2>
<p>Tapestry will reload the templates and classes automatically when modified. This feature enables the immediate reflection of application changes without going through build and test cycle. Also, this feature greatly improves the productivity of the application development.</p>
<p>Consider the root package of the application is <b>org.example.myfirstapp</b>. Then, the classes in the following paths are scanned for reloading.</p>
<ul class="list">
<li>org.example.myfirstapp.pages</li>
<li>org.example.myfirstapp.components</li>
<li>org.example.myfirstapp.mixins</li>
<li>org.example.myfirstapp.base</li>
<li>org.example.myfirstapp.services</li>
</ul>
<p>The live class reloading can be disabled by setting the production mode to <b>true</b> in <b>AppModule.java</b>.</p>
<pre class="result notranslate">
configuration.add(SymbolicConstants.PRODUCTION_MODE,”false”);
</pre>
<h2>Unit Testing</h2>
<p>Unit testing is a technique by which individual pages and components are tested. Tapestry provides easy options to unit test pages and components.</p>
<p>Unit testing a page: Tapestry provide a class <b>PageTester</b> to test the application. This acts as both the browser and servlet container. It renders the page without the browser in the server-side itself and the resulting document can be checked for correct rendering. Consider a simple page <b>Hello</b>, which renders hello and the hello text is enclosed inside a html element with id <b>hello_id</b>. To test this feature, we can use PageTester as shown below &minus;</p>
<pre class="prettyprint notranslate">
public class PageTest extends Assert { 
   @Test 
   public void test1() { 
      Sring appPackage = "org.example.myfirstapp"; // package name 
      String appName = "App1"; // app name 
      PageTester tester = new PageTester(appPackage, appName, "src/main/webapp"); 
      Document doc = tester.renderPage("Hello"); 
      assertEquals(doc.getElementById("hello_id").getChildText(), "hello"); 
   } 
}
</pre>
<p>The PageTester also provides option to include context information, form submission, link navigation etc., in addition to rendering the page.</p>
<h2>Integrated Testing</h2>
<p>Integrated testing helps to test the application as a module instead of checking the individual pages as in unit testing. In Integrated testing, multiple modules can be tested together as a unit. Tapestry provides a small library called <b>Tapestry Test Utilities</b> to do integrated testing. This library integrates with Selenium testing tool to perform the testing. The library provides a base class <b>SeleniumTestCase</b>, which starts and manages the Selenium server, Selenium client and Jetty Instance.</p>
<p>One of the example of integrated testing is as follows &minus;</p>
<pre class="prettyprint notranslate">
import org.apache.tapestry5.test.SeleniumTestCase; 
import org.testng.annotations.Test;  

public class IntegrationTest extends SeleniumTestCase { 
   @Test 
   public void persist_entities() {  
      open("/persistitem"); 
      assertEquals(getText("//span[@id='name']").length(), 0); 
      clickAndWait("link = create item"); 
      assertText("//span[@id = 'name']", "name"); 
   } 
}
</pre>
<h2>Development Dashboard</h2>
<p>The Development dashboard is the default page which is used to identify / resolve the problems in your application. The Dashboard is accessed by the URL <b>http://localhost:8080/myfirstapp/core/t5dashboard</b>. The dashboard shows all the pages, services and component libraries available in the application.</p>
<h2>Response Compression</h2>
<p>Tapestry automatically compress the response using <b>GZIP compression</b> and stream it to the client. This feature will reduce the network traffic and aids faster delivery of the page. The compression can be configured using the symbol <b>tapestry.min-gzip-size</b> in AppModule.java. The default value is 100 bytes. Tapestry will compress the response once the size of the response crosses 100 bytes.</p>
<h2>Security</h2>
<p>Tapestry provides many options to secure the application against known security vulnerabilities in web application. Some of these options are listed below &minus;</p>
<ul class="list">
<li><p><b>HTTPS</b> &minus; Tapestry pages can be annotated with <b>@Secure</b> to make it a secure page and accessible by the <b>https protocol</b> only.</p></li>
<li><p><b>Page access control</b> &minus; Controlling the page to be accessed by a certain user only.</p></li>
<li><p><b>White-Listed Page</b> &minus; Tapestry pages can be annotated with a <b>@WhitelistAccessOnly</b> to make it accessible only through the <b>localhost</b>.</p></li>
<li><p><b>Asset Security</b> &minus; Under tapestry, only certain types of files are accessible. Others can be accessed only when the <b>MD5 hash</b> of the file is provided.</p></li>
<li><p><b>Serialized Object Date</b> &minus; Tapestry integrates a HMAC into serialized Java object data and sends it to the client to avoid message tampering.</p></li>
<li><p><b>Cross Site Request Forgery</b> &minus; Tapestry provides a 3<sup>rd</sup> party module called tapestry-csrf-protection to prevent any CSRF attacks.</p></li>
<li><p><b>Security Framework integration</b> &minus; Tapestry does not lock into a single authentication / authorization implementation. Tapestry can be integrated with any popular authentication framework.</p></li>
</ul>
<h2>Logging</h2>
<p>Tapestry provides extensive support for logging, the automatic recording of the progress of the application as it runs. Tapestry uses the de-facto Java logging library, <b>SLF4J</b>. The annotation <b>@Log</b> can be in any component method to emit the entry and exit of the method and the possible exception as well. Also, the Tapestry provided logger object can be injected into any component using the <b>@Inject</b> annotation as shown below &minus;</p>
<pre class="prettyprint notranslate">
public class MyPage { 
   @Inject 
   private Logger logger; 
   
   // . . . 
    
   void onSuccessFromForm() { 
      logger.info("Changes saved successfully"); 
   } 
     
   @Log 
   void onValidateFromForm() { 
      // logic 
   } 
}
</pre>
<p>Finally, we can now say that Apache Tapestry brings best ways to build concise, scalable, maintainable, robust and Ajax-enabled applications. Tapestry can be integrated with any third-party Java application. It can also help in creating a large web application as it is quite easy and fast.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/apache_tapestry/apache_tapestry_advanced_features.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/apache_tapestry/apache_tapestry_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
