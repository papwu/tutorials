<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Apache Tapestry - Components - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Apache Tapestry - Components - As discussed earlier, Components and Pages are the same except that the Page is the root component and includes one or more child components. Components always "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/apache_tapestry/apache_tapestry_components.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#84b540;
}
a.demo {
    background:#84b540;
}
li.heading {
    background:#84b540;
}
.course-box{background:#84b540}
.home-intro-sub p{color:#84b540}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/apache_tapestry/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/apache_tapestry/images/apache-tapestry-mini-logo.jpg" alt="Apache Tapestry Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Apache Tapestry Tutorial</li>
<li><a href="/apache_tapestry/index.htm">Apache Tapestry - Home</a></li>
<li><a href="/apache_tapestry/apache_tapestry_overview.htm">Apache Tapestry - Overview</a></li>
<li><a href="/apache_tapestry/apache_tapestry_architecture.htm">Apache Tapestry - Architecture</a></li>
<li><a href="/apache_tapestry/apache_tapestry_installation.htm">Apache Tapestry - Installation</a></li>
<li><a href="/apache_tapestry/apache_tapestry_quick_start.htm">Apache Tapestry - Quick Start</a></li>
<li><a href="/apache_tapestry/apache_tapestry_project_layout.htm">Apache Tapestry - Project Layout</a></li>
<li><a href="/apache_tapestry/apache_tapestry_convention_over_configuration.htm">Convention Over Configuration</a></li>
<li><a href="/apache_tapestry/apache_tapestry_annotation.htm">Apache Tapestry - Annotation</a></li>
<li><a href="/apache_tapestry/apache_tapestry_pages_and_components.htm">Pages and Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_templates.htm">Apache Tapestry - Templates</a></li>
<li><a href="/apache_tapestry/apache_tapestry_components.htm">Apache Tapestry - Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_built_in_components.htm">Built-In Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_forms_validation_components.htm">Forms &amp; Validation Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_ajax_component.htm">Apache Tapestry - Ajax Components</a></li>
<li><a href="/apache_tapestry/apache_tapestry_hibernate.htm">Apache Tapestry - Hibernate</a></li>
<li><a href="/apache_tapestry/apache_tapestry_storage.htm">Apache Tapestry - Storage</a></li>
<li><a href="/apache_tapestry/apache_tapestry_advanced_features.htm">Advanced Features</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Apache Tapestry Useful Resources</li>
<li><a href="/apache_tapestry/apache_tapestry_quick_guide.htm">Apache Tapestry - Quick Guide</a></li>
<li><a href="/apache_tapestry/apache_tapestry_useful_resources.htm">Apache Tapestry - Useful Resources</a></li>
<li><a href="/apache_tapestry/apache_tapestry_discussion.htm">Apache Tapestry - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Apache Tapestry - Components</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/apache_tapestry/apache_tapestry_templates.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/apache_tapestry/apache_tapestry_built_in_components.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>As discussed earlier, Components and Pages are the same except that the Page is the root component and includes one or more child components. Components always resides inside a page and do almost all the dynamic functionality of the page.</p>
<p>Tapestry components renders a simple HTML links to complex grid functionality with <b>interactive AJAX</b>. A Component can include another component as well. Tapestry components consists of following items &minus;</p>
<ul class="list">
<li><p><b>Component Class</b> &minus; The main Java class of the component.</p></li>
<li><p><b>XML Template</b> &minus; XML template is similar to the Page template. The component class renders the template as the final output. Some components may not have templates. In this case, the output will be generated by the component class itself using the <b>MarkupWriter</b> class.</p></li>
<li><p><b>Body</b> &minus; The component specified inside the page template may have custom markup and it is called “Component body”. If the component template has <b>&lt;body /&gt;</b> element, then the &lt;body /&gt; element will be replaced by the body of the component. This is similar to the layout discussed earlier in the XML template section.</p></li>
<li><p><b>Rendering</b> &minus; Rendering is a process which transforms XML template and body of the component into actual output of the component.</p></li>
<li><p><b>Parameters</b> &minus; Used to create communication between component &amp; pages and thereby passing data between them.</p></li>
<li><p><b>Events</b> &minus; Delegates functionality from components to its container / parent (pages or another component). It is extensively used in page navigation purpose.</p></li>
</ul>
<h2>Rendering</h2>
<p>The rendering of a component is done in a series of pre-defined phases. Each phase in the component system should have a corresponding method defined by convention or annotation in the component class.</p>
<pre class="prettyprint notranslate">
// Using annotaion 
@SetupRender 
void initializeValues() { 
   // initialize values 
}

// using convention 
boolean afterRender() { 
   // do logic 
   return true; 
}
</pre>
<p>The phases, its method name and its annotations are listed below.</p>
<table align="center" style="text-align:center;" class="table table-bordered">
<tr>
<th style="text-align:center;">Annotation</th>
<th style="text-align:center;">Default Method Names</th>
</tr>
<tr>
<td>@SetupRender</td>
<td>setupRender()</td>
</tr>
<tr>
<td>@BeginRender</td>
<td>beginRender()</td>
</tr>
<tr>
<td>@BeforeRenderTemplate</td>
<td>beforeRenderTemplate()</td>
</tr>
<tr>
<td>@BeforeRenderBody</td>
<td>beforeRenderBody()</td>
</tr>
<tr>
<td>@AfterRenderBody</td>
<td>afterRenderBody()</td>
</tr>
<tr>
<td>@AfterRenderTemplate</td>
<td>afterRenderTemplate()</td>
</tr>
<tr>
<td>@AfterRender</td>
<td>afterRender()</td>
</tr>
<tr>
<td>@CleanupRender</td>
<td>cleanupRender()</td>
</tr>
</table>
<p>Each phase has a specific purpose and they are as follows &minus;</p>
<h3>SetupRender</h3>
<p>SetupRender kick-starts the rendering process. It usually sets up the parameters of the component.</p>
<h3>BeginRender</h3>
<p>BeginRender starts rendering the component. It usually renders the begin / start tag of the component.</p>
<h3>BeforeRenderTemplate</h3>
<p>BeforeRenderTemplate is used to decorate the XML template, adding special markup around the template. It also provides an option to skip the template rendering.</p>
<h3>BeforeRenderBody</h3>
<p>BeforeRenderTemplate provides an option to skip the rendering of the component's body element.</p>
<h3>AfterRenderBody</h3>
<p>AfterRenderBody will be called after the component's body is rendered.</p>
<h3>AfterRenderTemplate</h3>
<p>AfterRenderTemplate will be called after the component's template is rendered.</p>
<h3>AfterRender</h3>
<p>AfterRender is the counterpart of the BeginRender and usually renders the close tag.</p>
<h3>CleanupRender</h3>
<p>CleanupRender is the counterpart of the SetupRender. It releases / disposes all the objects created during rendering process.</p>
<p>The flow of the rendering phases is not forward only. It goes to and fro between phases depending on the return value of a phase.</p>
<p>For example, if the SetupRender method returns false, then rendering jumps to the CleanupRender phase and vice versa. To find a clear understanding of the flow between different phases, check the flow in the diagram given below.</p>
<img src="/apache_tapestry/images/annotation_list.jpg" alt="Annotation List" />
<h3>Simple Component</h3>
<p>Let us create a simple component, Hello which will have the output message as “Hello, Tapestry”. Following is the code of the Hello component and its template.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components;  
public class Hello {  
}
</pre>
<pre class="prettyprint notranslate">
&lt;html  
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
  
   &lt;div&gt; 
      &lt;p&gt;Hello, Tapestry (from component).&lt;/p&gt; 
   &lt;/div&gt; 
  
&lt;/html&gt;
</pre>
<p>The Hello component can be called in a page template as &minus;</p>
<pre class="prettyprint notranslate">
&lt;html title = "Hello component test page" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
&lt;t:hello /&gt;  
&lt;/html&gt;
</pre>
<p>Similarly, the component may render the same output using MarkupWriter instead of the template as shown below.</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components; 
  
import org.apache.tapestry5.MarkupWriter; 
import org.apache.tapestry5.annotations.BeginRender;   

public class Hello { 
   @BeginRender 
   void renderMessage(MarkupWriter writer) { 
      writer.write("&lt;p&gt;Hello, Tapestry (from component)&lt;/p&gt;"); 
   } 
}
</pre>
<p>Let us change the component template and include the &lt;body /&gt; element as shown in the code block below.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;  
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;div&gt; 
      &lt;t:body /&gt; 
   &lt;/div&gt; 
&lt;/html&gt;
</pre>
<p>Now, the page template may include body in the component markup as shown below.</p>
<pre class="prettyprint notranslate">
&lt;html title = "Hello component test page" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;t:hello&gt; 
      &lt;p&gt;Hello, Tapestry (from page).&lt;/p&gt; 
   &lt;/t:hello&gt; 
&lt;/html&gt;
</pre>
<p>The output will be as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt; 
   &lt;div&gt; 
      &lt;p&gt;Hello, Tapestry (from page).&lt;/p&gt; 
   &lt;/div&gt; 
&lt;/html&gt;
</pre>
<h2>Parameters</h2>
<p>The primary purpose of these parameters is to create a connection between a field of the component and a property / resource of the page. Using parameters, component and its corresponding page communicate and transfer data between each other. This is called <b>Two Way Data Binding</b>.</p>
<p>For example, a textbox component used to represent the age in a user management page gets its initial value (available in the database) through the parameter. Again, after the user's age is updated and submitted back, the component will send back the updated age through the same parameter.</p>
<p>To create a new parameter in the component class, declare a field and specify a <b>@Parameter</b> annotation. This @Parameter has two optional arguments, which are &minus;</p>
<ul class="list">
<li><p><b>required</b> &minus; makes the parameter as mandatory. Tapestry raises exception if it is not provided.</p></li>
<li><p><b>value</b> &minus; specifies the default value of the parameter.</p></li>
</ul>
<p>The parameter should be specified in the page template as attributes of the component tag. The value of the attributes should be specified using Binding Expression / Expansion, which we discussed in the earlier chapters. Some of the expansion which we learned earlier are &minus;</p>
<ul class="list">
<li><p><b>Property expansion (prop:&laquo;val&raquo;)</b> &minus; Get the data from property of the page class.</p></li>
<li><p><b>Message expansion (message:&laquo;val&raquo;)</b> &minus; Get the data from key defined in index.properties file.</p></li>
<li><p><b>Context expansion (context:&laquo;val&raquo;)</b> &minus; Get the data from web context folder /src/main/webapp.</p></li>
<li><p><b>Asset expansion (asset:&laquo;val&raquo;)</b> &minus; Get the data from resources embedded in jar file, /META-INF/assets.</p></li>
<li><p><b>Symbol expansion (symbol:&laquo;val&raquo;)</b> &minus; Get the data from symbols defined in AppModule.javafile.</p></li>
</ul>
<p>Tapestry has many more useful expansions, some of which are given below &minus;</p>
<ul class="list">
<li><p><b>Literal expansion (literal:&laquo;val&raquo;)</b> &minus; A literal string.</p></li>
<li><p><b>Var expansion (var:&laquo;val&raquo;)</b> &minus; Allow a render variable of the component to be read or updated.</p></li>
<li><p><b>Validate expansion (validate:&laquo;val&raquo;)</b> &minus; A specialized string used to specify the validation rule of an object. For Example, validate:required, minLength = 5.</p></li>
<li><p><b>Translate (translate:&laquo;val&raquo;)</b> &minus; Used to specify the Translator class (converting client-side to server-side representation) in input validation.</p></li>
<li><p><b>Block (block:&laquo;val&raquo;)</b> &minus; The id of the block element within the template.</p></li>
<li><p><b>Component (component:&laquo;val&raquo;)</b> &minus; The id of the another component within the template.</p></li>
</ul>
<p>All the above expansions are read-only except Property expansion and Var expansion. They are used by the component to exchange data with page. When using expansion as attribute values, <b>${...}</b> should not be used. Instead just use the expansion without dollar and braces symbols.</p>
<h3>Component Using Parameter</h3>
<p>Let us create a new component, HelloWithParameter by modifying the Hello component to dynamically render the message by adding a <b>name</b> parameter in the component class and changing the component template and page template accordingly.</p>
<ul class="list">
<li><p>Create a new component class <b>HelloWithParameter.java</b>.</p></li>
<li><p>Add a private field and name it with the <b>@Parameter</b> annotation. Use the required argument to make it mandatory.</p></li>
</ul>
<pre class="result notranslate">
@Parameter(required = true) 
private String name;
</pre>
<ul class="list">
<li><p>Add a private field, result with <b>@Propery</b> annotation. The result property will be used in the component template. Component template does not have access to fields annotated with <b>@Parameter</b> and only able to access the fields annotated with <b>@Property</b>. The variable available in component templates are called Render Variables.</p></li>
</ul>
<pre class="result notranslate">
@Property 
 private String result;
</pre>
<ul class="list">
<li><p>Add a RenderBody method and copy the value from the name parameter to result property.</p></li>
</ul>
<pre class="prettyprint notranslate">
@BeginRender 
void initializeValues() { 
   result = name; 
}
</pre>
<ul class="list">
<li><p>Add a new component template <b>HelloWithParamter.tml</b> and use the result property to render the message.</p></li>
</ul>
<pre class="result notranslate">
&lt;div&gt; Hello, ${result} &lt;/div&gt;
</pre>
<ul class="list">
<li><p>Add a new property, Username in the test page (testhello.java).</p></li>
</ul>
<pre class="prettyprint notranslate">
public String getUsername() { 
   return "User1"; 
}
</pre>
<ul class="list">
<li><p>Use the newly created component in the page template and set the Username property in name parameter of <b>HelloWithParameter</b> component.</p></li>
</ul>
<pre class="result notranslate">
&lt;t:helloWithParameter name = "username" /&gt; 
</pre>
<p>The complete listing is as follows &minus;</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.components;  

import org.apache.tapestry5.annotations.*;  
public class HelloWithParameter { 
   @Parameter(required = true) 
   private String name; 
     
   @Property 
   private String result; 
   
   @BeginRender 
   void initializeValues() { 
      result = name; 
   } 
}
</pre>
<pre class="prettyprint notranslate">
&lt;html  
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   
   &lt;div&gt; Hello, ${result} &lt;/div&gt; 
  
&lt;/html&gt;
</pre>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages;  

import org.apache.tapestry5.annotations.*;  
public class TestHello { 
   public String getUsername() { 
      return "User1"; 
   } 
}
</pre>
<pre class="prettyprint notranslate">
&lt;html title = "Hello component test page" 
   xmlns:t = "https://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt; 
   &lt;t:helloWithParameter name = "username" /&gt;
   
&lt;/html&gt; 
</pre>
<p>The result will be as follows &minus;</p>
<pre class="result notranslate">
&lt;div&gt; Hello, User1 &lt;/div&gt;
</pre>
<h3>Advanced Parameter</h3>
<p>In the previous chapters, we analyzed how to create and use a simple parameter in a custom component. An advanced parameter may contain complete markup as well. In this case, the markup should be specified inside the component tag such as the sub-section in the page template. The built-in if component have markup for both success and failure condition. The markup for success is specified as the body of the component tag and the markup of failure is specified using an <b>elseparameter</b>.</p>
<p>Let us see how to use the <b>if</b> component. The if component has two parameters &minus;</p>
<ul class="list">
<li><p><b>test</b> &minus; Simple property based parameter.</p></li>
<li><p><b>Else</b> &minus; Advanced parameter used to specify alternative markup, if the condition fails</p></li>
</ul>
<p>Tapestry will check the value of the test property using the following logic and return true or false. This is called <b>Type Coercion</b>, a way to convert an object of one type to another type with the same content.</p>
<ul class="list">
<li><p>If the data type is <b>String</b>, “True” if non-blank and not the literal string “False” (case insensitive).</p></li>
<li><p>If the data type is <b>Number</b>, True if non-zero.</p></li>
<li><p>If the data type is <b>Collection</b>, True if non-empty.</p></li>
<li><p>If the data type is <b>Object</b>, True (as long as it’s not null).</p></li>
</ul>
<p>If the condition passes, the component renders its body; otherwise, it renders the body of the else parameter.</p>
<p>The complete listing is as follows &minus;</p>
<pre class="prettyprint notranslate">
package com.example.MyFirstApplication.pages; 
public class TestIf { 
   public String getUser() { 
      return "User1"; 
   } 
}
</pre>
<p></p>
<pre class="prettyprint notranslate">
&lt;html title = "If Test Page" 
   xmlns:t = "http://tapestry.apache.org/schema/tapestry_5_4.xsd" 
   xmlns:p = "tapestry:parameter"&gt;  
   
   &lt;body&gt; 
      &lt;h1&gt;Welcome!&lt;/h1&gt;  
      &lt;t:if test = "user"&gt; 
         Welcome back, ${user} 
         &lt;p:else&gt;
            Please &lt;t:pagelink page = "login"&gt;Login&lt;/t:pagelink&gt;  
         &lt;/p:else&gt; 
      &lt;/t:if&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<h2>Component Events / Page Navigation</h2>
<p>Tapestry application is a <b>collection of Pages</b> interacting with each other. Till now, we have learned how to create individual pages without any communication between them. A Component event's primary purpose is to provide interaction between pages (within pages as well) using server-side events. Most of the component events originate from client-side events.</p>
<p>For example, when a user clicks a link in a page, Tapestry will call the same page itself with target information instead of calling the target page and raises a server side event. Tapestry page will capture the event, process the target information and do a server side redirection to the target page.</p>
<p>Tapestry follows a <b>Post/Redirect/Get (RPG) design pattern</b> for page navigation. In RPG, when a user does a post request by submitting a form, the server will process the posted data, but does not return the response directly. Instead, it will do a client-side redirection to another page, which will output the result. An RPG pattern is used to prevent duplicate form submissions through browser back button, browser refresh button, etc., Tapestry provides an RPG pattern by providing the following two types of request.</p>
<ul class="list">
<li><p><b>Component Event Request</b> &minus; This type of request targets a particular component in a page and raises events within the component. This request only does a redirection and does not output the response.</p></li>
<li><p><b>Render Request</b> &minus; These types of requests target a page and stream the response back to the client.</p></li>
</ul>
<p>To understand the component events and page navigation, we need to know the URL pattern of the tapestry request. The URL pattern for both types of request is as follows &minus;</p>
<ul class="list">
<li><p><b>Component Event Requests</b> &minus;</p></li>
</ul>
<pre class="result notranslate">
/&lt;&lt;page_name_with_path&gt;&gt;.&lt;&lt;component_id|event_id&gt;&gt;/&lt;&lt;context_information&gt;&gt;
</pre>
<ul class="list">
<li><p><b>Render Request</b> &minus;</p></li>
</ul>
<pre class="result notranslate">
/&lt;&lt;page_name_with_path&gt;&gt;/&lt;&lt;context_information&gt;&gt;
</pre>
<p>Some of the examples of the URL patterns are &minus;</p>
<ul class="list">
<li><p>Index page can be requested by <b>https://&laquo;domain&raquo;/&laquo;app&raquo;/index</b>.</p></li>
<li><p>If the Index page is available under a sub-folder admin, then it can be requested by <b>https://&laquo;domain&raquo;/&laquo;app&raquo;/admin/index</b>.</p></li>
<li><p>If the user clicks on the <b>ActionLink component</b> with <b>id test</b> in the index page, then the URL will be <b>https://&laquo;domain&raquo;/&laquo;app&raquo;/index.test</b>.</p></li>
</ul>
<h2>Events</h2>
<p>By default, Tapestry raises <b>OnPassivate</b> and <b>OnActivate</b> events for all requests. For Component event request type, tapestry raises additional one or more events depending on the component. The ActionLink component raises an Action event, while a Form component raises multiple events such as <b>Validate, Success</b>, etc.,</p>
<p>The events can be handled in the page class using the corresponding method handler. The method handler is created either through a method naming convention or through the <b>@OnEvent</b> annotation. The format of the method naming convention is <b>On&laquo;EventName&raquo;From&laquo;ComponentId&raquo;</b>.</p>
<p>An action event of the ActionLink component with <b>id test</b> can be handled by either one of the following methods &minus;</p>
<pre class="prettyprint notranslate">
void OnActionFromTest() { 
}  
@OnEvent(component = "test", name = "action") 
void CustomFunctionName() { 
} 
</pre>
<p>If the method name does not have any particular component, then the method will be called for all component with matching events.</p>
<pre class="prettyprint notranslate">
void OnAction() { 
} 
</pre>
<h3>OnPassivate and OnActivate Event</h3>
<p>OnPassivate is used to provide context information for an OnActivate event handler. In general, Tapestry provides the context information and it can be used as an argument in the OnActivateevent handler.</p>
<p>For example, if the context information is 3 of type int, then the OnActivate event can be called as &minus;</p>
<pre class="prettyprint notranslate">
void OnActivate(int id) { 
} 
</pre>
<p>In some scenario, the context information may not be available. In this situation, we can provide the context information to OnActivate event handler through OnPassivate event handler. The return type of the OnPassivate event handler should be used as argument of OnActivate event handler.</p>
<pre class="prettyprint notranslate">
int OnPassivate() { 
   int id = 3; 
   return id; 
} 
void OnActivate(int id) { 
} 
</pre>
<h3>Event Handler Return Values</h3>
<p>Tapestry issues page redirection based on the return values of the event handler. Event handler should return any one of the following values.</p>
<ul class="list">
<li><p><b>Null Response</b> &minus; Returns null value. Tapestry will construct the current page URL and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
public Object onAction() { 
   return null; 
}
</pre>
<ul class="list">
<li><p><b>String Response</b> &minus; Returns the string value. Tapestry will construct the URL of the page matching the value and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
public String onAction() { 
   return "Index"; 
}
</pre>
<ul class="list">
<li><p><b>Class Response</b> &minus; Returns a page class. Tapestry will construct the URL of the returned page class and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
public Object onAction() { 
   return Index.class 
}
</pre>
<ul class="list">
<li><p><b>Page Response</b> &minus; Returns a field annotated with @InjectPage. Tapestry will construct the URL of the injected page and send to the client as redirect.</p></li>
</ul>
<pre class="prettyprint notranslate">
@InjectPage 
private Index index;  

public Object onAction(){ 
   return index; 
}
</pre>
<ul class="list">
<li><p><b>HttpError</b> &minus; Returns the HTTPError object. Tapestry will issue a client side HTTP error.</p></li>
</ul>
<pre class="prettyprint notranslate">
public Object onAction(){ 
   return new HttpError(302, "The Error message); 
}
</pre>
<ul class="list">
<li><p><b>Link Response</b> &minus; Returns a link instance directly. Tapestry will construct the URL from Link object and send to the client as redirect.</p></li>
<li><p><b>Stream Response</b> &minus; Returns the <b>StreamResponse</b> object. Tapestry will send the stream as response directly to the client browser. It is used to generate reports and images directly and send it to the client.</p></li>
<li><p><b>Url Response</b> &minus; Returns the <b>java.net.URL</b> object. Tapestry will get the corresponding URL from the object and send to the client as redirect.</p></li>
<li><p><b>Object Response</b> &minus; Returns any values other than above specified values. Tapestry will raise an error.</p></li>
</ul>
<h3>Event Context</h3>
<p>In general, event handler can get the context information using arguments. For example, if the context information is 3 of type int, then the event handler will be &minus;</p>
<pre class="result notranslate">
Object onActionFromTest(int id) {  
} 
</pre>
<p>Tapestry properly handles the context information and provides it to methods through arguments. Sometimes, Tapestry may not be able to properly handle it due to complexity of the programming. At that time, we may get the complete context information and process ourselves.</p>
<pre class="prettyprint notranslate">
Object onActionFromEdit(EventContext context) { 
   if (context.getCount() &gt; 0) { 
      this.selectedId = context.get(0); 
   } else { 
      alertManager.warn("Please select a document."); 
      return null; 
   } 
}
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/apache_tapestry/apache_tapestry_templates.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/apache_tapestry/apache_tapestry_built_in_components.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
