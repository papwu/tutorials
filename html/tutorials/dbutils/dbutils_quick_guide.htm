<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Apache Commons DBUtils - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Apache Commons DBUtils - Quick Guide - Apache Commons DbUtils library is a quite small set of classes which are designed to make easier JDBC call processing without resource leak and to have cleaner "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/dbutils/dbutils_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#e56b2c;
}
a.demo {
    background:#e56b2c;
}
li.heading {
    background:#e56b2c;
}
.course-box{background:#e56b2c}
.home-intro-sub p{color:#e56b2c}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/dbutils/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/dbutils/images/dbutils-mini-logo.jpg" alt="Apache Commons DBUtils Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Apache Commons DBUtils Tutorial</li>
<li><a href="/dbutils/index.htm">DBUtils - Home</a></li>
<li><a href="/dbutils/dbutils_overview.htm">DBUtils - Overview</a></li>
<li><a href="/dbutils/dbutils_environment.htm">DBUtils - Environment Setup</a></li>
<li><a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Basic CRUD Examples</li>
<li><a href="/dbutils/dbutils_create_query.htm">DBUtils - Create Query</a></li>
<li><a href="/dbutils/dbutils_read_query.htm">DBUtils - Read Query</a></li>
<li><a href="/dbutils/dbutils_update_query.htm">DBUtils - Update Query</a></li>
<li><a href="/dbutils/dbutils_delete_query.htm">DBUtils - Delete Query</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">DBUtils Examples</li>
<li><a href="/dbutils/dbutils_queryrunner_interface.htm">QueryRunner Interface</a></li>
<li><a href="/dbutils/dbutils_asyncqueryrunner_interface.htm">AsyncQueryRunner Interface</a></li>
<li><a href="/dbutils/dbutils_resultsethandler_interface.htm">DBUtils - ResultSetHandler Interface</a></li>
<li><a href="/dbutils/dbutils_beanhandler_class.htm">DBUtils - BeanHandler Interface</a></li>
<li><a href="/dbutils/dbutils_beanlisthandler_class.htm">DBUtils - BeanListHandler Interface</a></li>
<li><a href="/dbutils/dbutils_arraylisthandler_class.htm">DBUtils - ArrayListHandler Interface</a></li>
<li><a href="/dbutils/dbutils_maplisthandler_class.htm">DBUtils - MapListHandler Interface</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Advanced DBUtils Examples</li>
<li><a href="/dbutils/dbutils_custom_handler.htm">DBUtils - Custom Handler</a></li>
<li><a href="/dbutils/dbutils_custom_rowprocessor.htm">DBUtils - Custom Row Processor</a></li>
<li><a href="/dbutils/dbutils_using_datasource.htm">DBUtils - Using Datasource</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">DBUtils Useful Resources</li>
<li><a href="/dbutils/dbutils_quick_guide.htm">DBUtils - Quick Guide</a></li>
<li><a href="/dbutils/dbutils_useful_resources.htm">DBUtils - Useful Resources</a></li>
<li><a href="/dbutils/dbutils_discussion.htm">DBUtils - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Apache Commons DBUtils - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/dbutils/dbutils_using_datasource.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/dbutils/dbutils_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Apache Commons DBUtils - Overview</h1>
<p>Apache Commons DbUtils library is a quite small set of classes which are designed to make easier JDBC call processing without resource leak and to have cleaner code. As JDBC resource cleanup is quite tedious and error prone, DBUtils classes helps to abstract out the boiler plate code so that developers can focus on database related operations only.</p>
<h2>Advantages of using DBUtils</h2>
<ul class="list">
<li><p><b>No Resource Leakage</b> &minus; DBUtils classes ensures that no resource leakage happen. </p></li>
<li><p><b>Clean &amp; Clear code</b> &minus; DBUtils classes provides clean and clear code to do database operations without needing to write any cleanup or resource leak prevention code. </p></li>
<li><p><b>Bean Mapping</b> &minus; DBUtils class supports to automatically populate javabeans from a result set. </p></li>
</ul>
<h2>DBUtils Design principles</h2>
<ul class="list">
<li><p><b>Small</b> &minus; DBUtils library is very small in size with fewer classes so that it is easy to understand and use.</p></li>
<li><p><b>Transparent</b> &minus; DBUtils library is not doing much work behind the scenes. It simply takes query and executes.</p></li>
<li><p><b>Fast</b> &minus; DBUtils library classes do not create many background objects and is quite fast in database operation executions.</p></li>
</ul>
<h1>Commons DBUtils - Environment Setup</h1>
<p>To start developing with DBUtils, you should setup your DBUtils environment by following the steps shown below. We assume that you are working on a Windows platform.</p>
<h2>Install Java</h2>
<p>Install J2SE Development Kit 5.0 (JDK 5.0) from <a href="https://java.sun.com/j2se/1.5.0/download.jsp" target="_blank" rel="nofollow">Java Official Site</a>.</p>
<p>Make sure following environment variables are set as described below &minus;</p>
<ul class="list">
<li><p><b>JAVA_HOME</b> &minus; This environment variable should point to the directory where you installed the JDK, e.g. C:\Program Files\Java\jdk1.5.0.</p></li>
<li><p><b>CLASSPATH</b> &minus; This environment variable should have appropriate paths set, e.g. C:\Program Files\Java\jdk1.5.0_20\jre\lib.</p></li>
<li><p><b>PATH</b> &minus; This environment variable should point to appropriate JRE bin, e.g. C:\Program Files\Java\jre1.5.0_20\bin.</p></li>
</ul>
<p>It is possible you have these variable set already, but just to make sure here's how to check.</p>
<ul class="list">
<li><p>Go to the control panel and double-click on System. If you are a Windows XP user, it is possible you have to open Performance and Maintenance before you will see the System icon.</p></li>
<li><p>Go to the Advanced tab and click on the Environment Variables.</p></li>
<li><p>Now check if all the above mentioned variables are set properly.</p></li>
</ul> 
<h2>Install Database</h2>
<p>The most important thing you will need, of course is an actual running database with a table that you can query and modify.</p>
<p>Install a database that is most suitable for you. You can have plenty of choices and most common are &minus;</p>
<ul class="list">
<li><p><b>MySQL DB:</b> MySQL is an open source database. You can download it from <a href="https://dev.mysql.com/downloads/mysql" target="_blank" rel="nofollow">MySQL Official Site</a>. We recommend downloading the full Windows installation.</p>
<p>In addition, download and install <a href="https://dev.mysql.com/downloads/gui-tools/" target="_blank" rel="nofollow">MySQL Administrator</a> as well as <a href="https://dev.mysql.com/downloads/gui-tools/" target="_blank" rel="nofollow">MySQL Query Browser</a>. These are GUI based tools that will make your development much easier.</p>
<p>Finally, download and unzip <a href="https://dev.mysql.com/downloads/connector/j/3.1.html" target="_blank" rel="nofollow">MySQL Connector/J</a> (the MySQL JDBC driver) in a convenient directory. For the purpose of this tutorial we will assume that you have installed the driver at C:\Program Files\MySQL\mysql-connector-java-5.1.8.</p>
<p>Accordingly, set CLASSPATH variable to C:\Program Files\MySQL\mysql-connector-java-5.1.8\mysql-connector-java-5.1.8-bin.jar. Your driver version may vary based on your installation.</p></li>
<li><p><b>PostgreSQL DB:</b> PostgreSQL is an open source database. You can download it from <a href="https://www.postgresql.org/download/" target="_blank" rel="nofollow">PostgreSQL Official Site</a>.</p>
<p>The Postgres installation contains a GUI based administrative tool called pgAdmin III. JDBC drivers are also included as part of the installation.</p></li>
<li><p><b>Oracle DB</b> &minus; Oracle DB is a commercial database sold by Oracle . We assume that you have the necessary distribution media to install it.</p>
<p>Oracle installation includes a GUI based administrative tool called Enterprise Manager. JDBC drivers are also included as a part of the installation.</p></li>
</ul> 
<h2>Install Database Drivers</h2>
<p>The latest JDK includes a JDBC-ODBC Bridge driver that makes most Open Database Connectivity (ODBC) drivers available to programmers using the JDBC API.</p>
<p>Now a days, most of the Database vendors are supplying appropriate JDBC drivers along with Database installation. So, you should not worry about this part.</p>
<h2>Set Database Credential</h2>
<p>For this tutorial we are going to use MySQL database. When you install any of the above database, its administrator ID is set to <b>root</b> and gives provision to set a password of your choice.</p>
<p>Using root ID and password you can either create another user ID and password, or you can use root ID and password for your JDBC application.</p>
<p>There are various database operations like database creation and deletion, which would need administrator ID and password.</p>
<p>For rest of the JDBC tutorial, we would use MySQL Database with <b>username</b> as ID and <b>password</b> as password.</p>
<p>If you do not have sufficient privilege to  create new users, then you can ask your Database Administrator (DBA) to create a user ID and password for you.</p>
<h2>Create Database</h2>
<p>To create the <b>emp</b> database, use the following steps &minus;</p>
<h3>Step 1</h3>
<p>Open a <b>Command Prompt</b> and change to the installation directory as follows &minus;</p>
<pre class="result notranslate">
C:\&gt;
C:\&gt;cd Program Files\MySQL\bin
C:\Program Files\MySQL\bin&gt;
</pre>
<p><b>Note:</b> The path to <b>mysqld.exe</b> may vary depending on the install location of MySQL on your system. You can also check documentation on how to start and stop your database server.</p>
<h3>Step 2</h3>
<p>Start the database server by executing the following command, if it is already not running.</p>
<pre class="result notranslate">
C:\Program Files\MySQL\bin&gt;mysqld
C:\Program Files\MySQL\bin&gt;
</pre>
<h3>Step 3</h3>
<p>Create the <b>emp</b> database by executing the following command &minus;</p>
<pre class="result notranslate">
C:\Program Files\MySQL\bin&gt; mysqladmin create emp -u root -p
Enter password: ********
C:\Program Files\MySQL\bin&gt;
</pre>
<h2>Create Table</h2>
<p>To create the <b>Employees</b> table in emp database, use the following steps &minus;</p>
<h3>Step 1</h3>
<p>Open a <b>Command Prompt</b> and change to the installation directory as follows &minus;</p>
<pre class="result notranslate">
C:\&gt;
C:\&gt;cd Program Files\MySQL\bin
C:\Program Files\MySQL\bin&gt;
</pre>
<h3>Step 2</h3>
<p>Login to the database as follows &minus;</p>
<pre class="result notranslate">
C:\Program Files\MySQL\bin&gt;mysql -u root -p
Enter password: ********
mysql&gt;
</pre>
<h3>Step 3</h3>
<p>Create the table <b>Employee</b> as follows &minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; use emp;
mysql&gt; create table Employees
    -&gt; (
    -&gt; id int not null,
    -&gt; age int not null,
    -&gt; first varchar (255),
    -&gt; last varchar (255)
    -&gt; );
Query OK, 0 rows affected (0.08 sec)
mysql&gt;
</pre>
<h2>Create Data Records</h2>
<p>Finally you create few records in Employee table as follows &minus;</p>
<pre class="prettyprint notranslate">
mysql&gt; INSERT INTO Employees VALUES (100, 18, 'Zara', 'Ali');
Query OK, 1 row affected (0.05 sec)

mysql&gt; INSERT INTO Employees VALUES (101, 25, 'Mahnaz', 'Fatma');
Query OK, 1 row affected (0.00 sec)

mysql&gt; INSERT INTO Employees VALUES (102, 30, 'Zaid', 'Khan');
Query OK, 1 row affected (0.00 sec)

mysql&gt; INSERT INTO Employees VALUES (103, 28, 'Sumit', 'Mittal');
Query OK, 1 row affected (0.00 sec)

mysql&gt;
</pre>
<p>For a complete understanding on MySQL database, study the <a href="/mysql/index.htm" title="MySQL Tutorial" target="_blank">MySQL Tutorial</a>.</p>
<h2>Download Commons DBUtils Archive</h2>
<p>Download the latest version of Apache Common DBUtils jar file from <a rel="nofollow" target="_blank" rel="nofollow" href="https://commons.apache.org/proper/commons-dbutils/download_dbutils.cgi">commons-dbutils-1.7-bin.zip</a>, MySql connector <a rel="nofollow" target="_blank" rel="nofollow" href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">mysql-connector-java-5.1.28-bin.jar</a> , Apache Commons DBCP <a rel="nofollow" target="_blank" rel="nofollow" href="https://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi">commons-dbcp2-2.1.1-bin.zip</a>, Apache Commons Pool <a rel="nofollow" target="_blank" rel="nofollow" href="https://commons.apache.org/proper/commons-pool/download_pool.cgi">commons-pool2-2.4.3-bin.zip</a> and , Apache Commons Logging <a rel="nofollow" target="_blank" rel="nofollow" href="https://commons.apache.org/proper/commons-logging/download_logging.cgi">commons-logging-1.2-bin.zip</a> . At the time of writing this tutorial, we have downloaded <i>commons-dbutils-1.7-bin.zip</i>,  <i>mysql-connector-java-5.1.28-bin.jar</i>, <i>commons-dbcp2-2.1.1-bin.zip</i>, <i>commons-pool2-2.4.3-bin.zip</i>, <i>commons-logging-1.2-bin.zip</i> and copied it into C:\>Apache folder.</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;">OS</th> 
<th style="text-align:center;">Archive name</th>
</tr>
<tr>
<td>Windows</td>
<td>commons-dbutils-1.7-bin.zip</td>
</tr>
<tr>
<td>Linux</td>
<td>commons-dbutils-1.7-bin.tar.gz</td>
</tr>
<tr>
<td>Mac</td>
<td>commons-dbutils-1.7-bin.tar.gz</td>
</tr>
</table>
<h2>Set Apache Common DBUtils Environment</h2>
<p>Set the <b>APACHE_HOME</b> environment variable to point to the base directory location where Apache jar is stored on your machine. Assuming, we've extracted commons-dbutils-1.7-bin.zip in Apache folder on various Operating Systems as follows.</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;">OS</th>
<th style="text-align:center;">Output</th>
</tr>
<tr>
<td>Windows</td>
<td>Set the environment variable APACHE_HOME to C:\Apache</td>
</tr>
<tr>
<td>Linux</td>
<td>export APACHE_HOME=/usr/local/Apache</td>
</tr>
<tr>
<td>Mac</td>
<td>export APACHE_HOME=/Library/Apache</td>
</tr>
</table>
<h2>Set CLASSPATH Variable</h2>
<p>Set the <b>CLASSPATH</b> environment variable to point to the Common IO jar location. Assuming, you have stored commons-dbutils-1.7-bin.zip in Apache folder on various Operating Systems as follows.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">OS</th>
<th style="text-align:center;">Output</th>
</tr>
<tr>
<td class="ts">Windows</td>
<td>Set the environment variable CLASSPATH to %CLASSPATH%;%APACHE_HOME%\commons-dbutils-1.7.jar;mysql-connector-java-5.1.28.jar;commons-dbcp2-2.1.1.jar;commons-pool2-2.4.3.jar;commons-logging-1.2.jar;</td>
</tr>
<tr>
<td class="ts">Linux</td>
<td>export CLASSPATH=$CLASSPATH:$APACHE_HOME/commons-dbutils-1.7.jar:mysql-connector-java-5.1.28.jar:commons-dbcp2-2.1.1:commons-pool2-2.4.3.jar:commons-logging-1.2.jar.</td>
</tr>
<tr>
<td class="ts">Mac</td>
<td>export CLASSPATH=$CLASSPATH:$APACHE_HOME/commons-dbutils-1.7.jar:mysql-connector-java-5.1.28:commons-dbcp2-2.1.1.jar:commons-pool2-2.4.3.jar;commons-logging-1.2.jar.</td>
</tr>
</table>
<p>Now you are ready to start experimenting with DBUtils. Next chapter gives you a sample example on DBUtils Programming.</p>
<h1>Apache Commons DBUtils - First Application</h1>
<p>This chapter provides an example of how to create a simple JDBC application using DBUtils library. This will show you how to open a database connection, execute a SQL query, and display the results.</p>
<p>All the steps mentioned in this template example, would be explained in subsequent chapters of this tutorial.</p>
<h2>Creating JDBC Application</h2>
<p>There are following six steps involved in building a JDBC application &minus;</p>
<ul class="list">
<li><p><b>Import the packages</b> &minus; Requires that you include the packages containing the JDBC classes needed for database programming. Most often, using <i>import java.sql.*</i> will suffice.</p></li>
<li><p><b>Register the JDBC driver</b> &minus; Requires that you initialize a driver so you can open a communication channel with the database.</p></li>
<li><p><b>Open a connection</b> &minus; Requires using the <i>DriverManager.getConnection()</i> method to create a Connection object, which represents a physical connection with the database.</p></li>
<li><p><b>Execute a query</b> &minus; Requires using an object of type Statement for building and submitting an SQL statement to the database.</p></li>
<li><p><b>Extract data from result set</b> &minus; Requires that you use the appropriate <i>ResultSet.getXXX()</i> method to retrieve the data from the result set.</p></li>
<li><p><b>Clean up the environment</b> &minus; Requires explicitly closing all database resources versus relying on the JVM's garbage collection.</p></li>
</ul>
<h2>Sample Code</h2>
<p>This sample example can serve as a <b>template</b> when you need to create your own JDBC application in the future.</p>
<p>This sample code has been written based on the environment and database setup done in the previous chapter.</p>
<p>Copy and paste the following example in MainApp.java, compile and run as follows &minus;</p>
<p><i>MainApp.java</i></p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);

      //Step 3: Create a ResultSet Handler to handle Employee Beans
      ResultSetHandler&lt;Employee&gt; resultHandler = new BeanHandler&lt;Employee&gt;(Employee.class);

      try {
         Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?",
            resultHandler, "Sumit");
         //Display values
         System.out.print("ID: " + emp.getId());
         System.out.print(", Age: " + emp.getAge());
         System.out.print(", First: " + emp.getFirst());
         System.out.println(", Last: " + emp.getLast());
      } finally {
         DbUtils.close(conn);
      }              
   }
}
</pre>
<p><i>Employee.java</i></p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Now let us compile the above example as follows &minus;</p>
<pre class="result notranslate">
C:\&gt;javac MainApp.java Employee.java
C:\&gt;
</pre>
<p>When you run <b>MainApp</b>, it produces the following result &minus;</p>
<pre class="result notranslate">
C:\&gt;java MainApp
Connecting to database...
ID: 103, Age: 28, First: Sumit, Last: Mittal
C:\&gt;
</pre>
<h1>Apache Commons DBUtils - Create Query</h1>
<p>The following example will demonstrate how to create a record using Insert query with the help of DBUtils. We'll insert a record in Employees Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
String insertQuery ="INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)";
int insertedRecords = queryRunner.update(conn, insertQuery,104,30, "Sohan","Kumar");
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>insertQuery</b> &minus; Insert query having placeholders.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to insert employee object in database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a insert query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      DbUtils.loadDriver(JDBC_DRIVER);       
      conn = DriverManager.getConnection(DB_URL, USER, PASS);
      try {
         int insertedRecords = queryRunner.update(conn, 
            "INSERT INTO employees(id,age,first,last)  VALUES (?,?,?,?)",
            104,30, "Sohan","Kumar");           
         System.out.println(insertedRecords + " record(s) inserted");
      } finally {
         DbUtils.close(conn);
      }  
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
1 record(s) inserted.
</pre>
<h1>Apache Commons DBUtils - Read Query</h1>
<p>The following example will demonstrate how to read a record using Read query with the help of DBUtils. We'll read a record from Employees Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
ResultSetHandler&lt;Employee&gt; resultHandler = new BeanHandler&lt;Employee&gt;(Employee.class);
Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?", resultHandler, "Sumit");
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; ResultSetHandler object to map result set to Employee object.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);

      //Step 3: Create a ResultSet Handler to handle Employee Beans
      ResultSetHandler&lt;Employee&gt; resultHandler = 
         new BeanHandler&lt;Employee&gt;(Employee.class);

      try {
         Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE id=?",
            resultHandler, 104);
         //Display values
         System.out.print("ID: " + emp.getId());
         System.out.print(", Age: " + emp.getAge());
         System.out.print(", First: " + emp.getFirst());
         System.out.println(", Last: " + emp.getLast());
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 104, Age: 30, First: Sohan, Last: Kumar
</pre>
<h1>Apache Commons DBUtils - Update Query</h1>
<p>The following example will demonstrate how to update a record using Update query with the help of DBUtils. We'll update a record in Employees Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
String updateQuery = "UPDATE employees SET age=? WHERE id=?";
int updatedRecords = queryRunner.update(conn, updateQuery, 33,104);
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>updateQuery</b> &minus; Update query having placeholders.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to update employee object in database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run an update query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
  
      DbUtils.loadDriver(JDBC_DRIVER);       
      conn = DriverManager.getConnection(DB_URL, USER, PASS);
      try {
         int updatedRecords = queryRunner.update(conn, 
            "UPDATE employees SET age=? WHERE id=?", 33,104);         
         System.out.println(updatedRecords + " record(s) updated.");
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
1 record(s) updated.
</pre>
<h1>Apache Commons DBUtils - Delete Query</h1>
<p>The following example will demonstrate how to delete a record using Delete query with the help of DBUtils. We'll delete a record in Employees Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
String deleteQuery = "DELETE FROM employees WHERE id=?";
int deletedRecords = queryRunner.delete(conn, deleteQuery, 33,104);
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>deleteQuery</b> &minus; DELETE query having placeholders.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to delete employee object in database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a delete query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
    
      DbUtils.loadDriver(JDBC_DRIVER);       
      conn = DriverManager.getConnection(DB_URL, USER, PASS);
      try {
         int deletedRecords = queryRunner.update(conn, 
            "DELETE from employees WHERE id=?", 104);         
         System.out.println(deletedRecords + " record(s) deleted.");
      } finally {
         DbUtils.close(conn);
      }  
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
1 record(s) deleted.
</pre>
<h1>Commons DBUtils - QueryRunner interface</h1>
<p>The <b>org.apache.commons.dbutils.QueryRunner</b> class is the central class in the DBUtils library. It executes SQL queries with pluggable strategies for handling ResultSets. This class is thread safe.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.QueryRunner class &minus;</p>
<pre class="result notranslate">
public class QueryRunner
   extends AbstractQueryRunner
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Use QueryRunner object methods to make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to read a record using QueryRunner class. We'll read one of the available record in employee Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
ResultSetHandler&lt;Employee&gt; resultHandler = new BeanHandler&lt;Employee&gt;(Employee.class);
Employee emp = 
   queryRunner.query(conn, "SELECT * FROM employees WHERE first=?", resultHandler, "Sumit");
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; ResultSetHandler object to map result set to Employee object.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);

      //Step 3: Create a ResultSet Handler to handle Employee Beans
      ResultSetHandler&lt;Employee&gt; resultHandler = new BeanHandler&lt;Employee&gt;(Employee.class);

      try {
         Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE id=?",
            resultHandler, 103);
         //Display values
         System.out.print("ID: " + emp.getId());
         System.out.print(", Age: " + emp.getAge());
         System.out.print(", First: " + emp.getFirst());
         System.out.println(", Last: " + emp.getLast());
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 103, Age: 28, First: Sumit, Last: Mittal
</pre>
<h1>AsyncQueryRunner interface</h1>
<p>The <b>org.apache.commons.dbutils.AsyncQueryRunner</b> class helps to execute long running SQL queries with async support. This class is thread safe. This class supports same methods as QueryRunner but it return Callable objects which can be used later to retrieve the result.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.AsyncQueryRunner class &minus;</p>
<pre class="result notranslate">
public class AsyncQueryRunner
   extends AbstractQueryRunner
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Use AsyncQueryRunner object methods to make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to update a record using AsyncQueryRunner class. We'll update one of the available record in employee Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
String updateQuery = "UPDATE employees SET age=? WHERE id=?";
future = asyncQueryRunner.update(conn,
            "UPDATE employees SET age=? WHERE id=?", 33,103);
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>updateQuery</b> &minus; Update query having placeholders.</p></li>
<li><p><b>asyncQueryRunner</b> &minus; asyncQueryRunner object to update employee object in database.</p></li>
<li><p><b>future</b> &minus; Future object to retrieve result later.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run an update query in async mode. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.AsyncQueryRunner;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException; 
import java.util.concurrent.ExecutorCompletionService; 
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors; 
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws 
      SQLException, InterruptedException, 
      ExecutionException, TimeoutException {
      Connection conn = null;

      AsyncQueryRunner asyncQueryRunner = new AsyncQueryRunner( Executors.newCachedThreadPool());

      DbUtils.loadDriver(JDBC_DRIVER);       
      conn = DriverManager.getConnection(DB_URL, USER, PASS);
      Future&lt;Integer&gt; future = null;
      try {

         future = asyncQueryRunner.update(conn, 
            "UPDATE employees SET age=? WHERE id=?", 33,103);         

         Integer updatedRecords = future.get(10, TimeUnit.SECONDS);
         System.out.println(updatedRecords + " record(s) updated.");
      } finally {
         DbUtils.close(conn);
      }  
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
1 record(s) updated.
</pre>
<h1>ResultSetHandler interface</h1>
<p>The <b>org.apache.commons.dbutils.ResultSetHandler</b> interface is responsible to convert ResultSets into objects.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.ResultSetHandler class &minus;</p>
<pre class="result notranslate">
public interface ResultSetHandler&lt;T&gt;
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Create implementation of ResultSetHandler.</p></li>
<li><p><b>Step 3</b> &minus; Pass resultSetHandler to QueryRunner object, and make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to map a record using ResultSetHandler class. We'll read one of the available record in Employee Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?", resultHandler, "Sumit");
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; ResultSetHandler object to map result set to Employee object.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Arrays;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);

      //Step 3: Create a ResultSet Handler to handle Employee Beans
      ResultSetHandler&lt;Object[]&gt; handler = new ResultSetHandler&lt;Object[]&gt;() {
         public Object[] handle(ResultSet rs) throws SQLException {
            if (!rs.next()) {
               return null;
            }
            ResultSetMetaData meta = rs.getMetaData();
            int cols = meta.getColumnCount();
            Object[] result = new Object[cols];

            for (int i = 0; i &lt; cols; i++) {
               result[i] = rs.getObject(i + 1);
            }
            return result;
         }
      };

      try {
         Object[] result  = queryRunner.query(conn, "SELECT * FROM employees WHERE id=?",
            handler, 103);
         //Display values
         System.out.print("Result: " + Arrays.toString(result));            
      } finally {
         DbUtils.close(conn);
      }              
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
Connecting to database...
Result: [103, 33, Sumit, Mittal]
</pre>
<h1>Commons DBUtils - BeanHandler Class</h1>
<p>The <b>org.apache.commons.dbutils.BeanHandler</b> is the implementation of ResultSetHandler interface and is responsible to convert the first ResultSet row into a JavaBean. This class is thread safe.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.BeanHandler class &minus;</p>
<pre class="prettyprint notranslate">
public class BeanHandler&lt;T&gt;
   extends Object implements ResultSetHandler&lt;T&gt;
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Get implementation of ResultSetHandler as BeanHandler object.</p></li>
<li><p><b>Step 3</b> &minus; Pass resultSetHandler to QueryRunner object, and make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to read a record using BeanHandler class. We'll read one of the available record in Employees Table and map it to Employee bean.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?", resultHandler, "Sumit");
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; BeanHandler object to map result set to Employee object.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);

      //Step 3: Create a ResultSet Handler to handle Employee Beans
      ResultSetHandler&lt;Employee&gt; resultHandler 
         = new BeanHandler&lt;Employee&gt;(Employee.class);

      try {
         Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?",
               resultHandler, "Sumit");
         //Display values
         System.out.print("ID: " + emp.getId());
         System.out.print(", Age: " + emp.getAge());
         System.out.print(", First: " + emp.getFirst());
         System.out.println(", Last: " + emp.getLast());
      } finally {
         DbUtils.close(conn);
      }              
   }
}
</pre>
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 103, Age: 28, First: Sumit, Last: Mittal
</pre>
<h1>Commons DBUtils - BeanListHandler Class</h1>
<p>The <b>org.apache.commons.dbutils.BeanListHandler</b> is the implementation of ResultSetHandler interface and is responsible to convert the ResultSet rows into list of Java Bean. This class is thread safe.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.BeanListHandler class &minus;</p>
<pre class="prettyprint notranslate">
public class BeanListHandler&lt;T&gt;
   extends Object implements ResultSetHandler&lt;List&lt;T&gt;&gt;
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Get implementation of ResultSetHandler as BeanListHandler object.</p></li>
<li><p><b>Step 3</b> &minus; Pass resultSetHandler to QueryRunner object, and make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to read a list of records using BeanListHandler class. We'll read available records in Employees Table and map them to list of Employee beans.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
List&lt;Employee&gt; empList = queryRunner.query(conn, "SELECT * FROM employees", resultHandler);      
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; BeanListHandler object to map result sets to list of Employee objects.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);

      //Step 3: Create a ResultSet Handler to handle List of Employee Beans
      ResultSetHandler&lt;List&lt;Employee&gt;&gt; resultHandler = new BeanListHandler&lt;Employee&gt;(Employee.class);

      try {
         List&lt;Employee&gt; empList = queryRunner.query(conn, "SELECT * FROM employees", resultHandler);
         for(Employee emp: empList ) {
            
            //Display values
            System.out.print("ID: " + emp.getId());
            System.out.print(", Age: " + emp.getAge());
            System.out.print(", First: " + emp.getFirst());
            System.out.println(", Last: " + emp.getLast());
         }           
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre>
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 100, Age: 18, First: Zara, Last: Ali
ID: 101, Age: 25, First: Mahnaz, Last: Fatma
ID: 102, Age: 30, First: Zaid, Last: Khan
ID: 103, Age: 28, First: Sumit, Last: Mittal
</pre>
<h1>Commons DBUtils - ArrayListHandler Class</h1>
<p>The <b>org.apache.commons.dbutils.ArrayListHandler</b> is the implementation of ResultSetHandler interface and is responsible to convert the ResultSet rows into a object[]. This class is thread safe.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.ArrayListHandler class &minus;</p>
<pre class="prettyprint notranslate">
public class ArrayListHandler
   extends AbstractListHandler&lt;Object[]&gt;
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Get implementation of ResultSetHandler as ArrayListHandler object.</p></li>
<li><p><b>Step 3</b> &minus; Pass resultSetHandler to QueryRunner object, and make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to read a list of records using ArrayListHandler class. We'll read available records in Employees Table as object[].</p>
<h2>Syntax</h2>
<pre class="result notranslate">
List&lt;Object&gt; result = queryRunner.query(conn, "SELECT * FROM employees", new ArrayListHandler());       
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; ArrayListHandler object to map result sets to list of object[].</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.ArrayListHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);        

      try {
         List&lt;Object[]&gt; result = queryRunner.query(conn, "SELECT * FROM employees"
            , new ArrayListHandler());  
         for(Object[] objects : result) {
            System.out.println(Arrays.toString(objects));
         }           
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre>
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
[100, 18, Zara, Ali]
[101, 25, Mahnaz, Fatma]
[102, 30, Zaid, Khan]
[103, 28, Sumit, Mittal]
</pre>
<h1>Commons DBUtils - MapListHandler Class</h1>
<p>The <b>org.apache.commons.dbutils.MapListHandler</b> is the implementation of ResultSetHandler interface and is responsible to convert the ResultSet rows into list of Maps. This class is thread safe.</p>
<h2>Class Declaration</h2>
<p>Following is the declaration for org.apache.commons.dbutils.MapListHandler class &minus;</p>
<pre class="prettyprint notranslate">
public class MapListHandler
   extends AbstractListHandler&lt;Map&lt;String,Object&gt;&gt;
</pre>
<h2>Usage</h2>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create a connection object.</p></li>
<li><p><b>Step 2</b> &minus; Get implementation of ResultSetHandler as MapListHandler object.</p></li>
<li><p><b>Step 3</b> &minus; Pass resultSetHandler to QueryRunner object, and make database operations.</p></li>
</ul>
<h2>Example</h2>
<p>Following example will demonstrate how to read a list of records using MapListHandler class. We'll read available records in Employees Table as list of maps.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
List&lt;Map&lt;String, Object&gt;&gt; result = queryRunner.query(conn, "SELECT * FROM employees", new MapListHandler());
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>resultHandler</b> &minus; MapListHandler object to map result sets to list of maps.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.MapListHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      
      //Step 1: Register JDBC driver
      DbUtils.loadDriver(JDBC_DRIVER);

      //Step 2: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL, USER, PASS);        

      try {
         List&lt;Map&lt;String, Object&gt;&gt; result 
            = queryRunner.query(conn, "SELECT * FROM employees", new MapListHandler());      
         System.out.println(result);
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre>
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
Connecting to database...
[{id=100, age=18, first=Zara, last=Ali}, 
{id=101, age=25, first=Mahnaz, last=Fatma}, 
{id=102, age=30, first=Zaid, last=Khan}, 
{id=103, age=33, first=Sumit, last=Mittal}]
</pre>
<h1>Apache Commons DBUtils - Custom Handler</h1>
<p>We can create our own custom handler by implementing ResultSetHandler interface or by extending any of the existing implementation of ResultSetHandler. In the example given below, we've created a Custom Handler, EmployeeHandler by extending BeanHandler class.</p>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   private String name;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
   public String getName() {
      return name;
   }
   public void setName(String name) {
      this.name = name;
   }
}
</pre>
<p>Following is the content of the <b>EmployeeHandler.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.commons.dbutils.handlers.BeanHandler;

public class EmployeeHandler extends BeanHandler&lt;Employee&gt; {

   public EmployeeHandler() {
      super(Employee.class);
   }

   @Override
   public Employee handle(ResultSet rs) throws SQLException {
      Employee employee = super.handle(rs);
      employee.setName(employee.getFirst() +", " + employee.getLast());
      return employee;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();
      DbUtils.loadDriver(JDBC_DRIVER);                 
      conn = DriverManager.getConnection(DB_URL, USER, PASS);        
      EmployeeHandler employeeHandler = new EmployeeHandler();

      try {
         Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?",
            employeeHandler, "Sumit");
         
         //Display values
         System.out.print("ID: " + emp.getId());
         System.out.print(", Age: " + emp.getAge());
         System.out.print(", Name: " + emp.getName());
      } finally {
         DbUtils.close(conn);
      }        
   }
}
</pre>
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 103, Age: 28, Name: Sumit, Mittal
</pre>
<h1>Commons DBUtils - Custom Row Processor</h1>
<p>In case column names in a database table and equivalent javabean object names are not similar then we can map them by using customized BasicRowProcessor object. See the example below.</p>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   private String name;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
   public String getName() {
      return name;
   }
   public void setName(String name) {
      this.name = name;
   }
}
</pre>
<p>Following is the content of the <b>EmployeeHandler.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.BeanProcessor;
import org.apache.commons.dbutils.BasicRowProcessor;

public class EmployeeHandler extends BeanHandler&lt;Employee&gt; {

   public EmployeeHandler() {
      super(Employee.class, new BasicRowProcessor(new BeanProcessor(mapColumnsToFields())));
   }

   @Override
   public Employee handle(ResultSet rs) throws SQLException {
      Employee employee = super.handle(rs);
      employee.setName(employee.getFirst() +", " + employee.getLast());
      return employee;
   }
   
   public static Map&lt;String, String&gt; mapColumnsToFields() {
      Map&lt;String, String&gt; columnsToFieldsMap = new HashMap&lt;&gt;();
      columnsToFieldsMap.put("ID", "id");
      columnsToFieldsMap.put("AGE", "age");        
      return columnsToFieldsMap;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;

public class MainApp {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";

   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";

   public static void main(String[] args) throws SQLException {
      Connection conn = null;
      QueryRunner queryRunner = new QueryRunner();      
      DbUtils.loadDriver(JDBC_DRIVER);                 
      conn = DriverManager.getConnection(DB_URL, USER, PASS);        
      EmployeeHandler employeeHandler = new EmployeeHandler();

      try {
         Employee emp = queryRunner.query(conn, "SELECT * FROM employees WHERE first=?",
           employeeHandler, "Sumit");
         
         //Display values
         System.out.print("ID: " + emp.getId());
         System.out.print(", Age: " + emp.getAge());
         System.out.print(", Name: " + emp.getName());
      } finally {
         DbUtils.close(conn);
      }              
   }
}
</pre>
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 103, Age: 28, Name: Sumit, Mittal
</pre>
<h1>Commons DBUtils - Using DataSource</h1>
<p>So far, we've using connection object while using QueryRunner. We can also use datasource seemlessly. The following example will demonstrate how to read a record using Read query with the help of QueryRunner and datasource. We'll read a record from Employees Table.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
QueryRunner queryRunner = new QueryRunner( dataSource );
Employee emp = queryRunner.query("SELECT * FROM employees WHERE first=?", resultHandler, "Sumit");
</pre>
<p>Where,</p>
<ul class="list">
<li><p><b>dataSource</b> &minus; DataSource object configured.</p></li>
<li><p><b>resultHandler</b> &minus; ResultSetHandler object to map result set to Employee object.</p></li>
<li><p><b>queryRunner</b> &minus; QueryRunner object to read employee object from database.</p></li>
</ul>
<p>To understand the above-mentioned concepts related to DBUtils, let us write an example which will run a read query. To write our example, let us create a sample application.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Update the file <i>MainApp.java</i> created under chapter <a href="/dbutils/dbutils_first_application.htm">DBUtils - First Application</a>.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Compile and run the application as explained below.</td>
</tr>
</table>
<p>Following is the content of the <b>Employee.java</b>.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private int age;
   private String first;
   private String last;
   public int getId() {
      return id;
   }
   public void setId(int id) {
      this.id = id;
   }
   public int getAge() {
      return age;
   }
   public void setAge(int age) {
      this.age = age;
   }
   public String getFirst() {
      return first;
   }
   public void setFirst(String first) {
      this.first = first;
   }
   public String getLast() {
      return last;
   }
   public void setLast(String last) {
      this.last = last;
   }
}
</pre>
<p>Following is the content of the <b>CustomDatasource.java</b>.</p>
<pre class="prettyprint notranslate">
import javax.sql.DataSource;
import org.apache.commons.dbcp2.BasicDataSource;

public class CustomDataSource {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost:3306/emp";
   
   //  Database credentials
   static final String USER = "root";
   static final String PASS = "admin";
   private static DataSource datasource;
   private static final BasicDataSource basicDataSource;

   static {
      basicDataSource = new BasicDataSource();
      basicDataSource.setDriverClassName(JDBC_DRIVER);
      basicDataSource.setUsername(USER);
      basicDataSource.setPassword(PASS);
      basicDataSource.setUrl(DB_URL);
   }

   public static DataSource getInstance() {
      return basicDataSource;
   }
}
</pre>
<p>Following is the content of the <b>MainApp.java</b> file.</p>
<pre class="prettyprint notranslate">
import java.sql.SQLException;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;

public class MainApp {
   public static void main(String[] args) throws SQLException {    
      
      DbUtils.loadDriver(JDBC_DRIVER);
      QueryRunner run = new QueryRunner(CustomDataSource.getInstance());
      ResultSetHandler&lt;Employee&gt; resultHandler = new BeanHandler&lt;Employee&gt;(Employee.class);

      Employee emp = queryRunner.query("SELECT * FROM employees WHERE id=?",
         resultHandler, 103);
      
      //Display values
      System.out.print("ID: " + emp.getId());
      System.out.print(", Age: " + emp.getAge());
      System.out.print(", First: " + emp.getFirst());
      System.out.println(", Last: " + emp.getLast());
   }
}
</pre> 
<p>Once you are done creating the source files, let us run the application. If everything is fine with your application, it will print the following message.</p>
<pre class="result notranslate">
ID: 103, Age: 33, First: Sumit, Last: Mittal
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/dbutils/dbutils_using_datasource.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/dbutils/dbutils_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
