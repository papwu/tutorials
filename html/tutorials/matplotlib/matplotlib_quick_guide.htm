<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Matplotlib - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Matplotlib - Quick Guide - Matplotlib is one of the most popular Python packages used for data visualization. It is a cross-platform library for making 2D plots from data in arrays. Matpl"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/matplotlib/matplotlib_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#ff7f2b;
}
a.demo {
    background:#ff7f2b;
}
li.heading {
    background:#ff7f2b;
}
.course-box{background:#ff7f2b}
.home-intro-sub p{color:#ff7f2b}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/matplotlib/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/matplotlib/images/matplotlib-mini-logo.jpg" alt="Matplotlib Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Matplotlib Tutorial</li>
<li><a href="/matplotlib/index.htm">Matplotlib - Home</a></li>
<li><a href="/matplotlib/matplotlib_introduction.htm">Matplotlib - Introduction</a></li>
<li><a href="/matplotlib/matplotlib_environment_setup.htm">Matplotlib - Environment Setup</a></li>
<li><a href="/matplotlib/matplotlib_anaconda_distribution.htm">Matplotlib - Anaconda distribution</a></li>
<li><a href="/matplotlib/matplotlib_jupyter_notebook.htm">Matplotlib - Jupyter Notebook</a></li>
<li><a href="/matplotlib/matplotlib_pyplot_api.htm">Matplotlib - Pyplot API</a></li>
<li><a href="/matplotlib/matplotlib_simple_plot.htm">Matplotlib - Simple Plot</a></li>
<li><a href="/matplotlib/matplotlib_pylab_module.htm">Matplotlib - PyLab module</a></li>
<li><a href="/matplotlib/matplotlib_object_oriented_interface.htm">Object-oriented Interface</a></li>
<li><a href="/matplotlib/matplotlib_figure_class.htm">Matplotlib - Figure Class</a></li>
<li><a href="/matplotlib/matplotlib_axes_class.htm">Matplotlib - Axes Class</a></li>
<li><a href="/matplotlib/matplotlib_multiplots.htm">Matplotlib - Multiplots</a></li>
<li><a href="/matplotlib/matplotlib_subplots_function.htm">Matplotlib - Subplots() Function</a></li>
<li><a href="/matplotlib/matplotlib_subplot2grid_function.htm">Matplotlib - Subplot2grid() Function</a></li>
<li><a href="/matplotlib/matplotlib_grids.htm">Matplotlib - Grids</a></li>
<li><a href="/matplotlib/matplotlib_formatting_axes.htm">Matplotlib - Formatting Axes</a></li>
<li><a href="/matplotlib/matplotlib_setting_limits.htm">Matplotlib - Setting Limits</a></li>
<li><a href="/matplotlib/matplotlib_setting_ticks_and_tick_labels.htm">Setting Ticks and Tick Labels</a></li>
<li><a href="/matplotlib/matplotlib_twin_axes.htm">Matplotlib - Twin Axes</a></li>
<li><a href="/matplotlib/matplotlib_bar_plot.htm">Matplotlib - Bar Plot</a></li>
<li><a href="/matplotlib/matplotlib_histogram.htm">Matplotlib - Histogram</a></li>
<li><a href="/matplotlib/matplotlib_pie_chart.htm">Matplotlib - Pie Chart</a></li>
<li><a href="/matplotlib/matplotlib_scatter_plot.htm">Matplotlib - Scatter Plot</a></li>
<li><a href="/matplotlib/matplotlib_contour_plot.htm">Matplotlib - Contour Plot</a></li>
<li><a href="/matplotlib/matplotlib_quiver_plot.htm">Matplotlib - Quiver Plot</a></li>
<li><a href="/matplotlib/matplotlib_box_plot.htm">Matplotlib - Box Plot</a></li>
<li><a href="/matplotlib/matplotlib_violin_plot.htm">Matplotlib - Violin Plot</a></li>
<li><a href="/matplotlib/matplotlib_three_dimensional_plotting.htm">Three-dimensional Plotting</a></li>
<li><a href="/matplotlib/matplotlib_3d_contour_plot.htm">Matplotlib - 3D Contour Plot</a></li>
<li><a href="/matplotlib/matplotlib_3d_wireframe_plot.htm">Matplotlib - 3D Wireframe plot</a></li>
<li><a href="/matplotlib/matplotlib_3d_surface_plot.htm">Matplotlib - 3D Surface plot</a></li>
<li><a href="/matplotlib/matplotlib_working_with_text.htm">Matplotlib - Working With Text</a></li>
<li><a href="/matplotlib/matplotlib_mathematical_expressions.htm">Mathematical Expressions</a></li>
<li><a href="/matplotlib/matplotlib_working_with_images.htm">Matplotlib - Working with Images</a></li>
<li><a href="/matplotlib/matplotlib_transforms.htm">Matplotlib - Transforms</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Matplotlib Useful Resources</li>
<li><a href="/matplotlib/matplotlib_quick_guide.htm">Matplotlib - Quick Guide</a></li>
<li><a href="/matplotlib/matplotlib_useful_resources.htm">Matplotlib - Useful Resources</a></li>
<li><a href="/matplotlib/matplotlib_discussion.htm">Matplotlib - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Matplotlib - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/matplotlib/matplotlib_transforms.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/matplotlib/matplotlib_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Matplotlib - Introduction</h1>
<p>Matplotlib is one of the most popular Python packages used for data visualization. It is a cross-platform library for making 2D plots from data in arrays. Matplotlib is written in Python and makes use of NumPy, the numerical mathematics extension of Python. It provides an object-oriented API that helps in embedding plots in applications using Python GUI toolkits such as PyQt, WxPythonotTkinter. It can be used in Python and IPython shells, Jupyter notebook and web application servers also.</p>
<p>Matplotlib has a procedural interface named the Pylab, which is designed to resemble MATLAB, a proprietary programming language developed by MathWorks. Matplotlib along with NumPy can be considered as the open source equivalent of MATLAB.</p>
<p>Matplotlib was originally written by John D. Hunter in 2003. The current stable version is 2.2.0 released in January 2018.</p>
<h1>Matplotlib - Environment Setup</h1>
<p>Matplotlib and its dependency packages are available in the form of wheel packages on the standard Python package repositories and can be installed on Windows, Linux as well as MacOS systems using the pip package manager.</p>
<pre class="result notranslate">
pip3 install matplotlib
</pre>
<p>Incase Python 2.7 or 3.4 versions are not installed for all users, the Microsoft Visual C++ 2008 (64 bit or 32 bit forPython 2.7) or Microsoft Visual C++ 2010 (64 bit or 32 bit for Python 3.4) redistributable packages need to be installed.</p>
<p>If you are using Python 2.7 on a Mac, execute the following command &minus;</p>
<pre class="prettyprint notranslate">
xcode-select –install
</pre>
<p>Upon execution of the above command, the subprocess32 - a dependency, may be compiled.</p>
<p>On extremely old versions of Linux and Python 2.7, you may need to install the master version of subprocess32.</p>
<p>Matplotlib requires a large number of dependencies &minus;</p>
<ul class="list">
<li>Python (&gt;= 2.7 or &gt;= 3.4)</li>
<li>NumPy</li>
<li>setuptools</li>
<li>dateutil</li>
<li>pyparsing</li>
<li>libpng</li>
<li>pytz</li>
<li>FreeType</li>
<li>cycler</li>
<li>six</li>
</ul>
<p>Optionally, you can also install a number of packages to enable better user interface toolkits.</p>
<ul class="list">
<li>tk</li>
<li>PyQt4</li>
<li>PyQt5</li>
<li>pygtk</li>
<li>wxpython</li>
<li>pycairo</li>
<li>Tornado</li>
</ul>
<p>For better support of animation output format and image file formats, LaTeX, etc., you can install the following &minus;</p>
<ul class="list">
<li>_mpeg/avconv</li>
<li>ImageMagick</li>
<li>Pillow (&gt;=2.0)</li>
<li>LaTeX and GhostScript (for rendering text with LaTeX).</li>
<li>LaTeX and GhostScript (for rendering text with LaTeX).</li>
</ul>
<h1>Matplotlib - Anaconda distribution</h1>
<p>Anaconda is a free and open source distribution of the Python and R programming languages for large-scale data processing, predictive analytics, and scientific computing. The distribution makes package management and deployment simple and easy. Matplotlib and <i>lots</i> of other useful (data) science tools form part of the distribution. Package versions are managed by the package management system Conda. The advantage of Anaconda is that you have access to over 720 packages that can easily be installed with Anaconda's Conda, a package, dependency, and environment manager.</p>
<p>Anaconda distribution is available for installation at <a target="_blank" rel="nofollow" href="https://www.anaconda.com/download/">https://www.anaconda.com/download/.</a> For installation on Windows, 32 and 64 bit binaries are available &minus;</p>
<p><a target="_blank" rel="nofollow" href="https://repo.continuum.io/archive/Anaconda3-5.1.0-Windows-x86.exe">https://repo.continuum.io/archive/Anaconda3-5.1.0-Windows-x86.exe</a></p>
<p><a target="_blank" rel="nofollow" href="https://repo.continuum.io/archive/Anaconda3-5.1.0-Windows-x86_64.exe">https://repo.continuum.io/archive/Anaconda3-5.1.0-Windows-x86_64.exe</a></p>
<p>Installation is a fairly straightforward wizard based process. You can choose between adding Anaconda in PATH variable and registering Anaconda as your default Python.</p>
<p>For installation on Linux, download installers for 32 bit and 64 bit installers from the downloads page &minus;</p>
<p><a target="_blank" rel="nofollow" href="https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86.sh">https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86.sh</a></p>
<p><a target="_blank" rel="nofollow" href="https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh">https://repo.continuum.io/archive/Anaconda3-5.1.0-Linux-x86_64.sh</a></p>
<p>Now, run the following command from the Linux terminal &minus;</p>
<pre class="result notranslate">
$ bash Anaconda3-5.0.1-Linux-x86_64.sh
</pre>
<p>Canopy and ActiveState are the most sought after choices for Windows, macOS and common Linux platforms. The Windows users can find an option in WinPython.</p>
<h1>Matplotlib - Jupyter Notebook</h1>
<p>Jupyter is a loose acronym meaning Julia, Python, and R. These programming languages were the first target languages of the Jupyter application, but nowadays, the notebook technology also supports many other languages.</p>
<p>In 2001, Fernando Pérez started developing Ipython. <b>IPython</b> is a command shell for interactive computing in multiple programming languages, originally developed for the Python.</p>
<p>Consider the following features provided by IPython &minus;</p>
<ul class="list">
<li><p>Interactive shells (terminal and Qt-based).</p></li>
<li><p>A browser-based notebook with support for code, text, mathematical expressions, inline plots and other media.</p></li>
<li><p>Support for interactive data visualization and use of GUI toolkits.</p></li>
<li><p>Flexible, embeddable interpreters to load into one's own projects.</p></li>
</ul>
<p>In 2014, Fernando Pérez announced a spin-off project from IPython called Project Jupyter. IPython will continue to exist as a Python shell and a kernel for Jupyter, while the notebook and other language-agnostic parts of IPython will move under the Jupyter name. Jupyter added support for Julia, R, Haskell and Ruby.</p>
<p>To start the Jupyter notebook, open Anaconda navigator (a desktop graphical user interface included in Anaconda that allows you to launch applications and easily manage Conda packages, environments and channels without the need to use command line commands).</p>
<img src="/matplotlib/images/anaconda_navigator.jpg" alt="Anaconda Navigator" />
<p>Navigator displays the installed components in the distribution.</p>
<img src="/matplotlib/images/anaconda_navigator_root.jpg" alt="Anaconda Navigator Root" />
<p>Launch Jupyter Notebook from the Navigator &minus;</p>
<img src="/matplotlib/images/jupyter_notebook.jpg" alt="Jupyter Notebook" />
<p>You will see the application opening in the web browser on the following address &minus; <b>http://localhost:8888.</b></p>
<img src="/matplotlib/images/command_prompt.jpg" alt="Command Prompt" />
<p>You probably want to start by making a new notebook. You can easily do this by clicking on the "New button" in the "Files tab". You see that you have the option to make a regular text file, a folder, and a terminal. Lastly, you will also see the option to make a Python 3 notebook.</p>
<img src="/matplotlib/images/python_3_notebook.jpg" alt="Python 3 Notebook" />
<h1>Matplotlib - Pyplot API</h1>
<p>A new untitled notebook with the <b>.ipynb</b>extension (stands for the IPython notebook) is displayed in the new tab of the browser.</p>
<img src="/matplotlib/images/pyplot_api.jpg" alt="Pyplot API" />
<p><b>matplotlib.pyplot</b> is a collection of command style functions that make Matplotlib work like MATLAB. Each Pyplot function makes some change to a figure. For example, a function creates a figure, a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc.</p>
<h2>Types of Plots</h2>
<table class="table table-bordered">
<tr>
<th class="ts" width="10%">Sr.No</th>
<th class="ts">Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Bar</b></p>
<p>Make a bar plot.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Barh</b></p>
<p>Make a horizontal bar plot.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Boxplot</b></p>
<p>Make a box and whisker plot.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Hist</b></p>
<p>Plot a histogram.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>hist2d</b></p>
<p>Make a 2D histogram plot.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Pie</b></p>
<p>Plot a pie chart.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Plot</b></p>
<p>Plot lines and/or markers to the Axes.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Polar</b></p>
<p>Make a polar plot..</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>Scatter</b></p>
<p>Make a scatter plot of x vs y.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>Stackplot</b></p>
<p>Draws a stacked area plot.</p>
</td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>Stem</b></p>
<p>Create a stem plot.</p>
</td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>Step</b></p>
<p>Make a step plot.</p>
</td>
</tr>
<tr>
<td class="ts">13</td>
<td>
<p><b>Quiver</b></p>
<p>Plot a 2-D field of arrows.</p>
</td>
</tr>
</table>
<h2>Image Functions</h2>
<table class="table table-bordered">
<tr>
<th class="ts" width="10%">Sr.No</th>
<th class="ts">Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Imread</b></p>
<p>Read an image from a file into an array.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Imsave</b></p>
<p>Save an array as in image file.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Imshow</b></p>
<p>Display an image on the axes.</p>
</td>
</tr>
</table>
<h2>Axis Functions</h2>
<table class="table table-bordered">
<tr>
<th class="ts" width="10%">Sr.No</th>
<th class="ts">Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Axes</b></p>
<p>Add axes to the figure.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Text</b></p>
<p>Add text to the axes.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Title</b></p>
<p>Set a title of the current axes.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Xlabel</b></p>
<p>Set the x axis label of the current axis.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Xlim</b></p>
<p>Get or set the x limits of the current axes.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Xscale</b></p>
<p>.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Xticks</b></p>
<p>Get or set the x-limits of the current tick locations and labels.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>Ylabel</b></p>
<p>Set the y axis label of the current axis.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>Ylim</b></p>
<p>Get or set the y-limits of the current axes.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>Yscale</b></p>
<p>Set the scaling of the y-axis.</p>
</td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>Yticks</b></p>
<p>Get or set the y-limits of the current tick locations and labels.</p>
</td>
</tr>
</table>
<h2>Figure Functions</h2>
<table class="table table-bordered">
<tr>
<th class="ts" width="10%">Sr.No</th>
<th class="ts">Function &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Figtext</b></p>
<p>Add text to figure.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Figure</b></p>
<p>Creates a new figure.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Show</b></p>
<p>Display a figure.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Savefig</b></p>
<p>Save the current figure.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Close</b></p>
<p>Close a figure window.</p>
</td>
</tr>
</table>
<h1>Matplotlib - Simple Plot</h1>
<p>In this chapter, we will learn how to create a simple plot with Matplotlib.</p>
<p>We shall now display a simple line plot of angle in radians vs. its sine value in Matplotlib. To begin with, the Pyplot module from Matplotlib package is imported, with an alias plt as a matter of convention.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
</pre>
<p>Next we need an array of numbers to plot. Various array functions are defined in the NumPy library which is imported with the np alias.</p>
<pre class="prettyprint notranslate">
import numpy as np
</pre>
<p>We now obtain the ndarray object of angles between 0 and 2π using the arange() function from the NumPy library.</p>
<pre class="prettyprint notranslate">
x = np.arange(0, math.pi*2, 0.05)
</pre>
<p>The ndarray object serves as values on x axis of the graph. The corresponding sine values of angles in x to be displayed on y axis are obtained by the following statement &minus;</p>
<pre class="prettyprint notranslate">
y = np.sin(x)
</pre>
<p>The values from two arrays are plotted using the plot() function.</p>
<pre class="prettyprint notranslate">
plt.plot(x,y)
</pre>
<p>You can set the plot title, and labels for x and y axes.</p>
<pre class="prettyprint notranslate">
You can set the plot title, and labels for x and y axes.
plt.xlabel("angle")
plt.ylabel("sine")
plt.title('sine wave')
</pre>
<p>The Plot viewer window is invoked by the show() function &minus;</p>
<pre class="prettyprint notranslate">
plt.show()
</pre>
<p>The complete program is as follows &minus;</p>
<pre class="prettyprint notranslate">
from matplotlib import pyplot as plt
import numpy as np
import math #needed for definition of pi
x = np.arange(0, math.pi*2, 0.05)
y = np.sin(x)
plt.plot(x,y)
plt.xlabel("angle")
plt.ylabel("sine")
plt.title('sine wave')
plt.show()
</pre>
<p>When the above line of code is executed, the following graph is displayed &minus;</p>
<img src="/matplotlib/images/simple_plot.jpg" alt="Simple Plot" />
<p>Now, use the Jupyter notebook with Matplotlib.</p>
<p>Launch the Jupyter notebook from Anaconda navigator or command line as described earlier. In the input cell, enter import statements for Pyplot and NumPy &minus;</p>
<pre class="prettyprint notranslate">
from matplotlib import pyplot as plt
import numpy as np
</pre>
<p>To display plot outputs inside the notebook itself (and not in the separate viewer), enter the following magic statement &minus;</p>
<pre class="prettyprint notranslate">
%matplotlib inline
</pre>
<p>Obtain x as the ndarray object containing angles in radians between 0 to 2π, and y as sine value of each angle &minus;</p>
<pre class="prettyprint notranslate">
import math
x = np.arange(0, math.pi*2, 0.05)
y = np.sin(x)
</pre>
<p>Set labels for x and y axes as well as the plot title &minus;</p>
<pre class="prettyprint notranslate">
plt.xlabel("angle")
plt.ylabel("sine")
plt.title('sine wave')
</pre>
<p>Finally execute the plot() function to generate the sine wave display in the notebook (no need to run the show() function) &minus;</p>
<pre class="prettyprint notranslate">
plt.plot(x,y)
</pre>
<p>After the execution of the final line of code, the following output is displayed &minus;</p>
<img src="/matplotlib/images/final_line_of_code.jpg" alt="Final Line of Code" />
<h1>Matplotlib - PyLab module</h1>
<p>PyLab is a procedural interface to the Matplotlib object-oriented plotting library. Matplotlib is the whole package; matplotlib.pyplot is a module in Matplotlib; and PyLab is a module that gets installed alongside Matplotlib.</p>
<p>PyLab is a convenience module that bulk imports matplotlib.pyplot (for plotting) and NumPy (for Mathematics and working with arrays) in a single name space. Although many examples use PyLab, it is no longer recommended.</p>
<h2>Basic Plotting</h2>
<p>Plotting curves is done with the plot command. It takes a pair of same-length arrays (or sequences) &minus;</p>
<pre class="prettyprint notranslate">
from numpy import *
from pylab import *
x = linspace(-3, 3, 30)
y = x**2
plot(x, y)
show()
</pre>
<p>The above line of code generates the following output &minus;</p>
<img src="/matplotlib/images/basic_plotting.jpg" alt="Basic Plotting" />
<p>To plot symbols rather than lines, provide an additional string argument.</p>
<table class="table table-bordered">
<tr>
<td>symbols</td>
<td>- , –, -., , . , , , o , ^ , v , < , > , s , + , x , D , d , 1 , 2 , 3 , 4 , h , H , p , | , _</td>
</tr>
<tr>
<td>colors</td>
<td>b, g, r, c, m, y, k, w</td>
</tr>
</table>
<p>Now, consider executing the following code &minus;</p>
<pre class="prettyprint notranslate">
from pylab import *
x = linspace(-3, 3, 30)
y = x**2
plot(x, y, 'r.')
show()
</pre>
<p>It plots the red dots as shown below &minus;</p>
<img src="/matplotlib/images/additional_string_argument.jpg" alt="Additional String Argument" />
<p>Plots can be overlaid. Just use the multiple plot commands. Use clf() to clear the plot.</p>
<pre class="prettyprint notranslate">
from pylab import *
plot(x, sin(x))
plot(x, cos(x), 'r-')
plot(x, -sin(x), 'g--')
show()
</pre>
<p>The above line of code generates the following output &minus;</p>
<img src="/matplotlib/images/multiple_plot_commands.jpg" alt="Multiple Plot Commands" />
<h1>Matplotlib - Object-oriented Interface</h1>
<p>While it is easy to quickly generate plots with the <b>matplotlib.pyplot</b> module, the use of object-oriented approach is recommended as it gives more control and customization of your plots. Most of the functions are also available in the 
<b>matplotlib.axes.Axes</b> class.</p>
<p>The main idea behind using the more formal object-oriented method is to create figure objects and then just call methods or attributes off of that object. This approach helps better in dealing with a canvas that has multiple plots on it.</p>
<p>In object-oriented interface, Pyplot is used only for a few functions such as figure creation, and the user explicitly creates and keeps track of the figure and axes objects. At this level, the user uses Pyplot to create figures, and through those figures, one or more axes objects can be created. These axes objects are then used for most plotting actions.</p>
<p>To begin with, we create a figure instance which provides an empty canvas.</p>
<pre class="prettyprint notranslate">
fig = plt.figure()
</pre>
<p>Now add axes to figure. The <b>add_axes()</b> method requires a list object of 4 elements corresponding to left, bottom, width and height of the figure. Each number must be between 0 and 1 &minus;</p>
<pre class="prettyprint notranslate">
ax=fig.add_axes([0,0,1,1])
</pre>
<p>Set labels for x and y axis as well as title &minus;</p>
<pre class="prettyprint notranslate">
ax.set_title("sine wave")
ax.set_xlabel('angle')
ax.set_ylabel('sine')
</pre>
<p>Invoke the plot() method of the axes object.</p>
<pre class="prettyprint notranslate">
ax.plot(x,y)
</pre>
<p>If you are using Jupyter notebook, the %matplotlib inline directive has to be issued; the otherwistshow() function of pyplot module displays the plot.</p>
<p>Consider executing the following code &minus;</p>
<pre class="prettyprint notranslate">
from matplotlib import pyplot as plt
import numpy as np
import math
x = np.arange(0, math.pi*2, 0.05)
y = np.sin(x)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.plot(x,y)
ax.set_title("sine wave")
ax.set_xlabel('angle')
ax.set_ylabel('sine')
plt.show()
</pre>
<h3>Output</h3>
<p>The above line of code generates the following output &minus;</p>
<img src="/matplotlib/images/add_axes_method.jpg" alt="Add Axes Method" />
<p>The same code when run in Jupyter notebook shows the output as shown below &minus;</p>
<img src="/matplotlib/images/jupyter_notebook_output.jpg" alt="Jupyter Notebook Output" />
<h1>Matplotlib - Figure Class</h1>
<p>The <b>matplotlib.figure</b> module contains the Figure class. It is a top-level container for all plot elements. The Figure object is instantiated by calling the <b>figure()</b> function from the pyplot module &minus;</p>
<pre class="prettyprint notranslate">
fig = plt.figure()
</pre>
<p>The following table shows the additional parameters &minus;</p>
<table class="table table-bordered">
<tr>
<td>Figsize</td>
<td>(width,height) tuple in inches</td>
</tr>
<tr>
<td>Dpi</td>
<td>Dots per inches</td>
</tr>
<tr>
<td>Facecolor</td>
<td>Figure patch facecolor</td>
</tr>
<tr>
<td>Edgecolor</td>
<td>Figure patch edge color</td>
</tr>
<tr>
<td>Linewidth</td>
<td>Edge line width</td>
</tr>
</table>
<h1>Matplotlib - Axes Class</h1>
<p>Axes object is the region of the image with the data space. A given figure can contain many Axes, but a given Axes object can only be in one Figure. The Axes contains two (or three in the case of 3D) Axis objects. The Axes class and its member functions are the primary entry point to working with the OO interface.</p>
<p>Axes object is added to figure by calling the add_axes() method. It returns the axes object and adds an axes at position rect [left, bottom, width, height] where all quantities are in fractions of figure width and height.</p>
<h2>Parameter</h2>
<p>Following is the parameter for the Axes class &minus;</p>
<ul class="list">
<li><p>rect &minus; A 4-length sequence of [left, bottom, width, height] quantities.</p></li>
</ul>
<pre class="prettyprint notranslate">
ax=fig.add_axes([0,0,1,1])
</pre>
<p>The following member functions of axes class add different elements to plot &minus;</p>
<h2>Legend</h2>
<p>The <b>legend()</b> method of axes class adds a legend to the plot figure. It takes three parameters &minus;</p>
<pre class="prettyprint notranslate">
ax.legend(handles, labels, loc)
</pre>
<p>Where labels is a sequence of strings and handles a sequence of Line2D or Patch instances. loc can be a string or an integer specifying the legend location.</p>
<table style="width:50%; margin:auto" class="table table-bordered">
<tr>
<th>Location string</th>
<th>Location code</th>
</tr>
<tr>
<td>Best</td>
<td>0</td>
</tr>
<tr>
<td>upper right</td>
<td>1</td>
</tr>
<tr>
<td>upper left</td>
<td>2</td>
</tr>
<tr>
<td>lower left</td>
<td>3</td>
</tr>
<tr>
<td>lower right</td>
<td>4</td>
</tr>
<tr>
<td>Right</td>
<td>5</td>
</tr>
<tr>
<td>Center left</td>
<td>6</td>
</tr>
<tr>
<td>Center right</td>
<td>7</td>
</tr>
<tr>
<td>lower center</td>
<td>8</td>
</tr>
<tr>
<td>upper center</td>
<td>9</td>
</tr>
<tr>
<td>Center</td>
<td>10</td>
</tr>
</table>
<h2>axes.plot()</h2>
<p>This is the basic method of axes class that plots values of one array versus another as lines or markers. The plot() method can have an optional format string argument to specify color, style and size of line and marker.</p>
<h2>Color codes</h2>
<table style="width:50%; margin:auto" class="table table-bordered">
<tr>
<th>Character</th>
<th>Color</th>
</tr>
<tr>
<td>‘b’</td>
<td>Blue</td>
</tr>
<tr>
<td>‘g’</td>
<td>Green</td>
</tr>
<tr>
<td>‘r’</td>
<td>Red</td>
</tr>
<tr>
<td>‘b’</td>
<td>Blue</td>
</tr>
<tr>
<td>‘c’</td>
<td>Cyan</td>
</tr>
<tr>
<td>‘m’</td>
<td>Magenta</td>
</tr>
<tr>
<td>‘y’</td>
<td>Yellow</td>
</tr>
<tr>
<td>‘k’</td>
<td>Black</td>
</tr>
<tr>
<td>‘b’</td>
<td>Blue</td>
</tr>
<tr>
<td>‘w’</td>
<td>White</td>
</tr>
</table>
<h2>Marker codes</h2>
<table style="width:50%; margin:auto" class="table table-bordered">
<tr>
<th>Character</th>
<th>Description</th>
</tr>
<tr>
<td>‘.’</td>
<td>Point marker</td>
</tr>
<tr>
<td>‘o’</td>
<td>Circle marker</td>
</tr>
<tr>
<td>‘x’</td>
<td>X marker</td>
</tr>
<tr>
<td>‘D’</td>
<td>Diamond marker</td>
</tr>
<tr>
<td>‘H’</td>
<td>Hexagon marker</td>
</tr>
<tr>
<td>‘s’</td>
<td>Square marker</td>
</tr>
<tr>
<td>‘+’</td>
<td>Plus marker</td>
</tr>
</table>
<h2>Line styles</h2>
<table style="width:50%; margin:auto" class="table table-bordered">
<tr>
<th>Character</th>
<th>Description</th>
</tr>
<tr>
<td>‘-‘</td>
<td>Solid line</td>
</tr>
<tr>
<td>‘—‘</td>
<td>Dashed line</td>
</tr>
<tr>
<td>‘-.’</td>
<td>Dash-dot line</td>
</tr>
<tr>
<td>‘:’</td>
<td>Dotted line</td>
</tr>
<tr>
<td>‘H’</td>
<td>Hexagon marker</td>
</tr>
</table>
<p>Following example shows the advertisement expenses and sales figures of TV and smartphone in the form of line plots. Line representing TV is a solid line with yellow colour and square markers whereas smartphone line is a dashed line with green colour and circle marker.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
y = [1, 4, 9, 16, 25,36,49, 64]
x1 = [1, 16, 30, 42,55, 68, 77,88]
x2 = [1,6,12,18,28, 40, 52, 65]
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
l1 = ax.plot(x1,y,'ys-') # solid line with yellow colour and square marker
l2 = ax.plot(x2,y,'go--') # dash line with green colour and circle marker
ax.legend(labels = ('tv', 'Smartphone'), loc = 'lower right') # legend placed at lower right
ax.set_title("Advertisement effect on sales")
ax.set_xlabel('medium')
ax.set_ylabel('sales')
plt.show()
</pre>
<p>When the above line of code is executed, it produces the following plot &minus;</p>
<img src="/matplotlib/images/advertisement_effect.jpg" alt="Advertisement Effect" />
<h1>Matplotlib - Multiplots</h1>
<p>In this chapter, we will learn how to create multiple subplots on same canvas.</p>
<p>The <b>subplot()</b> function returns the axes object at a given grid position. The Call signature of this function is &minus;</p>
<pre class="prettyprint notranslate">
plt.subplot(subplot(nrows, ncols, index)
</pre>
<p>In the current figure, the function creates and returns an Axes object, at position index of a grid of nrows by ncolsaxes. Indexes go from 1 to nrows * ncols, incrementing in row-major order.Ifnrows, ncols and index are all less than 10. The indexes can also be given as single, concatenated, threedigitnumber.</p>
<p>For example, subplot(2, 3, 3) and subplot(233) both create an Axes at the top right corner of the current figure, occupying half of the figure height and a third of the figure width.</p>
<p>Creating a subplot will delete any pre-existing subplot that overlaps with it beyond sharing a boundary.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
# plot a line, implicitly creating a subplot(111)
plt.plot([1,2,3])
# now create a subplot which represents the top plot of a grid with 2 rows and 1 column.
#Since this subplot will overlap the first, the plot (and its axes) previously 
created, will be removed
plt.subplot(211)
plt.plot(range(12))
plt.subplot(212, facecolor='y') # creates 2nd subplot with yellow background
plt.plot(range(12))
</pre>
<p>The above line of code generates the following output &minus;</p>
<img src="/matplotlib/images/mutliplots.jpg" alt="Multiplots" />
<p>The add_subplot() function of the figure class will not overwrite the existing plot &minus;</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig = plt.figure()
ax1 = fig.add_subplot(111)
ax1.plot([1,2,3])
ax2 = fig.add_subplot(221, facecolor='y')
ax2.plot([1,2,3])
</pre>
<p>When the above line of code is executed, it generates the following output &minus;</p>
<img src="/matplotlib/images/add_subplot_function.jpg" alt="Add Spot Function" />
<p>You can add an insert plot in the same figure by adding another axes object in the same figure canvas.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import numpy as np
import math
x = np.arange(0, math.pi*2, 0.05)
fig=plt.figure()
axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes
axes2 = fig.add_axes([0.55, 0.55, 0.3, 0.3]) # inset axes
y = np.sin(x)
axes1.plot(x, y, 'b')
axes2.plot(x,np.cos(x),'r')
axes1.set_title('sine')
axes2.set_title("cosine")
plt.show()
</pre>
<p>Upon execution of the above line of code, the following output is generated &minus;</p>
<img src="/matplotlib/images/insert_plot.jpg" alt="Insert Plot" />
<h1>Matplotlib - Subplots() Function</h1>
<p>Matplotlib’spyplot API has a convenience function called subplots() which acts as a utility wrapper and helps in creating common layouts of subplots, including the enclosing figure object, in a single call.</p>
<pre class="result notranslate">
Plt.subplots(nrows, ncols)
</pre>
<p>The two integer arguments to this function specify the number of rows and columns of the subplot grid. The function returns a figure object and a tuple containing axes objects equal to nrows*ncols. Each axes object is accessible by its index. Here we create a subplot of 2 rows by 2 columns and display 4 different plots in each subplot.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig,a =  plt.subplots(2,2)
import numpy as np
x = np.arange(1,5)
a[0][0].plot(x,x*x)
a[0][0].set_title('square')
a[0][1].plot(x,np.sqrt(x))
a[0][1].set_title('square root')
a[1][0].plot(x,np.exp(x))
a[1][0].set_title('exp')
a[1][1].plot(x,np.log10(x))
a[1][1].set_title('log')
plt.show()
</pre>
<p>The above line of code generates the following output &minus;</p>
<img src="/matplotlib/images/subplots_function.jpg" alt="Subplots Function" />
<h1>Matplotlib - Subplot2grid() Function</h1>
<p>This function gives more flexibility in creating an axes object at a specific location of the grid. It also allows the axes object to be spanned across multiple rows or columns.</p>
<pre class="prettyprint notranslate">
Plt.subplot2grid(shape, location, rowspan, colspan)
</pre>
<p>In the following example, a 3X3 grid of the figure object is filled with axes objects of varying sizes in row and column spans, each showing a different plot.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
a1 = plt.subplot2grid((3,3),(0,0),colspan = 2)
a2 = plt.subplot2grid((3,3),(0,2), rowspan = 3)
a3 = plt.subplot2grid((3,3),(1,0),rowspan = 2, colspan = 2)
import numpy as np
x = np.arange(1,10)
a2.plot(x, x*x)
a2.set_title('square')
a1.plot(x, np.exp(x))
a1.set_title('exp')
a3.plot(x, np.log(x))
a3.set_title('log')
plt.tight_layout()
plt.show()
</pre>
<p>Upon execution of the above line code, the following output is generated &minus;</p>
<img src="/matplotlib/images/subplots_2_grid_function.jpg" alt="Subplot2grid Functions" />
<h1>Matplotlib - Grids</h1>
<p>The grid() function of axes object sets visibility of grid inside the figure to on or off. You can also display major / minor (or both) ticks of the grid. Additionally color, linestyle and linewidth properties can be set in the grid() function.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import numpy as np
fig, axes = plt.subplots(1,3, figsize = (12,4))
x = np.arange(1,11)
axes[0].plot(x, x**3, 'g',lw=2)
axes[0].grid(True)
axes[0].set_title('default grid')
axes[1].plot(x, np.exp(x), 'r')
axes[1].grid(color='b', ls = '-.', lw = 0.25)
axes[1].set_title('custom grid')
axes[2].plot(x,x)
axes[2].set_title('no grid')
fig.tight_layout()
plt.show()
</pre>
<img src="/matplotlib/images/grids.jpg" alt="Grids" />
<h1>Matplotlib - Formatting Axes</h1>
<p>Sometimes, one or a few points are much larger than the bulk of data. In such a case, the scale of an axis needs to be set as logarithmic rather than the normal scale. This is the Logarithmic scale. In Matplotlib, it is possible by setting xscale or vscale property of axes object to ‘log’.</p>
<p>It is also required sometimes to show some additional distance between axis numbers and axis label. The labelpad property of either axis (x or y or both) can be set to the desired value.</p>
<p>Both the above features are demonstrated with the help of the following example. The subplot on the right has a logarithmic scale and one on left has its x axis having label at more distance.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import numpy as np
fig, axes = plt.subplots(1, 2, figsize=(10,4))
x = np.arange(1,5)
axes[0].plot( x, np.exp(x))
axes[0].plot(x,x**2)
axes[0].set_title("Normal scale")
axes[1].plot (x, np.exp(x))
axes[1].plot(x, x**2)
axes[1].set_yscale("log")
axes[1].set_title("Logarithmic scale (y)")
axes[0].set_xlabel("x axis")
axes[0].set_ylabel("y axis")
axes[0].xaxis.labelpad = 10
axes[1].set_xlabel("x axis")
axes[1].set_ylabel("y axis")
plt.show()
</pre>
<img src="/matplotlib/images/formatting_axes.jpg" alt="Formatting Axes" />
<p>Axis spines are the lines connecting axis tick marks demarcating boundaries of plot area. The axes object has spines located at top, bottom, left and right.</p>
<p>Each spine can be formatted by specifying color and width. Any edge can be made invisible if its color is set to none.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.spines['bottom'].set_color('blue')
ax.spines['left'].set_color('red')
ax.spines['left'].set_linewidth(2)
ax.spines['right'].set_color(None)
ax.spines['top'].set_color(None)
ax.plot([1,2,3,4,5])
plt.show()
</pre>
<img src="/matplotlib/images/axis_spines.jpg" alt="Axis Spines" />
<h1>Matplotlib - Setting Limits</h1>
<p>Matplotlib automatically arrives at the minimum and maximum values of variables to be displayed along x, y (and z axis in case of 3D plot) axes of a plot. However, it is possible to set the limits explicitly by using <b>set_xlim()</b> and <b>set_ylim()</b> functions.</p>
<p>In the following plot, the autoscaled limits of x and y axes are shown &minus;</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig = plt.figure()
a1 = fig.add_axes([0,0,1,1])
import numpy as np
x = np.arange(1,10)
a1.plot(x, np.exp(x))
a1.set_title('exp')
plt.show()
</pre>
<img src="/matplotlib/images/setting_limits.jpg" alt="Setting Limits" />
<p>Now we format the limits on x axis to (0 to 10) and y axis (0 to 10000) &minus;</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig = plt.figure()
a1 = fig.add_axes([0,0,1,1])
import numpy as np
x = np.arange(1,10)
a1.plot(x, np.exp(x),'r')
a1.set_title('exp')
a1.set_ylim(0,10000)
a1.set_xlim(0,10)
plt.show()
</pre>
<img src="/matplotlib/images/format_the_limits.jpg" alt="Format The Limits" />
<h1>Matplotlib - Setting Ticks and Tick Labels</h1>
<p>Ticks are the markers denoting data points on axes. Matplotlib has so far - in all our previous examples - automatically taken over the task of spacing points on the axis.Matplotlib's default tick locators and formatters are designed to be generally sufficient in many common situations. Position and labels of ticks can be explicitly mentioned to suit specific requirements.</p>
<p>The <b>xticks()</b> and <b>yticks()</b> function takes a list object as argument. The elements in the list denote the positions on corresponding action where ticks will be displayed.</p>
<pre class="prettyprint notranslate">
ax.set_xticks([2,4,6,8,10])
</pre>
<p>This method will mark the data points at the given positions with ticks.</p>
<p>Similarly, labels corresponding to tick marks can be set by <b>set_xlabels()</b> and <b>set_ylabels()</b> functions respectively.</p>
<pre class="prettyprint notranslate">
ax.set_xlabels([‘two’, ‘four’,’six’, ‘eight’, ‘ten’])
</pre>
<p>This will display the text labels below the markers on the x axis.</p>
<p>Following example demonstrates the use of ticks and labels.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import numpy as np
import math
x = np.arange(0, math.pi*2, 0.05)
fig = plt.figure()
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes
y = np.sin(x)
ax.plot(x, y)
ax.set_xlabel(‘angle’)
ax.set_title('sine')
ax.set_xticks([0,2,4,6])
ax.set_xticklabels(['zero','two','four','six'])
ax.set_yticks([-1,0,1])
plt.show()
</pre>
<img src="/matplotlib/images/ticks_and_labels.jpg" alt="Tick and Labels" />
<h1>Matplotlib - Twin Axes</h1>
<p>It is considered useful to have dual x or y axes in a figure. Moreso, when plotting curves with different units together. Matplotlib supports this with the twinxand twiny functions.</p>
<p>In the following example, the plot has dual y axes, one showing exp(x) and the other showing log(x) &minus;</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import numpy as np
fig = plt.figure()
a1 = fig.add_axes([0,0,1,1])
x = np.arange(1,11)
a1.plot(x,np.exp(x))
a1.set_ylabel('exp')
a2 = a1.twinx()
a2.plot(x, np.log(x),'ro-')
a2.set_ylabel('log')
fig.legend(labels = ('exp','log'),loc='upper left')
plt.show()
</pre>
<img src="/matplotlib/images/twin_axes.jpg" alt="Twin Axes" />
<h1>Matplotlib - Bar Plot</h1>
<p>A bar chart or bar graph is a chart or graph that presents categorical data with rectangular bars with heights or lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally.</p>
<p>A bar graph shows comparisons among discrete categories. One axis of the chart shows the specific categories being compared, and the other axis represents a measured value.</p>
<p>Matplotlib API provides the <b>bar()</b> function that can be used in the MATLAB style use as well as object oriented API. The signature of bar() function to be used with axes object is as follows &minus;</p>
<pre class="prettyprint notranslate">
ax.bar(x, height, width, bottom, align)
</pre>
<p>The function makes a bar plot with the bound rectangle of size (x −width = 2; x + width=2; bottom; bottom + height).</p>
<p>The parameters to the function are &minus;</p>
<table class="table table-bordered">
<tr>
<td>x</td>
<td>sequence of scalars representing the x coordinates of the bars. align controls if x is the bar center (default) or left edge.</td>
</tr>
<tr>
<td>height</td>
<td>scalar or sequence of scalars representing the height(s) of the bars.</td>
</tr>
<tr>
<td>width</td>
<td>scalar or array-like, optional. the width(s) of the bars default 0.8</td>
</tr>
<tr>
<td>bottom</td>
<td>scalar or array-like, optional. the y coordinate(s) of the bars default None.</td>
</tr>
<tr>
<td>align</td>
<td>{‘center’, ‘edge’}, optional, default ‘center’</td>
</tr>
</table>
<p>The function returns a Matplotlib container object with all bars.</p>
<p>Following is a simple example of the Matplotlib bar plot. It shows the number of students enrolled for various courses offered at an institute.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['C', 'C++', 'Java', 'Python', 'PHP']
students = [23,17,35,29,12]
ax.bar(langs,students)
plt.show()
</pre>
<img src="/matplotlib/images/matplotlib_bar_plot.jpg" alt="Matplotlib Bar Plot" />
<p>When comparing several quantities and when changing one variable, we might want a bar chart where we have bars of one color for one quantity value.</p>
<p>We can plot multiple bar charts by playing with the thickness and the positions of the bars. The data variable contains three series of four values. The following script will show three bar charts of four bars. The bars will have a thickness of 0.25 units. Each bar chart will be shifted 0.25 units from the previous one. The data object is a multidict containing number of students passed in three branches of an engineering college over the last four years.</p>
<pre class="prettyprint notranslate">
import numpy as np
import matplotlib.pyplot as plt
data = [[30, 25, 50, 20],
[40, 23, 51, 17],
[35, 22, 45, 19]]
X = np.arange(4)
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(X + 0.00, data[0], color = 'b', width = 0.25)
ax.bar(X + 0.25, data[1], color = 'g', width = 0.25)
ax.bar(X + 0.50, data[2], color = 'r', width = 0.25)
</pre>
<img src="/matplotlib/images/multiple_bar_charts.jpg" alt="Multiple Bar Charts" />
<p>The stacked bar chart stacks bars that represent different groups on top of each other. The height of the resulting bar shows the combined result of the groups.</p>
<p>The optional bottom parameter of the <b>pyplot.bar()</b> function allows you to specify a starting value for a bar. Instead of running from zero to a value, it will go from the bottom to the value. The first call to pyplot.bar() plots the blue bars. The second call to pyplot.bar() plots the red bars, with the bottom of the blue bars being at the top of the red bars.</p>
<pre class="prettyprint notranslate">
import numpy as np
import matplotlib.pyplot as plt
N = 5
menMeans = (20, 35, 30, 35, 27)
womenMeans = (25, 32, 34, 20, 25)
ind = np.arange(N) # the x locations for the groups
width = 0.35
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.bar(ind, menMeans, width, color='r')
ax.bar(ind, womenMeans, width,bottom=menMeans, color='b')
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind, ('G1', 'G2', 'G3', 'G4', 'G5'))
ax.set_yticks(np.arange(0, 81, 10))
ax.legend(labels=['Men', 'Women'])
plt.show()
</pre>
<img src="/matplotlib/images/scores.jpg" alt="Scores" />
<h1>Matplotlib - Histogram</h1>
<p>A histogram is an accurate representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable. It is a kind of bar graph.</p>
<p>To construct a histogram, follow these steps &minus;</p>
<ul class="list">
<li><b>Bin</b> the range of values.</li>
<li>Divide the entire range of values into a series of intervals.</li>
<li>Count how many values fall into each interval.</li>
</ul>
<p>The bins are usually specified as consecutive, non-overlapping intervals of a variable.</p>
<p>The <b>matplotlib.pyplot.hist()</b> function plots a histogram. It computes and draws the histogram of x.</p>
<h3>Parameters</h3>
<p>The following table lists down the parameters for a histogram &minus;</p>
<table class="table table-bordered">
<tr>
<td>x</td>
<td>array or sequence of arrays</td>
</tr>
<tr>
<td>bins</td>
<td>integer or sequence or ‘auto’, optional</td>
</tr>
<tr>
<td colspan="2">optional parameters</td>
</tr>
<tr>
<td>range</td>
<td>The lower and upper range of the bins.</td>
</tr>
<tr>
<td>density</td>
<td>If True, the first element of the return tuple will be the counts normalized to form a probability density</td>
</tr>
<tr>
<td>cumulative</td>
<td>If True, then a histogram is computed where each bin gives the counts in that bin plus all bins for smaller values.</td>
</tr>
<tr>
<td>histtype</td>
<td>The type of histogram to draw. Default is ‘bar’
<ul class="list">
<li>‘bar’ is a traditional bar-type histogram. If multiple data are given the bars are arranged side by side.</li>
<li>‘barstacked’ is a bar-type histogram where multiple data are stacked on top of each other.</li>
<li>‘step’ generates a lineplot that is by default unfilled.</li>
<li>‘stepfilled’ generates a lineplot that is by default filled.</li>
</ul>
</td>
</tr>
</table>
<p>Following example plots a histogram of marks obtained by students in a class. Four bins, 0-25, 26-50, 51-75, and 76-100 are defined. The Histogram shows number of students falling in this range.</p>
<pre class="prettyprint notranslate">
from matplotlib import pyplot as plt
import numpy as np
fig,ax = plt.subplots(1,1)
a = np.array([22,87,5,43,56,73,55,54,11,20,51,5,79,31,27])
ax.hist(a, bins = [0,25,50,75,100])
ax.set_title("histogram of result")
ax.set_xticks([0,25,50,75,100])
ax.set_xlabel('marks')
ax.set_ylabel('no. of students')
plt.show()
</pre>
<p>The plot appears as shown below &minus;</p>
<img src="/matplotlib/images/histogram.jpg" alt="Histogram" />
<h1>Matplotlib - Pie Chart</h1>
<p>A Pie Chart can only display one series of data. Pie charts show the size of items (called wedge) in one data series, proportional to the sum of the items. The data points in a pie chart are shown as a percentage of the whole pie.</p>
<p>Matplotlib API has a <b>pie()</b> function that generates a pie diagram representing data in an array. The fractional area of each wedge is given by <b>x/sum(x)</b>. If sum(x)&lt; 1, then the values of x give the fractional area directly and the array will not be normalized. Theresulting pie will have an empty wedge of size 1 - sum(x).</p>
<p>The pie chart looks best if the figure and axes are square, or the Axes aspect is equal.</p>
<h2>Parameters</h2>
<p>Following table lists down the parameters foe a pie chart &minus;</p>
<table class="table table-bordered">
<tr>
<td>x</td>
<td>array-like. The wedge sizes.</td>
</tr>
<tr>
<td>labels</td>
<td>list. A sequence of strings providing the labels for each wedge.</td>
</tr>
<tr>
<td>Colors</td>
<td>A sequence of matplotlibcolorargs through which the pie chart will cycle. If None, will use the colors in the currently active cycle.</td>
</tr>
<tr>
<td>Autopct</td>
<td>string, used to label the wedges with their numeric value. The label will be placed inside the wedge. The format string will be fmt%pct.</td>
</tr>
</table>
<p>Following code uses the pie() function to display the pie chart of the list of students enrolled for various computer language courses. The proportionate percentage is displayed inside the respective wedge with the help of <b>autopct</b> parameter which is set to %1.2f%.</p>
<pre class="prettyprint notranslate">
from matplotlib import pyplot as plt
import numpy as np
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
langs = ['C', 'C++', 'Java', 'Python', 'PHP']
students = [23,17,35,29,12]
ax.pie(students, labels = langs,autopct='%1.2f%%')
plt.show()
</pre>
<img src="/matplotlib/images/pie_chart.jpg" alt="Pie Chart" />
<h1>Matplotlib - Scatter Plot</h1>
<p>Scatter plots are used to plot data points on horizontal and vertical axis in the attempt to show how much one variable is affected by another. Each row in the data table is represented by a marker the position depends on its values in the columns set on the X and Y axes. A third variable can be set to correspond to the color or size of the markers, thus adding yet another dimension to the plot.</p>
<p>The script below plots a scatter diagram of grades range vs grades of boys and girls in two different colors.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
girls_grades = [89, 90, 70, 89, 100, 80, 90, 100, 80, 34]
boys_grades = [30, 29, 49, 48, 100, 48, 38, 45, 20, 30]
grades_range = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
fig=plt.figure()
ax=fig.add_axes([0,0,1,1])
ax.scatter(grades_range, girls_grades, color='r')
ax.scatter(grades_range, boys_grades, color='b')
ax.set_xlabel('Grades Range')
ax.set_ylabel('Grades Scored')
ax.set_title('scatter plot')
plt.show()
</pre>
<img src="/matplotlib/images/graded_scored.jpg" alt="Graded Scored" />
<h1>Matplotlib - Contour Plot</h1>
<p>Contour plots (sometimes called Level Plots) are a way to show a three-dimensional surface on a two-dimensional plane. It graphs two predictor variables X Y on the y-axis and a response variable Z as contours. These contours are sometimes called the z-slices or the iso-response values.</p>
<p>A contour plot is appropriate if you want to see how alue Z changes as a function of two inputs X and Y, such that Z = f(X,Y). A contour line or isoline of a function of two variables is a curve along which the function has a constant value.</p>
<p>The independent variables x and y are usually restricted to a regular grid called meshgrid. The numpy.meshgrid creates a rectangular grid out of an array of x values and an array of y values.</p>
<p>Matplotlib API contains contour() and contourf() functions that draw contour lines and filled contours, respectively. Both functions need three parameters x,y and z.</p>
<pre class="prettyprint notranslate">
import numpy as np
import matplotlib.pyplot as plt
xlist = np.linspace(-3.0, 3.0, 100)
ylist = np.linspace(-3.0, 3.0, 100)
X, Y = np.meshgrid(xlist, ylist)
Z = np.sqrt(X**2 + Y**2)
fig,ax=plt.subplots(1,1)
cp = ax.contourf(X, Y, Z)
fig.colorbar(cp) # Add a colorbar to a plot
ax.set_title('Filled Contours Plot')
#ax.set_xlabel('x (cm)')
ax.set_ylabel('y (cm)')
plt.show()
</pre>
<img src="/matplotlib/images/filled_colours_plot.jpg" alt="Filled Colours Plot" />
<h1>Matplotlib - Quiver Plot</h1>
<p>A quiver plot displays the velocity vectors as arrows with components (u,v) at the points (x,y).</p>
<pre class="prettyprint notranslate">
quiver(x,y,u,v)
</pre>
<p>The above command plots vectors as arrows at the coordinates specified in each corresponding pair of elements in x and y.</p>
<h2>Parameters</h2>
<p>The following table lists down the different parameters for the Quiver plot &minus;</p>
<table class="table table-bordered">
<tr>
<td width="10%">x</td>
<td>1D or 2D array, sequence. The x coordinates of the arrow locations</td>
</tr>
<tr>
<td>y</td>
<td>1D or 2D array, sequence. The y coordinates of the arrow locations</td>
</tr>
<tr>
<td>u</td>
<td>1D or 2D array, sequence. The x components of the arrow vectors</td>
</tr>
<tr>
<td>v</td>
<td>1D or 2D array, sequence. The y components of the arrow vectors</td>
</tr>
<tr>
<td>c</td>
<td>1D or 2D array, sequence. The arrow colors</td>
</tr>
</table>
<p>The following code draws a simple quiver plot &minus;</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import numpy as np
x,y = np.meshgrid(np.arange(-2, 2, .2), np.arange(-2, 2, .25))
z = x*np.exp(-x**2 - y**2)
v, u = np.gradient(z, .2, .2)
fig, ax = plt.subplots()
q = ax.quiver(x,y,u,v)
plt.show()
</pre>
<img src="/matplotlib/images/quiver_plot.jpg" alt="Quicker Plot" />
<h1>Matplotlib - Box Plot</h1>
<p>A box plot which is also known as a whisker plot displays a summary of a set of data containing the minimum, first quartile, median, third quartile, and maximum. In a box plot, we draw a box from the first quartile to the third quartile. A vertical line goes through the box at the median. The whiskers go from each quartile to the minimum or maximum.</p>
<img src="/matplotlib/images/box_plot.jpg" alt="Box Plot" />
<p>Let us create the data for the boxplots. We use the <b>numpy.random.normal()</b> function to create the fake data. It takes three arguments, mean and standard deviation of the normal distribution, and the number of values desired.</p>
<pre class="prettyprint notranslate">
np.random.seed(10)
collectn_1 = np.random.normal(100, 10, 200)
collectn_2 = np.random.normal(80, 30, 200)
collectn_3 = np.random.normal(90, 20, 200)
collectn_4 = np.random.normal(70, 25, 200)
</pre>
<p>The list of arrays that we created above is the only required input for creating the boxplot. Using the <b>data_to_plot</b> line of code, we can create the boxplot with the following code &minus;</p>
<pre class="prettyprint notranslate">
fig = plt.figure()
# Create an axes instance
ax = fig.add_axes([0,0,1,1])
# Create the boxplot
bp = ax.boxplot(data_to_plot)
plt.show()
</pre>
<p>The above line of code will generate the following output &minus;</p>
<img src="/matplotlib/images/line_of_code.jpg" alt="Line of Code" />
<h1>Matplotlib - Violin Plot</h1>
<p>Violin plots are similar to box plots, except that they also show the probability density of the data at different values. These plots include a marker for the median of the data and a box indicating the interquartile range, as in the standard box plots. Overlaid on this box plot is a kernel density estimation. Like box plots, violin plots are used to represent comparison of a variable distribution (or sample distribution) across different "categories".</p>
<p>A violin plot is more informative than a plain box plot. In fact while a box plot only shows summary statistics such as mean/median and interquartile ranges, the violin plot shows the full distribution of the data.</p>
<pre class="prettyprint notranlsate">
import matplotlib.pyplot as plt

np.random.seed(10)
collectn_1 = np.random.normal(100, 10, 200)
collectn_2 = np.random.normal(80, 30, 200)
collectn_3 = np.random.normal(90, 20, 200)
collectn_4 = np.random.normal(70, 25, 200)

## combine these different collections into a list
data_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4]

# Create a figure instance
fig = plt.figure()

# Create an axes instance
ax = fig.add_axes([0,0,1,1])

# Create the boxplot
bp = ax.violinplot(data_to_plot)
plt.show()
</pre>
<img src="/matplotlib/images/violin_plot.jpg" alt="Violin Plot" />
<h1>Matplotlib - Three-dimensional Plotting</h1>
<p>Even though Matplotlib was initially designed with only two-dimensional plotting in mind, some three-dimensional plotting utilities were built on top of Matplotlib's two-dimensional display in later versions, to provide a set of tools for three-dimensional data visualization. Three-dimensional plots are enabled by importing the <b>mplot3d toolkit</b>, included with the Matplotlib package.</p>
<p>A three-dimensional axes can be created by passing the keyword projection='3d' to any of the normal axes creation routines.</p>
<pre class="prettyprint notranslate">
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
ax = plt.axes(projection='3d')
z = np.linspace(0, 1, 100)
x = z * np.sin(20 * z)
y = z * np.cos(20 * z)
ax.plot3D(x, y, z, 'gray')
ax.set_title('3D line plot')
plt.show()
</pre>
<p>We can now plot a variety of three-dimensional plot types. The most basic three-dimensional plot is a <b>3D line plot</b> created from sets of (x, y, z) triples. This can be created using the ax.plot3D function.</p>
<img src="/matplotlib/images/three_dimensional_plotting.jpg" alt="Three-dimensional Plotting" />
<p><b>3D scatter plot</b> is generated by using the <b>ax.scatter3D</b> function.</p>
<pre class="prettyprint notranslate">
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()
ax = plt.axes(projection='3d')
z = np.linspace(0, 1, 100)
x = z * np.sin(20 * z)
y = z * np.cos(20 * z)
c = x + y
ax.scatter(x, y, z, c=c)
ax.set_title('3d Scatter plot')
plt.show()
</pre>
<img src="/matplotlib/images/3d_scatter_plot.jpg" alt="3D Scatter Plot" />
<h1>Matplotlib - 3D Contour Plot</h1>
<p>The <b>ax.contour3D()</b> function creates three-dimensional contour plot. It requires all the input data to be in the form of two-dimensional regular grids, with the Z-data evaluated at each point. Here, we will show a three-dimensional contour diagram of a three-dimensional sinusoidal function.</p>
<pre class="prettyprint notranslate">
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
def f(x, y):
   return np.sin(np.sqrt(x ** 2 + y ** 2))
	
x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)

X, Y = np.meshgrid(x, y)
Z = f(X, Y)

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.contour3D(X, Y, Z, 50, cmap='binary')
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_zlabel('z')
ax.set_title('3D contour')
plt.show()
</pre>
<img src="/matplotlib/images/3d_contour.jpg" alt="3D Contour" />
<h1>Matplotlib - 3D Wireframe plot</h1>
<p>Wireframe plot takes a grid of values and projects it onto the specified three-dimensional surface, and can make the resulting three-dimensional forms quite easy to visualize. The <b>plot_wireframe()</b> function is used for the purpose &minus;</p>
<pre class="prettyprint notranslate">
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
def f(x, y):
   return np.sin(np.sqrt(x ** 2 + y ** 2))
	
x = np.linspace(-6, 6, 30)
y = np.linspace(-6, 6, 30)

X, Y = np.meshgrid(x, y)
Z = f(X, Y)

fig = plt.figure()
ax = plt.axes(projection='3d')
ax.plot_wireframe(X, Y, Z, color='black')
ax.set_title('wireframe')
plt.show()
</pre>
<p>The above line of code will generate the following output &minus;</p>
<img src="/matplotlib/images/wireframe.jpg" alt="Wireframe" />
<h1>Matplotlib - 3D Surface plot</h1>
<p>Surface plot shows a functional relationship between a designated dependent variable (Y), and two independent variables (X and Z). The plot is a companion plot to the contour plot. A surface plot is like a wireframe plot, but each face of the wireframe is a filled polygon. This can aid perception of the topology of the surface being visualized. The <b>plot_surface()</b> function x,y and z as arguments.</p>
<pre class="prettyprint notranslate">
from mpl_toolkits import mplot3d
import numpy as np
import matplotlib.pyplot as plt
x = np.outer(np.linspace(-2, 2, 30), np.ones(30))
y = x.copy().T # transpose
z = np.cos(x ** 2 + y ** 2)

fig = plt.figure()
ax = plt.axes(projection='3d')

ax.plot_surface(x, y, z,cmap='viridis', edgecolor='none')
ax.set_title('Surface plot')
plt.show()
</pre>
<p>The above line of code will generate the following output &minus;</p>
<img src="/matplotlib/images/surface_plot.jpg" alt="Surface Plot" />
<h1>Matplotlib - Working With Text</h1>
<p>Matplotlib has extensive text support, including support for mathematical expressions, <b>TrueType</b> support for raster and vector outputs, newline separated text with arbitrary rotations, and unicode support. Matplotlib includes its own matplotlib.font_manager which implements a cross platform, W3C compliant font finding algorithm.</p>
<p>The user has a great deal of control over text properties (font size, font weight, text location and color, etc.). Matplotlib implements a large number of TeX math symbols and commands.</p>
<p>The following list of commands are used to create text in the Pyplot interface &minus;</p>
<table class="table table-bordered">
<tr>
<td>text</td>
<td>Add text at an arbitrary location of the Axes.</td>
</tr>
<tr>
<td>annotate</td>
<td>Add an annotation, with an optional arrow, at an arbitrary location of theAxes.</td>
</tr>
<tr>
<td>xlabel</td>
<td>Add a label to the Axes’s x-axis.</td>
</tr>
<tr>
<td>ylabel</td>
<td>Add a label to the Axes’s y-axis.</td>
</tr>
<tr>
<td>title</td>
<td>Add a title to the Axes.</td>
</tr>
<tr>
<td>figtext</td>
<td>Add text at an arbitrary location of the Figure.</td>
</tr>
<tr>
<td>suptitle</td>
<td>Add a title to the Figure.</td>
</tr>
</table>
<p>All of these functions create and return a <b>matplotlib.text.Text()</b> instance.</p>
<p>Following scripts demonstrate the use of some of the above functions &minus;</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
fig = plt.figure()

ax = fig.add_axes([0,0,1,1])

ax.set_title('axes title')
ax.set_xlabel('xlabel')
ax.set_ylabel('ylabel')
ax.text(3, 8, 'boxed italics text in data coords', style='italic', 
bbox = {'facecolor': 'red'})
ax.text(2, 6, r'an equation: $E = mc^2$', fontsize = 15)
ax.text(4, 0.05, 'colored text in axes coords',
verticalalignment = 'bottom', color = 'green', fontsize = 15)
ax.plot([2], [1], 'o')
ax.annotate('annotate', xy = (2, 1), xytext = (3, 4),
arrowprops = dict(facecolor = 'black', shrink = 0.05))
ax.axis([0, 10, 0, 10])
plt.show()
</pre>
<p>The above line of code will generate the following output &minus;</p>
<img src="/matplotlib/images/working_with_text.jpg" alt="Working With Text" />
<h1>Matplotlib - Mathematical Expressions</h1>
<p>You can use a subset TeXmarkup in any Matplotlib text string by placing it inside a pair of dollar signs ($).</p>
<pre class="prettyprint notranslate">
# math text
plt.title(r'$\alpha &gt; \beta$')
</pre>
<p>To make subscripts and superscripts, use the '_' and '^' symbols &minus;</p>
<pre class="prettyprint notranslate">
r'$\alpha_i&gt; \beta_i$'

import numpy as np
import matplotlib.pyplot as plt
t = np.arange(0.0, 2.0, 0.01)
s = np.sin(2*np.pi*t)

plt.plot(t,s)
plt.title(r'$\alpha_i&gt; \beta_i$', fontsize=20)

plt.text(0.6, 0.6, r'$\mathcal{A}\mathrm{sin}(2 \omega t)$', fontsize = 20)
plt.text(0.1, -0.5, r'$\sqrt{2}$', fontsize=10)
plt.xlabel('time (s)')
plt.ylabel('volts (mV)')
plt.show()
</pre>
<p>The above line of code will generate the following output &minus;</p>
<img src="/matplotlib/images/mathematical_expressions.jpg" alt="Mathematical Expressions" />
<h1>Matplotlib - Working with Images</h1>
<p>The image module in Matplotlib package provides functionalities required for loading, rescaling and displaying image.</p>
<p>Loading image data is supported by the Pillow library. Natively, Matplotlib only supports PNG images. The commands shown below fall back on Pillow if the native read fails.</p>
<p>The image used in this example is a PNG file, but keep that Pillow requirement in mind for your own data. The <b>imread()</b> function is used to read image data in an <b>ndarray</b> object of float32 dtype.</p>
<pre class="prettyprint notranslate">
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
img = mpimg.imread('mtplogo.png')
</pre>
<p>Assuming that following image named as <b>mtplogo.png</b> is present in the current working directory.</p>
<img src="/matplotlib/images/matplotlib_image.jpg" alt="Matplotlib Image" />
<p>Any array containing image data can be saved to a disk file by executing the <b>imsave()</b> function. Here a vertically flipped version of the original png file is saved by giving origin parameter as lower.</p>
<pre class="prettyprint notranslate">
plt.imsave("logo.png", img, cmap = 'gray', origin = 'lower')
</pre>
<p>The new image appears as below if opened in any image viewer.</p>
<img src="/matplotlib/images/image_viewer.jpg" alt="Image Viewer" />
<p>To draw the image on Matplotlib viewer, execute the <b>imshow()</b> function.</p>
<pre class="prettyprint notranslate">
imgplot = plt.imshow(img)
</pre>
<h1>Matplotlib - Transforms</h1>
<p>The matplotlib package is built on top of a transformation framework to easily move between coordinate systems. Four coordinate systems can be used. The systems are described in brief in the table given below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Coordinate</th>
<th style="text-align:center;">Transformation Object</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td>Data</td>
<td>ax.transData</td>
<td><p>The user land data coordinate system. controlled by the xlim and ylim</p></td>
</tr>
<tr>
<td>Axes</td>
<td>ax.transAxes</td>
<td><p>The coordinate system of the Axes. (0,0) is bottom left and (1,1) is top right of the axes.</p></td>
</tr>
<tr>
<td>Figure</td>
<td>fig.transFigure</td>
<td><p>The coordinate system of the Figure. (0,0) is bottom left and (1,1) is top right of the figure</p>
</td>
<tr>
<td style="text-align:center;vertical-align:middle">display</td>
<td style="text-align:center;vertical-align:middle">None</td>
<td><p>This is the pixel coordinate system of the display. (0,0) is the bottom left and (width, height) is the top right of display in pixels.</p>
<p>Alternatively, the(matplotlib.transforms.IdentityTransform()) may be used instead of None.</p>
</td>
</tr>
</table>
<p>Consider the following example &minus;</p>
<pre class="result notranslate">
axes.text(x,y,"my label") 
</pre>
<p>The text is placed at the theoretical position of a data point (x,y). Thus we would speak of "data coords".</p>
<p>Using other transformation objects, placement can be controlled. For example, if the above test is to be placed in the centre of axes coordinate system, execute the following line of code &minus;</p>
<pre class="result notranslate">
axes.text(0.5, 0.5, "middle of graph", transform=axes.transAxes)
</pre>
<p>These transformations can be used for any kind of Matplotlib objects. The default transformation for <b>ax.text</b> is <b>ax.transData</b> and the default transformation for <b>fig.text</b> is <b>fig.transFigure.</b></p>
<p>The axes coordinate system is extremely useful when placing text in your axes. You might often want a text bubble in a fixed location; for example, on the upper left of the axes pane and have that location remain fixed when you pan or zoom.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/matplotlib/matplotlib_transforms.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/matplotlib/matplotlib_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
