<!DOCTYPE html>
<html lang="en-US">
<head>
<title>WebRTC - RTCPeerConnection APIs</title>
<meta charset="utf-8">
<meta name="description" content="WebRTC - RTCPeerConnection APIs - The RTCPeerConnection API is the core of the peer-to-peer connection between each of the browsers. To create the RTCPeerConnection objects simply write"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/webrtc/webrtc_rtcpeerconnection_apis.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#df711d;
}
a.demo {
    background:#df711d;
}
li.heading {
    background:#df711d;
}
.course-box{background:#df711d}
.home-intro-sub p{color:#df711d}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/webrtc/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/webrtc/images/webrtc-mini-logo.jpg" alt="WebRTC Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">WebRTC Tutorial</li>
<li><a href="/webrtc/index.htm">WebRTC - Home</a></li>
<li><a href="/webrtc/webrtc_overview.htm">WebRTC - Overview</a></li>
<li><a href="/webrtc/webrtc_architecture.htm">WebRTC - Architecture</a></li>
<li><a href="/webrtc/webrtc_environment.htm">WebRTC - Environment</a></li>
<li><a href="/webrtc/webrtc_media_stream_apis.htm">WebRTC - MediaStream APIs</a></li>
<li><a href="/webrtc/webrtc_rtcpeerconnection_apis.htm">WebRTC - RTCPeerConnection APIs</a></li>
<li><a href="/webrtc/webrtc_rtcdatachannel_apis.htm">WebRTC - RTCDataChannel APIs</a></li>
<li><a href="/webrtc/webrtc_sending_messages.htm">WebRTC - Sending Messages</a></li>
<li><a href="/webrtc/webrtc_signaling.htm">WebRTC - Signaling</a></li>
<li><a href="/webrtc/webrtc_browser_support.htm">WebRTC - Browser Support</a></li>
<li><a href="/webrtc/webrtc_mobile_support.htm">WebRTC - Mobile Support</a></li>
<li><a href="/webrtc/webrtc_video_demo.htm">WebRTC - Video Demo</a></li>
<li><a href="/webrtc/webrtc_voice_demo.htm">WebRTC - Voice Demo</a></li>
<li><a href="/webrtc/webrtc_text_demo.htm">WebRTC - Text Demo</a></li>
<li><a href="/webrtc/webrtc_security.htm">WebRTC - Security</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">WebRTC Resources</li>
<li><a href="/webrtc/webrtc_quick_guide.htm">WebRTC - Quick Guide</a></li>
<li><a href="/webrtc/webrtc_useful_resources.htm">WebRTC - Useful Resources</a></li>
<li><a href="/webrtc/webrtc_discussion.htm">WebRTC - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>WebRTC - RTCPeerConnection APIs</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/webrtc/webrtc_media_stream_apis.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/webrtc/webrtc_rtcdatachannel_apis.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>The RTCPeerConnection API is the core of the peer-to-peer connection between each of the browsers. To create the RTCPeerConnection objects simply write</p>
<pre class="result notranslate">
var pc = RTCPeerConnection(config);
</pre>
<p>where the <i>config</i> argument contains at least on key, iceServers. It is an array of URL objects containing information about STUN and TURN servers, used during the finding of the ICE candidates. You can find a list of available public STUN servers at <a target="_blank" rel="nofollow" href="https://code.google.com/p/natvpn/source/browse/trunk/stun_server_list">code.google.com</a></p>
<p>Depending upon whether you are the caller or the callee the RTCPeerConnection object is used in a slightly different way on each side of the connection.</p>
<p>Here is an example of the user's flow &minus;</p>
<ul class="list">
<li><p>Register the <i>onicecandidate</i> handler. It sends any ICE candidates to the other peer, as they are received.</p></li>
<li><p>Register the <i>onaddstream</i> handler. It handles the displaying of the video stream once it is received from the remote peer.</p></li>
<li><p>Register the <i>message</i> handler. Your signaling server should also have a handler for messages received from the other peer. If the message contains the <i>RTCSessionDescription</i> object, it should be added to the <i>RTCPeerConnection</i> object using the <i>setRemoteDescription()</i> method. If the message contains the <i>RTCIceCandidate</i> object, it should be added to the <i>RTCPeerConnection</i> object using the <i>addIceCandidate()</i> method.</p></li>
<li><p>Utilize <i>getUserMedia()</i> to set up your local media stream and add it to the <i>RTCPeerConnection</i> object using the <i>addStream()</i> method.</p></li>
<li><p>Start offer/answer negotiation process. This is the only step where the caller's flow is different from the callee's one. The caller starts negotiation using the <i>createOffer()</i> method and registers a callback that receives the <i>RTCSessionDescription</i> object. Then this callback should add this <i>RTCSessionDescription</i> object to your <i>RTCPeerConnection</i> object using <i>setLocalDescription()</i>. And finally, the caller should send this <i>RTCSessionDescription</i> to the remote peer using the signaling server. The callee, on the other, registers the same callback, but in the <i>createAnswer()</i> method. Notice that the callee flow is initiated only after the offer is received from the caller.</p></li>
</ul>
<h2>RTCPeerConnection API</h2>
<h3>Properties</h3>
<ul class="list">
<li><p><b>RTCPeerConnection.iceConnectionState (read only)</b> &minus; Returns an RTCIceConnectionState enum that describes the state of the connection. An iceconnectionstatechange event is fired when this value changes. The possible values &minus;</p>
<ul class="list">
<li><p><b>new</b> &minus; the ICE agent is waiting for remote candidates or gathering addresses</p></li>
<li><p><b>checking</b> &minus; the ICE agent has remote candidates, but it has not found a connection yet</p></li>
<li><p><b>connected</b> &minus; the ICE agent has found a usable connection, but is still checking more remote candidate for better connection.</p></li>
<li><p><b>completed</b> &minus; the ICE agent has found a usable connection and stopped testing remote candidates.</p></li>
<li><p><b>failed</b> &minus; the ICE agent has checked all the remote candidates but didn't find a match for at least one component.</p></li>
<li><p><b>disconnected</b> &minus; at least one component is no longer alive.</p></li>
<li><p><b>closed</b> &minus; the ICE agent is closed.</p></li>
</ul>
</li>
<li><p><b>RTCPeerConnection.iceGatheringState (read only)</b> &minus; Returns a RTCIceGatheringState enum that describes the ICE gathering state for the connection &minus;</p>
<ul class="list">
<li><p><b>new</b> &minus; the object was just created.</p></li>
<li><p><b>gathering</b> &minus; the ICE agent is in the process of gathering candidates</p></li>
<li><p><b>complete</b> the ICE agent has completed gathering.</p></li>
</ul>
</li>
<li><p><b>RTCPeerConnection.localDescription (read only)</b> &minus; Returns an RTCSessionDescription describing the local session. It can be null if it has not yet been set.</p></li>
<li><p><b>RTCPeerConnection.peerIdentity (read only)</b> &minus; Returns an RTCIdentityAssertion. It consists of an idp(domain name) and a name representing the identity of the remote peer.</p></li>
<li><p><b>RTCPeerConnection.remoteDescription (read only)</b> &minus; Return an RTCSessionDescription describing the remote session. It can be null if it has not yet been set.</p></li>
<li><p><b>RTCPeerConnection.signalingState (read only)</b> &minus; Returns an RTCSignalingState enum that describes the signaling state of the local connection. This state describes the SDP offer. A signalingstatechange event is fired when this value changes. The possible values &minus;</p>
<ul class="list">
<li><p><b>stable</b> &minus; The initial state. There is no SDP offer/answer exchange in progress.</p></li>
<li><p><b>have-local-offer</b> &minus; the local side of the connection has locally applied a SDP offer.</p></li>
<li><p><b>have-remote-offer</b> &minus; the remote side of the connection has locally applied a SDP offer.</p></li>
<li><p><b>have-local-pranswer</b> &minus; a remote SDP offer has been applied, and a SDP pranswer applied locally.</p></li>
<li><p><b>have-remote-pranswer</b> &minus; a local SDP has been applied, and a SDP pranswer applied remotely.</p></li>
<li><p><b>closed</b> &minus; the connection is closed.</p></li>
</ul>
</li>
</ul>
<h3>Event Handlers</h3>
<section class="toggle">
<label>Given below are the commonly used Event Handlers of RTCPeerConnection.</label>
<div class="toggle-content">
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Event Handlers &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>RTCPeerConnection.onaddstream</b></p>
<p>This handler is called when the addstream event is fired. This event is sent when a MediaStream is added to this connection by the remote peer.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>RTCPeerConnection.ondatachannel</b></p>
<p>This handler is called when the datachannel event is fired. This event is sent when a RTCDataChannel is added to this connection.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>RTCPeerConnection.onicecandidate</b></p>
<p>This handler is called when the icecandidate event is fired. This event is sent when a RTCIceCandidate object is added to the script.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>RTCPeerConnection.oniceconnectionstatechange</b></p>
<p>This handler is called when the iceconnectionstatechange event is fired. This event is sent when the value of iceConnectionState changes.</p></td>
</tr>
<tr>
<td>5</td>
<td><p><b>RTCPeerConnection.onidentityresult</b></p>
<p>This handler is called when the identityresult event is fired. This event is sent when an identity assertion is generated during the creating of an offer or an answer of via getIdentityAssertion().</p></td>
</tr>
<tr>
<td>6</td>
<td><p><b>RTCPeerConnection.onidpassertionerror</b></p>
<p>This handler is called when the idpassertionerror event is fired. This event is sent when the IdP (Identitry Provider) finds an error while generating an identity assertion.</p></td>
</tr>
<tr>
<td>7</td>
<td><p><b>RTCPeerConnection.onidpvalidation</b></p>
<p>This handler is called when the idpvalidationerror event is fired. This event is sent when the IdP (Identitry Provider) finds an error while validating an identity assertion.</p></td>
</tr>
<tr>
<td>8</td>
<td><p><b>RTCPeerConnection.onnegotiationneeded</b></p>
<p>This handler is called when the negotiationneeded event is fired. This event is sent by the browser to inform the negotiation will be required at some point in the future.</p></td>
</tr>
<tr>
<td>9</td>
<td><p><b>RTCPeerConnection.onpeeridentity</b></p>
<p>This handler is called when the peeridentity event is fired. This event is sent when a peer identity has been set and verified on this connection.</p></td>
</tr>
<tr>
<td>10</td>
<td><p><b>RTCPeerConnection.onremovestream</b></p>
<p>This handler is called when the signalingstatechange event is fired. This event is sent when the value of signalingState changes.</p></td>
</tr>
<tr>
<td>11</td>
<td><p><b>RTCPeerConnection.onsignalingstatechange</b></p>
<p>This handler is called when the removestream event is fired. This event is sent when a MediaStream is removed from this connection.</p></td>
</tr>
</table>
</div>
</section>
<h3>Methods</h3>
<section class="toggle">
<label>Given below are the commonly used methods of RTCPeerConnection.</label>
<div class="toggle-content">
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Methods &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>RTCPeerConnection()</b></p>
<p>Returns a new RTCPeerConnection object.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>RTCPeerConnection.createOffer()</b></p>
<p>Creates an offer(request) to find a remote peer. The two first parameters of this method are success and error callbacks. The optional third parameter are options, like enabling audio or video streams.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>RTCPeerConnection.createAnswer()</b></p>
<p>Creates an answer to the offer received by the remote peer during the offer/answer negotiation process. The two first parameters of this method are success and error callbacks. The optional third parameter are options for the answer to be created.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>RTCPeerConnection.setLocalDescription()</b></p>
<p>Changes the local connection description. The description defines the properties of the connection. The connection must be able to support both old and new descriptions. The method takes three parameters, RTCSessionDescription object, callback if the change of description succeeds, callback if the change of description fails.</p></td>
</tr>
<tr>
<td>5</td>
<td><p><b>RTCPeerConnection.setRemoteDescription()</b></p>
<p>Changes the remote connection description. The description defines the properties of the connection. The connection must be able to support both old and new descriptions. The method takes three parameters, RTCSessionDescription object, callback if the change of description succeeds, callback if the change of description fails.</p></td>
</tr>
<tr>
<td>6</td>
<td><p><b>RTCPeerConnection.updateIce()</b></p>
<p>Updates the ICE agent process of pinging remote candidates and gathering local candidates.</p></td>
</tr>
<tr>
<td>7</td>
<td><p><b>RTCPeerConnection.addIceCandidate()</b></p>
<p>Provides a remote candidate to the ICE agent.</p></td>
</tr>
<tr>
<td>8</td>
<td><p><b>RTCPeerConnection.getConfiguration()</b></p>
<p>Returns a RTCConfiguration object. It represents the configuration of the RTCPeerConnection object.</p></td>
</tr>
<tr>
<td>9</td>
<td><p><b>RTCPeerConnection.getLocalStreams()</b></p>
<p>Returns an array of local MediaStream connection.</p></td>
</tr>
<tr>
<td>10</td>
<td><p><b>RTCPeerConnection.getRemoteStreams()</b></p>
<p>Returns an array of remote MediaStream connection.</p></td>
</tr>
<tr>
<td>11</td>
<td><p><b>RTCPeerConnection.getStreamById()</b></p>
<p>Returns local or remote MediaStream by the given ID.</p></td>
</tr>
<tr>
<td>12</td>
<td><p><b>RTCPeerConnection.addStream()</b></p>
<p>Adds a MediaStream as a local source of video or audio.</p></td>
</tr>
<tr>
<td>13</td>
<td><p><b>RTCPeerConnection.removeStream()</b></p>
<p>Removes a MediaStream as a local source of video or audio.</p></td>
</tr>
<tr>
<td>14</td>
<td><p><b>RTCPeerConnection.close()</b></p>
<p>Closes a connection.</p></td>
</tr>
<tr>
<td>15</td>
<td><p><b>RTCPeerConnection.createDataChannel()</b></p>
<p>Creates a new RTCDataChannel.</p></td>
</tr>
<tr>
<td>16</td>
<td><p><b>RTCPeerConnection.createDTMFSender()</b></p>
<p>Creates a new RTCDTMFSender, associated to a specific MediaStreamTrack. Allows to send DTMF (Dual-tone multifrequency) phone signaling over the connection.</p></td>
</tr>
<tr>
<td>17</td>
<td><p><b>RTCPeerConnection.getStats()</b></p>
<p>Creates a new RTCStatsReport that contains statistics concerning the connection.</p></td>
</tr>
<tr>
<td>18</td>
<td><p><b>RTCPeerConnection.setIdentityProvider()</b></p>
<p>Sets the IdP. Takes three parameters − the name, the protocol used to communicate and an optional username.</p></td>
</tr>
<tr>
<td>19</td>
<td><p><b>RTCPeerConnection.getIdentityAssertion()</b></p>
<p>Gathers an identity assertion. It is not expected to deal with this method in the application. So you may call it explicitly only to anticipate the need.</p></td>
</tr>
</table>
</div>
</section>
<h2>Establishing a Connection</h2>
<p>Now let's create an example application. Firstly, run the signaling server we created in the “signaling server” tutorial via “node server”.</p>
<p>There will be two text inputs on the page, one for a login and one for a username we want to connect to. Create an <i>index.html</i> file and add the following code &minus;</p>
<pre class="prettyprint notranslate">
&lt;html lang = "en"&gt; 
   &lt;head&gt; 
      &lt;meta charset = "utf-8" /&gt; 
   &lt;/head&gt;
	
   &lt;body&gt; 
	
      &lt;div&gt; 
         &lt;input type = "text" id = "loginInput" /&gt; 
         &lt;button id = "loginBtn"&gt;Login&lt;/button&gt; 
      &lt;/div&gt; 
	
      &lt;div&gt; 
         &lt;input type = "text" id = "otherUsernameInput" /&gt;
         &lt;button id = "connectToOtherUsernameBtn"&gt;Establish connection&lt;/button&gt; 
      &lt;/div&gt; 
		
      &lt;script src = "client2.js"&gt;&lt;/script&gt;
		
   &lt;/body&gt;
	
&lt;/html&gt;
</pre>
<p>You can see that we've added the text input for a login, the login button, the text input for the other peer username, and the connect-to-him button. Now create a <i>client.js</i> file and add the following code &minus;</p>
<pre class="prettyprint notranslate">
var connection = new WebSocket('ws://localhost:9090'); 
var name = ""; 
 
var loginInput = document.querySelector('#loginInput'); 
var loginBtn = document.querySelector('#loginBtn'); 
var otherUsernameInput = document.querySelector('#otherUsernameInput'); 
var connectToOtherUsernameBtn = document.querySelector('#connectToOtherUsernameBtn'); 
var connectedUser, myConnection;
  
//when a user clicks the login button 
loginBtn.addEventListener("click", function(event){ 
   name = loginInput.value; 
	
   if(name.length &gt; 0){ 
      send({ 
         type: "login", 
         name: name 
      }); 
   } 
	
});
  
//handle messages from the server 
connection.onmessage = function (message) { 
   console.log("Got message", message.data);
   var data = JSON.parse(message.data); 
	
   switch(data.type) { 
      case "login": 
         onLogin(data.success); 
         break; 
      case "offer": 
         onOffer(data.offer, data.name); 
         break; 
      case "answer": 
         onAnswer(data.answer); 
         break; 
      case "candidate": 
         onCandidate(data.candidate); 
         break; 
      default: 
         break; 
   } 
};
  
//when a user logs in 
function onLogin(success) { 

   if (success === false) { 
      alert("oops...try a different username"); 
   } else { 
      //creating our RTCPeerConnection object 
		
      var configuration = { 
         "iceServers": [{ "url": "stun:stun.1.google.com:19302" }] 
      }; 
		
      myConnection = new webkitRTCPeerConnection(configuration); 
      console.log("RTCPeerConnection object was created"); 
      console.log(myConnection); 
  
      //setup ice handling
      //when the browser finds an ice candidate we send it to another peer 
      myConnection.onicecandidate = function (event) { 
		
         if (event.candidate) { 
            send({ 
               type: "candidate", 
               candidate: event.candidate 
            }); 
         } 
      }; 
   } 
};
  
connection.onopen = function () { 
   console.log("Connected"); 
};
  
connection.onerror = function (err) { 
   console.log("Got error", err); 
};
  
// Alias for sending messages in JSON format 
function send(message) { 

   if (connectedUser) { 
      message.name = connectedUser; 
   } 
	
   connection.send(JSON.stringify(message)); 
};
</pre>
<p>You can see that we establish a socket connection to our signaling server. When a user clicks on the login button the application sends his username to the server. If login is successful the application creates the RTCPeerConnection object and setup onicecandidate handler which sends all found icecandidates to the other peer. Now open the page and try to login. You should see the following console output &minus;</p>
<img src="/webrtc/images/establishing_connection.jpg" alt="Establishing a Connection" />
<p>The next step is to create an offer to the other peer. Add the following code to your <i>client.js</i> file &minus;</p>
<pre class="prettyprint notranslate">
//setup a peer connection with another user 
connectToOtherUsernameBtn.addEventListener("click", function () { 
 
   var otherUsername = otherUsernameInput.value; 
   connectedUser = otherUsername;
	
   if (otherUsername.length &gt; 0) { 
      //make an offer 
      myConnection.createOffer(function (offer) { 
         console.log(); 
         send({ 
            type: "offer", 
            offer: offer 
         });
			
         myConnection.setLocalDescription(offer); 
      }, function (error) { 
         alert("An error has occurred."); 
      }); 
   } 
}); 
 
//when somebody wants to call us 
function onOffer(offer, name) { 
   connectedUser = name; 
   myConnection.setRemoteDescription(new RTCSessionDescription(offer)); 
	
   myConnection.createAnswer(function (answer) { 
      myConnection.setLocalDescription(answer); 
		
      send({ 
         type: "answer", 
         answer: answer 
      }); 
		
   }, function (error) { 
      alert("oops...error"); 
   }); 
}
  
//when another user answers to our offer 
function onAnswer(answer) { 
   myConnection.setRemoteDescription(new RTCSessionDescription(answer)); 
} 
 
//when we got ice candidate from another user 
function onCandidate(candidate) { 
   myConnection.addIceCandidate(new RTCIceCandidate(candidate)); 
}	
</pre>
<p>You can see that when a user clicks the “Establish connection” button the application makes an SDP offer to the other peer. We also set <i>onAnswer</i> and <i>onCandidate</i> handlers. Reload your page, open it in two tabs, login with two users and try to establish a connection between them. You should see the following console output &minus;</p>
<img src="/webrtc/images/console_output.jpg" alt="Console Output" />
<p>Now the peer-to-peer connection is established. In the next tutorials, we will add video and audio streams as well as text chat support.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/webrtc/webrtc_media_stream_apis.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/webrtc/webrtc_rtcdatachannel_apis.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
