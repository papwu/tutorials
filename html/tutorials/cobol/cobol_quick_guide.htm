<!DOCTYPE html>
<html lang="en-US">
<head>
<title>COBOL - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="COBOL - Quick Guide - COBOL is a high-level language. One must understand the way COBOL works. Computers only understand machine code, a binary stream of 0s and 1s. COBOL code must b"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/cobol/cobol_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#053e52;
}
a.demo {
    background:#053e52;
}
li.heading {
    background:#053e52;
}
.course-box{background:#053e52}
.home-intro-sub p{color:#053e52}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/cobol/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/cobol/images/cobol-mini-logo.jpg" alt="COBOL Tutorial" />
</div>
<ul class="toc chapters">
<li><a class="videolink" href="/cobol_online_training/index.asp" target="_blank"><img src="/cobol/images/cobol-video-tutorials.jpg" alt="COBOL Video Tutorials" /></a></li>
</ul>
<ul class="toc chapters">
<li class="heading">COBOL Tutorial</li>
<li><a href="/cobol/index.htm">COBOL - Home</a></li>
<li><a href="/cobol/cobol_overview.htm">COBOL - Overview</a></li>
<li><a href="/cobol/cobol_environment_setup.htm">COBOL - Environment Setup</a></li>
<li><a href="/cobol/cobol_program_structure.htm">COBOL - Program Structure</a></li>
<li><a href="/cobol/cobol_basic_syntax.htm">COBOL - Basic Syntax</a></li>
<li><a href="/cobol/cobol_data_types.htm">COBOL - Data Types</a></li>
<li><a href="/cobol/cobol_basic_verbs.htm">COBOL - Basic Verbs</a></li>
<li><a href="/cobol/cobol_data_layout.htm">COBOL - Data Layout</a></li>
<li><a href="/cobol/cobol_condition_statements.htm">COBOL - Conditional Statements</a></li>
<li><a href="/cobol/cobol_loop_statements.htm">COBOL - Loop Statements</a></li>
<li><a href="/cobol/cobol_string_handling.htm">COBOL - String Handling</a></li>
<li><a href="/cobol/cobol_table_processing.htm">COBOL - Table Processing</a></li>
<li><a href="/cobol/cobol_file_handling.htm">COBOL - File Handling</a></li>
<li><a href="/cobol/cobol_file_organization.htm">COBOL - File Organization</a></li>
<li><a href="/cobol/cobol_file_access_mode.htm">COBOL - File Access Mode</a></li>
<li><a href="/cobol/cobol_file_handling_verbs.htm">COBOL - File Handling Verbs</a></li>
<li><a href="/cobol/cobol_subroutines.htm">COBOL - Subroutines</a></li>
<li><a href="/cobol/cobol_internal_sort.htm">COBOL - Internal Sort</a></li>
<li><a href="/cobol/cobol_database_interface.htm">COBOL - Database Interface</a></li>
<!--<li><a href="/cobol/cobol_interview_questions.htm">COBOL - Interview Questions</a></li>-->
</ul>
<ul class="toc chapters">
<li class="heading">COBOL Useful Resources</li>
<li><a href="/cobol/cobol_questions_answers.htm">COBOL - Questions and Answers</a></li>
<li><a href="/cobol/cobol_quick_guide.htm">COBOL - Quick Guide</a></li>
<li><a href="/cobol/cobol_useful_resources.htm">COBOL - Useful Resources</a></li>
<li><a href="/cobol/cobol_discussion.htm">COBOL - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>COBOL - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/cobol/cobol_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/cobol/cobol_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>COBOL - Overview</h1>
<h2>Introduction to COBOL</h2>
<p>COBOL is a high-level language. One must understand the way COBOL works. Computers only understand machine code, a binary stream of 0s and 1s. COBOL code must be converted into machine code  using a <b>compiler</b>. Run the program source through a compiler. The compiler first checks for any syntax errors and then converts it into machine language. The compiler creates an output file which is known as <b>load module</b>. This output file contains executable code in the form of 0s and 1s.</p> 
<h2>Evolution of COBOL</h2>
<p>During 1950s, when the businesses were growing in the western part of the world, there was a need to automate various processes for ease of operation and this gave birth to a high-level programming language meant for business data processing.</p>
<ul class="list">
<li><p>In 1959, COBOL was developed by CODASYL (Conference on Data Systems Language).</p></li>
<li><p>The next version, COBOL-61, was released in 1961 with some revisions.</p></li>
<li><p>In 1968, COBOL was approved by ANSI as a standard language for commercial use (COBOL-68).</p></li>
<li><p>It was again revised in 1974 and 1985 to develop subsequent versions named COBOL-74 and COBOL-85 respectively.</p></li>
<li><p>In 2002, Object-Oriented COBOL was released, which could use encapsulated objects as a normal part of COBOL programming.</p></li>
</ul>
<h2>Importance of COBOL</h2>
<ul class="list">
<li><p>COBOL was the first widely used high-level programming language. It is an English-like language which is user friendly. All the instructions can be coded in simple English words.</p></li>
<li><p>COBOL is also used as a self-documenting language.</p></li>
<li><p>COBOL can handle huge data processing.</p></li>
<li><p>COBOL is compatible with its previous versions.</p></li>
<li><p>COBOL has effective error messages and so, resolution of bugs is easier.</p></li>
</ul>
<h2>Features of COBOL</h2>
<h3>Standard Language</h3>
<p>COBOL is a standard language that can be compiled and executed on machines such as IBM AS/400, personal computers, etc.</p>
<h3>Business Oriented</h3>
<p>COBOL was designed for business-oriented applications related to financial domain, defense domain, etc. It can handle huge volumes of data because of its advanced file handling capabilities.</p>
<h3>Robust Language</h3>
<p>COBOL is a robust language as its numerous debugging and testing tools are available for almost all computer platforms.</p>
<h3>Structured Language</h3>
<p>Logical control structures are available in COBOL which makes it easier to read and modify. COBOL has different divisions, so it is easy to debug.</p>
<h1>COBOL - Environment Setup</h1>
<h2>Installing COBOL on Windows/Linux</h2>      
<p>There are many Free Mainframe Emulators available for Windows which can be used to write and learn simple COBOL programs.</p>
<p>One such emulator is Hercules, which can be easily installed on Windows by following a few simple steps as given below &minus;</p>
<ul class="list">
<li><p>Download and install the Hercules emulator, which is available from the Hercules' home site: <a href="http://www.hercules-390.eu" target="_blank" rel="nofollow">www.hercules-390.eu</a></p></li>
<li><p>Once you have installed the package on Windows machine, it will create a folder like <b>C:/hercules/mvs/cobol</b>.</p></li>
<li><p>Run the Command Prompt (CMD) and reach the directory C:/hercules/mvs/cobol on CMD.</p></li>
<li><p>The complete guide on various commands to write and execute a JCL and COBOL programs can be found at:</p>
<p><b>www.jaymoseley.com/hercules/installmvs/instmvs2.htm</b></p></li>
</ul>
<p>Hercules is an open-source software implementation of the mainframe System/370 and ESA/390 architectures, in addition to the latest 64-bit z/Architecture. Hercules runs under Linux, Windows, Solaris, FreeBSD, and Mac OS X.</p>
<p>A user can connect to a mainframe server in a number of ways such as thin client, dummy terminal, Virtual Client System (VCS), or Virtual Desktop System (VDS). Every valid user is given a login id to enter into the Z/OS interface (TSO/E or ISPF).</p>
<h2>Compiling COBOL Programs</h2>   
<p>In order to execute a COBOL program in batch mode using JCL, the program needs to be compiled, and a load module is created with all the sub-programs. The JCL uses the load module and not the actual program at the time of execution. The load libraries are concatenated and given to the JCL at the time of execution using <b>JCLLIB</b> or <b>STEPLIB</b>.</p>
<p>There are many mainframe compiler utilities available to compile a COBOL program. Some corporate companies use Change Management tools like <b>Endevor</b>, which compiles and stores every version of the program. This is useful in tracking the changes made to the program.</p>
<pre class="prettyprint notranslate">
//COMPILE   JOB ,CLASS = 6,MSGCLASS = X,NOTIFY = &amp;SYSUID             
//*            
//STEP1     EXEC IGYCRCTL,PARM = RMODE,DYNAM,SSRANGE
//SYSIN     DD DSN = MYDATA.URMI.SOURCES(MYCOBB),DISP = SHR
//SYSLIB    DD DSN = MYDATA.URMI.COPYBOOK(MYCOPY),DISP = SHR
//SYSLMOD   DD DSN = MYDATA.URMI.LOAD(MYCOBB),DISP = SHR
//SYSPRINT  DD SYSOUT=*
//*
</pre>
<p>IGYCRCTL is an IBM COBOL compiler utility. The compiler options are passed using the PARM parameter. In the above example, RMODE instructs the compiler to use relative addressing mode in the program. The COBOL program is passed using the SYSIN parameter. Copybook is the library used by the program in SYSLIB.</p>
<h2>Executing COBOL Programs</h2>   
<p>Given below is a JCL example where the program MYPROG is executed using the input file MYDATA.URMI.INPUT and produces two output files written to the spool.</p>
<pre class="prettyprint notranslate">
//COBBSTEP  JOB CLASS = 6,NOTIFY = &amp;SYSUID
//
//STEP10    EXEC PGM = MYPROG,PARM = ACCT5000
//STEPLIB   DD DSN = MYDATA.URMI.LOADLIB,DISP = SHR
//INPUT1    DD DSN = MYDATA.URMI.INPUT,DISP = SHR
//OUT1      DD SYSOUT=*
//OUT2      DD SYSOUT=*
//SYSIN     DD *
//CUST1     1000
//CUST2     1001
/*
</pre>
<p>The load module of MYPROG is located in MYDATA.URMI.LOADLIB. This is important to note that the above JCL can be used for a non-DB2 COBOL module only.</p>
<h2>Executing COBOL-DB2 programs</h2>
<p>For running a COBOL-DB2 program, a specialized IBM utility is used in the JCL and the program; DB2 region and required parameters are passed as input to the utility.</p>
<p>The steps followed in running a COBOL-DB2 program are as follows &minus;</p>
<ul class="list">
<li><p>When a COBOL-DB2 program is compiled, a DBRM (Database Request Module) is created along with the load module. The DBRM contains the SQL statements of the COBOL programs with its syntax checked to be correct.</p></li>
<li><p>The DBRM is bound to the DB2 region (environment) in which the COBOL will run. This can be done using the IKJEFT01 utility in a JCL.</p></li>
<li><p>After the bind step, the COBOL-DB2 program is run using IKJEFT01 (again) with the load library and the DBRM library as the input to the JCL.</p></li>
</ul>
<pre class="prettyprint notranslate">
//STEP001  EXEC PGM = IKJEFT01
//*
//STEPLIB  DD DSN = MYDATA.URMI.DBRMLIB,DISP = SHR
//*
//input files
//output files
//SYSPRINT DD SYSOUT=*
//SYSABOUT DD SYSOUT=*
//SYSDBOUT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//DISPLAY  DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
   DSN SYSTEM(SSID)
   RUN PROGRAM(MYCOBB) PLAN(PLANNAME) PARM(parameters to cobol program) -
   LIB('MYDATA.URMI.LOADLIB')
   END
/*
</pre>
<p>In the above example, MYCOBB is the COBOL-DB2 program run using IKJEFT01. Please note that the program name, DB2 Sub-System Id (SSID), and DB2 Plan name are passed within the SYSTSIN DD statement. The DBRM library is specified in the STEPLIB.</p>
<h1>COBOL - Program Structure</h1>
<p>A COBOL program structure consists of divisions as shown in the following image &minus;</p>
<img src="/cobol/images/program_structure.jpg" alt="Program Structure" />
<p>A brief introduction of these divisions is given below &minus;</p>
<ul class="list"> 
<li><p><b>Sections</b> are the logical subdivision of program logic. A section is a collection of paragraphs.</p></li>
<li><p><b>Paragraphs</b> are the subdivision of a section or division. It is either a user-defined or a predefined name followed by a period, and consists of zero or more sentences/entries.</p></li>
<li><p><b>Sentences</b> are the combination of one or more statements. Sentences appear only in the Procedure division. A sentence must end with a period.</p></li>
<li><p><b>Statements</b> are meaningful COBOL statements that perform some processing.</p></li>
<li><p><b>Characters</b> are the lowest in the hierarchy and cannot be divisible.</p></li>
</ul>
<p>You can co-relate the above-mentioned terms with the COBOL program in the following example &minus;</p>
<pre class="prettyprint notranslate">
PROCEDURE DIVISION.
A0000-FIRST-PARA SECTION.
FIRST-PARAGRAPH.
ACCEPT WS-ID            - Statement-1  -----|
MOVE '10' TO WS-ID      - Statement-2       |-- Sentence - 1
DISPLAY WS-ID           - Statement-3  -----|
.
</pre>
<h2>Divisions</h2>
<p>A COBOL program consists of four divisions.</p>
<h3>Identification Division</h3>
<p>It is the first and only mandatory division of every COBOL program. The programmer and the compiler use this division to identify the program. In this division, PROGRAM-ID is the only mandatory paragraph. PROGRAM-ID specifies the program name that can consist 1 to 30 characters.</p>
<p>Try the following example using the <b>Live Demo</b> option online.</p>
<div class="demo-view">
<a href="http://tpcg.io/gJZ23N" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.
PROCEDURE DIVISION.
DISPLAY 'Welcome to Tutorialspoint'.
STOP RUN.
</pre>
<p>Given below is the <b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Welcome to Tutorialspoint
</pre>
<h3>Environment Division</h3>
<p>Environment division is used to specify input and output files to the program. It consists of two sections &minus;</p>
<ul class="list">
<li><p><b>Configuration section</b> provides information about the system on which the program is written and executed. It consists of two paragraphs &minus;</p>
<ul class="list">
<li><p>Source computer &minus; System used to compile the program.</p></li>
<li><p>Object computer &minus; System used to execute the program.</p></li>
</ul></li>
<li><p><b>Input-Output section</b> provides information about the files to be used in the program. It consists of two paragraphs &minus;</p>
<ul class="list">
<li><p>File control &minus; Provides information of external data sets used in the program.</p></li>
<li><p>I-O control &minus; Provides information of files used in the program.</p></li>
</ul></li>
</ul>  
<pre class="prettyprint notranslate">
ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
   SOURCE-COMPUTER. XXX-ZOS.
   OBJECT-COMPUTER. XXX-ZOS.

INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT FILEN ASSIGN TO DDNAME
   ORGANIZATION IS SEQUENTIAL.
</pre>
<h3>Data Division</h3>
<p>Data division is used to define the variables used in the program. It consists of four sections &minus;</p>
<ul class="list">
<li><p><b>File section</b> is used to define the record structure of the file.</p></li>
<li><p><b>Working-Storage section</b> is used to declare temporary variables and file structures which are used in the program.</p></li>
<li><p><b>Local-Storage section</b> is similar to Working-Storage section. The only difference is that the variables will be allocated and initialized every time a program starts execution.</p></li>
<li><p><b>Linkage section</b> is used to describe the data names that are received from an external program.</p></li>
</ul>
<p><b>COBOL Program</b></p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT FILEN ASSIGN TO INPUT.
      ORGANIZATION IS SEQUENTIAL.
      ACCESS IS SEQUENTIAL.

DATA DIVISION.
   FILE SECTION.
   FD FILEN
   01 NAME PIC A(25).
   
   WORKING-STORAGE SECTION.
   01 WS-STUDENT PIC A(30).
   01 WS-ID PIC 9(5).

   LOCAL-STORAGE SECTION.
   01 LS-CLASS PIC 9(3).
   
   LINKAGE SECTION.
   01 LS-ID PIC 9(5).
   
PROCEDURE DIVISION.
   DISPLAY 'Executing COBOL program using JCL'.
STOP RUN.
</pre>
<p>The <b>JCL</b> to execute the above COBOL program is as follows &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//INPUT DD DSN = ABC.EFG.XYZ,DISP = SHR
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Executing COBOL program using JCL
</pre>
<h3>Procedure Division</h3>
<p>Procedure division is used to include the logic of the program. It consists of executable statements using variables defined in the data division. In this division, paragraph and section names are user-defined.</p>
<p>There must be at least one statement in the procedure division. The last statement to end the execution in this division is either <b>STOP RUN</b> which is used in the calling programs or <b>EXIT PROGRAM</b> which is used in the called programs.</p>
<div class="demo-view">
<a href="http://tpcg.io/h78ORO" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NAME PIC A(30).
   01 WS-ID PIC 9(5) VALUE '12345'.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   DISPLAY 'Hello World'.
   MOVE 'TutorialsPoint' TO WS-NAME.
   DISPLAY "My name is : "WS-NAME.
   DISPLAY "My ID is : "WS-ID.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Hello World
My name is : TutorialsPoint
My ID is : 12345
</pre>
<h1>COBOL - Basic Syntax</h1>
<h2>Character Set</h2>
<p>'Characters' are lowest in the hierarchy and they cannot be divided further. The COBOL Character Set includes 78 characters which are shown below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:11%;">Sr.No.</th>
<th>Character &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>A-Z</b></p>
<p>Alphabets(Upper Case)</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>a-z</b></p>
<p>Alphabets (Lower Case)</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>0-9</b></p>
<p>Numeric</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p>&nbsp;</p>
<p>Space</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>+</b></p>
<p>Plus Sign</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>-</b></p>
<p>Minus Sign or Hyphen</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>*</b></p>
<p>Asterisk</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>/</b></p>
<p>Forward Slash</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>$</b></p>
<p>Currency Sign</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>,</b></p>
<p>Comma</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>;</b></p>
<p>Semicolon</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>.</b></p>
<p>Decimal Point or Period</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td>
<p><b>"</b></p>
<p>Quotation Marks</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td>
<p><b>(</b></p>
<p>Left Parenthesis</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td>
<p><b>)</b></p>
<p>Right Parenthesis</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td>
<p><b>&gt;</b></p>
<p>Greater than</p></td>
</tr>
<tr>
<td class="ts">17</td>
<td>
<p><b>&lt;</b></p>
<p>Less than</p></td>
</tr>
<tr>
<td class="ts">18</td>
<td>
<p><b>:</b></p>
<p>Colon</p></td>
</tr>
<tr>
<td class="ts">19</td>
<td>
<p><b>'</b></p>
<p>Apostrophe</p></td>
</tr>
<tr>
<td class="ts">20</td>
<td>
<p><b>=</b></p>
<p>Equal Sign</p></td>
</tr>
</table>
<h2>Coding Sheet</h2>
<p>The source program of COBOL must be written in a format acceptable to the compilers. COBOL programs are written on COBOL coding sheets. There are 80 character positions on each line of a coding sheet.</p>
<p>Character positions are grouped into the following five fields &minus;</p>
<table style="text-align:center;" class="table table-bordered">
<tr>
<th style="text-align:center;">Positions</th>
<th style="text-align:center;width:145px">Field</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;">1-6</td>
<td style="text-align:center;">Column Numbers</td>
<td>Reserved for line numbers.</td>
</tr>
<tr>
<td class="ts">7</td>
<td class="ts">Indicator</td>
<td>It can have Asterisk (*) indicating comments, Hyphen (-) indicating continuation and Slash ( / ) indicating form feed.</td>
</tr>
<tr>
<td class="ts">8-11</td>
<td class="ts">Area A</td>
<td>All COBOL divisions, sections, paragraphs and some special entries must begin in Area A.</td>
</tr>
<tr>
<td style="text-align:center;">12-72</td>
<td style="text-align:center;">Area B</td>
<td>All COBOL statements must begin in area B.</td>
</tr>
<tr>
<td class="ts">73-80</td>
<td class="ts">Identification Area</td>
<td style="vertical-align:middle;">It can be used as needed by the programmer.</td>
</tr>
</table>
<h3>Example</h3>
<p>The following example shows a COBOL coding sheet &minus;</p>
<pre class="prettyprint notranslate">
000100 IDENTIFICATION DIVISION.                                         000100
000200 PROGRAM-ID. HELLO.                                               000101
000250* THIS IS A COMMENT LINE                                          000102
000300 PROCEDURE DIVISION.                                              000103
000350 A000-FIRST-PARA.                                                 000104
000400     DISPLAY “Coding Sheet”.                                      000105
000500 STOP RUN.                                                        000106
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Coding Sheet
</pre>
<h2>Character Strings</h2>
<p>Character strings are formed by combining individual characters. A character string can be a</p>
<ul class="list">
<li>Comment,</li>
<li>Literal, or</li>
<li>COBOL word.</li>
</ul>
<p>All character strings must be ended with <b>separators</b>. A separator is used to separate character strings.</p>
<p>Frequently used separators &minus; Space, Comma, Period, Apostrophe, Left/Right Parenthesis, and Quotation mark.</p>
<h2>Comment</h2>
<p>A comment is a character string that does not affect the execution of a program. It can be any combination of characters.</p>
<p>There are two types of comments &minus;</p>
<h3>Comment Line</h3>
<p>A comment line can be written in any column. The compiler does not check a comment line for syntax and treats it for documentation.</p>
<h3>Comment Entry</h3>
<p>Comment entries are those that are included in the optional paragraphs of an Identification Division. They are written in Area B and programmers use it for reference.</p>
<p>The text highlighted in <b>Bold</b> are the commented entries in the following example &minus;</p>
<pre class="prettyprint notranslate">
000100 IDENTIFICATION DIVISION.                                         000100
000150 PROGRAM-ID. HELLO.                                               000101 
000200 AUTHOR. <b>TUTORIALSPOINT</b>.                                          000102
000250* THIS IS A COMMENT LINE                                          000103
000300 PROCEDURE DIVISION.                                              000104
000350 A000-FIRST-PARA.                                                 000105  
000360/ First Para Begins - Documentation Purpose                       000106
000400     DISPLAY “Comment line”.                                      000107
000500 STOP RUN.                                                        000108
</pre>
<p><b>JCL</b> to execute above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Comment Line
</pre>
<h2>Literal</h2>
<p>Literal is a constant that is directly hard-coded in a program. In the following example, "Hello World" is a literal.</p>
<pre class="prettyprint notranslate">
PROCEDURE DIVISION.
DISPLAY 'Hello World'.
</pre>
<p>There are two types of literals as discussed below &minus;</p>
<h3>Alphanumeric Literal</h3>
<p>Alphanumeric Literals are enclosed in quotes or apostrophe. Length can be up to 160 characters. An apostrophe or a quote can be a part of a literal only if it is paired. Starting and ending of the literal should be same, either apostrophe or quote.</p>
<p><b>Example</b></p>
<p>The following example shows valid and invalid Alphanumeric Literals &minus;</p>
<pre class="prettyprint notranslate">
Valid:
   ‘This is valid’
   "This is valid"
   ‘This isn’’t invalid’

Invalid:
   ‘This is invalid”
   ‘This isn’t valid’
</pre>
<h3>Numeric Literal</h3>
<p>A Numeric Literal is a combination of digits from 0 to 9, +, –, or decimal point. Length can be up to 18 characters. Sign cannot be the rightmost character. Decimal point should not appear at the end.</p>
<p><b>Example</b></p>
<p>The following example shows valid and invalid Numeric Literals &minus;</p>
<pre class="prettyprint notranslate">
Valid:
   100
   +10.9
   -1.9

Invalid:
   1,00
   10.
   10.9-
</pre>
<h2>COBOL Word</h2>
<p>COBOL Word is a character string that can be a reserved word or a user-defined word. Length can be up to 30 characters.</p>
<h3>User-Defined</h3>
<p>User-defined words are used for naming files, data, records, paragraph names, and sections. Alphabets, digits, and hyphens are allowed while forming userdefined words. You cannot use COBOL reserved words.</p>
<h3>Reserved Words</h3>
<p>Reserved words are predefined words in COBOL. Different types of reserved words that we use frequently are as follows &minus;</p>
<ul class="list">
<li><p><b>Keywords</b> like ADD, ACCEPT, MOVE, etc.</p></li>
<li><p><b>Special characters</b> words like +, -, *, &lt;, &lt;=, etc</p></li>
<li><p><b>Figurative constants</b> are constant values like ZERO, SPACES, etc. All the constant values of figurative constants are mentioned in the following table.</p></li>
</ul>
<h3>Figurative Constants</h3> 
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:11%;">Sr.No.</th>
<th class="ts">Figurative Constants &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>HIGH-VALUES</b></p>
<p>One or more characters which will be at the highest position in descending order.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>LOW-VALUES</b></p>
<p>One or more characters have zeros in binary representation.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>ZERO/ZEROES</b></p>
<p>One or more zero depending on the size of the variable.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>SPACES</b></p>
<p>One or more spaces.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>QUOTES</b></p>
<p>Single or double quotes.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>ALL literal</b></p>
<p>Fills the data-item with Literal.</p></td>
</tr>
</table>
<h1>COBOL - Data Types</h1>
<p>Data Division is used to define the variables used in a program. To describe data in COBOL, one must understand the following terms &minus;</p>
<ul class="list"> 
<li>Data Name</li>
<li>Level Number</li>
<li>Picture Clause</li>
<li>Value Clause</li>
</ul>
<pre class="result notranslate">
01            TOTAL-STUDENTS            PIC9(5)            VALUE '125'.
|                    |                    |                    |
|                    |                    |                    |
|                    |                    |                    | 
Level Number     Data Name           Picture Clause       Value Clause
</pre>
<h2>Data Name</h2>
<p>Data names must be defined in the Data Division before using them in the Procedure Division. They must have a user-defined name; reserved words cannot be used. Data names give reference to the memory locations where actual data is stored. They can be elementary or group type.</p>
<h3>Example</h3>
<p>The following example shows valid and invalid data names &minus;</p>
<pre class="prettyprint notranslate">
Valid:
   WS-NAME
   TOTAL-STUDENTS
   A100
   100B

Invalid:
   MOVE            (Reserved Words)
   COMPUTE         (Reserved Words)
   100             (No Alphabet)
   100+B           (+ is not allowed) 
</pre>
<h2>Level Number</h2>
<p>Level number is used to specify the level of data in a record. They are used to differentiate between elementary items and group items. Elementary items can be grouped together to create group items.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:11%;">Sr.No.</th>
<th style="text-align:center;">Level Number &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>01</b></p>
<p>Record description entry</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>02 to 49</b></p>
<p>Group and Elementary items</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>66</b></p>
<p>Rename Clause items</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>77</b></p>
<p>Items which cannot be sub-divided</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>88</b></p>
<p>Condition name entry</p></td>
</tr>
</table>
<ul class="list"> 
<li><p><b>Elementary items</b> cannot be divided further. Level number, Data name, Picture clause, and Value clause (optional) are used to describe an elementary item.</p></li>
<li><p><b>Group items</b> consist of one or more elementary items. Level number, Data name, and Value clause (optional) are used to describe a group item. Group level number is always 01.</p></li>
</ul>
<h3>Example</h3>
<p>The following example shows Group and Elementary items &minus;</p>
<pre class="prettyprint notranslate">
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-NAME    PIC X(25).                               ---> ELEMENTARY ITEM 
01 WS-CLASS   PIC 9(2)  VALUE  '10'.                   ---> ELEMENTARY ITEM

01 WS-ADDRESS.                                         ---> GROUP ITEM   
   05 WS-HOUSE-NUMBER    PIC 9(3).                     ---> ELEMENTARY ITEM
   05 WS-STREET          PIC X(15).                    ---> ELEMENTARY ITEM
   05 WS-CITY            PIC X(15).                    ---> ELEMENTARY ITEM
   05 WS-COUNTRY         PIC X(15)  VALUE 'INDIA'.     ---> ELEMENTARY ITEM
</pre>
<h2>Picture Clause</h2>
<p>Picture clause is used to define the following items &minus;</p>
<ul class="list"> 
<li><p><b>Data type</b> can be numeric, alphabetic, or alphanumeric. Numeric type consists of only digits 0 to 9. Alphabetic type consists of letters A to Z and spaces. Alphanumeric type consists of digits, letters, and special characters.</p></li>
<li><p><b>Sign</b> can be used with numeric data. It can be either + or –.</p></li>
<li><p><b>Decimal point position</b> can be used with numeric data. Assumed position is the position of decimal point and not included in the data.</p></li>
<li><p><b>Length</b> defines the number of bytes used by the data item.</p></li>
</ul>
<p>Symbols used in a Picture clause &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:11%;">Sr.No.</th>
<th style="text-align:center;">Symbol &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>9</b></p>
<p>Numeric</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>A</b></p>
<p>Alphabetic</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>X</b></p>
<p>Alphanumeric</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>V</b></p>
<p>Implicit Decimal</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>S</b></p>
<p>Sign</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>P</b></p>
<p>Assumed Decimal</p></td>
</tr>
</table>
<h3>Example</h3>
<p>The following example shows the use of PIC clause &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/vzwe3b" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC S9(3)V9(2).
   01 WS-NUM2 PIC PPP999.
   01 WS-NUM3 PIC S9(3)V9(2) VALUE -123.45.
   01 WS-NAME PIC A(6) VALUE 'ABCDEF'.
   01 WS-ID PIC X(5) VALUE 'A121$'.

PROCEDURE DIVISION.
   DISPLAY "WS-NUM1 : "WS-NUM1.
   DISPLAY "WS-NUM2 : "WS-NUM2.
   DISPLAY "WS-NUM3 : "WS-NUM3.
   DISPLAY "WS-NAME : "WS-NAME.
   DISPLAY "WS-ID : "WS-ID.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1 : +000.00
WS-NUM2 : .000000
WS-NUM3 : -123.45
WS-NAME : ABCDEF
WS-ID : A121$
</pre>
<h2>Value Clause</h2>
<p>Value clause is an optional clause which is used to initialize the data items. The values can be numeric literal, alphanumeric literal, or figurative constant. It can be used with both group and elementary items.</p>
<h3>Example</h3>
<p>The following example shows the use of VALUE clause &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/l0CkgL" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 99V9 VALUE IS 3.5.
   01 WS-NAME PIC A(6) VALUE 'ABCD'.
   01 WS-ID PIC 99 VALUE ZERO.

PROCEDURE DIVISION.
   DISPLAY "WS-NUM1 : "WS-NUM1.
   DISPLAY "WS-NAME : "WS-NAME.
   DISPLAY "WS-ID   : "WS-ID.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1 : 03.5
WS-NAME : ABCD
WS-ID   : 00
</pre>
<h1>COBOL - Basic Verbs</h1>
<p>COBOL verbs are used in the procedure division for data processing. A statement always start with a COBOL verb. There are several COBOL verbs with different types of actions.</p>
<h2>Input / Output Verbs</h2>
<p>Input/Output verbs are used to get data from the user and display the output of COBOL programs. The following two verbs are used for this process &minus;</p>
<h3>Accept Verb</h3>
<p>Accept verb is used to get data such as date, time, and day from the operating system or directly from the user. If a program is accepting data from the user, then it needs to be passed through JCL. While getting data from the operating system, FROM option is included as shown in the following example &minus;</p>
<pre class="result notranslate">
ACCEPT WS-STUDENT-NAME.
ACCEPT WS-DATE FROM SYSTEM-DATE.
</pre>
<h3>Display Verb</h3>
<p>Display verb is used to display the output of a COBOL program.</p>
<pre class="result notranslate">
DISPLAY WS-STUDENT-NAME.
DISPLAY "System date is : " WS-DATE.
</pre>
<p><b>COBOL PROGRAM</b></p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-STUDENT-NAME PIC X(25).
   01 WS-DATE PIC X(10).

PROCEDURE DIVISION.
   ACCEPT WS-STUDENT-NAME.
   ACCEPT WS-DATE FROM DATE.
   DISPLAY "Name :  " WS-STUDENT-NAME.
   DISPLAY "Date : " WS-DATE.

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//INPUT DD DSN=PROGRAM.DIRECTORY,DISP=SHR
//SYSIN DD *
TutorialsPoint
/*
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Name : TutorialsPoint
Date : 2014-08-30
</pre>
<h2>Initialize Verb</h2>
<p>Initialize verb is used to initialize a group item or an elementary item. Data names with RENAME clause cannot be initialized. Numeric data items are replaced by ZEROES. Alphanumeric or alphabetic data items are replaced by SPACES. If we include REPLACING term, then data items can be initialized to the given replacing value as shown in the following example &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/IYEYrw" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NAME PIC A(30) VALUE 'ABCDEF'.
   01 WS-ID PIC 9(5).
   01 WS-ADDRESS. 
   05 WS-HOUSE-NUMBER PIC 9(3).
   05 WS-COUNTRY PIC X(15).
   05 WS-PINCODE PIC 9(6) VALUE 123456.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   INITIALIZE WS-NAME, WS-ADDRESS.
   INITIALIZE WS-ID REPLACING NUMERIC DATA BY 12345.
   DISPLAY "My name is   : "WS-NAME.
   DISPLAY "My ID is     : "WS-ID.
   DISPLAY "Address      : "WS-ADDRESS.
   DISPLAY "House Number : "WS-HOUSE-NUMBER.
   DISPLAY "Country      : "WS-COUNTRY.
   DISPLAY "Pincode      : "WS-PINCODE.

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
My name is   :                               
My ID is     : 12345
Address      : 000               000000
House Number : 000
Country      :                
Pincode      : 000000
</pre>
<h2>Move Verb</h2>
<p>Move verb is used to copy data from source data to destination data. It can be used on both elementary and group data items. For group data items, MOVE CORRESPONDING/CORR is used. In try it option, MOVE CORR is not working; but on a mainframe server, it will work.</p> 
<p>For moving data from a string, MOVE(x:l) is used where x is the starting position and l is the length. Data will be truncated if the destination data item PIC clause is less than the source data item PIC clause. If the destination data item PIC clause is more than the source data item PIC clause, then ZEROS or SPACES will be added in the extra bytes. The following example makes it clear.</p>
<div class="demo-view">
<a href="http://tpcg.io/leYd51" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9).
   01 WS-NUM2 PIC 9(9).
   01 WS-NUM3 PIC 9(5).
   01 WS-NUM4 PIC 9(6).
   01 WS-ADDRESS. 
   05 WS-HOUSE-NUMBER PIC 9(3).
   05 WS-COUNTRY PIC X(5).
   05 WS-PINCODE PIC 9(6).
   01 WS-ADDRESS1. 
   05 WS-HOUSE-NUMBER1 PIC 9(3).
   05 WS-COUNTRY1 PIC X(5).
   05 WS-PINCODE1 PIC 9(6).

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   MOVE 123456789 TO WS-NUM1.
   MOVE WS-NUM1 TO WS-NUM2 WS-NUM3.
   MOVE WS-NUM1(3:6) TO WS-NUM4.
   MOVE 123 TO WS-HOUSE-NUMBER.
   MOVE 'INDIA' TO WS-COUNTRY.
   MOVE 112233 TO WS-PINCODE.
   MOVE WS-ADDRESS TO WS-ADDRESS1.

   DISPLAY "WS-NUM1     : " WS-NUM1
   DISPLAY "WS-NUM2     : " WS-NUM2
   DISPLAY "WS-NUM3     : " WS-NUM3
   DISPLAY "WS-NUM4     : " WS-NUM4
   DISPLAY "WS-ADDRESS  : " WS-ADDRESS
   DISPLAY "WS-ADDRESS1 : " WS-ADDRESS1

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1     : 123456789
WS-NUM2     : 123456789
WS-NUM3     : 56789
WS-NUM4     : 345678
WS-ADDRESS  : 123INDIA112233
WS-ADDRESS1 : 123INDIA112233
</pre>
<h2>Legal Moves</h2>
<p>The following table gives information about the legal moves &minus;</p>
<table style="text-align:center;" class="table table-bordered">
<tr>
<th></th>
<th style="text-align:center;">Alphabetic</th>
<th style="text-align:center;">Alphanumeric</th>
<th style="text-align:center;">Numeric</th>
</tr>
<tr>
<th style="text-align:center;">Alphabetic</th>
<td>Possible</td>
<td>Possible</td>
<td>Not Possible</td>
</tr>
<tr>
<th style="text-align:center;">Alphanumeric</th>
<td>Possible</td>
<td>Possible</td>
<td>Possible</td>
</tr>
<tr>
<th style="text-align:center;">Numeric</th>
<td>Not Possible</td>
<td>Possible</td>
<td>Possible</td>
</tr>
</table>
<h2>Add Verb</h2>
<p>Add verb is used to add two or more numbers and store the result in the destination operand.</p>
<h3>Syntax</h3>
<p>Given below is the syntax to Add two or more numbers &minus;</p>
<pre class="result notranslate">
ADD A B TO C D

ADD A B C TO D GIVING E

ADD CORR WS-GROUP1 TO WS-GROUP2
</pre>
<p>In syntax-1, A, B, C are added and the result is stored in C (C=A+B+C). A, B, D are added and the result is stored in D (D = A + B + D).</p>
<p>In syntax-2, A, B, C, D are added and the result is stored in E (E=A+B+C+D).</p> 
<p>In syntax-3, sub-group items within WS-GROUP1 and WS-GROUP2 are added and the result is stored in WS-GROUP2.</p> 
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/vjZfDi" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9) VALUE 10 .
   01 WS-NUM2 PIC 9(9) VALUE 10.
   01 WS-NUM3 PIC 9(9) VALUE 10.
   01 WS-NUM4 PIC 9(9) VALUE 10.
   01 WS-NUMA PIC 9(9) VALUE 10.
   01 WS-NUMB PIC 9(9) VALUE 10.
   01 WS-NUMC PIC 9(9) VALUE 10.
   01 WS-NUMD PIC 9(9) VALUE 10.
   01 WS-NUME PIC 9(9) VALUE 10.

PROCEDURE DIVISION.
   ADD WS-NUM1 WS-NUM2 TO WS-NUM3 WS-NUM4.
   ADD WS-NUMA WS-NUMB WS-NUMC TO WS-NUMD GIVING WS-NUME.
   DISPLAY "WS-NUM1     : " WS-NUM1
   DISPLAY "WS-NUM2     : " WS-NUM2
   DISPLAY "WS-NUM3     : " WS-NUM3
   DISPLAY "WS-NUM4     : " WS-NUM4
   DISPLAY "WS-NUMA     : " WS-NUMA
   DISPLAY "WS-NUMB     : " WS-NUMB
   DISPLAY "WS-NUMC     : " WS-NUMC
   DISPLAY "WS-NUMD     : " WS-NUMD
   DISPLAY "WS-NUME     : " WS-NUME

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1     : 000000010
WS-NUM2     : 000000010
WS-NUM3     : 000000030
WS-NUM4     : 000000030
WS-NUMA     : 000000010
WS-NUMB     : 000000010
WS-NUMC     : 000000010
WS-NUMD     : 000000010
WS-NUME     : 000000040
</pre>
<h2>Subtract Verb</h2>
<p>Subtract verb is used for subtraction operations.</p>
<h3>Syntax</h3>
<p>Given below is the syntax for Subtract operations &minus;</p>
<pre class="result notranslate">
SUBTRACT A B FROM C D

SUBTRACT A B C FROM D GIVING E

SUBTRACT CORR WS-GROUP1 TO WS-GROUP2
</pre>
<p>In syntax-1, A and B are added and subtracted from C. The result is stored in C (C = C-(A+B)). A and B are added and subtracted from D. The result is stored in D (D = D-(A+B)).</p>
<p>In syntax-2, A, B, C are added and subtracted from D. The result is stored in E (E = D-(A+B+C))</p> 
<p>In syntax-3, sub-group items within WS-GROUP1 and WS-GROUP2 are subtracted and the result is stored in WS-GROUP2.</p> 
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/bp5Uih" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9) VALUE 10 .
   01 WS-NUM2 PIC 9(9) VALUE 10.
   01 WS-NUM3 PIC 9(9) VALUE 100.
   01 WS-NUM4 PIC 9(9) VALUE 100.
   01 WS-NUMA PIC 9(9) VALUE 10.
   01 WS-NUMB PIC 9(9) VALUE 10.
   01 WS-NUMC PIC 9(9) VALUE 10.
   01 WS-NUMD PIC 9(9) VALUE 100.
   01 WS-NUME PIC 9(9) VALUE 10.

PROCEDURE DIVISION.
   SUBTRACT WS-NUM1 WS-NUM2 FROM WS-NUM3 WS-NUM4.
   SUBTRACT WS-NUMA WS-NUMB WS-NUMC FROM WS-NUMD GIVING WS-NUME.

   DISPLAY "WS-NUM1     : " WS-NUM1
   DISPLAY "WS-NUM2     : " WS-NUM2
   DISPLAY "WS-NUM3     : " WS-NUM3
   DISPLAY "WS-NUM4     : " WS-NUM4
   DISPLAY "WS-NUMA     : " WS-NUMA
   DISPLAY "WS-NUMB     : " WS-NUMB
   DISPLAY "WS-NUMC     : " WS-NUMC
   DISPLAY "WS-NUMD     : " WS-NUMD
   DISPLAY "WS-NUME     : " WS-NUME

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1     : 000000010
WS-NUM2     : 000000010
WS-NUM3     : 000000080
WS-NUM4     : 000000080
WS-NUMA     : 000000010
WS-NUMB     : 000000010
WS-NUMC     : 000000010
WS-NUMD     : 000000100
WS-NUME     : 000000070
</pre>
<h2>Multiply Verb</h2>
<p>Multiply verb is used for multiplication operations.</p>
<h3>Syntax</h3>
<p>Given below is the syntax to multiply two or more numbers &minus;</p>
<pre class="result notranslate">
MULTIPLY A BY B C

MULTIPLY A BY B GIVING E
</pre>
<p>In syntax-1, A and B are multipled and the result is stored in B (B=A*B). A and C are multipled and the result is stored in C (C = A * C).</p> 
<p>In syntax-2, A and B are multipled and the result is stored in E (E=A*B).</p> 
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/XmhPoy" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9) VALUE 10 .
   01 WS-NUM2 PIC 9(9) VALUE 10.
   01 WS-NUM3 PIC 9(9) VALUE 10.
   01 WS-NUMA PIC 9(9) VALUE 10.
   01 WS-NUMB PIC 9(9) VALUE 10.
   01 WS-NUMC PIC 9(9) VALUE 10.

PROCEDURE DIVISION.
   MULTIPLY WS-NUM1 BY WS-NUM2 WS-NUM3.
   MULTIPLY WS-NUMA BY WS-NUMB GIVING WS-NUMC.
   
   DISPLAY "WS-NUM1     : " WS-NUM1
   DISPLAY "WS-NUM2     : " WS-NUM2
   DISPLAY "WS-NUM3     : " WS-NUM3
   DISPLAY "WS-NUMA     : " WS-NUMA
   DISPLAY "WS-NUMB     : " WS-NUMB
   DISPLAY "WS-NUMC     : " WS-NUMC
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1     : 000000010
WS-NUM2     : 000000100
WS-NUM3     : 000000100
WS-NUMA     : 000000010
WS-NUMB     : 000000010
WS-NUMC     : 000000100
</pre>
<h2>Divide Verb</h2>
<p>Divide verb is used for division operations.</p>
<h3>Syntax</h3>
<p>Given below is the syntax for division operations &minus;</p>
<pre class="result notranslate">
DIVIDE A INTO B

DIVIDE A BY B GIVING C REMAINDER R
</pre>
<p>In syntax-1, B is divided by A and the result is stored in B (B=B/A).</p> 
<p>In syntax-2, A is divided by B and the result is stored in C (C=A/B) and the remainder is stored in R.</p> 
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/oFPX46" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9) VALUE 5.
   01 WS-NUM2 PIC 9(9) VALUE 250.
   01 WS-NUMA PIC 9(9) VALUE 100.
   01 WS-NUMB PIC 9(9) VALUE 15.
   01 WS-NUMC PIC 9(9).
   01 WS-REM PIC 9(9). 

PROCEDURE DIVISION.
   DIVIDE WS-NUM1 INTO WS-NUM2.
   DIVIDE WS-NUMA BY WS-NUMB GIVING WS-NUMC REMAINDER WS-REM.
   DISPLAY "WS-NUM1     : " WS-NUM1
   DISPLAY "WS-NUM2     : " WS-NUM2
   DISPLAY "WS-NUMA     : " WS-NUMA
   DISPLAY "WS-NUMB     : " WS-NUMB
   DISPLAY "WS-NUMC     : " WS-NUMC
   DISPLAY "WS-REM      : " WS-REM
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1     : 000000005
WS-NUM2     : 000000050
WS-NUMA     : 000000100
WS-NUMB     : 000000015
WS-NUMC     : 000000006
WS-REM      : 000000010
</pre>
<h2>Compute Statement</h2>
<p>Compute statement is used to write arithmetic expressions in COBOL. This is a replacement for Add, Subtract, Multiply, and Divide.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/kQPjso" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9) VALUE 10 .
   01 WS-NUM2 PIC 9(9) VALUE 10.
   01 WS-NUM3 PIC 9(9) VALUE 10.
   01 WS-NUMA PIC 9(9) VALUE 50.
   01 WS-NUMB PIC 9(9) VALUE 10.
   01 WS-NUMC PIC 9(9).

PROCEDURE DIVISION.
   COMPUTE WS-NUMC= (WS-NUM1 * WS-NUM2) - (WS-NUMA / WS-NUMB) + WS-NUM3.
   DISPLAY "WS-NUM1     : " WS-NUM1
   DISPLAY "WS-NUM2     : " WS-NUM2
   DISPLAY "WS-NUM3     : " WS-NUM3
   DISPLAY "WS-NUMA     : " WS-NUMA
   DISPLAY "WS-NUMB     : " WS-NUMB
   DISPLAY "WS-NUMC     : " WS-NUMC

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1     : 000000010
WS-NUM2     : 000000010
WS-NUM3     : 000000010
WS-NUMA     : 000000050
WS-NUMB     : 000000010
WS-NUMC     : 000000105
</pre>
<h1>COBOL - Data Layout</h1>
<p>COBOL layout is the description of use of each field and the values present in it. Following are the data description entries used in COBOL &minus;</p>
<ul class="list"> 
<li>Redefines Clause</li>
<li>Renames Clause</li>
<li>Usage Clause</li>
<li>Copybooks</li>
</ul>
<h2>Redefines Clause</h2>
<p>Redefines clause is used to define a storage with different data description. If one or more data items are not used simultaneously, then the same storage can be utilized for another data item. So the same storage can be referred with different data items.</p>
<h3>Syntax</h3>
<p>Following is the syntax for Redefines clause &minus;</p>
<pre class="result notranslate">
01 WS-OLD PIC X(10).
01 WS-NEW1 REDEFINES WS-OLD PIC 9(8).
01 WS-NEW2 REDEFINES WS-OLD PIC A(10).
</pre>
<p>Following are the details of the used parameters &minus;</p>
<ul class="list">
<li>WS-OLD is Redefined Item</li>
<li>WS-NEW1 and WS-NEW2 are Redefining Item</li>
</ul>
<p>Level numbers of redefined item and redefining item must be the same and it cannot be 66 or 88 level number. Do not use VALUE clause with a redefining item. In File Section, do not use a redefines clause with 01 level number. Redefines definition must be the next data description you want to redefine. A redefining item will always have the same value as a redefined item.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/Rocwap" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-DESCRIPTION.
   05 WS-DATE1 VALUE '20140831'.
   10 WS-YEAR PIC X(4).
   10 WS-MONTH PIC X(2).
   10 WS-DATE PIC X(2).
   05 WS-DATE2 REDEFINES WS-DATE1 PIC 9(8).

PROCEDURE DIVISION.
   DISPLAY "WS-DATE1 : "WS-DATE1.
   DISPLAY "WS-DATE2 : "WS-DATE2.

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program it produces the following result &minus;</p>
<pre class="result notranslate">
WS-DATE1 : 20140831
WS-DATE2 : 20140831
</pre>
<h2>Renames Clause</h2>
<p>Renames clause is used to give different names to existing data items. It is used to re-group the data names and give a new name to them. The new data names can rename across groups or elementary items. Level number 66 is reserved for renames.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax for Renames clause &minus;</p>
<pre class="result notranslate">
01 WS-OLD.
10 WS-A PIC 9(12).
10 WS-B PIC X(20).
10 WS-C PIC A(25).
10 WS-D PIC X(12).
66 WS-NEW RENAMES WS-A THRU WS-C.
</pre>
<p>Renaming is possible at same level only. In the above example, WS-A, WS-B, and WS-C are at the same level. Renames definition must be the next data description you want to rename. Do not use Renames with 01, 77, or 66 level number. The data names used for renames must come in sequence. Data items with occur clause cannot be renamed.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/SizHZP" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-DESCRIPTION.
   05 WS-NUM.
   10 WS-NUM1 PIC 9(2) VALUE 20.
   10 WS-NUM2 PIC 9(2) VALUE 56.
   05 WS-CHAR.
   10 WS-CHAR1 PIC X(2) VALUE 'AA'.
   10 WS-CHAR2 PIC X(2) VALUE 'BB'.
   66 WS-RENAME RENAMES WS-NUM2 THRU WS-CHAR2.

PROCEDURE DIVISION.
   DISPLAY "WS-RENAME : " WS-RENAME.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-RENAME : 56AABB
</pre>
<h2>Usage Clause</h2>
<p>Usage clause specifies the operating system in which the format data is stored. It cannot be used with level numbers 66 or 88. If usage clause is specified on a group, then all the elementary items will have the same usage clause. The different options available with Usage clause are as follows &minus;</p>
<h3>Display</h3> 
<p>Data item is stored in ASCII format and each character will take 1 byte. It is default usage.</p>
<p>The following example calculates the number of bytes required &minus;</p>
<pre class="prettyprint notranslate">
01 WS-NUM PIC S9(5)V9(3) USAGE IS DISPLAY.
It requires 8 bytes as sign and decimal doesn't require any byte.

01 WS-NUM PIC 9(5) USAGE IS DISPLAY.
It requires 5 bytes as sign.
</pre>
<h3>COMPUTATIONAL / COMP</h3> 
<p>Data item is stored in binary format. Here, data items must be integer.</p>
<p>The following example calculates the number of bytes required &minus;</p>
<pre class="prettyprint notranslate">
01 WS-NUM PIC S9(n) USAGE IS COMP.

If 'n' = 1 to 4, it takes 2 bytes.
If 'n' = 5 to 9, it takes 4 bytes.
If 'n' = 10 to 18, it takes 8 bytes.
</pre>
<h3>COMP-1</h3>  
<p>Data item is similar to Real or Float and is represented as a single precision floating point number. Internally, data is stored in hexadecimal format. COMP-1 does not accept PIC clause. Here 1 word is equal to 4 bytes.</p>
<h3>COMP-2</h3> 
<p>Data item is similar to Long or Double and is represented as double precision floating point number. Internally, data is stored in hexadecimal format.  COMP-2 does not specify PIC clause. Here 2 word is equal to 8 bytes.</p>
<h3>COMP-3</h3> 
<p>Data item is stored in packed decimal format. Each digit occupies half a byte (1 nibble) and the sign is stored at the rightmost nibble.</p>
<p>The following example calculates the number of bytes required &minus;</p>
<pre class="prettyprint notranslate">
01 WS-NUM PIC 9(n) USAGE IS COMP.
Number of bytes = n/2 (If n is even)
Number of bytes = n/2 + 1(If n is odd, consider only integer part)

01 WS-NUM PIC 9(4) USAGE IS COMP-3 VALUE 21.
It requires 2 bytes of storage as each digit occupies half a byte.

01 WS-NUM PIC 9(5) USAGE IS COMP-3 VALUE 21.
It requires 3 bytes of storage as each digit occupies half a byte.
</pre>
<h2>Copybooks</h2>
<p>A COBOL copybook is a selection of code that defines data structures. If a particular data structure is used in many programs, then instead of writing the same data structure again, we can use copybooks. We use the COPY statement to include a copybook in a program. COPY statement is used in the WorkingStorage Section.</p>
<p>The following example includes a copybook inside a COBOL program &minus;</p>
<pre class="prettyprint notranslate">
DATA DIVISION.
WORKING-STORAGE SECTION.
COPY ABC.
</pre>
<p>Here ABC is the copybook name. The following data items in ABC copybook can be used inside a program.</p>
<pre class="prettyprint notranslate">
01 WS-DESCRIPTION.
   05 WS-NUM.
      10 WS-NUM1 PIC 9(2) VALUE 20.
      10 WS-NUM2 PIC 9(2) VALUE 56.
   05 WS-CHAR.
      10 WS-CHAR1 PIC X(2) VALUE 'AA'.
      10 WS-CHAR2 PIC X(2) VALUE 'BB'.
</pre>
<h1>COBOL - Conditional Statements</h1>
<p>Conditional statements are used to change the execution flow depending on certain conditions specified by the programmer. Conditional statements will always evaluate to true or false. Conditions are used in IF, Evaluate, and Perform statements. The different types of conditions are as follows &minus;</p>
<ul class="list"> 
<li>IF Condition Statement</li>
<li>Relation Condition</li>
<li>Sign Condition</li>
<li>Class Condition</li>
<li>Condition-Name Condition</li>
<li>Negated Condition</li>
<li>Combined Condition</li>
</ul>
<h2>IF Condition Statement</h2>
<p>IF statement checks for conditions. If a condition is true, the IF block is executed; and if the condition is false, the ELSE block is executed.</p>
<p><b>END-IF</b> is used to end the IF block. To end the IF block, a period can be used instead of END-IF. But it is always preferable to use END-IF for multiple IF blocks.</p>
<p><b>Nested-IF</b> &minus; IF blocks appearing inside another IF block. There is no limit to the depth of nested IF statements.</p>
<h3>Syntax</h3>
<p>Following is the syntax of IF condition statements &minus;</p>
<pre class="result notranslate">
IF [condition] THEN
   [COBOL statements]
ELSE
   [COBOL statements]
END-IF.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/O0Qz8D" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9).
   01 WS-NUM2 PIC 9(9).
   01 WS-NUM3 PIC 9(5).
   01 WS-NUM4 PIC 9(6).

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   MOVE 25 TO WS-NUM1 WS-NUM3.
   MOVE 15 TO WS-NUM2 WS-NUM4.
   
   IF WS-NUM1 &gt; WS-NUM2 THEN
      DISPLAY 'IN LOOP 1 - IF BLOCK'
      
      IF WS-NUM3 = WS-NUM4 THEN
         DISPLAY 'IN LOOP 2 - IF BLOCK'
      ELSE
         DISPLAY 'IN LOOP 2 - ELSE BLOCK'
      END-IF
      
   ELSE
      DISPLAY 'IN LOOP 1 - ELSE BLOCK'
   END-IF.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
IN LOOP 1 - IF BLOCK
IN LOOP 2 - ELSE BLOCK
</pre>
<h2>Relation Condition</h2>
<p>Relation condition compares two operands, either of which can be an identifier, literal, or arithmetic expression. Algebraic comparison of numeric fields is done regardless of size and usage clause.</p>
<p><b>For non-numeric operands</b></p>
<p>If two non-numeric operands of equal size are compared, then the characters are compared from left with the corresponding positions till the end is reached. The operand containing greater number of characters is declared greater.</p>
<p>If two non-numeric operands of unequal size are compared, then the shorter data item is appended with spaces at the end till the size of the operands becomes equal and then compared according to the rules mentioned in the previous point.</p>
<h3>Syntax</h3>
<p>Given below is the syntax of Relation condition statements &minus;</p>
<pre class="result notranslate">
[Data Name/Arithmetic Operation]

   [IS] [NOT] 

[Equal to (=),Greater than (&gt;), Less than (&lt;), 
Greater than or Equal (&gt;=), Less than or equal (&lt;=) ]

[Data Name/Arithmetic Operation] 
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/RMsl84" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(9).
   01 WS-NUM2 PIC 9(9).

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   MOVE 25 TO WS-NUM1.
   MOVE 15 TO WS-NUM2.
   
   IF WS-NUM1 IS GREATER THAN OR EQUAL TO WS-NUM2 THEN
      DISPLAY 'WS-NUM1 IS GREATER THAN WS-NUM2'
   ELSE
      DISPLAY 'WS-NUM1 IS LESS THAN WS-NUM2'
   END-IF.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1 IS GREATER THAN WS-NUM2
</pre>
<h2>Sign Condition</h2>
<p>Sign condition is used to check the sign of a numeric operand. It determines whether a given numeric value is greater than, less than, or equal to ZERO.</p>
<h3>Syntax</h3>
<p>Following is the syntax of Sign condition statements &minus;</p>
<pre class="result notranslate">
[Data Name/Arithmetic Operation] 

   [IS] [NOT] 

[Positive, Negative or Zero]

[Data Name/Arithmetic Operation]
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/9CLiP0" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC S9(9) VALUE -1234.
   01 WS-NUM2 PIC S9(9) VALUE 123456.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   IF WS-NUM1 IS POSITIVE THEN
      DISPLAY 'WS-NUM1 IS POSITIVE'.
      
   IF WS-NUM1 IS NEGATIVE THEN
      DISPLAY 'WS-NUM1 IS NEGATIVE'.
      
   IF WS-NUM1 IS ZERO THEN
      DISPLAY 'WS-NUM1 IS ZERO'.
      
   IF WS-NUM2 IS POSITIVE THEN
      DISPLAY 'WS-NUM2 IS POSITIVE'.

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1 IS NEGATIVE
WS-NUM2 IS POSITIVE
</pre>
<h2>Class Condition</h2>
<p>Class condition is used to check if an operand contains only alphabets or numeric data. Spaces are considered in ALPHABETIC, ALPHABETIC-LOWER, and ALPHABETIC-UPPER.</p>
<h3>Syntax</h3>
<p>Following is the syntax of Class condition statements &minus;</p>
<pre class="result notranslate">
[Data Name/Arithmetic Operation&gt;]

   [IS] [NOT] 

[NUMERIC, ALPHABETIC, ALPHABETIC-LOWER, ALPHABETIC-UPPER]

[Data Name/Arithmetic Operation]
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/K4XWlb" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC X(9) VALUE 'ABCD '.
   01 WS-NUM2 PIC 9(9) VALUE 123456789.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   
   IF WS-NUM1 IS ALPHABETIC THEN
      DISPLAY 'WS-NUM1 IS ALPHABETIC'.
      
   IF WS-NUM1 IS NUMERIC THEN
      DISPLAY 'WS-NUM1 IS NUMERIC'.
      
   IF WS-NUM2 IS NUMERIC THEN
      DISPLAY 'WS-NUM2 IS NUMERIC'.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-NUM1 IS ALPHABETIC
WS-NUM1 IS NUMERIC
</pre>
<h2>Condition-name Condition</h2>
<p>A condition-name is a user-defined name. It contains a set of values specified by the user. It behaves like Boolean variables. They are defined with level number 88. It will not have a PIC clause.</p>
<h3>Syntax</h3>
<p>Following is the syntax of user-defined condition statements &minus;</p>
<pre class="result notranslate">
88 [Condition-Name] VALUE [IS, ARE] [LITERAL] [THRU LITERAL].
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/OW1oH3" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM PIC 9(3).
   88 PASS VALUES ARE 041 THRU 100.
   88 FAIL VALUES ARE 000 THRU 40.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   MOVE 65 TO WS-NUM.
   
   IF PASS 
      DISPLAY 'Passed with ' WS-NUM ' marks'.
      
   IF FAIL 
      DISPLAY 'FAILED with ' WS-NUM 'marks'.
      
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Passed with 065 marks
</pre>
<h2>Negated Condition</h2>
<p>Negated condition is given by using the NOT keyword. If a condition is true and we have given NOT in front of it, then its final value will be false.</p>
<h3>Syntax</h3>
<p>Following is the syntax of Negated condition statements &minus;</p>
<pre class="result notranslate">
IF NOT [CONDITION] 
   COBOL Statements
END-IF.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/OmwMvy" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(2) VALUE 20.
   01 WS-NUM2 PIC 9(9) VALUE 25.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   
   IF NOT WS-NUM1 IS LESS THAN WS-NUM2 THEN
      DISPLAY 'IF-BLOCK'
   ELSE
      DISPLAY 'ELSE-BLOCK'
   END-IF.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
ELSE-BLOCK
</pre>
<h2>Combined Condition</h2>
<p>A combined condition contains two or more conditions connected using logical operators AND or OR.</p>
<h3>Syntax</h3>
<p>Following is the syntax of combined condition statements &minus;</p>
<pre class="result notranslate">
IF [CONDITION] AND [CONDITION]
   COBOL Statements
END-IF.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/rc52DL" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-NUM1 PIC 9(2) VALUE 20.
   01 WS-NUM2 PIC 9(2) VALUE 25.
   01 WS-NUM3 PIC 9(2) VALUE 20.

PROCEDURE DIVISION.
   A000-FIRST-PARA.
   
   IF WS-NUM1 IS LESS THAN WS-NUM2 AND WS-NUM1=WS-NUM3 THEN
      DISPLAY 'Both condition OK'
   ELSE
      DISPLAY 'Error'
   END-IF.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Both condition OK
</pre>
<h2>Evaluate Verb</h2>
<p>Evaluate verb is a replacement of series of IF-ELSE statement. It can be used to evaluate more than one condition. It is similar to SWITCH statement in C programs.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/aupgIl" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-A PIC 9 VALUE 0.
   
PROCEDURE DIVISION.
   MOVE 3 TO WS-A.
   
   EVALUATE TRUE
      WHEN WS-A &gt; 2
         DISPLAY 'WS-A GREATER THAN 2'

      WHEN WS-A &lt; 0
         DISPLAY 'WS-A LESS THAN 0'

      WHEN OTHER
         DISPLAY 'INVALID VALUE OF WS-A'
   END-EVALUATE.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-A GREATER THAN 2
</pre>
<h1>COBOL - Loop Statements</h1>
<p>There are some tasks that need to be done over and over again like reading each record of a file till its end. The loop statements used in COBOL are &minus;</p>
<ul class="list"> 
<li>Perform Thru</li>
<li>Perform Until</li>
<li>Perform Times</li>
<li>Perform Varying</li>
</ul>
<h2>Perform Thru</h2>
<p>Perform Thru is used to execute a series of paragraph by giving the first and last paragraph names in the sequence. After executing the last paragraph, the control is returned back.</p>
<h3>In-line Perform</h3>
<p>Statements inside the PERFORM will be executed till END-PERFORM is reached.</p>
<h3>Syntax</h3>
<p>Following is the syntax of In-line perform &minus;</p>
<pre class="result notranslate">
PERFORM 
   DISPLAY 'HELLO WORLD'
END-PERFORM.
</pre>
<h3>Out-of-line Perform</h3>
<p>Here, a statement is executed in one paragraph and then the control is transferred to other paragraph or section.</p>
<h3>Syntax</h3>
<p>Following is the syntax of Out-of-line perform &minus;</p>
<pre class="result notranslate">
PERFORM PARAGRAPH1 THRU PARAGRAPH2
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/ZXB8Jv" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

PROCEDURE DIVISION.
   A-PARA.
   PERFORM DISPLAY 'IN A-PARA'
   END-PERFORM.
   PERFORM C-PARA THRU E-PARA.
   
   B-PARA.
   DISPLAY 'IN B-PARA'.
   STOP RUN.
   
   C-PARA.
   DISPLAY 'IN C-PARA'.
   
   D-PARA.
   DISPLAY 'IN D-PARA'.
   
   E-PARA.
   DISPLAY 'IN E-PARA'.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
IN A-PARA
IN C-PARA
IN D-PARA
IN E-PARA
IN B-PARA
</pre>
<h2>Perform Until</h2>
<p>In ‘perform until’, a paragraph is executed until the given condition becomes true. ‘With test before’ is the default condition and it indicates that the condition is checked before the execution of statements in a paragraph.</p>
<h3>Syntax</h3>
<p>Following is the syntax of perform until &minus;</p>
<pre class="prettyprint notranslate">
PERFORM A-PARA UNTIL COUNT=5

PERFORM A-PARA WITH TEST BEFORE UNTIL COUNT=5

PERFORM A-PARA WITH TEST AFTER UNTIL COUNT=5
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/0A8j4A" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-CNT PIC 9(1) VALUE 0. 

PROCEDURE DIVISION.
   A-PARA.
   PERFORM B-PARA WITH TEST AFTER UNTIL WS-CNT>3.
   STOP RUN.
   
   B-PARA.
   DISPLAY 'WS-CNT : 'WS-CNT.
   ADD 1 TO WS-CNT.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-CNT : 0
WS-CNT : 1
WS-CNT : 2
WS-CNT : 3
</pre>
<h2>Perform Times</h2>
<p>In ‘perform times’, a paragraph will be executed the number of times specified.</p>
<h3>Syntax </h3>
<p>Following is the syntax of perform times &minus;</p>
<pre class="result notranslate">
PERFORM A-PARA 5 TIMES.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/zwql4y" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

PROCEDURE DIVISION.
   A-PARA.
   PERFORM B-PARA 3 TIMES.
   STOP RUN.
   
   B-PARA.
   DISPLAY 'IN B-PARA'.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
IN B-PARA
IN B-PARA
IN B-PARA
</pre>
<h2>Perform Varying</h2>
<p>In perform varying, a paragraph will be executed till the condition in Until phrase becomes true.</p>
<h3>Syntax</h3>
<p>Following is the syntax of perform varying &minus;</p>
<pre class="result notranslate">
PERFORM A-PARA VARYING A FROM 1 BY 1 UNTIL A = 5.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/weSUt6" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-A PIC 9 VALUE 0.

PROCEDURE DIVISION.
   A-PARA.
   PERFORM B-PARA VARYING WS-A FROM 1 BY 1 UNTIL WS-A=5
   STOP RUN.
   
   B-PARA.
   DISPLAY 'IN B-PARA ' WS-A.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
IN B-PARA 1
IN B-PARA 2
IN B-PARA 3
IN B-PARA 4
</pre>
<h2>GO TO Statement</h2>
<p>GO TO statement is used to change the flow of execution in a program. In GO TO statements, transfer goes only in the forward direction. It is used to exit a paragraph. The different types of GO TO statements used are as follows &minus;</p>
<h3>Unconditional GO TO</h3>
<pre class="result notranslate">
GO TO para-name.
</pre>
<h3>Conditional GO TO</h3>
<pre class="result notranslate">
GO TO para-1 para-2 para-3 DEPENDING ON x.
</pre>
<p>If 'x' is equal to 1, then the control will be transferred to the first paragraph; and if 'x' is equal to 2, then the control will be transferred to the second paragraph, and so on.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/sg1c5J" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-A PIC 9 VALUE 2.
   
PROCEDURE DIVISION.
   A-PARA.
   DISPLAY 'IN A-PARA'
   GO TO B-PARA.
   
   B-PARA.
   DISPLAY 'IN B-PARA '.
   GO TO C-PARA D-PARA DEPENDING ON WS-A.
   
   C-PARA.
   DISPLAY 'IN C-PARA '.
   
   D-PARA.
   DISPLAY 'IN D-PARA '.
   STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program:</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result:</p>
<pre class="result notranslate">
IN A-PARA
IN B-PARA 
IN D-PARA 
</pre>
<h1>COBOL - String Handling</h1>
<p>String handling statements in COBOL are used to do multiple functional operations on strings. Following are the string handling statements &minus;</p>
<ul class="list"> 
<li>Inspect</li>
<li>String</li>
<li>Unstring</li>
</ul>
<h2>Inspect</h2>
<p>Inspect verb is used to count or replace the characters in a string. String operations can be performed on alphanumeric, numeric, or alphabetic values. Inspect operations are performed from left to right. The options used for the string operations are as follows &minus;</p>
<h3>Tallying</h3>
<p>Tallying option is used to count the string characters.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax of Tallying option &minus;</p>
<pre class="result notranslate">
INSPECT input-string
TALLYING output-count FOR ALL CHARACTERS
</pre>
<p>The parameters used are &minus;</p>
<ul class="list"> 
<li>input-string &minus; The string whose characters are to be counted.</li>
<li>output-count &minus; Data item to hold the count of characters.</li>
</ul>
<p><b>Example</b></p>
<div class="demo-view">
<!--<a href="http://tpcg.io/sg1c5J" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>-->
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-CNT1 PIC 9(2) VALUE 0.
   01 WS-CNT2 PIC 9(2) VALUE 0.
   01 WS-STRING PIC X(15) VALUE 'ABCDACDADEAAAFF'.
   
PROCEDURE DIVISION.
   INSPECT WS-STRING TALLYING WS-CNT1 FOR CHARACTER.
   DISPLAY "WS-CNT1 : "WS-CNT1.
   INSPECT WS-STRING TALLYING WS-CNT2 FOR ALL 'A'.
   DISPLAY "WS-CNT2 : "WS-CNT2
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-CNT1 : 15
WS-CNT2 : 06
</pre>
<h3>Replacing</h3>
<p>Replacing option is used to replace the string characters.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax of Replacing option &minus;</p>
<pre class="result notranslate">
INSPECT input-string REPLACING ALL char1 BY char2.
</pre>
<p>The parameter used is &minus;</p>
<ul class="list">
<li><p><b>input-string</b> &minus; The string whose characters are to be replaced from char1 to char2.</p></li>
</ul>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/VD6POA" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-STRING PIC X(15) VALUE 'ABCDACDADEAAAFF'.

PROCEDURE DIVISION.
   DISPLAY "OLD STRING : "WS-STRING.
   INSPECT WS-STRING REPLACING ALL 'A' BY 'X'.
   DISPLAY "NEW STRING : "WS-STRING.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
OLD STRING : ABCDACDADEAAAFF
NEW STRING : XBCDXCDXDEXXXFF
</pre>
<h2>String</h2>
<p>String verb is used to concatenate the strings. Using STRING statement, two or more strings of characters can be combined to form a longer string. ‘Delimited By’ clause is compulsory.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax of String verb &minus;</p>
<pre class="prettyprint notranslate">
STRING ws-string1 DELIMITED BY SPACE
   ws-string2 DELIMITED BY SIZE
   INTO ws-destination-string
   WITH POINTER ws-count
   ON OVERFLOW DISPLAY message1
   NOT ON OVERFLOW DISPLAY message2
END-STRING.
</pre>
<p>Following are the details of the used parameters &minus;</p>
<ul class="list"> 
<li>ws-string1 and ws-string2 : Input strings to be concatenated</li>
<li>ws-string : Output string</li>
<li>ws-count : Used to count the length of new concatenated string</li>
<li>Delimited specifies the end of string</li>
<li>Pointer and Overflow are optional</li>
</ul>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/XCACw1" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-STRING PIC A(30).
   01 WS-STR1 PIC A(15) VALUE 'Tutorialspoint'.
   01 WS-STR2 PIC A(7) VALUE 'Welcome'.
   01 WS-STR3 PIC A(7) VALUE 'To AND'.
   01 WS-COUNT PIC 99 VALUE 1.

PROCEDURE DIVISION.
   STRING WS-STR2 DELIMITED BY SIZE
      WS-STR3 DELIMITED BY SPACE
      WS-STR1 DELIMITED BY SIZE
      INTO WS-STRING 
      WITH POINTER WS-COUNT
      ON OVERFLOW DISPLAY 'OVERFLOW!' 
   END-STRING.
   
   DISPLAY 'WS-STRING : 'WS-STRING.
   DISPLAY 'WS-COUNT : 'WS-COUNT.

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-STRING : WelcomeToTutorialspoint       
WS-COUNT : 25
</pre>
<h2>Unstring</h2>
<p>Unstring verb is used to split one string into multiple sub-strings. Delimited By clause is compulsory.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax of Unstring verb &minus;</p>
<pre class="prettyprint notranslate">
UNSTRING ws-string DELIMITED BY SPACE
INTO ws-str1, ws-str2
WITH POINTER ws-count
ON OVERFLOW DISPLAY message
NOT ON OVERFLOW DISPLAY message
END-UNSTRING.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/HECWy5" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-STRING PIC A(30) VALUE 'WELCOME TO TUTORIALSPOINT'.
   01 WS-STR1 PIC A(7).
   01 WS-STR2 PIC A(2).
   01 WS-STR3 PIC A(15).
   01 WS-COUNT PIC 99 VALUE 1.

PROCEDURE DIVISION.
   UNSTRING WS-STRING DELIMITED BY SPACE
      INTO WS-STR1, WS-STR2, WS-STR3
   END-UNSTRING.
   
   DISPLAY 'WS-STR1 : 'WS-STR1.
   DISPLAY 'WS-STR2 : 'WS-STR2.
   DISPLAY 'WS-STR3 : 'WS-STR3.
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-STR1 : WELCOME
WS-STR2 : TO
WS-STR3 : TUTORIALSPOINT 
</pre>
<h1>COBOL - Table Processing</h1>
<p>Arrays in COBOL are known as tables. An array is a linear data structure and is a collection of individual data items of same type. Data items of a table are internally sorted.</p>
<h2>Table Declaration</h2>
<p>Table is declared in Data Division. <b>Occurs</b> clause is used to define a table. Occurs clause indicates the repetition of data name definition. It can be used only with level numbers starting from 02 to 49. Do not use occurs clause with Redefines. Description of one-dimensional and two-dimensional table is as follows &minus;</p>
<h3>One-Dimensional Table</h3>
<p>In a one-dimensional table, <b>occurs</b> clause is used only once in declaration. WSTABLE is the group item that contains table. WS-B names the table elements that occur 10 times.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax for defining a one-dimensional table &minus;</p>
<pre class="result notranslate">
01 WS-TABLE.
   05 WS-A PIC A(10) OCCURS 10 TIMES.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/ZGeTQX" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-A PIC A(10) VALUE 'TUTORIALS' OCCURS 5 TIMES.     

PROCEDURE DIVISION.
   DISPLAY "ONE-D TABLE : "WS-TABLE.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
ONE-D TABLE : TUTORIALS TUTORIALS TUTORIALS TUTORIALS TUTORIALS
</pre>
<h3>Two-Dimensional Table</h3>
<p>A two-dimensional table is created with both data elements being variable length. For reference, go through the syntax and then try to analyze the table. The first array (WS-A) can occur from 1 to 10 times and the inner array (WS-C) can occur from 1 to 5 times. For each entry of WS-A, there will be corresponding 5 entries of WS-C.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax for defining a two-dimensional table &minus;</p>
<pre class="result notranslate">
01 WS-TABLE.
   05 WS-A OCCURS 10 TIMES.
      10 WS-B PIC A(10).
      10 WS-C OCCURS 5 TIMES.
         15 WS-D PIC X(6).
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/tZ8erh" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-A OCCURS 2 TIMES.
         10 WS-B PIC A(10) VALUE ' TUTORIALS'.
         10 WS-C OCCURS 2 TIMES.
            15 WS-D PIC X(6) VALUE ' POINT'.

PROCEDURE DIVISION.
   DISPLAY "TWO-D TABLE : "WS-TABLE.

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
TWO-D TABLE :  TUTORIALS POINT POINT TUTORIALS POINT POINT
</pre>
<h2>Subscript</h2>
<p>Table individual elements can be accessed by using subscript. Subscript values can range from 1 to the number of times the table occurs. A subscript can be any positive number. It does not require any declaration in data division. It is automatically created with occurs clause.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/Qt2kdw" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-A OCCURS 3 TIMES.
         10 WS-B PIC A(2).
         10 WS-C OCCURS 2 TIMES.
            15 WS-D PIC X(3).

PROCEDURE DIVISION.
   MOVE '12ABCDEF34GHIJKL56MNOPQR' TO WS-TABLE.
   DISPLAY 'WS-TABLE  : ' WS-TABLE.
   DISPLAY 'WS-A(1)   : ' WS-A(1).
   DISPLAY 'WS-C(1,1) : ' WS-C(1,1).
   DISPLAY 'WS-C(1,2) : ' WS-C(1,2).
   DISPLAY 'WS-A(2)   : ' WS-A(2).
   DISPLAY 'WS-C(2,1) : ' WS-C(2,1).
   DISPLAY 'WS-C(2,2) : ' WS-C(2,2).
   DISPLAY 'WS-A(3)   : ' WS-A(3).
   DISPLAY 'WS-C(3,1) : ' WS-C(3,1).
   DISPLAY 'WS-C(3,2) : ' WS-C(3,2).
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
WS-TABLE  : 12ABCDEF34GHIJKL56MNOPQR
WS-A(1)   : 12ABCDEF
WS-C(1,1) : ABC
WS-C(1,2) : DEF
WS-A(2)   : 34GHIJKL
WS-C(2,1) : GHI
WS-C(2,2) : JKL
WS-A(3)   : 56MNOPQR
WS-C(3,1) : MNO
WS-C(3,2) : PQR
</pre>
<h2>Index</h2>
<p>Table elements can also be accessed using index. An index is a displacement of element from the start of the table. An index is declared with Occurs clause using INDEXED BY clause. The value of index can be changed using SET statement and PERFORM Varying option.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax for defining Index in a table &minus;</p>
<pre class="result notranslate">
01 WS-TABLE.
   05 WS-A PIC A(10) OCCURS 10 TIMES INDEXED BY I.
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/3nFqgL" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-A OCCURS 3 TIMES INDEXED BY I.
         10 WS-B PIC A(2).
         10 WS-C OCCURS 2 TIMES INDEXED BY J.
            15 WS-D PIC X(3).

PROCEDURE DIVISION.
   MOVE '12ABCDEF34GHIJKL56MNOPQR' TO WS-TABLE.
   PERFORM A-PARA VARYING I FROM 1 BY 1 UNTIL I >3 
   STOP RUN.
   
   A-PARA.
   PERFORM C-PARA VARYING J FROM 1 BY 1 UNTIL J>2.
   
   C-PARA.
   DISPLAY WS-C(I,J).
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
ABC
DEF
GHI
JKL
MNO
PQR
</pre>
<h2>Set Statement</h2>
<p>Set statement is used to change the index value. Set verb is used to initialize, increment, or decrement the index value. It is used with Search and Search All to locate elements in table.</p>
<p><b>Syntax</b></p>
<p>Following is the syntax for using a Set statement &minus;</p>
<pre class="result notranslate">
SET I J TO positive-number
SET I TO J
SET I TO 5
SET I J UP BY 1
SET J DOWN BY 5
</pre>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/SsSvSR" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-A OCCURS 3 TIMES INDEXED BY I.
         10 WS-B PIC A(2).
         10 WS-C OCCURS 2 TIMES INDEXED BY J.
            15 WS-D PIC X(3).

PROCEDURE DIVISION.
   MOVE '12ABCDEF34GHIJKL56MNOPQR' TO WS-TABLE.
   SET I J TO 1.
   DISPLAY WS-C(I,J).
   SET I J UP BY 1.
   DISPLAY WS-C(I,J).
   
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
ABC
JKL
</pre>
<h2>Search</h2>
<p>Search is a linear search method, which is used to find elements inside the table. It can be performed on sorted as well as unsorted table. It is used only for tables declared by Index phrase. It starts with the initial value of index. If the searched element is not found, then the index is automatically incremented by 1 and it continues till the end of table.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/1nLjJH" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-A PIC X(1) OCCURS 18 TIMES INDEXED BY I.
   01 WS-SRCH PIC A(1) VALUE 'M'.

PROCEDURE DIVISION.
   MOVE 'ABCDEFGHIJKLMNOPQR' TO WS-TABLE.
   SET I TO 1.
   SEARCH WS-A
      AT END DISPLAY 'M NOT FOUND IN TABLE'
      WHEN WS-A(I) = WS-SRCH
      DISPLAY 'LETTER M FOUND IN TABLE'
   END-SEARCH.  

STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program.</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
LETTER M FOUND IN TABLE
</pre>
<h2>Search All</h2>
<p>Search All is a binary search method, which is used to find elements inside the table. Table must be in sorted order for Search All option. The index does not require initialization. In binary search, the table is divided into two halves and it determines in which half the searched element is present. This process repeats till the element is found or the end is reached.</p>
<p><b>Example</b></p>
<div class="demo-view">
<a href="http://tpcg.io/6SY7Io" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-TABLE.
      05 WS-RECORD OCCURS 10 TIMES ASCENDING KEY IS WS-NUM INDEXED BY I.
      10 WS-NUM PIC 9(2).
      10 WS-NAME PIC A(3).

PROCEDURE DIVISION.
   MOVE '12ABC56DEF34GHI78JKL93MNO11PQR' TO WS-TABLE.
   SEARCH ALL WS-RECORD
     AT END DISPLAY 'RECORD NOT FOUND'
     WHEN WS-NUM(I) = 93
     DISPLAY 'RECORD FOUND '
     DISPLAY WS-NUM(I)
     DISPLAY WS-NAME(I)

END-SEARCH. 
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
RECORD FOUND 
93
MNO
</pre>
<h1>COBOL - File Handling</h1>
<p>The concept of files in COBOL is different from that in C/C++. While learning the basics of 'File' in COBOL, the concepts of both languages should not be corelated. Simple text files cannot be used in COBOL, instead <b>PS (Physical Sequential)</b> and <b>VSAM</b> files are used. PS files will be discussed in this module.</p>
<p>To understand file handling in COBOL, one must know the basic terms. These terms only serve to understand the fundamentals of file handling. Further in depth terminology would be discussed in the chapter 'File Handling Verbs'. Following are the basic terms &minus;</p>
<ul class="list">
<li>Field</li>
<li>Record</li>
<li>Physical Record</li>
<li>Logical Record</li>
<li>File</li>
</ul>
<p>The following example helps in understanding these terms &minus;</p>
<img src="/cobol/images/field_basic_terms.png" alt="Program Structure" />
<h2>Field</h2>
<p>Field is used to indicate the data stored about an element. It represents a single element as shown in the above example such as student id, name, marks, total marks, and percentage. The number of characters in any field is known as field size, for example, student name can have 10 characters. Fields can have the following attributes &minus;</p>
<ul class="list">
<li><p><b>Primary keys</b> are those fields that are unique to each record and are used to identify a particular record. For example, in students marks file, each student will be having a unique student id which forms the primary key.</p></li>
<li><p><b>Secondary keys</b> are unique or non-unique fields that are used to search for related data. For example, in students marks file, full name of student can be used as secondary key when student id is not known.</p></li>
<li><p><b>Descriptors</b> fields are used to describe an entity. For example, in students marks file, marks and percentage fields that add meaning to the record are known descriptors.</p></li>
</ul>
<h2>Record</h2>
<p>Record is a collection of fields that is used to describe an entity. One or more fields together form a record. For example, in students marks file, student id, name, marks, total marks, and percentage form one record. The cumulative size of all the fields in a record is known as the record size. The records present in a file may be of fixed length or variable length.</p>
<h3>Physical Record</h3>
<p>Physical record is the information that exists on the external device. It is also known as a block.</p>
<h3>Logical Record</h3>
<p>Logical record is the information used by the program. In COBOL programs, only one record can be handled at any point of time and it is called as logical record.</p>
<h2>File</h2>
<p>File is a collection of related records. For example, the students marks file consists of records of all the students.</p>
<h1>COBOL - File Organization</h1>
<p>File organization indicates how the records are organized in a file. There are different types of organizations for files so as to increase their efficiency of accessing the records. Following are the types of file organization schemes &minus;</p>
<ul class="list">
<li>Sequential file organization</li>
<li>Indexed sequential file organization</li>
<li>Relative file organization</li>
</ul>
<p>The syntaxes in this module, mentioned along with their respective terms, only refer to their usage in the program. The complete programs using these syntaxes would be discussed in the chapter 'File handling Verbs'.</p>
<h2>Sequential File Organization</h2>
<p>A sequential file consists of records that are stored and accessed in sequential order. Following are the key attributes of sequential file organization &minus;</p>
<ul class="list">
<li><p>Records can be read in sequential order. For reading the 10<sup>th</sup> record, all the previous 9 records should be read.</p></li>
<li><p>Records are written in sequential order. A new record cannot be inserted in between. A new record is always inserted at the end of the file.</p></li>
<li><p>After placing a record into a sequential file, it is not possible to delete,  shorten, or lengthen a record.</p></li>
<li><p>Order of the records, once inserted, can never be changed.</p></li>
<li><p>Updation of record is possible. A record can be overwritten, if the new record length is same as the old record length.</p></li>
<li><p>Sequential output files are good option for printing.</p></li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax of sequential file organization &minus;</p>
<pre class="result notranslate">
INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name-jcl
   ORGANIZATION IS SEQUENTIAL
</pre>
<h2>Indexed Sequential File Organization</h2>
<p>An indexed sequential file consists of records that can be accessed sequentially. Direct access is also possible. It consists of two parts &minus;</p>
<ul class="list">
<li><p><b>Data File</b> contains records in sequential scheme.</p></li>
<li><p><b>Index File</b> contains the primary key and its address in the data file.</p></li>
</ul>
<p>Following are the key attributes of sequential file organization &minus;</p>
<ul class="list">
<li><p>Records can be read in sequential order just like in sequential file organization.</p></li>
<li><p>Records can be accessed randomly if the primary key is known. Index file is used to get the address of a record and then the record is fetched from the data file.</p></li>
<li><p>Sorted index is maintained in this file system which relates the key value to the position of the record in the file.</p></li>
<li><p>Alternate index can also be created to fetch the records.</p></li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax of indexed sequential file organization &minus;</p>
<pre class="prettyprint notranslate">
INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name-jcl
   ORGANIZATION IS INDEXED
   RECORD KEY IS primary-key
   ALTERNATE RECORD KEY IS rec-key
</pre>
<h2>Relative File Organization</h2>
<p>A relative file consists of records ordered by their <b>relative address</b>. Following are the key attributes of relative file organization &minus;</p>
<ul class="list">
<li><p>Records can be read in sequential order just like in sequential and indexed file organization.</p></li>
<li><p>Records can be accessed using relative key. Relative key represents the record’s location relative to the address of the start of the file.</p></li>
<li><p>Records can be inserted using relative key. Relative address is calculated using relative key.</p></li>
<li><p>Relative file provides the fastest access to the records.</p></li>
<li><p>The main disadvantage of this file system is that if some intermediate records are missing, they will also occupy space.</p></li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax of relative file organization &minus;</p>
<pre class="prettyprint notranslate">
INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name-jcl
   ORGANIZATION IS RELATIVE
   RELATIVE KEY IS rec-key
</pre>
<h1>COBOL - File Access Mode</h1>
<p>Till now, file organization schemes have been discussed. For each file organization scheme, different access modes can be used. Following are the types of file access modes &minus;</p>
<ul class="list">
<li>Sequential Access</li>
<li>Random Access</li>
<li>Dynamic Access</li>
</ul>
<p>The syntaxes in this module, mentioned along with their respective terms, only refer to their usage in the program. The complete programs using these syntaxes would be discussed in the next chapter.</p>
<h2>Sequential Access</h2>
<p>When the access mode is sequential, the method of record retrieval changes as per the selected file organization.</p>
<ul class="list">
<li><p>For <b>sequential files</b>, records are accessed in the same order in which they were inserted.</p></li>
<li><p>For <b>indexed files</b>, the parameter used to fetch the records are the record key values.</p></li>
<li><p>For <b>relative files</b>, relative record keys are used to retrieve the records.</p></li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax of sequential access mode &minus;</p>
<pre class="result notranslate">
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>SEQUENTIAL</b>
   ACCESS MODE IS <b>SEQUENTIAL</b>
	
	
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>INDEXED</b>
   ACCESS MODE IS <b>SEQUENTIAL</b>
   RECORD KEY IS rec-key1
   ALTERNATE RECORD KEY IS rec-key2

		
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>RELATIVE</b>
   ACCESS MODE IS <b>SEQUENTIAL</b>
   RELATIVE KEY IS rec-key1
</pre>
<h2>Random Access</h2>
<p>When the access mode is RANDOM, the method of record retrieval changes as per the selected file organization.</p>
<ul class="list">
<li><p>For <b>indexed files</b>, records are accessed according to the value placed in a key field which can be primary or alternate key. There can be one or more alternate indexes.</p></li>
<li><p>For <b>relative files</b> , records are retrieved through relative record keys.</p></li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax of random access mode &minus;</p>
<pre class="result notranslate">
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>INDEXED</b>
   ACCESS MODE IS <b>RANDOM</b>
   RECORD KEY IS rec-key1
   ALTERNATE RECORD KEY IS rec-key2

		
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>RELATIVE</b>
   ACCESS MODE IS <b>RANDOM</b>
   RELATIVE KEY IS rec-key1
</pre>
<h2>Dynamic Access</h2>
<p>Dynamic access supports both sequential and random access in the same program. With dynamic access, one file definition is used to perform both sequential and random processing like accessing some records in sequential order and other records by their keys.</p>
<p>With relative and indexed files, the dynamic access mode allows you to switch back and forth between sequential access mode and random access mode while reading a file by using the NEXT phrase on the READ statement. NEXT and READ functionalities will be discussed in the next chapter.</p>
<h3>Syntax</h3>
<p>Following is the syntax of dynamic access mode &minus;</p>
<pre class="result notranslate">
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>SEQUENTIAL</b>
   ACCESS MODE IS <b>DYNAMIC</b>
   RECORD KEY IS rec-key1
   ALTERNATE RECORD KEY IS rec-key2

		
ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT file-name ASSIGN TO dd-name
   ORGANIZATION IS <b>RELATIVE</b>
   ACCESS MODE IS <b>DYNAMIC</b>
   RELATIVE KEY IS rec-key1
</pre>
<h1>COBOL - File Handling Verbs</h1>
<p>File handling verbs are used to perform various operations on files. Following are the file handling verbs &minus;</p>
<ul class="list">
<li>Open</li>
<li>Read</li>
<li>Write</li>
<li>Rewrite</li>
<li>Delete</li>
<li>Start</li>
<li>Close</li>
</ul>
<h2>Open Verb</h2>
<p>Open is the first file operation that must be performed. If Open is successful, then only further operations are possible on a file. Only after opening a file, the variables in the file structure are available for processing. <b>FILE STATUS</b> variable is updated after each file operation.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
OPEN "mode" file-name.
</pre>
<p>Here, file-name is string literal, which you will use to name your file. A file can be opened in the following modes &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Mode &amp; Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>
<p><b>Input</b></p>
<p>Input mode is used for existing files. In this mode, we can only read the file, no other operations are allowed on the file.</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>
<p><b>Output</b></p>
<p>Output mode is used to insert records in files. If a <b>sequential file</b> is  used and the file is holding some records, then the existing records will be deleted first and then new records will be inserted in the file. It will not happen so in case of an <b>indexed file</b> or a <b>relative file</b>.</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>
<p><b>Extend</b></p>
<p>Extend mode is used to append records in a <b>sequential file</b>. In this mode, records are inserted at the end. If file access mode is <b>Random</b> or <b>Dynamic</b>, then extend mode cannot be used.</p></td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">4</td>
<td>
<p><b>I-O</b></p>
<p>Input-Output mode is used to read and rewrite the records of a file.</p></td>
</tr>
</table>
<h2>Read Verb</h2>
<p>Read verb is used to read the file records. The function of read is to fetch records from a file. At each read verb, only one record can be read into the file structure. To perform a read operation, open the file in INPUT or I-O mode. At each read statement, the file pointer is incremented and hence the successive records are read.</p>
<h3>Syntax</h3>
<p>Following is the syntax to read the records when the file access mode is sequential &minus;</p>
<pre class="result notranslate">
READ file-name NEXT RECORD INTO ws-file-structure
   AT END DISPLAY 'End of File'
   NOT AT END DISPLAY 'Record Details:' ws-file-structure
END-READ.
</pre>
<p>Following are the parameters used &minus;</p>
<ul class="list">
<li><p>NEXT RECORD is optional and is specified when an indexed sequential file is being read sequentially.</p></li>
<li><p>INTO clause is optional. ws-file-structure is defined in the WorkingStorage Section to get the values from the READ statement.</p></li>
<li><p>AT END condition becomes True when the end of file is reached.</p></li>
</ul>
<p><b>Example</b> &minus; The following example reads an existing file using line sequential organization. This program can be compiled and executed using <b>Live Demo</b> option where it will display all the records present in the file.</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
      FILE-CONTROL.
      SELECT STUDENT ASSIGN TO 'input.txt'
      ORGANIZATION IS LINE SEQUENTIAL.            

DATA DIVISION.
   FILE SECTION.
   FD STUDENT.
   01 STUDENT-FILE.
      05 STUDENT-ID PIC 9(5).
      05 NAME PIC A(25).

   WORKING-STORAGE SECTION.
   01 WS-STUDENT.
      05 WS-STUDENT-ID PIC 9(5).
      05 WS-NAME PIC A(25).
   01 WS-EOF PIC A(1). 

PROCEDURE DIVISION.
   OPEN INPUT STUDENT.
      PERFORM UNTIL WS-EOF='Y'
         READ STUDENT INTO WS-STUDENT
            AT END MOVE 'Y' TO WS-EOF
            NOT AT END DISPLAY WS-STUDENT
         END-READ
      END-PERFORM.
   CLOSE STUDENT.
STOP RUN.
</pre>
<p>Suppose the input file data available in the <b>input.txt</b> file contains the following &minus;</p>
<pre class="result notranslate">
20003 Mohtashim M.
20004 Nishant Malik
20005 Amitabh Bachhan
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
20003 Mohtashim M.            
20004 Nishant Malik           
20005 Amitabh Bachhan 
</pre>
<h3>Syntax</h3>
<p>Following is the syntax to read a record when the file access mode is random &minus;</p>
<pre class="result notranslate">
READ file-name RECORD INTO ws-file-structure
   KEY IS rec-key
   INVALID KEY DISPLAY 'Invalid Key'
   NOT INVALID KEY DISPLAY 'Record Details: ' ws-file-structure
END-READ.
</pre>
<p><b>Example</b> &minus; The following example reads an existing file using indexed organization. This program can be compiled and executed using <b>JCL</b> on Mainframes where it will display all the records present in the file. On Mainframes server, we do not use text files; instead we use PS files.</p>
<p>Let's assume that the file present on Mainframes have same content as input.txt file in the above example.</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT STUDENT ASSIGN TO IN1
      ORGANIZATION IS INDEXED
      ACCESS IS RANDOM
      RECORD KEY IS STUDENT-ID
      FILE STATUS IS FS.

DATA DIVISION.
   FILE SECTION.
   FD STUDENT.
      01 STUDENT-FILE.
      05 STUDENT-ID PIC 9(5).
      05 NAME PIC A(25).
     
   WORKING-STORAGE SECTION.
   01 WS-STUDENT.
      05 WS-STUDENT-ID PIC 9(5).
      05 WS-NAME PIC A(25).

PROCEDURE DIVISION.
   OPEN INPUT STUDENT.
      MOVE 20005 TO STUDENT-ID.
      
      READ STUDENT RECORD INTO WS-STUDENT-FILE
         KEY IS STUDENT-ID
         INVALID KEY DISPLAY 'Invalid Key'
         NOT INVALID KEY DISPLAY WS-STUDENT-FILE
      END-READ.
      
   CLOSE STUDENT.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//IN1 DD DSN = STUDENT-FILE-NAME,DISP=SHR
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
20005 Amitabh Bachhan 
</pre>
<h2>Write Verb</h2>
<p>Write verb is used to insert records in a file. Once the record is written, it is no longer available in the record buffer. Before inserting records into the file, move the values into the record buffer and then perform write verb.</p> 
<p>Write statement can be used with <b>FROM</b> option to directly write records from the working storage variables. From is an optional clause. If the access mode is sequential, then to write a record, the file must open in Output mode or Extend mode. If the access mode is random or dynamic, then to write a record, the file must open in Output mode or I-O mode.</p>
<h3>Syntax</h3>
<p>Following is the syntax to read a record when the file organization is sequential &minus;</p>
<pre class="result notranslate">
WRITE record-buffer [FROM ws-file-structure]
END-WRITE.
</pre>
<p>Following is the syntax to read a record when the file organization is indexed or relative &minus;</p>
<pre class="result notranslate">
WRITE record-buffer [FROM ws-file-structure]
   INVALID KEY DISPLAY 'Invalid Key'
   NOT INVALID KEY DISPLAY 'Record Inserted'
END-WRITE.
</pre>
<p><b>Example</b> &minus; The following example shows how to insert a new record in a new file when the organization is sequential.</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT STUDENT ASSIGN TO OUT1
      ORGANIZATION IS SEQUENTIAL
      ACCESS IS SEQUENTIAL
      FILE STATUS IS FS.

DATA DIVISION.
   FILE SECTION.
   FD STUDENT
   01 STUDENT-FILE.
      05 STUDENT-ID PIC 9(5).
      05 NAME PIC A(25).
      05 CLASS PIC X(3).

   WORKING-STORAGE SECTION.
   01 WS-STUDENT.
      05 WS-STUDENT-ID PIC 9(5).
      05 WS-NAME PIC A(25).
      05 WS-CLASS PIC X(3).

PROCEDURE DIVISION.
   OPEN EXTEND STUDENT.
      MOVE 1000 TO STUDENT-ID.
      MOVE 'Tim' TO NAME.
      MOVE '10' TO CLASS.
      WRITE STUDENT-FILE
      END-WRITE.	
   CLOSE STUDENT.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//OUT1 DD DSN = OUTPUT-FILE-NAME,DISP = (NEW,CATALOG,DELETE)
</pre>
<p>When you compile and execute the above program, it will add a new record to the output file.</p>
<pre class="result notranslate">
1000 Tim         10
</pre>
<h2>Rewrite Verb</h2>
<p>Rewrite verb is used to update the records. File should be opened in I-O mode for rewrite operations. It can be used only after a successful Read operation. Rewrite verb overwrites the last record read.</p>
<h3>Syntax</h3>
<p>Following is the syntax to read a record when the file organization is sequential &minus;</p>
<pre class="result notranslate">
REWRITE record-buffer [FROM ws-file-structure]
END-REWRITE.
</pre>
<p>Following is the syntax to read a record when the file organization is indexed or relative &minus;</p>
<pre class="result notranslate">
REWRITE record-buffer [FROM ws-file-structure]
   INVALID KEY DISPLAY 'Invalid Key'
   NOT INVALID KEY DISPLAY 'Record Updated'
END-REWRITE.
</pre>
<p><b>Example</b> &minus; The following example shows how to update an existing record which we have inserted in the previous Write step &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT STUDENT ASSIGN TO IN1
      ORGANIZATION IS INDEXED
      ACCESS IS RANDOM
      RECORD KEY IS STUDENT-ID
      FILE STATUS IS FS.

DATA DIVISION.
   FILE SECTION.
   FD STUDENT
   01 STUDENT-FILE.
      05 STUDENT-ID PIC 9(4).
      05 NAME PIC A(12).
      05 CLASS PIC X(3).
      
   WORKING-STORAGE SECTION.
   01 WS-STUDENT.
      05 WS-STUDENT-ID PIC 9(5).
      05 WS-NAME PIC A(25).
      05 WS-CLASS PIC X(3).

PROCEDURE DIVISION.
   OPEN I-O STUDENT.
   MOVE '1000' TO STUDENT-ID.
  
   READ STUDENT
      KEY IS STUDENT-ID
      INVALID KEY DISPLAY ‘KEY IS NOT EXISTING’
   END-READ.
  
   MOVE 'Tim Dumais' TO NAME.
   REWRITE STUDENT-FILE
   END-REWRITE.
   CLOSE STUDENT.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//IN1 DD DSN = OUTPUT-FILE-NAME,DISP = SHR
</pre>
<p>When you compile and execute the above program, it will update the record &minus;</p>
<pre class="result notranslate">
1000 Tim Dumais  10
</pre>
<h2>Delete Verb</h2>
<p>Delete verb can be performed only on indexed and relative files. The file must be opened in I-O mode. In sequential file organization, records cannot be deleted. The record last read by the Read statement is deleted in case of sequential access mode. In random access mode, specify the record key and then perform the Delete operation.</p>
<h3>Syntax</h3>
<p>Following is the syntax to delete a record &minus;</p>
<pre class="result notranslate">
DELETE file-name RECORD
   INVALID KEY DISPLAY 'Invalid Key'
   NOT INVALID KEY DISPLAY 'Record Deleted'
END-DELETE.
</pre>
<p><b>Example</b> &minus; to delete an existing record &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
   SELECT STUDENT ASSIGN TO OUT1
      ORGANIZATION IS INDEXED
      ACCESS IS RANDOM
      RECORD KEY IS STUDENT-ID
      FILE STATUS IS FS.

DATA DIVISION.
   FILE SECTION.
   FD STUDENT
   01 STUDENT-FILE.
      05 STUDENT-ID PIC 9(4).
      05 NAME PIC A(12).
      05 CLASS PIC X(3).
   WORKING-STORAGE SECTION.
   01 WS-STUDENT.
      05 WS-STUDENT-ID PIC 9(5).
      05 WS-NAME PIC A(25).
      05 WS-CLASS PIC X(3).

PROCEDURE DIVISION.
   OPEN I-O STUDENT.
   MOVE '1000' TO STUDENT-ID.
   
   DELETE STUDENT RECORD
      INVALID KEY DISPLAY 'Invalid Key'
      NOT INVALID KEY DISPLAY 'Record Deleted'
   END-DELETE.
   
   CLOSE STUDENT.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//OUT1 DD DSN = OUTPUT-FILE-NAME,DISP = SHR
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Record Deleted
</pre>
<h2>Start Verb</h2>
<p>Start verb can be performed only on indexed and relative files. It is used to place the file pointer at a specific record. The access mode must be sequential or dynamic. File must be opened in I-O or Input mode.</p>
<h3>Syntax</h3>
<p>Following is the syntax to place the pointer at a specific record &minus;</p>
<pre class="result notranslate">
START file-name KEY IS [=, &gt;, &lt;, NOT, &lt;= or &gt;=] rec-key
   INVALID KEY DISPLAY 'Invalid Key'
   NOT INVALID KEY DISPLAY 'File Pointer Updated'
END-START.
</pre>
<h2>Close Verb</h2>
<p>Close verb is used to close a file. After performing Close operation, the variables in the file structure will not be available for processing. The link between program and file is lost.</p>
<h3>Syntax</h3>
<p>Following is the syntax to close a file &minus;</p>
<pre class="result notranslate">
CLOSE file-name.
</pre>
<h1>COBOL - Subroutines</h1>
<p>Cobol subroutine is a program that can be compiled independently but cannot be executed independently. There are two types of subroutines: <b>internal subroutines</b> like <b>Perform</b> statements and <b>external</b> subroutines like CALL verb.</p>
<h2>Call Verb</h2>
<p>Call verb is used to transfer the control from one program to another program. The program that contains the CALL verb is the <b>Calling Program</b> and the program being called is known as the <b>Called Program</b>. Calling program execution will halt until the called program finishes the execution. Exit Program statement is used in the Called program to transfer the control back.</p>
<h3>Called Program Constraints</h3>
<p>Following are the called program requirements &minus;</p>
<ul class="list">
<li><p><b>Linkage section</b> must be defined in the called program. It consists of data elements passed in the program. The data items should not have Value clause. PIC clause must be compatible with the variables passed through the calling program.</p></li>
<li><p><b>Procedure division using</b> has a list of variables passed from the calling program and the order must be same as mentioned in the Call verb.</p></li>
<li><p><b>Exit program</b> statement is used in the called program to transfer the control back. It must be the last statement in the called program.</p></li>
</ul>
<p>The parameters can be passed between programs in two ways &minus;</p>
<ul class="list">
<li>By Reference</li>
<li>By Content</li>
</ul>
<h2>Call By Reference</h2>
<p>If the values of variables in the called program are modified, then their new values will reflect in the calling program. If <b>BY</b> clause is not specified, then variables are always passed by reference.</p>
<h3>Syntax</h3>
<p>Following is the syntax of calling subroutine by reference &minus;</p>
<pre class="result notranslate">
CALL sub-prog-name USING variable-1, variable-2.
</pre>
<p><b>Example</b></p>
<p>Following example is the MAIN calling program and UTIL is the called program &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. MAIN.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-STUDENT-ID PIC 9(4) VALUE 1000.
   01 WS-STUDENT-NAME PIC A(15) VALUE 'Tim'.

PROCEDURE DIVISION.
   CALL 'UTIL' USING WS-STUDENT-ID, WS-STUDENT-NAME.
   DISPLAY 'Student Id : ' WS-STUDENT-ID
   DISPLAY 'Student Name : ' WS-STUDENT-NAME
STOP RUN.
</pre>
<h3>Called Program</h3>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. UTIL.

DATA DIVISION.
   LINKAGE SECTION.
   01 LS-STUDENT-ID PIC 9(4).
   01 LS-STUDENT-NAME PIC A(15).

PROCEDURE DIVISION USING LS-STUDENT-ID, LS-STUDENT-NAME.
   DISPLAY 'In Called Program'.
   MOVE 1111 TO LS-STUDENT-ID.
EXIT PROGRAM.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = MAIN
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
In Called Program
Student Id : 1111
Student Name : Tim
</pre>
<h2>Call By Content</h2>
<p>If the values of variables in the called program are modified, then their new values will not reflect in the calling program.</p>
<h3>Syntax</h3>
<p>Following is the syntax of calling subroutine by content &minus;</p>
<pre class="result notranslate">
CALL sub-prog-name USING 
BY CONTENT variable-1, BY CONTENT variable-2.
</pre>
<p><b>Example</b></p>
<p>Following example is the MAIN calling program and UTIL is the called program &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. MAIN.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   01 WS-STUDENT-ID PIC 9(4) VALUE 1000.
   01 WS-STUDENT-NAME PIC A(15) VALUE 'Tim'.

PROCEDURE DIVISION.
   CALL 'UTIL' USING BY CONTENT WS-STUDENT-ID, BY CONTENT WS-STUDENT-NAME.
   DISPLAY 'Student Id : ' WS-STUDENT-ID
   DISPLAY 'Student Name : ' WS-STUDENT-NAME
STOP RUN.
</pre>
<h3>Called Program</h3>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. UTIL.

DATA DIVISION.
   LINKAGE SECTION.
   01 LS-STUDENT-ID PIC 9(4).
   01 LS-STUDENT-NAME PIC A(15).

PROCEDURE DIVISION USING LS-STUDENT-ID, LS-STUDENT-NAME.
   DISPLAY 'In Called Program'.
   MOVE 1111 TO LS-STUDENT-ID.
EXIT PROGRAM.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = MAIN
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
In Called Program
Student Id : 1000
Student Name : Tim
</pre>
<h2>Types of Call</h2>
<p>There are two types of calls &minus;</p>
<ul class="list">
<li><p><b>Static Call</b> occurs when a program is compiled with the NODYNAM compiler option. A static called program is loaded into storage at compile time.</p></li>
<li><p><b>Dynamic Call</b> occurs when a program is compiled with the DYNAM and NODLL compiler option. A dynamic called program is loaded into storage at runtime.</p></li>
</ul>
<h1>COBOL - Internal Sort</h1>
<p>Sorting of data in a file or merging of two or more files is a common necessity in almost all business-oriented applications. Sorting is used for arranging records either in ascending or descending order, so that sequential processing can be performed. There are two techniques which are used for sorting files in COBOL &minus;</p>
<ul class="list">
<li><p><b>External sort</b> is used to sort files by using the SORT utility in JCL. We have discussed this in the JCL chapter. As of now, we will focus on internal sort.</p></li>
<li><p><b>Internal sort</b> is used to sort files within a COBOL program. <b>SORT</b> verb is used to sort a file.</p></li>
</ul>
<h2>Sort Verb</h2>
<p>Three files are used in the sort process in COBOL &minus;</p>
<ul class="list">
<li><p><b>Input file</b> is the file which we have to sort either in ascending or descending order.</p></li>
<li><p><b>Work file</b> is used to hold records while the sort process is in progress. Input file records are transferred to the work file for the sorting process. This file should be defined in the File-Section under SD entry.</p></li>
<li><p><b>Output file</b> is the file which we get after the sorting process. It is the final output of the Sort verb.</p></li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax to sort a file &minus;</p>
<pre class="result notranslate">
SORT work-file ON ASCENDING KEY rec-key1
   [ON DESCENDING KEY rec-key2]
USING input-file GIVING output-file.
</pre>
<p>SORT performs the following operations &minus;</p>
<ul class="list">
<li><p>Opens work-file in I-O mode, input-file in the INPUT mode and output-file in the OUTPUT mode.</li></p>
<li><p>Transfers the records present in the input-file to the work-file.</li></p>
<li><p>Sorts the SORT-FILE in ascending/descending sequence by rec-key.</li></p>
<li><p>Transfers the sorted records from the work-file to the output-file.</li></p>
<li><p>Closes the input-file and the output-file and deletes the work-file.</li></p>
</ul>
<p><b>Example</b></p>
<p>In the following example, INPUT is the input file which needs to be sorted in ascending order &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
      SELECT INPUT ASSIGN TO IN.
      SELECT OUTPUT ASSIGN TO OUT.
      SELECT WORK ASSIGN TO WRK.

DATA DIVISION.
   FILE SECTION.
   FD INPUT.
      01 INPUT-STUDENT.
         05 STUDENT-ID-I PIC 9(5).
         05 STUDENT-NAME-I PIC A(25).
   FD OUTPUT.
      01 OUTPUT-STUDENT.
         05 STUDENT-ID-O PIC 9(5).
         05 STUDENT-NAME-O PIC A(25).
   SD WORK.
      01 WORK-STUDENT.
         05 STUDENT-ID-W PIC 9(5).
         05 STUDENT-NAME-W PIC A(25).

PROCEDURE DIVISION.
   SORT WORK ON ASCENDING KEY STUDENT-ID-O
   USING INPUT GIVING OUTPUT.
   DISPLAY 'Sort Successful'.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//IN DD DSN = INPUT-FILE-NAME,DISP = SHR
//OUT DD DSN = OUTPUT-FILE-NAME,DISP = SHR
//WRK DD DSN = &amp;&amp;TEMP
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Sort Successful
</pre>
<h2>Merge Verb</h2>
<p>Two or more identically sequenced files are combined using Merge statement. Files used in the merge process &minus;</p>
<ul class="list">
<li>Input Files &minus; Input-1, Input-2</li>
<li>Work File</li>
<li>Output File</li>
</ul>
<h3>Syntax</h3>
<p>Following is the syntax to merge two or more files &minus;</p>
<pre class="prettyprint notranslate">
MERGE work-file ON ASCENDING KEY rec-key1
   [ON DESCENDING KEY rec-key2]

USING input-1, input-2 GIVING output-file.
</pre>
<p>Merge performs the following operations &minus;</p>
<ul class="list">
<li><p>Opens the work-file in I-O mode, input-files in the INPUT mode and output-file in the OUTPUT mode.</li></p>
<li><p>Transfers the records present in the input-files to the work-file.</li></p>
<li><p>Sorts the SORT-FILE in ascending/descending sequence by rec-key.</li></p>
<li><p>Transfers the sorted records from the work-file to the output-file.</li></p>
<li><p>Closes the input-file and the output-file and deletes the work-file.</li></p>
</ul>
<p><b>Example</b></p>
<p>In the following example, INPUT1 and INPUT2 are the input files which are to be merged in ascending order &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

ENVIRONMENT DIVISION.
   INPUT-OUTPUT SECTION.
   FILE-CONTROL.
      SELECT INPUT1 ASSIGN TO IN1.
      SELECT INPUT2 ASSIGN TO IN2.
      SELECT OUTPUT ASSIGN TO OUT.
      SELECT WORK ASSIGN TO WRK.

DATA DIVISION.
   FILE SECTION.
   FD INPUT1.
      01 INPUT1-STUDENT.
         05 STUDENT-ID-I1 PIC 9(5).
         05 STUDENT-NAME-I1 PIC A(25).
   FD INPUT2.
      01 INPUT2-STUDENT.
         05 STUDENT-ID-I2 PIC 9(5).
         05 STUDENT-NAME-I2 PIC A(25).
   FD OUTPUT.
      01 OUTPUT-STUDENT.
         05 STUDENT-ID-O PIC 9(5).
         05 STUDENT-NAME-O PIC A(25).
   SD WORK.
      01 WORK-STUDENT.
         05 STUDENT-ID-W PIC 9(5).
         05 STUDENT-NAME-W PIC A(25).

PROCEDURE DIVISION.
   MERGE WORK ON ASCENDING KEY STUDENT-ID-O
   USING INPUT1, INPUT2 GIVING OUTPUT.
   DISPLAY 'Merge Successful'.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP1 EXEC PGM = HELLO
//IN1 DD DSN=INPUT1-FILE-NAME,DISP=SHR
//IN2 DD DSN=INPUT2-FILE-NAME,DISP=SHR
//OUT DD DSN = OUTPUT-FILE-NAME,DISP=SHR
//WRK DD DSN = &amp;&amp;TEMP
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Merge Successful
</pre>
<h1>COBOL - Database Interface</h1>
<p>As of now, we have learnt the use of files in COBOL. Now, we will discuss how a COBOL program interacts with DB2. It involves the following terms &minus;</p>
<ul class="list">
<li>Embedded SQL</li>
<li>DB2 Application Programming</li>
<li>Host Variables</li>
<li>SQLCA</li>
<li>SQL Queries</li>
<li>Cursors</li>
</ul>
<h2>Embedded SQL</h2>
<p>Embedded SQL statements are used in COBOL programs to perform standard SQL operations. Embedded SQL statements are preprocessed by the SQL processor before the application program is compiled. COBOL is known as the <b>Host Language</b>. COBOL-DB2 applications are those applications that include both COBOL and DB2.</p>
<p>Embedded SQL statements work like normal SQL statements with some minor changes. For example, the output of a query is directed to a predefined set of variables which are referred as <b>Host Variables</b>. An additional INTO clause is placed in the SELECT statement.</p>
<h2>DB2 Application Programming</h2>
<p>Following are rules to be followed while coding a COBOL-DB2 program &minus;</p>
<ul class="list">
<li><p>All the SQL statements must be delimited between <b>EXEC SQL</b> and <b>ENDEXEC.</b>.</p></li>
<li><p>SQL statements must be coded in Area B.</p></li>
<li><p>All the tables that are used in a program must be declared in the WorkingStorage Section. This is done by using the <b>INCLUDE</b> statement.</p></li>
<li><p>All SQL statements other than INCLUDE and DECLARE TABLE must appear in the Procedure Division.</p></li>
</ul>
<h2>Host Variables</h2>
<p>Host variables are used for receiving data from a table or inserting data in a table. Host variables must be declared for all values that are to be passed between the program and the DB2. They are declared in the Working-Storage Section.</p>
<p>Host variables cannot be group items, but they may be grouped together in host structure. They cannot be <b>Renamed</b> or <b>Redefined</b>. Using host variables with SQL statements, prefix them with a <b>colon (:).</b>.</p>
<h3>Syntax</h3>
<p>Following is the syntax to declare host variables and include tables in the Working-Storage section &minus;</p>
<pre class="prettyprint notranslate">
DATA DIVISION.
   WORKING-STORAGE SECTION.
   
   EXEC SQL
   INCLUDE table-name
   END-EXEC.

   EXEC SQL BEGIN DECLARE SECTION
   END-EXEC.
   
   01 STUDENT-REC.
      05 STUDENT-ID PIC 9(4).
      05 STUDENT-NAME PIC X(25).
      05 STUDENT-ADDRESS X(50).
   EXEC SQL END DECLARE SECTION
   END-EXEC.
</pre>
<h2>SQLCA</h2>
<p>SQLCA is a SQL communication area through which DB2 passes the feedback of SQL execution to the program. It tells the program whether an execution was successful or not. There are a number of predefined variables under SQLCA like <b>SQLCODE</b> which contains the error code. The value '000' in SQLCODE states a successful execution.</p>
<h3>Syntax</h3>
<p>Following is the syntax to declare an SQLCA in the Working-Storage section &minus;</p>
<pre class="result notranslate">
DATA DIVISION.
WORKING-STORAGE SECTION.
	EXEC SQL
	INCLUDE SQLCA
	END-EXEC.
</pre>
<h2>SQL Queries</h2>
<p>Let’s assume we have one table named as 'Student' that contains Student-Id, Student-Name, and Student-Address.</p>
<p>The STUDENT table contains the following data &minus;</p>
<pre class="result notranslate">
Student Id		Student Name		Student Address
1001 			   Mohtashim M.		Hyderabad
1002			   Nishant Malik		Delhi
1003 			   Amitabh Bachan		Mumbai
1004			   Chulbul Pandey		Lucknow
</pre>
<p>The following example shows the usage of <b>SELECT</b> query in a COBOL program &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   EXEC SQL
      INCLUDE SQLCA
   END-EXEC.
   
   EXEC SQL
      INCLUDE STUDENT
   END-EXEC.
   
   EXEC SQL BEGIN DECLARE SECTION
   END-EXEC.
      01 WS-STUDENT-REC.
         05 WS-STUDENT-ID PIC 9(4).
         05 WS-STUDENT-NAME PIC X(25).
         05 WS-STUDENT-ADDRESS X(50).
   EXEC SQL END DECLARE SECTION
   END-EXEC.

PROCEDURE DIVISION.
   EXEC SQL
      SELECT STUDENT-ID, STUDENT-NAME, STUDENT-ADDRESS
      INTO :WS-STUDENT-ID, :WS-STUDENT-NAME, WS-STUDENT-ADDRESS FROM STUDENT
      WHERE STUDENT-ID=1004
   END-EXEC.
   
   IF SQLCODE = 0 
      DISPLAY WS-STUDENT-RECORD
   ELSE DISPLAY 'Error'
   END-IF.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP001  EXEC PGM = IKJEFT01
//STEPLIB  DD DSN = MYDATA.URMI.DBRMLIB,DISP = SHR
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SYSTSIN  DD *
   DSN SYSTEM(SSID)
   RUN PROGRAM(HELLO) PLAN(PLANNAME) -
   END
/*
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
1004 Chulbul Pandey		Lucknow
</pre>
<p>The following example shows the usage of <b>INSERT</b> query in a COBOL program &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   EXEC SQL
   INCLUDE SQLCA
   END-EXEC.
   
   EXEC SQL
   INCLUDE STUDENT
   END-EXEC.
   
   EXEC SQL BEGIN DECLARE SECTION
   END-EXEC.
      01 WS-STUDENT-REC.
         05 WS-STUDENT-ID PIC 9(4).
         05 WS-STUDENT-NAME PIC X(25).
         05 WS-STUDENT-ADDRESS X(50).
   EXEC SQL END DECLARE SECTION
   END-EXEC.

PROCEDURE DIVISION.
   MOVE 1005 TO WS-STUDENT-ID.
   MOVE 'TutorialsPoint' TO WS-STUDENT-NAME.
   MOVE 'Hyderabad' TO WS-STUDENT-ADDRESS.
   
   EXEC SQL
      INSERT INTO STUDENT(STUDENT-ID, STUDENT-NAME, STUDENT-ADDRESS)
      VALUES (:WS-STUDENT-ID, :WS-STUDENT-NAME, WS-STUDENT-ADDRESS)
   END-EXEC.
   
   IF SQLCODE = 0 
      DISPLAY 'Record Inserted Successfully'
      DISPLAY WS-STUDENT-REC
   ELSE DISPLAY 'Error'
   END-IF.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP001  EXEC PGM = IKJEFT01
//STEPLIB  DD DSN = MYDATA.URMI.DBRMLIB,DISP=SHR
//SYSPRINT DD SYSOUT = *
//SYSUDUMP DD SYSOUT = *
//SYSOUT   DD SYSOUT = *
//SYSTSIN  DD *
   DSN SYSTEM(SSID)
   RUN PROGRAM(HELLO) PLAN(PLANNAME) -
   END
/*
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Record Inserted Successfully
1005 TutorialsPoint		Hyderabad
</pre>
<p>The following example shows the usage of <b>UPDATE</b> query in a COBOL program &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   
   EXEC SQL
   INCLUDE SQLCA
   END-EXEC.
   
   EXEC SQL
   INCLUDE STUDENT
   END-EXEC.
   
   EXEC SQL BEGIN DECLARE SECTION
   END-EXEC.
      01 WS-STUDENT-REC.
         05 WS-STUDENT-ID PIC 9(4).
         05 WS-STUDENT-NAME PIC X(25).
         05 WS-STUDENT-ADDRESS X(50).
   EXEC SQL END DECLARE SECTION
   END-EXEC.

PROCEDURE DIVISION.
   MOVE 'Bangalore' TO WS-STUDENT-ADDRESS.
   EXEC SQL
      UPDATE STUDENT SET STUDENT-ADDRESS=:WS-STUDENT-ADDRESS
      WHERE STUDENT-ID = 1003
   END-EXEC.
   
   IF SQLCODE = 0 
      DISPLAY 'Record Updated Successfully'
   ELSE DISPLAY 'Error'
   END-IF.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP001  EXEC PGM = IKJEFT01
//STEPLIB  DD DSN = MYDATA.URMI.DBRMLIB,DISP = SHR
//SYSPRINT DD SYSOUT = *
//SYSUDUMP DD SYSOUT = *
//SYSOUT   DD SYSOUT = *
//SYSTSIN  DD *
   DSN SYSTEM(SSID)
   RUN PROGRAM(HELLO) PLAN(PLANNAME) -
   END
/*
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Record Updated Successfully
</pre>
<p>The following <b>example</b> shows the usage of <b>DELETE</b> query in a COBOL program &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
WORKING-STORAGE SECTION.

   EXEC SQL
   INCLUDE SQLCA
   END-EXEC.
   
   EXEC SQL
   INCLUDE STUDENT
   END-EXEC.
   
   EXEC SQL BEGIN DECLARE SECTION
   END-EXEC.
      01 WS-STUDENT-REC.
         05 WS-STUDENT-ID PIC 9(4).
         05 WS-STUDENT-NAME PIC X(25).
         05 WS-STUDENT-ADDRESS X(50).
   EXEC SQL END DECLARE SECTION
   END-EXEC.

PROCEDURE DIVISION.
   MOVE 1005 TO WS-STUDENT-ID.
   
   EXEC SQL
      DELETE FROM STUDENT
      WHERE STUDENT-ID=:WS-STUDENT-ID
   END-EXEC.
   
   IF SQLCODE = 0 
      DISPLAY 'Record Deleted Successfully'
   ELSE DISPLAY 'Error'
   END-IF.
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP001  EXEC PGM = IKJEFT01
//STEPLIB  DD DSN = MYDATA.URMI.DBRMLIB,DISP=SHR
//SYSPRINT DD SYSOUT = *
//SYSUDUMP DD SYSOUT = *
//SYSOUT   DD SYSOUT = *
//SYSTSIN  DD *
   DSN SYSTEM(SSID)
   RUN PROGRAM(HELLO) PLAN(PLANNAME) -
   END
/*
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
Record Deleted Successfully
</pre>
<h2>Cursors</h2>
<p>Cursors are used to handle multiple row selections at a time. They are data structures that hold all the results of a query. They can be defined in the Working-Storage Section or the Procedure Division. Following are the operations associated with Cursor &minus;</p>
<ul class="list">
<li>Declare</li>
<li>Open</li> 
<li>Close</li>
<li>Fetch</li>
</ul>
<h3>Declare Cursor</h3>
<p>Cursor declaration can be done in the Working-Storage Section or the Procedure Division. The first statement is the DECLARE statement which is a nonexecutable statement.</p>
<pre class="prettyprint notranslate">
EXEC SQL
   DECLARE STUDCUR CURSOR FOR
   SELECT STUDENT-ID, STUDENT-NAME, STUDENT-ADDRESS FROM STUDENT
   WHERE STUDENT-ID &gt;:WS-STUDENT-ID
END-EXEC.
</pre>
<h3>Open</h3>
<p>Before using a cursor, Open statement must be performed. The Open statement prepares the SELECT for execution.</p>
<pre class="prettyprint notranslate">
EXEC SQL
   OPEN STUDCUR
END-EXEC.
</pre>
<h3>Close</h3>
<p>Close statement releases all the memory occupied by the cursor. It is mandatory to close a cursor before ending a program.</p>
<pre class="prettyprint notranslate">
EXEC SQL
   CLOSE STUDCUR
END-EXEC.
</pre>
<h3>Fetch</h3>
<p>Fetch statement identifies the cursor and puts the value in the INTO clause. A Fetch statement is coded in loop as we get one row at a time.</p>
<pre class="prettyprint notranslate">
EXEC SQL
   FETCH STUDCUR
   INTO :WS-STUDENT-ID, :WS-STUDENT-NAME, WS-STUDENT-ADDRESS
END-EXEC.
</pre>
<p>The following example shows the usage of cursor to fetch all the records from the STUDENT table &minus;</p>
<pre class="prettyprint notranslate">
IDENTIFICATION DIVISION.
PROGRAM-ID. HELLO.

DATA DIVISION.
   WORKING-STORAGE SECTION.
   
   EXEC SQL
   INCLUDE SQLCA
   END-EXEC.
   
   EXEC SQL
   INCLUDE STUDENT
   END-EXEC.
   
   EXEC SQL BEGIN DECLARE SECTION
   END-EXEC.
      01 WS-STUDENT-REC.
         05 WS-STUDENT-ID PIC 9(4).
         05 WS-STUDENT-NAME PIC X(25).
         05 WS-STUDENT-ADDRESS X(50).
   EXEC SQL END DECLARE SECTION
   END-EXEC.
   
   EXEC SQL
      DECLARE STUDCUR CURSOR FOR
      SELECT STUDENT-ID, STUDENT-NAME, STUDENT-ADDRESS FROM STUDENT
      WHERE STUDENT-ID >:WS-STUDENT-ID
   END-EXEC.

PROCEDURE DIVISION.
   MOVE 1001 TO WS-STUDENT-ID.
   PERFORM UNTIL SQLCODE = 100
   
   EXEC SQL
      FETCH STUDCUR
      INTO :WS-STUDENT-ID, :WS-STUDENT-NAME, WS-STUDENT-ADDRESS
   END-EXEC
   
   DISPLAY WS-STUDENT-REC
END-PERFORM	
STOP RUN.
</pre>
<p><b>JCL</b> to execute the above COBOL program &minus;</p>
<pre class="prettyprint notranslate">
//SAMPLE JOB(TESTJCL,XXXXXX),CLASS = A,MSGCLASS = C
//STEP001  EXEC PGM=IKJEFT01
//STEPLIB  DD DSN=MYDATA.URMI.DBRMLIB,DISP=SHR
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSOUT   DD SYSOUT=*
//SYSTSIN  DD *
   DSN SYSTEM(SSID)
   RUN PROGRAM(HELLO) PLAN(PLANNAME) -
   END
/*
</pre>
<p>When you compile and execute the above program, it produces the following result &minus;</p>
<pre class="result notranslate">
1001 Mohtashim M.		Hyderabad
1002 Nishant Malik		Delhi
1003 Amitabh Bachan		Mumbai
1004 Chulbul Pandey		Lucknow
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/cobol/cobol_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/cobol/cobol_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
