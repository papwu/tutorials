<!DOCTYPE html>
<html lang="en-US">
<head>
<title>AVRO - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="AVRO - Quick Guide - To transfer data over a network or for its persistent storage, you need to serialize the
data. Prior to the serialization APIs provided by Java and Hadoop, we h"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/avro/avro_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#0070f7;
}
a.demo {
    background:#0070f7;
}
li.heading {
    background:#0070f7;
}
.course-box{background:#0070f7}
.home-intro-sub p{color:#0070f7}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/avro/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/avro/images/apache-avro-mini-logo.jpg" alt="AVRO Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">AVRO Basics</li>
<li><a href="/avro/index.htm">AVRO - Home</a></li>
<li><a href="/avro/avro_overview.htm">AVRO - Overview</a></li>
<li><a href="/avro/avro_serialization.htm">AVRO - Serialization</a></li>
<li><a href="/avro/avro_environment_setup.htm">AVRO - Environment Setup</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">AVRO Schemas &amp; APIs</li>
<li><a href="/avro/avro_schemas.htm">AVRO - Schemas</a></li>
<li><a href="/avro/avro_reference_api.htm">AVRO - Reference API</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">AVRO By Generating a Class</li>
<li><a href="/avro/serialization_by_generating_class.htm">Serialization by Generating Class</a></li>
<li><a href="/avro/deserialization_by_generating_class.htm">Deserialization by Generating Class</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">AVRO Using Parsers Library</li>
<li><a href="/avro/serialization_using_parsers.htm">Serialization Using Parsers</a></li>
<li><a href="/avro/deserialization_using_parsers.htm">Deserialization Using Parsers</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">AVRO Useful Resources</li>
<li><a href="/avro/avro_quick_guide.htm">AVRO - Quick Guide</a></li>
<li><a href="/avro/avro_useful_resources.htm">AVRO - Useful Resources</a></li>
<li><a href="/avro/avro_discussion.htm">AVRO - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>AVRO - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/avro/deserialization_using_parsers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/avro/avro_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>AVRO - Overview</h1>
<p>To transfer data over a network or for its persistent storage, you need to serialize the
data. Prior to the <b>serialization APIs</b> provided by Java and Hadoop, we have a special utility, called <b>Avro</b>, a schema-based serialization technique.</p>
<p>This tutorial teaches you how to serialize and deserialize the data using Avro. Avro provides
libraries for various programming languages. In this tutorial, we demonstrate the examples using Java library.</p>
<h2>What is Avro?</h2>
<p>Apache Avro is a language-neutral data serialization system. It was developed by Doug Cutting, the father of Hadoop. Since Hadoop writable classes lack language portability, Avro becomes quite helpful, as it deals with data formats that can be processed by multiple languages. Avro is a preferred tool to serialize data in Hadoop.</p>
<p>Avro has a schema-based system. A language-independent schema is associated with its read and write operations. Avro serializes the data which has a built-in schema. Avro serializes the data into a compact binary format, which can be deserialized by any application.</p>
<p>Avro uses JSON format to declare the data structures. Presently, it supports languages such as Java, C, C++, C#, Python, and Ruby.</p>
<h2>Avro Schemas</h2>
<p>Avro depends heavily on its <b>schema</b>. It allows every data to be written with no prior knowledge of the schema. It serializes fast and the resulting serialized data is lesser in size. Schema is stored along with the Avro data in a file for any further processing.</p>
<p>In RPC, the client and the server exchange schemas during the connection. This exchange helps in the communication between same named fields, missing fields, extra fields, etc.</p>
<p>Avro schemas are defined with JSON that simplifies its implementation in languages with JSON libraries.</p>
<p>Like Avro, there are other serialization mechanisms in Hadoop such as <b>Sequence Files, Protocol Buffers,</b> and <b>Thrift</b>.</p>
<h2>Comparison with Thrift and Protocol Buffers</h2>
<p><b>Thrift</b> and <b>Protocol Buffers</b> are the most competent libraries with Avro. Avro differs from these frameworks in the following ways &minus;</p>
<ul class="list">
<li><p>Avro supports both dynamic and static types as per the requirement. Protocol Buffers and Thrift use Interface Definition Languages (IDLs) to specify schemas and their types. These IDLs are used to generate code for serialization and deserialization.</p></li>
<li><p>Avro is built in the Hadoop ecosystem. Thrift and Protocol Buffers are not built in Hadoop ecosystem.</p></li>
</ul>
<p>Unlike Thrift and Protocol Buffer, Avro's schema definition is in JSON and not in any proprietary IDL.</p>
<table class="table table-bordered">
<tr>
<th>Property</th>
<th width="25%" style="text-align:center;">Avro</th>
<th width="35%" style="text-align:center;">Thrift &amp; Protocol Buffer</th>
</tr>
<tr>
<td>Dynamic schema</td>
<td style="text-align:center;">Yes</td>
<td style="text-align:center;">No</td>
</tr>
<tr>
<td>Built into Hadoop</td>
<td style="text-align:center;">Yes</td>
<td style="text-align:center;">No</td>
</tr>
<tr>
<td>Schema in JSON</td>
<td style="text-align:center;">Yes</td>
<td style="text-align:center;">No</td>
</tr>
<tr>
<td>No need to compile</td>
<td style="text-align:center;">Yes</td>
<td style="text-align:center;">No</td>
</tr>
<tr>
<td>No need to declare IDs</td>
<td style="text-align:center;">Yes</td>
<td style="text-align:center;">No</td>
</tr>
<tr>
<td>Bleeding edge</td>
<td style="text-align:center;">Yes</td>
<td style="text-align:center;">No</td>
</tr>
</table>
<h2>Features of Avro</h2>
<p>Listed below are some of the prominent features of Avro &minus;</p>
<ul class="list">
<li><p>Avro is a <b>language-neutral</b> data serialization system.</p></li>
<li><p>It can be processed by many languages (currently C, C++, C#, Java, Python, and Ruby).</p></li>
<li><p>Avro creates binary structured format that is both <b>compressible</b> and <b>splittable</b>. Hence it can be efficiently used as the input to Hadoop MapReduce jobs.</p></li>
<li><p>Avro provides <b>rich data structures</b>. For example, you can create a record that contains an array, an enumerated type, and a sub record. These datatypes can be created in any language, can be processed in Hadoop, and the results can be fed to a third language.</p></li>
<li><p>Avro <b>schemas</b> defined in <b>JSON</b>, facilitate implementation in the languages that already have JSON libraries.</p></li>
<li><p>Avro creates a self-describing file named <i>Avro Data File,</i> in which it stores data along with its schema in the metadata section.</p></li>
<li><p>Avro is also used in Remote Procedure Calls (RPCs). During RPC, client and server exchange schemas in the connection handshake.</p></li>
</ul>
<h2>General Working of Avro</h2>
<p>To use Avro, you need to follow the given workflow &minus;</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Create schemas. Here you need to design Avro schema according to your data.</p></li>
<li><p><b>Step 2</b> &minus; Read the schemas into your program. It is done in two ways &minus;</p>
<ul class="list">
<li><p><b>By Generating a Class Corresponding to Schema</b> &minus; Compile the schema using Avro. This generates a class file corresponding to the schema</p></li>
<li><p><b>By Using Parsers Library</b> &minus; You can directly read the schema using parsers library.</p></li>
</ul>
</li>
<li><p><b>Step 3</b> &minus; Serialize the data using the serialization API provided for Avro, which is found in the <b>package org.apache.avro.specific</b>.</p></li>
<li><p><b>Step 4</b> &minus; Deserialize the data using deserialization API provided for Avro, which is found in the <b>package org.apache.avro.specific.</b></p></li>
</ul>
<h1>AVRO - Serialization</h1>
<p>Data is serialized for two objectives &minus;</p>
<ul class="list">
<li><p>For persistent storage</p></li>
<li><p>To transport the data over network</p></li>
</ul>
<h2>What is Serialization?</h2>
<p>Serialization is the process of translating data structures or objects state into binary or textual form to transport the data over network or to store on some persisten storage. Once the data is transported over network or retrieved from the persistent storage, it needs to be deserialized again. Serialization is termed as <b>marshalling</b> and deserialization is termed as <b>unmarshalling</b>.</p>
<h2>Serialization in Java</h2>
<p>Java provides a mechanism, called <b>object serialization</b> where an object can be represented as a sequence of bytes that includes the object's data as well as information about the object's type and the types of data stored in the object.</p>
<p>After a serialized object is written into a file, it can be read from the file and deserialized. That is, the type information and bytes that represent the object and its data can be used to recreate the object in memory.</p>
<p><b>ObjectInputStream</b> and <b>ObjectOutputStream</b> classes are used to serialize and deserialize an object respectively in Java.</p>
<h2>Serialization in Hadoop</h2>
<p>Generally in distributed systems like Hadoop, the concept of serialization is used for <b>Interprocess Communication</b> and <b>Persistent Storage</b>.</p>
<h3>Interprocess Communication</h3>
<ul class="list">
<li><p>To establish the interprocess communication between the nodes connected in a network, RPC technique was used.</p></li>
<li><p>RPC used internal serialization to convert the message into binary format before sending it to the remote node via network. At the other end the remote system deserializes the binary stream into the original message.</p></li>
<li><p>The RPC serialization format is required to be as follows &minus;</p>
<ul class="list">
<li><p><b>Compact</b> &minus; To make the best use of network bandwidth, which is the most scarce resource in a data center.</p></li>
<li><p><b>Fast</b> &minus; Since the communication between the nodes is crucial in distributed systems, the serialization and deserialization process should be quick, producing less overhead.</p></li>
<li><p><b>Extensible</b> &minus; Protocols change over time to meet new requirements, so it should be straightforward to evolve the protocol in a controlled manner for clients and servers.</p></li>
<li><p><b>Interoperable</b> &minus; The message format should support the nodes that are written in different languages.</p></li>
</ul>
</li>
</ul>
<h3>Persistent Storage</h3>
<p>Persistent Storage is a digital storage facility that does not lose its data with the loss of
power supply. Files, folders, databases are the examples of persistent storage.</p>
<h2>Writable Interface</h2>
<p>This is the interface in Hadoop which provides methods for serialization and deserialization. The following table describes the methods &minus;</p>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Methods and Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>void readFields(DataInput in)</b></p>
<p>This method is used to deserialize the fields of the given object.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>void write(DataOutput out)</b></p>
<p>This method is used to serialize the fields of the given object.</p></td>
</tr>
</table>
<h2>Writable Comparable Interface</h2>
<p>It is the combination of <b>Writable</b> and <b>Comparable</b> interfaces. This interface inherits <b>Writable</b> interface of Hadoop as well as <b>Comparable</b> interface of Java. Therefore it provides methods for data serialization, deserialization, and comparison.</p>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Methods and Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>int compareTo(class obj)</b></p>
<p>This method compares current object with the given object obj.</p></td>
</tr>
</table>
<p>In addition to these classes, Hadoop supports a number of wrapper classes that implement WritableComparable interface. Each class wraps a Java primitive type. The class hierarchy of Hadoop serialization is given below &minus;</p>
<img src="/avro/images/hadoop_serialization_hierarchy.jpg" alt="Hadoop Serialization Hierarchy" />
<p>These classes are useful to serialize various types of data in Hadoop. For instance, let us consider the <b>IntWritable</b> class. Let us see how this class is used to serialize and deserialize the data in Hadoop.</p>
<h2>IntWritable Class</h2>
<p>This class implements <b>Writable, Comparable,</b> and <b>WritableComparable</b> interfaces. It wraps an integer data type in it. This class provides methods used to serialize and deserialize integer type of data.</p>
<h3>Constructors</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Summary</th>
</tr>
<tr>
<td>1</td>
<td><b>IntWritable()</b></td>
</tr>
<tr>
<td>2</td>
<td><b>IntWritable( int value)</b></td>
</tr>
</table>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th style="width:5%;">S.No.</th>
<th>Summary</th>
</tr>
<tr>
<td>1</td>
<td><p><b>int get()</b></p>
<p>Using this method you can get the integer value present in the current object.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>void readFields(DataInput in)</b></p>
<p>This method is used to deserialize the data in the given <b>DataInput</b> object.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>void set(int value)</b></p>
<p>This method is used to set the value of the current <b>IntWritable</b> object.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>void write(DataOutput out)</b></p>
<p>This method is used to serialize the data in the current object to the given <b>DataOutput</b> object.</p></td>
</tr>
</table>
<h2>Serializing the Data in Hadoop</h2>
<p>The procedure to serialize the integer type of data is discussed below.</p>
<ul class="list">
<li><p>Instantiate <b>IntWritable</b> class by wrapping an integer value in it.</p></li>
<li><p>Instantiate <b>ByteArrayOutputStream</b> class.</p></li>
<li><p>Instantiate <b>DataOutputStream</b> class and pass the object of <b>ByteArrayOutputStream</b> class to it.</p></li>
<li><p>Serialize the integer value in IntWritable object using <b>write()</b> method. This method needs an object of DataOutputStream class.</p></li>
<li><p>The serialized data will be stored in the byte array object which is passed as parameter to the <b>DataOutputStream</b> class at the time of instantiation. Convert the data in the object to byte array.</p></li>
</ul>
<h3>Example</h3>
<p>The following example shows how to serialize data of integer type in Hadoop &minus;</p>
<pre class="prettyprint notranslate">
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;

public class Serialization {
   public byte[] serialize() throws IOException{
		
      //Instantiating the IntWritable object
      IntWritable intwritable = new IntWritable(12);
   
      //Instantiating ByteArrayOutputStream object
      ByteArrayOutputStream byteoutputStream = new ByteArrayOutputStream();
   
      //Instantiating DataOutputStream object
      DataOutputStream dataOutputStream = new
      DataOutputStream(byteoutputStream);
   
      //Serializing the data
      intwritable.write(dataOutputStream);
   
      //storing the serialized object in bytearray
      byte[] byteArray = byteoutputStream.toByteArray();
   
      //Closing the OutputStream
      dataOutputStream.close();
      return(byteArray);
   }
	
   public static void main(String args[]) throws IOException{
      Serialization serialization= new Serialization();
      serialization.serialize();
      System.out.println();
   }
}
</pre>
<h2>Deserializing the Data in Hadoop</h2>
<p>The procedure to deserialize the integer type of data is discussed below &minus;</p>
<ul class="list">
<li><p>Instantiate <b>IntWritable</b> class by wrapping an integer value in it.</p></li>
<li><p>Instantiate <b>ByteArrayOutputStream</b> class.</p></li>
<li><p>Instantiate <b>DataOutputStream</b> class and pass the object of <b>ByteArrayOutputStream</b> class to it.</p></li>
<li><p>Deserialize the data in the object of <b>DataInputStream</b> using <b>readFields()</b> method of IntWritable class.</p></li>
<li><p>The deserialized data will be stored in the object of IntWritable class. You can retrieve this data using <b>get()</b> method of this class.</p></li>
</ul>
<h3>Example</h3>
<p>The following example shows how to deserialize the data of integer type in Hadoop &minus;</p>
<pre class="prettyprint notranslate">
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;

import org.apache.hadoop.io.IntWritable;

public class Deserialization {

   public void deserialize(byte[]byteArray) throws Exception{
   
      //Instantiating the IntWritable class
      IntWritable intwritable =new IntWritable();
      
      //Instantiating ByteArrayInputStream object
      ByteArrayInputStream InputStream = new ByteArrayInputStream(byteArray);
      
      //Instantiating DataInputStream object
      DataInputStream datainputstream=new DataInputStream(InputStream);
      
      //deserializing the data in DataInputStream
      intwritable.readFields(datainputstream);
      
      //printing the serialized data
      System.out.println((intwritable).get());
   }
   
   public static void main(String args[]) throws Exception {
      Deserialization dese = new Deserialization();
      dese.deserialize(new Serialization().serialize());
   }
}
</pre>
<h2>Advantage of Hadoop over Java Serialization</h2>
<p>Hadoop’s Writable-based serialization is capable of reducing the object-creation overhead by reusing the Writable objects, which is not possible with the Java’s native serialization framework.</p>
<h2>Disadvantages of Hadoop Serialization</h2>
<p>To serialize Hadoop data, there are two ways &minus;</p>
<ul class="list">
<li><p>You can use the <b>Writable</b> classes, provided by Hadoop’s native library.</p></li>
<li><p>You can also use <b>Sequence Files</b> which store the data in binary format.</p></li>
</ul>
<p>The main drawback of these two mechanisms is that <b>Writables</b> and <b>SequenceFiles</b> have only a Java API and they cannot be written or read in any other language.</p>
<p>Therefore any of the files created in Hadoop with above two mechanisms cannot be read by any other third language, which makes Hadoop as a limited box. To address this drawback, Doug Cutting created <b>Avro,</b> which is a <b>language independent data structure</b>.</p>
<h1>AVRO - Environment Setup</h1>
<p>Apache software foundation provides Avro with various releases. You can download the required release from Apache mirrors. Let us see, how to set up the environment to work with Avro &minus;</p>
<h2>Downloading Avro</h2>
<p>To download Apache Avro, proceed with the following &minus;</p>
<ul class="list">
<li><p>Open the web page <a rel="nofollow" target="_blank" href="http://avro.apache.org/.">Apache.org</a>. You will see the homepage of Apache Avro as shown below &minus;</p></li>
</ul>
<img src="/avro/images/avro_homepage.jpg" alt="Avro Homepage" />
<ul class="list">
<li><p>Click on project &rarr; releases. You will get a list of releases.</p></li>
<li><p>Select the latest release which leads you to a download link.</p></li>
<li><p><a rel="nofollow" target="_blank" href="http://mirror.nexcess.net/apache/avro/stable/">mirror.nexcess</a> is one of the links where you can find the list of all libraries of different languages that Avro supports as shown below &minus;</p></li>
</ul>
<img src="/avro/images/avro_languages_supports.jpg" alt="Avro Languages Supports" />
<p>You can select and download the library for any of the languages provided. In this tutorial, we use Java. Hence download the jar files <b>avro-1.7.7.jar</b> and <b>avro-tools-1.7.7.jar</b>.</p>
<h2>Avro with Eclipse</h2>
<p>To use Avro in Eclipse environment, you need to follow the steps given below &minus;</p>
<ul class="list">
<li><p><b>Step 1.</b> Open eclipse.</p></li>
<li><p><b>Step 2.</b> Create a project.</p></li>
<li><p><b>Step 3.</b> Right-click on the project name. You will get a shortcut menu.</p></li>
<li><p><b>Step 4.</b> Click on <b>Build Path</b>. It leads you to another shortcut menu.</p></li>
<li><p><b>Step 5.</b> Click on <b>Configure Build Path...</b> You can see Properties window of your project as shown below &minus;</p></li>
</ul>
<img src="/avro/images/properties_of_avro.jpg" alt="Properties of Avro" />
<ul class="list">
<li><p><b>Step 6.</b> Under libraries tab, click on <b>ADD EXternal JARs...</b> button.</p></li>
<li><p><b>Step 7.</b> Select the jar file <b>avro-1.77.jar</b> you have downloaded.</p></li>
<li><p><b>Step 8.</b> Click on <b>OK</b>.</p></li>
</ul>
<h2>Avro with Maven</h2>
<p>You can also get the Avro library into your project using Maven. Given below is the pom.xml file for Avro.</p>
<pre class="prettyprint notranslate">
&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="   http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
   &lt;groupId&gt;Test&lt;/groupId&gt;
   &lt;artifactId&gt;Test&lt;/artifactId&gt;
   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

   &lt;build&gt;
      &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
      &lt;plugins&gt;
         &lt;plugin&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.1&lt;/version&gt;
		
            &lt;configuration&gt;
               &lt;source&gt;1.7&lt;/source&gt;
               &lt;target&gt;1.7&lt;/target&gt;
            &lt;/configuration&gt;
		
         &lt;/plugin&gt;
      &lt;/plugins&gt;
   &lt;/build&gt;

   &lt;dependencies&gt;
      &lt;dependency&gt;
         &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
         &lt;artifactId&gt;avro&lt;/artifactId&gt;
         &lt;version&gt;1.7.7&lt;/version&gt;
      &lt;/dependency&gt;
	
      &lt;dependency&gt;
         &lt;groupId&gt;org.apache.avro&lt;/groupId&gt;
         &lt;artifactId&gt;avro-tools&lt;/artifactId&gt;
         &lt;version&gt;1.7.7&lt;/version&gt;
      &lt;/dependency&gt;
	
      &lt;dependency&gt;
         &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
         &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;
         &lt;version&gt;2.0-beta9&lt;/version&gt;
      &lt;/dependency&gt;
	
      &lt;dependency&gt;
         &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;
         &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;
         &lt;version&gt;2.0-beta9&lt;/version&gt;
      &lt;/dependency&gt;
	
   &lt;/dependencies&gt;

&lt;/project&gt;
</pre>
<h2>Setting Classpath</h2>
<p>To work with Avro in Linux environment, download the following jar files &minus;</p>
<ul class="list">
<li>avro-1.77.jar</li>
<li>avro-tools-1.77.jar</li>
<li>log4j-api-2.0-beta9.jar</li>
<li>og4j-core-2.0.beta9.jar.</li>
</ul>
<p>Copy these files into a folder and set the classpath to the folder, in the .<b>/bashrc</b> file as shown below.</p>
<pre class="result notranslate">
#class path for Avro
export CLASSPATH=$CLASSPATH://home/Hadoop/Avro_Work/jars/*
</pre>
<p></p>
<img src="/avro/images/setting_classpath.jpg" alt="Setting CLASSPATH" />
<h1>AVRO - Schemas</h1>
<p>Avro, being a schema-based serialization utility, accepts schemas as input. In spite of various schemas being available, Avro follows its own standards of defining schemas. These schemas describe the following details &minus;</p>
<ul class="list">
<li>type of file (record by default)</li>
<li>location of record</li>
<li>name of the record</li>
<li>fields in the record with their corresponding data types</li>
</ul>
<p>Using these schemas, you can store serialized values in binary format using less space. These values are stored without any metadata.</p>
<h2>Creating Avro Schemas</h2>
<p>The Avro schema is created in JavaScript Object Notation (JSON) document format, which is a lightweight text-based data interchange format. It is created in one of the following ways &minus;</p>
<ul class="list">
<li>A JSON string</li>
<li>A JSON object</li>
<li>A JSON array</li>
</ul>
<p><b>Example</b> &minus; The following example shows a schema, which defines a document, under the name space Tutorialspoint, with name Employee, having fields name and age.</p>
<pre class="result notranslate">
{
   "type" : "record",
   "namespace" : "Tutorialspoint",
   "name" : "Employee",
   "fields" : [
      { "name" : "Name" , "type" : "string" },
      { "name" : "Age" , "type" : "int" }
   ]
}
</pre>
<p>In this example, you can observe that there are four fields for each record &minus;</p>
<ul class="list">
<li><p><b>type</b> &minus; This field comes under the document as well as the under the field named fields.</p>
<ul class="list">
<li><p>In case of document, it shows the type of the document, generally a record because there are multiple fields.</p></li>
<li><p>When it is field, the type describes data type. </p></li>
</ul></li></ul>
<ul class="list">
<li><p><b>namespace</b> &minus; This field describes the name of the namespace in which the object resides.</p></li>
<li><p><b>name</b> &minus; This field comes under the document as well as the under the field named fields.</p>
<ul class="list">
<li><p>In case of document, it describes the schema name. This schema name together with the namespace, uniquely identifies the schema within the store (<b>Namespace.schema name</b>). In the above example, the full name of the schema will be Tutorialspoint.Employee.</p></li>
<li><p>In case of fields, it describes name of the field.</p></li>
</ul></li></ul>
<h2>Primitive Data Types of Avro</h2>
<p>Avro schema is having primitive data types as well as complex data types. The following table describes the <b>primitive data types</b> of Avro &minus;</p>
<table class="table table-bordered">
<tr>
<th>Data type</th>
<th>Description</th>
</tr>
<tr>
<td>null</td>
<td>Null is a type having no value.</td>
</tr>
<tr>
<td>int</td>
<td>32-bit signed integer.</td>
</tr>
<tr>
<td>long</td>
<td>64-bit signed integer.</td>
</tr>
<tr>
<td>float</td>
<td>single precision (32-bit) IEEE 754 floating-point number.</td>
</tr>
<tr>
<td>double</td>
<td>double precision (64-bit) IEEE 754 floating-point number.</td>
</tr>
<tr>
<td>bytes</td>
<td>sequence of 8-bit unsigned bytes.</td>
</tr>
<tr>
<td>string</td>
<td>Unicode character sequence.</td>
</tr>
</table>
<h2>Complex Data Types of Avro</h2>
<p>Along with primitive data types, Avro provides six complex data types namely Records, Enums, Arrays, Maps, Unions, and Fixed.</p>
<h3>Record</h3>
<p>A record data type in Avro is a collection of multiple attributes. It supports the following
attributes &minus;</p>
<ul class="list">
<li><p><b>name</b> &minus; The value of this field holds the name of the record.</p></li>
<li><p><b>namespace</b> &minus; The value of this field holds the name of the namespace where the
object is stored.</p></li>
<li><p><b>type</b> &minus; The value of this attribute holds either the type of the document (record) or the datatype of the field in the schema.</p></li>
<li><p><b>fields</b> &minus; This field holds a JSON array, which have the list of all of the fields in the schema, each having name and the type attributes.</p></li>
</ul>
<p><b>Example</b></p>
<p>Given below is the example of a record.</p>
<pre class="result notranslate">
{
" type " : "record",
" namespace " : "Tutorialspoint",
" name " : "Employee",
" fields " : [
 { "name" : " Name" , "type" : "string" },
 { "name" : "age" , "type" : "int" }
 ]
}
</pre>
<h3>Enum</h3>
<p>An enumeration is a list of items in a collection, Avro enumeration supports the following attributes &minus;</p>
<ul class="list">
<li><p><b>name</b> &minus; The value of this field holds the name of the enumeration.</p></li>
<li><p><b>namespace</b> &minus; The value of this field contains the string that qualifies the name of the Enumeration.</p></li>
<li><p><b>symbols</b> &minus; The value of this field holds the enum's symbols as an array of names.</p></li>
</ul>
<p><b>Example</b></p>
<p>Given below is the example of an enumeration.</p>
<pre class="result notranslate">
{
   "type" : "enum",
   "name" : "Numbers", 
   "namespace": "data", 
   "symbols" : [ "ONE", "TWO", "THREE", "FOUR" ]
}
</pre>
<h3>Arrays</h3>
<p>This data type defines an array field having a single attribute items. This items attribute specifies the type of items in the array.</p>
<p><b>Example</b></p>
<pre class="result notranslate">
{ " type " : " array ", " items " : " int " }
</pre>
<h3>Maps</h3>
<p>The map data type is an array of key-value pairs, it organizes data as key-value pairs. The
key for an Avro map must be a string. The values of a map hold the data type of the content of map.</p>
<p><b>Example</b></p>
<pre class="result notranslate">
{"type" : "map", "values" : "int"}
</pre>
<h3>Unions</h3>
<p>A union datatype is used whenever the field has one or more datatypes. They are represented as JSON arrays. For example, if a field that could be either an int or null, then the union is represented as ["int", "null"].</p>
<p><b>Example</b></p>
<p>Given below is an example document using unions &minus;</p>
<pre class="result notranslate">
{ 
   "type" : "record", 
   "namespace" : "tutorialspoint", 
   "name" : "empdetails ", 
   "fields" : 
   [ 
      { "name" : "experience", "type": ["int", "null"] }, { "name" : "age", "type": "int" } 
   ] 
}
</pre>
<h3>Fixed</h3>
<p>This data type is used to declare a fixed-sized field that can be used for storing binary data. It has field name and data as attributes. Name holds the name of the field, and size holds the size of the field.</p>
<p><b>Example</b></p>
<pre class="result notranslate">
{ "type" : "fixed" , "name" : "bdata", "size" : 1048576}
</pre>
<h1>AVRO - Reference API</h1>
<p>In the previous chapter, we described the input type of Avro, i.e., Avro schemas. In this chapter, we will explain the classes and methods used in the serialization and deserialization of Avro schemas.</p>
<h2>SpecificDatumWriter Class</h2>
<p>This class belongs to the package <b>org.apache.avro.specific</b>. It implements the <b>DatumWriter</b> interface which converts Java objects into an in-memory serialized format.</p>
<h3>Constructor</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><b>SpecificDatumWriter(Schema schema)</b></td>
</tr>
</table>
<h3>Method</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>SpecificData getSpecificData()</b></p>
<p>Returns the SpecificData implementation used by this writer.</p></td>
</tr>
</table>
<h2>SpecificDatumReader Class</h2>
<p>This class belongs to the package <b>org.apache.avro.specific</b>. It implements the <b>DatumReader</b> interface which reads the data of a schema and determines in-memory data representation. <b>SpecificDatumReader</b> is the class which supports generated java classes.</p>
<h3>Constructor</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>SpecificDatumReader(Schema schema)</b></p>
<p>Construct where the writer's and reader's schemas are the same.</p></td>
</tr>
</table>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>SpecificData getSpecificData()</b></p>
<p>Returns the contained SpecificData.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>void setSchema(Schema actual)</b></p>
<p>This method is used to set the writer's schema.</p></td>
</tr>
</table>
<h2>DataFileWriter</h2>
<p>Instantiates <b>DataFileWrite</b> for <b>emp</b> class. This class writes a sequence serialized records of data conforming to a schema, along with the schema in a file.</p>
<h3>Constructor</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><b>DataFileWriter(DatumWriter&lt;D&gt; dout)</b></td>
</tr>
</table>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th>S.No</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>void append(D datum)</b></p>
<p>Appends a datum to a file.</p>
</td>
</tr>
<tr>
<td>2</td>
<td><p><b>DataFileWriter&lt;D&gt; appendTo(File file)</b></p>
<p>This method is used to open a writer appending to an existing file.</p>
</td>
</tr>
</table>
<h2>Data FileReader</h2>
<p>This class provides random access to files written with <b>DataFileWriter</b>. It inherits the class <b>DataFileStream</b>.</p>
<h3>Constructor</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><b>DataFileReader(File file, DatumReader&lt;D&gt; reader))</b></td>
</tr>
</table>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>next()</b></p>
<p>Reads the next datum in the file.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>Boolean hasNext()</b></p>
<p>Returns true if more entries remain in this file.</p></td>
</tr>
</table>
<h2>Class Schema.parser</h2>
<p>This class is a parser for JSON-format schemas. It contains methods to parse the schema. It belongs to <b>org.apache.avro</b> package.</p>
<h3>Constructor</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><b>Schema.Parser()</b></td>
</tr>
</table>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>parse (File file)</b></p>
<p>Parses the schema provided in the given <b>file</b>.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>parse (InputStream in)</b></p>
<p>Parses the schema provided in the given <b>InputStream</b>.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>parse (String s)</b></p>
<p>Parses the schema provided in the given <b>String</b>.</p></td>
</tr>
</table>
<h2>Interface GenricRecord</h2>
<p>This interface provides methods to access the fields by name as well as index.</p>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>Object get(String key)</b></p>
<p>Returns the value of a field given.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>void put(String key, Object v)</b></p>
<p>Sets the value of a field given its name.</p></td>
</tr>
</table>
<h2>Class GenericData.Record</h2>
<h3>Constructor</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><b>GenericData.Record(Schema schema)</b></td>
</tr>
</table>
<h3>Methods</h3>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th>Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>Object get(String key)</b></p>
<p>Returns the value of a field of the given name.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>Schema getSchema()</b></p>
<p>Returns the schema of this instance.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>void put(int i, Object v)</b></p>
<p>Sets the value of a field given its position in the schema.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>void put(String key, Object value)</b></p>
<p>Sets the value of a field given its name.</p></td>
</tr>
</table>
<h1>AVRO - Serialization By Generating Class</h1>
<p>One can read an Avro schema into the program either by generating a class corresponding to a schema or by using the parsers library. This chapter describes how to read the schema <b>by generating a class</b> and <b>Serializing</b> the data using Avr.</p>
<img src="/avro/images/avro_withcode_serialize.jpg" alt="Avro WithCode Serializing" />
<h2>Serialization by Generating a Class</h2>
<p>To serialize the data using Avro, follow the steps as given below &minus;</p>
<ul class="list">
<li><p>Write an Avro schema.</p></li>
<li><p>Compile the schema using Avro utility. You get the Java code corresponding to that
schema.</p></li>
<li><p>Populate the schema with the data.</p></li>
<li><p>Serialize it using Avro library.</p></li>
</ul>
<h2>Defining a Schema</h2>
<p>Suppose you want a schema with the following details &minus;</p>
<table class="table table-bordered">
<tr>
<td><b>Field</b></td>
<td>Name</td>
<td>id</td>
<td>age</td>
<td>salary</td>
<td>address</td>
</tr>
<tr>
<td><b>type</b></td>
<td>String</td>
<td>int</td>
<td>int</td>
<td>int</td>
<td>string</td>
</tr>
</table>
<p>Create an Avro schema as shown below.</p>
<p>Save it as <b>emp.avsc</b>.</p>
<pre class="result notranslate">
{
   "namespace": "tutorialspoint.com",
   "type": "record",
   "name": "emp",
   "fields": [
      {"name": "name", "type": "string"},
      {"name": "id", "type": "int"},
      {"name": "salary", "type": "int"},
      {"name": "age", "type": "int"},
      {"name": "address", "type": "string"}
   ]
}
</pre>
<h2>Compiling the Schema</h2>
<p>After creating an Avro schema, you need to compile the created schema using Avro tools.
<b>avro-tools-1.7.7.jar</b> is the jar containing the tools.</p>
<h3>Syntax to Compile an Avro Schema</h3>
<pre class="result notranslate">
java -jar &lt;path/to/avro-tools-1.7.7.jar&gt; compile schema &lt;path/to/schema-file&gt; &lt;destination-folder&gt;
</pre>
<p>Open the terminal in the home folder.</p>
<p>Create a new directory to work with Avro as shown below &minus;</p>
<pre class="result notranslate">
$ mkdir Avro_Work
</pre>
<p>In the newly created directory, create three sub-directories &minus;</p>
<ul class="list">
<li><p>First named <b>schema,</b> to place the schema.</p></li>
<li><p>Second named <b>with_code_gen,</b> to place the generated code.</p></li>
<li><p>Third named <b>jars,</b> to place the jar files.</p></li>
</ul>
<pre class="result notranslate">
$ mkdir schema
$ mkdir with_code_gen
$ mkdir jars
</pre>
<p>The following screenshot shows how your <b>Avro_work</b> folder should look like after creating all the directories.</p>
<img src="/avro/images/avro_work.jpg" alt="Avro Work" />
<ul class="list">
<li><p>Now <b>/home/Hadoop/Avro_work/jars/avro-tools-1.7.7.jar</b> is the path for the directory where you have downloaded avro-tools-1.7.7.jar file.</p></li>
<li><p><b>/home/Hadoop/Avro_work/schema/</b> is the path for the directory where your schema file emp.avsc is stored.</p></li>
<li><p><b>/home/Hadoop/Avro_work/with_code_gen</b> is the directory where you want the generated class files to be stored.</p></li>
</ul>
<p>Now compile the schema as shown below &minus;</p>
<pre class="result notranslate">
$ java -jar /home/Hadoop/Avro_work/jars/avro-tools-1.7.7.jar compile schema /home/Hadoop/Avro_work/schema/emp.avsc /home/Hadoop/Avro/with_code_gen
</pre>
<p>After compiling, a package according to the name space of the schema is created in the
destination directory. Within this package, the Java source code with schema name is created. This generated source code is the Java code of the given schema which can be used in the applications directly.</p>
<p>For example, in this instance a package/folder, named <b>tutorialspoint</b> is created which contains another folder named com (since the name space is tutorialspoint.com) and within it, you can observe the generated file <b>emp.java</b>. The following snapshot shows <b>emp.java</b> &minus; </p>
<img src="/avro/images/snapshot_sample_program.jpg" alt="Snapshot of Sample Program" />
<p>This class is useful to create data according to schema.</p>
<p>The generated class contains &minus;</p>
<ul class="list">
<li>Default constructor, and parameterized constructor which accept all the variables of the schema.</li>
<li>The setter and getter methods for all variables in the schema.</li>
<li>Get() method which returns the schema.</li>
<li>Builder methods.</li>
</ul>
<h2>Creating and Serializing the Data</h2>
<p>First of all, copy the generated java file used in this project into the current directory or import it from where it is located.</p>
<p>Now we can write a new Java file and instantiate the class in the generated file (<b>emp</b>) to add employee data to the schema.</p>
<p>Let us see the procedure to create data according to the schema using apache Avro.</p>
<h3>Step 1</h3>
<p>Instantiate the generated <b>emp</b> class.</p>
<pre class="result notranslate">
emp e1=new emp( );
</pre>
<h3>Step 2</h3>
<p>Using setter methods, insert the data of first employee. For example, we have created the details of the employee named Omar.</p>
<pre class="result notranslate">
e1.setName("omar");
e1.setAge(21);
e1.setSalary(30000);
e1.setAddress("Hyderabad");
e1.setId(001);
</pre>
<p>Similarly, fill in all employee details using setter methods.</p>
<h3>Step 3</h3>
<p>Create an object of <b>DatumWriter</b> interface using the <b>SpecificDatumWriter</b> class. This converts Java objects into in-memory serialized format. The following example instantiates <b>SpecificDatumWriter</b> class object for <b>emp</b> class.</p>
<pre class="result notranslate">
DatumWriter&lt;emp&gt; empDatumWriter = new SpecificDatumWriter&lt;emp&gt;(emp.class);
</pre>
<h3>Step 4</h3>
<p>Instantiate <b>DataFileWriter</b> for <b>emp</b> class. This class writes a sequence serialized records of data conforming to a schema, along with the schema itself, in a file. This class requires the <b>DatumWriter</b> object, as a parameter to the constructor.</p>
<pre class="result notranslate">
DataFileWriter&lt;emp&gt; empFileWriter = new DataFileWriter&lt;emp&gt;(empDatumWriter);
</pre>
<h3>Step 5</h3>
<p>Open a new file to store the data matching to the given schema using <b>create()</b> method. This method requires the schema, and the path of the file where the data is to be stored, as parameters.</p>
<p>In the following example, schema is passed using <b>getSchema()</b> method, and the data file is stored in the path &minus; <b>/home/Hadoop/Avro/serialized_file/emp.avro.</b></p>
<pre class="prettyprint notranslate">
empFileWriter.create(e1.getSchema(),new File("/home/Hadoop/Avro/serialized_file/emp.avro"));
</pre>
<h3>Step 6</h3>
<p>Add all the created records to the file using <b>append()</b> method as shown below &minus;</p>
<pre class="result notranslate">
empFileWriter.append(e1);
empFileWriter.append(e2);
empFileWriter.append(e3);
</pre>
<h2>Example – Serialization by Generating a Class</h2>
<p>The following complete program shows how to serialize data into a file using Apache Avro &minus;</p>
<pre class="prettyprint notranslate">
import java.io.File;
import java.io.IOException;

import org.apache.avro.file.DataFileWriter;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.specific.SpecificDatumWriter;

public class Serialize {
   public static void main(String args[]) throws IOException{
	
      //Instantiating generated emp class
      emp e1=new emp();
	
      //Creating values according the schema
      e1.setName("omar");
      e1.setAge(21);
      e1.setSalary(30000);
      e1.setAddress("Hyderabad");
      e1.setId(001);
	
      emp e2=new emp();
	
      e2.setName("ram");
      e2.setAge(30);
      e2.setSalary(40000);
      e2.setAddress("Hyderabad");
      e2.setId(002);
	
      emp e3=new emp();
	
      e3.setName("robbin");
      e3.setAge(25);
      e3.setSalary(35000);
      e3.setAddress("Hyderabad");
      e3.setId(003);
	
      //Instantiate DatumWriter class
      DatumWriter&lt;emp&gt; empDatumWriter = new SpecificDatumWriter&lt;emp&gt;(emp.class);
      DataFileWriter&lt;emp&gt; empFileWriter = new DataFileWriter&lt;emp&gt;(empDatumWriter);
	
      empFileWriter.create(e1.getSchema(), new File("/home/Hadoop/Avro_Work/with_code_gen/emp.avro"));
	
      empFileWriter.append(e1);
      empFileWriter.append(e2);
      empFileWriter.append(e3);
	
      empFileWriter.close();
	
      System.out.println("data successfully serialized");
   }
}
</pre>
<p>Browse through the directory where the generated code is placed. In this case, at <b>home/Hadoop/Avro_work/with_code_gen</b>.</p>
<p><b>In Terminal &minus;</b></p>
<pre class="result notranslate">
$ cd home/Hadoop/Avro_work/with_code_gen/
</pre>
<p><b>In GUI &minus;</b></p>
<img src="/avro/images/generated_code.jpg" alt="Generated Code" />
<p>Now copy and save the above program in the file named <b>Serialize.java</b></p>
<p>Compile and execute it as shown below &minus;</p>
<pre class="result notranslate">
$ javac Serialize.java
$ java Serialize
</pre>
<h3>Output</h3>
<pre class="result notranslate">
data successfully serialized
</pre>
<p>If you verify the path given in the program, you can find the generated serialized file as shown below.</p>
<img src="/avro/images/generated_serialized_file.jpg" alt="Generated Serialized File" />
<h1>AVRO - Deserialization By Generating Class</h1>
<p>As described earlier, one can read an Avro schema into a program either by generating a class corresponding to the schema or by using the parsers library. This chapter describes how to read the schema <b>by generating a class</b> and <b>Deserialize</b> the data using Avro.</p>
<h2>Deserialization by Generating a Class</h2>
<p>The serialized data is stored in the file <b>emp.avro</b>. You can deserialize and read it using Avro.</p>
<img src="/avro/images/serialized_data_is_stored.jpg" alt="Serialized Data is Stored" />
<p>Follow the procedure given below to deserialize the serialized data from a file.</p>
<h3>Step 1</h3>
<p>Create an object of <b>DatumReader</b> interface using <b>SpecificDatumReader</b> class.</p>
<pre class="result notranslate">
DatumReader&lt;emp&gt;empDatumReader = new SpecificDatumReader&lt;emp&gt;(emp.class);
</pre>
<h3>Step 2</h3>
<p>Instantiate <b>DataFileReader</b> for <b>emp</b> class. This class reads serialized data from a file. It requires the <b>Dataumeader</b> object, and path of the file where the serialized data is existing, as a parameters to the constructor.</p>
<pre class="result notranslate">
DataFileReader&lt;emp&gt; dataFileReader = new DataFileReader(new File("/path/to/<b>emp.avro</b>"), empDatumReader);
</pre>
<h3>Step 3</h3>
<p>Print the deserialized data, using the methods of <b>DataFileReader</b>.</p>
<ul class="list">
<li><p>The <b>hasNext()</b> method will return a boolean if there are any elements in the Reader.</p></li>
<li><p>The <b>next()</b> method of <b>DataFileReader</b> returns the data in the Reader.</p></li>
</ul>
<pre class="prettyprint notranslate">
while(dataFileReader.hasNext()){

   em=dataFileReader.next(em);
   System.out.println(em);
}
</pre>
<h2>Example – Deserialization by Generating a Class</h2>
<p>The following complete program shows how to deserialize the data in a file using Avro.</p>
<pre class="prettyprint notranslate">
import java.io.File;
import java.io.IOException;

import org.apache.avro.file.DataFileReader;
import org.apache.avro.io.DatumReader;
import org.apache.avro.specific.SpecificDatumReader;

public class Deserialize {
   public static void main(String args[]) throws IOException{
	
      //DeSerializing the objects
      DatumReader&lt;emp&gt; empDatumReader = new SpecificDatumReader&lt;emp&gt;(emp.class);
		
      //Instantiating DataFileReader
      DataFileReader&lt;emp&gt; dataFileReader = new DataFileReader&lt;emp&gt;(new
         File("/home/Hadoop/Avro_Work/with_code_genfile/emp.avro"), empDatumReader);
      emp em=null;
		
      while(dataFileReader.hasNext()){
      
         em=dataFileReader.next(em);
         System.out.println(em);
      }
   }
}
</pre>
<p>Browse into the directory where the generated code is placed. In this case, at <b>home/Hadoop/Avro_work/with_code_gen.</b></p>
<pre class="result notranslate">
$ cd home/Hadoop/Avro_work/with_code_gen/
</pre>
<p>Now, copy and save the above program in the file named <b>DeSerialize.java</b>. Compile and execute it as shown below &minus;</p>
<pre class="result notranslate">
$ javac Deserialize.java
$ java Deserialize
</pre>
<h3>Output</h3>
<pre class="result notranslate">
{"name": "omar", "id": 1, "salary": 30000, "age": 21, "address": "Hyderabad"}
{"name": "ram", "id": 2, "salary": 40000, "age": 30, "address": "Hyderabad"}
{"name": "robbin", "id": 3, "salary": 35000, "age": 25, "address": "Hyderabad"}
</pre>
<h1>AVRO - Serialization Using Parsers</h1>
<p>One can read an Avro schema into a program either by generating a class corresponding to a schema or by using the parsers library. In Avro, data is always stored with its corresponding schema. Therefore, we can always read a schema without code generation.</p>
<p>This chapter describes how to read the schema <b>by using parsers library</b> and to <b>serialize</b> the data using Avro.</p>
<img src="/avro/images/avro_withoutcode_serialize.jpg" alt="Avro Without Code Serialize" />
<h2>Serialization Using Parsers Library</h2>
<p>To serialize the data, we need to read the schema, create data according to the schema, and serialize the schema using the Avro API. The following procedure serializes the data without generating any code &minus;</p>
<h3>Step 1</h3>
<p>First of all, read the schema from the file. To do so, use <b>Schema.Parser</b> class. This class provides methods to parse the schema in different formats.</p>
<p>Instantiate the <b>Schema.Parser</b> class by passing the file path where the schema is stored.</p>
<pre class="result notranslate">
Schema schema = new Schema.Parser().parse(new File("/path/to/emp.avsc"));
</pre>
<h3>Step 2</h3>
<p>Create the object of <b>GenericRecord</b> interface, by instantiating <b>GenericData.Record</b> class as shown below. Pass the above created schema object to its constructor.</p>
<pre class="result notranslate">
GenericRecord e1 = new GenericData.Record(schema);
</pre>
<h3>Step 3</h3>
<p>Insert the values in the schema using the <b>put()</b> method of the <b>GenericData</b> class.</p>
<pre class="result notranslate">
e1.put("name", "ramu");
e1.put("id", 001);
e1.put("salary",30000);
e1.put("age", 25);
e1.put("address", "chennai");
</pre>
<h3>Step 4</h3>
<p>Create an object of <b>DatumWriter</b> interface using the <b>SpecificDatumWriter</b> class. It converts Java objects into in-memory serialized format. The following example instantiates <b>SpecificDatumWriter</b> class object for <b>emp</b> class &minus;</p>
<pre class="result notranslate">
DatumWriter&lt;emp&gt; empDatumWriter = new SpecificDatumWriter&lt;emp&gt;(emp.class);
</pre>
<h3>Step 5</h3>
<p>Instantiate <b>DataFileWriter</b> for <b>emp</b> class. This class writes serialized records of data conforming to a schema, along with the schema itself, in a file. This class requires the <b>DatumWriter</b> object, as a parameter to the constructor.</p>
<pre class="result notranslate">
DataFileWriter&lt;emp&gt; dataFileWriter = new DataFileWriter&lt;emp&gt;(empDatumWriter);
</pre>
<h3>Step 6</h3>
<p>Open a new file to store the data matching to the given schema using <b>create()</b> method. This method requires the schema, and the path of the file where the data is to be stored, as parameters.</p>
<p>In the example given below, schema is passed using <b>getSchema()</b> method and the data file is stored in the path</p>
<p><b>/home/Hadoop/Avro/serialized_file/emp.avro.</b></p>
<pre class="result notranslate">
empFileWriter.create(e1.getSchema(), new
File("/home/Hadoop/Avro/serialized_file/emp.avro"));
</pre>
<h3>Step 7</h3>
<p>Add all the created records to the file using <b>append( )</b> method as shown below.</p>
<pre class="result notranslate">
empFileWriter.append(e1);
empFileWriter.append(e2);
empFileWriter.append(e3);
</pre>
<h2>Example – Serialization Using Parsers</h2>
<p>The following complete program shows how to serialize the data using parsers &minus;</p>
<pre class="prettyprint notranslate">
import java.io.File;
import java.io.IOException;

import org.apache.avro.Schema;
import org.apache.avro.file.DataFileWriter;

import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.generic.GenericRecord;

import org.apache.avro.io.DatumWriter;

public class Seriali {
   public static void main(String args[]) throws IOException{
	
      //Instantiating the Schema.Parser class.
      Schema schema = new Schema.Parser().parse(new File("/home/Hadoop/Avro/schema/emp.avsc"));
		
      //Instantiating the GenericRecord class.
      GenericRecord e1 = new GenericData.Record(schema);
		
      //Insert data according to schema
      e1.put("name", "ramu");
      e1.put("id", 001);
      e1.put("salary",30000);
      e1.put("age", 25);
      e1.put("address", "chenni");
		
      GenericRecord e2 = new GenericData.Record(schema);
		
      e2.put("name", "rahman");
      e2.put("id", 002);
      e2.put("salary", 35000);
      e2.put("age", 30);
      e2.put("address", "Delhi");
		
      DatumWriter&lt;GenericRecord&gt; datumWriter = new GenericDatumWriter&lt;GenericRecord&gt;(schema);
		
      DataFileWriter&lt;GenericRecord&gt; dataFileWriter = new DataFileWriter&lt;GenericRecord&gt;(datumWriter);
      dataFileWriter.create(schema, new File("/home/Hadoop/Avro_work/without_code_gen/mydata.txt"));
		
      dataFileWriter.append(e1);
      dataFileWriter.append(e2);
      dataFileWriter.close();
		
      System.out.println(“data successfully serialized”);
   }
}
</pre>
<p>Browse into the directory where the generated code is placed. In this case, at <b>home/Hadoop/Avro_work/without_code_gen</b>.</p>
<pre class="result notranslate">
$ cd home/Hadoop/Avro_work/without_code_gen/
</pre>
<img src="/avro/images/without_code_gen.jpg" alt="Without Code Gen" />
<p>Now copy and save the above program in the file named <b>Serialize.java</b>. Compile and execute it as shown below &minus;</p>
<pre class="result notranslate">
$ javac Serialize.java
$ java Serialize
</pre>
<h3>Output</h3>
<pre class="result notranslate">
data successfully serialized
</pre>
<p>If you verify the path given in the program, you can find the generated serialized file as shown below.</p>
<img src="/avro/images/without_code_gen1.jpg" alt="Without Code Gen1" />
<h1>AVRO - Deserialization Using Parsers</h1>
<p>As mentioned earlier, one can read an Avro schema into a program either by generating a class corresponding to a schema or by using the parsers library. In Avro, data is always stored with its corresponding schema. Therefore, we can always read a serialized item without code generation.</p>
<p>This chapter describes how to read the schema <b>using parsers library</b> and <b>Deserializing</b> the data using Avro.</p>
<h2>Deserialization Using Parsers Library</h2>
<p>The serialized data is stored in the file <b>mydata.txt</b>. You can deserialize and read it using Avro.</p>
<img src="/avro/images/avro_utility.jpg" alt="Avro Utility" />
<p>Follow the procedure given below to deserialize the serialized data from a file.</p>
<h3>Step 1</h3>
<p>First of all, read the schema from the file. To do so, use <b>Schema.Parser</b> class. This class provides methods to parse the schema in different formats.</p>
<p>Instantiate the <b>Schema.Parser</b> class by passing the file path where the schema is stored.</p>
<pre class="result notranslate">
Schema schema = new Schema.Parser().parse(new File("/path/to/emp.avsc"));
</pre>
<h3>Step 2</h3>
<p>Create an object of <b>DatumReader</b> interface using <b>SpecificDatumReader</b> class.</p>
<pre class="result notranslate">
DatumReader&lt;emp&gt;empDatumReader = new SpecificDatumReader&lt;emp&gt;(emp.class);
</pre>
<h3>Step 3</h3>
<p>Instantiate <b>DataFileReader</b> class. This class reads serialized data from a file. It requires the <b>DatumReader</b> object, and path of the file where the serialized data exists, as a parameters to the constructor.</p>
<pre class="result notraslate">
DataFileReader&lt;GenericRecord&gt; dataFileReader = new DataFileReader&lt;GenericRecord&gt;(new File("/path/to/mydata.txt"), datumReader);
</pre>
<h3>Step 4</h3>
<p>Print the deserialized data, using the methods of <b>DataFileReader</b>.</p>
<ul class="list">
<li><p>The <b>hasNext()</b> method returns a boolean if there are any elements in the Reader
.</p></li>
<li><p>The <b>next()</b> method of <b>DataFileReader</b> returns the data in the Reader.</p></li>
</ul>
<pre class="prettyprint notranslate">
while(dataFileReader.hasNext()){

   em=dataFileReader.next(em);
   System.out.println(em);
}
</pre>
<h2>Example – Deserialization Using Parsers Library</h2>
<p>The following complete program shows how to deserialize the serialized data using Parsers library &minus;</p>
<pre class="prettyprint notranslate">
public class Deserialize {
   public static void main(String args[]) throws Exception{
	
      //Instantiating the Schema.Parser class.
      Schema schema = new Schema.Parser().parse(new File("/home/Hadoop/Avro/schema/emp.avsc"));
      DatumReader&lt;GenericRecord&gt; datumReader = new GenericDatumReader&lt;GenericRecord&gt;(schema);
      DataFileReader&lt;GenericRecord&gt; dataFileReader = new DataFileReader&lt;GenericRecord&gt;(new File("/home/Hadoop/Avro_Work/without_code_gen/mydata.txt"), datumReader);
      GenericRecord emp = null;
		
      while (dataFileReader.hasNext()) {
         emp = dataFileReader.next(emp);
         System.out.println(emp);
      }
      System.out.println("hello");
   }
}
</pre>
<p>Browse into the directory where the generated code is placed. In this case, it is at <b>home/Hadoop/Avro_work/without_code_gen</b>.</p>
<pre class="result notranslate">
$ cd home/Hadoop/Avro_work/without_code_gen/
</pre>
<p>Now copy and save the above program in the file named <b>DeSerialize.java</b>. Compile and execute it as shown below &minus;</p>
<pre class="result notranslate">
$ javac Deserialize.java
$ java Deserialize
</pre>
<h3>Output</h3>
<pre class="result notranslate">
{"name": "ramu", "id": 1, "salary": 30000, "age": 25, "address": "chennai"}
{"name": "rahman", "id": 2, "salary": 35000, "age": 30, "address": "Delhi"}
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/avro/deserialization_using_parsers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/avro/avro_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
