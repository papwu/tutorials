<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Ethereum - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Ethereum - Quick Guide - A huge success of Bitcoin raised interest in the minds of several to create their own currencies. Looking at the advantages offered by Bitcoin - a digital curre"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/ethereum/ethereum_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#912927;
}
a.demo {
    background:#912927;
}
li.heading {
    background:#912927;
}
.course-box{background:#912927}
.home-intro-sub p{color:#912927}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/ethereum/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/ethereum/images/ethereum-mini-logo.jpg" alt="Ethereum Tutorial" />
</div>
<ul class="toc chapters" >
<li class="heading">Ethereum Tutorial</li>
<li><a href="/ethereum/index.htm">Ethereum - Home</a></li>
<li><a href="/ethereum/ethereum_introduction.htm">Ethereum - Introduction</a></li>
<li><a href="/ethereum/ethereum_smart_contracts.htm">Ethereum - Smart Contracts</a></li>
<li><a href="/ethereum/ethereum_solidity_for_contract_writing.htm">Ethereum - Solidity for Contract Writing</a></li>
<li><a href="/ethereum/ethereum_developing_mycontract.htm">Ethereum - Developing MyContract</a></li>
<li><a href="/ethereum/ethereum_compiling_contract.htm">Ethereum - Compiling the Contract</a></li>
<li><a href="/ethereum/ethereum_deploying_the_contract.htm">Ethereum - Deploying the Contract</a></li>
<li><a href="/ethereum/ethereum_interacting_contract.htm">Ethereum - Interacting with the Contract</a></li>
<li><a href="/ethereum/ethereum_limitations_of_remix.htm">Ethereum - Limitations of Remix</a></li>
<li><a href="/ethereum/ethereum_ganache_for_blockchain.htm">Ethereum - Ganache for Blockchain</a></li>
<li><a href="/ethereum/ethereum_ganache_server_settings.htm">Ethereum - Ganache Server Settings</a></li>
<li><a href="/ethereum/ethereum_quick_walkthrough.htm">Ethereum - A Quick Walkthrough</a></li>
<li><a href="/ethereum/ethereum_myetherwallet.htm">Ethereum - MyEtherWallet</a></li>
<li><a href="/ethereum/ethereum_creating_wallet.htm">Ethereum - Creating Wallet</a></li>
<li><a href="/ethereum/ethereum_attaching_wallet_to_ganache_blockchain.htm">Attaching Wallet to Ganache Blockchain</a></li>
<li><a href="/ethereum/ethereum_deploying_contract.htm">Ethereum - Deploying Contract</a></li>
<li><a href="/ethereum/ethereum_interacting_with_deployed_contract.htm">Interacting with Deployed Contract</a></li>
<li><a href="/ethereum/ethereum_creating_contract_users.htm">Ethereum - Creating Contract Users</a></li>
<li><a href="/ethereum/ethereum_summary.htm">Ethereum - Summary</a></li>
<li class="heading">Ethereum Useful Resources</li>
<li><a href="/ethereum/ethereum_quick_guide.htm">Ethereum - Quick Guide</a></li>
<li><a href="/ethereum/ethereum_useful_resources.htm">Ethereum - Useful Resources</a></li>
<li><a href="/ethereum/ethereum_discussion.htm">Ethereum - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Ethereum - Quick Guide</h1>
<hr/>
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/ethereum/ethereum_summary.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ethereum/ethereum_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clear"></div>
<h1>Ethereum - Introduction</h1>
<p>A huge success of Bitcoin raised interest in the minds of several to create their own currencies. Looking at the advantages offered by Bitcoin - a digital currency, people wanted to use the concept of Blockchain in their own applications. People wanted to move out of their physical contracts to smart digital contracts where several issues like repudiation, transparency, security, etc. would be automatically addressed. The outcome of this effort resulted in the creation of Ethereum - a popular platform for creating distributed Blockchain applications that support smart contracts.</p>
<p>In this tutorial, you will learn how to create a distributed application (DAPP) on Ethereum platform. More specifically, you will learn how to write a contract, test it on a local Blockchain and finally deploy it on an external Blockchain for deep testing and commercial use. You will use <b>Solidity</b>, an object-oriented language for contract development. You will also use <b>Remix</b>, an open source IDE for developing and testing contracts. To deploy the tested contract on an external Blockchain, you will use <b>Ganache</b>. To interact with the contract you will need a client application. We will use <b>MyEtherWallet</b> to create a wallet for each such client. The contract creator will publish the contract. Any other client will look at the contact value by using the interface provided by the contract and send some money to the creator for executing a part of the contract.</p>
<p>So let us begin by writing the contract.</p>
<h1>Ethereum - Smart Contracts</h1>
<p>There are several tools available to develop and test contracts. One of the simplest tools is provided on the official Ethereum site itself. The tool is called <b>Remix</b>, we will use this for our contract development.</p>
<h2>Remix for Contract Development</h2>
<p>Open the Remix IDE by typing in the following URL in your browser.</p>
<a target="_blank" rel="nofollow" href="https://remix.ethereum.org/#optimize=false&version=soljson-v0.5.1+commit.c8a2cb62.js">https://remix.ethereum.org</a>
<p>The following screen will appear.</p>
<img class="full-width" src="/ethereum/images/contract_development.jpg" alt="Contract Development" />
<p>In the center window, you will see some default code, which is a sample Solidity code. You will type your contract code in this code editor. Your code may be auto-compiled. Upon successful compilation of the code, you will be able to run the code in the same IDE. When you execute the contract methods, the results will be displayed in the same IDE window. There are facilities to debug the code and to unit test your project. These can be seen in the menu bar at the top right hand side as shown in the IDE screenshot below. You will be using these options shortly.</p>
<img class="full-width" src="/ethereum/images/remix_options.jpg" alt="Remix options" />
<p>You will now start writing your contract.</p>
<h1>Ethereum - Solidity for Contract Writing</h1>
<p>Solidity is an object-oriented language especially developed for contract writing. It is a high-level language, which inherits traits from C++, Python, and JavaScript. The Solidity compiler compiles your source code into bytecode that runs on Ethereum Virtual Machine (EVM).</p>
<p>For quick understanding of the Solidity syntax, look at the sample code in the IDE.</p>
<pre class="result notranslate">
pragma solidity &gt;=0.4.22 &lt;0.6.0;
contract Ballot {
</pre>
<p>The first line is a directive to the compiler. The second line starts the definition of the contract. Within the contract, you declare variables such as &minus;</p>
<pre class="result notranslate">
address chairperson;
</pre>
<p>You can also define structures such as <b>Proposal</b> and create an array of these structure items. Examine this in the code window.</p>
<p>You may then define a constructor which is invoked at the time of instantiating a contract.</p>
<pre class="result notranslate">
constructor(uint8 _numProposals) public {
</pre>
<p>After the constructor, you will define several methods, which are the contract methods. In the sample contract, <b>giveRightToVote</b> is one such method having the following syntax &minus;</p>
<pre class="result notranslate">
function giveRightToVote(address toVoter) public {
</pre>
<p>The <b>public</b> keyword makes this method publicly invokable by any client who has access to the contract.</p>
<p>Likewise, the sample contract defines three more methods called <b>delegate, vote</b>, and <b>winningProposal</b>. Examine these for your own understanding of the Solidity syntax. These are the prerequisites to writing your own contract. Explaining the full syntax of Solidity is beyond the scope of this tutorial.</p>
<h1>Ethereum - Developing MyContract</h1>
<p>We will name our contract <b>MyContract</b> as in the following declaration &minus;</p>
<pre class="result notranslate">
contract MyContract {
</pre>
<p>We will declare two variables as follows &minus;</p>
<pre class="result notranslate">
uint amount;
uint value;
</pre>
<p>The variable <b>amount</b> will hold the accumulated money sent by the contract executors to the contract creator. The <b>value</b> field will hold the contract value. As the executors execute the contract, the <b>value</b> field will be modified to reflect the balanced contract value.</p>
<p>In the contract constructor, we set the values of these two variables.</p>
<pre class="prettyprint notranslate">
constructor (uint initialAmount, uint initialValue) public {
   amount = 0;
   value = 1000;
}
</pre>
<p>As initially, the amount collected on the contract is zero, we set the <b>amount</b> field to 0. We set the contract <b>value</b> to some arbitrary number, in this case it is 1000. The contract creator decides this value.</p>
<p>To examine the collected amount at any given point of time, we provide a public contract method called <b>getAmount</b> defined as follows &minus;</p>
<pre class="prettyprint notranslate">
function getAmount() public view returns(uint) {
   return amount;
}
</pre>
<p>To get the balanced contract value at any given point of time, we define <b>getBalance</b> method as follows &minus;</p>
<pre class="prettyprint notranslate">
function getBalance() public view returns(uint) {
   return value;
}
</pre>
<p>Finally, we write a contract method <b>(Send)</b>. It enables the clients to send some money to the contract creator &minus;</p>
<pre class="prettyprint notranslate">
function send(uint newDeposit) public {
   value = value - newDeposit;
   amount = amount + newDeposit;
}
</pre>
<p>The execution of the <b>send</b> method will modify both <b>value</b> and <b>amount</b> fields of the contract.</p>
<p>The complete contract code is given below &minus;</p>
<pre class="prettyprint notranslate">
contract MyContract {
   uint amount;
   uint value;

   constructor (uint initialAmount, uint initialValue) public {
      amount = 0;
      value = 1000;
   }
   function getBalance() public view returns(uint) {
      return value;
   }
   function getAmount() public view returns(uint) {
      return amount;
   }
   function send(uint newDeposit) public {
      value = value - newDeposit;
      amount = amount + newDeposit;
   }
}
</pre>
<h1>Ethereum - Compiling the Contract</h1>
<p>Once you write the complete contract code, compiling it in this IDE is trivial. Simply click on the <b>Autocompile</b> checkbox in the IDE as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/autocompile_checkbox.jpg" alt="Autocompile checkbox" />
<p>Alternatively, you may compile the contract by clicking the button with the title <b>“Start to compile”</b>.</p>
<img class="full-width" src="/ethereum/images/start_to_compile.jpg" alt="Start to compile" />
<p>If there is any typo, fix it in the code window. Make sure the code is compiled fully without errors. Now, you are ready to deploy the contract.</p>
<h1>Ethereum - Deploying the Contract</h1>
<p>In this chapter, we will learn how to deploy contract on Ethereum. Click on the Run menu option to deploy the contract. The following screen will appear.</p>
<img class="full-width" src="/ethereum/images/deploy_contract.jpg" alt="Deploy Contract" />
<p>The contract name is shown in the highlighted list box. Below this, you will notice the <b>Deploy</b> button, click on it to deploy the contract. The contract will be deployed on the Remix built-in Blockchain. You will be able to see the deployed contract at the bottom of the screen. You can see this in the highlighted portion of the screenshot below.</p>
<img class="full-width" src="/ethereum/images/deploy_highlighted_portion.jpg" alt="Deploy Highlighted Portion" />
<p>Notice, the presence of three method names in this highlighted region. Next, you will interact with the contract by executing the contract methods.</p>
<h1>Ethereum - Interacting with the Contract</h1>
<p>When you click the deployed contract, you will see the various public methods provided by the contract. This is shown in the screenshot below.</p>
<img class="center" src="/ethereum/images/deploy_public_methods.jpg" alt="Deploy Public Methods" />
<p>The first method <b>send</b> contains an edit box in front of it. Here, you will type the parameters required by the contract method. The other two methods do not take any parameters.</p>
<h2>Sending Money</h2>
<p>Now, enter some amount such as 100 in front of the <b>send</b> function seen in the contract window. Click the <b>send</b> button. This will execute the contract <b>send</b> method, reducing the value of the contract <b>value</b> field and increasing the value of the <b>amount</b> field.</p>
<img class="center" src="/ethereum/images/sending_money.jpg" alt="Sending Money" />
<h2>Examining Contract Value</h2>
<p>The previous <b>send money</b> action has reduced the contract value by 100. You can now examine this by invoking the <b>getBalance</b> method of the contract. You will see the output when you click on the <b>getBalance</b> button as shown in the screenshot below &minus;</p>
<img class="center" src="/ethereum/images/examining_contract_value.jpg" alt="Examining Contract Value" />
<p>The contract <b>value</b> is now reduced to 900.</p>
<h2>Examining Collected Amount</h2>
<p>In this section, we will examine the amount of money collected so far on this contract. For this, click on the <b>getAmount</b> button. The following screen will appear.</p>
<img class="center" src="/ethereum/images/examining_collected_amount.jpg" alt="Examining Collected Amount" />
<p>The <b>amount</b> field value has changed from 0 to 100.</p>
<p>Try a few <b>send</b> operations and examine the contract <b>value</b> and the <b>amount</b> fields to conclude that the deployed contract is executing as expected.</p>
<h1>Ethereum - Limitations of Remix</h1>
<p>The Remix IDE that you have used so far is good enough for development and initial testing of your contract. For real-life contracts, you need to test your functionality against various parameters. Remix cannot create real (non-test) user accounts to transfer funds between them. You have no control over the configuration of the Blockchain created by Remix. You cannot even monitor the execution of the transactions.</p>
<p>Remix misses out on several advanced operations. Thus, we need to deploy our contract on a more sophisticated Blockchain that provides all these features. One such Blockchain is <b>Ganache</b> that you will learn about in our subsequent chapter.</p>
<h1>Ethereum - Ganache for Blockchain</h1>
<p>Ganache is used for setting up a personal Ethereum Blockchain for testing your Solidity contracts. It provides more features when compared to Remix. You will learn about the features when you work out with Ganache. Before you begin using Ganache, you must first download and install the Blockchain on your local machine.</p>
<h2>Downloading Ganache</h2>
<p>You may download Ganache from the following URL &minus;</p>
<a target="_blank" rel="nofollow" href="https://truffleframework.com/ganache">https://truffleframework.com/ganache</a>
<p>Ganache is available on several platforms. We developed and tested this entire tutorial on Mac. Thus, the screenshots below will show Mac installation. When you open the installation URL given above, it automatically detects your machine’s OS and directs you to the appropriate binary installation. The screenshot below shows the Mac installation.</p>
<img class="full-width" src="/ethereum/images/downloading_ganache.jpg" alt="Downloading Ganache" />
<p>When you click on the DOWNLOAD button, it will begin downloading the DMG file for Mac installation.</p>
<h2>Installing Ganache</h2>
<p>Locate the “Ganache-2.0.0.dmg” in your Downloads folder and double-click on it to install Ganache. Upon successful installation, the following screen will appear &minus;</p>
<img class="full-width" src="/ethereum/images/installing_ganache.jpg" alt="Installing Ganache" />
<p>Drag Ganache icon to the Application folder. Now, Ganache is available as an application on your Mac.</p>
<p>If you are using some other OS, follow the instructions provided for successful installation.</p>
<h2>Starting Ganache</h2>
<p>Now locate <b>Ganache</b> in your Application folder and double-click on its icon to start Ganache.</p>
<h3>Ganache Desktop</h3>
<p>When Ganache starts, the Ganache screen will appear as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_desktop.jpg" alt="Ganache Desktop" />
<p>Click QUICKSTART to start Ganache. You will see Ganache console as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/quickstart.jpg" alt="QUICKSTART" />
<p>The console in the above screenshot shows two user accounts with balance of 100 ETH (Ether - a currency for transaction on Ethereum platform). It also shows a transaction count of zero for each account. As the user has not performed any transactions so far, this count is obviously zero.</p>
<p>We will now get an overview of a few important screens of Ganache that are of immediate relevance to us.</p>
<h1>Ethereum - Ganache Server Settings</h1>
<p>Click on the settings icon at the top right hand side of the screen as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_settings.jpg" alt="Ganache Settings" />
<p>The server settings screen will appear as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/server_settings.jpg" alt="Server Settings" />
<p>Here, you will be able to set the values of server address and the port number for your Ganache server. For the time being, leave these to their default values. The Network ID is an internal Blockchain identifier of Ganache server; leave this to its default value. The <b>Automine</b> button is in the ON state indicating that the transactions would be processed instantly. If you switched this off, it will ask you to enter the time in seconds after which the blocks would be mined.</p>
<h2>Account and Keys</h2>
<p>When you click on the <b>Accounts &amp; Keys</b> menu option, you will see the following screen &minus;</p>
<img class="full-width" src="/ethereum/images/account_and_keys.jpg" alt="Account and Keys" />
<p>Here you would be able to <b>set</b> the default balance for each account. The default value is 100. This now explains why you saw 100 ETH displayed for each account in the Desktop screenshot. You can also set the number of accounts on this screen. The value displayed in this screenshot is 2 and that is why the desktop showed only two accounts.</p>
<p>Now, we will work out with the two settings’ screen; the knowledge of how these two work would suffice. Restart the server by clicking on the <b>RESTART</b> button in the right hand side of the screen. You will now return to the Desktop screen. Try inputting different values in the above two fields, restart the server and see its effect.</p>
<h1>Ethereum - A Quick Walkthrough</h1>
<p>We will now briefly understand what is available on the Ganache desktop. On the Desktop, at the top we have several menu options out of which a few are of immediate relevance to us. The menu bar is highlighted in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_menu_options.jpg" alt="Ganache Menu Options" />
<p>Clicking on the <b>TRANSACTIONS</b> menu shows all the transactions performed so far. You will be performing transactions very soon. Now, come back to the above screen and check the transactions from time to time. A typical transaction screen is as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_transactions.jpg" alt="Ganache TRANSACTIONS" />
<p>Likewise, when you click on the <b>BLOCKS</b> menu, you will see the various mined blocks. Consider the following screenshot to understand how the BLOCKS menu looks like &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_blocks.jpg" alt="Ganache Blocks" />
<p>Click on the <b>LOGS</b> menu. It will open the system log for you. Here, you can examine the various operations that you have performed on the Ethereum Blockchain.</p>
<p>Now, as you have understood how to use Ganache for setting up a private Ethereum Blockchain, you will now create a few clients who would use this Blockchain.</p>
<h1>Ethereum - MyEtherWallet</h1>
<p>For client application, you will use <b>MyEtherWallet</b>.</p>
<p>Download <b>MyEtherWallet</b> software from the following URL &minus;</p>
<p><a target="_blank" rel="nofollow" href="https://github.com/kvhnuke/etherwallet/releases/tag/v3.21.06">https://github.com/kvhnuke/etherwallet/releases/tag/v3.21.06</a></p>
<p>If required, unzip the downloaded file and open <b>index.html</b>. You will see the following interface for creating a new wallet.</p>
<img class="full-width" src="/ethereum/images/myetherwallet.jpg" alt="MyEtherWallet" />
<h1>Ethereum - Creating Wallet</h1>
<p>In this chapter, we will learn how to create Ethereum wallet. To create a new wallet, enter a password of your choice and then click on the “<b>Create New Wallet</b>” button. When you do so, a Wallet would be created. A digital wallet is essentially the generation of a public/private key pair that you need to store in a safe place. The wallet creation results in the following screen &minus;</p>
<img class="full-width" src="/ethereum/images/create_new_wallet.jpg" alt="Create New Wallet" />
<p>Click on the <b>“Download Keystore File (UTC / JSON)”</b> button to save the generated keys. Now, click on the <b>“I understand. Continue”</b> button. Your private key will appear on the screen as seen in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/download_keystore.jpg" alt="Download KeyStore" />
<p>Click on the <b>“Print Paper Wallet”</b> button to keep a physical record of your wallet’s private key. You will need this later for unlocking the wallet. You will see the following screen. Do not lose this output.</p>
<img class="full-width" src="/ethereum/images/print_paper_wallet.jpg" alt="Print Paper Wallet" />
<p>To unlock your wallet, click on the <b>“Save Your Address”</b> button. You will see the following screen.</p>
<img class="full-width" src="/ethereum/images/unlock_your_wallet.jpg" alt="Unlock Your Wallet" />
<p>The wallet can be unlocked using the Private Key option as highlighted in the above screen. Cut-n-paste the private key from the previous screenshot and click the Unlock button. Your wallet will be unlocked and you will see a message appear at the bottom of the screen. As the wallet does not contain anything as of now, unlocking the wallet is not really useful to us at this point.</p>
<h1>Attaching Wallet to Ganache Blockchain</h1>
<p>You have now created a wallet; this wallet is a client interface to the Blockchain. We will attach the wallet to the Ganache Blockchain that you have started in the earlier lesson. To do so, click on the <b>Network</b> dropdown box as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/network_dropdown.jpg" alt="Network Dropdown" />
<p>Go to the bottom of the list. You will see an option for <b>“Add Custom Network / Node”</b>. Select this item.</p>
<p>Now, a screen will appear asking for the Ganache server address and the port to which it is listening.</p>
<img class="full-width" src="/ethereum/images/add_custom_network.jpg" alt="Add Custom Network" />
<p>Type your Ganache server details – <a target="_blank" rel="nofollow" href="http://127.0.0.1">http://127.0.0.1</a> and Port: <b>8545</b>. These would be the values set by you in the Ganache server setup. Give a <b>name</b> of your choice to this node. Click on the <b>“Save &amp; Use Custom Node”</b> button. You will see the connected message at the bottom of the screen. At this point, your wallet is successfully connected to the Ganache Blockchain.</p>
<p>You are now ready to deploy the contract on this connected Blockchain.</p>
<h1>Ethereum - Deploying Contract</h1>
<p>To deploy the contract, select the <b>Contracts</b> menu option as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/select_contracts_menu.jpg" alt="Select Contracts Menu" />
<p>You will need to enter the contract’s bytecode on this screen. Remember, when you compile your Solidity contract code, it generated a bytecode that runs on EVM. You will now need to obtain this bytecode from <b>Remix IDE</b>.</p>
<p>Go to the Remix IDE screen, your earlier typed contract should be there in the code window. If not, retype the contract in the code window. Click on the Bytecode button as shown in the following screenshot &minus;</p>
<img class="full-width" src="/ethereum/images/remix_ide_screen.jpg" alt="Remix IDE Screen" />
<p>The bytecode for your compiled source is copied to the clipboard along with some other information. Paste the copied code into your favorite text editor. Following is the screenshot of the text editor &minus;</p>
<img class="full-width" src="/ethereum/images/remix_bytecode.jpg" alt="Remix bytecode" />
<p>The value of the <b>object</b> tag contains the desired bytecode. Copy this carefully making sure that you do not copy the enclosing quotes. The bytecode is really long, so make sure that you copy right upto the last byte inclusive of it. Now, paste this bytecode in the <b>Deploy Contract</b> screen as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/desired_bytecode.jpg" alt="Desired Bytecode" />
<p>The <b>Gas Limit</b> field is automatically set.</p>
<p>Below the Gas Limit field, you will find the selection for accessing the wallet.</p>
<img class="full-width" src="/ethereum/images/accessing_wallet.jpg" alt="Accessing Wallet" />
<p>Now, access the wallet using the <b>Private Key</b> of the Ganache account on which this contract will be deployed. To get this private key, go back to the <b>Ganache</b> window. Click on the <b>keys</b> icon of the first account as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/first_account.jpg" alt="First Account" />
<p>You will see the private key of the user account # 1 as seen in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/first_account_private_key.jpg" alt="First Account Private Key" />
<p>Copy this private key and paste it in the “Paste Your Private Key” section as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/paste_your_private_key.jpg" alt="Paste Your Private Key" />
<p>You will see the <b>“Unlock”</b> button at the bottom of the screen. After unlocking, a “success” message will appear at the bottom of the screen. At this point, your wallet is attached to account #1 of the Ganache Blockchain.</p>
<p>Now, you are ready to sign and deploy the contract. Click on the <b>“Sign Transaction”</b> button as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/sign_transaction.jpg" alt="Sign Transaction" />
<p>Signing the transaction generates and displays both <b>Raw</b> and <b>Signed</b> transactions. Click on the <b>“Deploy Contract”</b> button to deploy the contract on the Ganache Blockchain. Remember the contract is deployed by account # 1 user of the Ganache Blockchain. Therefore, account # 1 user becomes the contract creator. Before the contract is deployed, you will be asked to confirm the transaction as it may cost you some real money if you were to deploy this contract on a public real Ethereum Blockchain. Do not worry, for the current private Blockchain running on your local machine, there is no real money involved. Click on the <b>Make transaction</b> button as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/private_blockchain_running.jpg" alt="Private Blockchain Running" />
<p>Examine the Ganache console; you will see that the ETH balance in the account # 1 has reduced as seen in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_console.jpg" alt="Ganache console" />
<p>Now, click on the <b>TRANSACTIONS</b> menu as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_transactions_screenshot.jpg" alt="Ganache Transactions Screenshot" />
<p>You will see the transaction details.</p>
<img class="full-width" src="/ethereum/images/ganache_transactions_details.jpg" alt="Ganache Transactions Details" />
<p>On this screen, you will find the contract’s published address. The address is marked in the above screenshot. You will distribute this address publicly to let others know that your contract is available at this specified address to which they can connect and execute the contract methods, such as sending money to you - the contract creator. Copy this contract address for your own reference as you are going to need it in the next step.</p>
<h1>Ethereum - Interacting with Deployed Contract</h1>
<p>Now, you are ready to interact with the contract that you have deployed. Go back to MyEtherWallet desktop and click on the “Interact with Contract” tab as shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/interact_with_contract.jpg" alt="Interact With Contract" />
<p>Paste the contract address that you previously copied in the <b>“Contract Address”</b> field. You also need to paste the <b>“ABI / JSON Interface”</b> of the contract on the above screen.</p>
<p>To get the <b>ABI</b>, go to the <b>Remix</b> window and click on the <b>ABI</b> button as shown in the screenshot below.</p>
<img class="full-width" src="/ethereum/images/abi_button.jpg" alt="ABI button" />
<p>The ABI / JSON interface will be copied to the clipboard. Paste this in your favorite editor to examine the generated interface, which is shown below &minus;</p>
<pre class="prettyprint notranslate">
ABI / JSON Interface
[
   {
      "constant": false,
      "inputs": [
         {
            "name": "newDeposit",
            "type": "uint256"
         }
      ],
      "name": "send",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
   },
   {
      "inputs": [
         {
            "name": "initialAmount",
            "type": "uint256"
         },
         {
            "name": "initialValue",
            "type": "uint256"
         }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
   },
   {
      "constant": true,
      "inputs": [],
      "name": "getAmount",
      "outputs": [
         {
            "name": "",
            "type": "uint256"
         }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
   },
   {
      "constant": true,
      "inputs": [],
      "name": "getBalance",
      "outputs": [
         {
            "name": "",
            "type": "uint256"
         }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
   }
]
</pre>
<p>After you paste this JSON in the <b>MyEtherWallet</b> interface, you will notice that the ACCESS button below the JSON interface is now activated, as shown below &minus;</p>
<img class="full-width" src="/ethereum/images/my_ether_wallet.jpg" alt="My Ether Wallet" />
<p>Click <b>Access</b> button to access the contract.</p>
<p>Upon clicking the <b>Access</b> button, the contract address and function selection dropdown will appear on the screen like in the Remix editor. This is shown in the screenshot below &minus;</p>
<img class="full-width" src="/ethereum/images/access_button.jpg" alt="Access button" />
<p>You may check the various functions of the contract as in the case of Remix deployment. Note that the contact is now deployed on an external Ganache Blockchain. Check the <b>getAmount</b> function; you will get the Amount value of zero and the <b>getBalance</b> will show a balance of 1000.</p>
<p>Now try sending some money. It will present you a <b>textedit</b> control for entering the amount. When you write the contract, some “gas” would be used and you will be asked to confirm the transaction before writing it to the Blockchain. The transaction would be executed in a short while depending on the mining timing set by you on the Ganache server. After this, you can reexamine the <b>value</b> and the <b>amount</b> fields of the contract to verify that these are indeed modified.</p>
<p>You may now examine the Ganache desktop to view the transactions that you have performed so far. A sample output is shown below &minus;</p>
<img class="full-width" src="/ethereum/images/sample_output.jpg" alt="sample output" />
<p>So far, you were both the contract creator and the contract executor. This does not make much sense, as you expect others to use your contract. For this, we will create another client for our Ganache Blockchain and send some money from the newly created account # 2 to the contract creator at account # 1.</p>
<h1>Ethereum - Creating Contract Users</h1>
<p>In this chapter, we will learn the creation of contract users on Ethereum. To create a user for our published contract, we will create another <b>MyEtherWallet</b> client attached to the same Ganache Blockchain that you have been using in the previous steps. Go to the <b>MyEtherWallet</b> screen and create a new wallet.</p>
<p>Click on the <b>contracts</b> menu and select the <b>“Interact with Contract”</b> option as in the earlier case. Note that this new user is going to simply interact with the already published contract and not deploying his own contract. Specify the contract address and the ABI that you used in the earlier case.</p>
<img class="full-width" src="/ethereum/images/interact_with_contract_address.jpg" alt="Interact with Contract Address" />
<p>Now, click <b>Access</b> button and invoke <b>send </b>method. When asked, input some value say 100 ETH to be sent. Submit the transaction. Upon submission, the following screen will appear.</p>
<img class="full-width" src="/ethereum/images/interact_with_contract_access.jpg" alt="Interact with Contract Access" />
<p>To attach this new client to our Ganache Blockchain, go to Ganache Console. Click on the keys icon of account # 2 as shown in the following screenshot &minus;</p>
<img class="full-width" src="/ethereum/images/ganache_console_screenshot.jpg" alt="Ganache Console Screenshot" />
<p>You will get the private key for account # 2.</p>
<img class="full-width" src="/ethereum/images/ganache_console_private_key.jpg" alt="Ganache Console private key" />
<p>Copy the key that you receive and use it in your newly created wallet as shown here &minus;</p>
<img class="full-width" src="/ethereum/images/newly_created_wallet.jpg" alt="Newly Created Wallet" />
<p>Click on the <b>Unlock</b> button to attach the wallet.</p>
<p>When the wallet is successfully unlocked, write the desired send transaction.</p>
<img class="full-width" src="/ethereum/images/wallet_successfully_unlocked.jpg" alt="Wallet Successfully Unlocked" />
<p>Generate the transaction by clicking on the <b>“Generate Transaction”</b> button.</p>
<img class="full-width" src="/ethereum/images/generate_transaction.jpg" alt="Generate Transaction" />
<p><b>Make</b> the transaction and wait for some time for it to reflect in the Blockchain. Now, execute <b>“getAmount”</b>, the amount shown should be 200 now.</p>
<img class="center" src="/ethereum/images/get_amount.jpg" alt="Generate get Amount" />
<p>Execute <b>“getBalance”</b>. The <b>value</b> field should now be 800.</p>
<img class="center" src="/ethereum/images/get_balance.jpg" alt="Generate get Balance" />
<p>Examine the transaction log to see the various transactions performed by different users.</p>
<img class="center" src="/ethereum/images/examine_transaction.jpg" alt="Examine The Transaction" />
<h1>Ethereum - Summary</h1>
<p>You learned how to write your own digital contract in Solidity. You developed and tested the contract interface in the Remix IDE. For further multi-user testing, you deployed this contract on Ganache Blockchain. On Ganache, you created two user accounts. The first account was used for publishing the contract. The second account was used for consuming the contract.</p>
<h2>What is Next?</h2>
<p>The Ganache Blockchain that you used in this entire process is private and local to your machine. Once you are fully satisfied with the functioning of the contract, you may proceed to publish it on a real-life Ethereum Blockchain. However, doing so would require you to spend real money. In the demo application, we used 1000 ETH as default for each user account in Ganache. When you deploy your contract on a real-life Blockchain, you will have to buy the ETH by converting your own country’s currency to ETH. This currency would be stored in your wallet and you will be able to spend it the way you want.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/ethereum/ethereum_summary.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ethereum/ethereum_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
