<!DOCTYPE html>
<html lang="en-US">
<head>
<title>SL4A - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="SL4A - Quick Guide - Android is a Linux based operating system, designed primarily for portable devices like smartphones and tablet. Android is more than an operating system. It is "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/sl4a/sl4a_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#89ab1e;
}
a.demo {
    background:#89ab1e;
}
li.heading {
    background:#89ab1e;
}
.course-box{background:#89ab1e}
.home-intro-sub p{color:#89ab1e}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/sl4a/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/sl4a/images/sl4a-mini-logo.jpg" alt="SL4A Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">SL4A Tutorial</li>
<li><a href="/sl4a/index.htm">SL4A - Home</a></li>
<li><a href="/sl4a/sl4a_android_overview.htm">SL4A - Android Overview</a></li>
<li><a href="/sl4a/sl4a_android_architecture.htm">SL4A - Android Architecture</a></li>
<li><a href="/sl4a/sl4a_scripting_layer_android.htm">SL4A - Scripting Layer for Android</a></li>
<li><a href="/sl4a/sl4a_architecture.htm">SL4A - Architecture</a></li>
<li><a href="/sl4a/sl4a_python_library.htm">SL4A - Python Library</a></li>
<li><a href="/sl4a/sl4a_development_environment.htm">SL4A - Development Environment</a></li>
<li><a href="/sl4a/sl4a_configuring_device.htm">SL4A - Configuring Your Device</a></li>
<li><a href="/sl4a/sl4a_navigating_android_sdk.htm">SL4A - Navigating the Android SDK</a></li>
<li><a href="/sl4a/sl4a_working_with_eclipse.htm">SL4A - Working with Eclipse</a></li>
<li><a href="/sl4a/sl4a_exploring_android_api.htm">SL4A - Exploring Android API</a></li>
<li><a href="/sl4a/sl4a_building_guis.htm">SL4A - Building GUIs</a></li>
<li><a href="/sl4a/sl4a_utilities_using_python_facades.htm">SL4A - Utilities using Python Facades</a></li>
<li><a href="/sl4a/sl4a_background_scripting_with_python.htm">SL4A - Background Script with Python</a></li>
<li><a href="/sl4a/sl4a_packaging_distributing.htm">SL4A - Packaging &amp; Distributing</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">SL4A Useful Resources</li>
<li><a href="/sl4a/sl4a_quick_guide.htm">SL4A - Quick Guide</a></li>
<li><a href="/sl4a/sl4a_useful_resources.htm">SL4A - Useful Resources</a></li>
<li><a href="/sl4a/sl4a_discussion.htm">SL4A - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>SL4A - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/sl4a/sl4a_packaging_distributing.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/sl4a/sl4a_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>SL4A - Android Overview</h1>
<p>Android is a Linux based operating system, designed primarily for portable devices like smartphones and tablet. Android is more than an operating system. It is a software stack that provides many features for users, developers and manufacturers.</p>
<table class="table table-bordered">
<tr>
<th style="width:50%;text-align:center;">Android Version</th>
<th style="text-align:center;">Features</th>
</tr>
<tr>
<td>Android (Alpha) 1.0</td>
<td>First version of Android</td>
</tr>
<tr>
<td>Android 1.5 (Cupcake)</td>
<td>Added auto-rotation option, copy and paste feature added in the web browser</td>
</tr>
<tr>
<td>Android 1.6 (Donut)</td>
<td>Voice search and Search box were added</td>
</tr>
<tr>
<td>Android 2.0/2.1 (Éclair)</td>
<td>Bluetooth 2.1 support</td>
</tr>
<tr>
<td>Android 2.2/2.2.3(Froyo)</td>
<td>Support for Adobe Flash 10.1</td>
</tr>
<tr>
<td>Android 2.3/2.3.7 (Gingerbread)</td>
<td>Internet calling, one touch word selection and copy/paste</td>
</tr>
<tr>
<td>Android 3.0/3.2.6 (Honeycomb)</td>
<td>This version is available only for tablets.Features include support for multi-core processors, ability to encrypt all user data</td>
</tr>
<tr>
<td>Android 4.0/4.0.4 (Ice cream sandwich)</td>
<td>Virtual button in the UI, ability to shut down apps that are using data in the background</td>
</tr>
<tr>
<td>Android 4.1/4.3.1  (Jelly Bean)</td>
<td>Based on Linux Kernel 3.0.31? Smoother User Interface, Bluetooth data transfer for Android Beam</td>
</tr>
<tr>
<td>Android 4.4/4.4.4,4.4W/4.4W.2 (KitKat)</td>
<td>Integration with cloud storage, Built-In sensors, Lock Art Screen</td>
</tr>
<tr>
<td>Android 5.0/5.1.1 (Lollipop)</td>
<td>Improved RAM and Battery Management, Fixes for sudden App closure, issues with wireless connections, notifications etc.</td>
</tr>
</table>
<p>It is open source and business friendly. The user can choose to replace built-in applications with applications of their choice. Many versions of Android have been released since its original release.</p>
<h1>SL4A - Android Architecture</h1>
<p>The Android software stack comprises of different layers, each layer manifesting well-defined behavior and providing specific services to the layer above it. The following figure presents a broad architecture of Android with its primary components.</p>
<img src="/sl4a/images/android_architecture.jpg" alt="Android Architecture" />
<h2>Linux Kernel</h2>
<p>Android is built on the Linux kernel code modified to run on embedded systems as against the traditional Linux system. Hardware drivers for many common devices are built into the kernel, thereby ensuring device portability. It is based on secure user based permission model, which prevents one application from reading another application’s information or from interfering with its execution (e.g. CPU, memory, devices etc.).</p>
<p>Group ID based access to networking and Bluetooth features, logger, alarm, power management, low memory killer, Binder IPC mechanisms are a few noted enhancements to the Kernel.</p>
<h2>Libraries and Runtime</h2>
<p>This forms the second layer of the architecture. It includes a set of hardware optimized C, C++ libraries, also referred to as the native layer. Examples include Media Libraries, SQLite, SSL, Bionic, WebKit etc.</p>
<p>The Android Runtime comprises of two different components &minus; the Dalvik VM and Core Libraries. The Dalvik VM provides an execution environment for the applications on the Android Platform. The set of core libraries provides most of the functionality available in Java APIs.</p>
<h2>Application Framework</h2> 
<p>This layer makes available the Libraries as services to the applications. Some most important components within this layer include Location Manager, Resource Manager, Activity Manager and Notification Manager.</p>
<h2>Applications</h2>
<p>By default, Android comes with a rich set of applications, including the browser, SMS program, calendar, contact manager, maps etc. Google Play provides alternatives to these applications, if the user desires so.</p>
<h2>Building Blocks</h2>
<p>An application can interface with the system with four function blocks. They are as follows &minus;</p>
<ul class="list">
<li><p><b>Activities</b> &minus; Activities represent a single screen that the user sees or interacts with visually. For example, an email app might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails.</p></li>
<li><p><b>Services</b> &minus; A majority of processing is done by these services for your application. It is the logic behind the user interface. For example, a service might play music in the background while the user is in a different app, or it might fetch data over the network without blocking user interaction with an activity.</p></li>
<li><p><b>Broadcast Receivers</b> &minus; A component that can be registered to listen for system or application events and issue notifications about the same. An instance for broadcast originating from the system is a ‘<b>low battery notification</b>’ while an application level broadcast could be a ‘<b>download successful</b>’ notification.</p></li>
<li><p><b>Content Providers</b> &minus; A content provider manages and helps you share data between multiple applications. For e.g. a content provider may be used to share the contacts data.</p></li>
</ul>
<p>These components interact with each other through messages called <b>Intents</b>.</p>
<h1>SL4A - Scripting Layer for Android</h1>
<p>Android scripting is a handy tool for simple tasks such as automation and prototyping as against using the Java programming language for the same. The Scripting Layer for Android (SL4A) provides a platform for multiple scripting solutions on the android platform.</p>
<h2>What is SL4A?</h2>
<p>The Scripting Layer for Android (SL4A) is a library that provides a platform to write simple scripts to automate tasks on an android device using languages other than JAVA.</p>
<p>SL4A, originally called Android Scripting Environment (ASE), was first announced on the Google Open Source blog in June 2009. The project saw the light of the day primarily through the efforts of Damon Kohler and it has grown through the contributions of other developers.</p>
<p>It supports most popular scripting languages. These include &minus;</p>
<ul class="list">
<li>Beanshell 2.0b4</li>
<li>JRuby 1.4</li>
<li>Lua 5.1.4</li>
<li>Perl 5.10.1</li>
<li>PHP 5.3.3</li>
<li>Python</li>
<li>Rhino 1.7R2</li>
<li>Javascript</li>
<li>TCL</li>
</ul>
<h2>Why SL4A – Scripting Languages Vs JAVA</h2>
<p>One of the first questions one would probably ask is, “<b>Why use SL4A instead of Java?</b>”</p>
<p>Firstly, not everyone is a fan of Java. Scripting languages provide an easy programming environment as compared to Java.</p>
<p>Secondly, the language requires the use of an edit/compile/run design loop. This means that you edit, re-compile and then run the application each time you desire some modification. On the contrary, scripts are interpreted and executed on the fly. Moreover, SL4A even makes it possible, in many cases, to reuse code written for a desktop environment.</p>
<p>The following figure illustrates scripts written in Python targeting SL4A and in Java respectively.</p>
<img src="/sl4a/images/python_targeting_sl4a.jpg" alt="Python Targeting SL4A" />
<h1>SL4A - Architecture</h1>
<p>SL4A has three main components. They are as follows &minus;</p>
<ul class="list">
<li>Script Interpreters</li>
<li>Android RPC Client</li>
<li>Facades</li>
</ul>
<p>In this chapter, we will discuss more about these three components.</p>
<h2>Script Interpreters</h2>
<p>SL4A acts a scripting host. It supports many scripting languages such as Python, Ruby, Lua, BeanShell, JavaScript and TCL . SL4A can be extended by incorporating new scripting languages dynamically by developing a new SL4A interpreter for that scripting language.</p>
<p>Each script runs in its own interpreter instance. Hence, multiple scripts can run simultaneously without affecting each other.</p>
<h2>Android RPC Client</h2>
<p>Scripts running within the interpreter instance communicates with the SL4A application through the Android Proxy RPC Client. The client establishes a <b>Remote Procedure Call (RPC)</b> connection to SL4A, and allows scripts to interact with the Android Framework. The SL4A facades facilitate this communication. Data is sent as <b>JSON</b> payloads.</p> 
<p>Android RPC clients are provided for every supported scripting language. The client modules can be obtained from the SL4A website at <a rel="nofollow" href="https://code.google.com/hosting/moved?project=android-scripting" target="_blank"> https://code.google.com</a>.</p>
<img src="/sl4a/images/scripting_layer_android.jpg" alt="Scripting Layer Android" />
<h2>Facades</h2>
<p>The façade simplifies the script’s access to the underlying Android API. SL4A exposes the Android Framework API to scripts through an extensive set of facades like AndroidFacade, BluetoothFacade, ActivityManagerFacade, CommonIntentsFacade, etc.</p>
<p>SL4A functionality offers a basket of rich functionalities like Camera, Location, Battery Manager, Media Player, Media Recorder and many more.</p>
<h2>Using SL4A</h2>
<p>The SL4A system is suited for the following kinds of tasks &minus;</p>
<ul class="list">
<li><p><b>RAD programming</b> &minus; With SL4A, it is possible to use Rapid Application Development (RAD) approach to create a prototype application quickly. You can create a full-blown Android application if the feasibility of the idea is confirmed.</p></li>
<li><p><b>Test scripts</b> &minus; It can be used to write test scripts.</p></li>
<li><p><b>Building Utilities</b> &minus; Utility scripts or tools that perform small tasks or automate certain aspects of repetitive tasks can be built using SL4A.</p></li>
</ul>
<h1>SL4A - Python Library</h1>
<p>Python has a standard library, which includes a wide variety of routines that help you code and reuse these codes easily. A <b>Module</b> is a Python file that has definitions of variables and a set of related routines or functions.</p>
<p>Some of the core <b>Modules</b> provided by the Python library are as follows &minus;</p>
<ul class="list">
<li><p><b>Built-in Functions and Exceptions</b> &minus; Python imports both these modules when it starts up and makes their content available for all programs. The built-in module defines built-in functions like <b>len, int, range</b>, while the exceptions module defines all built-in exceptions.</p></li>
<li><p><b>Operating System Interface Modules</b> &minus; The OS module makes available, the functions that enables performing OS level operations through scripts.</p></li>
<li><p><b>Type Support Modules</b> &minus; Type support modules include string module-to implement, commonly used string operations; math module provides mathematical operations etc.</p></li>
<li><p><b>Regular Expressions</b> &minus; Regular Expressions are string patterns written in a specific syntax, which can be used to match or extract strings or substrings. The re module provides Regex support for Python.</p></li>
<li><p><b>Language Support Modules</b> &minus; The sys module gives you access to various interpreter variables, such as the module search path, and the interpreter version. The operator module provides functional equivalents to many built-in operators. The copy module allows you to copy objects. Finally, the gc module gives you more control over the garbage collector facilities in python 2.0.</p></li>
</ul>
<h2>About JSON</h2>
<p>The JavaScript Object Notation (JSON) is a data-interchange format. Though many programming languages support JSON, it is especially useful for JavaScript-based apps, including websites and browser extensions. JSON can represent numbers, Booleans, strings, null, arrays (ordered sequences of values), and objects (string-value mappings) made up of these values (or of other arrays and objects).</p>
<h1>SL4A - Development Environment</h1>
<p>This chapter details the procedure to set up your development environment. It also discusses how to configure your device to use SL4A.</p>
<h2>Development Environment</h2>
<p>You must download and install several pre-requisites before you can start developing with SL4A.</p>
<h3>Java Development Kit (JDK)</h3>
<p>To begin with, you should have a recent version of JDK (JDK 5 or upwards) installed on your system.</p>
<p>To confirm that a compatible version of the JDK installed available to the environment, execute the following on the command line or console terminal, as follows &minus;</p>
<pre class="result notranslate">
$javac –version 
$java –version
</pre>
<p><b>Note</b> &minus; Set the PATH environment variable to jdk/bin folder</b></p>
<h3>Python</h3>
<p>It is likely that Python is installed on Mac OS X and Linux, by default. Windows OS, by default, does not have Python installed. Python can be downloaded from <a rel="nofollow" href="https://www.python.org/download/releases/" target="_blank" >http://python.org</a>.</p>
<p>Once installed, modify your Windows path to add the Python directory.</p>
<p>To verify if Python is installed on your system, open the terminal window and enter Python.</p>
<img src="/sl4a/images/administrator_cmd.jpg" alt="Administrator CMD" />
<h3>Android.py file</h3>
<p>The only additional file that one needs to download is the <b>android.py</b> file. Include a copy of this file under /Lib/site-packages in the Python installation directory. This file includes python modules for Android development.</p>
<img src="/sl4a/images/androidpy_file.jpg" alt="Android.py File" />
<h3>Android SDK</h3>
<p>A number of tools are provided with the <b>Android SDK</b>. The first step is to download the appropriate install file for your operating system. Installers for Mac OS X, Linux and Windows are available. The SDK installer can be found at <a rel="nofollow" href="https://developer.android.com/sdk/index.html" target="_blank" >
https://developer.android.com/sdk</a>.</p>
<img src="/sl4a/images/android_sdk_tool.jpg" alt="Android SDK Tool" />
<p>The development environment discussed here is Windows. Google provides a zip file and an executable to install SDK on Windows.</p>
<h3>Installing Eclipse on a Development Machine</h3>
<p>Eclipse was developed as an extensible, Integrated Development Environment (IDE) written in Java language. It requires an installation of Java to work. Eclipse comes in many flavors &minus; Classic, Galelio, Luno, Mars, Neon, etc.</p>
<p>It is distributed in a single .zip file. All you have to do is unpack the program contents. The extracted folder has an Eclipse.exe file. Double click the file to start the program.</p>
<img src="/sl4a/images/eclipse_exe_file.jpg" alt="Eclipse.exe File" />
<h1>SL4A - Configuring Your Device</h1>
<h2>Installing SL4A</h2>
<p>At times, you may want to write scripts on the device and execute them. The Scripting Layer for Android helps achieve the same. To install SL4A on your device, follow the steps given below &minus;</p>
<ul class="list">
<li><p> Download the <b>SL4A.apk</b> file on your device.</p></li>
<li><p>Launch the <b>.apk</b> file from the notifications screen.</p></li>
<li><p>Select <b>Install</b> on the next screen to actually install SL4A.</p></li>
</ul>
<p>Alternatively, if you choose to use an emulator as against an android device, install SL4A using the browser inside the emulator. The SL4A installation initial screen on a device is shown below.</p>
<img src="/sl4a/images/sl4a_installation_initial_screen.jpg" alt="SL4A Installation Initial Screen" />
<h2>Adding the Python Interpreter</h2>
<p>To install the python interpreter on a device, follow the steps given below &minus;</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Start the SL4A application.</p></li>  
<li><p><b>Step 2</b> &minus; Click the <b>Menu</b> button.</p></li>  
<li><p><b>Step 3</b> &minus; A list of options will be displayed. Select <b>View</b>.</p></li>  
<li><p><b>Step 4</b> &minus; Select the <b>Interpreter</b> option from the dialog box. Click <b>Add</b>.</p></li>
<li><p><b>Step 5</b> &minus; A list of interpreters available for download is displayed. Select <b>Python 2.62</b> (or greater).</p></li>
</ul>
<p>To install python interpreter on an emulator, follow the steps given below &minus;</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Ensure that the emulator is running in the background.</p></li>  
<li><p><b>Step 2</b> &minus; Download python_for_android_rx.apk.</p></li>  
<li><p><b>Step 3</b> &minus; In the terminal command-line shell, navigate to the location where the apk file is stored and type the following on the command line &minus;</p></li>
</ul>
<pre class="result notranslate">
adb  install  python_for_android_rx.apk
</pre>
<p>SL4A supports scripting engine for multiple languages. A list of some language specific apk files are mentioned below &minus;</p>
<ul class="list">
<li>beanshell_for_android_rx.apk</li>  
<li>jruby_for_android_rx.apk</li>  
<li>lua_for_android_rx.apk</li>  
<li>perl_for_android_rx.apk</li>  
<li>python_for_android_rx.apk</li>  
<li>rhino_for_android_rx.apk</li>
</ul>
<h2>Connecting to Windows OS</h2>
<p><b>Step 1</b> &minus; Download and Install the USB Driver for Windows.</p> 
<p><b>Step 2</b> &minus; Setup your device &minus;</p>
<ul class="list">
<li><p>Start SL4A from All apps screen on the device.</p></li>  
<li><p>Tap the <b>Menu</b> button &#8594; <b>View</b>.</p></li>  
<li><p>Choose the interpreters from the list.</p></li>  
<li><p>Tap the <b>Menu</b> button &#8594; <b>Start Server</b>.</p></li>  
<li><p>Select <b>Public</b> (to connect over Wi-Fi) or <b>Private</b>(to connect over USB).</p></li>
</ul>
<p><b>Step 3</b> &minus; Add an environment variable (User variable) <b>AP_PORT</b> and value <b>9999</b>.</p>
<p>Android SDK and Eclipse have been discussed in the subsequent chapters.</p>
<h1>SL4A - Navigating the Android SDK</h1>
<p>A software development kit that enables developers to create applications for the Android platform. The Android SDK includes sample projects with source code, development tools, an emulator, and required libraries to build Android applications. This chapter discusses the Android SDK and ways to use it for developing the code targeted at SL4A.</p>
<h2>SDK Components</h2>
<p>The directory tree where you installed the Android SDK, contains a list of folders containing documentation, sample code and a number of tools. Navigating to the tools subdirectory reveals a number of executable files.</p>
<p>Discussed below are some important components within the Android SDK.</p>
<h2>SDK Manager</h2>
<p>The Android SDK Manager separates the SDK tools, platforms, and other components into packages for easy access and management. The SDK can be configured to check for new or updated SDK packages and add-on tools.</p>
<img src="/sl4a/images/android_sdk_manager.jpg" alt="Android SDK Manager" />
<p>By default, Android Studio does not check for Android SDK updates. To enable automatic Android SDK checking &minus;</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Choose <b>File</b> &#8594; <b>Settings</b> &#8594; <b>Appearance &amp; Behavior</b> &#8594; <b>System Settings</b> &#8594; <b>Updates</b>.</p></li>
<li><p><b>Step 2</b> &minus; Check the <b>Automatically check updates for Android SDK</b> checkbox and select an update channel.</p></li>
<li><p><b>Step 3</b> &minus; Click <b>OK</b> or <b>Apply</b> to enable the update checking.</p></li>
</ul>
<p>The SDK Update Sites tab displays the sites that Android Studio checks for Android SDK and third-party updates. You can add other sites that host their own Android SDK addons, then download the SDK add-ons from those sites.</p>
<h2>Android Emulator</h2>
<p>The <b>AVD Manager</b> provides a graphical user interface in which you can create and manage Android Virtual Devices (AVDs), which are required by the Android Emulator. An Android Virtual Device (AVD) consists of a number of files including configuration and virtual storage required by the emulator. You can create as many AVDs as you want for simulating different devices.</p>
<p>The following steps can be used to create an AVD in Eclipse &minus;</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Select <b>Window</b> &#8594; <b>AVD Manager</b>.</p></li>
<li><p><b>Step 2</b> &minus; Click <b>New</b>.</p></li>
<li><p><b>Step 3</b> &minus; Type the name of the AVD, choose the target and specify values for the other features.</p></li>
<li><p><b>Step 4</b> &minus; Click <b>Create AVD</b>.</p></li>
</ul>
<p>For devices with keyboard, there is a standard set of mappings from the host keyboard to actions on the device. The default <b>Emulator key mappings</b> are &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Emulator Key</th>
<th style="text-align:center;">Mapping on Host Device</th>
</tr>
<tr style="text-align:center;">
<td>BUTTON_CALL</td>
<td>F3</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_HANGUP</td>
<td>F4</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_HOME</td>
<td>Home</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_BACK</td>
<td>Escape</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_MENU</td>
<td>F2, PageUp</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_STAR</td>
<td>Shift+F2, PageDown</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_POWER</td>
<td>F7</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_SEARCH</td>
<td>F5</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_CAMERA</td>
<td>Ctrl+Keypad_5, Ctrl+F3</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_VOLUME_UP</td>
<td>Keypad_Plus, Ctrl+F5</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_VOLUME_DOWN</td>
<td>Keypad_Minus, Ctrl+F6</td>
</tr>
<tr style="text-align:center;">
<td>TOGGLE_NETWORK</td>
<td>F8</td>
</tr>
<tr style="text-align:center;">
<td>TOGGLE_TRACING</td>
<td>F9</td>
</tr>
<tr style="text-align:center;">
<td>TOGGLE_FULLSCREEN</td>
<td>Alt-Enter</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_DPAD_CENTER</td>
<td>Keypad_5</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_DPAD_UP</td>
<td>Keypad_8</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_DPAD_LEFT</td>
<td>Keypad_4</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_DPAD_RIGHT</td>
<td>Keypad_6</td>
</tr>
<tr style="text-align:center;">
<td>BUTTON_DPAD_DOWN</td>
<td>Keypad_2</td>
</tr>
<tr style="text-align:center;">
<td>TOGGLE_TRACKBALL</td>
<td>F6</td>
</tr>
<tr style="text-align:center;">
<td>SHOW_TRACKBALL</td>
<td>Delete</td>
</tr>
<tr style="text-align:center;">
<td>CHANGE_LAYOUT_PREV</td>
<td>Keypad_7, Ctrl+F11</td>
</tr>
<tr style="text-align:center;">
<td>CHANGE_LAYOUT_NEXT</td>
<td>Keypad_9, Ctrl+ F12</td>
</tr>
<tr style="text-align:center;">
<td>ONION_ALPHA_UP</td>
<td>Keypad_Multiply</td>
</tr>
<tr style="text-align:center;">
<td>ONION_ALPHA_DOWN</td>
<td>Keypad_Divide</td>
</tr>
</table>
<p>You can change these settings by editing the <b>default.keyset</b> file in the .<b>android</b> subdirectory.</p>
<h2>Android Debug Bridge</h2>
<p>ADB, Android Debug Bridge, is a command-line utility included with Google’s Android SDK. ADB can control your device over USB from a computer, copy files back and forth, install and uninstall apps, run shell commands, and more.</p>
<p>If you have an emulator running and a real device connected, you must specify where you want the ADB commands to a real device, use the option &minus; <b>d</b> and for the emulator, use –e. Following is the list of flags and commands for ADB.</p>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th style="text-align:center;">ADB flags &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>-d</b></p>
<p>Directs device to the only connected USB device; returns an error if more than one USB device is connected.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>-e</b></p>
<p>Directs command to the only running emulator; returns an error if more than one emulator is running.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>-s &lt;serial_number&gt;</b></p>
<p>Directs command  the USB device or emulator with the given serial number.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>devices</b></p>
<p>List all connected devices</p></td>
</tr>
<tr>
<td>5</td>
<td><p><b>connect &lt;host&gt;:&lt;port&gt;</b></p>
<p>Connect to a device via TCP/IP</p></td>
</tr>
<tr>
<td>6</td>
<td><p><b>disconnect &lt;host&gt;:&lt;port&gt;</b></p>
<p>Disconnect from a TCP/IP device</p></td>
</tr>
</table>
<p></p>
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th style="text-align:center;">ADB commands &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>adb push &lt;local&gt; &lt;remote&gt;</b></p>
<p>Copy file/dir to device</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>adb pull &lt;remote&gt; [&lt;local&gt;]</b></p>
<p>Copy file/dir from device</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>adb sync [&lt;directory&gt;]</b></p>
<p>If &lt;directory&gt;is not specified, both /system and /data partitions will be updated. If it is “system” or “data”, only the corresponding partition is updated.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>adb shell</b></p>
<p>Run remote shell interactively</p></td>
</tr>
<tr>
<td>5</td>
<td><p><b>adb emu &lt;command&gt;</b></p>
<p>Run emulator console command</p></td>
</tr>
<tr>
<td>6</td>
<td><p><b>adb logcat</b></p>
<p>View device log</p></td>
</tr>
<tr>
<td>7</td>
<td><p><b>adb forward &lt;local&gt; &lt;remote&gt;</b></p>
<p>Forward socket connections</p></td>
</tr>
<tr>
<td>8</td>
<td><p><b>adb install [-l] [-r] [-s] &lt;file&gt;</b></p>
<p>Push this package file to device and install it. (-l forward lock the app)</p>
<p>(-r reinstall the app, keeping its data)</p>
<p>(-s  install on SD card instead of internal storage)</p></td>
</tr>
<tr>
<td>9</td>
<td><p><b>adb uninstall [-k] &lt;package&gt;</b></p>
<p>Remove this app package from the device.  -k means keep the data and cache directories</p></td>
</tr>
<tr>
<td>10</td>
<td><p><b>adb bugreport</b></p>
<p>Return all information from the device that should be included in the bug report.</p></td>
</tr>
<tr>
<td>11</td>
<td><p><b>adb help</b></p>
<p>Show this help message</p></td>
</tr>
<tr>
<td>12</td>
<td><p><b>adb version</b></p>
<p>Show version number</p></td>
</tr>
</table>
<h2>The Shell</h2>
<p>A shell is a program that listens to keyboard input from the user and performs actions as directed by the user. The <b>adb</b> shell command provides Unix to send shell commands to an emulator or a connected device and display the results. It can also be used to launch an interactive shell locally.</p>
<p>To issue a single command without entering a remote shell, use the shell command like this &minus;</p>
<pre class="result notranslate">
adb [-d|-e|-s &lt;serialNumber&gt;] shell &lt;shell_command&gt;
</pre>
<p>Or to enter a remote shell on an emulator/device &minus;</p>
<pre class="result notranslate">
adb [-d|-e|-s &lt;serialNumber&gt;] shell
</pre>
<p>When you are ready to exit the remote shell, press <b>CTRL+D</b> or type <b>EXIT</b>.</p>
<h2>Dalvik Debug Monitor Service</h2>
<p>Android ships a debugging tool, Dalvik Debug Monitor Service (DDMS). This tool provides additional services such as port-forwarding services, screen capture on device, incoming call and SMS spoofing etc.</p>
<img src="/sl4a/images/dalvik_debug_monitor_service.jpg" alt="Dalvik Debug Monitor Service" />
<p>When DDMS starts, it connects to <b>adb</b>. A VM monitoring service is created between adb and DDMS, when a device is connected. This service notifies DDMS when a VM on the device is started or terminated.</p>
<p>Once the VM starts running, its process id is sent to the DDMS via <b>adb</b> and the <b>adb</b> daemon opens a connection to the VM’s debugger. DDMS can now talk to the VM using a custom wire protocol.</p>
<h1>SL4A - Working with Eclipse</h1>
<p>This chapter will walk you through the basics of Eclipse IDE and configuring it to develop Python scripts for Android.</p>
<h2>Basics of Eclipse</h2>
<p>Eclipse is an application with many capabilities and options. A welcome screen will greet you, the first time you launch the program. Eclipse uses a number of basic concepts and terminology to address different functions and operations of the program.</p>
<p>Some of these terminologies are explained here &minus;</p>
<p><b>Workbench</b> &minus; It identifies the overall window of the Eclipse application. It contains multiple child windows, each window containing multiple tabs.</p>
<p><b>Workspace</b> &minus; It refers to the location on your system’s file system where projects created using Eclipse will be saved.</p>
<img src="/sl4a/images/workspace_launcher.jpg" alt="Workspace Launcher" />
<p><b>Perspective</b> &minus; It is a personal preference for which menus and windows are open at any one time. Eclipse has a number of perspectives configured for typical usage, such as writing code, debugging etc. You can also switch to a different perspective when your activity changes. Perspectives are also customizable.</p>
<h2>Installing Plugins for Eclipse</h2>
<p>One needs to configure Eclipse to be able to develop SL4A applications. Once the prerequisites are installed successfully on the host, the following plugins for Eclipse must be added &minus;</p>
<ul class="list">
<li><p>ADT plugin for Eclipse (available at <a rel="nofollow" href="http://dl-ssl.google.com/android/eclipse/" target="_blank">  http://dl-ssl.google.com/android/eclipse/</a> )</p></li>
<li><p>Python Plugin for Eclipse (available at <a rel="nofollow" href="http://www.pydev.org/updates/" target="_blank"> http://pydev.org/updates</a> )</p></li>
</ul>
<p>The following steps can be used to install plugins on Eclipse &minus;</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Click <b>Help</b>.</p></li>
<li><p><b>Step 2</b> &minus; Select <b>Install New Software</b>.</p></li>
<li><p><b>Step 3</b> &minus; Click <b>Add</b>.</p></li>
<li><p><b>Step 4</b> &minus; Specify the name and the URL to access the plugin. Click <b>OK</b>.</p></li>
<li><p><b>Step 5</b> &minus; Select all the tools and click <b>Next</b>. The plugin installation starts</p></li>
</ul>
<img src="/sl4a/images/add_repository.jpg" alt="Add Repository" />
<h2>Python Interpreter in Eclipse</h2>
<p>Follow the given steps to configure Python Interpreter in Eclipse.</p>
<ul class="list">
<li><p><b>Step 1</b> &minus; Select <b>Windows</b> &#8594; <b>Preferences</b></b>.</p></li>
<li><p><b>Step 2</b> &minus; Go to <b>PyDev</b> &#8594; <b>Interpreter</b> &#8594; <b>Python</b>.</p></li>
<li><p><b>Step 3</b> &minus; Click the <b>New</b> button.</p></li>
<li><p><b>Step 4</b> &minus; Specify a name for the interpreter. In the Location field, enter the path to python.exe. For example, C:\Python26\python.exe</p></li>
<li><p><b>Step 5</b> &minus; Click <b>OK</b>.</p></li>
</ul>
<img src="/sl4a/images/python_interpreter_eclipse.jpg" alt="Python Interpreter Eclipse" />
<h1>SL4A - Exploring Android API</h1>
<p>SL4A is based on the Facade Design Pattern to communicate with the underlying Android API. This chapter explains the working of Façade Design Pattern and the different SL4A API facades.</p>
<h2>What is a Facade Design Pattern?</h2>
<p>A facade is an object that provides an interface that simplifies the access to the related interfaces in the application. In other words, a façade insulates the working of the libraries from the client and acts as an entry point to each subsystem level. Thus, the clients communicate only through their facades. The following illustration explains the same.</p>
<img src="/sl4a/images/facade_design_pattern.jpg" alt="Facade Design Pattern" />
<h2>SL4A and Android API Facades</h2>
<p>SL4A hosts interpreters for each language it supports. The interpreters access the underlying Android APIs through an interface called a façade.</p>
<p>The following table lists the top-level facades and the functionality they provide &minus;</p>
<section class="toggle">
<label>The following table lists the top-level facades and the functionality they provide &minus;</label>
<div class="toggle-content">
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th style="text-align:center;">Android API Facade &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>ActivityResultFacade</b></p>
<p>It sets how your script will return information as an activity. This method implies that your script will return a result of some kind. The result type can be set to either RESULT_CANCELED(0) or RESULT_OK(-1)</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>AndroidFacade</b></p>
<p>It provides access to common Android functions like reading input, notifications, launching application  components etc.</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>ApplicationManagerFacade</b></p>
<p>List all available and running packages, launch an activity, create your task manager or terminate a specific set of packages.</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>BatteryManagerFacade</b></p>
<p>Exposes the battery manager and allows tracking battery status, health, type level, voltage etc.</p></td>
</tr>
<tr>
<td>5</td>
<td><p><b>BluetoothFacade</b></p>
<p>Provides access to Bluetooth capabilities from basic connection features to sending and receiving both ASCII and binary data. This façade requires at least API level 5.</p></td>
</tr>
<tr>
<td>6</td>
<td><p><b>CameraFacade</b></p>
<p>This method provides access to all camera-related functions. Allows taking a picture using the device’s camera and saving it to a specified path. It provides two functions namely cameraCapturePicture and cameraInteractiveCapturePicture. These functions are strictly for using the lens on the rear of the device.</p></td>
</tr>
<tr>
<td>7</td>
<td><p><b>CommonIntentsFacade</b></p>
<p>Provides  access to common Android Intents like opening a list of contacts, making a map search, starting an activity by action etc.</p></td>
</tr>
<tr>
<td>8</td>
<td><p><b>ContactsFacade</b></p>
<p>Allows access to contacts such as providing the contact list for picking a contact, querying the contact list by attributes and getting a list of all contacts with their IDs and attributes. Some methods provided by the façade include contactsGet, pickContact, contactsGetById etc.</p></td>
</tr>
<tr>
<td>9</td>
<td><p><b>EventFacade</b></p>
<p>The Android OS maintains an event queue for passing information between applications asynchronously. This façade provides functions to manage the event queue such as clearing the existing events, posting new events, listing, registering and unregistering broadcast signals etc. Examples of methods include eventPost, eventClearBuffer, etc.</p></td>
</tr>
<tr>
<td>10</td>
<td><p><b>EyesFreeFacade</b></p>
<p>Available on devices below API level 4. It allows scripts to speak using text-to-speech technology. This façade is now replaced by TextToSpeechFacade. The only available function is ttsSpeak.</p></td>
</tr>
<tr>
<td>11</td>
<td><p><b>LocationFacade</b></p>
<p>Provides functions that enables tracking the current location either by GPS or by using information about the cell tower you’re currently using. This feature requires an active internet connection to do the actual lookup. The façade provides methods like getLastKnownLocation, startLocating, stopLocating, readLocation etc.</p></td>
</tr>
<tr>
<td>12</td>
<td><p><b>MediaPlayerFacade</b></p>
<p>Allows playing media files, controlling the media player, querying the current status of the media player and getting information about the media files. mediaIsPlaying, mediaPlayInfo and mediaPlayList returns the current state of the media player. A call to the startActivity function launches the media player. Functions like mediaPlay, mediaPlayPause, mediaPlayClose, mediaPlaySeek,mediaPlayStart and mediaPlaySetLooping are used to control the media player.</p></td>
</tr>
<tr>
<td>13</td>
<td><p><b>MediaRecorderFacade</b></p>
<p>This façade provides audio and video recording capability. startInteractiveVideoRecording, recorderStartMicrophone, recorderCaptureVideo functions are used to launch and start audio/video recording respectively. To end a previously started recording call the recorderStop function.</p></td>
</tr>
<tr>
<td>14</td>
<td><p><b>PhoneFacade</b></p>
<p>Makes available basic phone operations like tracking phone state, roaming status, initiating calls, SIM information etc. programmatically. Examples of methods include phoneCallNumber, phoneDialNumber, getCellLocation etc.</p></td>
</tr>
<tr>
<td>15</td>
<td><p><b>PreferencesFacade</b></p>
<p>Allows access to shared preferences like getting the list of existing preferences and reading, modifying and adding new preferences. There are three functions supported by SL4A r4 release: prefGetAll, prefGetValue and prefPutValue.</p></td>
</tr>
<tr>
<td>16</td>
<td><p><b>SensorManagerFacade</b></p>
<p>Allows tracking sensor data such as light,acceleration, magnetic field and orientation. To start/ stop sensing use the startSensing (deprecated and replaced with startSensingThreshold and startSensingTimed by SL4r4) and stopSensing function calls. readSensors, sensorsGetLight, sensorsReadAccelerometer, sensorsReadMagnetometer and sensorsReadOrientation are the functions provided by this façade.</p></td>
</tr>
<tr>
<td>17</td>
<td><p><b>SettingsFacade</b></p>
<p>Provides access to different phone settings like ringer volume, screen brightness, airplane mode, vibration, media volume etc. Functions provided by this façade are  checkAirplaneMode, checkRingersilentMode and checkScreenOn(atleast API level 7), getVibrateMode, setScreenTimeout, toggleVibrateMode setRingerVolume etc.</p></td>
</tr>
<tr>
<td>18</td>
<td><p><b>SignalStrengthFacade</b></p>
<p>Allows monitoring phone signal strength. Call the startTrackingSignalStrengths function to start gathering data. Call the readSignalStrengths function to start gathering data. To shut down the process call the stoptrackingSignalStrengths function. It requires at least API level 7.</p></td>
</tr>
<tr>
<td>19</td>
<td><p><b>SmsFacade</b></p>
<p>It has functions for deleting, reading, marking and sending SMS messages. Examples of functions provided by this façade include smsMarkMessageRead, smsDeleteMessage, smsSend etc.</p></td>
</tr>
<tr>
<td>20</td>
<td><p><b>SpeechRecognitionFacade</b></p>
<p>Enables adding speech recognition functionality to the script. It has only one function named recognizeSpeech.</p></td>
</tr>
<tr>
<td>21</td>
<td><p><b>TextToSpeechFacade</b></p>
<p>Provides TTS services for API4 and later. To have a device speak use the ttsSpeak function. To determine if the speak function has completed use the ttsIsSpeaking function.</p></td>
</tr>
<tr>
<td>22</td>
<td><p><b>ToneGeneratorFacade</b></p>
<p>Generates DTMF tones for given digits. To use it you must call the generateDtmfTones function.</p></td>
</tr>
<tr>
<td>23</td>
<td><p><b>UiFacade</b></p>
<p>Provides functions for creating user interface elements like textboxes, checkboxes, datepickers etc. It also allows interactive use of HTML pages.</p></td>
</tr>
<tr>
<td>24</td>
<td><p><b>WakeLockFacade</b></p>
<p>Provides functions to create a  wake lock include wakeLockAcquireBright, wakeLockAcquireDim, wakeLockAcquireFull and wakelockAcquirePartial.</p></td>
</tr>
<tr>
<td>25</td>
<td><p><b>WebCamFacade</b></p>
<p>This façade requires at least API level 8. It allows streaming MJPEG streams from the front-facing device camera to the network. To start/stop the webcam use the webcamStart and the webcamStop functions respectively. To adjust the quality of the video while streaming use the webcamAdjustQuality function.</p></td>
</tr>
<tr>
<td>26</td>
<td><p><b>WifiFacade</b></p>
<p>Helps you to control the Wi-Fi radio on your device. It allows scripts to query the status of Wi-Fi connectivity, search for access points, connect to and disconnect  WiFi networks and hold a Wi-Fi lock during script execution.</p></td>
</tr>
</table>
</div>
</section>
<p>Refer <a rel="nofollow" href="https://code.google.com/hosting/moved?project=android-scripting" target="_blank" >https://code.google.com</a> for a full list of methods provided by these facades. The subsequent chapters illustrate how to create utilities using Android Façade API functions.</p>
<h1>SL4A - Building GUIs</h1>
<p>A Graphical User Interface (GUI) represents a set of graphical components that enables the user to browse, access and interact with the application functionalities.</p>
<p>There are two basic approaches to user interaction with SL4A namely &minus;</p>
<ul class="list">
<li><p>Dialog boxes such as <b>Alerts</b>.</p></li>
<li><p>Using HTML and JavaScript to build the UI and then Python behind the scenes to handle any additional processing.</p></li>
</ul>
<p>This chapter explains both the approaches.</p>
<h2>Python Dialog Box – Based GUIs</h2>
<p>SL4A includes a UI façade to access the basic UI elements provided by the android API. These functions return a result object as a named tuple when called. Each result is assigned a unique id for tracking purpose. The second element is the result. It represents the user’s input. The tuple also includes the third element error to provide feedback to the caller about any error condition that might have been encountered. If no errors were encountered this element is set to None.</p>
<section class="toggle">
<label>The following table lists the commonly used UiFacade functions.</label>
<div class="toggle-content">
<table class="table table-bordered">
<tr>
<th>S.No.</th>
<th style="text-align:center;">UiFacade Function &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><p><b>dialogGetInput</b></p>
<p>Queries the user for a text input.</p>
<p><b>title (String)</b> title of the input box (default = Value)</p>
<p><b>message (String)</b> message to display above the input box (default = Please enter value:)</p>
<p><b>defaultText (String) </b> text to insert into the input box (optional)</p>
<p>The result is the user's input, or None (null) if cancel was hit.</p></td>
</tr>
<tr>
<td>2</td>
<td><p><b>dialogShow</b></p>
<p>Show dialog</p></td>
</tr>
<tr>
<td>3</td>
<td><p><b>dialogCreateAlert</b></p>
<p>Create alert dialog.</p>
<p><b>title (String)</b>(optional)</p>
<p><b>message (String)</b> (optional)</p></td>
</tr>
<tr>
<td>4</td>
<td><p><b>dialogDismiss</b></p>
<p>Dismiss dialog.</p></td>
</tr>
<tr>
<td>5</td>
<td><p><b>dialogCreateDatePicker</b></p>
<p>Create date picker dialog.</p>
<p><b>year (Integer)</b> (default = 1970)</p>
<p><b>month (Integer)</b> (default = 1)</p>
<p><b>day (Integer)</b> (default = 1)</p></td>
</tr>
<tr>
<td>6</td>
<td><p><b>dialogCreateTimePicker</b></p>
<p>Create time picker dialog.</p>
<p><b>hour (Integer)</b> (default = 0)</p>
<p><b>minute (Integer)</b> (default = 0)</p>
<p><b>is24hour (Boolean)</b> Use 24 hour clock (default = false)</p></td>
</tr>
<tr>
<td>7</td>
<td><p><b>dialogGetPassword</b></p>
<p>Queries the user for a password.</p>
<p><b>title (String)</b> title of the password box (default = Password)</p>
<p><b>message (String)</b> message to display above the input box (default = Please enter password:)</p></td>
</tr>
<tr>
<td>8</td>
<td><p><b>dialogGetResponse</b></p>
<p>Returns dialog response.</p></td>
</tr>
<tr>
<td>9</td>
<td><p><b>dialogSetPositiveButtonText</b></p>
<p>Set alert dialog positive button text. text (String)</p></td>
</tr>
<tr>
<td>10</td>
<td><p><b>dialogSetNegativeButtonText</b></p>
<p>Set alert dialog button text. text (String)</p></td>
</tr>
<tr>
<td>11</td>
<td><p><b>dialogSetNeutralButtonText</b></p>
<p>Set alert dialog button text. text (String)</p></td>
</tr>
<tr>
<td>12</td>
<td><p><b>dialogSetSingleChoiceItems</b></p>
<p>This creates a list of radio buttons.</p></td>
</tr>
<tr>
<td>13</td>
<td><p><b>dialogSetMultiChoiceItems</b></p>
<p>This creates a checkbox</p></td>
</tr>
<tr>
<td>14</td>
<td><p><b>dialogCreateHorizontalProgress</b></p>
<p>Create a horizontal progress dialog.</p>
<p><b>title (String)</b> (optional)</p>
<p><b>message (String)</b> (optional)</p>
<p><b>maximum progress (Integer)</b> (default = 100)</p></td>
</tr>
<tr>
<td>15</td>
<td><p><b>dialogCreateSpinnerProgress</b></p>
<p>Create a spinner progress dialog.</p>
<p><b>title (String)</b> (optional)</p>
<p><b>message (String)</b> (optional)</p>
<p><b>maximum progress (Integer)</b> (default = 100)</p></td>
</tr>
<tr>
<td>16</td>
<td><p><b>addContexMenuItem</b></p>
<p>Adds a new item to context menu.</p>
<p><b>label (String)</b> label for this menu item</p>
<p><b>event (String)</b> event that will be generated on menu item click</p>
<p><b>eventData (Object)</b> (optional)</p></td>
</tr>
<tr>
<td>17</td>
<td><p><b>addOptionsMenuItem</b></p>
<p>Adds a new item to options menu.</p>
<p><b>label (String)</b> label for this menu item</p>
<p><b>event (String)</b> event that will be generated on menu item click</p>
<p><b>eventData (Object)</b> (optional)</p>
<p><b>iconName (String)</b></p></td>
</tr>
<tr>
<td>18</td>
<td><p><b>webViewShow</b></p>
<p>Display a WebView with the given URL.</p>
<p><b>url (String)</b></p>
<p><b>wait (Boolean)</b> block until the user exits the WebView (optional)</p></td>
</tr>
<tr>
<td>19</td>
<td><p><b>clearContextMenu</b></p>
<p>Removes all items previously added to context menu.</p></td>
</tr>
<tr>
<td>20</td>
<td><p><b>clearOptionsMenu</b></p>
<p>Removes all items previously added to options menu</p></td>
</tr>
<tr>
<td>21</td>
<td><p><b>makeToast</b></p>
<p>Create a notification</p></td>
</tr>
</table>
</div>
</section>
<h2>Examples</h2>
<p><b>A simple Toast Example</b></p>
<pre class="prettyprint notranslate">
import android 
droid = android.Android() 
uname = droid.getInput("Enter your name") 
print uname  
droid.makeToast("Hello %s" %uname.result)
</pre>
<p><b>A Horizontal Progress Bar</b></p>
<pre class="prettyprint notranslate">
import android 
   droid = android.Android() 
   title = "Progress" 
   str = "Loading..." 
   droid.dialogCreateHorizontalProgress(title,str,100) 
   droid.showDialog() 
	
   for x in range(0,99) 
      time.sleep(0.1) 
      droid.dialogSetCurrentProgress(x) 
		
   droid.dialogDismiss()
</pre>
<h2>Modal Vs Non-Modal Dialog Boxes</h2>
<p>A modal dialog box or window is a child to another process or window. With a modal dialog box, processing will wait or block until the user interacts with the new dialog box.</p>
<p>A typical example of this case is an alert dialog box. The alert will not close until the user performs an action.</p>
<p>The following image is an example of a modal dialog box.</p>
<img src="/sl4a/images/modal_dialog_box.jpg" alt="Modal Dialog Box" />
<p>To sum up, use a modal dialog box when you need input from the user before you continue execution.</p>
<h2>Python GUIs with HTML</h2>
<p>SL4A enables building Graphical User Interfaces (GUIs) based on CSS, HTML, JavaScript and Python. The approach uses HTML and JavaScript to build the UI, CSS to enhance the appearance and consistency of HTML elements and fonts and Python to handle any additional processing.</p>
<p>The following example illustrates a basic HTML GUI example &minus;</p>
<p><b>1. Speech.html</b></p>
<pre class="prettyprint notranslate">
&lt;html&gt; 
   &lt;head&gt; 
      &lt;title&gt;Text To Speech&lt;/title&gt; 
		
      &lt;script&gt; 
         var droid = new Android(); 
         var speak = function(){ 
            droid.postEvent("say",document.getElementById("say").value); 
         } 
      &lt;/script&gt; 
		
   &lt;/head&gt;
	
   &lt;body&gt; 
      &lt;form onsubmit = "speak()";return false;”&gt; 
         &lt;label for = "say"&gt;What is your message?&lt;/label&gt; 
         &lt;input type = "text" id = "say"/&gt; 
         &lt;input type = "submit" value = "Speak"/&gt; 
      &lt;/form&gt; 
   &lt;/body&gt; 
	
&lt;/html&gt;
</pre>
<p><b>2. txtToSpeech.py</b></p>
<pre class="prettyprint notranslate">
import android 
droid = android.Android() 
droid.webViewShow(‘file:///sdcard/sl4a/scripts/Speech.html’) 

while True: 
   result = droid.waitForEvent(‘say’).result 
   droid.ttsSpeak(result[‘data’])
</pre>
<p>Both the files &minus; <b>Speech.html and txtToSpeech.py</b>, must reside in the <b>/sdcard/sl4a/scripts</b> directory on the device. Run the python script to launch the HTML file.</p>
<p>This file is launched by the <b>webViewShow</b> API call. The event is generated when the <b>Speak</b> button is clicked.</p>
<h1>SL4A - Utilities using Python Facades</h1>
<h2>Email-based Applications</h2>
<p>Email based applications are one of the most common utilities available in a mobile device. One can use the <b>sendEmail</b> API call available through the SL4A Android facade.</p>
<p>This function takes three parameters &minus;</p>
<ul class="list">
<li><p><b>to_address</b> &minus; a comma-separated list of recipients.</p></li>
<li><p><b>title</b> &minus; represents the title of the email message.</p></li>
<li><p><b>message</b> &minus; represents the message to be sent.</p></li>
</ul>
<pre class="prettyprint notranslate">
import android,datetime,smtplib 
from email.mime.multipart import MIMEMultipart 
from email.mime.text import MIMEText 

droid = android.Android() 
serv = ’smtp.gmail.com’ 
port = 587 
mailto = ’chris’ 
mailfrom = ’charley’ 
pass = ’pass@123’ 

msg = MIMEMultipart() 
msg[‘Subject’] = ’Tes Mail’ 
msg[‘To’] = mailto 
msg[‘From’] = mailfrom 

body = ’This is a test mail!!’ 
msg.attach(MIMEText(body,’plain’)) 

smtpCon = smtplib.SMTP(serv,port) 
smtpCon.starttls() 
smtpCon.login(mailfrom,pass) 
smtpSendmail(mailfrom,mailto,msg.as_string()) 
smtpCon.close()
</pre>
<p>The python library that have used to build the email program is <b>smtplib</b>. In addition, we have used the email library. This library contains a number of helper functions allowing us to construct our message in the correct form. The <b>mimetypes</b> library helps with the encoding of our message.</p>
<h2>Wifi Scanner</h2>
<p>The following code lists all available Wi-Fi access spots &minus;</p>
<pre class="prettyprint notranslate">
import android, time 

def main(): 
   global droid 
   droid = android.Android() 
	
while not droid.wifiStartScan().result: 
   time.sleep(0.25) 
	
networks = {} 

while not networks: 
   for ap in in droid.wifiGetScanResults().result: 
      networks[ap[‘bssid’]] = ap.copy() 
		
   droid.dialogCreateAlert(‘Access Points’) 
   droid.dialogSetItems([‘%(ssid)s,%(level)s,%(capabilities)s’ % 
      ap for ap in networks.values() ]) 
		
droid.dialogSetPositiveButtonText(‘OK’) 
dorid.dialogShow() 

if __name__=’__main__’: 
   main()
</pre>
<h2>Call Logs</h2>
<p>The code for call logs is given below.</p>
<pre class="prettyprint notranslate">
import android 
droid = android.Android() 
mylog = droid.getConstants("android.provider.Calllog$Calls").result 
calls = droid.queryContent(mylog["CONTENT_URI"],["name","number","duration"]).result 

for c in calls: 
   print c
</pre>
<h1>SL4A - Background Scripting with Python</h1>
<p>A service is a component, which runs in the background, without direct interaction with the user. It does not have any UI (user interface). The service runs in the background indefinitely even if application is destroyed.</p>
<p>This chapter describes the writing scripts that perform specific tasks in the background.</p>
<h2>Background Tasks</h2>
<p>SL4A enables a script to run in a terminal or in the background. To launch a script in the background choose the icon that looks like a cog wheel. The script runs in the background infinitely. However, one may choose to explicitly shut down such services.</p>
<h2>Launch on Boot Scripts</h2>
<p>These scripts are launched whenever the device boots. The Launch on Boot preferences screen is an application that lets you specify the device’s boot preferences. The utility supports execution of multiple scripts via a Master script. The Master script launches the other scripts.</p>
<h2>Triggers</h2>
<p>A trigger defines a set of actions that must be performed in response to an action/event. Triggers may be added as well as deleted. The /sdcard/sl4a/scripts directory allows you to choose a script to run when an event is triggered. The list of options that may trigger you script includes battery, location, phone, sensors and signal strength.</p>
<h3>Orientation-based Actions</h3>
<p>SL4A lets us run scripts depending on the orientation and movement of the device. The startSensingTimedAPI is used to determine the orientation and movement of the device.</p>
<p>The following snippet uses TTS function to notify the user when the phone has been placed face down &minus;</p>
<pre class="prettyprint notranslate">
import android,time 
droid = android.Android() 
droid.startSensing() 

while True: 
   res = droid.sensorsGetLight().result 
	
   if res is not None and res &lt;=10: 
      droid.ttsSpeak("Device faced down!!") 
   time.sleep(5)
</pre>
<h3>Location-based Actions</h3>
<p>Library, church are the locations that you may frequently visit and you definitely want to silence your phone when you are there. SL4A allows you to build scripts that will track your location and take specific actions.</p>
<h3>Time-based / Elapsed-Time-based Triggers</h3>
<p>These triggers are used to perform actions at a specific time of day. The 24-hour time format should be used to specify the time. Examples include a script to set alarm, reminders etc. As against a time-based trigger, an elapsed time-based trigger executes the script after an elapsed number of time. The snooze option on an alarm application is based on this concept.</p>
<img src="/sl4a/images/elapsed_timebased_triggers.jpg" alt="Elapsed-Time-based Triggers" />
<h1>SL4A - Packaging &amp; Distributing</h1>
<p>This chapter explains the ways to package and distribute scripts using Eclipse and QR codes.</p>
<h2>Quick Response (QR) Codes</h2> 
<p>Most Android devices include a native barcode scanner. SL4A supports importing QR codes directly into the editor. A QR code can only encode 4,296 characters of content. Hence, this method of distribution is suitable for short scripts.</p>
<p>There are several websites where you can paste text and create a QR code. However, we shall reference <a rel="nofollow" href="http://zxing.appspot.com/generator" target="_blank"> http://zxing.appspot.com/generator</a> to generate the QR code in our illustration.</p>
<p>The steps are explained below &minus;</p>
<p><b>Step 1</b> &minus; Open the <b>Contents</b> drop-down and choose <b>Text</b>.</p>
<p><b>Step 2</b> &minus; On the first line of the <b>Text Content</b>, enter the name of the script (e.g., greet.py).</p>
<img src="/sl4a/images/qr_code_generator.jpg" alt="QR Code Generator" />
<p><b>Step 3</b> &minus; Paste the script content below that.</p>  
<p><b>Step 4</b> &minus; Choose the barcode size from the Size drop-down.</p>  
<p><b>Step 5</b> &minus; Click Generate.</p>
<p><b>Step 6</b> &minus; Embed the resulting barcode image or share it.</p>
<p>Thus, QR code is an effective way to share short scripts through a blog or a website.</p>
<h2>Build Application Packages – Eclipse</h2> 
<p>Android applications are distributed in a single file/package with an .<b>apk</b> extension. The Android Package <b>(.apk)</b> is similar to a .jar or .zip file. Each .<b>apk</b> contains a number of mandatory files that must be present. The most important file is the <b>AndroidManifest.xml</b>.</p>
<p>The manifest file does a number of things &minus;</p>
<ul class="list">
<li><p>Declares application components.</p></li>
<li><p>Identify user permissions the application requires.</p></li>
<li><p>Declares hardware and software features used or required by the application, such as camera, Bluetooth services etc.</p></li>
<li><p>Specifies API libraries the application needs to be linked against, such as the Google Maps Library.</p></li>
</ul>
<p>The steps to build a distributable project i.e. <b>.apk</b> in eclipse are illustrated below &minus;</p>
<ul class="list">
<li><p>Download and install Hg from mercurial &minus; <a rel="nofollow" href="https://www.mercurial-scm.org/wiki/Download" target="_blank">http://mercurial.selenic.com/wiki/Download</a>. Set the PATH variable to the installation folder.</p></li>
<li><p>Create a clone of the latest SL4A repository: Open the terminal and navigate to the directory where the clone must be created. Enter the following Hg clone: https://android-scripting.googlecode.com/hg/android-scripting.</p></li>
<li><p>Open Eclipse and click on <b>File/Import/General/Existing</b> Projects into Workspace/Next and Browse to the cloned directory. Click on Android/OK then select all and click Finish.</p></li>
<li><p>Include <b>ANDROID_SDK</b> in the Classpath Variable list by clicking Windows/Preferences/Java/BuildPathVariables/New. Put ANDROID_SDK for the name and your SDK directory for the folder (probably c:\ProgramFiles\Android\android-sdk-windows).</p></li>
<li><p>Click Project/Build Automatically, then Project/Clean/Clean all Projects/OK.</p></li>
<li><p>To turn your script into an <b>APK</b>, make a copy of <b>ScriptForAndroidTemplate</b> (right click/copy then right click/paste into the same area). A new project will appear with the name Copy of <b>ScriptForAndroidTemplate</b>.</p></li>
<li><p>To connect this project to your clone of SL4A, double click on it, right click on build.xml /Run As /Ant Build. Rename the project using Refactor/Rename to whatever name you choose for your project and Refresh/Clean/Build the project.</p></li>
<li><p>Next, double-click on raw and Refactor/Rename to change the name script.py to <b>your_script_name.py</b> and then double-click src/com.dummy.fooforandroid/Script.java and change  R.raw.script to R.raw.your_script_name and save.</p></li>
<li><p>Double-click on <b>src</b> and Refactor/Rename to change the package name com.dummy.fooforandroid to your.package.name. Do the same for gen.</p></li>
<li><p>Now highlight your project then click on Project/Properties/Android. Select your android target and click <b>OK</b>.</p></li>
<li><p>Towards the bottom of your project list, double click on AndroidManifest.xml. Change the package name in the manifest from com.dummy.fooforandroid to your.package.name. Change your minSdkVersion from "4" to suit your android target (this is the API level for your android target shown in Project/Preferences/Android). Uncomment the permissions you require your application to have (take off &lt;!-- at the start and  --&gt; at the end). Set Debug to <b>False</b>.</p></li>
<li><p>Right click on <b>your_script_name</b> and open with text editor. Delete the default script, replace it with your own and save. Then Clean/Build/Refresh your project and run it. If all goes well click on File/Export to export your application as an apk.</p></li>
<li><p>Click <b>Next</b>.</p></li>
<li><p>Every Android Application must be digitally signed before it can be installed. Select <b>Create new Keystore</b>, if this is the first time you have been through this process.</p></li>
<li><p>Select a file to hold your keystore and it must be password protected.</p></li>
<li><p>Click <b>Next</b>. Notice the validity field. You may create a key valid for any number of years, from 1 to 99.</p></li>
<li><p>The final dialog box allows you to specify where you want the .apk file to reside. Click Finish.</p></li>
<li><p>One may use Eclipse or the ADB tool to test/install the .apk file. To install using <b>ADB</b>, open a terminal window, navigate to the .apk destination directory and type the following &minus;</p></li>
</ul>
<pre class="result notranslate">
adb install distributable_file.apk
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/sl4a/sl4a_packaging_distributing.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/sl4a/sl4a_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
