<!DOCTYPE html>
<html lang="en-US">
<head>
<title>iBATIS - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="iBATIS - Quick Guide - iBATIS is a persistence framework which automates the mapping between SQL databases and objects in Java, .NET, and Ruby on Rails. The mappings are decoupled fro"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/ibatis/ibatis_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#0C6AC4;
}
a.demo {
    background:#0C6AC4;
}
li.heading {
    background:#0C6AC4;
}
.course-box{background:#0C6AC4}
.home-intro-sub p{color:#0C6AC4}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/ibatis/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/ibatis/images/ibatis-mini-logo.jpg" alt="iBATIS Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">iBATIS Tutorial</li>
<li><a target="_top" href="/ibatis/index.htm">iBATIS - Home</a></li>
<li><a target="_top" href="/ibatis/ibatis_overview.htm">iBATIS - Overview</a></li>
<li><a target="_top" href="/ibatis/ibatis_environment.htm">iBATIS - Environment</a></li>
<li><a target="_top" href="/ibatis/ibatis_create_operation.htm">iBATIS - Create Operation</a></li>
<li><a target="_top" href="/ibatis/ibatis_read_operation.htm">iBATIS - Read Operation</a></li>
<li><a target="_top" href="/ibatis/ibatis_update_operation.htm">iBATIS - Update Operation</a></li>
<li><a target="_top" href="/ibatis/ibatis_delete_operation.htm">iBATIS - Delete Operation</a></li>
<li><a target="_top" href="/ibatis/ibatis_result_maps.htm">iBATIS - Result Maps</a></li>
<li><a target="_top" href="/ibatis/ibatis_stored_procedures.htm">iBATIS - Stored Procedures</a></li>
<li><a target="_top" href="/ibatis/ibatis_dynamic_sql.htm">iBATIS - Dynamic SQL</a></li>
<li><a target="_top" href="/ibatis/ibatis_debugging.htm">iBATIS - Debugging</a></li>
<li><a target="_top" href="/ibatis/ibatis_vs_hibernate.htm">iBATIS - Hibernate</a></li>
<li><a target="_top" href="/ibatis/ibator_introduction.htm">iBATOR- Introduction</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">iBATIS Useful Resources</li>
<li><a  href="/ibatis/ibatis_quick_guide.htm">iBATIS - Quick Guide</a></li>
<li><a  href="/ibatis/ibatis_useful_resources.htm">iBATIS - Useful Resources</a></li>
<li><a  href="/ibatis/ibatis_discussion.htm">iBATIS - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>iBATIS - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/ibatis/ibator_introduction.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ibatis/ibatis_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>iBATIS - Overview</h1>
<p>iBATIS is a persistence framework which automates the mapping between SQL databases and objects in Java, .NET, and Ruby on Rails. The mappings are decoupled from the application logic by packaging the SQL statements in XML configuration files.</p>
<p>iBATIS is a lightweight framework and persistence API good for persisting POJOs( Plain Old Java Objects).</p>
<p>iBATIS is what is known as a data mapper and takes care of mapping the parameters and results between the class properties and the columns of the database table.</p>
<p>A significant difference between iBATIS and other persistence frameworks such as Hibernate is that iBATIS emphasizes the use of SQL, while other frameworks typically use a custom query language such has the Hibernate Query Language (HQL) or Enterprise JavaBeans Query Language (EJB QL).</p>
<h2>iBATIS Design Philosophies</h2>
<p>iBATIS comes with the following design philosophies &minus;</p>
<ul class="list">
<li><p><b>Simplicity &minus;</b> iBATIS is widely regarded as being one of the simplest persistence frameworks available today.</p></li>
<li><p><b>Fast Development &minus;</b> iBATIS does all it can to facilitate hyper-fast development.</p></li>
<li><p><b>Portability &minus;</b> iBATIS can be implemented for nearly any language or platform such as Java, Ruby, and C# for Microsoft .NET.</p></li>
<li><p><b>Independent Interfaces &minus;</b> iBATIS provides database-independent interfaces and APIs that help the rest of the application remain independent of any persistence-related resources.</p></li>
<li><p><b>Open source &minus;</b> iBATIS is free and an open source software.</p></li>
</ul>
<h2>Advantages of iBATIS</h2>
<p>iBATIS offers the following advantages &minus;</p>
<ul class="list">
<li><p><b>Supports stored procedures &minus;</b> iBATIS encapsulates SQL in the form of stored procedures so that business logic is kept out of the database, and the application is easier to deploy and test, and is more portable.</p></li>
<li><p><b>Supports inline SQL &minus;</b> No precompiler is needed, and you have full access to all of the features of SQL.</p></li>
<li><p><b>Supports dynamic SQL &minus;</b> iBATIS provides features for dynamically building SQL queries based on parameters.</p></li>
<li><p><b>Supports O/RM &minus;</b> iBATIS supports many of the same features as an O/RM tool, such as lazy loading, join fetching, caching, runtime code generation, and inheritance</p></li>
</ul>
<p>iBATIS makes use of JAVA programming language while developing database oriented application. Before proceeding further, make sure that you understand the basics of procedural and object-oriented programming &minus; control structures, data structures and variables, classes, objects, etc.</p>
<p>To understand JAVA in detail you can go through our <a href="/java/index.htm" title="JAVA Tutoria" target="_blank">JAVA Tutorial</a>.</p>
<h1>iBATIS - Environment</h1>
<p>You would have to set up a proper environment for iBATIS before starting off with actual development work. This chapter explains how to set up a working environment for iBATIS.</p>
<h2>iBATIS Installation</h2>
<p>Carry out the following simple steps to install iBATIS on your Linux machine &minus;</p>
<ul class="list">
<li><p>Download the latest version of iBATIS from <a href="http://www.java2s.com/Code/Jar/i/Downloadibatis234726jar.htm" target="_blank" rel="nofollow">Download iBATIS</a>.</p></li>
<li><p>Unzip the downloaded file to extract .jar file from the bundle and keep them in appropriate lib directory.</p></li>
<li><p>Set PATH and CLASSPATH variables at the extracted .jar file(s) appropriately.</p></li>
</ul>
<pre class="result notranslate">
$ unzip ibatis-2.3.4.726.zip
inflating: META-INF/MANIFEST.MF
   creating: doc/
   creating: lib/
	
   creating: simple_example/
   creating: simple_example/com/
   creating: simple_example/com/mydomain/
   creating: simple_example/com/mydomain/data/
   creating: simple_example/com/mydomain/domain/
	
   creating: src/
	
  inflating: doc/dev-javadoc.zip
  inflating: doc/user-javadoc.zip
  
  inflating: jar-dependencies.txt
  inflating: lib/ibatis-2.3.4.726.jar
  inflating: license.txt
  inflating: notice.txt
  inflating: release.txt
  
$pwd
/var/home/ibatis
$set PATH=$PATH:/var/home/ibatis/
$set CLASSPATH=$CLASSPATH:/var/home/ibatis\
      /lib/ibatis-2.3.4.726.jar
</pre>
<h2>Database Setup</h2>
<p>Create an EMPLOYEE table in any MySQL database using the following syntax &minus;</p>
<pre class="result notranslate">
mysql&gt; CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<h2>Create SqlMapConfig.xml</h2>
<p>Consider the following &minus;</p>
<ul class="list">
<li><p>We are going to use JDBC to access the database <b>testdb</b>.</p></li> 
<li><p>JDBC driver for MySQL is "com.mysql.jdbc.Driver".</p></li>
<li><p>Connection URL is "jdbc:mysql://localhost:3306/testdb".</p></li>
<li><p>We would use username and password as "root" and "root" respectively.</p></li>
<li><p>Our sql statement mappings for all the operations would be described in "Employee.xml".</p></li> 
</ul>
<p>Based on the above assumptions, we have to create an XML configuration file with name <b>SqlMapConfig.xml</b> with the following content. This is where you need to provide all configurations required for iBatis &minus;</p>
<p>It is important that both the files SqlMapConfig.xml and Employee.xml should be present in the class path. For now, we would keep Employee.xml file empty and we would cover its contents in subsequent chapters.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMapConfig PUBLIC "-//ibatis.apache.org//DTD SQL Map Config 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-config-2.dtd"&gt;

&lt;sqlMapConfig&gt;
   &lt;settings useStatementNamespaces="true"/&gt;
	
   &lt;transactionManager type="JDBC"&gt;
      &lt;dataSource type="SIMPLE"&gt;
		
         &lt;property name="JDBC.Driver" value="com.mysql.jdbc.Driver"/&gt;
         &lt;property name="JDBC.ConnectionURL" value="jdbc:mysql://localhost:3306/testdb"/&gt;
         &lt;property name="JDBC.Username" value="root"/&gt;
         &lt;property name="JDBC.Password" value="root"/&gt;
			
      &lt;/dataSource&gt;
   &lt;/transactionManager&gt;
	
   &lt;sqlMap resource="Employee.xml"/&gt; 
&lt;/sqlMapConfig&gt;
</pre>
<p>You can set the following optional properties as well using SqlMapConfig.xml file &minus;</p>
<pre class="result notranslate">
&lt;property name="JDBC.AutoCommit" value="true"/&gt;
&lt;property name="Pool.MaximumActiveConnections" value="10"/&gt;
&lt;property name="Pool.MaximumIdleConnections" value="5"/&gt;
&lt;property name="Pool.MaximumCheckoutTime" value="150000"/&gt; 
&lt;property name="Pool.MaximumTimeToWait" value="500"/&gt; 
&lt;property name="Pool.PingQuery" value="select 1 from Employee"/&gt; 
&lt;property name="Pool.PingEnabled" value="false"/&gt;
</pre>
<h1>iBATIS - Create Operation</h1>
<p>To perform any Create, Read, Update, and Delete (CRUD) operation using iBATIS, you would need to create a Plain Old Java Objects (POJO) class corresponding to the table. This class describes the objects that will "model" database table rows.</p>
<p>The POJO class would have implementation for all the methods required to perform desired operations.</p>
<p>Let us assume we have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<h2>Employee POJO Class</h2>
<p>We would create an Employee class in Employee.java file as follows &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }
} /* End of Employee */
</pre>
<p>You can define methods to set individual fields in the table. The next chapter explains how to get the values of individual fields.</p>
<h2>Employee.xml File</h2>
<p>To define SQL mapping statement using iBATIS, we would use &lt;insert&gt; tag and inside this tag definition, we would define an "id" which will be used in IbatisInsert.java file for executing SQL INSERT query on database.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt; 

   &lt;insert id="insert" parameterClass="Employee"&gt;
      insert into EMPLOYEE(first_name, last_name, salary)
      values (#first_name#, #last_name#, #salary#)

      &lt;selectKey resultClass="int" keyProperty="id"&gt;
         select last_insert_id() as id
      &lt;/selectKey&gt;
   &lt;/insert&gt; 

&lt;/sqlMap&gt;
</pre>
<p>Here <b>parameterClass &minus;</b> could take a value as <i>string, int, float, double</i>, or any class <i>object</i> based on requirement. In this example, we would pass Employee object as a parameter while calling <i>insert</i> method of SqlMap class.</p>
<p>If your database table uses an IDENTITY, AUTO_INCREMENT, or SERIAL column or you have defined a SEQUENCE/GENERATOR, you can use the &lt;selectKey&gt; element in an &lt;insert&gt; statement to use or return that database-generated value.</p>
<h2>IbatisInsert.java File</h2>
<p>This file would have application level logic to insert records in the Employee table &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisInsert{
   public static void main(String[] args)throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      /* This would insert one record in Employee table. */
      System.out.println("Going to insert record.....");
      Employee em = new Employee("Zara", "Ali", 5000);

      smc.insert("Employee.insert", em);

      System.out.println("Record Inserted Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisInsert.java as shown above and compile it.</li>
<li>Execute IbatisInsert binary to run the program.</li>
</ul>
<p>You would get the following result, and a record would be created in the EMPLOYEE table.</p>
<pre class="result notranslate">
$java IbatisInsert
Going to insert record.....
Record Inserted Successfully
</pre>
<p>If you check the EMPLOYEE table, it should display the following result &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
+----+------------+-----------+--------+
1 row in set (0.00 sec)
</pre>
<h1>iBATIS - Read Operation</h1>
<p>We discussed, in the last chapter, how to perform CREATE operation on a table using iBATIS. This chapter explains how to read a table using iBATIS.</p>
<p>We have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>This table has only one record as follows &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
+----+------------+-----------+--------+
1 row in set (0.00 sec)
</pre>
<h2>Employee POJO Class</h2>
<p>To perform read operation, we would modify the Employee class in Employee.java as follows &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }

   /* Here are the method definitions */
   public int getId() {
      return id;
   }
	
   public String getFirstName() {
      return first_name;
   }
	
   public String getLastName() {
      return last_name;
   }
	
   public int getSalary() {
      return salary;
   }
	
} /* End of Employee */
</pre>
<h2>Employee.xml File</h2>
<p>To define SQL mapping statement using iBATIS, we would add &lt;select&gt; tag in Employee.xml file and inside this tag definition, we would define an "id" which will be used in IbatisRead.java file for executing SQL SELECT query on database.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;

   &lt;insert id="insert" parameterClass="Employee"&gt;
      INSERT INTO EMPLOYEE(first_name, last_name, salary)
      values (#first_name#, #last_name#, #salary#)

      &lt;selectKey resultClass="int" keyProperty="id"&gt;
         select last_insert_id() as id
      &lt;/selectKey&gt;
   &lt;/insert&gt;
	
   &lt;select id="getAll" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
   &lt;/select&gt;
	
&lt;/sqlMap&gt;
</pre>
<p>Here we did not use WHERE clause with SQL SELECT statement. We would demonstrate, in the next chapter, how you can use WHERE clause with SELECT statement and how you can pass values to that WHERE clause.</p>
<h2>IbatisRead.java File</h2>
<p>This file has application level logic to read records from the Employee table &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisRead{
   public static void main(String[] args)throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      /* This would read all records from the Employee table. */
      System.out.println("Going to read records.....");
      List &lt;Employee&gt; ems = (List&lt;Employee&gt;)
         smc.queryForList("Employee.getAll", null);
      Employee em = null;
		
      for (Employee e : ems) {
         System.out.print("  " + e.getId());
         System.out.print("  " + e.getFirstName());
         System.out.print("  " + e.getLastName());
         System.out.print("  " + e.getSalary());
         em = e; 
         System.out.println("");
      }    
		
      System.out.println("Records Read Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisRead.java as shown above and compile it.</li>
<li>Execute IbatisRead binary to run the program.</li>
</ul>
<p>You would get the following result, and a record would be read from the EMPLOYEE table as follows &minus;</p>
<pre class="result notranslate">
Going to read records.....
   1  Zara  Ali  5000
Record Reads Successfully
</pre>
<h1>iBATIS - Update Operation</h1>
<p>We discussed, in the last chapter, how to perform READ operation on a table using iBATIS. This chapter explains how you can update records in a table using iBATIS.</p>
<p>We have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>This table has only one record as follows &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
+----+------------+-----------+--------+
1 row in set (0.00 sec)
</pre>
<h2>Employee POJO Class</h2>
<p>To perform udpate operation, you would need to modify Employee.java file as follows &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }

   /* Here are the required method definitions */
   public int getId() {
      return id;
   }
	
   public void setId(int id) {
      this.id = id;
   }
	
   public String getFirstName() {
      return first_name;
   }
	
   public void setFirstName(String fname) {
      this.first_name = fname;
   }
	
   public String getLastName() {
      return last_name;
   }
   public void setlastName(String lname) {
      this.last_name = lname;
   }
	
   public int getSalary() {
      return salary;
   }
	
   public void setSalary(int salary) {
      this.salary = salary;
   }

} /* End of Employee */
</pre>
<h2>Employee.xml File</h2>
<p>To define SQL mapping statement using iBATIS, we would add &lt;update&gt; tag in Employee.xml and inside this tag definition, we would define an "id" which will be used in IbatisUpdate.java file for executing SQL UPDATE query on database.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;

   &lt;insert id="insert" parameterClass="Employee"&gt;
      INSERT INTO EMPLOYEE(first_name, last_name, salary)
      values (#first_name#, #last_name#, #salary#)

      &lt;selectKey resultClass="int" keyProperty="id"&gt;
         select last_insert_id() as id
      &lt;/selectKey&gt;
   &lt;/insert&gt;

   &lt;select id="getAll" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
   &lt;/select&gt;

   &lt;update id="update" parameterClass="Employee"&gt;
      UPDATE EMPLOYEE
      SET    first_name = #first_name#
      WHERE  id = #id#
   &lt;/update&gt;
	
&lt;/sqlMap&gt;
</pre>
<h2>IbatisUpdate.java File</h2>
<p>This file has application level logic to update records into the Employee table &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisUpdate{
   public static void main(String[] args)
   throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      /* This would update one record in Employee table. */
      System.out.println("Going to update record.....");
      Employee rec = new Employee();
      rec.setId(1);
      rec.setFirstName( "Roma");
      smc.update("Employee.update", rec );
      System.out.println("Record updated Successfully ");

      System.out.println("Going to read records.....");
      List &lt;Employee&gt; ems = (List&lt;Employee&gt;)
         smc.queryForList("Employee.getAll", null);
      Employee em = null;
		
      for (Employee e : ems) {
         System.out.print("  " + e.getId());
         System.out.print("  " + e.getFirstName());
         System.out.print("  " + e.getLastName());
         System.out.print("  " + e.getSalary());
         em = e; 
         System.out.println("");
      }    

      System.out.println("Records Read Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above-mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisUpdate.java as shown above and compile it.</li>
<li>Execute IbatisUpdate binary to run the program.</li>
</ul>
<p>You would get following result, and a record would be updated in EMPLOYEE table and later, the same record would be read from the EMPLOYEE table.</p>
<pre class="result notranslate">
Going to update record.....
Record updated Successfully
Going to read records.....
   1  Roma  Ali  5000
Records Read Successfully
</pre>
<h1>iBATIS - Delete Operation</h1>
<p>This chapter describes how to delete records from a table using iBATIS.</p>
<p>We have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Assume this table has two records as follows &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
|  2 | Roma       | Ali       |   3000 |
+----+------------+-----------+--------+
2 row in set (0.00 sec)
</pre>
<h2>Employee POJO Class</h2>
<p>To perform delete operation, you do not need to modify Employee.java file. Let us keep it as it was in the last chapter.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }

   /* Here are the required method definitions */
   public int getId() {
      return id;
   }
	
   public void setId(int id) {
      this.id = id;
   }
	
   public String getFirstName() {
      return first_name;
   }
	
   public void setFirstName(String fname) {
      this.first_name = fname;
   }
	
   public String getLastName() {
      return last_name;
   }
	
   public void setlastName(String lname) {
      this.last_name = lname;
   }
	
   public int getSalary() {
      return salary;
   }
	
   public void setSalary(int salary) {
      this.salary = salary;
   }

} /* End of Employee */
</pre>
<h2>Employee.xml File</h2>
<p>To define SQL mapping statement using iBATIS, we would add &lt;delete&gt; tag in Employee.xml and inside this tag definition, we would define an "id" which will be used in IbatisDelete.java file for executing SQL DELETE query on database.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;

   &lt;insert id="insert" parameterClass="Employee"&gt;
      INSERT INTO EMPLOYEE(first_name, last_name, salary)
      values (#first_name#, #last_name#, #salary#)

      &lt;selectKey resultClass="int" keyProperty="id"&gt;
         select last_insert_id() as id
      &lt;/selectKey&gt;
   &lt;/insert&gt;

   &lt;select id="getAll" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
   &lt;/select&gt;

   &lt;update id="update" parameterClass="Employee"&gt;
      UPDATE EMPLOYEE
      SET    first_name = #first_name#
      WHERE  id = #id#
   &lt;/update&gt;

   &lt;delete id="delete" parameterClass="int"&gt;
      DELETE FROM EMPLOYEE
      WHERE  id = #id#
   &lt;/delete&gt;

&lt;/sqlMap&gt;
</pre>
<h2>IbatisDelete.java File</h2>
<p>This file has application level logic to delete records from the Employee table &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisDelete{
   public static void main(String[] args)
   throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      /* This would delete one record in Employee table. */
      System.out.println("Going to delete record.....");
      int id = 1;

      smc.delete("Employee.delete", id );
      System.out.println("Record deleted Successfully ");

      System.out.println("Going to read records.....");
      List &lt;Employee&gt; ems = (List&lt;Employee&gt;)
         smc.queryForList("Employee.getAll", null);
      Employee em = null;
		
      for (Employee e : ems) {
         System.out.print("  " + e.getId());
         System.out.print("  " + e.getFirstName());
         System.out.print("  " + e.getLastName());
         System.out.print("  " + e.getSalary());
         em = e; 
         System.out.println("");
      }    

      System.out.println("Records Read Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above-mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisDelete.java as shown above and compile it.</li>
<li>Execute IbatisDelete binary to run the program.</li>
</ul>
<p>You would get the following result, and a record with ID = 1 would be deleted from the EMPLOYEE table and the rest of the records would be read.</p>
<pre class="result notranslate">
Going to delete record.....
Record deleted Successfully
Going to read records.....
   2  Roma  Ali  3000
Records Read Successfully
</pre>
<h1>iBATIS - Result Maps</h1>
<p>The resultMap element is the most important and powerful element in iBATIS. You can reduce up to 90% JDBC coding using iBATIS ResultMap and in some cases, it allows you to do things that JDBC does not even support.</p>
<p>The design of ResultMaps is such that simple statements don't require explicit result mappings at all, and more complex statements require no more than is absolutely necessary to describe the relationships.</p>
<p>This chapter provides just a simple introduction of iBATIS ResultMaps.</p>
<p>We have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>This table has two records as follows &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
|  2 | Roma       | Ali       |   3000 |
+----+------------+-----------+--------+
2 row in set (0.00 sec)
</pre>
<h2>Employee POJO Class</h2>
<p>To use iBATIS ResultMap, you do not need to modify the Employee.java file. Let us keep it as it was in the last chapter.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }

   /* Here are the required method definitions */
   public int getId() {
      return id;
   }
	
   public void setId(int id) {
      this.id = id;
   }
	
   public String getFirstName() {
      return first_name;
   }
	
   public void setFirstName(String fname) {
      this.first_name = fname;
   }
	
   public String getLastName() {
      return last_name;
   }
	
   public void setlastName(String lname) {
      this.last_name = lname;
   }
	
   public int getSalary() {
      return salary;
   }
	
   public void setSalary(int salary) {
      this.salary = salary;
   }

} /* End of Employee */
</pre>
<h2>Employee.xml File</h2>
<p>Here we would modify Employee.xml to introduce &lt;resultMap&gt;&lt;/resultMap&gt; tag. This tag would have an id which is required to run this resultMap in our &lt;select&gt; tag's resultMap attribute.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;

   &lt;!-- Perform Insert Operation --&gt;
	
   &lt;insert id="insert" parameterClass="Employee"&gt;
      INSERT INTO EMPLOYEE(first_name, last_name, salary)
      values (#first_name#, #last_name#, #salary#)

      &lt;selectKey resultClass="int" keyProperty="id"&gt;
         select last_insert_id() as id
      &lt;/selectKey&gt;
   &lt;/insert&gt;

   &lt;!-- Perform Read Operation --&gt;
   &lt;select id="getAll" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
   &lt;/select&gt;

   &lt;!-- Perform Update Operation --&gt;
   &lt;update id="update" parameterClass="Employee"&gt;
      UPDATE EMPLOYEE
      SET    first_name = #first_name#
      WHERE  id = #id#
    &lt;/update&gt;

   &lt;!-- Perform Delete Operation --&gt;
   &lt;delete id="delete" parameterClass="int"&gt;
      DELETE FROM EMPLOYEE
      WHERE  id = #id#
   &lt;/delete&gt;

   &lt;!-- Using ResultMap --&gt;
   &lt;resultMap id="result" class="Employee"&gt;
      &lt;result property="id" column="id"/&gt;
      &lt;result property="first_name" column="first_name"/&gt;
      &lt;result property="last_name" column="last_name"/&gt;
      &lt;result property="salary" column="salary"/&gt;
   &lt;/resultMap&gt; 
	
   &lt;select id="useResultMap" resultMap="result"&gt;
      SELECT * FROM EMPLOYEE
      WHERE id=#id#
   &lt;/select&gt;

&lt;/sqlMap&gt;
</pre>
<h2>IbatisResultMap.java File</h2>
<p>This file has application level logic to read records from the Employee table using ResultMap &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisResultMap{
   public static void main(String[] args)
   throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      int id = 1;
      System.out.println("Going to read record.....");
      Employee e = (Employee)smc.queryForObject ("Employee.useResultMap", id);

      System.out.println("ID:  " + e.getId());
      System.out.println("First Name:  " + e.getFirstName());
      System.out.println("Last Name:  " + e.getLastName());
      System.out.println("Salary:  " + e.getSalary());
      System.out.println("Record read Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above-mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisResultMap.java as shown above and compile it.</li>
<li>Execute IbatisResultMap binary to run the program.</li>
</ul>
<p>You would get the following result which is a read operation on the EMPLOYEE table.</p>
<pre class="result notranslate">
Going to read record.....
ID:  1
First Name:  Zara
Last Name:  Ali
Salary:  5000
Record read Successfully
</pre>
<h1>iBATIS - Stored Procedures</h1>
<p>You can call a stored procedure using iBATIS configuration. First of all, let us understand how to create a stored procedure in MySQL.</p>
<p>We have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Let us create the following stored procedure in MySQL database &minus;</p>
<pre class="result notranslate">
DELIMITER $$

   DROP PROCEDURE IF EXISTS `testdb`.`getEmp` $$
   CREATE PROCEDURE `testdb`.`getEmp` 
   (IN empid INT)
	
   BEGIN
      SELECT * FROM EMPLOYEE
      WHERE ID = empid;
   END $$

DELIMITER;
</pre>
<p>Let’s consider the EMPLOYEE table has two records as follows &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
|  2 | Roma       | Ali       |   3000 |
+----+------------+-----------+--------+
2 row in set (0.00 sec)
</pre>
<h2>Employee POJO Class</h2>
<p>To use stored procedure, you do not need to modify the Employee.java file. Let us keep it as it was in the last chapter.</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }

   /* Here are the required method definitions */
   public int getId() {
      return id;
   }
	
   public void setId(int id) {
      this.id = id;
   }
	
   public String getFirstName() {
      return first_name;
   }
	
   public void setFirstName(String fname) {
      this.first_name = fname;
   }
	
   public String getLastName() {
      return last_name;
   }
	
   public void setlastName(String lname) {
      this.last_name = lname;
   }
	
   public int getSalary() {
      return salary;
   }
	
   public void setSalary(int salary) {
      this.salary = salary;
   }

} /* End of Employee */
</pre>
<h2>Employee.xml File</h2>
<p>Here we would modify Employee.xml to introduce &lt;procedure&gt;&lt;/procedure&gt; and &lt;parameterMap&gt;&lt;/parameterMap&gt; tags. Here &lt;procedure&gt;&lt;/procedure&gt; tag would have an id which we would use in our application to call the stored procedure.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;

   &lt;!-- Perform Insert Operation --&gt;
   &lt;insert id="insert" parameterClass="Employee"&gt;
      INSERT INTO EMPLOYEE(first_name, last_name, salary)
      values (#first_name#, #last_name#, #salary#)

      &lt;selectKey resultClass="int" keyProperty="id"&gt;
         select last_insert_id() as id
      &lt;/selectKey&gt;
   &lt;/insert&gt;

   &lt;!-- Perform Read Operation --&gt;
   &lt;select id="getAll" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
   &lt;/select&gt;

   &lt;!-- Perform Update Operation --&gt;
   &lt;update id="update" parameterClass="Employee"&gt;
      UPDATE EMPLOYEE
      SET    first_name = #first_name#
      WHERE  id = #id#
   &lt;/update&gt;

   &lt;!-- Perform Delete Operation --&gt;
   &lt;delete id="delete" parameterClass="int"&gt;
      DELETE FROM EMPLOYEE
      WHERE  id = #id#
   &lt;/delete&gt;

   &lt;!-- To call stored procedure. --&gt;
   &lt;procedure id="getEmpInfo" resultClass="Employee" parameterMap="getEmpInfoCall"&gt;
      { call getEmp( #acctID# ) } 
   &lt;/procedure&gt;
	
   &lt;parameterMap id="getEmpInfoCall" class="map"&gt;
      &lt;parameter property="acctID" jdbcType="INT" javaType="java.lang.Integer" mode="IN"/&gt;
   &lt;/parameterMap&gt;

&lt;/sqlMap&gt;
</pre>
<h2>IbatisSP.java File</h2>
<p>This file has application level logic to read the names of the employees from the Employee table using ResultMap &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisSP{
   public static void main(String[] args)
   throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      int id = 1;
      System.out.println("Going to read employee name.....");
      Employee e = (Employee) smc.queryForObject ("Employee.getEmpInfo", id);

      System.out.println("First Name:  " + e.getFirstName());
      System.out.println("Record name Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above-mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisSP.java as shown above and compile it.</li>
<li>Execute IbatisSP binary to run the program.</li>
</ul>
<p>You would get the following result:</p>
<pre class="result notranslate">
Going to read record.....
ID:  1
First Name:  Zara
Last Name:  Ali
Salary:  5000
Record read Successfully
</pre>
<h1>iBATIS - Dynamic SQL</h1>
<p>Dynamic SQL is a very powerful feature of iBATIS. Sometimes you have to change the WHERE clause criterion based on your parameter object's state. In such situations, iBATIS provides a set of dynamic SQL tags that can be used within mapped statements to enhance the reusability and flexibility of the SQL.</p>
<p>All the logic is put in .XML file using some additional tags. Following is an example where the SELECT statement would work in two ways &minus;</p>
<p>If you pass an ID, then it would return all the records corresponding to that ID.</p>
<p>Otherwise, it would return all the records where employee ID is set to NULL.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;

   &lt;select id="findByID" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
		
      &lt;dynamic prepend="WHERE "&gt;
         &lt;isNull property="id"&gt;
            id IS NULL
         &lt;/isNull&gt;
			
         &lt;isNotNull property="id"&gt;
            id = #id#
         &lt;/isNotNull&gt;
      &lt;/dynamic&gt;
		
   &lt;/select&gt;
&lt;/sqlMap&gt;
</pre>
<p>You can check a condition using the &lt;isNotEmpty&gt; tag as follows. Here a condition would be added only when a passed property is not empty.</p>
<pre class="prettyprint notranslate">
..................
&lt;select id="findByID" resultClass="Employee"&gt;
   SELECT * FROM EMPLOYEE
	
   &lt;dynamic prepend="WHERE "&gt;
      &lt;isNotEmpty property="id"&gt;
         id = #id#
      &lt;/isNotEmpty&gt;
   &lt;/dynamic&gt;
	
&lt;/select&gt;
..................
</pre>
<p>If you want a query where we can select an id and/or the first name of an Employee, your SELECT statement would be as follows &minus;</p>
<pre class="prettyprint notranslate">
..................
&lt;select id="findByID" resultClass="Employee"&gt;
   SELECT * FROM EMPLOYEE
	
   &lt;dynamic prepend="WHERE "&gt;
      &lt;isNotEmpty prepend="AND" property="id"&gt;
         id = #id#
      &lt;/isNotEmpty&gt;
		
      &lt;isNotEmpty prepend="OR" property="first_name"&gt;
         first_name = #first_name#
      &lt;/isNotEmpty&gt;
   &lt;/dynamic&gt;
&lt;/select&gt;
..................
</pre>
<h2>Dynamic SQL Example</h2>
<p>The following example shows how you can write a SELECT statement with dynamic SQL. Consider, we have the following EMPLOYEE table in MySQL &minus;</p>
<pre class="result notranslate">
CREATE TABLE EMPLOYEE (
   id INT NOT NULL auto_increment,
   first_name VARCHAR(20) default NULL,
   last_name  VARCHAR(20) default NULL,
   salary     INT  default NULL,
   PRIMARY KEY (id)
);
</pre>
<p>Let’s assume this table has only one record as follows &minus;</p>
<pre class="result notranslate">
mysql&gt; select * from EMPLOYEE;
+----+------------+-----------+--------+
| id | first_name | last_name | salary |
+----+------------+-----------+--------+
|  1 | Zara       | Ali       |   5000 |
+----+------------+-----------+--------+
1 row in set (0.00 sec)
</pre>
<h2>Employee POJO Class</h2>
<p>To perform read operation, let us have an Employee class in Employee.java as follows &minus;</p>
<pre class="prettyprint notranslate">
public class Employee {
   private int id;
   private String first_name; 
   private String last_name;   
   private int salary;  

   /* Define constructors for the Employee class. */
   public Employee() {}
  
   public Employee(String fname, String lname, int salary) {
      this.first_name = fname;
      this.last_name = lname;
      this.salary = salary;
   }

   /* Here are the method definitions */
   public int getId() {
      return id;
   }
	
   public String getFirstName() {
      return first_name;
   }
	
   public String getLastName() {
      return last_name;
   }
	
   public int getSalary() {
      return salary;
   }
	
} /* End of Employee */
</pre>
<h2>Employee.xml File</h2>
<p>To define SQL mapping statement using iBATIS, we would add the following modified &lt;select&gt; tag in Employee.xml and inside this tag definition, we would define an "id" which will be used in IbatisReadDy.java for executing Dynamic SQL SELECT query on database.</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd"&gt;

&lt;sqlMap namespace="Employee"&gt;
   &lt;select id="findByID" resultClass="Employee"&gt;
      SELECT * FROM EMPLOYEE
	
      &lt;dynamic prepend="WHERE "&gt;
         &lt;isNotNull property="id"&gt;
            id = #id#
         &lt;/isNotNull&gt;
      &lt;/dynamic&gt;
		
   &lt;/select&gt;
&lt;/sqlMap&gt;
</pre>
<p>The above SELECT statement would work in two ways &minus;</p>
<ul class="list">
<li><p>If you pass an ID, then it returns records corresponding to that ID Otherwise, it returns all the records.</p></li>
</ul>
<h2>IbatisReadDy.java File</h2>
<p>This file has application level logic to read conditional records from the Employee table &minus;</p>
<pre class="prettyprint notranslate">
import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisReadDy{
   public static void main(String[] args)
   throws IOException,SQLException{
      Reader rd=Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc=SqlMapClientBuilder.buildSqlMapClient(rd);

      /* This would read all records from the Employee table.*/
      System.out.println("Going to read records.....");
      Employee rec = new Employee();
      rec.setId(1);

      List &lt;Employee&gt; ems = (List&lt;Employee&gt;)  
         smc.queryForList("Employee.findByID", rec);
      Employee em = null;
		
      for (Employee e : ems) {
         System.out.print("  " + e.getId());
         System.out.print("  " + e.getFirstName());
         System.out.print("  " + e.getLastName());
         System.out.print("  " + e.getSalary());
         em = e; 
         System.out.println("");
      }    
      System.out.println("Records Read Successfully ");
   }
} 
</pre>
<h2>Compilation and Run</h2>
<p>Here are the steps to compile and run the above mentioned software. Make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisReadDy.java as shown above and compile it.</li>
<li>Execute IbatisReadDy binary to run the program.</li>
</ul>
<p>You would get the following result, and a record would be read from the EMPLOYEE table.</p>
<pre class="result notranslate">
Going to read records.....
   1  Zara  Ali  5000
Record Reads Successfully
</pre>
<p>Try the above example by passing <b>null</b> as <i>smc.queryForList("Employee.findByID", null)</i>.</p>
<h2>iBATIS OGNL Expressions</h2>
<p>iBATIS provides powerful OGNL based expressions to eliminate most of the other elements.</p>
<ul class="list">
<li>if Statement</li>
<li>choose, when, otherwise Statement</li>
<li>where Statement</li>
<li>foreach Statement</li>
</ul>
<h3>The if Statement</h3>
<p>The most common thing to do in dynamic SQL is conditionally include a part of a where clause. For example &minus;</p>
<pre class="prettyprint notranslate">
&lt;select id="findActiveBlogWithTitleLike" parameterType="Blog" resultType="Blog"&gt;
   SELECT * FROM BLOG
   WHERE state = 'ACTIVE.
	
   &lt;if test="title != null"&gt;
      AND title like #{title}
   &lt;/if&gt;
	
&lt;/select&gt;
</pre>
<p>This statement provides an optional text search type of functionality. If you pass in no title, then all active Blogs are returned. But if you do pass in a title, it will look for a title with the given <b>like</b> condition.</p>
<p>You can include multiple <b>if</b> conditions as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;select id="findActiveBlogWithTitleLike" parameterType="Blog" resultType="Blog"&gt;
   SELECT * FROM BLOG
   WHERE state = 'ACTIVE.
	
   &lt;if test="title != null"&gt;
      AND title like #{title}
   &lt;/if&gt;
	
   &lt;if test="author != null"&gt;
      AND author like #{author}
   &lt;/if&gt;
	
&lt;/select&gt;
</pre>
<h3>The choose, when, and otherwise Statements</h3>
<p>iBATIS offers a <b>choose</b> element which is similar to Java's switch statement. It helps choose only one case among many options.</p>
<p>The following example would search only by title if one is provided, then only by author if one is provided. If neither is provided, it returns only featured blogs &minus;</p>
<pre class="prettyprint notranslate">
&lt;select id="findActiveBlogWithTitleLike" parameterType="Blog" resultType="Blog"&gt;
   SELECT * FROM BLOG
   WHERE state = 'ACTIVE.
	
   &lt;choose&gt;
      &lt;when test="title != null"&gt;
         AND title like #{title}
      &lt;/when&gt;
		
      &lt;when test="author != null and author.name != null"&gt;
         AND author like #{author}
      &lt;/when&gt;
		
      &lt;otherwise&gt;
         AND featured = 1
      &lt;/otherwise&gt;
   &lt;/choose&gt;
	
&lt;/select&gt;
</pre>
<h3>The where Statement</h3>
<p>Take a look at our previous examples to see what happens if none of the conditions are met. You would end up with an SQL that looks like this &minus;</p>
<pre class="result notranslate">
SELECT * FROM BLOG
WHERE
</pre>
<p>This would fail, but iBATIS has a simple solution with one simple change, everything works fine &minus;</p>
<pre class="prettyprint notranslate">
&lt;select id="findActiveBlogLike" parameterType="Blog" resultType="Blog"&gt;
   SELECT * FROM BLOG
	
   &lt;where&gt;
      &lt;if test="state != null"&gt;
         state = #{state}
      &lt;/if&gt;
		
      &lt;if test="title != null"&gt;
         AND title like #{title}
      &lt;/if&gt;
		
      &lt;if test="author != null&gt;
         AND author like #{author}
      &lt;/if&gt;
   &lt;/where&gt;
	
&lt;/select&gt;
</pre>
<p>The <b>where</b> element inserts a <i>WHERE</i> only when the containing tags return any content. Furthermore, if that content begins with <i>AND</i> or <i>OR,</i> it knows to strip it off.</p>
<h3>The foreach Statement</h3>
<p>The foreach element allows you to specify a collection and declare item and index variables that can be used inside the body of the element.</p>
<p>It also allows you to specify opening and closing strings, and add a separator to place in between iterations. You can build an <b>IN</b> condition as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;select id="selectPostIn" resultType="domain.blog.Post"&gt;
   SELECT *
   FROM POST P
   WHERE ID in
	
   &lt;foreach item="item" index="index" collection="list"
      open="(" separator="," close=")"&gt;
      #{item}
   &lt;/foreach&gt;
	
&lt;/select&gt;
</pre>
<h1>iBATIS - Debugging</h1>
<p>It is easy to debug your program while working with iBATIS. iBATIS has built-in logging support and it works with the following logging libraries and searches for them in this order.</p>
<ul class="list">
<li>Jakarta Commons Logging (JCL).</li>
<li>Log4J</li>
<li>JDK logging</li>
</ul>
<p>You can use any of the above listed libraries along with iBATIS.</p>
<h2>Debugging with Log4J</h2>
<p>Assuming you are going to use Log4J for logging. Before proceeding, you need to cross-check the following points &minus;</p>
<ul class="list">
<li>The Log4J JAR file (log4j-{version}.jar) should be in the CLASSPATH.</li>
<li>You have log4j.properties available in the CLASSPATH.</li>
</ul>
<p>Following is the log4j.properties file. Note that some of the lines are commented out. You can uncomment them if you need additional debugging information.</p>
<pre class="result notranslate">
# Global logging configuration
log4j.rootLogger = ERROR, stdout

log4j.logger.com.ibatis = DEBUG

# shows SQL of prepared statements
#log4j.logger.java.sql.Connection = DEBUG

# shows parameters inserted into prepared statements
#log4j.logger.java.sql.PreparedStatement = DEBUG

# shows query results
#log4j.logger.java.sql.ResultSet = DEBUG

#log4j.logger.java.sql.Statement = DEBUG

# Console output
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %5p [%t] &minus; %m%n
</pre>
<p>You can find the complete documentation for Log4J from Apaches site &minus; <a rel="nofollow" href="http://logging.apache.org/log4j/" target="_blank">Log4J Documentation</a>.</p>
<h2>iBATIS Debugging Example</h2>
<p>The following Java class is a very simple example that initializes and then uses the Log4J logging library for Java applications. We would use the above-mentioned property file which lies in CLASSPATH.</p>
<pre class="prettyprint notranslate">
import org.apache.log4j.Logger;

import com.ibatis.common.resources.Resources;
import com.ibatis.sqlmap.client.SqlMapClient;
import com.ibatis.sqlmap.client.SqlMapClientBuilder;

import java.io.*;
import java.sql.SQLException;
import java.util.*;

public class IbatisUpdate{
   static Logger log = Logger.getLogger(IbatisUpdate.class.getName());

   public static void main(String[] args)
   throws IOException,SQLException{
      Reader rd = Resources.getResourceAsReader("SqlMapConfig.xml");
      SqlMapClient smc = SqlMapClientBuilder.buildSqlMapClient(rd);

      /* This would insert one record in Employee table. */
      log.info("Going to update record.....");
      Employee rec = new Employee();
      rec.setId(1);
      rec.setFirstName( "Roma");
      smc.update("Employee.update", rec );
      log.info("Record updated Successfully ");

      log.debug("Going to read records.....");
      List &lt;Employee&gt; ems = (List&lt;Employee&gt;) 
         smc.queryForList("Employee.getAll", null);
      Employee em = null;
		
      for (Employee e : ems) {
         System.out.print("  " + e.getId());
         System.out.print("  " + e.getFirstName());
         System.out.print("  " + e.getLastName());
         System.out.print("  " + e.getSalary());
         em = e;
         System.out.println("");
      }
      log.debug("Records Read Successfully ");
   }
}
</pre>
<h2>Compilation and Run</h2>
<p>First of all, make sure you have set PATH and CLASSPATH appropriately before proceeding for compilation and execution.</p>
<ul class="list">
<li>Create Employee.xml as shown above.</li>
<li>Create Employee.java as shown above and compile it.</li>
<li>Create IbatisUpdate.java as shown above and compile it.</li>
<li>Create log4j.properties as shown above.</li>
<li>Execute IbatisUpdate binary to run the program.</li>
</ul>
<p>You would get the following result. A record would be updated in the EMPLOYEE table and later, the same record would be read from the EMPLOYEE table.</p>
<pre class="result notranslate">
DEBUG [main] - Created connection 28405330.
DEBUG [main] - Returned connection 28405330 to pool.
DEBUG [main] - Checked out connection 28405330 from pool.
DEBUG [main] - Returned connection 28405330 to pool.
   1  Roma  Ali  5000
   2  Zara  Ali  5000
   3  Zara  Ali  5000
</pre>
<h2>Debug Methods</h2>
<p>In the above example, we used only <b>info()</b> method, however you can use any of the following methods as per your requirements &minus;</p>
<pre class="prettyprint notranslate">
public void trace(Object message);
public void debug(Object message);
public void info(Object message);
public void warn(Object message);
public void error(Object message);
public void fatal(Object message);
</pre>
<h1>iBATIS - Hibernate</h1>
<p>There are major differences between iBATIS and Hibernate. Both the solutions work well, given their specific domain. iBATIS is suggested in case &minus;</p>
<ul class="list">
<li>You want to create your own SQL's and you are willing to maintain them.</li>
<li>Your environment is driven by relational data model.</li>
<li>You have to work on existing and complex schemas.</li>
</ul>
<p>Use Hibernate if the environment is driven by object model and needs to generate SQL automatically.</p>
<h2>Difference between iBATIS and Hibernate</h2>
<p>Both Hibernate and iBATIS are open source Object Relational Mapping (ORM) tools available in the industry. Use of each of these tools depends on the context you are using them.</p>
<p>The following table highlights the differences between iBATIS and Hibernate &minus;</p>
<table class="table table-bordered">
<tr>
<th>iBATIS</th>
<th>Hibernate</th>
</tr>
<tr>
<td>iBATIS is simpler. It comes in a much smaller package size.</td>
<td>Hibernate generates SQL for you which means you don’t have to spend time on generating SQL.</td>
</tr>
<tr>
<td>iBATIS is flexible. It offers faster development time.</td>
<td>Hibernate is highly scalable. It provides a much more advanced cache.</td>
</tr>
<tr>
<td>iBATIS uses SQL which could be database dependent.</td>
<td>Hibernate uses HQL which is relatively independent of databases. It is easier to change db in Hibernate.</td>
</tr>
<tr>
<td>iBatis maps the ResultSet from JDBC API to your POJO Objets, so you don’t have to care about table structures.</td>
<td>Hibernate maps your Java POJO objects to the Database tables.</td>
</tr>
<tr>
<td>It is quite easy to use stored procedure in iBATIS.</td>
<td>Use of stored procedures is a little difficult in Hibernate.</td>
</tr>
</table>
<p>Both Hibernate and iBATIS receive good support from the SPRING framework, so it should not be a problem to choose one of them.</p>
<h1>iBATOR - Introduction</h1>
<p>iBATOR is a code generator for iBATIS. iBATOR introspects one or more database tables and generates iBATIS artifacts that can be used to access the tables.</p>
<p>Later you can write your custom SQL code or stored procedure to meet your requirements. iBATOR generates the following artifacts &minus;</p>
<ul class="list">
<li>SqlMap XML Files</li>
<li>Java Classes to match the primary key and fields of the table(s)</li>
<li>DAO Classes that use the above objects (optional)</li>
</ul>
<p>iBATOR can run as a standalone JAR file, or as an Ant task, or as an Eclipse plugin. This tutorial describes the simplest way of generating iBATIS configuration files from command line.</p>
<h2>Download iBATOR</h2>
<p>Download the standalone JAR if you are using an IDE other than Eclipse. The standalone JAR includes an Ant task to run iBATOR, or you can run iBATOR from the command line of Java code.</p>
<ul class="list">
<li><p>You can download zip file from <a rel="nofollow" href="http://people.apache.org/builds/ibatis/ibator/ibator-1.2.1-681.zip" target="_blank">Download iBATOR</a>.</p></li>
<li><p>You can check online documentation &minus; <a rel="nofollow" href="http://ibatis.apache.org/docs/tools/ibator/" target="_blank">iBATOR Documentation</a>.</p></li>
</ul>
<h2>Generating Configuration File</h2>
<p>To run iBATOR, follow these steps &minus;</p>
<h3>Step 1</h3>
<p>Create and fill a configuration file ibatorConfig.xml appropriately. At a minimum, you must specify &minus;</p>
<ul class="list">
<li><p>A <b>&lt;jdbcConnection&gt;</b> element to specify how to connect to the target database.</p></li>
<li><p>A <b>&lt;javaModelGenerator&gt;</b> element to specify the target package and the target project for the generated Java model objects.</p></li>
<li><p>A <b>&lt;sqlMapGenerator&gt;</b> element to specify the target package and the target project for the generated SQL map files.</p></li>
<li><p>A <b>&lt;daoGenerator&gt;</b> element to specify the target package and the target project for the generated DAO interfaces and classes (you may omit the &lt;daoGenerator&gt; element if you don't wish to generate DAOs).</p></li>
<li><p>At least one database <b>&lt;table&gt;</b> element</p></li>
</ul>
<p><b>NOTE &minus;</b> See the <a href="/ibatis/ibator_xmlconfig.htm"> XML Configuration File Reference</a> page for an example of an iBATOR configuration file.</p>
<h3>Step 2</h3>
<p>Save the file in a convenient location, for example, at: \temp\ibatorConfig.xml.</p>
<h3>Step 3</h3>
<p>Now run iBATOR from the command line as follows &minus;</p>
<pre class="result notranslate">
java -jar abator.jar -configfile \temp\abatorConfig.xml -overwrite
</pre>
<p>It will tell iBATOR to run using your configuration file. It will also tell iBATOR to overwrite any existing Java files with the same name. If you want to save any existing Java files, then omit the <b>&minus;overwrite</b> parameter.</p>
<p>If there is a conflict, iBATOR saves the newly generated file with a unique name.</p>
<p>After running iBATOR, you need to create or modify the standard iBATIS configuration files to make use of your newly generated code. This is explained in the next section.</p>
<h2>Tasks After Running iBATOR</h2>
<p>After you run iBATOR, you need to create or modify other iBATIS configuration artifacts. The main tasks are as follows &minus;</p>
<ul class="list">
<li>Create or modify the SqlMapConfig.xml file.</li>
<li>Create or modify the dao.xml file (only if you are using the iBATIS DAO Framework).</li>
</ul>
<p>Each task is described in detail below &minus;</p>
<h3>Updating the SqlMapConfig.xml File</h3>
<p>iBATIS uses an XML file, commonly named SqlMapConfig.xml, to specify information for a database connection, a transaction management scheme, and SQL map XML files that are used in an iBATIS session.</p>
<p>iBATOR cannot create this file for you because it knows nothing about your execution environment. However, some of the items in this file relate directly to iBATOR generated items.</p>
<p>iBATOR specific needs in the configuration file are as follows &minus;</p>
<ul class="list">
<li>Statement namespaces must be enabled.</li>
<li>iBATOR generated SQL Map XML files must be listed.</li>
</ul>
<p>For example, suppose iBATOR has generated an SQL Map XML file called MyTable_SqlMap.xml, and that the file has been placed in the test.xml package of your project. The SqlMapConfig.xml file should have these entries &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE sqlMapConfig PUBLIC "-//ibatis.apache.org//DTD SQL Map Config 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-config-2.dtd"&gt;

&lt;sqlMapConfig&gt;
   &lt;!-- Statement namespaces are required for Abator --&gt;
   &lt;settings useStatementNamespaces="true" /&gt;

   &lt;!-- Setup the transaction manager and data source that are
   appropriate for your environment
   --&gt;
	
   &lt;transactionManager type="..."&gt;
      &lt;dataSource type="..."&gt;
      &lt;/dataSource&gt;
   &lt;/transactionManager&gt;

   &lt;!-- SQL Map XML files should be listed here --&gt;
   &lt;sqlMap resource="test/xml/MyTable_SqlMap.xml" /&gt;

&lt;/sqlMapConfig&gt;
</pre>
<p>If there is more than one SQL Map XML file (as is quite common), then the files can be listed in any order with repeated &lt;sqlMap&gt; elements after the &lt;transactionManager&gt; element.</p>
<h2>Updating the dao.xml File</h2>
<p>The iBATIS DAO framework is configured by an xml file commonly called dao.xml.</p>
<p>The iBATIS DAO framework uses this file to control the database connection information for DAOs, and also to list the DAO implementation classes and DAO interfaces.</p>
<p>In this file, you should specify the path to your SqlMapConfig.xml file, and all the iBATOR generated DAO interfaces and implementation classes.</p>
<p>For example, suppose iBATOR has generated a DAO interface called MyTableDAO and an implementation class called MyTableDAOImpl, and that the files have been placed in the test.dao package of your project.</p>
<p>The dao.xml file should have these entries &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE daoConfig PUBLIC "-//ibatis.apache.org//DTD DAO Configuration 2.0//EN" "http://ibatis.apache.org/dtd/dao-2.dtd"&gt;

&lt;daoConfig&gt;

   &lt;context&gt;
	
      &lt;transactionManager type="SQLMAP"&gt;
         &lt;property name="SqlMapConfigResource" value="test/SqlMapConfig.xml"/&gt;
      &lt;/transactionManager&gt;

      &lt;!-- DAO interfaces and implementations should be listed here --&gt;
      &lt;dao interface="test.dao.MyTableDAO" implementation="test.dao.MyTableDAOImpl" /&gt;
   &lt;/context&gt;
	
&lt;/daoConfig&gt;
</pre>
<p><b>NOTE &minus;</b> This step is required only if you generated DAOs for the iBATIS DAO framework.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/ibatis/ibator_introduction.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ibatis/ibatis_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
