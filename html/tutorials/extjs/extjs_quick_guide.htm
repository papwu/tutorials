<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Ext.js - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Ext.js - Quick Guide - Ext JS is a popular JavaScript framework which provides rich UI for building web applications with cross-browser functionality. Ext JS is basically used for cre"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/extjs/extjs_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#325da6;
}
a.demo {
    background:#325da6;
}
li.heading {
    background:#325da6;
}
.course-box{background:#325da6}
.home-intro-sub p{color:#325da6}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/extjs/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/extjs/images/ext-js-mini-logo.jpg" alt="Ext.js Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Ext.js Tutorial</li>
<li><a href="/extjs/index.htm">Ext.js - Home</a></li>
<li><a href="/extjs/extjs_overview.htm">Ext.js - Overview</a></li>
<li><a href="/extjs/extjs_environment_setup.htm">Ext.js - Environment Setup</a></li>
<li><a href="/extjs/extjs_naming_convention.htm">Ext.js - Naming Convention</a></li>
<li><a href="/extjs/extjs_architecture.htm">Ext.js - Architecture</a></li>
<li><a href="/extjs/extjs_first_program.htm">Ext.js - First Program</a></li>
<li><a href="/extjs/extjs_class_system.htm">Ext.js - Class System</a></li>
<li><a href="/extjs/extjs_containers.htm">Ext.js - Containers</a></li>
<li><a href="/extjs/extjs_layouts.htm">Ext.js - Layouts</a></li>
<li><a href="/extjs/extjs_components.htm">Ext.js - Components</a></li>
<li><a href="/extjs/extjs_drag_drop.htm">Ext.js - Drag &amp; Drop</a></li>
<li><a href="/extjs/extjs_themes.htm">Ext.js - Themes</a></li>
<li><a href="/extjs/extjs_events.htm">Ext.js - Custom Events and Listeners</a></li>
<li><a href="/extjs/extjs_data.htm">Ext.js - Data</a></li>
<li><a href="/extjs/extjs_fonts.htm">Ext.js - Fonts</a></li>
<li><a href="/extjs/extjs_styling.htm">Ext.js - Style</a></li>
<li><a href="/extjs/extjs_drawing.htm">Ext.js - Drawing</a></li>
<li><a href="/extjs/extjs_localization.htm">Ext.js - Localization</a></li>
<li><a href="/extjs/extjs_accessibility.htm">Ext.js - Accessibility</a></li>
<li><a href="/extjs/extjs_debugging_code.htm">Ext.js - Debugging Code</a></li>
<li><a href="/extjs/extjs_methods.htm">Ext.js - Methods</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Ext.js Useful Resources</li>
<li><a href="/extjs/extjs_Q&A.htm">Ext.js - Questions and Answers</a></li>
<li><a href="/extjs/extjs_quick_guide.htm">Ext.js - Quick Guide</a></li>
<li><a href="/extjs/extjs_useful_resources.htm">Ext.js - Useful Resources</a></li>
<li><a href="/extjs/extjs_discussion.htm">Ext.js - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Ext.js - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/extjs/extjs_Q&A.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/extjs/extjs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Ext.js - Overview</h1>
<p>Ext JS is a popular JavaScript framework which provides rich UI for building web applications with cross-browser functionality. Ext JS is basically used for creating desktop applications. It supports all the modern browsers such as IE6+, FF, Chrome, Safari 6+, Opera 12+, etc. Whereas another product of Sencha, Sencha Touch is used for mobile applications.</p>
<p>Ext JS is based on MVC/MVVM architecture. The latest version of Ext JS 6 is a single platform, which can be used for both desktop and mobile application without having different code for different platform.</p>
<h2>History</h2>
<h3>Ext JS 1.1</h3>
<p>The first version of Ext JS was developed by Jack Slocum in 2006. It was a set of utility classes, which is an extension of YUI. He named the library as YUI-ext.</p>
<h3>Ext JS 2.0</h3>
<p>Ext JS version 2.0 was released in 2007. This version had a new API documentation for desktop application with limited features. This version doesn’t have backward compatibility with previous version of Ext JS.</p>
<h3>Ext JS 3.0</h3>
<p>Ext JS version 3.0 was released in 2009. This version added new features as chart and list view but at the cost of speed. It had backward compatibility with version 2.0.</p>
<h3>Ext JS 4.0</h3>
<p>After the release of Ext JS 3, the developers of Ext JS had the major challenge of ramping up the speed. Ext JS version 4.0 was released in 2011. It had the complete revised structure, which was followed by MVC architecture and a speedy application.</p>
<h3>Ext JS 5.0</h3>
<p>Ext JS version 5.0 was released in 2014. The major change in this release was to change the MVC architecture to MVVM architecture. It includes the ability to build desktop apps on touch-enabled devices, two-way data binding, responsive layouts, and many more features.</p>
<h3>Ext JS 6.0</h3>
<p>Ext JS 6 merges the Ext JS (for desktop application) and Sencha Touch (for mobile application) framework.</p>
<h2>Features</h2>
<p>Following are the highlighted features of Ext JS.</p>
<ul class="list">
<li><p>Customizable UI widgets with collection of rich UI such as grids, pivot grids, forms, charts, trees.</p></li>
<li><p>Code compatibility of new versions with the older one.</p></li>
<li><p>A flexible layout manager helps to organize the display of data and content across multiple browsers, devices, and screen sizes.</p></li>
<li><p>Advance data package decouples the UI widgets from the data layer. The data package allows client-side collection of data using highly functional models that enable features such as sorting and filtering.</p></li>
<li><p>It is protocol agnostic, and can access data from any back-end source.</p></li>
<li><p>Customizable Themes Ext JS widgets are available in multiple out-of-the-box themes that are consistent across platforms.</p></li>
</ul>
<h2>Benefits</h2>
<p>Sencha Ext JS is the leading standard for business-grade web application development. Ext JS provides the tools necessary to build robust applications for desktop and tablets.</p>
<ul class="list">
<li><p>Streamlines cross-platform development across desktops, tablets, and smartphones - for both modern and legacy browsers.</p></li>
<li><p>Increases the productivity of development teams by integrating into enterprise development environments via IDE plugins.</p></li>
<li><p>Reduces the cost of web application development.</p></li>
<li><p>Empowers the teams to create apps with a compelling user experience.</p></li>
<li><p>Offers a set of widgets to easily make a powerful UI.</p></li>
<li><p>Follows MVC architecture, hence the code is highly readable.</p></li>
</ul>
<h2>Limitations</h2>
<ul class="list">
<li><p>The size of the library is large, around 500 KB, which makes initial loading time more and makes application slow.</p></li>
<li><p>HTML is full of tags that makes it complex and difficult to debug.</p></li>
<li><p>According to general public license policy, it is free for open source applications but paid for commercial applications.</p></li>
<li><p>Sometimes for loading even simple things require few lines of coding, which is simpler in plain html or JQuery.</p></li>
<li><p>Need quite experienced developer for developing Ext JS applications.</p></li>
</ul>
<h2>Tools</h2>
<p>Following are the tools provided by Sencha used for Ext JS application development mainly at the production level.</p>
<h3>Sencha CMD</h3>
<p>Sencha CMD is a tool which provides the features of Ext JS code minification, scaffolding, and production build generation.</p>
<h3>Sencha IDE Plugins</h3>
<p>Sencha IDE plugins integrates Sencha frameworks into IntelliJ, WebStorm IDEs, which helps in improving the developer’s productivity by providing features such as code completion, code inspection, code navigation, code generation, code refactoring, template creation, spell-checking, etc.</p>
<h3>Sencha Inspector</h3>
<p>Sencha Inspector is a debugging tool which helps the debugger to debug any issue while development.</p>
<h1>Ext.js - Environment Setup</h1>
<h2>Local Environment Setup</h2>
<p>This section guides you on how to download and set up Ext JS on your machine. Please follow the steps to set up the environment.</p>
<h3>Downloading Library Files</h3>
<p>Download the trial version of Ext JS library files from Sencha <a href="https://www.sencha.com/products/download" rel="nofollow" target="_blank">https://www.sencha.com</a>. You will get the trial version from the site on your registered mail id, which will be a zipped folder named ext-6.0.1-trial.</p>
<p>Unzip the folder and you will find various JavaScript and CSS files, which you will include in our application. We will mostly include the following files &minus;</p>
<p><b>JavaScript Files</b> &minus; JS file which you can find under the folder \ext-6.0.1-trial\ext6.0.1\build are &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">File &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>ext.js</b></p>
<p>This is the core file which contains all the functionalities to run the application.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>ext-all.js</b></p>
<p>This file contains all the code minified with no comments in the file.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>ext-all-debug.js</b></p>
<p>This is the unminified version of ext-all.js for debugging purpose.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>ext-all-dev.js</b></p>
<p>This file is also unminified and is used for development purpose as it contains all the comments and console logs to check any errors/issue.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>ext-all.js</b></p>
<p>This file is used for production purpose mostly as it is much smaller than any other.</p>
</td>
</tr>
</table>
<p>You can add these files to your projects JS folder or you can provide a direct path where the file resides in your system.</p>
<p><b>CSS Files</b> &minus; There are number of theme-based files, which you can find under folder \ext6.0.1-trial\ext-6.0.1\build\classic\theme-classic\resources\theme-classic-all.css</p>
<ul class="list">
<li><p>If you are going to use desktop application, then you can use classic themes under folder \ext-6.0.1-trial\ext-6.0.1\build\classic</p></li>
<li><p>If we are going to use mobile application, then you can use modern themes which can be found under folder \ext-6.0.1-trial\ext-6.0.1\build\modern</p></li>
</ul>
<p>The following library files will be added in an Ext JS application.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;link rel = "stylesheet" type = "text/css" 
         href = "..\ext-6.0.1-trial\ext-6.0.1\build\classic\theme-classic\resources\theme-classic-all.css" /&gt;
      &lt;script type = "text/javascript" 
         src = "..\ext-6.0.1-trial\ext-6.0.1\build\ext-all.js" &gt; &lt;/script&gt;
      &lt;script type = "text/javascript" src = "app.js" &gt; &lt;/script&gt;
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<p>You will keep ExtJS application code in app.js file.</p>
<h2>CDN Setup</h2>
<p>CDN is content delivery network with which you do not need to download the Ext JS library files, instead you can directly add CDN link for ExtJS to your program as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;link rel = "stylesheet" type = "text/css" 
         href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-crisp/resources/theme-crisp-all.css" / &gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt; &lt;/script&gt;
      &lt;script type = "text/javascript" src = "app.js" &gt; &lt;/script&gt; 
   &lt;/head&gt;
&lt;/html&gt;
</pre>
<h2>Popular Editors</h2>
<p>As it is a JavaScript framework, which is used for developing web applications, in our project we will have HTML, JS files. To write our Ext JS programs, we will need a text editor. There are even multiple IDEs available in the market. But for now, we can consider one of the following &minus;</p>
<ul class="list">
<li><p><b>Notepad</b> &minus; On Windows machine, you can use any simple text editor such as Notepad (Recommended for this tutorial), Notepad++, sublime.</p></li>
<li><p><b>Eclipse</b> &minus; It is an IDE developed by the eclipse open-source community and can be downloaded from <a href="https://www.eclipse.org/" rel="nofollow" target="_blank">https://www.eclipse.org/</a>.</p></li>
</ul>
<h2>Browser</h2>
<p>Ext JS supports cross-browser compatibility, it supports all major browsers such as &minus;</p>
<ul class="list">
<li>IE 6 and above</li>
<li>Firefox 3.6 and above</li>
<li>Chrome10 and above</li>
<li>Safari 4 and above</li>
<li>Opera 11 and above</li>
</ul>
<p>You can use any browser for running Ext JS application.</p>
<h1>Ext.js - Naming Convention</h1>
<p>Naming convention is a set of rule to be followed for identifiers. It makes the code more readable and understandable to other programmers as well.</p>
<p>Naming convention in Ext JS follows the standard JavaScript convention, which is not mandatory but a good practice to follow. It should follow the camel case syntax for naming the class, method, variable and properties.</p>
<p>If the name is combined with two words, the second word will start with an uppercase letter always. For example, doLayout(), StudentForm, firstName, etc.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:20%">Name</th>
<th style="text-align:center;">Convention</th>
</tr>
<tr>
<td class="ts">Class Name</td>
<td>It should start with an uppercase letter, followed by camel case. For example, StudentClass</td>
</tr>
<tr>
<td class="ts">Method Name</td>
<td>It should start with a lowercase letter, followed by camel case. For example, doLayout()</td>
</tr>
<tr>
<td class="ts">Variable Name</td>
<td>It should start with a lowercase letter, followed by camel case. For example, firstName</td>
</tr>
<tr>
<td class="ts">Constant Name</td>
<td>It should be in uppercase only. For example, COUNT, MAX_VALUE</td>
</tr>
<tr>
<td class="ts">Property Name</td>
<td>It should start with a lowercase letter, followed by camel case. For example, enableColumnResize = true</td>
</tr>
</table>
<h1>Ext.js - Architecture</h1>
<p>Ext JS follows MVC/ MVVM architecture.</p>
<p><b>MVC</b> – Model View Controller architecture (version 4)</p>
<p><b>MVVM</b> – Model View Viewmodel (version 5)</p>
<p>This architecture is not mandatory for the program, however, it is a best practice to follow this structure to make your code highly maintainable and organized.</p>
<h2>Project Structure with Ext JS App</h2>
<pre  class="result notranslate">
----------src
----------resources
-------------------CSS files
-------------------Images
----------JavaScript
--------------------App Folder
-------------------------------Controller
------------------------------------Contoller.js
-------------------------------Model
------------------------------------Model.js
-------------------------------Store
------------------------------------Store.js
-------------------------------View
------------------------------------View.js
-------------------------------Utils
------------------------------------Utils.js
--------------------------------app.js
-----------HTML files
</pre>
<p>Ext JS app folder will reside in JavaScript folder of your project.</p>
<p>The App will contain controller, view, model, store, and utility files with app.js.</p>
<p><b>app.js</b> &minus; The main file from where the flow of program will start, which should be included in the main HTML file using &lt;script&gt; tag. App calls the controller of application for the rest of the functionality.</p>
<p><b>Controller.js</b> &minus; It is the controller file of Ext JS MVC architecture. This contains all the control of the application, the events listeners, and most of the functionality of the code. It has the path defined for all the other files used in that application such as store, view, model, require, mixins.</p>
<p><b>View.js</b> &minus; It contains the interface part of the application, which shows up to the user. Ext JS uses various UI rich views, which can be extended and customized here according to the requirement.</p>
<p><b>Store.js</b> &minus; It contains the data locally cached which is to be rendered on the view with the help of model objects. Store fetches the data using proxies which has the path defined for services to fetch the backend data.</p>
<p><b>Model.js</b> &minus; It contains the objects which binds the store data to view. It has the mapping of backend data objects to the view dataIndex. The data is fetched with the help of store.</p>
<p><b>Utils.js</b> &minus; It is not included in MVC architecture but a best practice to use to make the code clean, less complex, and more readable. We can write methods in this file and call them in the controller or the view renderer wherever required. It is helpful for code reusability purpose as well.</p>
<p>In MVVM architecture, the controller is replaced by ViewModel.</p>
<p><b>ViewModel</b> &minus; It basically mediates the changes between view and model. It binds the data from the model to the view. At the same time, it does not have any direct interaction with the view. It has only knowledge of the model.</p>
<h2>How It Works</h2>
<p>For example, if we are using one model object at two-three places in UI. If we change the value at one place of UI, we can see without even saving that change. The value of model changes and so gets reflected in all the places in the UI, wherever the model is used.</p>
<p>It makes the developers’ effort much lesser and easier as no extra coding is required for binding data.</p>
<h1>Ext.js - First Program</h1>
<p>This chapter lists down the steps to write the first Hello World program in Ext JS.</p>
<h2>Step 1</h2>
<p>Create an index.htm page in the editor of our choice. Include the required library files in the head section of html page as follows.</p>
<h3>index.htm</h3>
<div class="demo-view">
<a href="http://tpcg.io/oaJQdh" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.Panel', {
               renderTo: 'helloWorldPanel',
               height: 200,
               width: 600,
               title: 'Hello world',
               html: 'First Ext JS Hello World Program'
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "helloWorldPanel" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Explanation</h3>
<ul class="list">
<li><p>Ext.onReady() method will be called once the Ext JS is ready to render the Ext JS elements.</p></li>
<li><p>Ext.create() method is used to create an object in Ext JS. Here we are creating an object of simple panel class Ext.Panel.</p></li>
<li><p>Ext.Panel is the predefined class in Ext JS for creating a panel.</p></li>
<li><p>Every Ext JS class has different properties to perform some basic functionalities.</p></li>
</ul>
<p>Ext.Panel class has various properties such as &minus;</p>
<ul class="list">
<li><p><b>renderTo</b> is the element where this panel has to render. 'helloWorldPanel' is the div id in Index.html file.</p></li>
<li><p><b>Height</b> and <b>width</b> properties are for customizing the size of the panel.</p></li>
<li><p><b>Title</b> property is to provide the title to the panel.</p></li>
<li><p><b>Html</b> property is the html content to be shown in the panel.</p></li>
</ul>
<h2>Step 2</h2>
<p>Open the index.htm file in a standard browser and you will get the following output on the browser.</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/first_program.htm" height="210px" width="660px"></iframe>
<h1>Ext.js - Class System</h1>
<p>Ext JS is a JavaScript framework having functionalities of object oriented programming. Ext is the namespace, which encapsulates all the classes in Ext JS.</p>
<h2>Defining a Class in Ext JS</h2>
<p>Ext provides more than 300 classes, which we can use for various functionalities.</p>
<p>Ext.define() is used for defining the classes in Ext JS.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
Ext.define(class name, class members/properties, callback function);
</pre>
<p>Class name is the name of the class according to app structure. For example,  appName.folderName.ClassName studentApp.view.StudentView.</p>
<p>Class properties/members defines the behavior of class.</p>
<p>Callback function is optional. It is called when the class has loaded properly.</p>
<h3>Example of Ext JS Class Definition</h3>
<pre class="prettyprint notranslate">
Ext.define(studentApp.view.StudentDeatilsGrid, {
   extend : 'Ext.grid.GridPanel',
   id : 'studentsDetailsGrid',
   store : 'StudentsDetailsGridStore',
   renderTo : 'studentsDetailsRenderDiv',
   layout : 'fit',
   
   columns : [{
      text : 'Student Name',
      dataIndex : 'studentName'
   },{
      text : 'ID',
      dataIndex : 'studentId'
   },{
      text : 'Department',
      dataIndex : 'department'
   }]
});
</pre>
<h2>Creating Objects</h2>
<p>As like other OOPS based languages, we can create objects in Ext JS as well.</p>
<p>Following are the different ways of creating objects in Ext JS.</p>
<h3>Using new keyword</h3>
<pre class="result notranslate">
var studentObject = new student();
studentObject.getStudentName();
</pre>
<h3>Using Ext.create()</h3>
<pre class="prettyprint notranslate">
Ext.create('Ext.Panel', {
   renderTo : 'helloWorldPanel',
   height : 100,
   width : 100,
   title : 'Hello world',
   html : 	'First Ext JS Hello World Program'		
});
</pre>
<h2>Inheritance in Ext JS</h2>
<p>Inheritance is the principle of using functionality defined in class A into class B.</p>
<p>In Ext JS, inheritance can be done using two methods &minus;</p>
<h3>Ext.extend</h3>
<pre class="prettyprint notranslate">
Ext.define(studentApp.view.StudentDetailsGrid, {
   extend : 'Ext.grid.GridPanel',
   ...
});
</pre>
<p>Here, our custom class StudentDetailsGrid is using the basic features of Ext JS class GridPanel.</p>
<h3>Using Mixins</h3>
<p>Mixins is a different way of using class A in class B without extend.</p>
<pre class="prettyprint notranslate">
mixins : {
   commons : 'DepartmentApp.utils.DepartmentUtils'
},
</pre>
<p>Mixins are added in the controller where we declare all the other classes such as store, view, etc. In this way, we can call DepartmentUtils class and use its functions in the controller or in this application.</p>
<h1>Ext.js - Containers</h1> 
<p>Container in Ext JS is the component where we can add other container or child components. These containers can have multiple layout to arrange the components in the containers. We can add or remove the components from the container and from its child elements. Ext.container.Container is the base class for all the containers in Ext JS.</p>
<img src="/extjs/images/containers.jpg" alt="Containers" />
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/extjs/components_inside_container.htm">Components inside Container</a>
<p>This example shows how to define the components inside a container</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/extjs/container_inside_container.htm">Container inside container</a>
<p>This example shows how to define a container inside a container with other components</p></td>
</tr>
</table>
<p>There are various type of containers Ext.panel.Panel, Ext.form.Panel, Ext.tab.Panel and Ext.container.Viewport are frequently used containers in Ext JS. Below are the example which shows how to use these containers.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Type of Containers &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/extjs/container_panel.htm">Ext.panel.Panel</a>
<p>This example shows a Ext.panel.Panel container</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/extjs/container_form.htm">Ext.form.Panel</a>
<p>This example shows a Ext.form.Panel container</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<a href="/extjs/container_tab.htm">Ext.tab.Panel</a>
<p>This example shows a Ext.tab.Panel container</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<a href="/extjs/container_viewport.htm">Ext.container.Viewport</a>
<p>This example shows a Ext.container.Viewport container</p></td>
</tr>
</table>
<h1>Ext.js - Layouts</h1>
<p>Layout is the way the elements are arranged in a container. It can be horizontal, vertical, or any other. Ext JS has a different layout defined in its library but we can always write custom layouts as well.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Layout &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<a href="/extjs/layout_absolute.htm">Absolute</a>
<p>This layout allows to position the items using XY coordinates in the container.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<a href="/extjs/layout_accordion.htm">Accordion</a>
<p>This layout allows to place all the items in stack fashion (one on top of the other) inside the container.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<a href="/extjs/layout_anchor.htm">Anchor</a>
<p>This layout gives the privilege to the user to specify the size of each element with respect to the container size.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<a href="/extjs/layout_border.htm">Border</a>
<p>In this layout various panels are nested and separated by borders.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<a href="/extjs/layout_auto.htm">Auto</a>
<p>This is the default layout that decides the layout of the elements based on the number of elements.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<a href="/extjs/layout_card_tabpanel.htm">Card(TabPanel)</a>
<p>This layout arranges different components in tab fashion. Tabs will be displayed on top of the container. Every time only one tab is visible and each tab is considered as a different component.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<a href="/extjs/layout_card_wizard.htm">Card(Wizard)</a>
<p>In this layout, every time the elements come for full container space. There is a bottom tool bar in the wizard for navigation.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<a href="/extjs/layout_column.htm">Column</a>
<p>This layout is to show multiple columns in the container. We can define a fixed or percentage width to the columns. The percentage width will be calculated based on the full size of the container.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<a href="/extjs/layout_fit.htm">Fit</a>
<p>In this layout, the container is filled with a single panel. When there is no specific requirement related to the layout, then this layout is used.</p>
</td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<a href="/extjs/layout_table.htm">Table</a>
<p>As the name implies, this layout arranges the components in a container in the HTML table format.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<a href="/extjs/layout_vbox.htm">vBox</a>
<p>This layout allows the element to be distributed in a vertical manner. This is one of the most used layout.</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<a href="/extjs/layout_hbox.htm">hBox</a>
<p>This layout allows the element to be distributed in a horizontal manner.</p></td>
</tr>
</table>
<h1>Ext.js - Components</h1>
<p>ExtJS UI is made up of one or many widgets called Components. Ext Js has various UI components defined that can be customised as per your requirements.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/extjs/components_grid.htm">Grid</a>
<p>Grid component can be used to show the data in a tabular format.</p></td>
</tr>
<tr> 
<td class="ts">2</td>
<td><a href="/extjs/components_form.htm">Form</a>
<p>Form widget is to get the data from the user.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/extjs/components_msg_box.htm">Message Box</a>
<p>Message box is basically used to show data in the form of alert box.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/extjs/components_chart.htm">Chart</a>
<p>Charts are used to represent data in pictorial format.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/extjs/components_tooltip.htm">Tool tip</a>
<p>Tool tip is used to show some basic information when any event occurs.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/extjs/components_window.htm">Window</a>
<p>This UI widget is to create a window, which should pop up when any event occurs.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/extjs/components_html_editor.htm">HTML editor</a>
<p>HTML Editor is one of the very useful UI component, which is used for styling the data that the user enters in terms of fonts, color, size, etc.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/extjs/components_progressbar.htm">Progress bar</a>
<p>Shows the progress of the backend work.</p></td>
</tr>
</table>
<h1>Ext.js - Drag and Drop</h1>
<p>Drag and drop feature is one of the powerful features added to make the developer’s task easy. A drag operation, essentially, is a click gesture on some UI element, while the mouse button is held down and the mouse is moved. A drop operation occurs when the mouse button is released after a drag operation.</p>
<h2>Syntax</h2>
<p>Adding drag and drop class to the draggable targets.</p>
<pre class="result notranslate">
var dd = Ext.create('Ext.dd.DD', el, 'imagesDDGroup', {
   isTarget: false
});
</pre>
<p>Adding drag and drop target class to drappable target.</p>
<pre class="result notranslate">
var mainTarget = Ext.create('Ext.dd.DDTarget', 'mainRoom', 'imagesDDGroup', {
   ignoreSelf: false
});
</pre>
<h2>Example</h2>
<p>Following is a simple example.</p>
<div class="demo-view">
<a href="http://tpcg.io/XuqsGb" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.application ({
            launch: function() {
               var images = Ext.get('images').select('img');
               Ext.each(images.elements, function(el) {
                  var dd = Ext.create('Ext.dd.DD', el, 'imagesDDGroup', {
                     isTarget: false
                  });
               });
            }
         }); 
         var mainTarget = Ext.create('Ext.dd.DDTarget', 'mainRoom', 'imagesDDGroup', {
            ignoreSelf: false
         });
      &lt;/script&gt;
      
      &lt;style&gt;
         #content {
            width:600px;
            height:400px;
            padding:10px;
            border:1px solid #000;
         }
         #images {
            float:left;
            width:40%;
            height:100%;
            border:1px solid Black;
            background-color:rgba(222, 222, 222, 1.0);
         }
         #mainRoom {
            float:left;
            width:55%;
            height:100%;
            margin-left:15px;
            border:1px solid Black;
            background-color:rgba(222, 222, 222, 1.0);
         }
         .image {   
            width:64px;
            height:64px;
            margin:10px;
            cursor:pointer;
            border:1px solid Black;
            display: inline-block;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "content"&gt;   
         &lt;div id = "images"&gt; 
            &lt;img src = "/extjs/images/1.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/2.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/3.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/4.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/5.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/6.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/7.jpg" class = "image" /&gt;
            &lt;img src = "/extjs/images/8.jpg" class = "image" /&gt;
         &lt;/div&gt;
         &lt;div id = "mainRoom"&gt;&lt;/div&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre> 
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/drag_drop.htm" height="450px" width="660px"></iframe>
<p>With the help of drag and drop in Extjs, we can move data from grid to grid and grid to form. Following are the examples of moving data between grids and forms.</p>
<p><a href="/extjs/extjs_grid_to_grid_dd.htm">Drag and drop - Grid to Grid</a></p>
<p><a href="/extjs/extjs_grid_form_dd.htm">drag and drop - Grid to Form</a></p>
<h1>Ext.js - Themes</h1>
<p>Ext.js provides a number of themes to be used in your applications. You can add a different theme in place of a classic theme and see the difference in the output. This is done simply by replacing the theme CSS file as explained ahead.</p>
<h2>Neptune Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css
</pre>
<p>Add the following CSS to use the Neptune theme.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css
</pre>
<p>To see the effect, try the following program.</p>
<div class="demo-view">
<a href="http://tpcg.io/rbmOVv" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.Panel', {
               renderTo: 'helloWorldPanel',
               height: 200,
               width: 600,
               title: 'Hello world',
               html: 'First Ext JS Hello World Program'
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "helloWorldPanel" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/neptune_theme.htm" height="202px" width="660px"></iframe>
<h2>Crisp Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css
</pre>
<p>Add the following CSS to use the Neptune theme.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-crisp/resources/theme-crisp-all.css
</pre>
<p>To see the effect, try the following program.</p>
<div class="demo-view">
<a href="http://tpcg.io/QvTB0A" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-crisp/resources/theme-crisp-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.Panel', {
               renderTo: 'helloWorldPanel',
               height: 200,
               width: 600,
               title: 'Hello world',
               html: 'First Ext JS Hello World Program'
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "helloWorldPanel" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/crisp_theme.htm" height="202px" width="660px"></iframe>
<h2>Triton Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css
</pre>
<p>Add the following CSS to use the Triton theme.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-triton/resources/theme-triton-all.css
</pre>
<p>To see the effect, try the following program.</p>
<div class="demo-view">
<a href="http://tpcg.io/yU0QuQ" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-triton/resources/theme-triton-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.Panel', {
               renderTo: 'helloWorldPanel',
               height: 200,
               width: 600,
               title: 'Hello world',
               html: 'First Ext JS Hello World Program'
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "helloWorldPanel" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/triton_theme.htm" height="202px" width="660px"></iframe>
<h2>Gray Theme</h2>
<p>Consider your very first Hello World application. Remove the following CSS from the application.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css
</pre>
<p>Add the following CSS to use the Gray theme.</p>
<pre class="result notranslate">
https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-gray/resources/theme-gray-all.css
</pre>
<p>To see the effect, try the following program.</p>
<div class="demo-view">
<a href="http://tpcg.io/ssHXeU" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-gray/resources/theme-gray-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.Panel', {
               renderTo: 'helloWorldPanel',
               height: 200,
               width: 600,
               title: 'Hello world',
               html: 'First Ext JS Hello World Program'
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "helloWorldPanel" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/gray_theme.htm" height="202px" width="660px"></iframe>
<h1>Ext.js - Custom Events and listeners</h1>
<p>Events are something which get fired when something happens to the class. For example, when a button is getting clicked or before/after the element is rendered.</p>
<h2>Methods of Writing Events</h2>
<ul class="list">
<li>Built-in events using listeners</li>
<li>Attaching events later</li>
<li>Custom events</li>
</ul>
<h3>Built-in Events Using Listeners</h3>
<p>Ext JS provides listener property for writing events and custom events in Ext JS files.</p>
<p><b>Writing listener in Ext JS</b></p>
<p>We will add the listener in the previous program itself by adding a listen property to the panel.</p>
<div class="demo-view">
<a href="http://tpcg.io/GpEvr0" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('helloWorldPanel'),
               text: 'My Button',
               
               listeners: {
                  click: function() {
                     Ext.MessageBox.alert('Alert box', 'Button is clicked');	
                  }
               }
            });
         });
      &lt;/script&gt; 
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;p&gt; Please click the button to see event listener &lt;/p&gt;
      &lt;div id = 'helloWorldPanel' /&gt;   &lt;!--  panel will be rendered here-- &gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/events_in_listener.htm" height="150px" width="660px"></iframe>
<p>This way we can also write multiple events in listeners property.</p>
<p><b>Multiple Events in the Same Listener</b></p>
<div class="demo-view">
<a href="http://tpcg.io/4DkKDz" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.get('tag2').hide()
            Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('helloWorldPanel'),
               text: 'My Button',
               
               listeners: {
                  click: function() {
                     this.hide();
                  },
                  hide: function() {
                     Ext.get('tag1').hide();
                     Ext.get('tag2').show();
                  }
               }
            });
         });           
      &lt;/script&gt; 
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "tag1"&gt;Please click the button to see event listener.&lt;/div&gt;
      &lt;div id = "tag2"&gt;The button was clicked and now it is hidden.&lt;/div&gt;
      &lt;div id = 'helloWorldPanel' /&gt;   &lt;!--  panel will be rendered here-- &gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/events_with_multiple_listener.htm" height="150px" width="660px"></iframe>
<h3>Attaching an Event Later</h3>
<p>In the previous method of writing events, we have written events in listeners at the time of creating elements. The other way is to attach events.</p>
<div class="demo-view">
<a href="http://tpcg.io/6EjozL" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            var button = Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('helloWorldPanel'),
               text: 'My Button'
            });

            // This way we can attach event to the button after the button is created.
            button.on('click', function() {
               Ext.MessageBox.alert('Alert box', 'Button is clicked');
            });
         });
      &lt;/script&gt; 
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;p&gt; Please click the button to see event listener &lt;/p&gt;
      &lt;div id = 'helloWorldPanel' /&gt;   &lt;!--  panel will be rendered here-- &gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/attaching_events_later.htm" height="150px" width="660px"></iframe>
<h3>Custom Events</h3>
<p>We can write custom events in Ext JS and fire the events with fireEvent method. Following example explains how to write custom events.</p>
<div class="demo-view">
<a href="http://tpcg.io/HEeUSB" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-neptune/resources/theme-neptune-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            var button = Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('helloWorldPanel'),
               text: 'My Button',
               
               listeners: {
                  myEvent: function(button) {
                     Ext.MessageBox.alert('Alert box', 'My custom event is called');
                  }
               }
            });
            Ext.defer(function() {
               button.fireEvent('myEvent');
            }, 5000);
         }); 
      &lt;/script&gt; 
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;p&gt; The event will be called after 5 seconds when the page is loaded. &lt;/p&gt;
      &lt;div id = 'helloWorldPanel' /&gt;   &lt;!--  panel will be rendered here-- &gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Once the page is loaded and the document is ready, the UI page with a button will appear and as we are firing an event after 5 secs, the document is ready. The alert box will appear after 5 seconds.</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/attaching_events_later_using_fireEvent.htm" height="150px" width="660px"></iframe>
<p>Here, we have written the custom event 'myEvent' and we are firing events as button.fireEvent(eventName);</p>
<h1>Ext.js - Data</h1>
<p>Data package is used for loading and saving all the data in the application.</p>
<p>Data package has numerous number of classes but the most important classes are &minus;</p>
<ul class="list">
<li>Model</li>
<li>Store</li>
<li>Proxy</li>
</ul>
<h2>Model</h2>
<p>The base class for model is <b>Ext.data.Model</b>. It represents an entity in an application. It binds the store data to view. It has mapping of backend data objects to the view dataIndex. The data is fetched with the help of store.</p>
<h3>Creating a Model</h3>
<p>For creating a model, we need to extend Ext.data.Model class and we need to define the fields, their name, and mapping.</p>
<pre class="prettyprint notranslate">
Ext.define('StudentDataModel', {
   extend: 'Ext.data.Model',
   fields: [
      {name: 'name', mapping : 'name'},
      {name: 'age', mapping : 'age'},
      {name: 'marks', mapping : 'marks'}
   ]
});
</pre>
<p>Here, the name should be the same as the dataIndex, which we declare in the view and the mapping should match the data, either static or dynamic from the database, which is to be fetched using store.</p>
<h2>Store</h2>
<p>The base class for store is <b>Ext.data.Store</b>. It contains the data locally cached, which is to be rendered on view with the help of model objects. Store fetches the data using proxies, which has the path defined for services to fetch the backend data.</p>
<p>Store data can be fetched in two ways - static or dynamic.</p>
<h3>Static store</h3>
<p>For static store, we will have all the data present in the store as shown in the following code.</p>
<pre class="prettyprint notranslate">
Ext.create('Ext.data.Store', {
   model: 'StudentDataModel',
   data: [
      { name : "Asha", age : "16", marks : "90" },
      { name : "Vinit", age : "18", marks : "95" },
      { name : "Anand", age : "20", marks : "68" },
      { name : "Niharika", age : "21", marks : "86" },
      { name : "Manali", age : "22", marks : "57" }
   ];
});
</pre>
<h3>Dynamic Store</h3>
<p>Dynamic data can be fetched using proxy. We can have proxy which can fetch data from Ajax, Rest, and Json.</p>
<h2>Proxy</h2>
<p>The base class for proxy is Ext.data.proxy.Proxy. Proxy is used by Models and Stores to handle the loading and saving of Model data.</p>
<p>There are two types of proxies</p>
<ul class="list">
<li>Client Proxy</li>
<li>Server Proxy</li>
</ul>
<h3>Client Proxy</h3>
<p>Client proxies include Memory and Local Storage using HTML5 local storage.</p>
<h3>Server Proxy</h3>
<p>Server proxies handle data from the remote server using Ajax, Json data, and Rest service.</p>
<p><b>Defining proxies in the server</b></p>
<pre class="prettyprint notranslate">
Ext.create('Ext.data.Store', {
   model: 'StudentDataModel',
   proxy : {
      type : 'rest',
      actionMethods : {
         read : 'POST'  // Get or Post type based on requirement
      },
      url : 'restUrlPathOrJsonFilePath', // here we have to include the rest URL path 
      // which fetches data from database or Json file path where the data is stored
      reader: {
         type : 'json',  // the type of data which is fetched is of JSON type
         root : 'data'
      },
   }
});
</pre>
<h1>Ext.js - Fonts</h1>
<p>Ext.js provides the facility to use different font packages. Font packages are used to add different classes for icons available in the package.</p>
<ul class="list">
<li>Font-Awesome</li>
<li>Font-Pictos</li>
</ul>
<h2>Font-Awesome</h2>
<p>ExtJS new theme, Triton, has an inbuilt font family font-awesome included in the framework itself, hence we do not need any explicit requirement for the font-awesome stylesheet.</p>
<p>Following is an example of using Font-Awesome classes in the Triton theme.</p>
<p><a href="/extjs/extjs_font_awesome_triton_theme.htm">Font-Awesome with Triton theme</a></p>
<p>When we are using any other theme apart from Triton, we need or require to add a stylesheet for font-awesome explicitly.</p>
<p>Following is an example of using Font-Awesome classes without the Triton theme.</p>
<p><a href="/extjs/extjs_font_awesome_normal_theme.htm">Font-Awesome with normal theme(Any theme other then Triton theme)</a></p>
<h2>Font-Pictos</h2>
<p>Font-pictos is not included in the framework for ExtJS, hence we have to require the same. Only licenced users of Sencha will have the benefit to use font-pictos.</p>
<h3>Steps to Add Font-Pictos</h3>
<p><b>Step 1</b> &minus; Require font-pictos class using the following command.</p>
<pre class="result notranslate">
"requires": ["font-pictos"]
</pre>
<p><b>Step 2</b> &minus; Now add pictos classes as &minus;</p>
<pre class="result notranslate">
iconCls: 'pictos pictos-home'
</pre>
<h1>Ext.js - Style</h1>
<p>Application Styling refers to user adjustment of the look and feel of the components. These adjustments may include: color, color gradients, font, margins/padding, etc. Ext JS 6 has a new way of styling the application.</p>
<p>It uses SCSS for styling. SCSS is a more dynamic way of writing the CSS code. We can write the variables in our stylesheet with the help of this. However, a browser cannot understand SCSS. It can only understand CSS, hence all SCSS files should get compiled into CSS to a production-ready code.</p>
<p>Thus, SCSS file is called preprocessor files. In Ext.js, compilation is done through Sencha CMD tool. Sencha CMD compiles it manually only once using the following command.</p>
<pre class="result notranslate">
sencha app build [development]
</pre>
<p>Global_CSS is the main CSS file, which has all SCSS variables associated with it in ExtJS that can be used in our application for customizing our theme by providing different value based on our need.</p>
<p>Following are some of the CSS variables available in the Global_CSS in Ext.js.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Variable &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>$base-color</b></p>
<p>$base-color: color (e.g. $base-color : #808080)</p>
<p>This base color is to be used throughout the theme.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>$base-gradient</b></p>
<p>$base-gradient: string (e.g. $base-gradient : 'matte')</p>
<p>This base gradient is to be used throughout the theme.</p>
</td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>$body-background-color</b></p>
<p>$body-background-color: color (e.g. $body-background-color : #808080)</p>
<p>Background color to apply to the body element. If set to transparent or 'none', no background-color style will be set on the body element.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>$color</b></p>
<p>$color : color (e.g. $color : #808080)</p>
<p>This default text color is to be used throughout the theme.</p>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>$font-family</b></p>
<p>$font-family : string (e.g. $font-family : arial)</p>
<p>This default font-family is to be used throughout the theme.</p>
</td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>$font-size</b></p>
<p>$font-size : number (e.g. $font-size : 9px )</p>
<p>This default font-size is to be used throughout the theme.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>$font-weight</b></p>
<p>$font-weight : string/number (e.g. $font-weight : normal )</p>
<p>This default font-weight is to be used throughout the theme.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>$font-weight-bold</b></p>
<p>$font-weight-bold : string/number (e.g. $font-weight-bold : bold )</p>
<p>This default font-weight for bold font is to be used throughout the theme.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>$include-chrome</b></p>
<p>$include-chrome : boolean (e.g. $include-chrome : true)</p>
<p>True to include Chrome specific rules.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>$include-ff</b></p>
<p>$include-ff : boolean (e.g. $include-ff : true)</p>
<p>True to include Firefox specific rules.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>$include-ie</b></p>
<p>$include-ie : boolean (e.g. $include-ie : true)</p>
<p>True to include Internet Explorer specific rules for IE9 and lower.</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><p><b>$include-opera</b></p>
<p>$include-opera : boolean (e.g. $include-opera : true)</p>
<p>True to include Opera specific rules.</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><p><b>$include-safari</b></p>
<p>$include-safari : boolean (e.g. $include-safari : true)</p>
<p>True to include Opera specific rules.</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td><p><b>$include-webkit</b></p>
<p>$include-webkit : boolean (e.g. $include-webkit : true)</p>
<p>True to include Webkit specific rules.</p></td>
</tr>
</table>
<h1>Ext.js - Drawing</h1>
<p>Drawing package in ExtJS enables you to draw general purpose graphics. This can be used for graphics that work on all browsers and mobile devices.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Drawing</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/extjs/drawing_circle.htm">Circle</a>
<p>This graphics is used to create a circulare shape.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/extjs/drawing_rectangle.htm">Rectangle</a>
<p>This graphics is used to create a rectanglar shape.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/extjs/drawing_arc.htm">Arc</a>
<p>This graphics is used to create an arc shape.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/extjs/drawing_ellipse.htm">Ellipse</a>
<p>This graphics is used to create an ellipse shape.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/extjs/drawing_ellipticalarc.htm">EllipticalArc</a>
<p>This graphics is used to create an elliptical arc shape.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/extjs/drawing_image.htm">Image</a>
<p>This graphics is used to add an image to your application.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/extjs/drawing_path.htm">Path</a>
<p>This graphics is used to create a free path.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/extjs/drawing_text.htm">Text</a>
<p>This graphics is used to add any text to your application.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><a href="/extjs/drawing_translate_after_render.htm">Translate after render</a>
<p>This property is used to move the starting point in your container, after the graphic is rendered. It can be used with any graphics.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><a href="/extjs/drawing_rectrotate.htm">Rotation</a>
<p>This property is used to add a rotation to the drawing added. It can be used with any graphics.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><a href="/extjs/drawing_square.htm">Square</a>
<p>This graphic is used to create a square.</p></td>
</tr>
</table>
<h1>Ext.js - Localization</h1>
<p>It is always best to communicate with the users in the language they understand and prefer. Extjs localization package supports over 40 languages such as German, French, Korean, Chinese, etc. It is very simple to implement the locale in ExtJs. You’ll find all of the bundled locale files in the override folder of the ext-locale package. Locale files just overrides that tells Ext JS to replace the default English values of certain components.</p>
<p>The following program is to show the month in different locale to see the effect. Try the following program.</p>
<div class="demo-view">
<a href="http://tpcg.io/Za0XDe" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-fr.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            var monthArray = Ext.Array.map(Ext.Date.monthNames, function (e) { return [e]; });
            var ds = Ext.create('Ext.data.Store', {
               fields: ['month'],
               remoteSort: true,
               pageSize: 6,
               
               proxy: {
                  type: 'memory',
                  enablePaging: true,
                  data: monthArray,
                  reader: {type: 'array'}
               }
            });
            Ext.create('Ext.grid.Panel', {
               renderTo: 'grid',
               id : 'gridId',
               width: 600,
               height: 200,
               title:'Month Browser',
               
               columns:[{
                  text: 'Month of the year',
                  dataIndex: 'month',
                  width: 300
               }],
               store: ds,
               bbar: Ext.create('Ext.toolbar.Paging', {
                  pageSize: 6,
                  store: ds,
                  displayInfo: true
               })
            }); 
            Ext.getCmp('gridId').getStore().load();
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "grid" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/localization_months.htm" height="202px" width="660px"></iframe>
<p>For using different locale other than English, we would need to add the locale specific file in our program. Here we are using https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/localefr.js for French. You can use different locale for different languages such as https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-ko.js for korean, etc.</p>
<p>The following program is to show the date picker in Korean locale to see the effect. Try the following program.</p>
<div class="demo-view">
<a href="http://tpcg.io/ZmahgK" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-classic/resources/theme-classic-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-ko.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function() {
            Ext.create('Ext.picker.Date', {
               renderTo: 'datePicker'
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "datePicker" /&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/localization_date_picker.htm" height="220px" width="660px"></iframe>
<p>Following table lists the few locales available in ExtJS and the main file locale URL to be changed.</p>
<table class="table table-bordered" style="font-size:0.81em">
<tr>
<th style="text-align:center;width:5%">Locale</th>
<th style="text-align:center;width:10%">Language</th>
<th style="text-align:center;">Locale URL</th>
</tr>
<tr>
<td class="ts">ko</td>
<td class="ts">Korean</td>
<td>https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-ko.js</td>
</tr>
<tr>
<td class="ts">fr</td>
<td class="ts">French</td>
<td>https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-fa.js </td>
</tr>
<tr>
<td class="ts">es</td>
<td class="ts">Spanish</td>
<td>https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-es.js </td>
</tr>
<tr>
<td class="ts">ja</td>
<td class="ts">Japanese</td>
<td>https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-ja.js</td>
</tr>
<tr>
<td class="ts">it</td>
<td class="ts">Italian</td>
<td>https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-it.js</td>
</tr>
<tr>
<td class="ts">ru</td>
<td class="ts">Russian</td>
<td>https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/locale-ru.js</td>
</tr>
<tr>
<td class="ts">zh_CN</td>
<td class="ts">Simplifies Chinese</td>
<td style="vertical-align:middle;">https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/locale/localezh_CN.js</td>
</tr>
</table>
<h1>Ext.js - Accessibility</h1>
<p>In general accessibility means availability, the content is accessible means the content is available.</p>
<p>In software terms, the application is accessible means the application is available for all. Here, all means the persons with disabilities, the visually impaired or those who use screen readers to use a computer or those who prefer to navigate using the keyboard instead of using a mouse. navigation with keyboard instead of using a mouse.</p>
<p>Applications which are accessible are called ARIA (Accessible Rich Internet Applications).</p>
<h2>Accessibility in Ext JS</h2>
<p>Ext JS is designed to keep this in mind that it should work with all keyboard navigations. It has built-in tab indexing and focus-ability, and it is always on by default so we do not need to add any property to enable this functionality.</p>
<p>This functionality allows all keyboard-enabled components to interact with the user when tabbed into. For example, we can use tab for moving on to the next component instead of a mouse. Same way, we can use shift+tab for moving backward and use enter on the keyboard to click, etc.</p>
<h3>Focus Styling and Tabs</h3>
<p>Focus is inbuilt in Extjs when using keystroke for tabbing.</p>
<p>Following example shows how to the style changes, when the focus changes with the tabs.</p>
<div class="demo-view">
<a href="http://tpcg.io/NAZeXn" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-crisp/resources/theme-crisp-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.onReady(function(){
            Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('button1'),
               text: 'Button1',
               
               listeners: {
                  click: function() {
                     Ext.MessageBox.alert('Alert box', 'Button 1 is clicked');	
                  }
               }
            });
            Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('button2'),
               text: 'Button2',
               
               listeners: {
                  click: function() {
                     Ext.MessageBox.alert('Alert box', 'Button 2 is clicked');	
                  }
               }
            });
            Ext.create('Ext.Button', {
               renderTo: Ext.getElementById('button3'),
               text: 'Button3',
               
               listeners: {
                  click: function() {
                     Ext.MessageBox.alert('Alert box', 'Button 3 is clicked');	
                  }
               }
            });
         });     
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt; &lt;p&gt;Please click the button to see event listener:&lt;/p&gt;
      &lt;span id = "button3"/&gt;
      &lt;span id = "button2"/&gt;
      &lt;span id = "button1"/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>To see the effect, use tab for moving from the next button and shft+tab for focusing backward. Use enter and see how the focused button's related alert would pop up.</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/example_focus_style.htm" height="150px" width="660px"></iframe>
<h3>ARIA Theme</h3>
<p>ExtJS provides the theme aria for the visually impaired.</p>
<p>Following example shows the aria theme which is easily accessible for the visually impaired.</p>
<div class="demo-view">
<a href="http://tpcg.io/HFAgDt" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;link href = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/classic/theme-aria/resources/theme-aria-all.css" 
         rel = "stylesheet" /&gt;
      &lt;script type = "text/javascript" 
         src = "https://cdnjs.cloudflare.com/ajax/libs/extjs/6.0.0/ext-all.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         Ext.require([
            'Ext.grid.*',
            'Ext.data.*'
         ]);
         
         // Creation of data model
         Ext.define('StudentDataModel', {
            extend: 'Ext.data.Model',
            fields: [
               {name: 'name', mapping : 'name'},
               {name: 'age', mapping : 'age'},
               {name: 'marks', mapping : 'marks'}
            ]
         });

         Ext.onReady(function() {
            // Store data
            var myData = [
               { name : "Asha", age : "16", marks : "90" },
               { name : "Vinit", age : "18", marks : "95" },
               { name : "Anand", age : "20", marks : "68" },
               { name : "Niharika", age : "21", marks : "86" },
               { name : "Manali", age : "22", marks : "57" }
            ];
            
            // Creation of first grid store
            var firstGridStore = Ext.create('Ext.data.Store', {
               model: 'StudentDataModel',
               data: myData
            });
            
            // Creation of first grid
            var firstGrid = Ext.create('Ext.grid.Panel', {
               store            : firstGridStore,
               columns          :
               [{ 
                  header: "Student Name",
                  dataIndex: 'name',	
                  id : 'name',    
                  flex:  1,  			
                  sortable: true
               },{
                  header: "Age", 
                  dataIndex: 'age',
                  flex: .5, 
                  sortable: true
               },{
                  header: "Marks",
                  dataIndex: 'marks',
                  flex: .5, 
                  sortable: true
               }],
               stripeRows       : true,
               title            : 'First Grid',
               margins          : '0 2 0 0'
            });
     
            // Creation of a panel to show both the grids.
            var displayPanel = Ext.create('Ext.Panel', {
               width        : 600,
               height       : 200,
               
               layout       : {
                  type: 'hbox',
                  align: 'stretch',
                  padding: 5
               },
               renderTo     : 'panel',
               defaults     : { flex : 1 }, 
               items        : [ 
                  firstGrid
               ]
            });
         });
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "panel" &gt; &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will produce the following result. You can use tab and mouse up and down keys for moving the focus across the grid and the theme is basically for the visually impaired people.</p>
<iframe onload="resizeFrame(this)" class="result" src="/extjs/src/example_aria_theme.htm" height="210px" width="660px"></iframe>
<h1>Ext.js - Debugging Ext JS code</h1>
<p>Any JavaScript code can be debugged using <b>alert()</b> box or <b>console.log()</b> or with the debug pointer in a debugger.</p>
<h3>Alert Box</h3>
<p>Place an alert box in the code where you want to check the flow or any variable value. For example, alert('message to show' + variable);</p>
<h3>Development/Debugging Tool</h3>
<p>Debugger is the most important tool for any developer to check the issue and error in the code while developing.</p>
<p>Ext JS is a JavaScript framework, hence it can be easily debugged using developer tools provided by or specific to different browsers. All the major browsers have their developer tools available to test and debug JavaScript code.</p>
<p>Popular debuggers are IE development tool for IE, firebug for firefox, and chrome development tool for Chrome browser.</p>
<p>Chrome debugger comes with Chrome browser, however, firebug has to be installed specifically as it doesn’t come as a package with firefox.</p>
<p>Here is a link to install firebug for firefox browser <a target="_blank" rel="nofollow" href="http://getfirebug.com">http://getfirebug.com</a></p>
<p>The shortcut to open the development tool in Windows OS is F12 keyboard key.</p>
<h2>Debugging JS Code in Debugger</h2>
<p>There are two ways to debug JavaScript code.</p>
<ul class="list">
<li><p>The first way, is to place <b>console.log()</b> in the code and see the value of the log, which will be printed in the console of the development tool.</p></li>
<li><p>The second way is by using breakpoints in the development tool. Following is the process.</p>
<ul class="list">
<li><p>Open the file in all the available scripts under script tag.</p></li>
<li><p>Now place a breakpoint to the line you want to debug.</p></li>
<li><p>Run the application in the browser.</p></li>
<li><p>Now, whenever the code flow will reach this line, it will break the code and stay there until the user runs the code by keys F6 (go to the next line of the code), F7 (go inside the function) or F8 (go to the next breakpoint or run the code if there is no more breakpoints) based on the flow you want to debug.</p></li>
<li><p>You can select the variable or the function you want to see the value of.</p></li>
<li><p>You can use the console to check the value or to check some changes in the browser itself.</p></li>
</ul>
</li>
</ul>
<h1>Ext.js - Methods</h1>
<p>Following are a few inbuilt functions, which are heavily used in Ext JS.</p>
<h2>Ext.is Class</h2>
<p>This class checks the platform you are using, whether it is a phone or a desktop, a mac or Windows operating system. These are the following methods related to Ext.is class.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Ext.is.Platforms</b></p>
<p>This function returns the platform available for this version.</p>
<p>For example, when you run the following function, it returns something like this &minus;</p>
<pre class="result notranslate">
[Object { property = "platform", regex = RegExp, identity = "iPhone"}, 
Object { property = "platform", regex = RegExp, identity = "iPod"}, 
Object { property = "userAgent", regex = RegExp, identity = "iPad"}, 
Object { property = "userAgent", regex = RegExp, identity = "Blackberry"}, 
Object { property = "userAgent", regex = RegExp, identity = "Android"}, 
Object { property = "platform", regex = RegExp, identity = "Mac"}, 
Object { property = "platform", regex = RegExp, identity = "Windows"}, 
Object { property = "platform", regex = RegExp, identity = "Linux"}]
</pre>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Ext.is.Android</b></p>
<p>This function will return true, if you are using Android operating system, else it returns false.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Ext.is.Desktop</b></p>
<p>This function will return true, if you are using a desktop for the application, else it returns false.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Ext.is.Phone</b></p>
<p>This function will return true, if you are using a mobile, else it returns false.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Ext.is.iPhone</b></p>
<p>This function will return true if you are using iPhone, else it returns false.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>Ext.is.iPod</b></p>
<p>This function will return true, if you are using iPod, else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>Ext.is.iPad</b></p>
<p>This function will return true, if you are using an iPad, else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>Ext.is.Windows</b></p>
<p>This function will return true, if you are using Windows operating system, else it returns false.</p>
</td>
</tr>
<tr>
<td class="ts">9</td>
<td><p><b>Ext.is.Linux</b></p>
<p>This function will return true, if you are using Linux operating system, else it returns false.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><p><b>Ext.is.Blackberry</b></p>
<p>This function will return true, if you are using Blackberry, else it returns false.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><p><b>Ext.is.Mac</b></p>
<p>This function will return true, if you are using Mac operating system, else it returns false.</p></td>
</tr>
</table>
<h2>Ext.supports Class</h2>
<p>As the name indicates, this class provides information if the feature is supported by the current environment of the browser/device or not.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Ext.supports.History</b></p>
<p>It checks if the device supports HTML 5 history as window.history or not. If the device supports history, then it returns <b>true</b>, else false.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Ext.supports.GeoLocation</b></p>
<p>It checks if the device supports geolocation method or not. Internally it checks for navigator.geolocation method.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Ext.supports.Svg</b></p>
<p>It checks if the device supports HTML 5 feature scalable vector graphics (svg) method or not. Internally it checks for doc.createElementNS &amp;&amp; !!doc.createElementNS( "http:/" + "/www.w3.org/2000/svg", "svg").createSVGRect.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Ext.supports.Canvas</b></p>
<p>It checks if the device supports HTML 5 feature canvas to draw method or not. Internally it checks for doc.createElement('canvas').getContext and returns a value based on the output of this method.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Ext.supports.Range</b></p>
<p>It checks if the browser supports document.createRange method or not.</p></td>
</tr>
</table>
<h2>Ext.String Class</h2>
<p>Ext.String class has various methods to work with string data. The most used methods are encoding decoding, trim, toggle, urlAppend, etc.</p>
<p><b>Encoding Decoding function</b> &minus; These are the functions available in Ext.String class to encode and decode HTML values.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Ext.String.htmlEncode</b></p>
<p>This function is used to encode html value to make it parsable.</p>
<p><b>Example</b> &minus;</p>
<pre class="result notranslate">
Ext.String.htmlEncode("&lt; p &gt; Hello World &lt; /p &gt;"); 
Output - "&amp;lt; p &amp;gt; Hello World &amp;lt; /p &amp;gt;".
</pre></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Ext.String.htmlDecode</b></p>
<p>This function is used to decode the encoded html value.</p>
<p><b>Example</b> &minus;</p>
<pre class="result notranslate">
Ext.String.htmlDecode("&amp;lt; p &amp;gt; Hello World &amp;lt; /p &amp;gt;");
Output -  "&lt; p &gt; Hello World &lt; /p &gt"
</pre></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Ext.String.trim</b></p>
<p>This function is to trim the unwanted space in the string.</p>
<pre class="result notranslate">
Ext.String.trim('      hello      ');
Output – "hello"</pre>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Ext.String.urlAppend</b></p>
<p>This method is used to append a value in the URL string.</p>
<p><b>Example</b> &minus;</p>
<pre class="result notranslate">
Ext.String.urlAppend('https://www.google.com' , 'hello'); 
Output - "https://www.google.com?hello" 
Ext.String.urlAppend('https://www.google.com?index=1' , 'hello'); 
Output – "https://www.google.com?index=1&hello" 
</pre>
</td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Ext.String.toggle</b></p>
<p>This function is to toggle the values between two different values.</p>
<p><b>Example</b> &minus;</p>
<pre class="result notranslate">
var toggleString = 'ASC' 
toggleString = Ext.String.toggle(a, 'ASC', 'DESC');
Output – DESC as toggleString had value ASC. Now again, if we 
print the same we will get toggleString = “ASC” this time, as 
it had value 'DESC'. 
It is similar to ternary operator 
toggleString = ((toggleString =='ASC')? 'DESC' : 'ASC' );
</pre>
</td>
</tr>
</table>
<h2>Miscellaneous Methods</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Ext.userAgent()</b></p>
<p>This function gives information about browser userAgent. UserAgent is to identify the browser and the operating system to the web server.</p>
<p><b>Example</b> &minus; If you are working in Mozilla, it returns something like: "mozilla/5.0 (windows nt 6.1; wow64; rv:43.0) gecko/20100101 firefox/43.0"</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Version related function</b></p>
<p>This function returns the version of the browser currently in use, if the function is called related to IE. In Firefox browser, it returns 0. These functions are Ext.firefoxVersion, Ext.ieVersion, etc.</p>
<p><b>Example</b> &minus; If you are using Firefox browser and you call the method Ext.ieVersion for fetching the version of IE, then it returns 0. If you are using the same method in IE browser, then it will return the version you are using such as 8, 9, etc.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Ext.getVersion()</b></p>
<p>This function returns the current Ext JS version in use.</p>
<p><b>Example</b> &minus; If you call Ext.getVersion(), it returns an array of values such as version, short version, etc.</p>
<p>Ext.getVersion().version returns the current version of Ext JS used in the program, such as “4.2.2".</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Browser related functions</b></p>
<p>These functions return Boolean values based on the browser in use. These methods are Ext.isIE, Ext.isIE6, Ext.isFF06, and Ext.isChrome.</p>
<p><b>Example</b> &minus; If you are using Chrome browser, then the function Ext.isChrome will return true all, otherwise it will return false.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Ext.typeOf()</b></p>
<p>This function returns the datatype of the variable.</p>
<p><b>Example</b> &minus;</p>
<pre class="prettyprint notranslate">
var a = 5;   
var b  = 'hello'; 
Ext.typeOf(a); 
Output – Number 
Ext.typeOf(b);
Output - String
</pre></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>DataType related methods</b> &minus; These functions return boolean value based on the datatype of the variable</p>
<p><b>Example</b> &minus;</p>
<pre class="prettyprint notranslate">
var a = ['a', 'bc'];
var b = 'hello';
var c = 123;
var emptyVariable;
var definedVariable;
function extraFunction(){return true;}
</pre>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>Ext.isArray(a);</td>
<td>//returns true</td>
</tr>
<tr>
<td>Ext.isString(b);</td>
<td>//return true</td>
</tr>
<tr>
<td>Ext.isNumber(c);</td>
<td>//return true</td>
</tr>
<tr>
<td>Ext.isEmpty(emptyVariable);</td>
<td>//return true</td>
</tr>
<tr>
<td>Ext.isEmpty(b);</td>
<td>//return false</td>
</tr>
<tr>
<td>Ext.isDefined(definedVariable);</td>
<td>//return true</td>
</tr>
<tr>
<td>Ext.isfunction(extraFunction);</td>
<td>//return true</td>
</tr>
</table>
</td>
</tr>
</table>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/extjs/extjs_Q&A.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/extjs/extjs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
