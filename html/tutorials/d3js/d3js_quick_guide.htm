<!DOCTYPE html>
<html lang="en-US">
<head>
<title>D3.js - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="D3.js - Quick Guide - Data visualization is the presentation of data in a pictorial or graphical format. The primary goal of data visualization is to communicate information clearly "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/d3js/d3js_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#ff7842;
}
a.demo {
    background:#ff7842;
}
li.heading {
    background:#ff7842;
}
.course-box{background:#ff7842}
.home-intro-sub p{color:#ff7842}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/d3js/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/d3js/images/d3js-mini-logo.jpg" alt="D3.js Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">D3.js Tutorial</li>
<li><a href="/d3js/index.htm">D3.js - Home</a></li>
<li><a href="/d3js/d3js_introduction.htm">D3.js - Introduction</a></li>
<li><a href="/d3js/d3js_installation.htm">D3.js - Installation</a></li>
<li><a href="/d3js/d3js_concepts.htm">D3.js - Concepts</a></li>
<li><a href="/d3js/d3js_selections.htm">D3.js - Selections</a></li>
<li><a href="/d3js/d3js_data_join.htm">D3.js - Data Join</a></li>
<li><a href="/d3js/d3js_introduction_to_svg.htm">D3.js - Introduction to SVG</a></li>
<li><a href="/d3js/d3js_svg_transformation.htm">D3.js - SVG Transformation</a></li>
<li><a href="/d3js/d3js_transition.htm">D3.js - Transition</a></li>
<li><a href="/d3js/d3js_animation.htm">D3.js - Animation</a></li>
<li><a href="/d3js/d3js_drawing_charts.htm">D3.js - Drawing Charts</a></li>
<li><a href="/d3js/d3js_graphs.htm">D3.js - Graphs</a></li>
<li><a href="/d3js/d3js_geographies.htm">D3.js - Geographies</a></li>
<li><a href="/d3js/d3js_array_api.htm">D3.js - Array API</a></li>
<li><a href="/d3js/d3js_collections_api.htm">D3.js - Collections API</a></li>
<li><a href="/d3js/d3js_selection_api.htm">D3.js - Selection API</a></li>
<li><a href="/d3js/d3js_paths_api.htm">D3.js - Paths API</a></li>
<li><a href="/d3js/d3js_scales_api.htm">D3.js - Scales API</a></li>
<li><a href="/d3js/d3js_axis_api.htm">D3.js - Axis API</a></li>
<li><a href="/d3js/d3js_shapes_api.htm">D3.js - Shapes API</a></li>
<li><a href="/d3js/d3js_colors_api.htm">D3.js - Colors API</a></li>
<li><a href="/d3js/d3js_transitions_api.htm">D3.js - Transitions API</a></li>
<li><a href="/d3js/d3js_dragging_api.htm">D3.js - Dragging API</a></li>
<li><a href="/d3js/d3js_zooming_api.htm">D3.js - Zooming API</a></li>
<li><a href="/d3js/d3js_requests_api.htm">D3.js - Requests API</a></li>
<li><a href="/d3js/d3js_delimiterseparated_values_api.htm">Delimiter-Separated Values API</a></li>
<li><a href="/d3js/d3js_timer_api.htm">D3.js - Timer API</a></li>
<li><a href="/d3js/d3js_working_example.htm">D3.js - Working Example</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">D3.js Useful Resources</li>
<li><a href="/d3js/d3js_quick_guide.htm">D3.js - Quick Guide</a></li>
<li><a href="/d3js/d3js_useful_resources.htm">D3.js - Useful Resources</a></li>
<li><a href="/d3js/d3js_discussion.htm">D3.js - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>D3.js - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/d3js/d3js_working_example.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/d3js/d3js_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>D3.js - Introduction</h1>
<p>Data visualization is the presentation of data in a pictorial or graphical format. The primary goal of data visualization is to communicate information clearly and efficiently via statistical graphics, plots and information graphics.</p>
<p>Data visualization helps us to communicate our insights quickly and effectively. Any type of data, which is represented by a visualization allows users to compare the data, generate analytic reports, understand patterns and thus helps them to take the decision. Data visualizations can be interactive, so that users analyze specific data in the chart. Well, Data visualizations can be developed and integrated in regular websites and even mobile applications using different JavaScript frameworks.</p>
<h2>What is D3.js?</h2>
<p>D3.js is a JavaScript library used to create interactive visualizations in the browser. The D3.js library allows us to manipulate elements of a webpage in the context of a data set. These elements can be <b>HTML, SVG,</b> or <b>Canvas elements</b> and can be introduced, removed, or edited according to the contents of the data set. It is a library for manipulating the DOM objects. D3.js can be a valuable aid in data exploration, it gives you control over your data's representation and lets you add interactivity.</p>
<h2>Why Do We Need D3.js?</h2>
<p>D3.js is one of the premier framework when compare to other libraries. This is because it works on the web and its data visualizations are par excellence. Another reason it has worked so well is owing to its flexibility. Since it works seamlessly with the existing web technologies and can manipulate any part of the document object model, it is as flexible as the <b>Client Side Web Technology Stack</b> (HTML, CSS, and SVG). It has a great community support and is easier to learn.</p>
<h2>D3.js Features</h2>
<p>D3.js is one of the best data visualization framework and it can be used to generate simple as well as complex visualizations along with user interaction and transition effects. Some of its salient features are listed below &minus;</p>
<ul class="list">
<li>Extremely flexible.</li>
<li>Easy to use and fast.</li>
<li>Supports large datasets.</li>
<li>Declarative programming.</li>
<li>Code reusability.</li>
<li>Has wide variety of curve generating functions.</li>
<li>Associates data to an element or group of elements in the html page.</li>
</ul>
<h2>D3.js Benefits</h2>
<p>D3.js is an open source project and works without any plugin. It requires very less code and comes up with the following benefits &minus;</p>
<ul class="list">
<li><p>Great data visualization.</p></li>
<li><p>It is modular. You can download a small piece of D3.js, which you want to use. No need to load the whole library every time.</p></li>
<li><p>Easy to build a charting component.</p></li>
<li><p>DOM manipulation.</p></li>
</ul>
<p>In the next chapter, we will understand how to install D3.js on our system.</p>
<h1>D3.js - Installation</h1>
<p>In this chapter, we will learn how to set up the D3.js development environment. Before we start, we need the following components &minus;</p>
<ul class="list">
<li>D3.js library</li>
<li>Editor</li>
<li>Web browser</li>
<li>Web server</li>
</ul>
<p>Let us go through the steps one by one in detail.</p>
<h2>D3.js Library</h2>
<p>We need to include the D3.js library into your HTML webpage in order to use D3.js to create data visualization. We can do it in the following two ways &minus;</p>
<ul class="list">
<li>Include the D3.js library from your project's folder.</li>
<li>Include D3.js library from CDN (Content Delivery Network).</li>
</ul>
<h3>Download D3.js Library</h3>
<p>D3.js is an open-source library and the source code of the library is freely available on the web at <a href="https://d3js.org/" target="_blank" rel="nofollow">https://d3js.org/</a> website. Visit the D3.js website and download the latest version of D3.js (d3.zip). As of now, the latest version is 4.6.0.</p>
<p>After the download is complete, unzip the file and look for <b>d3.min.js</b>. This is the minified version of the D3.js source code. Copy the d3.min.js file and paste it into your project's root folder or any other folder, where you want to keep all the library files. Include the d3.min.js file in your HTML page as shown below.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;script src = "/path/to/d3.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         // write your d3 code here.. 
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>D3.js is a JavaScript code, so we should write all our D3 code within “script” tag. We may need to manipulate the existing DOM elements, so it is advisable to write the D3 code just before the end of the “body” tag.</p>
<h3>Include D3 Library from CDN</h3>
<p>We can use the D3.js library by linking it directly into our HTML page from the Content Delivery Network (CDN). CDN is a network of servers where files are hosted and are delivered to a user based on their geographic location. If we use the CDN, we do not need to download the source code.</p>
<p>Include the D3.js library using the CDN URL <a href="https://d3js.org/d3.v4.min.js" target="_blank" rel="nofollow">https://d3js.org/d3.v4.min.js</a> into our page as shown below.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;script src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         // write your d3 code here.. 
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>D3.js Editor</h2>
<p>We will need an editor to start writing your code. There are some great IDEs (Integrated Development Environment) with support for JavaScript like &minus;</p>
<ul class="list">
<li>Visual Studio Code</li>
<li>WebStorm</li>
<li>Eclipse</li>
<li>Sublime Text</li>
</ul>
<p>These IDEs provide intelligent code completion as well as support some of the modern JavaScript frameworks. If you do not have fancy IDE, you can always use a basic editor like Notepad, VI, etc.</p>
<h2>Web Browser</h2>
<p>D3.js works on all the browsers except IE8 and lower.</p>
<h3>Web Server</h3>
<p>Most browsers serve local HTML files directly from the local file system. However, there are certain restrictions when it comes to loading external data files. In the latter chapters of this tutorial, we will be loading data from external files like <b>CSV</b> and <b>JSON</b>. Therefore, it will be easier for us, if we set up the web server right from the beginning.</p>
<p>You can use any web server, which you are comfortable with &minus; e.g. IIS, Apache, etc.</p>
<h3>Viewing Your Page</h3>
<p>In most cases, we can just open your HTML file in a web browser to view it. However, when loading external data sources, it is more reliable to run a local web server and view your page from the server <b>(http://localhost:8080)</b>.</p>
<h1>D3.js - Concepts</h1>
<p>D3.js is an open source JavaScript library for &minus;</p>
<ul class="list">
<li>Data-driven manipulation of the Document Object Model (DOM).</li>
<li>Working with data and shapes.</li>
<li>Laying out visual elements for linear, hierarchical, network and geographic data.</li>
<li>Enabling smooth transitions between user interface (UI) states.</li>
<li>Enabling effective user interaction.</li>
</ul>
<h2>Web Standards</h2>
<p>Before we can start using D3.js to create visualizations, we need to get familiar with web standards. The following web standards are heavily used in D3.js.</p>
<ul class="list">
<li>HyperText Markup Language (HTML)</li>
<li>Document Object Model (DOM)</li>
<li>Cascading Style Sheets (CSS)</li>
<li>Scalable Vector Graphics (SVG)</li>
<li>JavaScript</li>
</ul>
<p>Let us go through each of these web standards one by one in detail.</p>
<h3>HyperText Markup Language (HTML)</h3>
<p>As we know, HTML is used to structure the content of the webpage. It is stored in a text file with the extension “.html”.</p>
<p><b>Example</b> &minus; A typical bare-bones HTML example looks like this</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;meta charset = "UTF-8"&gt;
      &lt;title&gt;&lt;/title&gt;
   &lt;/head&gt;

   &lt;body&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Document Object Model (DOM)</h3>
<p>When a HTML page is loaded by a browser, it is converted to a hierarchical structure. Every tag in HTML is converted to an element / object in the DOM with a parent-child hierarchy. It makes our HTML more logically structured. Once the DOM is formed, it becomes easier to manipulate (add/modify/remove) the elements on the page.</p>
<p>Let us understand the DOM using the following HTML document &minus;</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;title&gt;My Document&lt;/title&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div&gt;
         &lt;h1&gt;Greeting&lt;/h1&gt;
         &lt;p&gt;Hello World!&lt;/p&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The document object model of the above HTML document is as follows,</p>
<img src="/d3js/images/document_object_model.jpg" alt="Document Object Model" />
<h3>Cascading Style Sheets (CSS)</h3>
<p>While HTML gives a structure to the webpage, CSS styles makes the webpage more pleasant to look at. CSS is a <b>Style Sheet Language</b> used to describe the presentation of a document written in HTML or XML (including XML dialects like SVG or XHTML). CSS describes how elements should be rendered on a webpage.</p>
<h3>Scalable Vector Graphics (SVG)</h3>
<p>SVG is a way to render images on the webpage. SVG is not a direct image, but is just a way to create images using text. As its name suggests, it is a <b>Scalable Vector</b>. It scales itself according to the size of the browser, so resizing your browser will not distort the image. All browsers support SVG except IE 8 and below. Data visualizations are visual representations and it is convenient to use SVG to render visualizations using the D3.js.</p>
<p>Think of SVG as a canvas on which we can paint different shapes. So to start with, let us create an SVG tag &minus;</p>
<pre class="prettyprint notranslate">
&lt;svg width = "500" height = "500"&gt;&lt;/&lt;svg&gt;
</pre>
<p>The default measurement for SVG is pixels, so we do not need to specify if our unit is pixel. Now, if we want to draw a rectangle, we can draw it using the code below &minus;</p>
<pre class="prettyprint notranslate">
&lt;svg width = "500" height = "500"&gt;
   &lt;rect x = "0" y = "0" width = "300" height = "200"&gt;&lt;/rect&gt;
&lt;/svg&gt;
</pre>
<p>We can draw other shapes in SVG such as &minus; Line, Circle, Ellipse, Text and Path.</p>
<p>Just like styling HTML elements, styling SVG elements is simple. Let us set the background color of the rectangle to yellow. For that, we need to add an attribute “fill” and specify the value as yellow as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;svg width = "500" height = "500"&gt;
   &lt;rect x = "0" y = "0" width = "300" height = "200" fill = "yellow"&gt;&lt;/rect&gt;
&lt;/svg&gt;
</pre>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/fill.htm" height="520px" width="660px"></iframe>
<h3>JavaScript</h3>
<p>JavaScript is a loosely typed client side scripting language that executes in the user's browser. JavaScript interacts with HTML elements (DOM elements) in order to make the web user interface interactive. JavaScript implements the <b>ECMAScript Standards</b>, which includes core features based on ECMA-262 specifications as well as other features, which are not based on the ECMAScript standards. JavaScript knowledge is a prerequisite for D3.js.</p>
<h1>D3.js - Selections</h1>
<p>Selections is one of the core concepts in D3.js. It is based on CSS selectors. It allows us to select one or more elements in a webpage. In addition, it allows us to modify, append, or remove elements in a relation to the pre-defined dataset. In this chapter, we will see how to use selections to create data visualizations.</p>
<p>D3.js helps to select elements from the HTML page using the following two methods &minus;</p>
<ul class="list">
<li><p><b>select()</b> &minus; Selects only one DOM element by matching the given CSS selector. If there are more than one elements for the given CSS selector, it selects the first one only.</p></li>
<li><p><b>selectAll()</b> &minus; Selects all DOM elements by matching the given CSS selector. If you are familiar with selecting elements with jQuery, D3.js selectors are almost the same.</p></li>
</ul>
<p>Let us go through each of the methods in detail.</p>
<h2>The select() method</h2>
<p>The select() method selects the HTML element based on CSS Selectors. In CSS Selectors, you can define and access HTML-elements in the following three ways &minus;</p>
<ul class="list">
<li>Tag of a HTML element (e.g. div, h1, p, span, etc.,)</li>
<li>Class name of a HTML element</li>
<li>ID of a HTML element</li>
</ul>
<p>Let us see it in action with examples.</p>
<h3>Selection by Tag</h3>
<p>You can select HTML elements using its TAG. The following syntax is used to select the “div” tag elements,</p>
<pre class="prettyprint notranslate">
d3.select(“div”)
</pre>
<p><b>Example</b> &minus; Create a page “select_by_tag.html” and add the following changes,</p>
<div class="demo-view">
<a href="http://tpcg.io/snsFI8" rel="nofollow" class="demo" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div&gt;
         Hello World!    
      &lt;/div&gt;
      
      &lt;script&gt;
         alert(d3.select("div").text());
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/select_by_tag.htm" height="150px" width="660px"></iframe>
<h3>Selection by Class name</h3>
<p>HTML elements styled using CSS classes can be selected by using the following syntax.</p>
<pre class="prettyprint notranslate">
d3.select(“.&lt;class name&gt;”)
</pre>
<p>Create a webpage “select_by_class.html” and add the following changes &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/0aRnHD" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         alert(d3.select(".myclass").text());
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/select_by_class.htm" height="150px" width="660px"></iframe>
<h3>Selection by ID</h3>
<p>Every element in a HTML page should have a unique ID. We can use this unique ID of an element to access it using the select() method as specified below.</p>
<pre class="prettyprint notranslate">
d3.select(“#&lt;id of an element&gt;”)
</pre>
<p>Create a webpage “select_by_id.html” and add the following changes.</p>
<div class="demo-view">
<a href="http://tpcg.io/NfWVNZ" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "hello"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         alert(d3.select("#hello").text());
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/select_by_id.htm" height="150px" width="660px"></iframe>
<h2>Adding DOM Elements</h2>
<p>The D3.js selection provides the <b>append()</b> and the <b>text()</b> methods to append new elements into the existing HTML documents. This section explains about adding DOM elements in detail.</p>
<h3>The append() Method</h3>
<p>The append() method appends a new element as the last child of the element in the current selection. This method can also modify the style of the elements, their attributes, properties, HTML and text content.</p>
<p>Create a webpage “select_and_append.html” and add the following changes &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/qtwSx4" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         d3.select("div.myclass").append("span");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Requesting the webpage through browser, you could see the following output on the screen,</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/select_and_append.htm" height="150px" width="660px"></iframe>
<p>Here, the append() method adds a new tag span inside the div tag as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;div class = "myclass"&gt;
   Hello World!&lt;span&gt;&lt;/span&gt;
&lt;/div&gt;
</pre>
<h3>The text() Method</h3>
<p>The text() method is used to set the content of the selected / appended elements. Let us change the above example and add the text() method as shown below.</p>
<div class="demo-view">
<a href="http://tpcg.io/nnBeQ5" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         d3.select("div.myclass").append("span").text("from D3.js");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now refresh the webpage and you will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/text_function.htm" height="150px" width="660px"></iframe>
<p>Here, the above script performs a chaining operation. D3.js smartly employs a technique called the <b>chain syntax</b>, which you may recognize from <b>jQuery</b>. By chaining methods together with periods, you can perform several actions in a single line of code. It is fast and easy. The same script can also access without chain syntax as shown below.</p>
<pre class="prettyprint notranslate">
var body = d3.select("div.myclass");
var span = body.append("span");
span.text("from D3.js");
</pre>
<h2>Modifying Elements</h2>
<p>D3.js provides various methods, <b>html(), attr()</b> and <b>style()</b> to modify the content and style of the selected elements. Let us see how to use modify methods in this chapter.</p>
<h3>The html() Method</h3>
<p>The html() method is used to set the html content of the selected / appended elements.</p>
<p>Create a webpage “select_and_add_html.html” and add the following code.</p>
<div class="demo-view">
<a href="http://tpcg.io/6dXLCs" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         d3.select(".myclass").html("Hello World! &lt;span&gt;from D3.js&lt;/span&gt;");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/html_function.htm" height="150px" width="660px"></iframe>
<h3>The attr() Method</h3>
<p>The attr() method is used to add or update the attribute of the selected elements. Create a webpage “select_and_modify.html” and add the following code.</p>
<div class="demo-view">
<a href="http://tpcg.io/pj6qKj" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         d3.select(".myclass").attr("style", "color: red");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/attribute_function.htm" height="150px" width="660px"></iframe>
<h3>The style() Method</h3>
<p>The style() method is used to set the style property of the selected elements. Create a webpage “select_and_style.html” and add the following code.</p>
<div class="demo-view">
<a href="http://tpcg.io/OmNbmV" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         d3.select(".myclass").style("color", "red");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/style_function.htm" height="150px" width="660px"></iframe>
<h3>The classed() Method</h3>
<p>The classed() method is exclusively used to set the “class” attribute of an HTML element. Since, a single HTML element can have multiple classes; we need to be careful while assigning a class to an HTML element. This method knows how to handle one or many classes on an element, and it will be performant.</p>
<ul class="list">
<li><p><b>Add class</b> &minus; To add a class, the second parameter of the classed method must be set to true. It is defined below &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
d3.select(".myclass").classed("myanotherclass", true);
</pre>
<ul class="list">
<li><p><b>Remove class</b> &minus; To remove a class, the second parameter of the classed method must be set to false. It is defined below &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
d3.select(".myclass").classed("myanotherclass", false);
</pre>
<ul class="list">
<li><p><b>Check class</b> &minus; To check for the existence of a class, just leave off the second parameter and pass the class name you are querying. This will return true, if it exists, false, if it does not.</p></li>
</ul>
<pre class="prettyprint notranslate">
d3.select(".myclass").classed("myanotherclass");
</pre>
<p>This will return true, if any element in the selection has the class. Use <b>d3.select</b> for single element selection.</p>
<ul class="list">
<li><p><b>Toggle class</b> &minus; To flip a class to the opposite state – remove it if it exists already, add it if it does not yet exist – you can do one of the following.</p>
<p>For a single element, the code might look as shown below &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
var element = d3.select(".myclass")
element.classed("myanotherclass", !oneBar.classed("myanotherclass"));
</pre>
<h2>The selectAll() Method</h2>
<p>The selectAll() method is used to select multiple elements in the HTML document. The select method selects the first element, but the selectAll method selects all the elements that match the specific selector string. In case the selection matches none, then it returns an empty selection. We can chain all the appending modifying methods, <b>append(), html(), text(), attr(), style(), classed(),</b> etc., in the selectAll() method as well. In this case, the methods will affect all the matching elements. Let us understand by creating a new webpage “select_multiple.html” and add the following script &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/kxielb" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h2 class = "myclass"&gt;Message&lt;/h2&gt;
      &lt;div class = "myclass"&gt;
         Hello World!
      &lt;/div&gt;
      
      &lt;script&gt;
         d3.selectAll(".myclass").attr("style", "color: red");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>By requesting the webpage through the browser, you will see the following output on the screen.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/select_all_function.htm" height="150px" width="660px"></iframe>
<p>Here, the attr() method applies to both <b>div</b> and <b>h2 tag</b> and the color of the text in both tags changes to Red.</p>
<h1>D3.js - Data Join</h1>
<p>Data join is another important concept in D3.js. It works along with selections and enables us to manipulate the HTML document with respect to our data set (a series of numerical values). By default, D3.js gives data set the highest priority in its methods and each item in the data set corresponds to a HTML element. This chapter explains data joins in detail.</p>
<h2>What is a Data Join?</h2>
<p>Data join enables us to inject, modify and remove elements (HTML element as well as embedded SVG elements) based on the data set in the existing HTML document. By default, each data item in the data set corresponds to an element (graphical) in the document. </p>
<p>As the data set changes, the corresponding element can also be manipulated easily. Data join creates a close relationship between our data and graphical elements of the document. Data join makes manipulation of the elements based on the data set a very simple and easy process.</p>
<h2>How Data Join Works?</h2>
<p>The primary purpose of the Data join is to map the elements of the existing document with the given data set. It creates a virtual representation of the document with respect to the given data set and provides methods to work with the virtual representation. Let us consider a simple data set as shown below.</p>
<pre class="prettyprint notranslate">
[10, 20, 30, 25, 15]
</pre>
<p>The data set has five items and so, it can be mapped to five elements of the document. Let us map it to the <b>li</b> element of the following document using the selector's selectAll() method and data join's data() method.</p>
<h3>HTML</h3>
<pre class="prettyprint notranslate">
&lt;ul id = "list"&gt;
   &lt;li&gt;&lt;li&gt;
   &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt; 
</pre>   
<h3>D3.js code</h3>
<pre class="prettyprint notranslate">
d3.select("#list").selectAll("li").data([10, 20, 30, 25, 15]);
</pre> 
<p>Now, there are five virtual elements in the document. The first two virtual elements are the two <b>li</b> element defined in the document as shown below.</p>
<pre class="result notranslate">
1. li - 10
2. li - 20
</pre>
<p>We can use all the selector's element modifying methods like <b>attr(), style(), text()</b>, etc., for the first two <b>li</b> as shown below.</p>
<pre class="prettyprint notranslate">
d3.select("#list").selectAll("li")
   .data([10, 20, 30, 25, 15])
   .text(function(d) { return d; });
</pre>
<p>The function in the text() method is used to get the <b>li</b> elements mapped data. Here, <b>d</b> represent 10 for first <b>li</b> element and 20 for second <b>li</b> element.</p>
<p>The next three elements can be mapped to any elements and it can be done using the data join's enter() and selector's append() method. The enter() method gives access to the remaining data (which is not mapped to the existing elements) and the append() method is used to create a new element from the corresponding data. Let us create <b>li</b> for the remaining data items as well. The data map is as follows &minus;</p>
<pre class="prettyprint notranslate">
3. li - 30
4. li - 25
5. li - 15
</pre>
<p>The code to create new a li element is as follows &minus;</p>
<pre class="prettyprint notranslate">
d3.select("#list").selectAll("li")
   .data([10, 20, 30, 25, 15])
   .text(function(d) { return "This is pre-existing element and the value is " + d; })
   .enter()
   .append("li")
   .text(function(d) 
      { return "This is dynamically created element and the value is " + d; });
</pre>
<p>Data join provides another method called as the <b>exit() method</b> to process the data items removed dynamically from the data set as shown below.</p>
<pre class="prettyprint notranslate">
d3.selectAll("li")
   .data([10, 20, 30, 15])
   .exit()
   .remove()
</pre>
<p>Here, we have removed the fourth item from the data set and its corresponding li using the exit() and the remove() methods.</p>
<p>The complete code is as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/LMA5MV" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         body { font-family: Arial; }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;ul id = "list"&gt;
         &lt;li&gt;&lt;/li&gt;
         &lt;li&gt;&lt;/li&gt;
      &lt;/ul&gt;
        
      &lt;input type = "button" name = "remove" value = "Remove fourth value" 
         onclick = "javascript:remove()" /&gt;
      
      &lt;script&gt;
         d3.select("#list").selectAll("li")
            .data([10, 20, 30, 25, 15])
            .text(function(d) 
               { return "This is pre-existing element and the value is " + d; })
            .enter()
            .append("li")
            .text(function(d) 
               { return "This is dynamically created element and the value is " + d; });
             
         function remove() {
            d3.selectAll("li")
            .data([10, 20, 30, 15])
            .exit()
            .remove()
         }
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The result of the above code will be as follows &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/remove_function.htm" height="150px" width="660px"></iframe>
<!--<h3>Fourth item removed</h3>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/fourth_item_removed.htm" height="150px" width="660px"></iframe>
<h2>Data Join Methods</h2>
<p>Data join provides the following four methods to work with data set &minus;</p>
<ul class="list">
<li>datum()</li>
<li>data()</li>
<li>enter()</li>
<li>exit()</li>
</ul>
<p>Let us go through each of these methods in detail.</p>
<h3>The datum() Method</h3>
<p>The datum() method is used to set value for a single element in the HTML document. It is used once the element is selected using selectors. For example, we can select an existing element (p tag) using the select() method and then, set data using the datum() method. Once data is set, we can either change the text of the selected element or add new element and assign the text using the data set by datum() method.</p>
<p>Create a page “datajoin_datum.html” and add the following code &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/aQ5aYr" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;div&gt;&lt;/div&gt;
      &lt;script&gt;
         d3.select("p")
         .datum(50)
         .text(function(d) { 
            return "Used existing paragraph element and the data " + d + " is assigned."; 
         });
         
         d3.select("div")
         .datum(100)
         .append("p")
         .text(function(d) { 
            return "Created new paragraph element and the data " + d + " is assigned."; 
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The output of the above code will be as follows.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/datajoin_datum.htm" height="150px" width="660px"></iframe>
<h3>The data() method</h3>
<p>The data() method is used to assign a data set to a collection of elements in a HTML document. It is used once the HTML elements are selected using selectors. In our list example, we have used it to set the data set for the <b>li</b> selector.</p>
<pre class="prettyprint notranslate">
d3.select("#list").selectAll("li")
   .data([10, 20, 30, 25, 15]);
</pre>
<h3>The enter() method</h3>
<p>The enter() method outputs the set of data item for which no graphic element existed before. In our list example, we have used it to create new <b>li</b> elements.</p>
<pre class="prettyprint notranslate">
d3.select("#list").selectAll("li")
   .data([10, 20, 30, 25, 15])
   .text(function(d) { return "This is pre-existing element and the value is " + d; })
   .enter()
   .append("li")
   .text(function(d) { return "This is dynamically created element and the value is " + d; });
</pre>
<h3>The exit() method</h3>
<p>The exit() method outputs the set of graphic elements for which no data exists any longer. In our list example, we have used it to remove one of the <b>li</b> element dynamically by removing the data item in the data set.</p>
<pre class="prettyprint notranslate">
function remove() {
   d3.selectAll("li")
      .data([10, 20, 30, 15])
      .exit()
      .remove()
}
</pre>
<h2>Data Function</h2>
<p>In the DOM manipulation chapter, we learned about different DOM manipulation methods in D3.js such as <b>style(), text()</b>, etc. Each of these functions normally takes a constant value as its parameter. Nevertheless, in the context of <b>Data join</b>, it takes an anonymous function as a parameter. This anonymous function takes the corresponding data and the index of the data set assigned using the data() method. So, this anonymous function will be called for each of our data values bound to the DOM. Consider the following text() function.</p>
<pre class="prettyprint notranslate">
.text(function(d, i) {
   return d;
});
</pre>
<p>Within this function, we can apply any logic to manipulate the data. These are anonymous functions, meaning that there is no name associated with the function. Other than the data (d) and index (i) parameter, we can access the current object using <b>this</b> keyword as shown below &minus;</p>
<pre class="prettyprint notranslate">
.text(function (d, i) {
   console.log(d); // the data element
   console.log(i); // the index element
   console.log(this); // the current DOM object
   return d;
});
</pre>
<p>Consider the following example.</p>
<div class="demo-view">
<a href="http://tpcg.io/LoVSYf" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         body { font-family: Arial; }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;script&gt;
         var data = [1, 2, 3];
         var paragraph = d3.select("body")
         .selectAll("p")
         .data(data)
         .text(function (d, i) {
            console.log("d: " + d);
            console.log("i: " + i);
            console.log("this: " + this);
            return "The index is " + i + " and the data is " + d;
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above script will generate the following result &minus;</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/data_function.htm" height="150px" width="660px"></iframe>
<p>In the above example, the parameter “d” gives you your data element, “i” gives you the index of data in the array and “this” is a reference of the current DOM element. In this case, it is the paragraph element. Notice that we have called .data(data) function above. The data() function provides data to the selected elements, in our case it is data array.</p>
<h1>D3.js - Introduction to SVG</h1>
<p>SVG stands for <b>Scalable Vector Graphics</b>. SVG is an XML-based vector graphics format. It provides options to draw different shapes such as Lines, Rectangles, Circles, Ellipses, etc. Hence, designing visualizations with SVG gives you more power and flexibility.</p>
<h2>Features of SVG</h2>
<p>Some of the salient features of SVG are as follows &minus;</p>
<ul class="list">
<li>SVG is a vector based image format and it is text-based.</li>
<li>SVG is similar in structure to HTML.</li>
<li>SVG can be represented as a <b>Document object model</b>.</li>
<li>SVG properties can be specified as attributes.</li>
<li>SVG should have absolute positions relative to the origin (0, 0).</li>
<li>SVG can be included as is in the HTML document.</li>
</ul>
<h2>A Minimal Example</h2>
<p>Let us create a minimal SVG image and include it in the HTML document.</p>
<p><b>Step 1</b> &minus; Create a SVG image and set width as 300 pixel and height as 300 pixel.</p>
<pre class="result notranslate">
&lt;svg width = "300" height = "300"&gt;

&lt;/svg&gt;
</pre>
<p>Here, the <b>svg</b> tag starts an SVG image and it has width and height as attributes. The default unit of the SVG format is <b>pixel</b>.</p>
<p><b>Step 2</b> &minus; Create a line starting at (100, 100) and ending at (200, 100) and set red color for the line.</p>
<pre class="result notranslate">
&lt;line x1 = "100" y1 = "100" x2 = "200" y2 = "200" 
   style = "stroke:rgb(255,0,0);stroke-width:2"/&gt;
</pre>
<p>Here, the <b>line</b> tag draws a line and its attributes <b>x1, y1</b> refers to the starting point and <b>x2, y2</b> refers to the ending point. The style attribute sets color and thickness of the line using the <b>stroke</b> and the <b>stroke-width</b> styles.</p>
<ul class="list">
<li><p><b>x1</b> &minus; This is the x-coordinate of the first point.</p></li>
<li><p><b>y1</b> &minus; This is the y-coordinate of the first point.</p></li>
<li><p><b>x2</b> &minus; This is the x-coordinate of the second point.</p></li>
<li><p><b>y2</b> &minus; This is the y-coordinate of the second point.</p></li>
<li><p><b>stroke</b> &minus; Color of the line.</p></li>
<li><p><b>stroke-width</b> &minus; Thickness of the line.</p></li>
</ul>
<p><b>Step 3</b> &minus; Create a HTML document, “svg_line.html” and integrate the above SVG as shown below &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/duqg6n" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         body { font-family: Arial; }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;
         &lt;svg width = "300" height = "300"&gt;
            &lt;line x1 = "100" y1 = "100" 
               x2 = "200" y2 = "200" style = "stroke:rgb(255,0,0);
               stroke-width:2"/&gt;
         &lt;/svg&gt;
      &lt;/div&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;p&gt;&lt;/p&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above program will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/svg_line.htm" height="150px" width="660px"></iframe>
<h2>SVG Using D3.js</h2>
<p>To create SVG using D3.js, let us follow the steps given below.</p>
<p><b>Step 1</b> &minus; Create a container to hold the SVG image as given below.</p>
<pre class="result notranslate">
&lt;div id = "svgcontainer"&gt;&lt;/div&gt;
</pre>
<p><b>Step 2</b> &minus; Select the SVG container using the select() method and inject the SVG element using the append() method. Add the attributes and styles using the attr() and the style() methods.</p>
<pre class="prettyprint notranslate">
var width = 300;
var height = 300;
var svg = d3.select("#svgcontainer")
   .append("svg").attr("width", width).attr("height", height);
</pre>
<p><b>Step 3</b> &minus; Similarly, add the <b>line</b> element inside the <b>svg</b> element as shown below.</p>
<pre class="prettyprint notranslate">
svg.append("line")
   .attr("x1", 100)
   .attr("y1", 100)
   .attr("x2", 200) 
   .attr("y2", 200)
   .style("stroke", "rgb(255,0,0)")
   .style("stroke-width", 2);
</pre>
<p>The complete code is as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/gRlG51" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         body { font-family: Arial; }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;
      &lt;/div&gt;
      &lt;script language = "javascript"&gt;
         var width = 300;
         var height = 300;
         var svg = d3.select("#svgcontainer")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         svg.append("line")
            .attr("x1", 100)
            .attr("y1", 100)
            .attr("x2", 200)
            .attr("y2", 200)
            .style("stroke", "rgb(255,0,0)")
            .style("stroke-width", 2);
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code yields the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/svg_line.htm" height="150px" width="660px"></iframe>
<h2>Rectangle Element</h2>
<p>A rectangle is represented by the <b>&lt;rect&gt;</b> tag as shown below.</p>
<pre class="result notranslate">
&lt;rect x = "20" y = "20" width = "300" height = "300"&gt;&lt;/rect&gt;
</pre>
<p>The attributes of a rectangle are as follows &minus;</p>
<ul class="list">
<li><p><b>x</b> &minus; This is the x-coordinate of the top-left corner of the rectangle.</p></li>
<li><p><b>y</b> &minus; This is the y-coordinate of the top-left corner of the rectangle.</p></li>
<li><p><b>width</b> &minus; This denotes the width of the rectangle.</p></li>
<li><p><b>height</b> &minus; This denotes the height of the rectangle.</p></li>
</ul>
<p>A simple rectangle in SVG is defined as explained below.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;rect x = "20" y = "20" width = "300" height = "300" fill = "green"&gt;&lt;/rect&gt;
&lt;/svg&gt;
</pre>
<p>The same rectangle can be created dynamically as described below.</p>
<div class="demo-view">
<a href="http://tpcg.io/sGksbp" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;&lt;/div&gt;
      &lt;script&gt;
         var width = 300;
         var height = 300;
         //Create SVG element
         var svg = d3.select("#svgcontainer")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         //Create and append rectangle element
         svg.append("rect")
            .attr("x", 20)
            .attr("y", 20)
            .attr("width", 200)
            .attr("height", 100)
            .attr("fill", "green");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/rectangle_element.htm" height="150px" width="660px"></iframe>
<h2>Circle Element</h2>
<p>A circle is represented by the <b>&lt;circle&gt;</b> tag as explained below.</p>
<pre class="prettyprint notranslate">
&lt;circle cx = "200" cy = "50" r = "20"/&gt;
</pre>
<p>The attributes of circle are as follows &minus;</p>
<ul class="list">
<li><p><b>cx</b> &minus; This is the x-coordinate of the center of the circle.</p></li>
<li><p><b>cy</b> &minus; This is the y-coordinate of the center of the circle.</p></li>
<li><p><b>r</b> &minus; This denotes the radius of the circle.</p></li>
</ul>
<p>A simple circle in SVG is described below.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;circle cx = "200" cy = "50" r = "20" fill = "green"/&gt;
&lt;/svg&gt;
</pre>
<p>The same circle can be created dynamically as described below.</p>
<div class="demo-view">
<a href="http://tpcg.io/BesnAt" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;&lt;/div&gt;
      &lt;script&gt;
         var width = 300;
         var height = 300;
         //Create SVG element
         var svg = d3.select("#svgcontainer")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         //Append circle 
         svg.append("circle")
            .attr("cx", 200)
            .attr("cy", 50)
            .attr("r", 20)
            .attr("fill", "green");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/circle_element.htm" height="150px" width="660px"></iframe>
<h2>Ellipse Element</h2>
<p>The SVG Ellipse element is represented by the <b>&lt;ellipse&gt;</b> tag as explained below.</p>
<pre class="prettyprint notranslate">
&lt;ellipse cx = "200" cy = "50" rx = "100" ry = "50"/&gt;
</pre>
<p>The attributes of an ellipse are as follows &minus;</p>
<ul class="list">
<li><p><b>cx</b> &minus; This is the x-coordinate of the center of the ellipse.</p></li>
<li><p><b>cy</b> &minus; This is the y-coordinate of the center of the ellipse.</p></li>
<li><p><b>rx</b> &minus; This is the x radius of the circle.</p></li>
<li><p><b>ry</b> &minus; This is the y radius of the circle.</p></li>
</ul>
<p>A simple ellipse in the SVG is described below.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;ellipse cx = "200" cy = "50" rx = "100" ry = "50" fill = "green" /&gt;
&lt;/svg&gt;
</pre>
<p>The same ellipse can be created dynamically as below,</p>
<div class="demo-view">
<a href="http://tpcg.io/cIzo6f" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;&lt;/div&gt;
      &lt;script&gt;
         var width = 300;
         var height = 300;
         var svg = d3.select("#svgcontainer")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         svg.append("ellipse")
            .attr("cx", 200)
            .attr("cy", 50)
            .attr("rx", 100)
            .attr("ry", 50)
            .attr("fill", "green")
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/ellipse_element.htm" height="150px" width="660px"></iframe>
<h1>D3.js - SVG Transformation</h1>
<p>SVG provides options to transform a single SVG shape element or group of SVG elements. SVG transform supports <b>Translate, Scale, Rotate</b> and <b>Skew</b>. Let us learn transformation in this chapter.</p>
<h2>Introduction to SVG Transformation</h2>
<p>SVG introduces a new attribute, <b>transform</b> to support transformation. The possible values are one or more of the following,</p>
<ul class="list">
<li><p><b>Translate</b> &minus; It takes two options, <b>tx</b> refers translation along the x-axis and <b>ty</b> refers to the translation along the y-axis. For <b>Example</b>&minus; translate(30 30).</p></li>
<li><p><b>Rotate</b> &minus; It takes three options, <b>angle</b> refers rotation angle, <b>cx</b> and <b>cy</b> refers to the center of the rotation in the x and y axis. If <b>cx</b> and <b>cy</b> are not specified, then it defaults to the current origin of the coordinate system. For <b>Example</b> &minus; rotate(60).</p></li>
<li><p><b>Scale</b> &minus; It takes two options, <b>sx</b> refers to the scaling factor along the x-axis and <b>sy</b> refers to the scaling factor along the y-axis. Here, <b>sy</b> is optional and it takes the value of <b>sx</b>, if it is not specified. For <b>Example</b> &minus; scale(10).</p></li>
<li><p><b>Skew (SkewX and SkewY)</b> &minus; It takes a single option; the <b>skew-angle</b> refers to the angle along the x-axis for SkewX and the angle along the y-axis for SkewY. For <b>Example</b> &minus; skewx(20).</p></li>
</ul>
<p>An example of the SVG rectangle with translate, which is described as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/Vfy1KD" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;svg width = "300" height = "300"&gt;
         &lt;rect x = "20" 
            y = "20"
            width = "60"
            height = "60"
            fill = "green"
            transform = "translate(30 30)"&gt;
         &lt;/rect&gt;
      &lt;/svg&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/svg_rectangle.htm" height="150px" width="660px"></iframe>
<p>More than one transformation can be specified for a single SVG element using space as separation. If more than one value is specified, the transformation will be applied one by one sequentially in the order specified.</p>
<div class="demo-view">
<a href="http://tpcg.io/u1BCLn" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;svg width = "300" height = "300"&gt;
         &lt;rect x = "20" 
            y = "20" 
            width = "60" 
            height = "60" 
            fill = "green" 
            transform = "translate(60 60) rotate(45)"&gt;
         &lt;/rect&gt;
      &lt;/svg&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/svg_element.htm" height="150px" width="660px"></iframe>
<p>Transformation can be applied to the SVG group element as well. This enables to transform complex graphics defined in the SVG as described below.</p>
<div class="demo-view">
<a href="http://tpcg.io/cxArBt" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;svg width = "300" height = "300"&gt;
         &lt;g transform = "translate(60,60) rotate(30)"&gt;
            &lt;rect x = "20" 
               y = "20" 
               width = "60" 
               height = "30" 
               fill = "green"&gt;
            &lt;/rect&gt;
            &lt;circle cx = "0" 
               cy = "0" 
               r = "30" 
               fill = "red"/&gt;
         &lt;/g&gt;
      &lt;/svg&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/svg_group_element.htm" height="150px" width="660px"></iframe>
<h2>A Minimal Example</h2>
<p>To create an SVG image, try to scale, and rotate it using transformation, let us follow the steps given below.</p>
<p><b>Step 1</b> &minus; Create an SVG image and set width as 300 pixels and height as 300 pixels.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;

&lt;/svg&gt;
</pre>
<p><b>Step 2</b> &minus; Create an SVG group.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;g&gt;
   &lt;/g&gt;
&lt;/svg&gt;
</pre>
<p><b>Step 3</b> &minus; Create a rectangle of length 60 and height 30 and fill it with green color.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;g&gt;
      &lt;rect x = "20" 
         y = "20" 
         width = "60" 
         height = "30" 
         fill = "green"&gt;
      &lt;/rect&gt;
   &lt;/g&gt;
&lt;/svg&gt;
</pre>
<p><b>Step 4</b> &minus; Create a circle of radius 30 and fill it with red color.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;g&gt;
      &lt;rect x = "20" 
         y = "20" 
         width = "60" 
         height = "30" 
         fill = "green"&gt;
      &lt;/rect&gt;
      &lt;circle cx = "0" 
         cy = "0" 
         r = "30" 
         fill = "red"/&gt;
   &lt;/g&gt;
&lt;/svg&gt;
</pre>
<p><b>Step 5</b> &minus; Add a transform attribute and add translate and rotate as shown below.</p>
<pre class="prettyprint notranslate">
&lt;svg width = "300" height = "300"&gt;
   &lt;g transform = "translate(60,60) rotate(30)"&gt;
      &lt;rect x = "20" 
         y = "20" 
         width = "60" 
         height = "60" 
         fill = "green"&gt;
      &lt;/rect&gt;
      &lt;circle cx = "0" 
         cy = "0" 
         r = "30" 
         fill = "red"/&gt;
   &lt;/g&gt;
&lt;/svg&gt;
</pre>
<p><b>Step 6</b> &minus; Create an HTML document, “svg_transform_rotate_group.html” and integrate the above SVG as explained below.</p>
<div class="demo-view">
<a href="http://tpcg.io/XiZ8Lt" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         body { font-family: Arial; }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;
         &lt;svg width = "300" height = "300"&gt;
            &lt;g transform = "translate(60,60) rotate(30)"&gt;
               &lt;rect x = "20" 
                  y = "20" 
                  width = "60" 
                  height = "60" 
                  fill = "green"&gt;
               &lt;/rect&gt;
               &lt;circle cx = "0" 
                  cy = "0" 
                  r = "30" 
                  fill = "red"/&gt;
            &lt;/g&gt;
         &lt;/svg&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/svg_transform_rotate_group.htm" height="150px" width="660px"></iframe>
<h3>Transformation Using D3.js</h3>
<p>To create SVG using D3.js, let us follow the steps given below.</p>
<p><b>Step 1</b> &minus; Create a container to hold the SVG image as explained below.</p>
<pre class="prettyprint notranslate">
&lt;div id = "svgcontainer"&gt;&lt;/div&gt;
</pre>
<p><b>Step 2</b> &minus; Create a SVG image as explained below.</p>
<pre class="prettyprint notranslate">
var width = 300;
var height = 300;
var svg = d3.select("#svgcontainer")
   .append("svg")
   .attr("width", width)
   .attr("height", height);
</pre>
<p><b>Step 3</b> &minus; Create a SVG group element and set translate and rotate attributes.</p>
<pre class="prettyprint notranslate">
var group = svg.append("g").attr("transform", "translate(60, 60) rotate(30)");
</pre>
<p><b>Step 4</b> &minus; Create an SVG rectangle and append it inside the group.</p>
<pre class="prettyprint notranslate">
var rect = group
   .append("rect")
   .attr("x", 20)
   .attr("y", 20)
   .attr("width", 60)
   .attr("height", 30)
   .attr("fill", "green")
</pre>
<p><b>Step 5</b> &minus; Create an SVG circle and append it inside the group.</p>
<pre class="prettyprint notranslate">
var circle = group
   .append("circle")
   .attr("cx", 0)
   .attr("cy", 0)
   .attr("r", 30)
   .attr("fill", "red")
</pre>
<p>The complete code is as follows &minus;</p>
<div class="demo-view">
<a href="http://tpcg.io/xLmnqQ" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html lang = "en"&gt;
   &lt;head&gt;
      &lt;title&gt;SVG rectangle&lt;/title&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         body { font-family: Arial; }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;div id = "svgcontainer"&gt;&lt;/div&gt;
         &lt;script language = "javascript"&gt;
            var width = 300;
            var height = 300;
            var svg = d3.select("#svgcontainer")
               .append("svg")
               .attr("width", width)
               .attr("height", height);

            var group = svg.append("g")
               .attr("transform", "translate(60, 60) rotate(30)");
            
            var rect = group.append("rect")
               .attr("x", 20)
               .attr("y", 20)
               .attr("width", 60)
               .attr("height", 30)
               .attr("fill", "green")
            
            var circle = group
               .append("circle")
               .attr("cx", 0)
               .attr("cy", 0)
               .attr("r", 30)
               .attr("fill", "red")
         &lt;/script&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will yield the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/transformation.htm" height="150px" width="660px"></iframe>
<h2>Transform Library</h2>
<p>D3.js provides a separate library to manage transform without manually creating the transform attributes. It provides methods to handle all type of transformation. Some of the methods are <b>transform(), translate(), scale(), rotate()</b>, etc. You can include <b>d3-transform</b> in your webpage using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "http://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
&lt;script src = "d3-transform.js"&gt;&lt;/script&gt;
</pre>
<p>In the above example, the transform code can be written as shown below &minus;</p>
<pre class="prettyprint notranslate">
var my_transform = d3Transform()
   .translate([60, 60])
   .rotate(30);

var group = svg
   .append("g")
   .attr("transform", my_transform);
</pre>
<h1>D3.js - Transition</h1>
<p>Transition is the process of changing from one state to another of an item. D3.js provides a <b>transition()</b> method to perform transition in the HTML page. Let us learn about  transition in this chapter.</p>
<h2>The transition() method</h2>
<p>The transition() method is available for all selectors and it starts the transition process. This method supports most of the selection methods such as – attr(), style(), etc. But, It does not support the append() and the data() methods, which need to be called before the transition() method. Also, it provides methods specific to transition like duration(), ease(), etc. A simple transition can be defined as follows &minus;</p>
<pre class="prettyprint notranslate">
d3.select("body")
   .transition()
   .style("background-color", "lightblue");
</pre>
<p>A transition can be directly created using the d3.transition() method and then used along with selectors as follows.</p>
<pre class="prettyprint notranslate">
var t = d3.transition()
   .duration(2000);
d3.select("body")
   .transition(t)
   .style("background-color", "lightblue");
</pre>
<h2>A Minimal Example</h2>
<p>Let us now create a basic example to understand how transition works.</p>
<p>Create a new HTML file, <b>transition_simple.html</b> with the following code.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;Simple transitions&lt;/h3&gt;
      &lt;script&gt;
         d3.select("body").transition().style("background-color", "lightblue");
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we have selected the <b>body</b> element and then started transition by calling the transition() method. Then, we have instructed to transit the background color from the current color, <b>white</b> to <b>light blue</b>.</p>
<p>Now, refresh the browser and on the screen, the background color changes from white to light blue. If we want to change the background color from light blue to gray, we can use the following transition &minus;</p>
<pre class="prettyprint notranslate">
d3.select("body").transition().style("background-color", "gray");
</pre>
<h1>D3.js - Animation</h1>
<p>D3.js supports animation through transition. We can do animation with proper use of transition. Transitions are a limited form of <b>Key Frame Animation</b> with only two key frames – start and end. The starting key frame is typically the current state of the DOM, and the ending key frame is a set of attributes, styles and other properties you specify. Transitions are well suited for transitioning to a new view without a complicated code that depends on the starting view.</p>
<p><b>Example</b> &minus; Let us consider the following code in “transition_color.html” page.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;Simple transitions&lt;/h3&gt;
      &lt;script&gt;
         d3.select("body").style("background-color", "lightblue") 
         // make the background-color lightblue.transition()
         .style("background-color", "gray");
         // make the background-color gray
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, the Background color of the document changed from white to light gray and then to gray.</p>
<h2>The duration() Method</h2>
<p>The duration() method allows property changes to occur smoothly over a specified duration rather than instantaneously. Let us make the transition which takes 5 seconds using the following code.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;Simple transitions&lt;/h3&gt;
      &lt;script&gt;
         d3.selectAll("h3").transition().style("color","green").duration(5000);
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, the transitions occurred smoothly and evenly. We can also assign RGB color code value directly using the following method.</p>
<pre class="prettyprint notranslate">
d3.selectAll("h3").transition().style("color","rgb(0,150,120)").duration(5000);
</pre>
<p>Now, each color number slowly, smoothly and evenly goes from 0 to 150. To get the accurate blending of in-between frames from the start frame value to the end frame value, D3.js uses an internal interpolate method. The syntax is given below &minus;</p>
<pre class="prettyprint notranslate">
d3.interpolate(a, b)
</pre>
<p>D3 also supports the following interpolation types &minus;</p>
<ul class="list">
<li><p><b>interpolateNumber</b> &minus; support numerical values.</p></li>
<li><p><b>interpolateRgb</b> &minus; support colors.</p></li>
<li><p><b>interpolateString</b> &minus; support string.</p></li>
</ul>
<p>D3.js takes care of using the proper interpolate method and in advanced cases, we can use the interpolate methods directly to get our desired result. We can even create a new interpolate method, if needed.</p>
<h2>The delay() Method</h2>
<p>The delay() method allows a transition to take place after a certain period of time. Consider the following code in “transition_delay.html”.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt; Simple transitions &lt;/h3&gt;
      &lt;script&gt;
         d3.selectAll("h3").transition()
            .style("font-size","28px").delay(2000).duration(2000);
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Lifecycle of Transition</h2>
<p>Transition has a four-phased lifecycle &minus;</p>
<ul class="list">
<li>The transition is scheduled.</li>
<li>The transition starts.</li>
<li>The transition runs.</li>
<li>The transition ends.</li>
</ul>
<p>Let us go through each of these one by one in detail.</p>
<h3>The Transition is scheduled</h3>
<p>A transition is scheduled when it is created. When we call <b>selection.transition</b>, we are scheduling a transition. This is also when we call <b>attr(), style()</b> and other transition methods to define the ending key frame.</p>
<h3>The Transition Starts</h3>
<p>A transition starts based on its delay, which was specified when the transition was scheduled. If no delay was specified, then the transition starts as soon as possible, which is typically after a few milliseconds.</p>
<p>If the transition has a delay, then the starting value should be set only when the transition starts. We can do this by listening to the start event &minus;</p>
<pre class="prettyprint notranslate">
d3.select("body")
   .transition()
   .delay(200)
   .each("start", function() { d3.select(this).style("color", "green"); })
   .style("color", "red");
</pre>
<h3>The Transition Runs</h3>
<p>When the transition runs, it repeatedly invoked with values of transition ranging from 0 to 1. In addition to delay and duration, transitions have easing to control timing. Easing distorts time, such as for slow-in and slow-out. Some easing functions may temporarily give values of t greater than 1 or less than 0.</p>
<h3>The Transition Ends</h3>
<p>The transition ending time is always exactly 1, so that the ending value is set exactly when the transition ends. A transition ends based on the sum of its delay and duration. When a transition ends, the end event is dispatched.</p>
<h1>D3.js - Drawing Charts</h1>
<p>D3.js is used to create a static SVG chart. It helps to draw the following charts &minus;</p>
<ul class="list">
<li>Bar Chart</li>
<li>Circle Chart</li>
<li>Pie Chart</li>
<li>Donut Chart</li>
<li>Line Chart</li>
<li>Bubble Chart, etc.</li>
</ul>
<p>This chapter explains about drawing charts in D3. Let us understand each of these in detail.</p>
<h2>Bar Chart</h2>
<p>Bar charts are one of the most commonly used types of graph and are used to display and compare the number, frequency or other measure (e.g. mean) for different discrete categories or groups. This graph is constructed in such a way that the heights or lengths of the different bars are proportional to the size of the category they represent.</p>
<p>The x-axis (the horizontal axis) represents the different categories it has no scale. The y axis (the vertical axis) does have a scale and this indicates the units of measurement. The bars can be drawn either vertically or horizontally depending upon the number of categories and length or complexity of the category.</p>
<h3>Draw a Bar Chart</h3>
<p>Let us create a bar chart in SVG using D3. For this example, we can use the <b>rect elements</b> for the bars and <b>text elements</b> to display our data values corresponding to the bars. </p>
<p>To create a bar chart in SVG using D3, let us follow the steps given below.</p>
<p><b>Step 1</b> &minus; <b>Adding style in the rect element</b> &minus; Let us add the following style to the rect element.</p>
<pre class="prettyprint notranslate">
svg rect {
   fill: gray;
}
</pre>
<p><b>Step 2</b> &minus; <b>Add styles in text element</b> &minus; Add the following CSS class to apply styles to text values. Add this style to SVG text element. It is defined below &minus;</p>
<pre class="prettyprint notranslate">
svg text {
   fill: yellow;
   font: 12px sans-serif;
   text-anchor: end;
}
</pre>
<p>Here, Fill is used to apply colors. Text-anchor is used to position the text towards the right end of the bars.</p>
<p><b>Step 3</b> &minus; <b>Define variables</b> &minus; Let us add the variables in the script. It is explained below.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [10, 5, 12, 15];
   var width = 300,
      scaleFactor = 20,
      barHeight = 30;
&lt;/script&gt;
</pre>
<p>Here,</p>
<ul class="list">
<li><p><b>Width</b> &minus; Width of the SVG.</p></li>
<li><p><b>Scalefactor</b> &minus; Scaled to a pixel value that is visible on the screen.</p></li>
<li><p><b>Barheight</b> &minus; This is the static height of the horizontal bars.</p></li>
</ul>
<p><b>Step 4</b> &minus; <b>Append SVG elements</b> &minus; Let us append SVG elements in D3 using the following code.</p>
<pre class="prettyprint notranslate">
var graph = d3.select("body")
   .append("svg")
   .attr("width", width)
   .attr("height", barHeight * data.length);
</pre>
<p>Here, we will first select the document body, create a new SVG element and then append it. We will build our bar graph inside this SVG element. Then, set the width and height of SVG. Height is calculated as bar height * number of data values.</p>
<p>We have taken the bar height as 30 and data array length is 4. Then SVG height is calculated as barheight* datalength which is 120 px.</p>
<p><b>Step 5</b> &minus; <b>Apply transformation</b> &minus; Let us apply the transformation in bar using the following code.</p>
<pre class="prettyprint notranslate">
var bar = graph.selectAll("g") 
   .data(data)
   .enter()
   .append("g")
   .attr("transform", function(d, i) {
      return "translate(0," + i * barHeight + ")";
   });
</pre>
<p>Here, each bar inside corresponds with an element. Therefore, we create group elements. Each of our group elements needs to be positioned one below the other to build a horizontal bar chart. Let us take a transformation formula index * bar height.</p>
<p><b>Step 6</b> &minus; <b>Append rect elements to the bar</b> &minus; In the previous step, we appended group elements. Now add the rect elements to the bar using the following code.</p>
<pre class="prettyprint notranslate">
bar.append("rect")
   .attr("width", function(d) {
      return d * scaleFactor;
   })
   .attr("height", barHeight - 1);
</pre>
<p>Here, the width is (data value * scale factor) and height is (bar height - margin).</p>
<p><b>Step 7</b> &minus; <b>Display data</b> &minus; This is the last step. Let us display the data on each bar using the following code.</p>
<pre class="prettyprint notranslate">
bar.append("text")
   .attr("x", function(d) { return (d*scaleFactor); })
   .attr("y", barHeight / 2)
   .attr("dy", ".35em")
   .text(function(d) { return d; });
</pre>
<p>Here, width is defined as (data value * scalefactor). Text elements do not support padding or margin. For this reason, we need to give it a “dy” offset. This is used to align the text vertically.</p>
<p><b>Step 8</b> &minus; <b>Working example</b> &minus; The complete code listing is shown in the following code block. Create a webpage <b>barcharts.html</b> and add the following changes.</p>
<p><b>barcharts.html</b></p>
<div class="demo-view">
<a href="http://tpcg.io/YUeJbK" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         svg rect {
            fill: gray;
         }
         
         svg text {
            fill: yellow;
            font: 12px sans-serif;
            text-anchor: end;
         }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         var data = [10, 5, 12, 15];
         
         var width = 300 
            scaleFactor = 20, 
            barHeight = 30;
         
         var graph = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", barHeight * data.length);
         
         var bar = graph.selectAll("g")
            .data(data)
            .enter()
            .append("g")
            .attr("transform", function(d, i) {
               return "translate(0," + i * barHeight + ")";
            });
         bar.append("rect").attr("width", function(d) {
            return d * scaleFactor;
         })
         
         .attr("height", barHeight - 1);
         
         bar.append("text")
            .attr("x", function(d) { return (d*scaleFactor); })
            .attr("y", barHeight / 2)
            .attr("dy", ".35em")
            .text(function(d) { return d; });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now request your browser, you will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/barcharts.htm" height="150px" width="660px"></iframe>
<h2>Circle Chart</h2>
<p>A Circle chart is a circular statistical graphic, which is divided into slices to illustrate a numerical proportion.</p>
<h3>Draw a Circle Chart</h3>
<p>Let us create a circle chart in SVG using D3. To do this, we must adhere to the following steps &minus;</p>
<p><b>Step 1</b> &minus; <b>Define variables</b> &minus; Let us add the variables in the script. It is shown in the code block below.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var width = 400;
   var height = 400;
   var data = [10, 20, 30];
   var colors = ['green', 'purple', 'yellow'];
&lt;/script&gt;
</pre>
<p>Here,</p>
<ul class="list">
<li><p><b>Width</b> &minus; width of the SVG.</p></li>
<li><p><b>Height</b> &minus; height of the SVG.</p></li>
<li><p><b>Data</b> &minus; array of data elements.</p></li>
<li><p><b>Colors</b> &minus; apply colors to the circle elements.</p></li>
</ul>
<p><b>Step 2</b> &minus; <b>Append SVG elements</b> &minus; Let us append SVG elements in D3 using the following code.</p>
<pre class="prettyprint notranslate">
var svg = d3.select("body")
   .append("svg")
   .attr("width", width)
   .attr("height", height);
</pre>
<p><b>Step 3</b> &minus; <b>Apply transformation</b> &minus; Let us apply the transformation in SVG using the following code.</p>
<pre class="prettyprint notranslate">
var g = svg.selectAll("g")
   .data(data)
   .enter()
   .append("g")
   .attr("transform", function(d, i) {
      return "translate(0,0)";
   })
</pre>
<p>Here,</p>
<p><b>var g = svg.selectAll(“g”)</b> &minus; Creates group element to hold the circles.</p>
<p><b>.data(data)</b> &minus; Binds our data array to the group elements.</p>
<p><b>.enter()</b> &minus; Creates placeholders for our group elements.</p>
<p><b>.append(“g”)</b> &minus; Appends group elements to our page.</p>
<pre class="prettyprint notranslate">
.attr("transform", function(d, i) {
   return "translate(0,0)";
})
</pre>
<p>Here, translate is used to position your elements with respect to the origin.</p>
<p><b>Step 4</b> &minus; <b>Append circle elements</b> &minus; Now, append circle elements to the group using the following code.</p>
<pre class="prettyprint notranslate">
g.append("circle")
</pre>
<p>Now, add the attributes to the group using the following code.</p>
<pre class="prettyprint notranslate">
.attr("cx", function(d, i) {
   return i*75 + 50;
})
</pre>
<p>Here, we use the x-coordinate of the center of each circle. We are multiplying the index of the circle with 75 and adding a padding of 50 between the circles.</p>
<p>Next, we set the y-coordinate of the center of each circle. This is used to uniform all the circles and it is defined below.</p>
<pre class="prettyprint notranslate">
.attr("cy", function(d, i) {
   return 75;
})
</pre>
<p>Next, set the radius of each circle. It is defined below,</p>
<pre class="prettyprint notranslate">
.attr("r", function(d) {
   return d*1.5;
})
</pre>
<p>Here, the radius is multiplied with data value along with a constant “1.5” to increase the circle's size. Finally, fill colors for each circle using the following code.</p>
<pre class="prettyprint notranslate">
.attr("fill", function(d, i){
   return colors[i];
})
</pre>
<p><b>Step 5</b> &minus; <b>Display data</b> &minus; This is the last step. Let us display the data on each circle using the following code.</p>
<pre class="prettyprint notranslate">
g.append("text")
   .attr("x", function(d, i) {
      return i * 75 + 25;
   })
   .attr("y", 80)
   .attr("stroke", "teal")
   .attr("font-size", "10px")
   .attr("font-family", "sans-serif")
   .text(function(d) {
      return d;
   });
</pre>
<p><b>Step 6</b> &minus; <b>Working Example</b> &minus; The complete code listing is shown in the following code block. Create a webpage <b>circlecharts.html</b> and add the following changes in it.</p>
<p><b>circlecharts.html</b></p>
<div class="demo-view">
<a href="http://tpcg.io/jWSDwe" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         var width = 400;
         
         var height = 400;
         
         var data = [10, 20, 30];
         
         var colors = ['green', 'purple', 'yellow'];
         
         var svg = d3
            .select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         
         var g = svg.selectAll("g")
            .data(data)
            .enter()
            .append("g")
            .attr("transform", function(d, i) {
               return "translate(0,0)";
            })
         
         g.append("circle").attr("cx", function(d, i) {
            return i*75 + 50;
         })
         
         .attr("cy", function(d, i) {
            return 75;
         })
  
         .attr("r", function(d) {
            return d*1.5;
         })
         
         .attr("fill", function(d, i){
            return colors[i];
         })
         
         g.append("text").attr("x", function(d, i) {
            return i * 75 + 25;
         })
         
         .attr("y", 80)
         .attr("stroke", "teal")
         .attr("font-size", "10px")
         .attr("font-family", "sans-serif").text(function(d) {
            return d;
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request your browser and following will be the response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/circlecharts.htm" height="150px" width="660px"></iframe>
<h2>Pie Chart</h2>
<p>A pie chart is a circular statistical graph. It is divided into slices to show numerical proportion. Let us understand how to create a pie chart in D3.</p>
<h3>Draw a Pie Chart</h3>
<p>Before starting to draw a pie chart, we need to understand the following two methods &minus;</p>
<ul class="list">
<li>The d3.arc() method and </li>
<li>The d3.pie() method.</li>
</ul>
<p>Let us understand both of these methods in detail.</p>
<p><b>The d3.arc() Method</b> &minus; The d3.arc() method generates an arc. You need to set an inner radius and an outer radius for the arc. If the inner radius is 0, the result will be a pie chart, otherwise the result will be a donut chart, which is discussed in the next section.</p>
<p><b>The d3.pie()Method</b> &minus; The d3.pie() method is used to generate a pie chart. It takes a data from dataset and calculates the start angle and end angle for each wedge of the pie chart.</p>
<p>Let us draw a pie chart using the following steps.</p>
<p><b>Step 1</b> &minus; <b>Applying styles</b> &minus; Let us apply the following style to an arc element.</p>
<pre class="prettyprint notranslate">
.arc text {
   font: 12px arial;
   text-anchor: middle;
}

.arc path {
   stroke: #fff;
}

.title {
   fill: green;
   font-weight: italic;
}
</pre>
<p>Here, fill is used to apply colors. A text-anchor is used to position the text towards the center of an arc.</p>
<p><b>Step 2</b> &minus; <b>Define variables</b> &minus; Define the variables in the script as shown below.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var svg = d3.select("svg"),
      width = svg.attr("width"),
      height = svg.attr("height"),
      radius = Math.min(width, height) / 2;
&lt;/script&gt;
</pre>
<p>Here,</p>
<ul class="list">
<li><p><b>Width</b> &minus; Width of the SVG.</p></li>
<li><p><b>Height</b> &minus; Height of the SVG.</p></li>
<li><p><b>Radius</b> &minus; It can be calculated using the function of Math.min(width, height) / 2;</p></li>
</ul>
<p><b>Step 3</b> &minus; <b>Apply Transformation</b> &minus; Apply the following transformation in SVG using the following code.</p>
<pre class="prettyprint notranslate">
var g = svg.append("g")
   .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
</pre>
<p>Now add colors using the <b>d3.scaleOrdinal</b> function as given below.</p>
<pre class="prettyprint notranslate">
var color = d3.scaleOrdinal(['gray', 'green', 'brown', 'orange']);
</pre>
<p><b>Step 4</b> &minus; <b>Generate a pie chart</b> &minus; Now, generate a pie chart using the function given below.</p>
<pre class="prettyprint notranslate">
var pie = d3.pie()
   .value(function(d) { return d.percent; });
</pre>
<p>Here, you can plot the percentage values. An anonymous function is required to return <b>d.percent</b> and set it as the pie value.</p>
<p><b>Step 5</b> &minus; <b>Define arcs for pie wedges</b> &minus; After generating the pie chart, now define arc for each pie wedges using the function given below.</p>
<pre class="prettyprint notranslate">
var arc = d3.arc()
   .outerRadius(radius)
   .innerRadius(0);
</pre>
<p>Here, this arc will be set to the path elements. The calculated radius is set to outerradius, while the innerradius is set to 0.</p>
<p><b>Step 6</b> &minus; <b>Add labels in wedges</b> &minus; Add the labels in pie wedges by providing the radius. It is defined as follows.</p>
<pre class="prettyprint notranslate">
var label = d3
   .arc()
   .outerRadius(radius)
   .innerRadius(radius - 80);
</pre>
<p><b>Step 7</b> &minus; <b>Read data</b> &minus; This is an important step. We can read data using the function given below.</p>
<pre class="prettyprint notranslate">
d3.csv("populations.csv", function(error, data) {
   if (error) {
      throw error;
   }
});
</pre>
<p>Here, <b>populations.csv</b> contains the data file. The <b>d3.csv</b> function reads data from the dataset. If data is not present, it throws an error. We can include this file in your D3 path.</p>
<p><b>Step 8</b> &minus; <b>Load data</b> &minus; The next step is to load data using the following code.</p>
<pre class="prettyprint notranslate">
var arc = g.selectAll(".arc")
   .data(pie(data))
   .enter()
   .append("g")
   .attr("class", "arc");
</pre>
<p>Here, we can assign data to group elements for each of the data values from the dataset.</p>
<p><b>Step 9</b> &minus; <b>Append path</b> &minus; Now, append path and assign a class ‘arc’ to groups as shown below.</p>
<pre class="prettyprint notranslate">
arcs.append("path")
   .attr("d", arc)
   .attr("fill", function(d) { return color(d.data.states); });
</pre>
<p>Here, fill is used to apply the data color. It is taken from the <b>d3.scaleOrdinal</b> function.</p>
<p><b>Step 10</b> &minus; <b>Append text</b> &minus; To display the text in labels using the following code.</p>
<pre class="prettyprint notranslate">
arc.append("text")
   .attr("transform", function(d) { 
      return "translate(" + label.centroid(d) + ")"; 
   })
.text(function(d) { return d.data.states; });
</pre>      
<p>Here, SVG text element is used to display text in labels. The label arcs that we created earlier using <b>d3.arc()</b> returns a centroid point, which is a position for labels. Finally, we provide data using the <b>d.data.browser</b>.</p>
<p><b>Step 11</b> &minus; <b>Append group elements</b> &minus; Append group elements attributes and add class title to color the text and make it italic, which is specified in Step 1 and is defined below.</p>
<pre class="prettyprint notranslate">
svg.append("g")
   .attr("transform", "translate(" + (width / 2 - 120) + "," + 20 + ")")
   .append("text")
   .text("Top population states in india")
   .attr("class", "title")
</pre>
<p><b>Step 12</b> &minus; <b>Working Example</b> &minus; To draw a pie chart, we can take a dataset of Indian population. This dataset shows the population in a dummy website, which is defined as follows.</p>
<p><b>population.csv</b></p>
<pre class="result notranslate">
states,percent
UP,80.00
Maharastra,70.00
Bihar,65.0
MP,60.00
Gujarat,50.0
WB,49.0
TN,35.0
</pre>
<p>Let us create a pie chart visualization for the above dataset. Create a webpage “piechart.html” and add the following code in it.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         .arc text {
            font: 12px arial;
            text-anchor: middle;
         }
         
         .arc path {
            stroke: #fff;
         }
        
        .title {
            fill: green;
            font-weight: italic;
         }
      &lt;/style&gt;
      
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;svg width = "400" height = "400"&gt;&lt;/svg&gt;
      &lt;script&gt;
         var svg = d3.select("svg"),
            width = svg.attr("width"),
            height = svg.attr("height"),
            radius = Math.min(width, height) / 2;
        
         var g = svg.append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

         var color = d3.scaleOrdinal([
            'gray', 'green', 'brown', 'orange', 'yellow', 'red', 'purple'
         ]);
         
         var pie = d3.pie().value(function(d) { 
            return d.percent; 
         });
         
         var path = d3.arc()
            .outerRadius(radius - 10).innerRadius(0);
        
         var label = d3.arc()
            .outerRadius(radius).innerRadius(radius - 80);
         
         d3.csv("populations.csv", function(error, data) {
            if (error) {
               throw error;
            }
            
            var arc = g.selectAll(".arc")
               .data(pie(data))
               .enter()
               .append("g")
               .attr("class", "arc");
            
            arc.append("path")
               .attr("d", path)
               .attr("fill", function(d) { return color(d.data.states); });
        
            console.log(arc)
        
            arc.append("text").attr("transform", function(d) { 
               return "translate(" + label.centroid(d) + ")"; 
            })
            
            .text(function(d) { return d.data.states; });
         });
         
         svg.append("g")
            .attr("transform", "translate(" + (width / 2 - 120) + "," + 20 + ")")
            .append("text").text("Top population states in india")
            .attr("class", "title")
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<!--<p>Now refresh the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/piechart.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/piecharts.jpg" alt="piechart" />
<h2>Donut Chart</h2>
<p>Donut or Doughnut chart is just a simple pie chart with a hole inside. We can define the hole radius to any size you need, both in percent or pixels. We can create a donut chart instead of a pie chart. Change the inner radius of the arc to use a value greater than zero. It is defined as follows.</p>
<pre class="prettyprint notranslate">
var arc = d3.arc()
   .outerRadius(radius)
   .innerRadius(100);
</pre>
<p>Same as the pie chart coding and with a slightly changed inner radius, we can generate a donut chart. Create a webpage <b>dounutchart.html</b> and add the following changes in it.</p>
<h3>Donutchart.html</h3>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;style&gt;
         .arc text {
            font: 12px arial;
            text-anchor: middle;
         }
        
         .arc path {
            stroke: #fff;
         }
        
         .title {
            fill: green;
            font-weight: italic;
         }
      &lt;/style&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;svg width = "400" height = "400"&gt;&lt;/svg&gt;
      &lt;script&gt;
         var svg = d3.select("svg"),
            width = svg.attr("width"),
            height = svg.attr("height"),
            radius = Math.min(width, height) / 2;
        
         var g = svg.append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");
        
         var color = d3.scaleOrdinal([
            'gray', 'green', 'brown', 'orange', 'yellow', 'red', 'purple'
         ]);
        
         var pie = d3.pie().value(function(d) { 
            return d.percent; 
         });
        
         var path = d3.arc()
            .outerRadius(radius)
            .innerRadius(100);
        
         var label = d3.arc()
            .outerRadius(radius)
            .innerRadius(radius - 80);
        
         d3.csv("populations.csv", function(error, data) {
            if (error) {
               throw error;
            }
            
            var arc = g.selectAll(".arc")
               .data(pie(data))
               .enter()
               .append("g")
               .attr("class", "arc");
               arc.append("path")
                  .attr("d", path)
                  .attr("fill", function(d) { return color(d.data.states); });
           
               console.log(arc)
           
               arc.append("text")
                  .attr("transform", function(d) { 
                     return "translate(" + label.centroid(d) + ")"; 
                   })
                  .text(function(d) { return d.data.states; });
         });
         
         svg.append("g")
            .attr("transform", "translate(" + (width / 2 - 120) + "," + 20 + ")")
            .append("text")
            .attr("class", "title")
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Here, we have changed the path variable as &minus;</p>
<pre class="prettyprint notranslate">
var path = d3.arc()
   .outerRadius(radius)
   .innerRadius(100);
</pre>
<p>We set the innerRadius value&gt;0 to generate a donut chart. Now, request the browser and we can see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/donut.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/donut_chart.jpg" alt="Donut Chart" />
<h1>D3.js - Graphs</h1>
<p>A Graph is a 2-dimensional flat space represented as a rectangle. Graphs have a coordinate space where x = 0 and y = 0 coordinates fall on the bottom left. According to mathematical Cartesian coordinate space, graphs have the X coordinate growing from left to right and the Y coordinate growing from bottom to top.</p>
<p>When we talk about drawing a circle with x = 30 and y = 30 coordinates, we go 30 units from the bottom left to the right and then we go 30 units up.</p>
<h2>SVG Coordinate Space</h2>
<p>SVG Coordinate Space works in the same way that a mathematical graph coordinate space works, except for two important features &minus;</p>
<ul class="list">
<li>SVG Coordinate space has x = 0 and y = 0 coordinates fall on the top left.</li>
<li>SVG Coordinate space has the Y coordinate growing from top to bottom.</li>
</ul>
<h3>SVG Coordinate Space Graph</h3>
<p>When we talk about drawing a circle with x = 30 and y = 30 coordinates in the SVG Coordinate Space, we go 30 units from the top left to the right and then we go down 30 units up. It is defined as follows.</p>
<pre class="prettyprint notranslate">
var svgContainer = d3
   .select("body")
   .append("svg")
   .attr("width", 200)
   .attr("height", 200);
</pre>
<p>Consider, SVG element as a graph 200 units wide and 200 units tall. We now know that the X and Y zero coordinates are at the top left. We also now know that as the Y coordinate grows, it will move from the top to the bottom of our graph. You can style the SVG elements as shown below.</p>
<pre class="prettyprint notranslate">
var svgContainer = d3
   .select("body").append("svg")
   .attr("width", 200)
   .attr("height", 200)
   .style("border", "1px solid black");
</pre>
<h3>Graph Example</h3>
<p>Let us consider an example of the Line graph.</p>
<p><b>Line Graph</b> &minus; A line graph is used to visualize the value of something over time. It compares two variables. Each variable is plotted along an axis. A line graph has a vertical axis and a horizontal axis.</p> 
<p>In this example graph, we can take csv file records as Indian States Population Growth form year 2006 to 2017. Let us first create a <b>data.csv</b> to show the population records.</p>
<p>Create a new csv file in your D3 folder &minus;</p>
<pre class="result notranslate">
year,population
2006,40
2008,45
2010,48
2012,51
2014,53
2016,57
2017,62
</pre>
<p>Now, save the file and perform the following steps to draw a line graph in D3. Let us go through each step in detail.</p>
<p><b>Step 1</b> &minus; <b>Adding styles</b> &minus; Let us add a style to the <b>line</b> class using the code given below.</p>
<pre class="prettyprint notranslate">
.line {
   fill: none;
   stroke: green;
   stroke-width: 5px;
}
</pre>
<p><b>Step 2</b> &minus; <b>Define variables</b> &minus; The SVG attributes are defined below.</p>
<pre class="prettyprint notranslate">
var margin = {top: 20, right: 20, bottom: 30, left: 50},
   width = 960 - margin.left - margin.right,
   height = 500 - margin.top - margin.bottom;
</pre>
<p>Here, the first line defines the four margins, which surround the block where the graph is positioned.</p>
<p><b>Step 3</b> &minus; <b>Define line</b> &minus; Draw a new line using the <b>d3.line()</b> function, which is shown below.</p>
<pre class="prettyprint notranslate">
var valueline = d3.line()
   .x(function(d) { return x(d.year); })
   .y(function(d) { return y(d.population); });
</pre>
<p>Here, Year represents the data in the X-axis records and the population refers to the data in the Y-axis.</p>
<p><b>Step 4</b> &minus; <b>Append SVG attributes</b> &minus; Append SVG attributes and group elements using the code below.</p>
<pre class="prettyprint notranslate">
var svg = d3.select("body").append("svg")
   .attr("width", width + margin.left + margin.right)
   .attr("height", height + margin.top + margin.bottom)
   .append("g").attr("transform",
      "translate(" + margin.left + "," + margin.top + ")");
</pre>
<p>Here, we have appended the group elements and applied the transformation.</p>
<p><b>Step 5</b> &minus; <b>Read data</b> &minus; Now, we can read data from our dataset <b>data.csv</b>.</p>
<pre class="prettyprint notranslate">
d3.csv("data.csv", function(error, data) {
   if (error) throw error;
}
</pre>
<p>Here, the data.csv is not present, it throws an error.</p>
<p><b>Step 6</b> &minus; <b>Format data</b> &minus; Now, format the data using the code below.</p>
<pre class="prettyprint notranslate">
data.forEach(function(d) {
   d.year = d.year;
   d.population = +d.population;
});
</pre>
<p>This above code ensures that all the values that are pulled out of the csv file are set and formatted correctly. Each row consists of two values &minus; one value for ‘year’ and another value for ‘population’. The function is pulling out values of ‘year’ and ‘population’ one row at a time.</p>
<p><b>Step 7</b> &minus; <b>Set scale range</b> &minus; After data formatted, you can set the scale range for X and Y.</p>
<pre class="prettyprint notranslate">
x.domain(d3.extent(data, function(d) { return d.year; }));
y.domain([0, d3.max(data, function(d) { return d.population; })]);
</pre>
<p><b>Step 8</b> &minus; <b>Append path</b> &minus; Append path and data as shown below.</p>
<pre class="prettyprint notranslate">
svg.append("path").data([data])
   .attr("class", "line").attr("d", valueline);
</pre>
<p><b>Step 9</b> &minus; <b>Add X-axis</b> &minus; Now, you can add X-axis using the code below.</p>
<pre class="prettyprint notranslate">
svg.append("g")
   .attr("transform", "translate(0," + height + ")")
   .call(d3.axisBottom(x));
</pre>
<p><b>Step 10</b> &minus; <b>Add Y-axis</b> &minus; We can add Y-axis to the group as shown below.</p>
<pre class="prettyprint notranslate">
svg.append("g")
   .call(d3.axisLeft(y));
</pre>
<p><b>Step 11</b> &minus; <b>Working Example</b> &minus; The complete code is given in the following code block. Create a simple webpage <b>linegraphs.html</b> and add the following changes to it.</p>
<p><b>graph.html</b></p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt; 
         .line {
            fill: none;
            stroke: green;
            stroke-width: 5px;
         }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         // set the dimensions and margins of the graph
         var margin = {top: 20, right: 20, bottom: 30, left: 50},
         width = 960 - margin.left - margin.right,
         height = 500 - margin.top - margin.bottom;

         // set the ranges
         var x = d3.scaleTime().range([0, width]);
         var y = d3.scaleLinear().range([height, 0]);

         // define the line
         var valueline = d3.line()
            .x(function(d) { return x(d.year); })
            .y(function(d) { return y(d.population); });

         // append the svg obgect to the body of the page
         // appends a 'group' element to 'svg'
         // moves the 'group' element to the top left margin
         var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g").attr("transform",
               "translate(" + margin.left + "," + margin.top + ")");

         // Get the data
         d3.csv("data.csv", function(error, data) {
            if (error) throw error;
            // format the data
            data.forEach(function(d) {
               d.year = d.year;
               d.population = +d.population;
            });

            // Scale the range of the data
            x.domain(d3.extent(data, function(d) { return d.year; }));
            y.domain([0, d3.max(data, function(d) { return d.population; })]);

            // Add the valueline path.
            svg.append("path")
               .data([data])
               .attr("class", "line")
               .attr("d", valueline);

            // Add the X Axis
            svg.append("g")
               .attr("transform", "translate(0," + height + ")")
               .call(d3.axisBottom(x));

            // Add the Y Axis
            svg.append("g")
               .call(d3.axisLeft(y));
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now request the browser and we will see the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/graph.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/graph.jpg" alt="Graph" />
<h1>D3.js - Geographies</h1>
<p>Geospatial coordinates are often used for weather or population data. D3.js gives us three tools for geographic data &minus;</p>
<ul class="list">
<li><p><b>Paths</b> &minus; They produce the final pixels.</p></li>
<li><p><b>Projections</b> &minus; They turn sphere coordinates into Cartesian coordinates and </p></li>
<li><p><b>Streams</b> &minus; They speed things up.</p></li>
</ul>
<p>Before learning what geographies in D3.js are, we should understand the following two terms &minus;</p>
<ul class="list">
<li>D3 Geo Path and</li>
<li>Projections</li>
</ul>
<p>Let us discuss these two terms in detail.</p>
<h2>D3 Geo Path</h2>
<p>It is a geographic path generator. GeoJSON generates SVG path data string or renders the path to a Canvas. A Canvas is recommended for dynamic or interactive projections to improve performance. To generate a D3 Geo Path Data Generator, you can call the following function.</p>
<pre class="prettyprint notranslate">
d3.geo.path()
</pre>
<p>Here, the <b>d3.geo.path()</b> path generator function allows us to select which Map Projection we want to use for the translation from Geo Coordinates to Cartesian Coordinates.</p>
<p>For example, if we want to show the map details of India, we can define a path as shown below.</p>
<pre class="prettyprint notranslate">
var path = d3.geo.path()
svg.append("path")
   .attr("d", path(states))
</pre>
<h2>Projections</h2>
<p>Projections transform spherical polygonal geometry to planar polygonal geometry. D3 provides the following projection implementations.</p>
<ul class="list">
<li><p><b>Azimuthal</b> &minus; Azimuthal projections project the sphere directly onto a plane.</p></li>
<li><p><b>Composite</b> &minus; Composite consists of several projections that are composed into a single display.</p></li>
<li><p><b>Conic</b> &minus; Projects the sphere onto a cone and then unroll the cone onto the plane.</p></li>
<li><p><b>Cylindrical</b> &minus; Cylindrical projections project the sphere onto a containing cylinder, and then unroll the cylinder onto the plane.</p></li>
</ul>
<p>To create a new projection, you can use the following function.</p>
<pre class="prettyprint notranslate">
d3.geoProjection(project)
</pre>
<p>It constructs a new projection from the specified raw projection project. The project function takes the longitude and latitude of a given point in radians. You can apply the following projection in your code.</p>
<pre class="prettyprint notranslate">
var width = 400
var height = 400
var projection = d3.geo.orthographic() 
var projections = d3.geo.equirectangular()
var project = d3.geo.gnomonic()
var p = d3.geo.mercator()
var pro = d3.geo.transverseMercator()
   .scale(100)
   .rotate([100,0,0])
   .translate([width/2, height/2])
   .clipAngle(45);
</pre>
<p>Here, we can apply any one of the above projections. Let us discuss each of these projections in brief.</p>
<ul class="list">
<li><p><b>d3.geo.orthographic()</b> &minus; The orthographic projection is an azimuthal projection suitable for displaying a single hemisphere; the point of perspective is at infinity.</p></li>
<li><p><b>d3.geo.gnomonic()</b> &minus; The gnomonic projection is an azimuthal projection that projects great circles as straight lines.</p></li>
<li><p><b>d3.geo.equirectangular()</b> &minus; The equirectangular is the simplest possible geographic projection. The identity function. It is neither equal-area nor conformal, but is sometimes used for raster data.</p></li>
<li><p><b>d3.geo.mercator()</b> &minus; The Spherical Mercator projection is commonly used by tiled mapping libraries.</p></li>
<li><p><b>d3.geo.transverseMercator()</b> &minus; The Transverse Mercator projection.</p></li>
</ul>
<h3>Working Example</h3>
<p>Let us create the map of India in this example. To do this, we should adhere to the following steps.</p>
<p><b>Step 1</b> &minus; <b>Apply styles</b> &minus; Let us add styles in map using the code below.</p>
<pre class="prettyprint notranslate">
&lt;style&gt;
   path {
      stroke: white;
      stroke-width: 0.5px;
      fill: grey;
   }
   
   .stateTN { fill: red; }
   .stateAP { fill: blue; }
   .stateMP{ fill: green; }
&lt;/style&gt;
</pre>
<p>Here, we have applied particular colors for state TN, AP and MP.</p>
<p><b>Step 2</b> &minus; <b>Include topojson script</b> &minus; TopoJSON is an extension of GeoJSON that encodes topology, which is defined below.</p>
<pre class="prettyprint notranslate">
&lt;script src = "http://d3js.org/topojson.v0.min.js"&gt;&lt;/script&gt;
</pre>
<p>We can include this script in our coding.</p>
<p><b>Step 3</b> &minus; <b>Define variables</b> &minus; Add variables in your script, using the code below.</p>
<pre class="prettyprint notranslate">
var width = 600;
var height = 400;
var projection = d3.geo.mercator()
   .center([78, 22])
   .scale(680)
   .translate([width / 2, height / 2]);
</pre>
<p>Here, SVG width is 600 and height is 400. The screen is a two-dimensional space and we are trying to present a three-dimensional object. So, we can grievously distort the land size / shape using the <b>d3.geo.mercator()</b> function.</p>
<p>The center is specified [78, 22], this sets the projection’s center to the specified location as a two-element array of longitude and latitude in degrees and returns the projection.</p>
<p>Here, the map has been centered on 78 degrees West and 22 degrees North.</p>
<p>The Scale is specified as 680, this sets the projection’s scale factor to the specified value. If the scale is not specified, it returns the current scale factor, which defaults to 150. It is important to note that scale factors are not consistent across projections.</p>
<p><b>Step 4</b> &minus; <b>Append SVG</b> &minus; Now, append the SVG attributes.</p>
<pre class="prettyprint notranslate">
var svg = d3.select("body").append("svg")
   .attr("width", width)
   .attr("height", height);
</pre>
<p><b>Step 5</b> &minus; <b>Create path</b> &minus; The following portion of code creates a new geographic path generator.</p>
<pre class="prettyprint notranslate">
var path = d3.geo.path()
   .projection(projection);
</pre>
<p>Here, the path generator (d3.geo.path()) is used to specify a projection type (.projection), which was defined earlier as a Mercator projection using the variable projection.</p>
<p><b>Step 6</b> &minus; <b>Generate data</b> &minus; indiatopo.json – This file contains so many records, which we can easily download from the following attachment.</p>
<p>Download <b>indiatopo.json file</b></p>
<p>After the file has been downloaded, we can add it our D3 location. The sample format is shown below.</p>
<pre class="prettyprint notranslate">
{"type":"Topology","transform":{"scale":[0.002923182318231823,0.0027427542754275428],
"translate":[68.1862,8.0765]},"objects":
{"states":{"type":"GeometryCollection",
"geometries":[{"type":"MultiPolygon","id":"AP","arcs":
[[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,
25,26,27,28,29,30,31,32,33,34]],[[35,36,37,38,39,40,41]],[[42]],
[[43,44,45]],[[46]],[[47]],[[48]],[[49]],[[50]],[[51]],[[52,53]],
[[54]],[[55]],[[56]],[[57,58]],[[59]],[[60]],[[61,62,63]],[[64]],
[[65]],[[66]],[[67]],[[68]],[[69]],[[-41,70]],
[[71]],[[72]],[[73]],[[74]],[[75]]],
"properties":{"name":"Andhra Pradesh"}},{"type":"MultiPolygon",
"id":"AR","arcs":[[[76,77,78,79,80,81,82]]],
"properties":{"name":"Arunachal Pradesh"}},{"type":"MultiPolygon",
"id":"AS","arcs":[[[83,84,85,86,87,88,89,90,
91,92,93,94,95,96,97,98,99,100,101,102,103]],
[[104,105,106,107]],[[108,109]]], ......

........................................
</pre>
<p><b>Step 7</b> &minus; <b>Draw map</b> &minus; Now, read the data from the <b>indiatopo.json</b> file and draw the map.</p>
<pre class="prettyprint notranslate">
d3.json("indiatopo.json", function(error, topology) {
   g.selectAll("path")
   .data(topojson.object(topology, topology.objects.states)
   .geometries)
   .enter()
   .append("path")
   .attr("class", function(d) { return "state" + d.id; })
   .attr("d", path)
});
</pre>
<p>Here, we will load the TopoJSON file with the coordinates for the India map (indiatopo.json). Then we declare that we are going to act on all the path elements in the graphic. It is defined as, g.selectAll(“path”). We will then pull the data that defines the countries from the TopoJSON file.</p>
<pre class="prettyprint notranslate">
.data(topojson.object(topology, topology.objects.states)
   .geometries)
</pre>
<p>Finally, we will add it to the data that we are going to display using the <b>.enter()</b> method and then we append that data as path elements using the <b>.append(“path”)</b> method.</p>
<!--<p><b>Step 8</b> &minus; <b>Working Example</b> &minus; The complete code listing is given in the following code block. Create a webpage called <b>geomap.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;meta charset = "UTF-8"&gt;
      &lt;title&gt;D3 India Map&lt;/title&gt;
      &lt;style&gt;
         path {
            stroke: white;
            stroke-width: 0.5px;
            fill: grey;
         }
         
         .stateTN { fill: red; }
         .stateAP { fill: blue; }
         .stateMP{ fill: green; }
      &lt;/style&gt;
      &lt;script src = "http://d3js.org/d3.v3.min.js"&gt;&lt;/script&gt;
      &lt;script src = "http://d3js.org/topojson.v0.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         var width = 600;
         
         var height = 400;
         
         var projection = d3.geo.mercator()
            .center([78, 22])
            .scale(680)
            .translate([width / 2, height / 2]);
         
         var svg = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         
         var path = d3.geo.path().projection(projection);
         
         var g = svg.append("g");
         
         d3.json("indiatopo.json", function(error, topology) {
            g.selectAll("path")
               .data(topojson.object(topology, topology.objects.states)
               .geometries)
               .enter()
               .append("path")
               .attr("class", function(d) { return "state" + d.id; })
               .attr("d", path)
         });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/india.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/geographies.jpg" alt="Geographies" />-->
<h1>D3.js - Array API</h1>
<p>D3 contains a collection of modules. You can use each module independently or a collection of modules together to perform operations. This chapter explains about the Array API in detail.</p>
<h2>What is an Array?</h2>
<p>An Array contains a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>
<h2>Configuring API</h2>
<p>You can easily configure the API using the script below.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-array.v1.min.js"&gt;&lt;/script&gt;
&lt;body&gt;
   &lt;script&gt;
   &lt;/script&gt;
&lt;/body&gt;
</pre>
<h2>Array Statistics API Methods</h2>
<p>Following are some of the most important array statistics API methods.</p>
<ul class="list">
<li>d3.min(array)</li>
<li>d3.max(array)</li>
<li>d3.extent(array)</li>
<li>d3.sum(array)</li>
<li>d3.mean(array)</li>
<li>d3.quantile(array)</li>
<li>d3.variance(array)</li>
<li>d3.deviation(array)</li>
</ul>
<p>Let us discuss each of these in detail.</p>
<h3>d3.min(array)</h3>
<p>It returns the minimum value in the given array using natural order.</p>
<p><b>Example</b> &minus; Consider the following script.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.min(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns the minmum value in the array 20 in your console.</p>
<h3>d3.max(array)</h3>
<p>It returns the maximum value in a given array.</p>
<p><b>Example</b> &minus; Consider the following script.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.max(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns the maximum value in the array (100) in your console.</p>
<h3>d3.extent(array)</h3>
<p>It returns the minimum and maximum value in the given array.</p>
<p><b>Example</b> &minus; Consider the following script.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.extent(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns an extent value [20,100].</p>
<h3>d3.sum(array)</h3>
<p>It returns the sum of the given array of numbers. If the array is empty, it returns 0.</p>
<p><b>Example</b> &minus; Consider the following below.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.sum(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns the sum value is 300.</p>
<h3>d3.mean(array)</h3>
<p>It returns the mean of the given array of numbers.</p>
<p><b>Example</b> &minus; Consider the following below.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.mean(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns the mean value as 60. Similarly, you can check the median value.</p>
<h3>d3.quantile(array)</h3>
<p>It returns the p-quantile of the given sorted array of numbers, where p is a number in the range[0, 1]. For example, the median can be computed using p = 0.5, the first quartile at p = 0.25, and the third quartile at p = 0.75. This implementation uses the R-7 method, default R programming language and Excel.</p>
<p><b>Example</b> &minus; Consider the following example.</p>
<pre class="prettyprint notranslate">
var data = [20, 40, 60, 80, 100];
d3.quantile(data, 0); // output is 20
d3.quantile(data, 0.5); // output is 60
d3.quantile(data, 1); // output is 100
</pre>
<p>Similarly, you can check other values.</p>
<h3>d3.variance(array)</h3>
<p>It returns the variance of the given array of numbers.</p>
<p><b>Example</b> &minus; Consider the following script.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.variance(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns the variance value as 1000.</p>
<h3>d3.deviation(array)</h3>
<p>It returns the standard deviation of the given array. If the array has fewer than two values, it returns as undefined.</p>
<p><b>Example</b> &minus; Consider the following below.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var data = [20,40,60,80,100];
   console.log(d3.deviation(data));
&lt;/script&gt;
</pre>
<p><b>Result</b> &minus; The above script returns the deviation value as 31.622776601683793.</p>
<p><b>Example</b> &minus; Let us perform all the Array API methods discussed above using the following script. Create a webpage “array.html” and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 array API&lt;/h3&gt;
      &lt;script&gt;
         var data = [20,40,60,80,100];
         console.log(d3.min(data));  
         console.log(d3.max(data));
         console.log(d3.extent(data));
         console.log(d3.sum(data));
         console.log(d3.mean(data));
         console.log(d3.quantile(data,0.5));
         console.log(d3.variance(data));
         console.log(d3.deviation(data));
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/array.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/array.jpg" alt="Array" />
<h2>Array Search API Methods</h2>
<p>Following are a couple of important Array search API methods.</p>
<ul class="list">
<li>d3.scan(array)</li>
<li>d3.ascending(a, b)</li>
</ul>
<p>Let us understand both of these in detail.</p>
<h3>d3.scan(array)</h3>
<p>This method is used to perform a linear scan of the specified array. It returns the index of the least element to the specified comparator. A simple example is defined below.</p>
<p><b>Example</b> &minus;</p>
<pre class="prettyprint notranslate">
var array = [{one: 1}, {one: 10}];
console.log(d3.scan(array, function(a, b) { return a.one - b.one; })); // output is 0
console.log(d3.scan(array, function(a, b) { return b.one - a.one; })); // output is 1
</pre>
<h3>d3.ascending(a, b)</h3>
<p>This method is used to perform the comparator function. It can be implemented as &minus;</p>
<pre class="prettyprint notranslate">
function ascending(a, b) {
   return a &lt; b ? -1 : a &gt; b ? 1 : a &gt; =  b ? 0 : NaN;
}
</pre>
<p>If no comparator function is specified to the built-in sort method, the default order is alphabetical. The above function returns -1, if a is less than b, or 1, if a is greater than b, or 0.</p> 
<p>Similarly, you can perform descending(a, b) method. It returns -1, if a is greater than b, or 1, if a is less than b, or 0. This function performs reverse natural order.</p>
<p><b>Example</b> &minus;</p>
<p>Create a webpage <b>array_search.html</b> and add the following changes to it.</p>
<div class="demo-view">
<a href="http://tpcg.io/RwHH3z" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 array API&lt;/h3&gt;
      &lt;script&gt;
         var array = [{one: 1}, {one: 10}];
         console.log(d3.scan(array, function(a, b) { return a.one - b.one; })); // 0
         console.log(d3.scan(array, function(a, b) { return b.one - a.one; })); // 1
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/array_search.htm" height="150px" width="660px"></iframe>
<h2>Array Transformations API</h2>
<p>Following are some of the most prominent array transformations API methods.</p>
<ul class="list">
<li>d3.cross(a, b[, reducer])</li>
<li>d3.merge(arrays)</li>
<li>d3.pairs(array[, reducer])</li>
<li>d3.permute(array, indexes)</li>
<li>d3.zip(arrays)</li>
</ul>
<p>Let us understand each of these in detail.</p>
<h3>d3.cross(a, b[, reducer])</h3>
<p>This method is used to return the Cartesian product of the given two arrays a and b. A simple example is defined below.</p>
<pre class="prettyprint notranslate">
d3.cross([10, 20], ["a", "b"]); // output is [[10, "a"], [10, "b"], [20, "a"], [20, "b"]]
</pre>
<h3>d3.merge(arrays)</h3>
<p>This method is used to merge the arrays and it is defined below.</p>
<pre class="prettyprint notranslate">
d3.merge([[10], [20]]); // output is [10, 20]
</pre>
<h3>d3.pairs(array[, reducer])</h3>
<p>This method is used to pair array elements and is defined below.</p>
<pre class="prettyprint notranslate">
d3.pairs([10, 20, 30, 40]); // output is [[10, 20], [20, 30], [30, 40]]
</pre>
<h3>d3.permute(array, indexes)</h3>
<p>This method is used to perform the permutation from specified array and indexes. You can also perform the values from an object into an array. It is explained below.</p>
<pre class="prettyprint notranslate">
var object = {fruit:"mango", color: "yellow"},
   fields = ["fruit", "color"];
d3.permute(object, fields); // output is "mango" "yellow"
</pre>
<h3>d3.zip(arrays)</h3>
<p>This method is used to return an array of arrays. If arrays contain only a single array, the returned array contains one-element arrays. If no argument is specified, then the returned array is empty. It is defined below.</p>
<pre class="prettyprint notranslate">
d3.zip([10, 20], [30, 40]); // output is [[10, 30], [20, 40]]
</pre>
<p><b>Example</b> &minus; Create a webpage <b>array_transform</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 array API&lt;/h3&gt;
      &lt;script&gt;
         console.log(d3.cross([10, 20], ["a", "b"]));
         console.log(d3.merge([[10], [30]]));
         console.log(d3.pairs([10, 20, 30, 40]));
         var object = {fruit:"mango", color: "yellow"},
         fields = ["fruit", "color"];
         console.log(d3.permute(object, fields)); 
         console.log(d3.zip([10, 20], [30, 40]));
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/array_transform.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/array_transform.jpg" alt="Array Transform" />
<h1>D3.js - Collections API</h1>
<p>A collection is simply an object that groups multiple elements into a single unit. It is also called as a container. This chapter explains about collections API in detail.</p>
<h2>Configuring API</h2>
<p>You can configure the API using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-collection.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Collections API Methods</h2>
<p>Collections API contains objects, maps, sets and nests. Following are the most commonly used collections API methods.</p>
<ul class="list">
<li>Objects API</li>
<li>Maps API</li>
<li>Sets API</li>
<li>Nests API</li>
</ul>
<p>Let us go through each of these API in detail.</p>
<h3>Objects API</h3>
<p>Object API is one of the important data type. It supports the following methods &minus;</p>
<ul class="list">
<li><p><b>d3.keys(object)</b> &minus; This method contains the object property keys and returns an array of the property names.</p></li>
<li><p><b>d3.values(object)</b> &minus; This method contains the object values and returns an array of property values.</p></li>
<li><p><b>d3.entries(object)</b> &minus; This method is used to return an array containing both keys and values of the specified object. Each entry is an object with a key and value.</p></li>
</ul>
<p><b>Example</b> &minus; Let us consider the following code.</p>
<pre class="prettyprint notranslate">
d3.entries({one: 1})
</pre>
<p>Here, key is one and value is 1.</p>
<p><b>Example</b> &minus; Create a webpage <b>objects.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 collection API&lt;/h3&gt;
      &lt;script&gt;
         var month = {"jan": 1, "Feb": 2, "mar": 3, "apr": 4};
         console.log(d3.keys(month));
         console.log(d3.values(month));
         console.log(d3.entries(month));
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and you will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/prototype/src/objects.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/collections_api.jpg" alt="Collections API" />
<h3>Maps API</h3>
<p>A map contains values based on key and value pairs. Each key and value pair is known as an entry. A Map contains only unique keys. It is useful to search, update or delete elements based on the key. Let us go through the various Maps API methods in detail.</p>
<ul class="list">
<li><p><b>d3.map([object[, key]])</b> &minus; This method is used to create a new map. Object is used to copy all enumerable properties.</p></li>
<li><p><b>map.has(key)</b> &minus; This method is used to check whether map has an entry for the specified key string.</p></li>
<li><p><b>map.get(key)</b> &minus; This method is used to return the value for the specified key string.</p></li>
<li><p><b>map.set(key, value)</b> &minus; This method is used to set the value for the specified key string. If the map previously had an entry for the same key string, the old entry is replaced with the new value.</p></li>
<li><p><b>map.remove(key)</b> &minus; It is used to remove the map entry. If the key is not specified, it returns false.</p></li>
<li><p><b>map.clear()</b> &minus; Removes all entries from this map.</p></li>
<li><p><b>map.keys()</b> &minus; Returns an array of string keys for every entry in this map.</p></li>
<li><p><b>map.values()</b> &minus; Returns an array of values for every entry in this map.</p></li>
<li><p><b>map.entries()</b> &minus; Returns an array of key-value objects for each entry in this map.</p></li>
<li><p><b>(x) map.each(function)</b> &minus; This method is used to call the specified function for each entry in the map.</p></li>
<li><p><b>(xi) map.empty()</b> &minus; Returns true if and only if this map has zero entries.</p></li>
<li><p><b>(xii) map.size()</b> &minus; Returns the number of entries in this map.</p></li>
</ul>
<p><b>Example</b> &minus; Create a webpage <b>maps.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 collection API&lt;/h3&gt;
      &lt;script&gt;
         var month = d3.map([{name: "jan"}, {name: "feb"}], 
            function(d) { return d.name; });
         console.log(month.get("jan")); // {"name": "jan"}
         console.log(month.get("apr")); // undefined
         console.log(month.has("feb")); // true
         
         var map =  d3.map().set("fruit", "mango");
         console.log(map.get("fruit")); // mango
         console.log(map.remove("fruit")); // remove key and return true.
         console.log(map.size());    // size is 0 because key removed.
         console.log(map.empty());   // true
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/prototype/src/maps.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/map_api.jpg" alt="Map API" />
<p>Similarly, you can perform other operations as well.</p>
<h3>Sets API</h3>
<p>A Set is a Collection that cannot contain duplicate elements. It models the mathematical set abstraction. Let us go through the various Sets API methods in detail.</p>
<ul class="list">
<li><p><b>d3.set([array[, accessor]])</b> &minus; This method is used to create a new set. Array is used to add string values. An accessor is optional.</p></li>
<li><p><b>set.has(value)</b> &minus; This method is used to check whether the set has an entry for the specified value string.</p></li>
<li><p><b>set.add(value)</b> &minus; It is used to add the specified value string to the set.</p></li>
<li><p><b>set.remove(value)</b> &minus; It is used to remove the set that contains the specified value string.</p></li>
<li><p><b>set.clear()</b> &minus; Removes all the values from this set.</p></li>
<li><p><b>set.values()</b> &minus; This method is used to return an array of values to the set.</p></li>
<li><p><b>set.empty()</b> &minus; Returns true if and only if this set has zero values.</p></li>
<li><p><b>set.size()</b> &minus; Returns the number of values in this set.</p></li>
</ul>
<p><b>Example</b> &minus; Create a webpage <b>sets.html</b> and add the following changes to it.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 collection API&lt;/h3&gt;
      &lt;script&gt;
         var fruits =  d3.set().add("mango")
          .add("apple").add("orange");
         console.log(fruits.has("grapes")); // return false.
         console.log(fruits.remove("apple")); //true
         console.log(fruits.size());    // size is 2
         console.log(fruits.empty());   // true
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response on our screen.</p>
<iframe onload="resizeFrame(this)" class="result" src="/prototype/src/sets.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/sets_api.jpg" alt="Sets API" />
<p>Similarly, we can perform other operations as well.</p>
<h3>Nests API</h3>
<p>Nesting API contains elements in array and performs in a hierarchical tree structure. Let us go through the various Nests API methods in detail.</p>
<ul class="list">
<li><p><b>d3.nest()</b> &minus; This method is used to create a new nest.</p></li>
<li><p><b>nest.key(key)</b> &minus; This method is used to initialize a new key function. This function is used to invoke each element in an input array and return elements in the group.</p></li>
<li><p><b>nest.sortKeys(comparator)</b> &minus; This method is used to sort keys in a specified comparator. Function is defined as d3.ascending or d3.descending.</p></li>
<li><p><b>nest.sortValues(comparator)</b> &minus; This method is used to sort values in a specified comparator. Comparator function sorts leaf elements.</p></li>
<li><p><b>nest.map(array)</b> &minus; This method is used to apply the specified array and in returning a nested map. Each entry in the returned map corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions.</p></li>
<li><p><b>nest.object(array)</b> &minus; This method is used to apply the nest operator to the specified array and return a nested object.</p></li>
<li><p><b>nest.entries(array)</b> &minus; This method is used to apply the nest operator to the specified array and return an array of key-values entries.</p></li>
</ul>
<p>Consider a simple webpage <b>nest.html</b> to perform the above discussed nest methods.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 Nest API&lt;/h3&gt;
      &lt;script&gt;
         var data = [
            {
               "color" : "red",
               "key" : 1
            },
            {
               "color" : "green",
               "key" : 2
            },
            {
               "color" : "blue",
               "key" : 75
            }
         ]
         var nest =  d3.nest()
            .key(function (d) { return d.color; })
            .entries(data)console.log(nest);
         var filter = nest.filter(function (d) { return d.key = = = 'red' })
         console.log(filter);
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, check the result in a browser and we will see the following result.</p>
<pre class="result notranslate">
Array[3]
0: Object
1: Object
2: Object
length: 3
__proto__: Array[0]

Array[1]
0: Object
length: 1
__proto__: Array[0]
</pre>
<h1>D3.js - Selection API</h1>
<p>Selections are powerful data-driven transformation of the document object model (DOM). It is used to set Attributes, Styles, Properties, HTML or Text Content and much more. This chapter explains the selections API in detail.</p>
<h2>Configuring the API</h2>
<p>You can configure the API directly using the script below.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-selection.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Selection API Methods</h2>
<p>Following are the most important methods in selection API.</p>
<ul class="list">
<li>d3.selection()</li>
<li>d3.select(selector)</li>
<li>d3.selectAll(selector)</li>
<li>selection.selectAll(selector)</li>
<li>selection.filter(filter)</li>
<li>selection.merge(other)</li>
<li>d3.matcher(selector)</li>
<li>d3.creator(name)</li>
<li>selection.each(function)</li>
<li>selection.call(function[, arguments…])</li>
<li>d3.local()</li>
<li>local.set(node, value)</li>
<li>local.get(node)</li>
<li>local.remove(node)</li>
</ul>
<p>Let us now discuss each of these in detail.</p>
<h3>d3.selection()</h3>
<p>This method is used to select the root element. This function can also be used to test for selections or to extend the selection d3js.</p>
<h3>d3.select(selector)</h3>
<p>This method is used to select the first element that matches the specified selector string.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var body = d3.select("body");
</pre>
<p>If the selector is not a string, then it selects the specified node, which is defined below.</p>
<pre class="prettyprint notranslate">
d3.select("p").style("color", "red");
</pre>
<h3>d3.selectAll(selector)</h3>
<p>This method selects all the elements that match the specified selector string.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var body = d3.selectAll("body");
</pre>
<p>If the selector is not a string, then it selects the specified array of nodes, which is defined below.</p>
<pre class="prettyprint notranslate">
d3.selectAll("body").style("color", "red");
</pre>
<h3>selection.selectAll(selector)</h3>
<p>This method is used to select an element. It selects the descendant elements that match the specified selector string. The elements in the returned selection are grouped by their corresponding parent node in this selection. If no element matches the specified selector for the current element, or if the selector is null, the group at the current index will be empty.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var b = d3.selectAll("p").selectAll("b");
</pre>
<h3>selection.filter(filter)</h3>
<p>This method is used to filter the selection, returning a new selection that contains only the elements for which the specified filter is true.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var even = d3.selectAll("tr").filter(":nth-child(odd)");
</pre>
<p>Here, filter a selection of table rows returns only odd.</p>
<h3>selection.merge(other)</h3>
<p>This method is used to return a new selection merging with the specified other selection.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var rect = svg.selectAll("rect").data(data);
rect.enter().append("rect").merge(rect);
</pre>
<h3>d3.matcher(selector)</h3>
<p>This method is used to assign the specified selector. It returns a function, which returns true.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var p = selection.filter(d3.matcher("p"));
</pre>
<h3>d3.creator(name)</h3>
<p>This method is used to assign the specified element name It returns a function, which creates an element of the given name, assuming that this is the parent element.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
selection.append(d3.creator("p"));
</pre>
<h3>selection.each(function)</h3>
<p>This method is used to invoke the specified function for each selected element, in the order passed by the current datum (d), the current index (i) and the current group (nodes) with this as the current DOM element (nodes[i]). It is explained below.</p>
<pre class="prettyprint notranslate">
parent.each(function(p, j) {
   d3.select(this)
      .selectAll(".child")
      .text(function(d, i) { return "child " + d.name + " of " + p.name; });
});
</pre>
<h3>selection.call(function[, arguments…])</h3>
<p>It is used to invoke the specified function exactly once. The syntax is shown below.</p>
<pre class="prettyprint notranslate">
function name(selection, first, last) {
   selection.attr("first-name", first).attr("last-name", last);
}
</pre>
<p>This method can be specified as shown below.</p>
<pre class="prettyprint notranslate">
d3.selectAll("p").call(name, "Adam", "David");
</pre>
<h3>d3.local()</h3>
<p>D3 local allows you to define the local state that is independent of data.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
var data = d3.local();
</pre>
<p>Unlike var, the value of each local is also scoped by the DOM.</p>
<h3>local.set(node, value)</h3>
<p>This method sets the value of this local on the specified node to the value.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
selection.each(function(d) 
   { data.set(this, d.value); });
local.get(node)
</pre>
<p>This method returns the value of this local on the specified node. If the node does not define this local, then it returns the value from the nearest ancestor that defines it.</p>
<h3>local.remove(node)</h3>
<p>This method deletes this local’s value from the specified node. It returns true, if the node defined, otherwise returns false.</p>
<h1>D3.js - Paths API</h1>
<p>Paths are used to draw Rectangles, Circles, Ellipses, Polylines, Polygons, Straight Lines, and Curves. SVG Paths represent the outline of a shape that can be Stroked, Filled, Used as a Clipping Path, or any combination of all three. This chapter explains Paths API in detail.</p>
<h2>Configuring Paths</h2>
<p>You can configure the Paths API using the script below.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-path.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Paths API Methods</h2>
<p>Some of the most commonly used Paths API methods are briefly described as follows.</p>
<ul class="list">
<li><p><b>d3.path()</b> &minus; This method is used to create a new path.</p></li>
<li><p><b>path.moveTo(x, y)</b> &minus; This method is used to move the specified x and y values.</p></li>
<li><p><b>path.closePath()</b> &minus; This method is used to close the current path.</p></li>
<li><p><b>path.lineTo(x, y)</b> &minus; This method is used to create a line from current point to defined x,y values.</p></li>
<li><p><b>path.quadraticCurveTo(cpx, cpy, x, y)</b> &minus; This method is used to draw a quadratic curve from current point to the specified point.</p></li>
<li><p><b>path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x, y)</b> &minus; This method is used to draw a bezier curve from current point to the specified point.</p></li>
<li><p><b>path.arcTo(x1, y1, x2, y2, radius)</b> &minus; This method is used to draw a circular arc from the current point to a specified point (x1, y1) and end the line between the specified points (x1, y1) and (x2, y2).</p></li>
<li><p><b>path.arc(x, y, radius, startAngle, endAngle[, anticlockwise])</b> &minus; This method is used to draw a circular arc to the specified center (x, y), radius, startAngle and endAngle. If anticlockwise value is true then the arc is drawn in the anticlockwise direction, otherwise it is drawn in the clockwise direction.</p></li>
<li><p><b>path.rect(x, y, w, h)</b> &minus; This method is used to create new sub path containing just the four points (x, y), (x + w, y), (x + w, y + h), (x, y + h). With these four points connected by straight lines marks the subpath as closed. Equivalent to context.rect and uses SVG’s “lineto” commands.</p></li>
<li><p><b>path.toString()</b> &minus; Returns the string representation of this path according to SVG’s path data specification.</p></li>
</ul>
<h3>Example</h3>
<p>Let us draw a simple line in D3 using path API. Create a webpage <b>linepath.html</b> and add the following changes in it.</p>
<div class="demo-view">
<a href="http://tpcg.io/HiLbuo" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;meta charset = "UTF-8"&gt;
   &lt;head&gt;
      &lt;title&gt;SVG path line Generator&lt;/title&gt;
   &lt;/head&gt;

   &lt;style&gt;
      path {
         fill: green;
         stroke: #aaa;
      }
   &lt;/style&gt;
   
   &lt;body&gt;
      &lt;svg width = "600" height = "100"&gt;
         &lt;path transform = "translate(200, 0)" /&gt;
      &lt;/svg&gt;
      
      &lt;script src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;script&gt;
         var data = [[0, 20], [50, 30], [100, 50], [200, 60], [300, 90]];
         var lineGenerator = d3.line();
         var pathString = lineGenerator(data);
         d3.select('path').attr('d', pathString);
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following result.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/linepath.htm" height="150px" width="660px"></iframe>
<h1>D3.js - Scales API</h1>
<p>D3.js provides scale functions to perform data transformations. These functions map an input domain to an output range.</p>
<h2>Configuring API</h2>
<p>We can configure the API directly using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-array.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-collection.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-color.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-format.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-interpolate.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-time.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-time-format.v2.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-scale.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Scales API Methods</h2>
<p>D3 provides the following important scaling methods for different types of charts. Let us understand then in detail.</p>
<ul class="list">
<li><p><b>d3.scaleLinear()</b> &minus; Constructs a continuous linear scale where we can input data (domain) maps to the specified output range.</p></li>
<li><p><b>d3.scaleIdentity()</b> &minus; Construct a linear scale where the input data is the same as the output.</p></li>
<li><p><b>d3.scaleTime()</b> &minus; Construct a linear scale where the input data is in the dates and the output in numbers.</p></li>
<li><p><b>d3.scaleLog()</b> &minus; Construct a logarithmic scale.</p></li>
<li><p><b>d3.scaleSqrt()</b> &minus; Construct a square root scale.</p></li>
<li><p><b>d3.scalePow()</b> &minus; Construct an exponential scale.</p></li>
<li><p><b>d3.scaleSequential()</b> &minus; Construct a sequential scale where output range is fixed by interpolator function.</p></li>
<li><p><b>d3.scaleQuantize()</b> &minus; Construct a quantize scale with discrete output range.</p></li>
<li><p><b>d3.scaleQuantile()</b> &minus; Construct a quantile scale where the input sample data maps to the discrete output range.</p></li>
<li><p><b>d3.scaleThreshold()</b> &minus; Construct a scale where the arbitrary input data maps to the discrete output range.</p></li>
<li><p><b>d3.scaleBand()</b> &minus; Band scales are like ordinal scales except the output range is continuous and numeric.</p></li>
<li><p><b>d3.scalePoint()</b> &minus; Construct a point scale.</p></li>
<li><p><b>d3.scaleOrdinal()</b> &minus; Construct an ordinal scale where the input data includes alphabets and are mapped to the discrete numeric output range.</p></li>
</ul>
<p>Before doing a working example, let us first understand the following two terms &minus;</p>
<ul class="list">
<li><p><b>Domain</b> &minus; The Domain denotes minimum and maximum values of your input data.</p></li>
<li><p><b>Range</b> &minus; The Range is the output range, which we would like the input values to map to...</p></li>
</ul>
<h3>Working Example</h3>
<p>Let us perform the d3.scaleLinear function in this example. To do this, you need to adhere to the following steps &minus;</p>
<p><b>Step 1</b> &minus; <b>Define variables</b> &minus; Define SVG variables and data using the coding below.</p>
<pre class="prettyprint notranslate">
var data = [100, 200, 300, 400, 800, 0]
   var width = 500, 
      barHeight = 20, 
      margin = 1;
</pre>
<p><b>Step 2</b> &minus; <b>Create linear scale</b> &minus; Use the following code to create a linear scale.</p>
<pre class="prettyprint notranslate">
var scale = d3.scaleLinear()
   .domain([d3.min(data), d3.max(data)])
   .range([100, 400]);
</pre>
<p>Here, for the minimum and maximum value for our domain manually, we can use the built-in <b>d3.min()</b> and <b>d3.max()</b> functions, which will return minimum and maximum values respectively from our data array.</p>
<p><b>Step 3</b> &minus; <b>Append SVG attributes</b> &minus; Append the SVG elements using the code given below.</p>
<pre class="prettyprint notranslate">
var svg = d3.select("body")
   .append("svg")
   .attr("width", width)
   .attr("height", barHeight * data.length);
</pre>
<p><b>Step 4</b> &minus; <b>Apply transformation</b> &minus; Apply the transformation using the code below.</p>
<pre class="prettyprint notranslate">
var g = svg.selectAll("g")
   .data(data).enter().append("g")
   .attr("transform", function (d, i) {
      return "translate(0," + i * barHeight + ")";
});
</pre>
<p><b>Step 5</b> &minus; <b>Append rect elements</b> &minus; Append the rect elements to scaling as shown below.</p>
<pre class="prettyprint notranslate">
g.append("rect")
   .attr("width", function (d) {
      return scale(d);
   })
   .attr("height", barHeight - margin)
</pre>
<p><b>Step 6</b> &minus; <b>Display data</b> &minus; Now display the data using the coding given below.</p>
<pre class="prettyprint notranslate">
g.append("text")
   .attr("x", function (d) { return (scale(d)); })
   .attr("y", barHeight / 2)
   .attr("dy", ".35em")
   .text(function (d) { return d; });
</pre>
<p><b>Step 7</b> &minus; <b>Working Example</b> &minus; Now, let us create a bar chart using the d3.scaleLinear() function as follows. </p>
<p>Create a webpage “scales.html” and add the following changes to it.</p>
<div class="demo-view">
<a href="http://tpcg.io/vSIUs0" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         var data = [100, 200, 300, 350, 400, 250]
         var width = 500, barHeight = 20, margin = 1;
         
         var scale = d3.scaleLinear()
            .domain([d3.min(data), d3.max(data)])
            .range([100, 400]);
         
         var svg = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", barHeight * data.length);
         
         var g = svg.selectAll("g")
            .data(data)
            .enter()
            .append("g")
            .attr("transform", function (d, i) {
               return "translate(0," + i * barHeight + ")";
         });
    
         g.append("rect")
         .attr("width", function (d) {
            return scale(d);
         })
         
         .attr("height", barHeight - margin)
         g.append("text")
         .attr("x", function (d) { return (scale(d)); })
         .attr("y", barHeight / 2).attr("dy", ".35em")
         .text(function (d) { return d; });
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The above code will display the following result in the browser.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/scales.htm" height="150px" width="660px"></iframe>
<h1>D3.js - Axis API</h1>
<p>D3 provides functions to draw axes. An axis is made of Lines, Ticks and Labels. An axis uses a Scale, so each axis will need to be given a scale to work with.</p>
<h2>Configuring the Axis API</h2>
<p>You can configure the API using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-axis.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Axis API Methods</h2>
<p>D3 provides the following significant functions to draw axes. They are described in brief as follows.</p>
<ul class="list">
<li><p><b>d3.axisTop()</b> &minus; This method is used to create a top horizontal axis.</p></li>
<li><p><b>d3.axisRight()</b> &minus; This method is used to create a vertical right-oriented axis.</p></li>
<li><p><b>d3.axisBottom()</b> &minus; This method is used to create a bottom horizontal axis.</p></li>
<li><p><b>d3.axisLeft()</b> &minus; It creates left vertical axis.</p></li>
</ul>
<h3>Working Example</h3>
<p>Let us learn how to add the x and y-axis to a graph. To do this, we need to adhere to the steps given below.</p>
<p><b>Step 1</b> &minus; <b>Define variables</b> &minus; Define SVG and data variables using the code below.</p>
<pre class="prettyprint notranslate">
var width = 400, height = 400;
var data = [100, 150, 200, 250, 280, 300];
var svg = d3.select("body")
   .append("svg")
   .attr("width", width)
   .attr("height", height);
</pre>
<p><b>Step 2</b> &minus; <b>Create a scale linear function</b> &minus; Create a scale linear function for both x and y axis as defined below.</p>
<pre class="prettyprint notranslate">
var xscale = d3.scaleLinear()
   .domain([0, d3.max(data)])
   .range([0, width - 100]);

var yscale = d3.scaleLinear()
   .domain([0, d3.max(data)])
   .range([height/2, 0]);
</pre>
<p>Here, we have created a linear scale and specified the domain and the range.</p>
<p><b>Step 3</b> &minus; <b>Add scales to x-axis</b> &minus; Now, we can add scales to the x-axis using the following code.</p>
<pre class="prettyprint notranslate">
var x_axis = d3.axisBottom()
   .scale(xscale);
</pre>
<p>Here, we use d3.axisBottom to create our x-axis and provide it with the scale, which is defined earlier.</p>
<p><b>Step 4</b> &minus; <b>Add scales to the y-axis</b> &minus; Use the following code to add scales to the y-axis.</p>
<pre class="prettyprint notranslate">
var y_axis = d3.axisLeft()
   .scale(yscale);
</pre>
<p>Here, we use the d3.axisLeft to create our y-axis and provide it with the scale we defined above.</p>
<p><b>Step 5</b> &minus; <b>Apply transformation</b> &minus; You can append a group element and insert the x, y axis, which is defined below.</p>
<pre class="prettyprint notranslate">
svg.append("g")
   .attr("transform", "translate(50, 10)")
   .call(y_axis);
</pre>
<p><b>Step 6</b> &minus; <b>Append group elements</b> &minus; Apply transition and group elements using the following code.</p>
<pre class="prettyprint notranslate">
var xAxisTranslate = height/2 + 10;
svg.append("g")
   .attr("transform", "translate(50, " + xAxisTranslate  +")")
   .call(x_axis)
</pre>
<p><b>Step 7</b> &minus; <b>Working Example</b> &minus; The complete code listing is given in the following code block. Create a webpage <b>axes.html</b> and add the following changes to it.</p>
<div class="demo-view">
<a href="http://tpcg.io/KVT6Im" class="demo" rel="nofollow" target="_blank"><i class="fa-external-link"></i> Live Demo</a>
</div>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
      &lt;style&gt;
         svg text {
            fill: purple;
            font: 12px sans-serif;
            text-anchor: end;
         }
      &lt;/style&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;script&gt;
         var width = 400, height = 400;
         var data = [100, 120, 140, 160, 180, 200];
         var svg = d3.select("body")
            .append("svg")
            .attr("width", width)
            .attr("height", height);
         
         var xscale = d3.scaleLinear()
            .domain([0, d3.max(data)])
            .range([0, width - 100]);
         
         var yscale = d3.scaleLinear()
            .domain([0, d3.max(data)])
            .range([height/2, 0]);
    
         var x_axis = d3.axisBottom().scale(xscale);
         
         var y_axis = d3.axisLeft().scale(yscale);
         
         svg.append("g")
            .attr("transform", "translate(50, 10)")
            .call(y_axis);
         
         var xAxisTranslate = height/2 + 10;
         
         svg.append("g")
            .attr("transform", "translate(50, " + xAxisTranslate  +")")
            .call(x_axis)
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following changes.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/axes.htm" height="150px" width="660px"></iframe>
<h1>D3.js - Shapes API</h1>
<p>This chapter discusses the different shape generators in D3.js.</p>
<h2>Configuring API</h2>
<p>You can configure the Shapes API using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-path.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-shape.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Shapes Generators</h2>
<p>D3.js supports different shapes. Let us go through the prominent shapes in detail.</p>
<h3>Arcs API</h3>
<p>The arc generator produces a circle or annulus shape. We have used these API methods in the previous pie charts chapter. Let us understand the various Arcs API methods in detail.</p>
<ul class="list">
<li><p><b>d3.arc()</b> &minus; This method is used to create a new arc generator.</p></li>
<li><p><b>arc(args)</b> &minus; It is used to generate an arc with the specified given arguments. Default settings with an object radii and angles is defined below.</p></li>
</ul>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var arc = d3.arc();
   arc({
      innerRadius: 0,
      outerRadius: 100,
      startAngle: 0,
      endAngle: Math.PI / 2
   });
&lt;/script&gt;
</pre>
<ul class="list">
<li><p><b>arc.centroid(args)</b> &minus; This method is used to compute the midpoint [x, y] of the centerline of the arc with the specified arguments.</p></li>
<li><p><b>arc.innerRadius([radius])</b> &minus; This method is used to set the inner radius from the given radius and return an arc generator. It is defined below &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
function innerRadius(d) {
   return d.innerRadius;
}
</pre>
<ul class="list">
<li><p><b>arc.outerRadius([radius])</b> &minus; This method is used to set the outer radius from the given radius and return an arc generator. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function outerRadius(d) {
   return d.outerRadius;
}
</pre>
<ul class="list">
<li><p><b>arc.cornerRadius([radius])</b> &minus; This method is used to set the corner radius from the given radius and return an arc generator. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function cornerRadius() {
   return 0;
}
</pre>
<p>If the corner radius is greater than zero, the corners of the arc are rounded using the circles of the given radius. The corner radius may not be larger than (outerRadius - innerRadius) / 2.</p>
<ul class="list">
<li><p><b>arc.startAngle([angle])</b> &minus; This method is used to set the start angle to the function from the given angle. It is defined as follows &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
function startAngle(d) {
   return d.startAngle;
}
</pre>
<ul class="list">
<li><p><b>arc.endAngle([angle])</b> &minus; This method is used to set the end angle to the function from the given angle. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function endAngle(d) {
   return d.endAngle;
}
</pre>
<ul class="list">
<li><p><b>arc.padAngle([angle])</b> &minus; This method is used to set the pad angle to the function from the given angle. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function padAngle() {
   return d &amp;&amp; d.padAngle;
}
</pre>
<ul class="list">
<li><p><b>(x) arc.padRadius([radius])</b> &minus; This method is used to set the pad radius to the specified function from the given radius. The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius *padAngle.</p></li>
<li><p><b>(xi) arc.context([context])</b> &minus; This method is used to set the context and return an arc generator.</p></li>
</ul>
<h2>Pies API</h2>
<p>This API is used to create a Pie generator. We have performed these API methods in the previous chapter. We will discuss all those methods in detail.</p>
<ul class="list">
<li><p><b>d3.pie()</b> &minus; Constructs a new pie generator with the default settings.</p></li>
<li><p><b>pie(data[, arguments])</b> &minus; This method is used to generate a pie for the given array values. It returns an array of objects. Objects are datum's arc angles. Each object has the following properties &minus;</p>
<ul class="list">
<li><p><b>data</b> &minus; the input datum; the corresponding element in the input data array.</p></li>
<li><p><b>value</b> &minus; the numeric value of the arc.</p></li>
<li><p><b>index</b> &minus; index of the arc.</p></li>
<li><p><b>startAngle</b> &minus; the start angle of the arc.</p></li>
<li><p><b>endAngle</b> &minus; the end angle of the arc.</p></li>
<li><p><b>padAngle</b> &minus; the pad angle of the arc.</p></li>
</ul>
</li>
<li><p><b>pie.value([value])</b> &minus; This method is used to set the value to the specified function and generates a pie. It is defined as follows &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
function value(d) {
   return d;
}
</pre>
<ul class="list">
<li><p><b>pie.sort([compare])</b> &minus; This method is used to sort the data to the specified function and generates pie. The comparator function is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
pie.sort(function(a, b) 
   { return a.name.localeCompare(b.name); }
);
</pre>
<p>Here, the compare function takes two arguments ‘a’ and ‘b’, each element from the input data array. If the arc for ‘a’ should be before the arc for ‘b’, then the comparator must return a number less than zero. If the arc for ‘a’ should be after the arc for ‘b’, then the comparator must return a number greater than zero.</p>
<ul class="list">
<li><p><b>pie.sortValues([compare])</b> &minus; This method is used to compare the value from the given function and generates a pie. The function is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function compare(a, b) {
   return b - a;
}
</pre>
<ul class="list">
<li><p><b>pie.startAngle([angle])</b> &minus; This method is used to set the start angle of the pie to the specified function. If the angle is not specified, it returns the current start angle. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function startAngle() {
   return 0;
}
</pre>
<ul class="list">
<li><p><b>pie.endAngle([angle])</b> &minus; This method is used to set the end angle of the pie to the specified function. If angle is not specified, it returns the current end angle. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function endAngle() {
   return 2 * Math.PI;
}
</pre>
<ul class="list">
<li><p><b>pie.padAngle([angle])</b> &minus; This method is used to set the pad angle to the specified function and generates the pie. The function is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function padAngle() {
   return 0;
}
</pre>
<h2>Lines API</h2>
<p>Lines API is used to generate a line. We have used these API methods in the <b>Graphs</b> chapter. Let us go through each methods in detail.</p>
<ul class="list">
<li><p><b>d3.line()</b> &minus; This method is used to create a new line generator.</p></li>
<li><p><b>line(data)</b> &minus; This method is used to generate a line for the given array of data.</p></li>
<li><p><b>line.x([x])</b> &minus; This method is used to set the x accessor to the specified function and generates a line. The function is defined below,</p></li>
</ul>
<pre class="prettyprint notranslate">
function x(d) {
   return d[0];
}
</pre>
<ul class="list">
<li><p><b>line.y([y])</b> &minus; This method is used to set the ‘y’’ accessor to the specified function and generates a line. The function is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function y(d) {
   return d[1];
}
</pre>
<ul class="list">
<li><p><b>line.defined([defined])</b> &minus; This method is used to set the defined accessor to the specified function. It is defined as follows.</p></li>
</ul>
<pre class="prettyprint notranslate">
function defined() {
  return true;
}
</pre>
<ul class="list">
<li><p><b>line.curve([curve])</b> &minus; It is used to set the curve and generates the line.</p></li>
<li><p><b>line.context([context])</b> &minus; This method is used to set the context and generates a line. If the context is not specified, it returns null.</p></li>
<li><p><b>d3.lineRadial()</b> &minus; This method is used to create new radial line; it is equivalent to the Cartesian line generator.</p></li>
<li><p><b>lineRadial.radius([radius])</b> &minus; This method is used to draw a radial line and the accessor returns the radius. It takes distance from the origin(0,0).</p></li>
</ul>
<p>In the next chapter, we will learn about the Colors API in D3.js.</p>
<h1>D3.js - Colors API</h1>
<p>Colors are displayed combining RED, GREEN and BLUE. Colors can be specified in the following different ways &minus;</p>
<ul class="list">
<li>By color names</li>
<li>As RGB values</li>
<li>As hexadecimal values</li>
<li>As HSL values</li>
<li>As HWB values</li>
</ul>
<p>The d3-color API provides representations for various colors. You can perform conversion and manipulation operations in API. Let us understand these operations in detail.</p>
<h2>Configuring API</h2>
<p>You can directly load API using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-color.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Basic Operations</h2>
<p>Let us go through the basic color operations in D3.</p>
<p><b>Convert color value to HSL</b> &minus; To convert color value to HSL, use the following <b>Example</b> &minus;</p>
<pre class="prettyprint notranslate">
var convert = d3.hsl("green");
</pre>
<p>You can rotate the hue by 45° as shown below.</p>
<pre class="prettyprint notranslate">
convert.h + =  45;
</pre>
<p>Similarly, you can change the saturation level as well. To fade the color value, you can change the opacity value as shown below.</p>
<pre class="prettyprint notranslate">
convert.opacity = 0.5;
</pre>
<h2>Color API Methods</h2>
<p>Following are some of the most important Color API Methods.</p>
<ul class="list">
<li>d3.color(specifier)</li>
<li>color.opacity</li>
<li>color.rgb()</li>
<li>color.toString()</li>
<li>color.displayable()</li>
<li>d3.rgb(color)</li>
<li>d3.hsl(color)</li>
<li>d3.lab(color)</li>
<li>d3.hcl(color)</li>
<li>d3.cubehelix(color)</li>
</ul>
<p>Let us understand each of these Color API Methods in detail.</p>
<h3>d3.color(specifier)</h3>
<p>It is used to parse the specified CSS color and return RGB or HSL color. If specifier is not given, then null is returned.</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var color = d3.color("green");  // asign color name directly
   console.log(color);
&lt;/script&gt;
</pre>
<p>We will see the following response on our screen &minus;</p>
<pre class="result notranslate">
{r: 0, g: 128, b: 0, opacity: 1}
</pre>
<h3>color.opacity</h3>
<p>If we want to fade the color, we can change the opacity value. It is in the range of [0, 1].</p>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var color = d3.color("green");
   console.log(color.opacity);
&lt;/script&gt;
</pre>
<p>We will see the following response on the screen &minus;</p>
<pre class="result notranslate">
1
</pre>
<h3>color.rgb()</h3>
<p>It returns the RGB value for the color. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var color = d3.color("green");
   console.log(color.rgb());
&lt;/script&gt;
</pre>
<p>We will see the following response on our screen.</p>
<pre class="result notranslate">
{r: 0, g: 128, b: 0, opacity: 1}
</pre>
<h3>color.toString()</h3>
<p>It returns a string representing the color according to the CSS Object Model specification. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var color = d3.color("green");
   console.log(color.toString());
&lt;/script&gt;
</pre>
<p>We will see the following response on our screen.</p>
<pre class="result notranslate">
rgb(0, 128, 0)
</pre>
<h3>color.displayable()</h3>
<p>Returns true, if the color is displayable. Returns false, if RGB color value is less than 0 or greater than 255, or if the opacity is not in the range [0, 1]. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var color = d3.color("green");
   console.log(color.displayable());
&lt;/script&gt;
</pre>
<p>We will see the following response on our screen.</p>
<pre class="result notranslate">
true
</pre>
<h3>d3.rgb(color)</h3>
<p>This method is used to construct a new RGB color. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   console.log(d3.rgb("yellow"));
   console.log(d3.rgb(200,100,0));
&lt;/script&gt;
</pre>
<p>We will see the following response on the screen.</p>
<pre class="result notranslate">
{r: 255, g: 255, b: 0, opacity: 1}
{r: 200, g: 100, b: 0, opacity: 1}
</pre>
<h3>d3.hsl(color)</h3>
<p>It is used to construct a new HSL color. Values are exposed as h, s and l properties on the returned instance. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var hsl = d3.hsl("blue");
   console.log(hsl.h + =  90);
   console.log(hsl.opacity = 0.5);
&lt;/script&gt;
</pre>
<p>We will see the following response on the screen.</p>
<pre class="result notranslate">
330
0.5
</pre>
<h3>d3.lab(color)</h3>
<p>It constructs a new Lab color. The channel values are exposed as ‘l’, ‘a’ and ‘b’ properties on the returned instance.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var lab = d3.lab("blue");
   console.log(lab);
&lt;/script&gt;
</pre>
<p>We will see the following response on the screen.</p>
<pre class="result notranslate">
{l: 32.29701093285073, a: 79.18751984512221, b: -107.8601617541481, opacity: 1}
</pre>
<h3>d3.hcl(color)</h3>
<p>Constructs a new HCL color. The channel values are exposed as h, c and l properties on the returned instance. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var hcl = d3.hcl("blue");
   console.log(hcl);
&lt;/script&gt;
</pre>
<p>We will see the following response on the screen.</p>
<pre class="result notranslate">
{h: 306.2849380699878, c: 133.80761485376166, l: 32.29701093285073, opacity: 1}
</pre>
<h3>d3.cubehelix(color)</h3>
<p>Constructs a new Cubehelix color. Values are exposed as h, s and l properties on the returned instance. Let us consider the following example.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var hcl = d3.hcl("blue");
   console.log(hcl);
&lt;/script&gt;
</pre>
<p>We will see the following response on the screen,</p>
<pre class="result notranslate">
{h: 236.94217167732103, s: 4.614386868039719, l: 0.10999954957200976, opacity: 1}
</pre>
<h3>Working Example</h3>
<p>Let us create a new webpage – <b>color.html</b> to perform all the color API methods. The complete code listing is defined below.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;script type = "text/javascript" src = "https://d3js.org/d3.v4.min.js"&gt;&lt;/script&gt;
   &lt;/head&gt;

   &lt;body&gt;
      &lt;h3&gt;D3 colors API&lt;/h3&gt;
      &lt;script&gt;
         var color = d3.color("green");
         console.log(color);
         console.log(color.opacity);
         console.log(color.rgb());
         console.log(color.toString());
         console.log(color.displayable());
         console.log(d3.rgb("yellow"));
         console.log(d3.rgb(200,100,0));
         var hsl = d3.hsl("blue");
         console.log(hsl.h + =  90);
         console.log(hsl.opacity = 0.5);
         var lab = d3.lab("blue");
         console.log(lab);
         var hcl = d3.hcl("blue");
         console.log(hcl);
         var cube = d3.cubehelix("blue");
         console.log(cube);
      &lt;/script&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>Now, request the browser and we will see the following response.</p>
<iframe onload="resizeFrame(this)" class="result" src="/d3js/src/color.htm" height="150px" width="660px"></iframe>
<img src="/d3js/images/colors_api.jpg" alt="Colors API" />
<h1>D3.js - Transitions API</h1>
<p>D3 Transitions take a selection of elements and for each element; it applies a transition to a part of the current definition of the element.</p>
<h2>Configuring API</h2>
<p>You can configure the transition API using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-color.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-dispatch.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-ease.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-interpolate.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-selection.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-timer.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-transition.v1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;

&lt;/script&gt;
</pre>
<h2>Transition API Methods</h2>
<p>Let us go through the Transition API methods in detail.</p>
<h2>Selecting Elements</h2>
<p>Let us discuss the various selecting elements in detail.</p>
<ul class="list">
<li><p><b>selection.transition([name])</b> &minus; This method is used to return a new selection transition with the name. If a name is not specified, it returns null.</p></li>
<li><p><b>selection.interrupt([name])</b> &minus; This method is used to interrupt the selected elements of the transition with the name and is defined below.</p></li>
</ul>
<pre class="prettyprint notranslate">
selection.interrupt().selectAll("*").interrupt();
</pre>
<ul class="list">
<li><p><b>d3.interrupt(node[, name])</b> &minus; This method is used to interrupt the transition of the specified name on the specified node.</p></li>
<li><p><b>d3.transition([name])</b> &minus; This method is used to return a new transition with the specified name.</p></li>
<li><p><b>transition.select(selector)</b> &minus; This method is used to select the first element that matches the specified selector and returns a transition on the resulting selection, which is defined below.</p></li>
</ul>
<pre class="prettyprint notranslate">
transition
   .selection()
   .select(selector)
   .transition(transition)
</pre>
<ul class="list">
<li><p><b>transition.selectAll(selector)</b> &minus; This method is used to select all the elements that matches the specified selector and returns a transition on the resulting selection. It is defined below &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
transition
   .selection()
   .selectAll(selector)
   .transition(transition)
</pre>
<ul class="list">
<li><p><b>transition.filter(filter)</b> &minus; This method is used to select the elements matching the specified filter, they are defined below.</p></li>
</ul>
<pre class="prettyprint notranslate">
transition
   .selection()
   .filter(filter)
   .transition(transition)
</pre>
<ul class="list">
<li><p><b>transition.merge(other)</b> &minus; This method is used to merge the transition with other transition. It is defined below.</p></li>
</ul>
<pre class="prettyprint notranslate">
transition
   .selection()
   .merge(other.selection())
   .transition(transition)
</pre>
<ul class="list">
<li><p><b>transition.transition()</b> &minus; This method is used to return a new transition on the selected elements. It is scheduled to start when the transition stops. The new transition inherits this transition’s name, duration and easing. </p></li>
</ul>
<p><b>Example</b> &minus; Let us consider the following example.</p>
<pre class="prettyprint notranslate">
d3.selectAll(".body")
   .transition() 
   
   // fade to yellow.
   .style("fill", "yellow")
   .transition() 
   
   // Wait for five second. Then change blue, and remove.
   .delay(5000)
   .style("fill", "blue")
   .remove();
</pre>
<p>Here, the body fades to yellow and starts just five seconds before the last transition.</p>
<ul class="list">
<li><p><b>d3.active(node[, name])</b> &minus; This method is used to return the transition on the specified node with the name.</p></li>
</ul>
<h3>Timing Methods</h3>
<p>Let us go through the transition timing API methods in detail.</p>
<ul class="list">
<li><p><b>transition.delay([value])</b> &minus; This method is used to set the transition delay to the specified value. If a function is evaluated for each selected element, it is passed to the current datum ‘d’ and index ‘i', with the context as the current DOM element. If a value is not specified, returns the current value of the delay for the first (non-null) element in the transition. It is defined below,</p></li>
</ul>
<pre class="prettyprint notranslate">
transition.delay(function(d, i) { return i * 10; });
</pre>
<ul class="list">
<li><p><b>transition.duration([value])</b> &minus; This method is used to set the transition duration to the specified value. If a value is not specified, returns the current value of the duration for the first (non-null) element in the transition.</p></li>
<li><p><b>transition.ease([value])</b> &minus; This method is used to ease the transition value for selected elements. The easing function is invoked for each frame of the animation and passed the normalized time ‘t’ in the range [0, 1]. If a value is not specified, it returns the current easing function for the first (non-null) element in the transition.</p></li>
</ul>
<p>In the next chapter, we will discuss the drag and drop concept in d3.js.</p>
<h1>D3.js - Dragging API</h1>
<p>Drag and drop is one of the most familiar concept in d3.js. This chapter explains dragging and its methods in detail.</p>
<h2>Installation</h2>
<p>We can directly include dragging API using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script src = "https://d3js.org/d3-dispatch.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-selection.v1.min.js"&gt;&lt;/script&gt;
&lt;script src = "https://d3js.org/d3-drag.v1.min.js"&gt;&lt;/script&gt;
</pre>
<h2>Dragging API Methods</h2>
<p>Following are some of the most important dragging API methods in D3.js.</p>
<ul class="list">
<li>d3.drag()</li>
<li>drag(selection)</li>
<li>drag.container([container])</li>
<li>drag.filter([filter])</li>
<li>drag.subject([subject])</li>
<li>drag.clickDistance([distance])</li>
<li>drag.on(typenames, [listener])</li>
<li>d3.dragDisable(window)</li>
<li>d3.dragEnable(window[, noclick])</li>
</ul>
<p>Let us now understand each of these in detail.</p>
<h3>d3.drag()</h3>
<p>This method is used to create a new dragging. You can call this method using the following script.</p>
<pre class="prettyprint notranslate">
&lt;script&gt;
   var drag = d3.drag();
&lt;/script&gt;
</pre>
<h3>drag(selection)</h3>
<p>This method is used to apply the dragging to the specified selection. You can invoke this function using <b>selection.call</b>. A simple example is defined below.</p>
<pre class="prettyprint notranslate">
d3.select(".node").call(d3.drag().on("drag", mousemo