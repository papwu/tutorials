<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Watir - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Watir - Quick Guide - Watir (Web Application Testing in Ruby), pronounced as Water is an open source tool developed using Ruby which helps in automating web application that suits "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/watir/watir_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#29abe2;
}
a.demo {
    background:#29abe2;
}
li.heading {
    background:#29abe2;
}
.course-box{background:#29abe2}
.home-intro-sub p{color:#29abe2}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/watir/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<style>
.ts {
  vertical-align:middle !important;
  text-align:center !important;   
}
</style>
<div class="mini-logo">
<img src="/watir/images/watir-mini-logo.jpg" alt="Watir Tutorial" />
</div>
<ul class="toc chapters" >
<li class="heading">Watir Tutorial</li>
<li><a href="/watir/index.htm">Watir - Home</a></li>
<li><a href="/watir/watir_overview.htm">Watir - Overview</a></li>
<li><a href="/watir/watir_introduction.htm">Watir - Introduction</a></li>
<li><a href="/watir/watir_environment_setup.htm">Watir - Environment Setup</a></li>
<li><a href="/watir/watir_installing_drivers_for_browsers.htm">Watir - Installing Drivers for Browsers</a></li>
<li><a href="/watir/watir_working_with_browsers.htm">Watir - Working with Browsers</a></li>
<li><a href="/watir/watir_web_elements.htm">Watir - Web Elements</a></li>
<li><a href="/watir/watir_locating_web_elements.htm">Watir - Locating Web Elements</a></li>
<li><a href="/watir/watir_working_with_iframes.htm">Watir - Working with Iframes</a></li>
<li><a href="/watir/watir_automatic_waits.htm">Watir - Automatic Waits</a></li>
<li><a href="/watir/watir_headless_testing.htm">Watir - Headless Testing</a></li>
<li><a href="/watir/watir_mobile_testing.htm">Watir - Mobile Testing</a></li>
<li><a href="/watir/watir_capturing_screenshots.htm">Watir - Capturing Screenshots</a></li>
<li><a href="/watir/watir_page_objects.htm">Watir - Page Objects</a></li>
<li><a href="/watir/watir_page_performance.htm">Watir - Page Performance</a></li>
<li><a href="/watir/watir_cookies.htm">Watir - Cookies</a></li>
<li><a href="/watir/watir_proxies.htm">Watir - Proxies</a></li>
<li><a href="/watir/watir_alerts.htm">Watir - Alerts</a></li>
<li><a href="/watir/watir_downloads.htm">Watir - Downloads</a></li>
<li><a href="/watir/watir_browser_windows.htm">Watir - Browser Windows</a></li>
<li class="heading">Watir Useful Resources</li>
<li><a href="/watir/watir_quick_guide.htm">Watir - Quick Guide</a></li>
<li><a href="/watir/watir_useful_resources.htm">Watir - Useful Resources</a></li>
<li><a href="/watir/watir_discussion.htm">Watir - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Watir - Quick Guide</h1>
<hr/>
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/watir/watir_browser_windows.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/watir/watir_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clear"></div>
<h1>Watir - Overview</h1>
<p>Watir (Web Application Testing in Ruby), pronounced as "Water" is an open source tool developed using Ruby which helps in automating web application that suits applications developed in any programming language. The browsers supported for Watir installation Internet Explorer, Firefox, Chrome, Safari, and Edge. Watir is available as Rubygems for installation.</p>
<p>Watir will connect to the browser given and follows up the instructions of opening the URL, clicking on the button, entering data inside a textbox just as any real person will do. Watir is most commonly used for its browser support with testing frameworks like RSpec, Cucumber, etc.</p>
<h2>Features of Watir</h2>
<p>Watir is rich in features, as discussed below &minus;</p>
<p><b>Location web elements</b> &minus; There are different ways you can locate web-elements rendered inside the browser. The ones mostly used are id, class, tag name, custom attributes, label etc.</p>
<p><b>Taking Screenshots</b> &minus; Watir allows you to take screenshot of the testing done as and when required. This helps to keep track of the intermediate testing.</p>
<p><b>Page Performance</b> &minus; You can easily measure page performance using the performance object which has properties like, <i>performance.navigation, performance.timing, performance.memory and performance.timeOrigin</i>. These details are obtained when you connect to the browser.</p>
<p><b>Page Objects</b> &minus; Page object in Watir will help us to reuse the code in the form of classes. Using this feature, we can automate our app without having to duplicate any code and also make it manageable.</p>
<p><b>Downloads</b> &minus; With Watir, it is easy to test file download for UI or website.</p>
<p><b>Alerts</b> &minus; Watir provides easy to use APIs to test alerts popup in your UI or website.</p>
<p><b>Headless Testing</b> &minus; Using headless testing, the details are obtained in the command line without having to open the browser. This helps to execute UI test cases at the command line.</p>
<h2>Advantages of Using Watir</h2>
<p>Watir offers the following advantages &minus;</p>
<ul class="list">
<li><p>Watir is an open source tool and very easy to use.</p></li>
<li><p>Watir is developed in Ruby and any web application that works in a browser can be easily automated using watir.</p></li>
<li><p>All the latest browsers are supported in Watir making it easy for testing.</p></li>
<li><p>Watir has inbuilt libraries to test page-performance, alerts, iframes test, browser windows, take screenshots etc.</p></li>
</ul>
<h2>Disadvantages of Watir</h2>
<p>Like any other software, Watir also has its limitations</p>
<ul class="list">
<li><p>Watir is supported only for Ruby test framework and it cannot be used with any other testing frameworks.</p></li>
<li><p>Mobile testing using Watir is not enhanced and desktop browsers are mimicked to behave like mobile browsers instead of acting as real time devices.</p></li>
</ul>
<h1>Watir - Introduction</h1>
<p><b>Watir (Web Application Testing in Ruby)</b> pronounced as “Water” is an open source tool developed using Ruby which helps in automating web application no matter which language the application is written. Watir comes with a rich set of APIs which helps us interact with the browser, locate page elements, take screenshots, work with alerts, file downloads, <i>window.open</i> popup windows, headless testing, etc.</p>
<p>The browsers supported are &minus;</p>
<ul class="list">
<li>Internet Explorer</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Safari</li>
<li>Edge</li>
</ul>
<p><b>Note</b> &minus; Watir is available as Rubygems gem for installation.</p>
<p>Using Watir webdriver, you can test your websites and UI applications. As Watir fully focuses on the browser related stuff, you can use Watir along with other test framework such as &minus;</p>
<ul class="list">
<li>RSpec</li>
<li>Cucumber</li>
</ul>
<p>The main testing code will be written using the test framework and interacting with the browser will be done with the help of Watir.</p>
<p>The flow of test framework along with Watir is as shown below &minus;</p>
<img class="full-width" src="/watir/images/rubygems.jpg" alt="Rubygems" />
<p>RSpec or Cucumber are involved in test runner and test code. The details about the website or UI testing can be broken down into page object which will have reference to Watir, wherein it will get the page locators to be used for testing. Watir, along with its webdriver, helps in connecting to the browser and carry out the test automation.</p>
<h1>Watir - Environment Setup</h1>
<p>To work with Watir, we need to install the following &minus;</p>
<ul class="list">
<li>Install Ruby</li>
<li>Install Watir</li>
<li>Ruby Mine (IDE)</li>
</ul>
<p>Since Watir is build using Ruby, we need to install Ruby and gem (package manager for Ruby).</p>
<h2>Ruby Installation on Windows</h2>
<p>To install Ruby on Windows, go to &minus; <a target="_blank" rel="nofollow" href="https://rubyinstaller.org/downloads/">https://rubyinstaller.org/downloads/</a></p>
<img class="full-width" src="/watir/images/ruby_installation.jpg" alt="Ruby Installation" />
<p>Install the ruby version based on your 32 or 64 bit operating system. Here we have installed the highlighted one as shown in the screenshot. Once you download it, follow the steps as prompted and install accordingly.</p>
<p>When you are done with the installation, check if ruby is installed by checking the version in command line as shown below &minus;</p>
<pre class="result notranslate">
C:\&gt; ruby -v
</pre>
<p>If Ruby is successfully installed, you can see an output as shown below &minus;</p>
<img class="center" src="/watir/images/ruby_installed.jpg" alt="Ruby Installed" />
<p>The version installed is 2.6.3. We have successfully installed Ruby on our system. Along with Ruby installation gem i.e. ruby package manager is also installed. You can check the version of gem installed as follows &minus;</p>
<img class="center" src="/watir/images/ruby_package_manager.jpg" alt="Ruby Package Manager" />
<p>We are done with the installation of Ruby and Gem on windows.</p>
<h2>Ruby Installation on Linux</h2>
<p>For installing Ruby on Linux, run the following commands in your Linux terminal &minus;</p>
<pre class="result notranslate">
wget -O ruby-install-0.6.0.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.0.tar.gz
tar -xzvf ruby-install-0.6.0.tar.gz
cd ruby-install-0.6.0/
sudo make install
ruby-install ruby 2.5.3
</pre>
<h2>Ruby Installation for Mac</h2>
<p>For installing Ruby on Linux, run below commands in your Mac terminal &minus;</p>
<h3>Install xcode</h3>
<pre class="result notranslate">
xcode-select --install
</pre>
<h3>Install HomeBrew</h3>
<pre class="result notranslate">
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</pre>
<h3>Install rbenv</h3>
<pre class="result notranslate">
brew install rbenv
rbenv init
touch ~/.bash_profile
echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
source ~/.bash_profile
rbenv install 2.5.3
rbenv local 2.5.3
</pre>
<h3>Installing Watir</h3>
<p>The command to install watir is &minus;</p>
<pre class="result notranslate">
gem install watir
</pre>
<p>gem install watir</p>
<p>Then you can observe an output screen as shown below &minus;</p>
<img class="full-width" src="/watir/images/installing_watir.jpg" alt="Installing Watir" />
<h2>RubyMine IDE</h2>
<p>We will use RubyMine IDE to write and execute our test cases. The official website for RubyMine IDE is <a target="_blank" rel="nofollow" href="https://www.jetbrains.com/ruby/">www.jetbrains.com/ruby</a>.</p>
<img class="full-width" src="/watir/images/rubymine_ide.jpg" alt="RubyMine IDE" />
<p>RubyMine is a paid IDE with a 30-day free trial. Click on free trial button to download. You may also use some other IDE of your choice to write the test-cases.</p>
<p>On-click of the free trial button, it will start downloading. Once the download is done, install it on your system.</p>
<img class="center" src="/watir/images/rubymine_setup.jpg" alt="RubyMine Setup" />
<p>Click on Next and proceed with the installation. Once the installation is complete, open the IDE and it will ask you to create the project as shown below &minus;</p>
<img class="full-width" src="/watir/images/rubymine_installed.jpg" alt="RubyMine Installed" />
<p>Click on Create New Project, we have entered the name of the project as Watir and here is the display in the IDE &minus;</p>
<img class="full-width" src="/watir/images/new_project.jpg" alt="New Project" />
<p>We will write our test-cases in watir/ folder and execute it.</p>
<h1>Watir - Installing Drivers for Browsers</h1>
<p>In this chapter, we are going to install browser drivers that we need to test our project using Watir. Prior to Watir 6, we had to include <i>watir-webdriver</i> to use the browser drivers. With the release of Watir 6, the <i>watir-webdriver</i> is available as part of Watir package and users do not have to add the <i>watir-webdriver</i> separately.</p>
<p>The browsers like Chrome, Firefox, and Safari are available by default and you do not have to add them externally. Incase while testing you get an issue that the driver for the browser is not available, you can always download them as instructed below.</p>
<p>We are going to install drivers for following browsers &minus;</p>
<ul class="list">
<li>Driver for Browsers - Chrome</li>
<li>Driver for Browsers - Firefox</li>
<li>Driver for Browsers - Edge</li>
<li>Driver for Browsers - Internet Explorer</li>
<li>Driver for Browsers - Safari</li>
</ul>
<h2>Driver for Browser - Chrome</h2>
<p>To get the driver for chrome browser, go to &minus; <a target="_blank" rel="nofollow" href="https://sites.google.com/a/chromium.org/chromedriver/downloads">https://sites.google.com/a/chromium.org/chromedriver/downloads</a>.</p>
<img class="full-width" src="/watir/images/driver_browser.jpg" alt="Driver Browser" />
<p>Check the version of your browser and accordingly download the Chrome driver. To check the version of your chrome browser, do as shown here &minus;</p>
<img class="center" src="/watir/images/chrome_driver.jpg" alt="Chrome driver" />
<p>Click on About Google Chrome and it will give you the chrome version as shown below &minus;</p>
<img class="full-width" src="/watir/images/chrome_version.jpg" alt="Chrome Version" />
<p>So our version is 74. So, download chrome driver version 74.</p>
<img class="full-width" src="/watir/images/download_chrome_driver.jpg" alt="Download Chrome Driver" />
<p>Next, download the chrome driver depending on your operating system. We will download chromedriver_win32.zip, it is meant for both 32-bit and 64-bit machines. In case you are planning to use the driver downloaded, add the location somewhere on your PATH variable.</p>
<h2>Driver for Browser - Firefox</h2>
<p>For Firefox driver, go to &minus; <a target="_blank" rel="nofollow" href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a> as shown in the screenshot below &minus;</p>
<img class="full-width" src="/watir/images/download_firefox.jpg" alt="Download Firefox" />
<p>As per your operating system, download the driver as shown above. In case you planning to use the driver downloaded, add the location somewhere on your PATH variable.</p>
<h2>Driver for Browser - Edge</h2>
<p>For Firefox driver, go to &minus; <a target="_blank" rel="nofollow" href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/</a> as shown in the screenshot below &minus;</p>
<img class="full-width" src="/watir/images/driver_browser_edge.jpg" alt="Driver Browser Edge" />
<p>Click on the Version of Microsoft Edge you have as shown below &minus;</p>
<img class="full-width" src="/watir/images/microsoft_edge.jpg" alt="Microsoft Edge" />
<p>Click on Release link and it will redirect you to &minus;</p>
<img class="center" src="/watir/images/version_number.jpg" alt="Version Number" />
<p>Here, you can find the download version available for windows. In case you are planning to use the driver downloaded, add the location somewhere on your PATH variable.</p>
<h2>Driver for Browser - Internet Explorer</h2>
<p>To install the driver for Internet Explorer go to &minus; <a target="_blank" rel="nofollow" href="https://docs.seleniumhq.org/download/">https://docs.seleniumhq.org/download/</a> as shown below &minus;</p>
<img class="full-width" src="/watir/images/internet_explorer.jpg" alt="Internet Explorer" />
<p>The details for the download section on IE are shown here &minus;</p>
<img class="full-width" src="/watir/images/download_section.jpg" alt="Download Section" />
<p>As per your OS, download the 32 or 64 bit windows IE. Also add the location to you PATH variable to make use of the driver.</p>
<h2>Drivers for Browsers - Safari</h2>
<p>The drivers for safari are not required to be downloaded externally for safari version 10 onwards. They are downloaded along with the gem package while installing Watir.</p>
<p>Please note that drivers for Chrome, Firefox, Internet Explorer are also available when Watir is installed. But incase if you face any issues and need a specific version to be tested, you can download them as per your browser and update the location in PATH to make use of it in testing your application.</p>
<h1>Watir - Working with Browsers</h1>
<p>By default, Watir will open chrome browser in-case the browser name is not specified. The required browser drivers are installed along with Watir installation. In case you face any issues working with browsers, install the driver as shown in the Browsers drivers chapter and update the location in PATH variable.</p>
<p>In this chapter, we will understand how to open the browser using Watir.</p>
<h2>Steps to Open a Browser using Watir</h2>
<p>Open the IDE RubyMine and create a new file: test1.rb</p>
<img class="full-width" src="/watir/images/browser_using_watir.jpg" alt="Browser Using Watir" />
<p></p>
<img class="center" src="/watir/images/ide_rubymine.jpg" alt="IDE RubyMine" />
<p>Select OK and click the file pattern as ruby as shown below &minus;</p>
<img class="center" src="/watir/images/file_pattern.jpg" alt="File Pattern" />
<p>Click on OK to create the file.</p>
<p>Now we will write a simple code that will open the browser as shown below &minus;</p>
<h3>test1.rb</h3>
<pre class="prettyprint notranslate">
require 'watir'
Watir::Browser.new
</pre>
<img class="full-width" src="/watir/images/simple_code.jpg" alt="Simple Code" />
<p>Click on the Run button that is highlighted in the IDE as shown above. On-click of Run, it will open browser as shown below &minus;</p>
<img class="full-width" src="/watir/images/run_button.jpg" alt="Run Button" />
<p>The browser will open and close automatically. Let us now add some more code to the test1.rb.</p>
<p>We can specify the name of the browser as shown below &minus;</p>
<h3>Example for Chrome</h3>
<pre class="prettyprint notranslate">
require 'watir'
Watir::Browser.new :chrome
</pre>
<p>Now let us open a page-url in our test case.</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'
browser = Watir::Browser.new
browser.goto("https://www.google.com")
</pre>
<p>Click on Run to see the output as shown below &minus;</p>
<img class="full-width" src="/watir/images/tast_case_output.jpg" alt="Test Case Output" />
<p>Similarly, you can open firefox, safari, Internet explorer browser.</p>
<h3>Example for Firefox</h3>
<pre class="prettyprint notranslate">
require 'watir'
Watir::Browser.new :firefox
</pre>
<img class="full-width" src="/watir/images/example_for_firefox.jpg" alt="Example for Firefox" />
<h3>Example for Internet Explorer</h3>
<p><b>Watir Code</b></p>
<pre class="prettyprint notranslate">
require 'watir'
browser = Watir::Browser.new :ie
browser.goto("https://www.google.com")
</pre>
<p>When we run the code following error is displayed &minus;</p>
<pre class="result notranslate">
Unable to find IEDriverServer. Please download the server from
(Selenium::WebDriver::Error::WebDriverError)

http://selenium-release.storage.googleapis.com/index.html and place it
somewhere on your PATH.

More info at
https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver.
</pre>
<p>This means that watir package does not have InternetExplorer Driver. We have downloaded the same from here &minus; <a target="_blank" rel="nofollow" href="https://docs.seleniumhq.org/download/">https://docs.seleniumhq.org/download/</a> and updated in PATH variable.</p>
<p>Now run it again to see the Internet Explorer browser opening as shown below &minus;</p>
<img class="full-width" src="/watir/images/explorer_browser_opening.jpg" alt="Explorer Browser Opening" />
<h3>Watir code to open Safari Browser</h3>
<pre class="prettyprint notranslate">
require 'watir'
browser = Watir::Browser.new :safari
browser.goto("https://www.google.com")
</pre>
<h3>Watir code to Microsoft Edge browser</h3>
<pre class="prettyprint notranslate">
require 'watir'
browser = Watir::Browser.new :edge
browser.goto("https://www.google.com")
</pre>
<h1>Watir - Web Elements</h1>
<p>In this chapter, we will discuss how to work with following in Watir &minus;</p>
<ul class="list">
<li>Working with Textboxes</li>
<li>Working with Combos</li>
<li>Working with Radio Buttons</li>
<li>Working with Checkboxes</li>
<li>Working with Buttons</li>
<li>Working with Links</li>
<li>Working with Div’s</li>
</ul>
<h2>Working with Textboxes</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.text_field id: 'firstname' // will get the reference of the textbox
</pre>
<p>Here will try to understand how to work with textboxes on the UI.</p>
<p>Consider the page Textbox.html as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
                  
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : 
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div style = "display:none;" id = "displayfirstname"&gt;&lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>The corresponding output is as shown below &minus;</p>
<img class="center" src="/watir/images/working_with_textboxes.jpg" alt="Working with TextBoxes" />
<p>We are having a textbox, when you enter the name onchange event is fired and the name is displayed below.</p>
<p>Now let us write the code, wherein we will locate the textbox and enter the name and fire the onchange event.</p>
<h3>Watir Code</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/textbox.html')
t = b.text_field id: 'firstname'
t.exists?
t.set 'Riya Kapoor'
t.value
t.fire_event('onchange')
</pre>
<p>We are using chrome browser and given the pageurl as <b>http://localhost/uitesting/textbox.html</b>.</p>
<p>Using <i>goto</i> api browser will open the pageurl and we are going to find text_field having id: firstname. If that exists, we will set value as Riya Kapoor and will use <i>fire_event</i> api to fire the onchange event.</p>
<p>Now, let us run the code to display the output as shown below &minus;</p>
<img class="center" src="/watir/images/working_with_textboxes_run.jpg" alt="Working with TextBoxes Run" />
<p></p>
<img class="center" src="/watir/images/working_with_textboxes_run_output.jpg" alt="Working with TextBoxes Run Output" />
<h2>Working with Combos</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.select_list id: 'months' // will get the reference of the dropdown
</pre>
<p>The test page that we are going to test now is shown here &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Dropdown&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsselected() {
            var months = document.getElementById("months");
            
            if (months.value != "") {
               document.getElementById("displayselectedmonth").innerHTML = 
                  "The month selected is : " + months.value;
               
               document.getElementById("displayselectedmonth").style.display = "";
            }
         }
      &lt;/script&gt;
      &lt;form name = "myform" method = "POST"&gt;
         &lt;div&gt;
            Month is :
            &lt;select name = "months" id = "months" onchange = "wsselected()"&gt;
               &lt;option value = ""&gt;Select Month&lt;/option&gt;
               &lt;option value = "Jan"&gt;January&lt;/option&gt;
               &lt;option value = "Feb"&gt;February&lt;/option&gt;
               &lt;option value = "Mar"&gt;March&lt;/option&gt;
               &lt;option value = "Apr"&gt;April&lt;/option&gt;
               &lt;option value = "May"&gt;May&lt;/option&gt;
               &lt;option value = "Jun"&gt;June&lt;/option&gt;
               &lt;option value = "Jul"&gt;July&lt;/option&gt;
               &lt;option value = "Aug"&gt;August&lt;/option&gt;
               &lt;option value = "Sept"&gt;September&lt;/option&gt;
               &lt;option value = "Oct"&gt;October&lt;/option&gt;
               &lt;option value = "Nov"&gt;November&lt;/option&gt;
               &lt;option value = "Dec"&gt;December&lt;/option&gt;
            &lt;/select&gt;
         &lt;/div&gt;
         &lt;br/&gt;
         &lt;br/&gt;
         
         &lt;div style = "display:none;" id = "displayselectedmonth"&gt;
         &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/working_with_combos.jpg" alt="Working with Combos" />
<p>When you select month from the dropdown the same is displayed below.</p>
<p>Let us now test the same using Watir.</p>
<h3>Watir Code for combo selection</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/combos.html')
t = b.select_list id: 'months'
t.exists?
t.select 'September'
t.selected_options
t.fire_event('onchange')
</pre>
<p>To work with combos, you need to locate the select element using b.select_list api followed by the id of the dropdown. To select the value from the dropdown, you need to use t.select and the value you want.</p>
<p>The output on execution is as follows &minus;</p>
<img class="center" src="/watir/images/working_with_combos_output.jpg" alt="Working with Combos Output" />
<h2>Working with Radio Buttons</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.radio value: 'female' 
// will get the reference of the radio button with value “female”
</pre>
<p>Here is a test page that we will use to work with radio buttons &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;form name = "myform" method = "POST"&gt;
         &lt;b&gt;Select Gender?&lt;/b&gt;
         &lt;div&gt;
            &lt;br/&gt;
            &lt;input type = "radio" name = "gender" value = "male" checked&gt; Male
            &lt;br/&gt;
            &lt;input type = "radio" name = "gender" value = "female"&gt; Female
            &lt;br/&gt;
         &lt;/div&gt;
      &lt;/form&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<img class="center" src="/watir/images/working_with_radio_buttons.jpg" alt="Working with Radio Buttons" />
<p>We will select radio button with value Female as shown in the Watir code &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new
b.goto('http://localhost/uitesting/radiobutton.html')
t = b.radio value: 'female'
t.exists?
t.set
b.screenshot.save 'radiobutton.png'
</pre>
<p>To work with radio button, we need to tell the browser about the value we are selecting i.e. <b>b.radio value:”female”</b></p>
<p>We are also taking the screenshot and saved that as radiobutton.png and the same is displayed below &minus;</p>
<img class="center" src="/watir/images/working_with_radio_buttons_output.jpg" alt="Working with Radio Buttons Output" />
<h2>Working with Checkboxes</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser. checkbox value: 'Train' 
// will get the reference of the checkbox with value “Train”
</pre>
<p>Here is the test page for checkboxes &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;form name = "myform" method = "POST"&gt;
         &lt;b&gt;How would you like to travel?&lt;/b&gt;
         &lt;div&gt;
            &lt;br&gt;
            &lt;input type = "checkbox" name = "option1" value = "Car"&gt; Car&lt;br&gt;
            &lt;input type = "checkbox" name = "option2" value = "Bus"&gt; Bus&lt;br&gt;
            &lt;input type = "checkbox" name = "option3" value = "Train"&gt; Train&lt;br&gt;
            &lt;input type = "checkbox" name = "option4" value = "Air"&gt; Airways&lt;br&gt;
            &lt;br&gt;
         &lt;/div&gt;
      &lt;/form&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<img class="center" src="/watir/images/working_with_checkboxes.jpg" alt="Working with Checkboxes" />
<p>Now, let us use Watir to locate the checkbox in browser as shown below &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new
b.goto('http://localhost/uitesting/checkbox.html')
t = b.checkbox value: 'Train'
t.exists?
t.set
b.screenshot.save 'checkbox.png'
</pre>
<p>To locate checkbox in the browser, use <i>b.checkbox</i> with value you want to select.</p>
<img class="center" src="/watir/images/working_with_checkboxes_output.jpg" alt="Working with Checkboxes Output" />
<h2>Working with Buttons</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.button(:name =&gt; "btnsubmit").click
// will get the reference to the button element with has name “btnsubmit”
</pre>
<p>Here is the test page for button &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsclick() {
            document.getElementById("buttondisplay").innerHTML = "Button is clicked";
            document.getElementById("buttondisplay").style.display = "";
         }
      &lt;/script&gt;
      
      &lt;form name = "myform" method = "POST"&gt;
         &lt;div&gt;
            &lt;br&gt;
            &lt;input type = "button" id = "btnsubmit" name = "btnsubmit"
               value = "submit" onclick = "wsclick()"/&gt;
            &lt;br&gt;
         &lt;/div&gt;
      &lt;/form&gt;
      &lt;br/&gt;
      
      &lt;div style = "display:none;" id = "buttondisplay"&gt;&lt;/div&gt;
   &lt;/body&gt;
   
&lt;/html&gt;
</pre>
<img class="center" src="/watir/images/working_with_buttons.jpg" alt="Working with Buttons" />
<p>Here is watir code to locate the button on the given page &minus;</p>
<pre class="result notranslate">
require 'watir'
b = Watir::Browser.new
b.goto('http://localhost/uitesting/button.html')
b.button(:name =&gt; "btnsubmit").click
b.screenshot.save 'button.png'
</pre>
<p>Here is the screenshot button.png</p>
<img class="center" src="/watir/images/button.jpg" alt="Button" />
<h2>Working with Links</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.link text: 'Click Here' 
// will get the reference to the a tag with text ‘Click Here’
</pre>
<p>We are going to use the following test page to test links &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;a href = "https://www.google.com"&gt;Click Here&lt;/a&gt;
      &lt;br/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<img class="center" src="/watir/images/working_with_links.jpg" alt="Working with Links" />
<p>The Watir details required to test links are as given below &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new
b.goto('http://localhost/uitesting/links.html')
l = b.link text: 'Click Here'
l.click
b.screenshot.save 'links.png'
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/working_with_links_output.jpg" alt="Working with Links Output" />
<p></p>
<img class="center" src="/watir/images/working_with_links_outputs.jpg" alt="Working with Links Outputs" />
<h2>Working with Div’s</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.div class: 'divtag' 
// will get the reference to div with class “divtag”
</pre>
<p>Test page where we can test for div.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
      &lt;style&gt;
         .divtag {
            color: blue;
            font-size: 25px;
         }
      &lt;/style&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div class = "divtag"&gt; UI Testing using Watir &lt;/div&gt;
      &lt;br/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/working_with_div.jpg" alt="Working with Div" />
<p>The Watir code to test the div is shown here &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new
b.goto('http://localhost/uitesting/div.html')
l = b.div class: 'divtag'
l.exists?
l.text
b.screenshot.save 'divtag.png'
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/working_with_div_output.jpg" alt="Working with Div Output" />
<h1>Watir - Locating Web Elements</h1>
<p>In Watir for testing, you need to locate the elements and it can be done in different ways – by using the id, class or text of the element.</p>
<p>In this chapter, we will see few examples which shows different ways to locate elements.</p>
<h2>Using ID of the Element</h2>
<h3>Test page</h3>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
               
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : 
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div style = "display:none;" id = "displayfirstname"&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/textbox.html')
t = b.text_field(id: 'firstname') // using the id of the textbox to locate the textbox
t.exists?
t.set 'Riya Kapoor'
b.screenshot.save 'textboxbefore.png'
t.value
t.fire_event('onchange')
b.screenshot.save 'textboxafter.png'
</pre>
<p>In this example, we are using id of the textbox element to locate it and set the value.</p>
<pre class="prettyprint notranslate">
t = b.text_field(id: 'firstname')
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/using_id.jpg" alt="Using ID" />
<p></p>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<p>In case you need to locate the div, span or any other html tag you can do same using id as follows &minus;</p>
<h3>For div</h3>
<pre class="prettyprint notranslate">
browser.div(id: "divid")
browser.div(id: /divid/)
</pre>
<h3>For span</h3>
<pre class="prettyprint notranslate">
browser.span(id: "spanid")
browser.span(id: /spanid/)
</pre>
<h2>Using NAME of the Element</h2>
<h3>Test page</h3>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
               
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : 
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div style = "display:none;" id = "displayfirstname"&gt;
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/textbox.html')
t = b.text_field(name: 'firstname') // name is used to locate the textbox element
t.exists?
t.set 'Riya Kapoor'
b.screenshot.save 'textboxbefore.png'
t.value
t.fire_event('onchange')
b.screenshot.save 'textboxafter.png'
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/using_id.jpg" alt="Using ID" />
<p></p>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<h2>Using Tag Name</h2>
<p>You can locate any html elements you want by directly using the html tag as shown below.</p>
<h3>For div</h3>
<pre class="result notranslate">
browser.div(id: "divid")
browser.div(id: /divid/)
</pre>
<h3>For span</h3>
<pre class="result notranslate">
browser.span(id: "spanid")
browser.span(id: /spanid/)
</pre>
<h3>For p tag</h3>
<pre class="result notranslate">
browser.p(id: "ptag")
browser.p(id: /ptag/)
</pre>
<h3>For button</h3>
<pre class="result notranslate">
browser.button(id: "btnid")
browser.button(id: /btnid/)
</pre>
<h2>Using Class Name</h2>
<p>You can locate the element using its classname. It can be done as shown below &minus;</p>
<h3>For div</h3>
<pre class="result notranslate">
browser.div(class: "divclassname")
browser.div(class: /divclassname/)
</pre>
<h3>For span</h3>
<pre class="result notranslate">
browser.span(class: "spanclassname”)
browser.span(class: /spanclassname/)
</pre>
<h3>For p tag</h3>
<pre class="result notranslate">
browser.p(class: "pclassname")
browser.p(class: /pclassname/)
</pre>
<h3>For button</h3>
<pre class="result notranslate">
browser.button(class: "btnclassname")
browser.button(class: /btnclassname/)
</pre>
<h3>For textbox</h3>
<pre class="result notranslate">
browser.text_field(class: 'txtclassname')
browser.text_field(class: /txtclassname/)
</pre>
<p>You can also pass multiple classes as shown below &minus;</p>
<h3>For div</h3>
<pre class="result notranslate">
browser.div(class: ["class1", "class2"])
</pre>
<h2>Using Text</h2>
<p>This is yet another way to locate elements by using elements with a text. For example &minus;</p>
<pre class="result notranslate">
browser.button(text: "button text")
browser.button(text: /button text/)
</pre>
<h2>Using Label</h2>
<p>You can use the label of the element to locate it as shown below &minus;</p>
<pre class="result notranslate">
browser.text_field(label: "text here"))
browser.text_field(label: /text here/))
</pre>
<h2>Using Data Attributes</h2>
<p>In-case you have data attributes to your html tags, you can locate the elements using it as shown below &minus;</p>
<p>For example, you can locate the tag as shown below &minus;</p>
<pre class="result notranslate">
&lt;div data-type = "test1"&gt;&lt;/div&gt;
</pre>
<p>You can locate the div as follows &minus;</p>
<pre class="result notranslate">
browser.div(data-type: 'test1'))
browser.div(data-type: /test1/))
</pre>
<h2>Using Custom Attributes</h2>
<p>You can also locate the elements using custom attributes as shown below &minus;</p>
<h3>Example of html element</h3>
<pre class="result notranslate">
&lt;div itemprop = ”content”&gt;
   ….
&lt;/div&gt;
</pre>
<p>You can locate the div as follows &minus;</p>
<pre class="result notranslate">
browser.div(itemprop: ‘content'))
browser.div(itemprop: /content/))
</pre>
<h2>Using Visible Attribute</h2>
<p>The element using visible attribute can be located as shown below &minus;</p>
<pre class="result notranslate">
browser.div(visible: true)
browser.div(visible: false)
</pre>
<h1>Watir - Working with Iframes</h1>
<p>Watir offer easy to use syntax to work with iframes.</p>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.iframe(id: 'myiframe') 
// will get the reference of the iframe where we want to input details.
</pre>
<p>To understand how to deal with iframes and locate the elements inside an iframe, in this chapter, we will work on an example.</p>
<h2>Example</h2>
<h3>main.html</h3>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing using Watir&lt;/title&gt;
   &lt;/head&gt;
   &lt;body&gt;
      &lt;iframe src = "test1.html" id = "myiframe" width = "500" height = "100"&gt;&lt;/iframe&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>test1.html</h3>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
               
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : 
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
         &lt;div style = "display:none;" id = "displayfirstname"&gt;&lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/iframe.jpg" alt="Iframe" />
<p>In the above example, the entry form is defined inside an iframe. The Watir code which will help us to locate it and test the form is given below &minus;</p>
<h3>Watir Code</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/main.html')
t = b.iframe(id: 'myiframe').text_field
t.set 'Riya Kapoor'
b.screenshot.save 'iframetestbefore.png'
t.fire_event('onchange')
b.screenshot.save 'iframetestafter.png'
</pre>
<p>Watir code to locate the iframe in the url given here &minus;</p>
<pre class="result notranslate">
t = b.iframe(id: 'myiframe').text_field
</pre>
<p>We have used the tag name iframe and the id of the iframe as shown above.</p>
<p>The screenshots of the above code are shown below &minus;</p>
<h3>iframetestbefore.png</h3>
<img class="center" src="/watir/images/using_id.jpg" alt="Using ID" />
<h3>iframetestafter.png</h3>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<h1>Watir - Automatic Waits</h1>
<p>In this chapter, let us understand waits in detail. To understand automatic waits, we have created a simple test page. When user enters text in the textbox onchange event is fired and after 3-seconds the button is enabled.</p>
<p>Watir has a <i>wait_unit</i> api call which waits on a particular event or property. We will test the same for the test page as given below &minus;</p>
<h2>Syntax</h2>
<pre class="result notranslate">
browser.button(id: 'btnsubmit').wait_until(&amp;:enabled?)
//here the wait is on the button with id : btnsubmit to be enabled.
</pre>
<h3>testwait.html</h3>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            setTimeout(function() {
            document.getElementById("btnsubmit").disabled = false; }, 3000);
         }
         function wsformsubmitted() {
            document.getElementById("showmessage").style.display = "";
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : 
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;button id = "btnsubmit" disabled onclick = "wsformsubmitted();"&gt;Submit&lt;/button&gt;
      &lt;br/&lt;
      &lt;br/&lt;
      
      &lt;div id = "showmessage" style = "display:none;color:green;font-size:25px;"&gtl;
         Button is clicked
      &lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Output</h2>
<img class="center" src="/watir/images/automatic_waits.jpg" alt="Automatic Waits" />
<p>When you enter the text in the textbox, you will have to wait for 3 seconds for the button to be enabled.</p>
<img class="center" src="/watir/images/automatic_textbox.jpg" alt="Automatic Waits" />
<p>When you click the Submit button, the following text is displayed &minus;</p>
<img class="center" src="/watir/images/submit_button.jpg" alt="Submit Button" />
<p>Now since we have added delay for the button to be enabled, it is difficult for the automation to handle such cases. Whenever we have some delay or have to wait on some event or property of the element to be located, we can make use of wait_until as shown below &minus;</p>
<h2>Watir code using wait_until</h2>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/testwait.html')
t = b.text_field(name: 'firstname')
t.exists?
t.set 'Riya Kapoor'
b.screenshot.save 'waittestbefore.png'
t.value
t.fire_event('onchange')
btn = b.button(id: 'btnsubmit').wait_until(&:enabled?)
btn.fire_event('onclick');
b.screenshot.save 'waittestafter.png'
</pre>
<p>Next, use the following command</p>
<pre class="result notranslate">
btn = b.button(id: 'btnsubmit').wait_until(&:enabled?)
</pre>
<p>Watir is going to wait for the button to get enabled and later go for click event to be fired. The screenshots captured are shown below &minus;</p>
<h3>Waittestbefore.png</h3>
<img class="center" src="/watir/images/waittestbefore.jpg" alt="Waittestbefore" />
<h3>waittestafter.png</h3>
<img class="center" src="/watir/images/waittestafter.jpg" alt="waittestafter" />
<h1>Watir - Headless Testing</h1>
<p>In this chapter, we will learn how to use headless option of the Watir webdriver to test the page url.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
Browser = Watir::Browser.new :chrome, headless: true
</pre>
<p>The test page that we are going to test is shown here &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
               
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div style = "display:none;" id = "displayfirstname"&gt;&lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Output</h2>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<h2>Watir code</h2>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome, headless: true
b.goto('http://localhost/uitesting/textbox.html')
t = b.text_field(name: 'firstname')
t.exists?
t.set 'Riya Kapoor'
t.value
t.fire_event('onchange')
b.screenshot.save 'headless.png'
</pre>
<p>We have added the option <i>headless</i> : true to the Watir chrome browser. When you execute the Ruby program, it will not open the browser, everything will get executed in the command line &minus;</p>
<pre class="result notranslate">
DevTools listening on ws://127.0.0.1:53973/devtools/browser/b4127866-afb8-4c74-b967-5bacb3354b19
[0505/144843.905:INFO:CONSOLE(8)] "inside wsentered", source: http://localhost/uitesting/textbox.html (8)
</pre>
<p>We have added console.log message and the same in printed in command line.</p>
<p>The screenshot of headless.png is shown below &minus;</p>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<h2>In Firefox</h2>
<p>The watir code for Firefox is shown here &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :firefox, headless: true
b.goto('http://localhost/uitesting/textbox.html')
t = b.text_field(name: 'firstname')
t.exists?
t.set 'Riya Kapoor'
t.value
t.fire_event('onchange')
b.screenshot.save 'headlessfirefox.png'
</pre>
<p>The screenshot for headlessfirefox.png is shown here &minus;</p>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" /> 
<h1>Watir - Mobile Testing</h1>
<p>For Mobile testing, we are going to use Desktop browser which will act as device browser for testing purpose. Let us understand its procedure in this chapter.</p>
<p>To test your app on mobile browsers we need to install the webdriver-user-agent.</p>
<h2>Installing webdriver-user-agent</h2>
<pre class="result notranslate">
gem install webdriver-user-agent
</pre>
<img class="full-width" src="/watir/images/install_webdriver.jpg" alt="Install Webdriver" />
<p>Now, we are going to use the Webdriver useragent as shown in the example below &minus;</p>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'
require 'webdriver-user-agent'
driver = Webdriver::UserAgent.driver(browser: :chrome, agent: :iphone, orientation: :landscape)
browser = Watir::Browser.new driver
browser.goto 'https://facebook.com'
puts "#{browser.url}"
puts browser.url == 'https://m.facebook.com/'
</pre>
<p>We have given facebook.com url. When you execute it, it opens up in the mobile mode, based on the useragent, as shown below &minus;</p>
<img class="full-width" src="/watir/images/facebook_com.jpg" alt="Facebook" />
<p>Let us now try in portrait mode. Use the following code for this purpose &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
require 'webdriver-user-agent'
driver = Webdriver::UserAgent.driver(browser: :chrome, agent: :iphone, orientation: :portrait)
browser = Watir::Browser.new driver
browser.goto 'https://facebook.com'
puts "#{browser.url}"
puts browser.url == 'https://m.facebook.com/'
</pre>
<p>The output in the portrait mode is as shown below &minus;</p>
<img class="center" src="/watir/images/portrait_mode.jpg" alt="portrait mode" />
<h1>Watir - Capturing Screenshots</h1>
<p>Ability to capture screenshots is one of the interesting features available with Watir. During the test automation, you can take screenshots and save the screens. In case, if any error occurs the same can be documented with the help of screenshot.</p>
<p>A simple example along with test page where we have taken the screenshot is discussed below &minus;</p>
<h2>Syntax</h2>
<pre class="result notranslate">
browser.screenshot.save 'nameofimage.png'
</pre>
<h2>Test page</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
               
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      &lt;div id = "divfirstname"&gt;
         Enter First Name :
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div style = "display:none;" id = "displayfirstname"&gt;&lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Example</h2>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/textbox.html')
t = b.text_field(id: 'firstname') // using the id of the textbox to locate the textbox
t.exists?
t.set 'Riya Kapoor'
b.screenshot.save 'textboxbefore.png'
t.value
t.fire_event('onchange')
b.screenshot.save 'textboxafter.png'
</pre>
<p>The screenshots we have taken using Watir are shown here &minus;</p>
<h3>textboxbefore.png</h3>
<img class="center" src="/watir/images/using_id.jpg" alt="Using ID" />
<h3>textboxafter.png</h3>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<h1>Watir - Page Objects</h1>
<p>Page Object in Watir helps us to reuse the code in the form of classes. Using the page object feature, we can automate our app without having to duplicate any code and also makes the code manageable.</p>
<p>When testing, we can create page object for each of the page we are going to test. Then, we are going to access the methods and properties using the page object.</p>
<p>The reasons behind using page object &minus;</p>
<ul class="list">
<li><p>In case any changes are done to the page at alter changes, re-writing the code is not needed.</p></li>
<li><p>To avoid code redundancy.</p></li>
</ul>
<p>We are going to use RSpec to make use of page-object in Watir. Incase if you are not familiar with RSpec, here is a full tutorial available for <a href="/rspec/index.htm"> RSpec</a> for you learning.</p>
<p>The page that we are going to perform test on is given here &minus;</p>
<h2>textbox.html</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsentered() {
            console.log("inside wsentered");
            var firstname = document.getElementById("firstname");
            
            if (firstname.value != "") {
               document.getElementById("displayfirstname").innerHTML = 
                  "The name entered is : " + firstname.value;
               
               document.getElementById("displayfirstname").style.display = "";
            }
         }
      &lt;/script&gt;
      
      &lt;div id = "divfirstname"&gt;
         Enter First Name : 
         &lt;input type = "text" id = "firstname" name = "firstname" onchange = "wsentered()" /&gt;
      &lt;/div&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;div style = "display:none;" id = "displayfirstname"&gt;&lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Output</h2>
<img class="center" src="/watir/images/working_with_textboxes_run_output.jpg" alt="Working with Textboxes Run Output" />
<p>We will now create page object for the above page as shown below &minus;</p>
<h2>pageobjecttest.rb</h2>
<pre class="prettyprint notranslate">
class InitializeBrowser
   def initialize(browser)
      @browser = browser
   end
end

class TestPage lt; InitializeBrowser
   def textbox
      @textbox = TestTextbox.new(@browser)
   end
   def close
      @browser.screenshot.save 'usingpageobject.png'
      @browser.close
   end
end # TestPage

class TestTextbox &lt; InitializeBrowser
   URL = "http://localhost/uitesting/textbox.html"

   def open
      @browser.goto URL
      self
   end
   def enterdata_as(name)
      name_field.set name
      name_field.fire_event('onchange')
   end

private
   def name_field
      @browser.text_field(:id &gt; "firstname")
   end
end # TestTextbox
</pre>
<p>There are three classes defined - InitializeBrowser, TestPage and TestTextbox &minus;</p>
<ul class="list">
<li><p><b>InitializeBrowser</b> &minus; This will initialize the browser opened and share the browser object with TestPage and TestTextbox classes.</p></li>
<li><p><b>TestPage</b> &minus; This class will have object reference to TestTextbox and contains the method to capture screenshot and close the browser.</p></li>
<li><p><b>TestTextbox</b> &minus; This class will have methods to open the page url, give reference to textfield, set the data and fire onchange event.</p></li>
</ul>
<p>Once you execute the code shown above, you can see the output as shown below &minus;</p>
<img class="center" src="/watir/images/using_id_element.jpg" alt="Using ID Element" />
<h1>Watir - Page Performance</h1>
<p>Watir Page performance feature allows you to track the response time metrics and it works fine in Chrome, Firefox, IE9 and above. Safari browser does not have the support as of now.</p>
<p>Let us take a closer look on how to use this feature. To make use of it, we need to install watir-performance using gem as shown below &minus;</p>
<h2>Command</h2>
<pre class="result notranslate">
gem install watir-performance
</pre>
<img class="full-width" src="/watir/images/watir_performance.jpg" alt="Watir Performance" />
<p>We are done with installing watir-performance. The metrics that are supported are &minus;</p>
<ul class="list">
<li>summary</li>
<li>navigation</li>
<li>memory</li>
<li>Timing</li>
</ul>
<p>A working example using watir-performance is discussed here. Here, we will check the response time for site &minus; <a href="/index.htm">www.tutorialspoint.com</a> as shown below &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
require 'watir-performance'
10.times do
   b = Watir::Browser.new :chrome
   b.goto 'https://www.tutorialspoint.com'
   load_secs = b.performance.summary[:response_time] / 1000
   puts "Load Time: #{load_secs} seconds."
   b.close
end
</pre>
<h3>output</h3>
<pre class="result notranslate">
Load Time: 7 seconds.
Load Time: 7 seconds.
Load Time: 5 seconds.
Load Time: 5 seconds.
Load Time: 6 seconds.
Load Time: 5 seconds.
Load Time: 5 seconds.
Load Time: 13 seconds.
Load Time: 12 seconds.
Load Time: 5 seconds.
</pre>
<h2>Using performance.timing</h2>
<pre class="prettyprint notranslate">
require 'watir'
require 'watir-performance'

b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
load_secs = b.performance.timing[:response_end] - b.performance.timing[:response_start]
puts "Time taken to respond is #{load_secs} seconds."
b.close
</pre>
<h3>output</h3>
<pre class="result notranslate">
Time taken to respond is 41 seconds.
</pre>
<h2>Using performance.navigation</h2>
<pre class="prettyprint notranslate">
require 'watir'
require 'watir-performance'

b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
perf_nav = b.performance.navigation
puts "#{perf_nav}"
b.close
</pre>
<h3>output</h3>
<pre class="result notranslate">
{:type_back_forward=&gt;2, :type_navigate=&gt;0, :type_reload=&gt;1, 
:type_reserved=&gt;255, :redirect_count=&gt;0, :to_json=&gt;{}, :type=&gt;0}
</pre>
<h2>Using performance.memory</h2>
<pre class="prettyprint notranslate">
require 'watir'
require 'watir-performance'

b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
memory_used = b.performance.memory
puts "#{memory_used}"
b.close
</pre>
<h3>output</h3>
<pre class="result notranslate">
{:js_heap_size_limit=&gt;2, :type_navigate=&gt;0, :type_reload=&gt;1, :ty2136997888, 
:total_js_heap_size=&gt;2, :type_navigate=&gt;0, :type_reload=&gt;1, :ty12990756, 
:used_js_heap_size=&gt;2, :type_navigate=&gt;0, :type_reload=&gt;1, :ty7127092}
</pre>
<h1>Watir - Cookies</h1>
<p>In this chapter, we will learn how to work with cookies using Watir.</p>
<p>A simple example that will fetch the cookies for a URL given is discussed here.</p>
<h2>Syntax to fetch cookies</h2>
<pre class="result notranslate">
browser.cookies.to_a
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'

b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
puts b.cookies.to_a
</pre>
<h3>Output</h3>
<pre class="result notranslate">
{:name=&gt;"_gat_gtag_UA_232293_6", :value=&gt;"1", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;2019-05-03 08:33:58 +0000, 
:secure=&gt;false}

{:name=&gt;"_gid", :value=&gt "GA1.2.282573155.1556872379", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;2019-05-04 08:32:57 +0000, 
:secure=&gt;false}

{:name=&gt;"_ga", :value=&gt;"GA1.2.2087825339.1556872379", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;
2021-05-02 08:32:57 +0000, :secure=&gt;false}
</pre>
<p>Now let us add cookies as shown below &minus;</p>
<h2>Syntax to add cookies</h2>
<pre class="result notranslate">
browser.cookies.add 'cookiename', 'cookievalue', path: '/', expires: 
(Time.now + 10000), secure: true
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
puts b.cookies.to_a
b.cookies.add 'cookie1', 'testing_cookie', path: '/', expires: 
(Time.now + 10000), secure: true
puts b.cookies.to_a
</pre>
<h2>Output Before Adding cookie</h2>
<pre class="result notranslate">
{:name=&gt;"_gat_gtag_UA_232293_6", :value=&gt;"1", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;2019-05-03 08:44:23 +0000, 
:secure=&gt;false}

{:name=&gt;"_gid", :value=&gt;"GA1.2.1541488984.1556873004", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2019-05-04 08:43:24 +0000, :secure=&gt;false}

{:name=&gt;"_ga", :value=&gt;"GA1.2.1236163943.1556873004", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2021-05-02 08:43:24 +0000, :secure=&gt;false}
</pre>
<h2>Output After adding cookie</h2>
<pre class="result notranslate">
{:name=&gt;"_gat_gtag_UA_232293_6", :value=&gt;"1", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;2019-05-03 08:44:23 +0000, 
:secure=&gt;false}

{:name=&gt;"_gid", :value=&gt;"GA1.2.1541488984.1556873004", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2019-05-04 08:43:24 +0000, :secure=&gt;false}

{:name=&gt;"_ga", :value=&gt;"GA1.2.1236163943.1556873004", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2021-05-02 08:43:24 +0000, :secure=&gt;false}

{:name=&gt;"cookie1", :value=&gt;"testing_cookie", :path=&gt;"/", 
:domain=&gt;"www.tutorialspoint.com", :expires=&gt;2039-04-28 08:43:35 +0000, 
:secure=&gt;true}
</pre>
<p>Note that the last one is the one we added using watir.</p>
<h2>Clear Cookies</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.cookies.clear
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'

b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
puts b.cookies.to_a
b.cookies.clear
puts b.cookies.to_a
</pre>
<h3>Output</h3>
<pre class="result notranslate">
{:name=&gt;"_gat_gtag_UA_232293_6", :value=&gt;"1", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;2019-05-03 08:48:29 +0000, 
:secure=&gt;false}

{:name=&gt;"_gid", :value=&gt;"GA1.2.1264249563.1556873251", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2019-05-04 08:47:30 +0000, :secure=&gt;false}

{:name=&gt;"_ga", :value=&gt;"GA1.2.1001488637.1556873251", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2021-05-02 08:47:30 +0000, :secure=&gt;false

Empty response ie a blank line will get printed after cookie.clear is called.
</pre>
<h2>Delete a particular cookie</h2>
<h3>Syntax</h3>
<pre class="result notranslate">
browser.cookies.delete 'nameofthecookie'
</pre>
<h3>Example</h3>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto 'https://www.tutorialspoint.com'
puts b.cookies.to_a
puts b.cookies.delete "_ga"
puts b.cookies.to_a
</pre>
<h3>Output</h3>
<pre class="result notranslate">
All cookies:
{:name=&gt;"_gat_gtag_UA_232293_6", :value=&gt;"1", :path=&gt;"/", 
:domain=&gt;".tutorialspoint.com", :expires=&gt;2019-05-03 08:52:38 +0000, 
:secure=&gt;false}

{:name=&gt;"_gid", :value=&gt;"GA1.2.1385195240.1556873499", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2019-05-04 08:51:37 +0000, :secure=&gt;false}

{:name=&gt;"_ga", :value=&gt;"GA1.2.1383421835.1556873499", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2021-05-02 08:51:37 +0000, :secure=&gt;false}

After delete cookie with name _ga
{:name=&gt;"_gat_gtag_UA_232293_6", 
:value=&gt;"1", :path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2019-05-03 08:52:38 +0000, :secure=&gt;false}

{:name=&gt;"_gid", :value=&gt;"GA1.2.1385195240.1556873499", 
:path=&gt;"/", :domain=&gt;".tutorialspoint.com", 
:expires=&gt;2019-05-04 08:51:37 +0000, :secure=&gt;false}
</pre>
<h1>Watir - Proxies</h1>
<p>Watir allows to use proxy with the help of proxy object which needs to be used with the browser.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
proxy = {
   http: '127.0.0.1:8080',
   ssl: '127.0.0.1:8080'
}
b = Watir::Browser.new :chrome, proxy: proxy
</pre>
<p>An example on how to use proxy with Chrome browser is shown below &minus;</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
require "watir"
proxy = {
   http: '127.0.0.1:8080',
   ssl: '127.0.0.1:8080'
}
b = Watir::Browser.new :chrome, proxy: proxy
b.goto 'google.com'
b.screenshot.save 'proxy.png'
</pre>
<p>We have used proxy object as shown below &minus;</p>
<pre class="prettyprint notranslate">
proxy = {
   http: '127.0.0.1:8080',
   ssl: '127.0.0.1:8080'
}
</pre>
<p>The proxy address details are to be used for both http and ssl. We can use proxy with chrome browser as shown below &minus;</p>
<pre class="result notranslate">
b = Watir::Browser.new :chrome, proxy: proxy
</pre>
<p>The output proxy.png is shown below &minus;</p>
<img class="full-width" src="/watir/images/output_proxy.jpg" alt="Output Proxy" />
<p>An example on how to use proxy with Firefox browser is discussed below &minus;</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
require "watir"
proxy = {
   http: '127.0.0.1:8080',
   ssl: '127.0.0.1:8080'
}
b = Watir::Browser.new :firefox, proxy: proxy
b.goto 'google.com'
b.screenshot.save 'proxyfirefox.png'
</pre>
<p>You can add the proxy details as shown below &minus;</p>
<pre class="prettyprint notranslate">
proxy = {
   http: '127.0.0.1:8080',
   ssl: '127.0.0.1:8080'
}
b = Watir::Browser.new :firefox, proxy: proxy
</pre>
<p>The output proxyfirefox.png is shown here &minus;</p>
<img class="full-width" src="/watir/images/output_proxy.jpg" alt="Output Proxy" />
<h1>Watir - Alerts</h1>
<p>In this chapter we will understand how to handle alerts using Watir.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
browser.alert.exists?
browser.alert.ok
browser.alert.close
</pre>
<h2>Testpage</h2>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing Alerts Using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsformsubmitted() {
            alert("Button is Clicked !");
         }
      &lt;/script&gt;
      &lt;button id = "btnsubmit" onclick = "wsformsubmitted();"&gt;Submit&lt;/button&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Watir Code</h2>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/testalert.html')
b.button(id: 'btnsubmit').click
b.alert.ok
b.screenshot.save 'alerttest.png'
</pre>
<p>The output alerttest.png is shown here &minus;</p>
<img class="center" src="/watir/images/alert_test.jpg" alt="Alert Test" />
<h1>Watir - Downloads</h1>
<p>We have buttons or links in the UI or our website which downloads a pdf, or a doc. We can test that for using with Watir by giving some preferences to the browser.</p>
<p>The syntax for downloading &minus;</p>
<pre class="result notranslate">
prefs = {
   'download' =&gt; {
      'default_directory' =&gt; "C:/download",
      'prompt_for_download' =&gt; false,
   }
}
b = Watir::Browser.new :chrome, options: {prefs: prefs}
</pre>
<p>The prefs has download wherein we need to give the path where we want the file to be stored after download and the same has to be given to the browsers using options as shown in the syntax above.</p>
<p>A working example is shown here. Here, we have created test page with a button, which when clicked will download a file called file.txt as shown below &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;button id = "btnsubmit"&gt;
         &lt;a href = "file.txt" download&gt;Click to Download!&lt;/a&gt;
      &lt;/button&gt;
      &lt;br/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>file.txt</h3>
<pre class="result notranslate">
This is for testing watir download
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/testing_watir.jpg" alt="Testing Watir" />
<p>When you click the download button, the file is downloaded.</p>
<p>Now let us test the same using Watir &minus;</p>
<pre class="prettyprint notranslate">
require 'watir'
prefs = {
   'download' =&gt; {
      'default_directory' =&gt; "C:/download",
      'prompt_for_download' =&gt; false,
   }
}
b = Watir::Browser.new :chrome, options: {prefs: prefs}
b.goto('http://localhost/uitesting/filedownload.html')
b.button(id: 'btnsubmit').click
b.screenshot.save 'testdownload.png'
</pre>
<p>The path we have given to store the downloaded file is "C:/download". When we execute above code we will have the file download in download path given as shown below &minus;</p>
<img class="full-width" src="/watir/images/download_path.jpg" alt="download path" />
<p>The output testdownload.png is as shown here &minus;</p>
<img class="center" src="/watir/images/testdownload.jpg" alt="testdownload" />
<h1>Watir - Browser Windows</h1>
<p>You will come across cases where we have to use popup window or opening of a new browser window. In this chapter, we will discuss how to test such cases using Watir.</p>
<h2>Syntax</h2>
<pre class="result notranslate">
browser.window
</pre>
<p>A working example that we are going to test is given here &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;head&gt;
      &lt;title&gt;Testing UI using Watir&lt;/title&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;script type = "text/javascript"&gt;
         function wsclick() {
            var myWindow = window.open(
               "https://www.google.com/", "mywindow", "width = 1000,height = 500");
         }
      &lt;/script&gt;
      
      &lt;form name = "myform" method = "POST"&gt;
         &lt;div&gt;
            &lt;br&gt;
            &lt;input type = "button" id = "btnsubmit" name = "btnsubmit" value = "submit" onclick = "wsclick()"/&gt;
            &lt;br&gt;
         &lt;/div&gt;
      &lt;/form&gt;
      &lt;br/&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h3>Output</h3>
<img class="center" src="/watir/images/browser_windows.jpg" alt="Browser Windows" />
<p>On-click of button Open Window, the popup window opens up. Here, the url we have given is <a target="_blank" rel="nofollow" href="https://www.google.com/"> www.google.com</a>. Now let us test the same using Watir/</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
require 'watir'
b = Watir::Browser.new :chrome
b.goto('http://localhost/uitesting/windowpopup.html')
b.button(id: 'btnsubmit').click
b.window(title: 'Google').use do
   b.screenshot.save 'popupwindow.png'
   t = b.text_field(class: 'gLFyf')
   t.set 'Watir'
   b.screenshot.save 'popupwindowbefore.png'
   b.button(name: 'btnK').click
   b.screenshot.save 'popupwindowafter.png'
end
</pre>
<p>The screenshots that we have taken are given below &minus;</p>
<h3>popupwindow.png</h3>
<img class="full-width" src="/watir/images/working_with_links_outputs.jpg" alt="Working With Links Outputs" />
<h3>popupwindowbefore.png</h3>
<img class="full-width" src="/watir/images/popupwindowbefore.jpg" alt="Popupwindowbefore" />
<h3>popupwindowafter.png</h3>
<img class="full-width" src="/watir/images/popupwindowafter_png.jpg" alt="Popupwindowafter" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/watir/watir_browser_windows.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/watir/watir_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
