<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Flex - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Flex - Quick Guide - Flex is a powerful, open source application framework that allows you to build traditional applications for browser, mobile and desktop using the same programmi"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/flex/flex_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#ee1b2e;
}
a.demo {
    background:#ee1b2e;
}
li.heading {
    background:#ee1b2e;
}
.course-box{background:#ee1b2e}
.home-intro-sub p{color:#ee1b2e}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/flex/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/flex/images/flex-mini-logo.jpg" alt="Adobe Flex Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Adobe Flex Tutorial</li>
<li><a href="/flex/index.htm">Flex - Home</a></li>
<li><a href="/flex/flex_overview.htm">Flex - Overview</a></li>
<li><a href="/flex/flex_environment_setup.htm">Flex - Environment</a></li>
<li><a href="/flex/flex_applications.htm">Flex - Applications</a></li>
<li><a href="/flex/flex_create_application.htm">Flex - Create Application</a></li>
<li><a href="/flex/flex_deploy_application.htm">Flex - Deploy Application</a></li>
<li><a href="/flex/flex_life_cycle_phases.htm">Flex - Life Cycle Phases</a></li>
<li><a href="/flex/flex_style_with_css.htm">Flex - Style with CSS</a></li>
<li><a href="/flex/flex_style_with_skin.htm">Flex - Style with Skin</a></li>
<li><a href="/flex/flex_data_binding.htm">Flex - Data Binding</a></li>
<li><a href="/flex/flex_basic_controls.htm">Flex - Basic Controls</a></li>
<li><a href="/flex/flex_form_controls.htm">Flex - Form Controls</a></li>
<li><a href="/flex/flex_complex_controls.htm">Flex - Complex Controls</a></li>
<li><a href="/flex/flex_layout_panels.htm">Flex - Layout Panels</a></li>
<li><a href="/flex/flex_visual_effects.htm">Flex - Visual Effects</a></li>
<li><a href="/flex/flex_event_handling.htm">Flex - Event Handling</a></li>
<li><a href="/flex/flex_custom_controls.htm">Flex - Custom Controls</a></li>
<li><a href="/flex/flex_rpc_services.htm">Flex -  RPC Services</a></li>
<li><a href="/flex/flex_flexunit_integration.htm">Flex - FlexUnit Integration</a></li>
<li><a href="/flex/flex_debug_application.htm">Flex - Debug Application</a></li>
<li><a href="/flex/flex_internationalization.htm">Flex - Internationalization</a></li>
<li><a href="/flex/flex_printing_support.htm">Flex -  Printing Support</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Adobe Flex Resources</li>
<li><a href="/flex/flex_quick_guide.htm">Flex - Quick Guide</a></li>
<li><a href="/flex/flex_useful_resources.htm">Flex - Useful Resources</a></li>
<li><a href="/flex/flex_discussion.htm">Flex - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Flex - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/flex/flex_printing_support.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/flex/flex_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Flex - Overview</h1>
<h2>What is Flex?</h2>
<p>Flex is a powerful, open source application framework that allows you to build traditional applications for browser, mobile and desktop using the same programming model, tool, and codebase.</p>
<p>Flex provides FLEX SDK consisting of the Flex class library (ActionScript classes), the Flex compilers, the debugger, the MXML and ActionScript programming languages, and other utilities to build expressive and interactive rich internet applications (RIA)</p>
<p>Flex takes care of the user interface (UI) or the client-side functionality of a web application. Server-side functionality is dependent on server-side components written in a traditional scripting language (Java/ PHP etc.)</p>
<p>A Flex based application actually delivered as a SWF file and it closely resembles the HTML / JavaScript portion of a traditional web application.</p>
<p>Flex application is deployed as SWF file(s) plus an HTML wrapper, the CSS file(s) and any server-side script files (i.e. Java, .CFM, .PHP, etc.) to the server. Like traditional web applications.</p>
<p>These resources are delivered from a server to the client’s browser using the customary HTTP request / response fashion and Flash Player which runs the application in a browser.</p>
<h2>Advantages of Flex</h2>
<ul class="list">
<li><p>Flex applications are usually Flash Player based which can access device capabilities like GPS, camera, local database, graphics accelerometer.</p></li>
<li><p>Flex applications can run on Android, BlackBerry Tablet OS, and iOS devices.</p></li>
<li><p>Flex applications can run on Browsers as well as on Desktop.</p></li>
<li><p>Flex applications are platform independent. UI can be native to platform or can be made same on each platform.</p></li>
<li><p>Flex applications can interact with server with all major server side technologies like Java, Spring, Hibernate, PHP, Ruby, .NET, Adobe ColdFusion, and SAP using industry standards such as REST, SOAP, JSON, JMS, and AMF.</p></li>
<li><p>Flex Applications assures rich user experience through intuitive interaction with the application and presenting information in a visually richer interface.</p></li>
<li><p>Flex application is a single page application where states can transition from one state to other state without having to fetch a new page from the server or to refresh the browser.</p></li>
<li><p>Flex application reduces the load on the server to great extent because it is only required to return the application once, rather than a new page every time when the user changes views.</p></li>
</ul>
<h2>Disadvantages of Flex</h2>
<ul class="list">
<li><p>Flex applications are single threaded applications but Flex provides an asynchronous programming model to mitigate this concern.</p></li>
<li><p>Flex is ActionScript and XML based. Learning of these two is a must to work in Flex.</p></li>
</ul>
<h1>Flex - Environment Setup</h1>
<p>This tutorial will guide you on how to prepare a development environment to start your work with Adobe Flex Framework. This tutorial will also teach you how to setup JDK and Adobe Flash Builder on your machine before you setup Flex Framework.</p>
<h2>System Requirement</h2>
<p>FLEX requires JDK 1.4 or higher, so the very first requirement is to have JDK installed in your machine.</p>
<table class="table table-bordered">
<tr>
<th>JDK</th>
<td>1.4 Or above.</td>
</tr>
<tr>
<th>Memory</th>
<td>No minimum requirement.</td>
</tr>
<tr>
<th>Disk Space</th>
<td>No minimum requirement.</td>
</tr>
<tr>
<th>Operating System</th>
<td>No minimum requirement.</td>
</tr>
</table>
<p>Follow the given steps to setup your environment to start with Flex application development.</p>
<h3>Step 1 - Verify Java installation on your machine</h3>
<p>Now open the console and execute the following <b>java</b> command.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">OS</th>
<th style="text-align:center;">Task</th>
<th style="text-align:center;">Command</th>
</tr>
<tr>
<td style="text-align:center;">Windows</td>
<td>Open Command Console</td>
<td>c:\&gt; java -version</td>
</tr>
<tr>
<td style="text-align:center;">Linux</td>
<td>Open Command Terminal</td>
<td>$ java -version</td>
</tr>
<tr>
<td style="text-align:center;">Mac</td>
<td>Open Terminal</td>
<td>machine:~ joseph$ java -version</td>
</tr>
</table>
<p>Let's verify the output for all the operating systems &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">OS</th>
<th style="text-align:center;">Generated Output</th>
</tr>
<tr>
<td class="ts">Windows</td>
<td><p>java version "1.6.0_21"</p>
<p>Java(TM) SE Runtime Environment (build 1.6.0_21-b07)</p>
<p>Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)</p>
</td>
</tr>
<tr>
<td class="ts">Linux</td>
<td><p>java version "1.6.0_21" </p>
<p>Java(TM) SE Runtime Environment (build 1.6.0_21-b07)</p>
<p>Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)</p>
</td>
</tr>
<tr>
<td class="ts">Mac</td>
<td><p>java version "1.6.0_21"</p>
<p>Java(TM) SE Runtime Environment (build 1.6.0_21-b07)</p>
<p>Java HotSpot(TM)64-Bit Server VM (build 17.0-b17, mixed mode, sharing)</p>
</td>
</tr>
</table>
<h3>Step 2 - Setup Java Development Kit (JDK)</h3>
<p>If you do not have Java installed, then you can install the Java Software Development Kit (SDK) from Oracle's Java site <a rel="nofollow" href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank">Java SE Downloads</a>. You will find instructions for installing JDK in downloaded files, then follow the given instructions to install and configure the setup. Finally set PATH and JAVA_HOME environment variables to refer to the directory that contains java and javac, typically java_install_dir/bin and java_install_dir respectively.</p>
<p>Set the <b>JAVA_HOME</b> environment variable to point to the base directory location where Java is installed on your machine. For example &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">OS</th>
<th style="text-align:center;">Output</th>
</tr>
<tr>
<td class="ts">Windows</td>
<td>Set the environment variable JAVA_HOME to C:\Program Files\Java\jdk1.6.0_21</td>
</tr>
<tr>
<td style="text-align:center;">Linux</td>
<td>export JAVA_HOME=/usr/local/java-current</td>
</tr>
<tr>
<td style="text-align:center;">Mac</td>
<td>export JAVA_HOME=/Library/Java/Home</td>
</tr>
</table>
<p>Append the Java compiler location to the System Path.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">OS</th>
<th style="text-align:center;">Output</th>
</tr>
<tr>
<td class="ts">Windows</td>
<td>Append the string ;%JAVA_HOME%\bin to the end of the system variable, Path.</td>
</tr>
<tr>
<td style="text-align:center;">Linux</td>
<td>export PATH=$PATH:$JAVA_HOME/bin/</td>
</tr>
<tr>
<td style="text-align:center;">Mac</td>
<td>not required</td>
</tr>
</table>
<h3>Step 3 - Setup Adobe Flash Builder 4.5</h3>
<p>All the examples in this tutorial has been written using Adobe Flash Builder 4.5 Profession IDE Trial Version. Hence, suggest you to have latest version of Adobe Flash Builder installed on your machine. Also, check compatibility of operating system.</p>
<p>To install Adobe Flash Builder IDE, download the latest Adobe Flash Builder binaries from <a rel="nofollow" target="_blank" href="https://www.adobe.com/in/products/flash-builder.html">https://www.adobe.com/in/products/flash-builder.html</a>. Once you downloaded the installation, unpack the binary distribution into a convenient location. For example, in C:\flash-builder on windows, or /usr/local/flash-builder on Linux/Unix and finally set PATH variable appropriately.</p>
<p>Flash Builder will start, when you execute the following commands on windows machine, or when you can simply double click on FlashBuilder.exe</p>
<pre class="result notranslate">
%C:\flash-builder\FlashBuilder.exe
</pre>
<p>Flash Builder can be started by executing the following commands on Unix (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$/usr/local/flash-builder/FlashBuilder
</pre>
<p>Adobe Flash Builder Trial Version can be used for 60 days. Just accept the terms and conditions, and skip the initial registration steps to continue with the IDE. For our understanding, we’re using the trial version for teaching purpose.</p>
<p>After a successful startup, if everything is fine then it should display the following result &minus;</p>
<img src="/flex/images/flashbuilderhomepage.jpg" alt="FlashBuilder Home page" />
<p>Adobe Flash Builder comes pre-configured with FLEX SDKs. We're using FLEX SDK 4.5 in our examples which come bundled with Adobe Flash Builder 4.5.</p>
<h3>Step 4 – Setup Apache Tomcat</h3>
<p>You can download the latest version of Tomcat from <a rel="nofollow" href="https://tomcat.apache.org/" target="_blank">https://tomcat.apache.org/</a>. Once, you downloaded the installation, unpack the binary distribution into a convenient location. For example, in C:\apache-tomcat-6.0.33 on windows, or /usr/local/apache-tomcat-6.0.33 on Linux/Unix and set CATALINA_HOME environment variable pointing to the installation locations.</p>
<p>Tomcat can be started by executing the following commands on windows machine, or you can simply double click on startup.bat</p>
<pre class="result notranslate">
%CATALINA_HOME%\bin\startup.bat 
or 
C:\apache-tomcat-6.0.33\bin\startup.bat 
</pre>
<p>Tomcat can be started by executing the following commands on UNIX (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$CATALINA_HOME/bin/startup.sh 
Or 
/usr/local/apache-tomcat-6.0.33/bin/startup.sh
</pre>
<p>After a successful startup, the default web applications included with Tomcat will be available by visiting <b>http://localhost:8080/</b>. If everything is fine, then it should display the following result &minus;</p>
<img src="/flex/images/tomcathomepage.jpg" alt="Tomcat Home page" />
<p>Further information about configuring and running Tomcat can be found in the documentation included here, as well as on the Tomcat web site: http://tomcat.apache.org</p>
<p>Tomcat can be stopped by executing the following commands on windows machine &minus;</p>
<pre class="result notranslate">
%CATALINA_HOME%\bin\shutdown
Or
C:\apache-tomcat-5.5.29\bin\shutdown
</pre>
<p>Tomcat can be stopped by executing the following commands on UNIX (Solaris, Linux, etc.) machine &minus;</p>
<pre class="result notranslate">
$CATALINA_HOME/bin/shutdown.sh
Or
/usr/local/apache-tomcat-5.5.29/bin/shutdown.sh
</pre>
<h1>Flex - Applications</h1>
<p>Before we start creating actual <i>“HelloWorld”</i> application using Flash Builder, let us see what the actual parts of a Flex application are &minus;</p>
<p>A Flex application consists of the following four important parts, out of which last part is optional but first three parts are mandatory.</p>
<ul class="list">
<li>Flex Framework Libraries</li>
<li>Client-side code</li>
<li>Public Resources (HTML/JS/CSS)</li>
<li>Server-side code</li>
</ul>
<p>Sample locations of different parts of a typical Flex application like HelloWord will be as shown below &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Name</th>
<th style="text-align:center;">Location</th>
</tr>
<tr>
<td>Project root</td>
<td>HelloWorld/</td>
</tr>
<tr>
<td>Flex Framework Libraries</td>
<td>Build Path</td>
</tr>
<tr>
<td>Public resources</td>
<td>html-template</td>
</tr>
<tr>
<td>Client-side code</td>
<td>table table-bordered/com/tutorialspoint/client</td>
</tr>
<tr>
<td>Server-side code</td>
<td>table table-bordered/com/tutorialspoint/server</td>
</tr>
</table>
<h2>Application Build Process</h2>
<p>To start with, Flex application requires Flex framework libraries. Later, Flash Builder automatically adds the libraries to build path.</p>
<p>When we build our code using Flash builder, Flash builder will do the following tasks &minus;</p>
<ul class="list">
<li><p>Compiles the source code to HelloWorld.swf file.</p></li>
<li><p>Compiles a HelloWorld.html (a wrapper file for swf file) from a file index.template.html stored in html-template folder</p></li>
<li><p>Copies HelloWorld.swf and HelloWorld.html files in target folder, bin-debug.</p></li>
<li><p>Copies swfobject.js, a JavaScript code responsible to load swf file dynamically in HelloWorld.html in target folder, bin-debug</p></li>
<li><p>Copies framework libraries in form of swf file named frameworks_xxx.swf in target folder, bin-debug</p></li>
<li><p>Copies other flex modules (.swf files such as sparkskins_xxx.swf, textLayout_xxx.swf) in target folder.</p></li>
</ul>
<!--<img src="/flex/images/flex_architecture.jpg" alt="Flex Architecture" />-->
<h2>Application Launch Process</h2>
<ul class="list">
<li><p>Open the HelloWorld.html file available in \HelloWorld\bin-debug folder in any web-browser.</p></li>
<li><p>HelloWorld.swf will load automatically and application will start running.</p></li>
</ul>
<h3>Flex Framework Libraries</h3>
<p>Following is the brief detail about few important framework libraries. Please note that, Flex libraries are denoted using .swc notation</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Nodes &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>playerglobal.swc</b></p>
<p>This library is specific to FlashPlayer installed on your machine and contains native methods supported by flash player.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>textlayout.swc</b></p>
<p>This library supports the text layout related features.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>framework.swc</b></p>
<p>This is the flex framework library contains the core features of Flex.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>mx.swc</b></p>
<p>This library stores the definitions of mx UI controls.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>charts.swc</b></p>
<p>This library supports the charting controls.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>spark.swc</b></p>
<p>This library stores the definitions of spark UI controls.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>sparkskins.swc</b></p>
<p>This library supports the skinning of spark UI controls.</p></td>
</tr>
</table>
<h2>Client-side Code</h2>
<p>Flex application code can be written in <b>MXML</b> as well as <b>ActionScript</b>.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Type &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>MXML</b></p>
<p>MXML is an XML markup language that we'll use to lay out user interface components. MXML is compiled into ActionScript during build process.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>ActionScript</b></p>
<p>ActionScript is an object-oriented procedural programming language and is based on the ECMAScript (ECMA-262) edition 4 draft language specification.</p></td>
</tr>
</table>
<p>In Flex, we can mix ActionScript and MXML, to do the following &minus;</p>
<ul class="list">
<li><p>Layout user interface components using MXML tags</p></li>
<li><p>Use MXML to declaratively define nonvisual aspects of an application, such as access to data sources on the server</p></li>
<li><p>Use MXML to create data bindings between user interface components and data sources on the server.</p></li>
<li><p>Use ActionScript to define event listeners inside MXML event attributes.</p></li>
<li><p>Add script blocks using the <mx:Script> tag.</p></li>
<li><p>Include external ActionScript files.</p></li>
<li><p>Import ActionScript classes.</p></li>
<li><p>Create ActionScript components.</p></li>
</ul>
<h3>Public Resources</h3>
<p>These are help files referenced by Flex application, such as Host HTML page, CSS or images located under html-template folder. It contains following files &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">File Name &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>index.template.html</b></p>
<p>Host HTML page, with place holders. Flash Builder uses this template to build actual page HelloWorld.html with HelloWorld.swf file.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>playerProductInstall.swf</b></p>
<p>This is a flash utility to install Flash Player in express mode.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>swfobject.js</b></p>
<p>This is the JavaScript responsible to check version of flash player installed and to load HelloWorld.swf in HelloWorld.html page.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>html-template/history</b></p>
<p>This folder contains resources for history management of the application.</p></td>
</tr>
</table>
<h3>HelloWorld.mxml</h3>
<p>This is the actual MXML/AS (ActionScript) code written implementing the business logic of the application and that the Flex compiler translates into SWF file which will be executed by flash player in the browser.</p>
<p>A sample HelloWorld Entry class will be as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%"
   minWidth = "500" minHeight = "500" 
   initialize = "application_initializeHandler(event)"&gt;

   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            Alert.show("Hello World!");				
         }

         protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "My Hello World Application";				
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:VGroup horizontalAlign = "center" width = "100%" height = "100%" 
      paddingTop = "100" gap = "50"&gt;
      &lt;s:Label id = "lblHeader" fontSize = "40" color = "0x777777" /&gt;
      &lt;s:Button label = "Click Me!" id = "btnClickMe" 
         click = "btnClickMe_clickHandler(event)" /&gt;
   &lt;/s:VGroup&gt;	
&lt;/s:Application&gt;
</pre>
<p>Following table gives the description of all the tags used in the above code script.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Node &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Application</b></p>
<p>Defines the Application container that is always the root tag of a Flex application.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Script</b></p>
<p>Contains the business logic in ActionScript language.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>VGroup</b></p>
<p>Defines a Vertical Grouping Container which can contain Flex UI controls in vertical fashion.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Label</b></p>
<p>Represents a Label control, a very simple user interface component that displays text.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Button</b></p>
<p>Represents a Button control, which can be clicked to do some action.</p></td>
</tr>
</table>
<h2>Server-side code</h2>
<p>This is the server side part of your application and it’s very much optional. If you are not doing any backend processing within your application, then you do not need this part but if there is some processing required at backend and your clientside application interacts with the server, then you will have to develop these components.</p>
<p>In the next chapter, we will use all the above-mentioned concepts to create a <b>HelloWorld</b> application using Flash Builder.</p>
<h1>Flex - Create Application</h1>
<p>We'll use Flash Builder 4.5 to create Flex Applications. Let's start with a simple <b><i>HelloWorld</i></b> application.</p>
<h2>Step 1 – Create Project</h2>
<p>The first step is to create a simple Flex Project using Flash Builder IDE. Launch project wizard using the option <b>File &gt; New &gt; Flex Project</b>. Now name your project as <i>HelloWorld</i> using the wizard window as follows &minus;</p>
<img src="/flex/images/flex_new_project.jpg" alt="Create Flex Project Wizard" />
<p>Select Application Type <b>Web (runs in Adobe Flash Player)</b>. However, if this is not selected, then leave other default values as such and click Finish Button. Once your project is created successfully, then you will have the following content in your Project Explorer &minus;</p>
<img src="/flex/images/flex_project_structure.jpg" alt="Flex Project Structure" />
<p>Here is a brief description of all the important folders &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:20%">Folder</th>
<th style="text-align:center;">Location</th>
</tr>
<tr>
<td class="ts">table table-bordered</td>
<td>
<p>Source code (mxml / as classes) files.</p>
<p>We've created com/tutorialspoint/client folder structure containing the client-side specific java classes responsible for client UI display.</p>
</td>
</tr>
<tr>
<td class="ts">bin-debug</td>
<td><p>This is the output part, it represents the actual deployable web application.</p>
<p>History folder contains support files for history management of Flex application.</p>
<p>framework_xxx.swf, flex framework files should be used by flex application.</p>
<p>HelloWorld.html, wrapper/host HTML File for flex application.</p>
<p>HelloWorld.swf, our flex based application.</p>
<p>playerProductInstall.swf, flash player express installer.</p>
<p>spark_xxx.swf, library for spark component support.</p>
<p>swfobject.js, JavaScript responsible to load HelloWorld.swf in HelloWorld.html. It checks flash player version and passes initialization parameter to HelloWorld.swf file.</p>
<p>textLayout_xxx.swf, library for text component support.</p>
</td>
</tr>
<tr>
<td class="ts">html-template</td>
<td>
<p>This represents the configurable web application. Flash Builder compiles files from html-template to bin-debug folder.</p>
<p>History folder contains support files for history management of Flex application.</p>
<p>index.template.html, wrapper/host HTML File for flex application having place holders for Flash Builder specific configuration. Gets compiled to HelloWorld.html in bin-debug folder during build.</p>
<p>playerProductInstall.swf, flash player express installer gets copied to bin-debug folder during build.</p>
<p>swfobject.js, JavaScript responsible to load HelloWorld.swf in HelloWorld.html. It checks flash player version and passes initialization parameter to HelloWorld.swf file gets copied to bindebug folder during build.</p>
</td></tr>
</table>
<h2>Step 2 – Create External CSS File</h2>
<p>Create a CSS file <b>styles.css</b> for Wrapper HTML page in <b>html-template</b> folder.</p>
<pre class="prettyprint notranslate">
html, body { 
   height:100%;
}

body { 
   margin:0; 
   padding:0; 
   overflow:auto; 
   text-align:center;		
}   

object:focus { 
   outline:none; 
}

#flashContent { 
   display:none;	
}

.pluginHeader {
   font-family:Arial, Helvetica, sans-serif;
   font-size:14px;
   color:#9b1204;
   text-decoration:none;
   font-weight:bold;
}

.pluginInstallText {
   font-family:Arial, Helvetica, sans-serif;
   font-size:12px;
   color:#000000;
   line-height:18px;
   font-style:normal;
}

.pluginText { 
   font-family:Arial, Helvetica, sans-serif;
   font-size:12px;
   color:#000000;
   line-height:18px;
   font-style:normal;
}
</pre>
<h2>Step 3 – Modify Wrapper HTML page template</h2>
<p>Modify Wrapper HTML page template <b>index.template.html</b> in <b>htmltemplate</b> folder. Flash Builder will create a default Wrapper HTML page template <i>html-template/index.template.html</i>, which will be compiled to HelloWorld.html.</p>
<p>This file contains placeholders which Flash Builder replaces during the compilation process. For example, flash player version, application name, etc.</p>
<p>Let us modify this file to display custom messages in case flash plugin is not installed.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns = "http://www.w3.org/1999/xhtml" lang = "en" xml:lang = "en"&gt;
   
   &lt;head&gt;
      &lt;title&gt;${title}&lt;/title&gt;
      &lt;meta name = "google" value = "notranslate" /&gt;
      &lt;meta http-equiv = "Content-Type" content = "text/html; charset = utf-8" /&gt;
      &lt;link rel = "stylesheet" href = "styles.css" type = "text/css"&gt;&lt;/link&gt;
      &lt;link rel = "stylesheet" type = "text/css" href = "history/history.css" /&gt;
      &lt;script type = "text/javascript" table table-bordered = "history/history.js"&gt;
      &lt;/script&gt;
      &lt;script type = "text/javascript" table table-bordered = "swfobject.js"&gt;&lt;/script&gt;
      
      &lt;script type = "text/javascript"&gt;
         // For version detection, set to min. required Flash Player version,
         //or 0 (or 0.0.0), for no version detection.
         var swfVersionStr = "${version_major}.${version_minor}.${version_revision}";

         // To use express install, set to playerProductInstall.swf,
         //otherwise the empty string.
         var xiSwfUrlStr = "${expressInstallSwf}";
         var flashvars = {};
         var params = {};
         params.quality = "high";
         params.bgcolor = "${bgcolor}";
         params.allowscriptaccess = "sameDomain";
         params.allowfullscreen = "true";
         
         var attributes = {};
         attributes.id = "${application}";
         attributes.name = "${application}";
         attributes.align = "middle";
         swfobject.embedSWF (
            "${swf}.swf", "flashContent",
            "${width}", "${height}",
            swfVersionStr, xiSwfUrlStr,
            flashvars, params, attributes);

         // JavaScript enabled so display the flashContent div in case
         //it is not replaced with a swf object.
         swfobject.createCSS("#flashContent", "display:block;text-align:left;");
      &lt;/script&gt;
   &lt;/head&gt;
   
   &lt;body&gt;
      &lt;div id = "flashContent"&gt;
         &lt;p style = "margin:100px;"&gt;

            &lt;table width = "700" cellpadding = "10" cellspacing = "2" border = "0"&gt;
               &lt;tr&gt;
                  &lt;td class = "pluginHeader"&gt;Flash Player Required&lt;/td&gt;
               &lt;/tr&gt;
               
               &lt;tr&gt;
                  &lt;td class = "pluginText"&gt;The Adobe Flash Player version
                     10.2.0 or greater is required.&lt;/td&gt;
               &lt;/tr&gt;
               
               &lt;tr&gt;
                  &lt;td class = "pluginInstallText" align = "left"&gt;
               
                  &lt;table border = "0" width = "100%"&gt;
                     &lt;tr class = "pluginInstallText" &gt;
                        &lt;td&gt;Click here to download and install Adobe Flash Player:&lt;/td&gt;
                        &lt;td&gt;&nbsp;&lt;/td&gt;
                        &lt;td align = "right"&gt;
                           &lt;script type = "text/javascript"&gt;
                              var pageHost
                                 = ((document.location.protocol == "https:") ? "https://" : "http://");
                              document.write("&lt;a target = '_blank'"
                                 +" href = 'http://get.adobe.com/flashplayer/'&gt;&lt;"
                                 +"img style = 'border-style: none' table table-bordered = '"
                                 +pageHost
                                 +"www.adobe.com/images/shared/download_buttons/get_flash_player.gif'"
                                 +" alt = 'Get Adobe Flash player' /&gt;&lt;/a&gt;" );
                           &lt;/script&gt;
                        &lt;/td&gt;
                     &lt;/tr&gt;
                  &lt;/table&gt;
               &lt;/tr&gt;
            &lt;/table&gt;
         &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;noscript&gt;
         &lt;object classid = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
            width = "${width}" height = "${height}" id = "${application}"&gt;
            &lt;param name = "movie" value = "${swf}.swf" /&gt;
            &lt;param name = "quality" value = "high" /&gt;
            &lt;param name = "bgcolor" value = "${bgcolor}" /&gt;
            &lt;param name = "allowScriptAccess" value = "sameDomain" /&gt;
            &lt;param name = "allowFullScreen" value = "true" /&gt;
         
            &lt;!--[if !IE]&gt;--&gt;
            &lt;object type = "application/x-shockwave-flash" data = "${swf}.swf"
               width = "${width}" height = "${height}"&gt;
               &lt;param name = "quality" value = "high" /&gt;
               &lt;param name = "bgcolor" value = "${bgcolor}" /&gt;
               &lt;param name = "allowScriptAccess" value = "sameDomain" /&gt;
               &lt;param name = "allowFullScreen" value = "true" /&gt;
            &lt;!--&lt;![endif]--&gt;
         
            &lt;!--[if gte IE 6]&gt;--&gt;
               &lt;p&gt;
                  &lt;p style = "margin:100px;"&gt;
                     &lt;table width = "700" cellpadding = "10" cellspacing = "2" 
                        border = "0"&gt;
                        &lt;tr&gt;
                           &lt;td class = "pluginHeader"&gt;Flash Player Required&lt;/td&gt;
                        &lt;/tr&gt;
                        
                        &lt;tr&gt;
                           &lt;td class = "pluginText"&gt;The Adobe Flash Player version
                           10.2.0 or greater is required.&lt;/td&gt;
                        &lt;/tr&gt;
                        
                        &lt;tr&gt;
                           &lt;td class = "pluginInstallText" align = "left"&gt;

                           &lt;table border = "0" width = "100%"&gt;
                              &lt;tr class = "pluginInstallText" &gt;
                                 &lt;td&gt;Click here to download and install Adobe Flash 
                                    Player:&lt;/td&gt;
                                 &lt;td&gt;&nbsp;&lt;/td&gt;
                                 &lt;td align = "right"&gt;
                                    &lt;script type = "text/javascript"&gt;
                                       var pageHost
                                          = ((document.location.protocol == "https:") ? "https://" : "http://");
                                       document.write("&lt;a target = '_blank'"
                                          +" href = 'http://get.adobe.com/flashplayer/'&gt;&lt;"
                                          +"img style = 'border-style: none' table table-bordered = '"
                                          +pageHost
                                          +"www.adobe.com/images/shared/download_buttons/get_flash_player.gif'"
                                          +" alt = 'Get Adobe Flash player' /&gt;&lt;/a&gt;" );
                                    &lt;/script&gt;
                                 &lt;/td&gt;
                              &lt;/tr&gt;
                           &lt;/table&gt;
                        &lt;/tr&gt;
                     &lt;/table&gt;
                  &lt;/p&gt;
               &lt;/p&gt;
            &lt;!--&lt;![endif]--&gt;
         
            &lt;p style = "margin:100px;"&gt;
               &lt;table width = "700" cellpadding = "10" cellspacing = "2" border = "0"&gt;
                  &lt;tr&gt;&lt;td class = "pluginHeader"&gt;Flash Player Required&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td class = "pluginText"&gt;The Adobe Flash Player version
                     10.2.0 or greater is required.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                     &lt;td class = "pluginInstallText" align = "left"&gt;
                        &lt;table border = "0" width = "100%"&gt;
                           &lt;tr class = "pluginInstallText" &gt;
                              &lt;td&gt;Click here to download and install Adobe Flash 
                                 Player:&lt;/td&gt;
                              &lt;td&gt;&nbsp;&lt;/td&gt;
                              &lt;td align = "right"&gt;
                                 &lt;script type = "text/javascript"&gt;
                                    var pageHost
                                       = ((document.location.protocol == "https:") ? "https://" : "http://");
                                    document.write("&lt;a target = '_blank'"
                                       +" href = 'http://get.adobe.com/flashplayer/'&gt;&lt;"
                                       +"img style = 'border-style: none' table table-bordered = '"
                                       +pageHost
                                       +"www.adobe.com/images/shared/download_buttons/get_flash_player.gif'"
                                       +" alt = 'Get Adobe Flash player' /&gt;&lt;/a&gt;" );
                                 &lt;/script&gt;
                              &lt;/td&gt;
                           &lt;/tr&gt;
                        &lt;/table&gt;
                     &lt;/td&gt;
                  &lt;/tr&gt;
               &lt;/table&gt;
            &lt;/p&gt;
         &lt;!--[if !IE]&gt;--&gt;
         &lt;/object&gt;
         &lt;!--&lt;![endif]--&gt;
         &lt;/object&gt;
      &lt;/noscript&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<h2>Step 4 – Create Internal CSS file</h2>
<p>Create a CSS file <b>Style.css</b> for <b>HelloWorld.mxml</b> in <b>table tablebordered/com/tutorialspoint</b> folder. Flex provides similar css styles for its UI Controls as there are css styles for HTML UI controls.</p>
<pre class="prettyprint notranslate">
/* CSS file */
@namespace s "library://ns.adobe.com/flex/spark";
@namespace mx "library://ns.adobe.com/flex/mx";

.heading {
   fontFamily: Arial, Helvetica, sans-serif;
   fontSize: 17px;
   color: #9b1204;
   textDecoration:none;
   fontWeight:normal;
}

.button {
   fontWeight: bold;			
}

.container {
   cornerRadius :10;
   horizontalCenter :0;	
   borderColor: #777777;
   verticalCenter:0;
   backgroundColor: #efefef;
}
</pre>
<h2>Step 5 – Modify Entry Level Class</h2>
<p>Flash Builder will create a default mxml file <i>table tablebordered/com.tutorialspoint/HelloWorld.mxml</i>, which is having root tag &lt;application&gt; container for the application. Let us modify this file to display "Hello,World!" &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
   xmlns:s = "library://ns.adobe.com/flex/spark"
   xmlns:mx = "library://ns.adobe.com/flex/mx
   width = "100%" height = "100%"
      minWidth = "500" minHeight = "500"
      initialize = "application_initializeHandler(event)"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            Alert.show("Hello World!");
         }

         protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "My Hello World Application";
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer"
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" horizontalAlign = "center"
         verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" fontSize = "40" color = "0x777777"
            styleName = "heading" /&gt;
         &lt;s:Button label = "Click Me!" id = "btnClickMe"
            click = "btnClickMe_clickHandler(event)" styleName = "button" /&gt;
      &lt;/s:VGroup&gt;
   &lt;/s:BorderContainer&gt;
&lt;/s:Application&gt;
</pre>
<p>You can create more mxml or actionscript files in the same source directory to define either new applications or to define helper routines.</p>
<h2>Step 6 – Build Application</h2>
<p>Flash Builder has <b>Build Automatically</b> by default checked. Just check the <b>Problems</b> View if there is any error. Once you are done with the changes, you will not see any errors.</p> 
<h2>Step 7 – Run Application</h2>
<p>Now click on <img class="inline" src="/flex/images/run_icon.jpg" alt="Run application" />Run application menu and select <b>HelloWorld</b> application to run the application.</p>
<img src="/flex/images/flex_run_button.jpg" alt="Flex Run Button" />
<p>If everything is fine, you must see browser pop up, application up, and running. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/CreateApplication.html">Try it online</a> ]</p>
<p>Because, you are running your application in flash player, then it will need to install Flash Player plugin for your browser. Simply follow the onscreen instructions to install the plugin. If you already have Flash Player plugin set for your browser, then you should be able to see the following output &minus;</p>
<img src="/flex/images/flex_application_result.jpg" alt="Flex Application Result" />
<p>Congratulations! You have implemented your first application using <b>Flex</b>.</p>
<h1>Flex - Deploy Application</h1>
<p>This tutorial will explain you how to create an application <b>war</b> file and how to deploy that in Apache Tomcat Web server root.</p>
<p>If you understood this simple example then you will also be able to deploy a complex Flex application following the same steps.</p>
<p>Let us follow the following steps to create a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWorld under a packagecom.<i>tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Follow the steps given below to create a release build of a Flex application and then deploy it to tomcat server &minus;</p>
<p>The first step is to create a release build using Flash Builder IDE. Launch release build wizard using the option <b>File &gt; Export &gt; Flash Builder &gt; Release Build</b>.</p> 
<img src="/flex/images/flex_release_build.jpg" alt="Release Build Wizard" />
<p>Select project as <i>HelloWorld</i> using the wizard window as follows</p>
<img src="/flex/images/flex_release_build1.jpg" alt="Release Build Wizard1" />
<p>Leave other default values as such and click Finish Button. Now, Flash Builder will create a bin-release folder containing the project's release build.</p>
<p>Now our release build is ready, let us follow the following steps to deploy a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Zip the content of the bin-release folder of the application in the form of HelloWorld.war file and deploy it in Apache Tomcat Webserver.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Launch your web application using appropriate URL as explained below in the last step.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>table table-bordered/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%"
   minWidth = "500" minHeight = "500" 
   initialize = "application_initializeHandler(event)"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            Alert.show("Hello World!");				
         }

         protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "My Hello World Application";				
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" horizontalAlign = "center" 
         verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" fontSize = "40" color = "0x777777" 
            styleName = "heading" /&gt;
         &lt;s:Button label = "Click Me!" id = "btnClickMe" 
            click = "btnClickMe_clickHandler(event)" styleName = "button" /&gt;
      &lt;/s:VGroup&gt;	
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, then it will produce the following result: [ <a target="_blank" href="/flex/samples/CreateApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_application_result.jpg" alt="Flex Application Result" />
<h2>Create WAR File</h2>
<p>Now our application is working fine and we are ready to export it as a war file. Follow the following steps &minus;</p>
<ul class="list">
<li><p>Go into your project's bin-release directory C:\workspace\HelloWorld\binrelease</p></li>
<li><p>Select all the files &amp; folders available inside bin-release directory.</p></li>
<li><p>Zip all the selected files &amp; folders in a file called <i>HelloWorld.zip</i>.</p></li>
<li><p>Rename HelloWorld.zip to HelloWorld.war.</p></li>
</ul>
<h2>Deploy WAR file</h2>
<p>Stop the tomcat server.</p>
<ul class="list">
<li><p>Copy the HelloWorld.war file to tomcat installation directory &gt; webapps folder.</p></li>
<li><p>Start the tomcat server.</p></li>
<li><p>Look inside webapps directory, there should be a folder HelloWorld got created.</p></li>
<li><p>Now HelloWorld.war is successfully deployed in Tomcat Webserver root.</p></li>
</ul>
<h2>Run Application</h2>
<p>Enter a URL in web browser &minus;<b></p>
<p>http://localhost:8080/HelloWorld/HelloWorld.html</b> to launch the application.</p>
<p>Server name (localhost) and port (8080) may vary as per your tomcat configuration.</p>
<img src="/flex/images/flex_application_result1.jpg" alt="Flex Application Result1" />
<h1>Flex - Life Cycle Phases</h1>
<h2>Life Cycle of Flex Application</h2>
<p>Although, you can build Flex applications without understanding the life cycle phases of an application, it is good to know the basic mechanism; the order in which things occur. It will help you to configure features such as loading other Flex applications at runtime, and manage the process of loading and unloading class libraries and assets at runtime.</p>
<p>A good understanding of the Flex application life cycle will enable you to build better applications and optimize them because you will know where to optimally run code. For example, if you need to ensure that some code runs during a preloader, you need to know where to place the code for that event.</p>
<img src="/flex/images/life_cycle_events.jpg" alt="Life Cycle Events" />
<p>When we load flex application in a browser, the following events occurs during the lifecycle of flex application.</p>
<p>Following is the brief detail about different Flex Life cycle events.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Event &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p>preInitialize: mx.core.UIComponent.preinitialize</p>
<p>Event Type: mx.events.FlexEvent.PREINITIALIZE</p>
<p>This event is dispatched at the beginning of the component initialization sequence. The component is in a very raw state when this event is dispatched. Many components, such as Button control creates internal child components to implement functionality. For example, the Button control creates an internal UI TextField component to represent its label text.</p>
<p>When Flex dispatches the pre-initialize event, the children, including all the internal children, of a component have not yet been created.</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td><p>initialize: mx.core.UIComponent.initialize</p>
<p>Event Type: mx.events.FlexEvent.INITIALIZE</p>
<p>This event is dispatched after pre-initialize phase. Flex framework initializes the internal structure of this component during this phase. This event automatically fires when the component is added to a parent.</p>
<p>You do not need to call initialize() generally.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p>creationComplete: mx.core.UIComponent.creationComplete</p>
<p>Event Type: mx.events.FlexEvent.CREATION_COMPLETE</p>
<p>This event is dispatched when the component has finished its construction, property processing, measuring, layout, and drawing.</p>
<p>At this point, depending on its visible property, the component is not visible even though it has been drawn.</p>
</td>
</tr>
<tr>
<td class="ts">4</td>
<td><p>applicationComplete: spark.components.Application.applicationComplete</p>
<p>Event Type:mx.events.FlexEvent.APPLICATION_COMPLETE</p>
<p>Dispatched after the Application has been initialized, processed by the LayoutManager, and attached to the display list.</p>
<p>This is the last event of the application creation life cycle and signifies that application has been loaded completely.</p>
</td>
</tr>
</table>
<h2>Flex Life Cycle Example</h2>
<p>Let us follow the steps to understand test life cycle of a Flex application by creating a test application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWorld under a packagecom.<i>tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
   xmlns:s = "library://ns.adobe.com/flex/spark"
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%" minWidth = "500" minHeight = "500"
   initialize = "reportEvent(event)"
   preinitialize = "reportEvent(event)"
   creationComplete = "reportEvent(event)"
   applicationComplete = "reportEvent(event)"&gt;	
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
   
         [Bindable]
         private var report:String = "";

         private function reportEvent(event:FlexEvent):void {
            report += "\n" + (event.type + " event occured at: " 
            + getTimer() + " ms" + "\n");
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" 
         horizontalAlign = "center" verticalAlign = "middle"&gt;
         &lt;s:Label textAlign = "center" width="100%" id = "lblHeader"
         fontSize = "40" color = "0x777777" styleName = "heading" 
         text = "Life Cycle Events Demonstration" /&gt;
         &lt;s:TextArea id = "reportText" text = "{report}" editable = "false" 
         width = "300" height = "200"&gt;				
         &lt;/s:TextArea&gt;			
      &lt;/s:VGroup&gt;	
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/CreateApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_life_cycle_events_demo.jpg" alt="Flex Application Life Cycle" />
<h1>Flex - Style with CSS</h1>
<p>Flex supports the use of CSS syntax and styles to apply to its UI controls in the same way as CSS to HTML components.</p>
<h2>Way # 1: Using External Style Sheet File</h2>
<p>You can refer to a style sheet available in the class path of the application. For example consider Style.css file in <b>com/tutorialspoint/client folder</b> where HelloWorld.mxml file also lies.</p>
<pre class="prettyprint notranslate">
/* CSS file */
@namespace s "library://ns.adobe.com/flex/spark";
@namespace mx "library://ns.adobe.com/flex/mx";
...
.container {
   cornerRadius :10;
   horizontalCenter :0;	
   borderColor: #777777;
   verticalCenter:0;
   backgroundColor: #efefef;
}
</pre>
<p>Then css file can be referred by following code snippet</p>
<pre class="result notranslate">
&lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
</pre>
<p>Assign styles to UI component using styleName property</p>
<pre class="prettyprint notranslate">
&lt;s:BorderContainer width = "500" height = "500" id = "mainContainer" 
   styleName = "container"&gt; 
   ...
&lt;/s:BorderContainer&gt;		  
</pre>
<h2>Way # 2: Using Styles Within Ui Container Component</h2>
<p>You can define styles within UI container component using &lt;fx:Style&gt; tag</p>
<h3>Class Level Selector</h3>
<pre class="prettyprint notranslate">
&lt;fx:Style&gt;
   @namespace s "library://ns.adobe.com/flex/spark";
   @namespace mx "library://ns.adobe.com/flex/mx";

   /* class level selector  */
   .errorLabel {
      color: red;
   }		
&lt;/fx:Style&gt;
</pre>
<p>Assign styles to UI component using styleName property.</p>
<pre class="result notranslate">
&lt;s:Label id = "errorMsg" text = "This is an error message" styleName = "errorLabel" /&gt;
</pre>
<h3>Id Level Selector</h3>
<p>Style UI component using id selector.</p>
<pre class="prettyprint notranslate">
&lt;fx:Style&gt; 
   /* id level selector  */ 
   #msgLabel { 
      color: gray; 
   } 
&lt;/fx:Style&gt;

&lt;s:Label id = "msgLabel" text = "This is a normal message" /&gt; 
</pre>
<h3>Type Level Selector</h3>
<p>Style one type of UI Component in one GO.</p>
<pre class="prettyprint notranslate">
&lt;fx:Style&gt; 
   /* style applied on all buttons  */ 
   s|Button {  
      fontSize: 15; 
      color: #9933FF; 
   } 
&lt;/fx:Style&gt;

&lt;s:Button label = "Click Me!" id = "btnClickMe"
   click = "btnClickMe_clickHandler(event)" /&gt;
</pre>
<h2>Flex Style with CSS Example</h2>
<p>Let us follow the steps to check CSS styling of a Flex application by creating a test application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWorld under a package<i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>Style.css, HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified CSS file <b>src/com.tutorialspoint/Style.css</b>.</p>
<pre class="prettyprint notranslate">
/* CSS file */
@namespace s "library://ns.adobe.com/flex/spark";
@namespace mx "library://ns.adobe.com/flex/mx";

.heading
{
   fontFamily: Arial, Helvetica, sans-serif;
   fontSize: 17px;
   color: #9b1204;
   textDecoration:none;
   fontWeight:normal;
}

.button {
   fontWeight: bold;			
}

.container {
   cornerRadius :10;
   horizontalCenter :0;	
   borderColor: #777777;
   verticalCenter:0;
   backgroundColor: #efefef;
}
</pre>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
   xmlns:s = "library://ns.adobe.com/flex/spark"
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%" minWidth = "500" minHeight = "500"
   initialize = "application_initializeHandler(event)"&gt;
   
   &lt;!--Add reference to style sheet --&gt;
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;

   &lt;!--Using styles within mxml file --&gt;
   &lt;fx:Style&gt;
      @namespace s "library://ns.adobe.com/flex/spark";
      @namespace mx "library://ns.adobe.com/flex/mx";

      /* class level selector  */
      .errorLabel {
         color: red;
      }

      /* id level selector  */
      #msgLabel {
         color: gray;
      }

      /* style applied on all buttons  */
      s|Button {
         fontSize: 15;
         color: #9933FF;
      }
   &lt;/fx:Style&gt;

   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            Alert.show("Hello World!");
         }

         protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "CSS Demonstrating Application";
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "560" height = "500" id = "mainContainer"
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50"
         horizontalAlign = "center" verticalAlign = "middle"&gt;
         &lt;s:Label width = "100%" id = "lblHeader" fontSize = "40"
            color = "0x777777" styleName = "heading" /&gt;
         &lt;s:Button label = "Click Me!" id = "btnClickMe"
            click = "btnClickMe_clickHandler(event)"  /&gt;
         &lt;s:Label id = "errorMsg"
            text = "This is an error message" styleName = "errorLabel" /&gt;
         &lt;s:Label id = "msgLabel" text = "This is a normal message" /&gt;
      &lt;/s:VGroup&gt;
   &lt;/s:BorderContainer&gt;
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, this will produce following result: [ <a target="_blank" href="/flex/samples/CSSApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_style_css_demo.jpg" alt="Flex Style with CSS" />
<h1>Flex - Style with Skin</h1>
<h2>What is Skinning?</h2>
<ul class="list">
<li><p>Skinning in Flex, is a process of customizing look and feel of a UI Component completely.</p></li>
<li><p>A Skin can define text, image, filters, transitions and states of a component.</p></li>
<li><p>A Skin can be created as a separate mxml or ActionScript component.</p></li>
<li><p>Using skin, we can control all visual aspects of a UI component.</p></li>
<li><p>The process of defining skin is same for all the UI component.</p></li>
</ul>
<h3>Step 1 – Create a Skin</h3>
<p>Launch Create MXML Skin wizard using the option <b>File &gt; New &gt; MXML Skin</b>.</p>
<img src="/flex/images/flex_skin_wizard.jpg" alt="Flex Skin Wizard" /> 
<p>Enter Package as <b>com.tutorialspoint.skin</b>, name as <b>GradientBackgroundSkin</b> and choose host component as existing flex BorderContainer control<b>spark.component.BorderContainer</b>.</p>
<p>Now you've created a skin for a BorderContainer. Modify content of the mxml skin file <b>src/com.tutorialspoint/skin/GradientBackgroundSkin.mxml</b>.</p> 
<p>Update fill layer as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;!-- fill --&gt;
&lt;s:Rect id = "backgroundRect" left = "0" right = "0" height = "100%" top = "0"&gt;
   &lt;s:fill&gt;
      &lt;s:LinearGradient rotation = "90"&gt;
         &lt;s:GradientEntry color = "0x888888" ratio = "0.2" /&gt;
         &lt;s:GradientEntry color = "0x111111" ratio = "1" /&gt;
      &lt;/s:LinearGradient&gt;
   &lt;/s:fill&gt;
&lt;/s:Rect&gt;	
</pre>
<h3>Step 2: Apply Skin</h3>
<p>You can apply skin over a component in two ways &minus;</p>
<h3>Apply skin in MXML script (statically)</h3>
<p>Apply <b>GradientBackgroundSkin</b> to a BorderContainer with id <b>mainContainer</b> using its <b>skinClass</b> attribute.</p>
<pre class="prettyprint notranslate">
&lt;s:BorderContainer width = "560" height = "500" id = "mainContainer" 
   styleName = "container"&gt;
   &lt;s:VGroup width = "100%" height = "100%" gap = "50" 
      horizontalAlign = "center" verticalAlign = "middle" 
      skinClass = "com.tutorialspoint.skin.GradientBackgroundSkin"&gt;
</pre>
<h3>Apply skin in ActionScript (dynamically)</h3>
<p>Apply <b>GradientBackgroundSkin</b> to a BorderContainer with id <b>mainContainer</b> using its <b>skinClass</b> property.</p>
<pre class="prettyprint notranslate">
protected function gradientBackground_clickHandler(event:MouseEvent):void {
   mainContainer.setStyle("skinClass", GradientBackgroundSkin);
}
</pre>
<h2>Flex Style with Skin Example</h2>
<p>Let us follow the following steps to see skinning in action in a Flex application by creating a test application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name HelloWorld under a package<i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Create skin <i>GradientBackgroundSkin.mxml</i> under a package<i>com.tutorialspoint.skin</i> as explained above. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the GradientBackgroundSkin.mxml file <b>src/com/tutorialspoint/skin/GradientBackg roundSkin.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Skin xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx"&gt;
   
   &lt;!-- host component --&gt;
   &lt;fx:Metadata&gt;
      [HostComponent("spark.components.BorderContainer")]
   &lt;/fx:Metadata&gt; 

   &lt;!-- states --&gt;
   &lt;s:states&gt;
      &lt;s:State name = "disabled" /&gt;
      &lt;s:State name = "disabled" /&gt;
      &lt;s:State name = "normal" /&gt;
   &lt;/s:states&gt;

   &lt;!-- SkinParts
   name = contentGroup, type = spark.components.Group, required = false
   --&gt;
   
   &lt;!-- fill --&gt;
   &lt;s:Rect id = "backgroundRect" left = "0" right = "0" height = "100%" top = "0"&gt;
      &lt;s:fill&gt;
         &lt;s:LinearGradient rotation = "90"&gt;
            &lt;s:GradientEntry color = "0x111111" ratio = "0.2" /&gt;
            &lt;s:GradientEntry color = "0x888888" ratio = "1" /&gt;
         &lt;/s:LinearGradient&gt;
      &lt;/s:fill&gt;
   &lt;/s:Rect&gt;	
   
   &lt;!-- must specify this for the host component --&gt; 
   &lt;s:Group id = "contentGroup" left = "0" right = "0" top = "0" bottom = "0" /&gt;
&lt;/s:Skin&gt;
</pre>
<p>Following is the content of the modified HelloWorld.mxml <b>filesrc/com/tutorialspoint/client/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
   xmlns:s = "library://ns.adobe.com/flex/spark"
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%" minWidth = "500" minHeight = "500"
   initialize = "application_initializeHandler(event)"&gt;

   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import com.tutorialspoint.skin.GradientBackgroundSkin;
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         import spark.skins.spark.BorderContainerSkin;			

         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            Alert.show("Hello World!");				
         }

         protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "My Hello World Application";				
         }

         protected function gradientBackground_clickHandler(event:MouseEvent):void {
            mainContainer.setStyle("skinClass", GradientBackgroundSkin );
         }

         protected function standardBackground_clickHandler(event:MouseEvent):void {
            mainContainer.setStyle("skinClass", BorderContainerSkin );
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;fx:Declarations&gt;
      &lt;s:RadioButtonGroup id = "selectorGroup" /&gt;
   &lt;/fx:Declarations&gt;
   
   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer"
      skinClass = "spark.skins.spark.BorderContainerSkin" 
      horizontalCenter = "0" verticalCenter = "0" cornerRadius = "10"&gt;
      
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" horizontalAlign = "center"
         verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" fontSize = "40" color = "green" 
            styleName = "heading" /&gt;
         &lt;s:Button label = "Click Me!" id = "btnClickMe" 
            click = "btnClickMe_clickHandler(event)" /&gt;
         &lt;s:RadioButton color = "gray" fontWeight = "bold" 
            group = "{selectorGroup}" label = "Standard Background" 
            click = "standardBackground_clickHandler(event)" selected = "true" /&gt;
         &lt;s:RadioButton color = "gray" fontWeight = "bold" 
            group = "{selectorGroup}" label = "Gradient Background" 
            click = "gradientBackground_clickHandler(event)" /&gt;			
      &lt;/s:VGroup&gt;			
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/SkinApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_skin_style1.jpg" alt="Flex Skin Style1" />
<p></p>
<img src="/flex/images/flex_skin_style2.jpg" alt="Flex Skin Style2" />
<h1>Flex - Data Binding</h1>
<h2>What is Data Binding?</h2>
<p>Data Binding is a process in which data of one object is tied to another object. It requires a source property, a destination property and a triggering event which indicates, when to copy the data from source to destination.</p>
<p>Flex provides three ways to do Data Binding as below</p>
<ul class="list">
<li>Curly brace syntax in MXML Script ({})</li>
<li>&lt;fx:binding&gt; tag in MXML</li>
<li>BindingUtils in ActionScript</li>
</ul>
<h3>Data Binding – Using Curly Braces in MXML</h3>
<p>The following example demonstrates how to use curly braces to specify data binding of a source to destination.</p>
<pre class="prettyprint notranslate">
&lt;s:TextInput id = "txtInput1" /&gt;
&lt;s:TextInput id = "txtInput2" text = "{txtInput1.text}" /&gt;
</pre>
<h3>Data Binding – Using &lt;fx:Binding&gt; tag in MXML</h3>
<p>The following example demonstrates how to use <fx:Binding> tag to specify data binding of a source to destination.</p>
<pre class="prettyprint notranslate">
&lt;fx:Binding source = "txtInput1.text" destination = "txtInput2.text" /&gt;
&lt;s:TextInput id = "txtInput1" /&gt;
&lt;s:TextInput id = "txtInput2" /&gt;
</pre>
<h3>Data Binding – Using BindingUtils in ActionScript</h3>
<p>The following example demonstrates how to use BindingUtils to specify data binding of a source to destination.</p>
<pre class="prettyprint notranslate">
&lt;fx:Script&gt;
   &lt;![CDATA[
      import mx.binding.utils.BindingUtils;
      import mx.events.FlexEvent;

      protected function txtInput2_preinitializeHandler(event:FlexEvent):void {
         BindingUtils.bindProperty(txtInput2,"text",txtInput1, "text");
      }      
   ]]&gt;
&lt;/fx:Script&gt;

&lt;s:TextInput id = "txtInput1" /&gt;
&lt;s:TextInput id = "txtInput2" 
   preinitialize = "txtInput2_preinitializeHandler(event)" /&gt;
</pre>
<h2>Flex Data Binding Example</h2>
<p>Let us follow the steps given below to see skinning in action in a Flex application by creating a test application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package<i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified HelloWorld.mxml file<b>src/com/tutorialspoint/client/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
   xmlns:s = "library://ns.adobe.com/flex/spark"
   xmlns:mx = "library://ns.adobe.com/flex/mx
   width = "100%" height = "100%" minWidth = "500" minHeight = "500"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.binding.utils.BindingUtils;   
         import mx.events.FlexEvent;

         protected function txtInput6_preinitializeHandler(event:FlexEvent):void {
            BindingUtils.bindProperty(txtInput6,"text",txtInput5, "text");
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;fx:Binding source = "txtInput3.text" destination = "txtInput4.text" /&gt;
   &lt;s:BorderContainer width = "500" height = "550" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" horizontalAlign = "center" 
         verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" text = "Data Binding Demonstration"
            fontSize = "40" color = "0x777777" styleName = "heading" /&gt;
         &lt;s:Panel title = "Example #1 (Using Curly Braces,\{\})" width = "400" 
            height = "100" &gt;
            &lt;s:layout&gt;
               &lt;s:VerticalLayout paddingTop = "10" paddingLeft = "10" /&gt;
            &lt;/s:layout&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "Type here: " width = "100" paddingTop = "6" /&gt;
               &lt;s:TextInput id = "txtInput1" /&gt;	
            &lt;/s:HGroup&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "Copied text: " width = "100" paddingTop = "6" /&gt;
               &lt;s:TextInput id = "txtInput2" text = "{txtInput1.text}" /&gt;
            &lt;/s:HGroup&gt;						
         &lt;/s:Panel&gt;
         
         &lt;s:Panel title = "Example #2 (Using &amp;lt;fx:Binding&amp;gt;)" width = "400" 
            height = "100" &gt;
            &lt;s:layout&gt;
               &lt;s:VerticalLayout paddingTop = "10" paddingLeft = "10" /&gt;
            &lt;/s:layout&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "Type here: " width = "100" paddingTop = "6" /&gt;
               &lt;s:TextInput id = "txtInput3" /&gt;	
            &lt;/s:HGroup&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "Copied text: " width = "100" paddingTop = "6" /&gt;
               &lt;s:Label id = "txtInput4" /&gt;
            &lt;/s:HGroup&gt;						
         &lt;/s:Panel&gt;
         
         &lt;s:Panel title = "Example #3 (Using BindingUtils)" width = "400" 
            height = "100" &gt;
            &lt;s:layout&gt;
               &lt;s:VerticalLayout paddingTop = "10" paddingLeft = "10" /&gt;
            &lt;/s:layout&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "Type here: " width = "100" paddingTop = "6" /&gt;
               &lt;s:TextInput id = "txtInput5" /&gt;	
            &lt;/s:HGroup&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "Copied text: " width = "100" paddingTop = "6" /&gt;
               &lt;s:TextInput enabled = "false" id = "txtInput6" 
                  preinitialize = "txtInput6_preinitializeHandler(event)" /&gt;
            &lt;/s:HGroup&gt;						
         &lt;/s:Panel&gt;
      &lt;/s:VGroup&gt;	 
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/DataBindingApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_data_binding.jpg" alt="Flex Data Binding" />
<h1>Flex - Basic Controls</h1>
<p>Every user interface considers the following three main aspects &minus;</p>
<ul class="list">
<li><p><b>UI Elements</b> &minus; These are the core visual elements the user eventually sees and interacts with. Flex provides a huge list of widely used and common elements varying from basic to complex which we will cover in this tutorial.</p></li>
<li><p><b>Layouts</b> &minus; They define how UI elements should be organized on the screen and provide a final look and feel to the GUI (Graphical User Interface). This part will be covered in Layout chapter.</p></li>
<li><p><b>Behavior</b> &minus; These events occur when the user interacts with UI elements. This part will be covered in Event Handling chapter.</p></li>
</ul>
<h2>Flex UI Elements</h2>
<p>The Flex UI library provides classes in a well-defined class hierarchy to create complex web-based user interfaces. All classes in this component hierarchy have been derived from the <b>EventDispatcher</b> base class as shown below &minus;</p>
<img src="/flex/images/flex_components.jpg" alt="Flex Components" />
<p>Every Basic UI control inherits properties from UI Component class which in turn inherits properties from EventDispatcher and other top level classes.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Control &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_eventdispatcher_class.htm">Flex EventDispatcher Class</a>
<p>The EventDispatcher class is the base class for all classes that can dispatch events. The EventDispatcher class allows any object on the display list to be an event target and as such, to use the methods of the IEventDispatcher interface.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_uicomponent_class.htm">Flex UIComponent</a>
<p>The UIComponent class is the base class for all visual components, both interactive and non-interactive.</p></td>
</tr>
</table>
<h2>Basic Controls</h2>
<p>Following are the few important <i>Basic Controls</i> &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Controls &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_label_control.htm">Label</a>
<p>Label is a low-level UIComponent that can render one or more lines of uniformly-formatted text.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_text_control.htm">Text</a>
<p>The Text control lets you display HTML content as well as normal text in your application.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/flex/flex_image_control.htm">Image</a>
<p>The Image control lets you import JPEG, PNG, GIF, and SWF files at runtime.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/flex/flex_linkbutton_control.htm">LinkButton</a>
<p>The LinkButton control is a borderless Button control whose contents are highlighted when a user moves the mouse over it.</p></td>
</tr>
</table>
<h1>Flex - Form Controls</h1>
<p>Form controls allow the users to input data and provides them interaction capability with the application. Every Form UI controls and inherits properties from UIComponent class which in turn inherits properties from EventDispatcher and other top level classes.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Control &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_eventdispatcher_class.htm">Flex EventDispatcher Class</a>
<p>The EventDispatcher class is the base class for all classes that can dispatch events. The EventDispatcher class allows any object on the display list to be an event target and as such, to use the methods of the IEventDispatcher interface.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_uicomponent_class.htm">Flex UIComponent</a>
<p>The UIComponent class is the base class for all visual components, both interactive and noninteractive.</p></td>
</tr>
</table>
<h2>Form Controls</h2>
<p>Following are few important Form Controls &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Control &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_button_control.htm">Button</a>
<p>The Button component is a commonly used rectangular button.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_togglebutton_control.htm">ToggleButton</a>
<p>The ToggleButton component defines a toggle button.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/flex/flex_checkbox_control.htm">CheckBox</a>
<p>The CheckBox component consists of an optional label and a small box that can contain a check mark or not.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/flex/flex_colorpicker_control.htm">ColorPicker</a>
<p>The ColorPicker control provides a way for a user to choose a color from a swatch list.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/flex/flex_combobox_control.htm">ComboBox</a>
<p>The ComboBox control is a child class of the DropDownListBase control.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/flex/flex_datechooser_control.htm">DateChooser</a>
<p>The DateChooser control displays the name of a month, the year, and a grid of the days of the month, with columns labeled for the day of the week.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/flex/flex_radiobutton_control.htm">RadioButton</a>
<p>The RadioButton component allows the user make a single choice within a set of mutually exclusive choices.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/flex/flex_textarea_control.htm">TextArea</a>
<p>TextArea is a text-entry control that lets users enter and edit multiple lines of formatted text.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><a href="/flex/flex_textinput_control.htm">TextInput</a>
<p>TextInput is a text-entry control that lets users enter and edit a single line of uniformly-formatted text.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><a href="/flex/flex_dropdownlist_control.htm">DropDownList</a>
<p>The DropDownList control contains a drop-down list from which the user can select a single value.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><a href="/flex/flex_numericstepper_control.htm">NumericStepper</a>
<p>The NumericStepper control lets you select a number from an ordered set.</p></td>
</tr>
</table>
<h1>Flex - Complex Controls</h1>
<p>Complex controls provide users with advanced capabilities to deal with large amount of data in an easier way and provides them interaction capability with the application. Every Complex UI control inherits properties from UIComponent class which in turn inherits properties from EventDispatcher and other top level classes.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Control &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_eventdispatcher_class.htm">Flex EventDispatcher Class</a>
<p>The EventDispatcher class is the base class for all classes that can dispatch events. The EventDispatcher class allows any object on the display list to be an event target and as such, to use the methods of the IEventDispatcher interface.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_uicomponent_class.htm">Flex UIComponent</a>
<p>The UIComponent class is the base class for all visual components, both interactive and noninteractive.</p></td>
</tr>
</table>
<h2>Complex Controls</h2>
<p>Following are the few important Complex Controls &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Control &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_datagrid_control.htm">DataGrid</a>
<p>The DataGrid control displays a row of column headings above a scrollable grid.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_advanceddatagrid_control.htm">AdvancedDataGrid</a>
<p>The AdvancedDataGrid adds few additional functionality to the standard DataGrid control to add data visualization features.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/flex/flex_menu_control.htm">Menu</a>
<p>The Menu control creates a pop-up menu of individually selectable choices.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/flex/flex_progressbar_control.htm">ProgressBar</a>
<p>The ProgressBar control provides a visual representation of the progress of a task over time.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/flex/flex_richtexteditor_control.htm">RichTextEditor</a>
<p>The RichTextEditor control lets users enter and format text.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/flex/flex_tilelist_control.htm">TileList</a>
<p>The TileList control The TileList control displays a number of items laid out in tiles.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/flex/flex_tree_control.htm">Tree</a>
<p>The Tree control lets a user view hierarchical data arranged as an expandable tree.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/flex/flex_videoplayer_control.htm">VideoPlayer</a>
<p>The VideoPlayer control is a skinnable video player that supports progressive download, multi-bitrate streaming, and streaming video.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><a href="/flex/flex_accordian_control.htm">Accordian</a>
<p>An Accordian control has a collection of child MX containers or Spark NavigatorContent containers, but only one of them at a time is visible.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><a href="/flex/flex_tabnavigator_control.htm">TabNavigator</a>
<p>The TabNavigator control includes a TabBar container for navigating between its child containers.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><a href="/flex/flex_togglebuttonbar_control.htm">ToggleButtonBar</a>
<p>The ToggleButtonBar control defines a horizontal or vertical group of buttons that maintain their selected or deselected state.</p></td>
</tr>
</table>
<h1>Flex - Layout Panels</h1>
<p>Layout panel controls provides users to organize UI controls on the page. Every Layout control inherits properties from UIComponent class which in turn inherits properties from EventDispatcher and other top level classes.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Control &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_eventdispatcher_class.htm">Flex EventDispatcher Class</a>
<p>The EventDispatcher class is the base class for all classes that can dispatch events. The EventDispatcher class allows any object on the display list to be an event target and as such, to use the methods of the IEventDispatcher interface.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_uicomponent_class.htm">Flex UIComponent</a>
<p>The UIComponent class is the base class for all visual components, both interactive and noninteractive.</p></td>
</tr>
</table>
<h2>Layout Panels</h2>
<p>Following are few important Layout Panels &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Panel &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_bordercontainer.htm">BorderContainer</a>
<p>The BorderContainer class provides a set of CSS styles that control the appearance of the border and background fill of the container.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_form.htm">Form</a>
<p>The Form container provides control over the layout of a form, mark form fields as required or optional, handle error messages, and bind form data to the Flex data model to perform data checking and validation.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/flex/flex_vgroup.htm">VGroup</a>
<p>The VGroup container is a Group container that uses the VerticalLayout class.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/flex/flex_hgroup.htm">HGroup</a>
<p>The HGroup container is a Group container that uses the HorizontalLayout class.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/flex/flex_panel.htm">Panel</a>
<p>The Panel class is a container that includes a title bar, a caption, a border, and a content area for its children.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/flex/flex_skinnablecontainer.htm">SkinnableContainer</a>
<p>The SkinnableContainer class is the base class for skinnable containers that provide visual content.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/flex/flex_tabbar.htm">TabBar</a>
<p>The TabBar displays a set of identical tabs.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/flex/flex_titlewindow.htm">TitleWindow</a>
<p>The TitleWindow extends Panel to include a close button and move area.</p></td>
</tr>
</table>
<h1>Flex - Visual Effects</h1>
<p>We can add behavior to flex application using the concept of Effects. For example, when a text box gets focus, we can make its text become bolder and make its size slight bigger.</p>
<p>Every effect inherits properties from Effect class which in turn inherits properties from EventDispatcher and other top level classes.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Effect &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_effect_class.htm">Flex Effect Class</a>
<p>The Effect class is an abstract base class that defines the basic functionality of all Flex effects. This class defines the base factory class for all effects.</p></td>
</tr>
</table>
<h2>Basic Effects</h2>
<p>Following are the few important Basic Visual Effects &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Effect &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/flex/flex_fade_effect.htm">Fade</a>
<p>The Fade effect animates the alpha property of a component.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/flex/flex_wipeleft_effect.htm">WipeLeft</a>
<p>The WipeLeft class defines a wipe left effect.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/flex/flex_wiperight_effect.htm">WipeRight</a>
<p>The WipeRight class defines a wipe right effect.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/flex/flex_move3d_effect.htm">Move3D</a>
<p>The Move3D class moves a target object in the x, y, and z dimensions.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/flex/flex_scale3d_effect.htm">Scale3D</a>
<p>The Scale3D class scales a target object in three dimensions around the transform center.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/flex/flex_rotate3d_effect.htm">Rotate3D</a>
<p>The Rotate3D class rotate a target object in three dimensions around the x, y, or z axes.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/flex/flex_animate_effect.htm">Animate</a>
<p>This Animate effect animates an arbitrary set of properties between values. Specify the properties and values to animate by setting the motionPaths property.</p></td>
</tr>
</table>
<h1>Flex - Event Handling</h1>
<p>Flex uses concept of event to pass data from one object to another depending upon the state or user interaction within the application.</p> 
<p>ActionScript has a generic <b>Event</b> class which defines much of the functionality needed to work with events. Every time an event occurs within a Flex application, three types of objects from the Event class hierarchy are created.</p>
<p>Event has the following three key properties</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Property &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Type</b></p>
<p>The <b>type</b> states about what kind of event just happened. This may be click, initialize, mouseover, change, etc. The actual values will be represented by constants like MouseEvent.CLICK.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Target</b></p>
<p>The <b>target</b> property of Event is an object reference to the component that generated the event.If you click a Button with an id of clickMeButton, the target of that click event will be clickMeButton</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>CurrentTarget</b></p>
<p>The <b>currentTarget</b> property varies container hierarchy. It mainly deals with flow of events.</p></td>
</tr>
</table>
<h2>Event Flow Phases</h2>
<p>An event goes through three phases looking for event handlers.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Phase &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Capture</b></p>
<p>In the capture phase, the program will start looking for event handlers from the outside (or top) parent to the innermost one. The capture phase stops at the parent of the object that triggered the event.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Target</b></p>
<p>In the target phase, the component that triggered the event, is checked for an event handler.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Bubble</b></p>
<p>The Bubble phase is reverse of capture phase, working back through the structure, from the target component's parent on up.</p></td>
</tr>
</table>
<p>Consider the following application code &minus;</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx
   width = "100%" height = "100%" minWidth = "500" minHeight = "500" &gt;
   
   &lt;s:Panel&gt;
      &lt;s:Button id = "clickMeButton" label = "Click Me!" click = "doAction( );" /&gt;
   &lt;/s:Panel&gt;   
&lt;/s:Application&gt;
</pre>
<p>When the user clicks the Button, he or she has also clicks the Panel and the Application.</p>
<p>The event goes through three phases looking for event-handler assignments.</p>
<img src="/flex/images/flex_event_phases.jpg" alt="Flex event phases" />
<p></p>
<p>Let us follow the steps below to test event handing in a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009"
   xmlns:s = "library://ns.adobe.com/flex/spark"
   xmlns:mx = "library://ns.adobe.com/flex/mx
   width = "100%" height = "100%" minWidth = "500" minHeight = "500"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         protected function reportEvent(event:MouseEvent):void {
            var target:String = event.target.id;
            var currentTarget:String = event.target.id;
            var eventPhase: String;

            if(event.target is Button) {
               var button:Button = event.target as Button;
               target = button.label + " Button";
            } else if(event.target is HGroup) {
               var hGroup:HGroup = event.target as HGroup;
               target = hGroup.id + " HGroup";
            } else if(event.target is Panel) {
               var panel:Panel = event.target as Panel;
               target = panel.id + " Panel";
            }

            if(event.currentTarget is Button) {
               var button1:Button = event.currentTarget as Button;
               currentTarget = button1.label + " Button";
            } else if(event.currentTarget is HGroup) {
               var hGroup1:HGroup = event.currentTarget as HGroup;
               currentTarget = hGroup1.id + " HGroup";
            } else if(event.currentTarget is Panel) {
               var panel1:Panel = event.currentTarget as Panel;
               currentTarget = panel1.id + " Panel";
            }

            var eventPhaseInt:uint = event.eventPhase;

            if(eventPhaseInt == EventPhase.AT_TARGET) {
               eventPhase = "Target";
            } else if(eventPhaseInt == EventPhase.BUBBLING_PHASE) {
               eventPhase = "Bubbling";
            } else if(eventPhaseInt == EventPhase.CAPTURING_PHASE) {
               eventPhase = "Capturing";
            }
            
            reports.text += " Target: " + target + "\n currentTarget: " +
               currentTarget + "\n Phase: " + eventPhase + "\n----------\n";
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "630" height = "480" id = "mainContainer"
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "10"
         horizontalAlign = "center" verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" text = "Event Handling Demonstration"
            fontSize = "40" color = "0x777777" styleName = "heading" /&gt;

         &lt;s:Panel id = "parentPanel" title = "Main Parent"
            click = "reportEvent(event)" width = "500"
            height = "100" includeInLayout = "true" visible = "true"&gt;
            &lt;s:layout&gt;
               &lt;s:VerticalLayout  gap = "10" verticalAlign = "middle"
                  horizontalAlign = "center" /&gt;
            &lt;/s:layout&gt;
            
            &lt;s:HGroup id = "mainHGroup" click = "reportEvent(event)"&gt;
               &lt;s:Button label = "Click Me" click = "reportEvent(event)" /&gt;
            &lt;/s:HGroup&gt;
         &lt;/s:Panel&gt;

         &lt;s:Panel id = "reportPanel" title = "Events" width = "500" height = "230"&gt;
            &lt;mx:Text id = "reports" /&gt;
         &lt;/s:Panel&gt;
      &lt;/s:VGroup&gt;
   &lt;/s:BorderContainer&gt;
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/EventHandlingApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_event_handling.jpg" alt="Flex Event Handling" />
<h1>Flex - Custom Controls</h1>
<p>Flex provides two ways to create custom components.</p> 
<ul class="list">
<li>Using ActionScript</li>
<li>Using MXML</li>
</ul>
<h2>Using ActionScript</h2>
<p>You can create a component by extending existing component. To create a component using Flash Builder, Click on <b>File &gt; New &gt; ActionScript Class</b>.</p>
<p>Enter the details as shown below &minus;</p>
<img src="/flex/images/as_component.jpg" alt="Flex ActionScript Component" />
<p>Flash Builder will create the following CustomButton.as file.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.client {
   import spark.components.Button;

   public class CustomButton extends Button {
      public function CustomButton() {
         super();
      }
   }
}
</pre>
<h2>Using MXML</h2>
<p>You can create a component by extending existing component. To create a component using Flash Builder, Click on <b>File &gt; New &gt; MXML Component</b>.</p>
<p>Enter the details as shown below.</p>
<img src="/flex/images/mxml_component.jpg" alt="Flex MXML Component" />
<p>Flash Builder will create the following CustomLogin.mxml file.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Group xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx" 
   width = "400" height = "300"&gt;
&lt;/s:Group&gt;
</pre>
<p>Let us follow the following steps to test custom controls in a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create <i>CustomLogin.mxml</i> and <i>CustomButton.as</i> component as explained above. Modify these files as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/client/CustomLogin.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Group xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx" width = "400" height = "300"&gt;
   
   &lt;s:Form&gt;
      &lt;s:FormItem label = "UserName:"&gt;
         &lt;s:TextInput width = "200" /&gt;
      &lt;/s:FormItem&gt;
      
      &lt;s:FormItem label = "Password:"&gt;
         &lt;s:TextInput width = "200" displayAsPassword = "true" /&gt;
      &lt;/s:FormItem&gt;
      
      &lt;s:FormItem&gt;
         &lt;s:Button label = "Login" /&gt;
      &lt;/s:FormItem&gt;		
   &lt;/s:Form&gt;
&lt;/s:Group&gt;
</pre>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/client/CustomButton.as</b>.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.client {
   import spark.components.Button;

   public class CustomButton extends Button {
      
      public function CustomButton() {
         super();
         this.setStyle("color","green");
         this.label = "Submit";
      }
   }
}
</pre>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/client/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx" 
   xmlns:client = "com.tutorialspoint.client.*"
   initialize = "application_initializeHandler(event)"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
        import mx.events.FlexEvent;

        protected function application_initializeHandler(event:FlexEvent):void {
           //create a new custom button
           var customButton: CustomButton = new CustomButton();
           asPanel.addElement(customButton);
        }

      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "630" height = "480" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "10" 
         horizontalAlign = "center" verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" text = "Custom Controls Demonstration" 
            fontSize = "40" color = "0x777777" styleName = "heading" /&gt;

         &lt;s:Panel title = "Using MXML Component" width = "400" height = "200"&gt;
            &lt;client:CustomLogin&gt;			
            &lt;/client:CustomLogin&gt;		
         &lt;/s:Panel&gt;
         
         &lt;s:Panel  title = "Using AS Component" width = "400" height = "100"&gt;
            &lt;s:VGroup id = "asPanel" width = "100%" height = "100%" gap = "10" 
               horizontalAlign = "center" verticalAlign = "middle"&gt;
            &lt;/s:VGroup&gt;
         &lt;/s:Panel&gt;
      &lt;/s:VGroup&gt;
   &lt;/s:BorderContainer&gt;
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/CustomControlApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_custom_controls.jpg" alt="Flex Custom Controls" />
<h1>Flex - RPC Services</h1>
<p>Flex provides RPC services to provide server side data to client side. Flex provides a fair amount of control on to server side data.</p>
<ul class="list">
<li><p>Using Flex RPC services, we can define user actions to be executed on server side.</p></li>
<li><p>Flex RPC Sservices can be integrated with any server side technologies.</p></li>
<li><p>One of Flex RPC Service provide inbuilt support for compressed binary data to be transferred over the wire and is pretty fast.</p></li>
</ul>
<p>Flex provides the following three types of RPC Services</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">RPC Service &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>HttpService</b></p>
<p>&lt;mx:HTTPService&gt; tag is used to represent an HTTPService object in an MXML file. When you make a call to HTTPService object's send() method, it makes an HTTP request to the specified URL, and an HTTP response is returned.You can also use the HTTP HEAD, OPTIONS, TRACE, and DELETE methods.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>WebService</b></p>
<p>The &lt;mx:WebService&gt; is used to get access to the operations of SOAP-compliant web services.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>RemoteObject</b></p>
<p>The &lt;mx:RemoteObject&gt; tag is used to represent an HTTPService object in an MXML file. This tag gives you access to the methods of Java objects using Action Message Format (AMF) encoding.</p></td>
</tr>
</table>
<p>We're going to discuss HTTP Service in detail. We'll use an XML source file placed at server and access it at client side via HTTP Service.</p>
<h3>Items.xml</h3>
<pre class="prettyprint notranslate">
&lt;items&gt;
   &lt;item name = "Book" description = "History of France"&gt;&lt;/item&gt;
   &lt;item name = "Pen" description = "Parker Pen"&gt;&lt;/item&gt;
   &lt;item name = "Pencil" description = "Stationary"&gt;&lt;/item&gt;
&lt;items&gt;
</pre>
<h3>HTTPService Declaration</h3>
<p>Now declare a HTTPService and pass it url of the above file</p>
<pre class="prettyprint notranslate">
&lt;fx:Declarations&gt;
   &lt;mx:HTTPService id = "itemRequest" 
   url = "http://www.tutorialspoint.com/flex/Items.xml" /&gt;
&lt;/fx:Declarations&gt;
</pre>
<h3>RPC Call</h3>
<p>Make a call to itemRequest.send() method and bind values from lastResult object of itemRequest webservice to Flex UI component.</p>
<pre class="prettyprint notranslate">
...
itemRequest.send();
...
&lt;mx:DataGrid id = "dgItems" height = "80%" width = "75%" 
   dataProvider = "{itemRequest.lastResult.items.item}"&gt;
   &lt;mx:columns&gt;
      &lt;mx:DataGridColumn headerText = "Name" dataField = "name" /&gt;
      &lt;mx:DataGridColumn headerText = "Description" dataField = "description" /&gt;
   &lt;/mx:columns&gt;
&lt;/mx:DataGrid&gt;
</pre>
<h2>RPC Service Call Example</h2>
<p>Now, Let us follow the steps to test RPC services in a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;text-align:center;">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;text-align:center;">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;text-align:center;">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx" 
   minWidth = "500" minHeight = "500" creationComplete = "init(event)"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.events.FlexEvent;
         import mx.rpc.events.FaultEvent;
         import mx.rpc.events.ResultEvent;

         protected function init(event:FlexEvent):void {
            itemRequest.send();				
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;fx:Declarations&gt;
      &lt;mx:HTTPService id = "itemRequest" 
         url = "http://www.tutorialspoint.com/flex/Items.xml" /&gt;
   &lt;/fx:Declarations&gt;
   
   &lt;s:BorderContainer width = "630" height = "480" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "10" 
         horizontalAlign = "center" verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" text = "RPC Service Demonstration" 
            fontSize = "40" color = "0x777777" styleName = "heading" /&gt;
         
         &lt;s:Panel id = "parentPanel" title = "Using RPC Services"  
            width = "500" height = "200" &gt;
            &lt;s:layout&gt;
               &lt;s:VerticalLayout  gap = "10" 
                  verticalAlign = "middle" horizontalAlign = "center" /&gt;
            &lt;/s:layout&gt;						
            
            &lt;mx:DataGrid id = "dgItems" height = "80%" width = "75%" 
               dataProvider = "{itemRequest.lastResult.items.item}"&gt;
               
               &lt;mx:columns&gt;
                  &lt;mx:DataGridColumn headerText = "Name" dataField = "name" /&gt;
                  &lt;mx:DataGridColumn headerText = "Description" 
                     dataField = "description" /&gt;
               &lt;/mx:columns&gt;
            &lt;/mx:DataGrid&gt;
         &lt;/s:Panel&gt;	
      &lt;/s:VGroup&gt;	 
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/RPCApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_rpc_services.jpg" alt="flex RPC Services" />
<h1>Flex - FlexUnit Integration</h1>
<p>Flash Builder 4 has an excellent inbuilt support for FlexUnit integration in Flex development Cycle.</p>
<h2>Create a Test Case Class</h2>
<p>You can create a Test Case Class using Flash Builder Create Test Class wizard. Running test cases is a breeze with Flash Builder as you will see in this article.</p>
<p>To create a test case class using Flash Builder, Click on <b>File &gt; New &gt; Test Case Class</b>. Enter the details as shown below.</p>
<img src="/flex/images/flex_test_case.jpg" alt="Flex Test Case Class" />
<p>Flash Builder will create the following TestClass1.as a file.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.client {
   public class TestClass1 {		
      [Before]
      public function setUp():void {}

      [After]
      public function tearDown():void {}

      [BeforeClass]
      public static function setUpBeforeClass():void {}

      [AfterClass]
      public static function tearDownAfterClass():void {}	
   }
}
</pre>
<h2>FlexUnit Integration Example</h2>
<p>Now, let us follow the steps to test FlexUnit Integration in a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Create <i>TestClass1.as</i> test case as described above and Modify <i>TestClass1.as</i> as explained below.</td>
</tr>
<tr>
<td class="ts">4</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified as file <b>src/com.tutorialspoint/client/TestClass1.as</b>.</p>
<pre class="prettyprint notranslate">
package com.tutorialspoint.client {
   import org.flexunit.asserts.assertEquals;

   public class TestClass1 {		
      private var counter: int = 1;

      [Before]
      public function setUp():void {
         //this code will run before every test case execution
      }

      [After]
      public function tearDown():void {
         //this code will run after every test case execution
      }

      [BeforeClass]
      public static function setUpBeforeClass():void {
         //this code will run once when test cases start execution
      }

      [AfterClass]
      public static function tearDownAfterClass():void {
         //this code will run once when test cases ends execution
      }      

      [Test]  
      public function testCounter():void { 
         assertEquals(counter, 1);
      }
   }
}
</pre>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx" 
   minWidth = "500" minHeight = "500"&gt;
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter.</p>
<h2>Running Test cases</h2>
<p>Now Right Click on TestClass1 in package explorer and select <b>Run As &gt; FlexUnit Tests</b>. You'll see the following output in Flash Builder test window.</p>
<img src="/flex/images/flex_test_run.jpg" alt="flex FlexUnit Result" />
<p>Flash Builder also shows test results in the browser.</p>
<img src="/flex/images/flex_test_run1.jpg" alt="flex FlexUnit Result1" />
<h1>Flex - Debug Application</h1>
<p>Flex provides excellent capability of debugging flex code and Flash Builder 4 has an excellent built-in debugger and debugging perspective support.</p>
<ul class="list">
<li><p>During debug mode, Flex Application runs on Flash Player Debugger version built in Flash Builder 4 which supports debugging capability.</p></li>
<li><p>So developers get an easy and inbuilt debugging configuration in Flash Builder</p></li>
</ul>
<p>In this article, we'll demonstrate usage of debugging Flex Client code using Flash Builder. We'll do the following tasks</p>
<ul class="list">
<li>Set break points in the code and see them in Breakpoint Explorer.</li>
<li>Step through the code line by line during debugging.</li>
<li>View the values of variable.</li>
<li>Inspect the values of all the variables.</li>
<li>Inspect the value of an expression.</li>
<li>Display the stack frame for suspended threads.</li> 
</ul>
<h2>Debugging Example</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%"
   minWidth = "500" minHeight = "500" 
   initialize = "application_initializeHandler(event)"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            Alert.show("Hello World!");
         }

         protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "My Hello World Application";
         }
      ]]&gt;
   &lt;/fx:Script&gt;

   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer"
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" horizontalAlign = "center"
         verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" fontSize = "40" color = "0x777777"
            styleName = "heading" /&gt;
         &lt;s:Button label = "Click Me!" id = "btnClickMe"
            click = "btnClickMe_clickHandler(event)" styleName = "button" /&gt;
      &lt;/s:VGroup&gt;
   &lt;/s:BorderContainer&gt;
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. </p>
<h3>Step 1 - Place Breakpoints</h3>
<p>Place a breakpoint on the first line of application initialize Handler of HelloWorld.mxml</p>
<img src="/flex/images/flex_debug_breakpoint.jpg" alt="Flex Applying Breakpoint" />
<h3>Step 2 - Debug Application</h3>
<p>Now click on <img class="inline" src="/flex/images/debug_icon.jpg" alt="Debug application" />Debug application menu and select <b>HelloWorld</b> application to debug the application.</p>
<img src="/flex/images/flex_debug_button.jpg" alt="flex Debug Button" />
<p>If everything is fine, application will launch in the browser and you will see following debug logs in Flash Builder console.</p>
<pre class="result notranslate">
[SWF] \HelloWorld\bin-debug\HelloWorld.swf 
- 181,509 bytes after decompression
[SWF] \HelloWorld\bin-debug\HelloWorld.swf\[[DYNAMIC]]\1 
- 763,122 bytes after decompression
[SWF] \HelloWorld\bin-debug\HelloWorld.swf\[[DYNAMIC]]\2 
- 1,221,837 bytes after decompression
[SWF] \HelloWorld\bin-debug\HelloWorld.swf\[[DYNAMIC]]\3 
- 1,136,788 bytes after decompression
[SWF] \HelloWorld\bin-debug\HelloWorld.swf\[[DYNAMIC]]\4 
- 2,019,570 bytes after decompression
[SWF] \HelloWorld\bin-debug\HelloWorld.swf\[[DYNAMIC]]\5 
- 318,334 bytes after decompression
</pre>
<p>As soon as Application launches,you will see the focus on Flash Builder breakpoint as we've placed the breakpoint on first line of application_initialize Handler method.</p>
<img src="/flex/images/flex_debug_application.jpg" alt="Flex Debug Application" />
<p>You can see the stacktrace for suspended threads.</p>
<img src="/flex/images/flex_debug_stacktrace.jpg" alt="Flex Debug Stacktrace" />
<p>You can see the values for expressions.</p>
<img src="/flex/images/flex_debug_expressions.jpg" alt="Flex Debug Expressions" />
<p>You can see the list of breakpoints placed.</p>
<img src="/flex/images/flex_debug_breakpoints.jpg" alt="Flex Debug Breakpoints" />
<p>Now keep pressing F6 until you reach the last line of application_initializeHandler() method. As reference for function keys, F6 inspects code line by line, F5 steps inside further and F8 will resume the application. Now you can see the list of values of all variables of application_initializeHandler() method.</p>
<img src="/flex/images/flex_debug_variables.jpg" alt="Flex Debug Variables" />
<p>Now you can see the flex code can be debugged in the same way as a Java Application can be debugged. Place breakpoints to any line and play with debugging capabilities of flex.</p>
<h1>Flex - Internationalization</h1>
<p>Flex provides two ways to internationalize a Flex application, We'll demonstrate use of Compile time Internationalization being most commonly used among projects.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Technique &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Compile Time Internationalization</b></p>
<p>This technique is most prevalent and requires very little overhead at runtime; is a very efficient technique for translating both constant and parameterized strings;simplest to implement. Compile Time internationalization uses standard properties files to store translated strings and parameterized messages, and these properties files are compiled directly in the application.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Run Time Internationalization</b></p>
<p>This technique is very flexible but slower than static string internationalization. You need to compile the localization properties files separately, leave them external to application, and load them at run time.</p></td>
</tr>
</table>
<h2>Workflow of internationalizing a Flex Application</h2>
<h3>Step 1 – Create folder structure</h3>
<p>Create a locale folder under src folder of Flex project.This will be the parent directory for all of the properties files for the locales that the application will support. Inside the locale folder, create subfolders, one for each of the application's locales to be supported. The convention for naming a locale is</p>
<pre class="result notranslate">
{language}_{country code}
</pre>
<p>For example, en_US represents English of the United States. The locale de_DE represents German. The sample application will support two common languages: English, and German.</p>
<h3>Step 2 – Create properties files</h3>
<p>Create properties file containing the messages to be used in the application. We've created a <b>HelloWorldMessages.properties</b> file under <b>src &gt; locale &gt; en_US</b> folder in our example.</p>
<pre class="result notranslate">
enterName = Enter your name
clickMe = Click Me
applicationTitle = Application Internationalization Demonstration
greeting = Hello {0}
</pre>
<p>Create properties files containing translated values specific to locale. We've created a <b>HelloWorldMessages.properties</b> file under <b>src &gt; locale &gt; de_DE</b> folder in our example. This file contains translations in german language. _de specifies the german locale and we're going to support german language in our application.</p>
<p>If you are creating properties file using Flash Builder then change the encoding of the file to UTF-8.Select the file and then right-click in it to open its properties window.Select Text file encoding as <b>Other UTF-8</b>. Apply and Save the change.</p>
<pre class="result notranslate">
enterName = Geben Sie Ihren Namen
clickMe = Klick mich
applicationTitle = Anwendung Internationalisierung Demonstration
greeting = Hallo {0}
</pre>
<h3>Step 3 – Specify Compiler options</h3>
<ul class="list">
<li><p>Right-click your project and select Properties.</p></li>
<li><p>Select Flex Compiler, and add the following to the Additional Compiler Arguments settings &minus;</p></li>
</ul>
<pre class="result notranslate">
-locale en_US de_DE
</pre>
<ul class="list">
<li><p>Right-click your project and select Properties.</p></li>
<li><p>Select Flex Build Path, and add the following to the Source Path settings &minus;</p></li>
</ul>
<pre class="result notranslate">
src\locale\{locale}
</pre>
<h2>Internalization Example</h2>
<p>Now Let us follow the following steps to test Internalization technique in a Flex application &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
   &lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx" 
   minWidth = "500" minHeight = "500"&gt;
   
   &lt;fx:Metadata&gt;
      [ResourceBundle("HelloWorldMessages")]
   &lt;/fx:Metadata&gt; 
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
      &lt;![CDATA[
         import mx.controls.Alert;
         [Bindable]
         private var locales:Array =  [{label:"English", locale:"en_US"},
            {label:"German", locale:"de_DE"}];

         private function comboChangeHandler():void {
           resourceManager.localeChain = [localeComboBox.selectedItem.locale];
         }

         protected function clickMe_clickHandler(event:MouseEvent):void {
            var name:String = txtName.text;
            var inputArray:Array = new Array();
            inputArray.push(name);
            Alert.show(resourceManager.getString('HelloWorldMessages'
               ,'greeting',inputArray));
         }
      ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50" 
	  horizontalAlign = "center" verticalAlign = "middle"&gt;
         
         &lt;s:Label id = "lblHeader" fontSize = "40" 
            color = "0x777777" 
            text  = "{resourceManager.getString('HelloWorldMessages','applicationTitle')}"
            styleName = "heading" width = "90%" height = "150" /&gt;
         
         &lt;s:Panel width = "300" height = "150"&gt;
            &lt;s:layout&gt;
               &lt;s:VerticalLayout paddingTop = "10" paddingLeft = "10" /&gt;
            &lt;/s:layout&gt;
            
            &lt;s:HGroup &gt;
               &lt;s:Label text = "{resourceManager.getString('HelloWorldMessages','enterName')}"
                  paddingTop = "2" /&gt;			
               &lt;s:TextInput id = "txtName" /&gt;
            &lt;/s:HGroup&gt;
            
            &lt;s:Button 
               label = "{resourceManager.getString('HelloWorldMessages','clickMe')}" 
               click = "clickMe_clickHandler(event)" right = "10" /&gt;	
         &lt;/s:Panel&gt;
         
         &lt;mx:ComboBox id = "localeComboBox" dataProvider = "{locales}"
            change = "comboChangeHandler()" /&gt;
      &lt;/s:VGroup&gt;	
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/I18NApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_internalization.jpg" alt="flex Internalization" />
<p>Change the language using language drop down and see the result.</p>
<img src="/flex/images/flex_internalization1.jpg" alt="flex Internalization 1" />
<h1>Flex - Printing Support</h1>
<p>Flex provides a special class <b>FlexPrintJob</b> to print flex objects.</p>
<ul class="list">
<li><p>FlexPrintJob can be used to print one or more Flex objects, such as a Form or VBox container.</p></li>
<li><p>FlexPrintJob prints the object and all objects that it contains.</p></li>
<li><p>The objects can be all or part of the displayed interface.</p></li>
<li><p>The objects can be components that format data specifically for printing.</p></li>
<li><p>The FlexPrintJob class lets you scale the output to fit the page.</p></li>
<li><p>The FlexPrintJob class automatically uses multiple pages to print an object that does not fit on a single page.</p></li>
<li><p>The FlexPrintJob class causes the operating system to display a Print dialog box. You cannot print without some user action.</p></li>
</ul>
<h2>Prepare and send a print job</h2>
<p>You print output by preparing and sending a print job. Let's create an instance of the FlexPrintJob class</p>
<pre class="prettyprint notranslate">
var printJob:FlexPrintJob = new FlexPrintJob();
</pre>
<p>Start the print job</p>
<pre class="prettyprint notranslate">
printJob.start(); 
</pre>
<p>Flex will cause the operating system to display a Print dialog box. Add one or more objects to the print job and specify how to scale them</p>
<pre class="prettyprint notranslate">
printJob.addObject(myObject, FlexPrintJobScaleType.MATCH_WIDTH); 
</pre>
<p>Each object starts on a new page. Send the print job to the printer</p>
<pre class="prettyprint notranslate">
printJob.send(); 
</pre>
<h2>Printing Example</h2>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>HelloWorld</i> under a package <i>com.tutorialspoint.client</i> as explained in the <i>Flex - Create Application</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>HelloWorld.mxml</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to make sure business logic is working as per the requirements.</td>
</tr>
</table>
<p>Following is the content of the modified mxml file <b>src/com.tutorialspoint/HelloWorld.mxml</b>.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "utf-8"?&gt;
&lt;s:Application xmlns:fx = "http://ns.adobe.com/mxml/2009" 
   xmlns:s = "library://ns.adobe.com/flex/spark" 
   xmlns:mx = "library://ns.adobe.com/flex/mx"
   width = "100%" height = "100%"
   minWidth = "500" minHeight = "500" 
   initialize = "application_initializeHandler(event)"&gt;
   
   &lt;fx:Style source = "/com/tutorialspoint/client/Style.css" /&gt;
   &lt;fx:Script&gt;
     &lt;![CDATA[
         import mx.controls.Alert;
         import mx.events.FlexEvent;
         import mx.printing.FlexPrintJob;
         import mx.printing.FlexPrintJobScaleType;
         
         protected function btnClickMe_clickHandler(event:MouseEvent):void {
            
            // Create an instance of the FlexPrintJob class.
            var printJob:FlexPrintJob = new FlexPrintJob();
         
            // Start the print job.
            if (printJob.start() != true) return;

            // Add the object to print. Do not scale it.
            printJob.addObject(myDataGrid, FlexPrintJobScaleType.NONE);

            // Send the job to the printer.
            printJob.send();
        }

        protected function application_initializeHandler(event:FlexEvent):void {
            lblHeader.text = "My Hello World Application";				
        }
     ]]&gt;
   &lt;/fx:Script&gt;
   
   &lt;s:BorderContainer width = "500" height = "500" id = "mainContainer" 
      styleName = "container"&gt;
      &lt;s:VGroup width = "100%" height = "100%" gap = "50"
         horizontalAlign = "center" 
         verticalAlign = "middle"&gt;
         &lt;s:Label id = "lblHeader" fontSize = "40" color = "0x777777" 
            styleName = "heading" /&gt;
         
         &lt;mx:DataGrid id = "myDataGrid" width = "300"&gt;
            &lt;mx:dataProvider&gt;
               &lt;fx:Object Product = "Flex" Code = "1000" /&gt;
               &lt;fx:Object Product = "GWT" Code = "2000" /&gt;
               &lt;fx:Object Product = "JAVA" Code = "3000" /&gt;
               &lt;fx:Object Product = "JUnit" Code = "4000" /&gt;
            &lt;/mx:dataProvider&gt;
         &lt;/mx:DataGrid&gt;
         
         &lt;s:Button label = "Print Me!" id = "btnClickMe" 
            click = "btnClickMe_clickHandler(event)" 
            styleName = "button" /&gt;
      &lt;/s:VGroup&gt;	
   &lt;/s:BorderContainer&gt;	
&lt;/s:Application&gt;
</pre>
<p>Once you are ready with all the changes done, let us compile and run the application in normal mode as we did in <a href="/flex/flex_create_application.htm">Flex - Create Application</a> chapter. If everything is fine with your application, it will produce the following result: [ <a target="_blank" href="/flex/samples/PrintApplication.html">Try it online</a> ]</p>
<img src="/flex/images/flex_print.jpg" alt="flex Print" />
<p>Click on print me button and you can see the printout of the data grid shown below.</p>
<img src="/flex/images/flex_print1.jpg" alt="flex Print 1" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/flex/flex_printing_support.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/flex/flex_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
