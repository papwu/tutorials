<!DOCTYPE html>
<html lang="en-US">
<head>
<title>ES6 - Functions - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="ES6 - Functions - Functions are the building blocks of readable, maintainable, and reusable code. Functions are defined using the function keyword. Following is the syntax for de"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/es6/es6_functions.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#fb7d34;
}
a.demo {
    background:#fb7d34;
}
li.heading {
    background:#fb7d34;
}
.course-box{background:#fb7d34}
.home-intro-sub p{color:#fb7d34}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/es6/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/es6/images/es6-mini-logo.jpg" alt="ES6 Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">ES6 Tutorial</li>
<li><a href="/es6/index.htm">ES6 - Home</a></li>
<li><a href="/es6/es6_overview.htm">ES6 - Overview</a></li>
<li><a href="/es6/es6_environment.htm">ES6 - Environment</a></li>
<li><a href="/es6/es6_syntax.htm">ES6 - Syntax</a></li>
<li><a href="/es6/es6_variables.htm">ES6 - Variables</a></li>
<li><a href="/es6/es6_operators.htm">ES6 - Operators</a></li>
<li><a href="/es6/es6_decision_making.htm">ES6 - Decision Making</a></li>
<li><a href="/es6/es6_loops.htm">ES6 - Loops</a></li>
<li><a href="/es6/es6_functions.htm">ES6 - Functions</a></li>
<li><a href="/es6/es6_events.htm">ES6 - Events</a></li>
<li><a href="/es6/es6_cookies.htm">ES6 - Cookies</a></li>
<li><a href="/es6/es6_page_redirect.htm">ES6 - Page Redirect</a></li>
<li><a href="/es6/es6_dialog_boxes.htm">ES6 - Dialog Boxes</a></li>
<li><a href="/es6/es6_void_keyword.htm">ES6 - Void Keyword</a></li>
<li><a href="/es6/es6_page_printing.htm">ES6 - Page Printing</a></li>
<li><a href="/es6/es6_objects.htm">ES6 - Objects</a></li>
<li><a href="/es6/es6_number.htm">ES6 - Number</a></li>
<li><a href="/es6/es6_boolean.htm">ES6 - Boolean</a></li>
<li><a href="/es6/es6_strings.htm">ES6 - Strings</a></li>
<li><a href="/es6/es6_new_string_methods.htm">ES6 - New String Methods</a></li>
<li><a href="/es6/es6_arrays.htm">ES6 - Arrays</a></li>
<li><a href="/es6/es6_date.htm">ES6 - Date</a></li>
<li><a href="/es6/es6_math.htm">ES6 - Math</a></li>
<li><a href="/es6/es6_regexp.htm">ES6 - RegExp</a></li>
<li><a href="/es6/es6_html_dom.htm">ES6 - HTML DOM</a></li>
<li><a href="/es6/es6_collections.htm">ES6 - Collections</a></li>
<li><a href="/es6/es6_classes.htm">ES6 - Classes</a></li>
<li><a href="/es6/es6_promises.htm">ES6 - Promises</a></li>
<li><a href="/es6/es6_modules.htm">ES6 - Modules</a></li>
<li><a href="/es6/es6_error_handling.htm">ES6 - Error Handling</a></li>
<li><a href="/es6/es6_validations.htm">ES6 - Validations</a></li>
<li><a href="/es6/es6_animation.htm">ES6 - Animation</a></li>
<li><a href="/es6/es6_multimedia.htm">ES6 - Multimedia</a></li>
<li><a href="/es6/es6_debugging.htm">ES6 - Debugging</a></li>
<li><a href="/es6/es6_image_map.htm">ES6 - Image Map</a></li>
<li><a href="/es6/es6_browsers.htm">ES6 - Browsers</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">ES6 Useful Resources</li>
<li><a href="/es6/es6_quick_guide.htm">ES6 - Quick Guide</a></li>
<li><a href="/es6/es6_useful_resources.htm">ES6 - Useful Resources</a></li>
<li><a href="/es6/es6_discussion.htm">ES6 - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>ES6 - Functions</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/es6/es6_loops.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/es6/es6_events.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p><b>Functions</b> are the building blocks of readable, maintainable, and reusable code. Functions are defined using the function keyword. Following is the syntax for defining a standard function.</p>
<pre class="result notranslate">
function function_name() { 
   // function body 
} 
</pre>
<p>To force execution of the function, it must be called. This is called as function invocation. Following is the syntax to invoke a function.</p>
<pre class="result notranslate">
function_name()
</pre>
<h3>Example : Simple function definition</h3>
<pre class="prettyprint notranslate">
//define a  function 
function test() { 
   console.log("function called") 
} 
//call the function 
test()
</pre>
<p>The example defines a function test(). A pair of delimiters ( { } ) define the function body. It is also called as the <b>function scope</b>. A function must be invoked to force its execution.</p>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
function called
</pre>
<h2>Classification of Functions</h2>
<p>Functions may be classified as <b>Returning</b> and <b>Parameterized</b> functions.</p>
<h3>Returning functions</h3>
<p>Functions may also return the value along with control, back to the caller. Such functions are called as returning functions.</p>  
<p>Following is the syntax for the returning function.</p>
<pre class="result notranslate">
function function_name() { 
   //statements 
   return value; 
}
</pre>
<ul class="list">
<li><p>A returning function must end with a return statement.</p></li>
<li><p>A function can return at the most one value. In other words, there can be only one return statement per function.</p></li>
<li><p>The return statement should be the last statement in the function.</p></li>
</ul>
<p>The following code snippet is an example of a returning function &minus;</p>
<pre class="prettyprint notranslate">
function retStr() { 
   return "hello world!!!" 
}  
var val = retStr() 
console.log(val) 
</pre>
<p>The above Example defines a function that returns the string “hello world!!!” to the caller. The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
hello world!!! 
</pre>
<h3>Parameterized functions</h3>
<p>Parameters are a mechanism to pass values to functions. Parameters form a part of the function’s signature. The parameter values are passed to the function during its invocation. Unless explicitly specified, the number of values passed to a function must match the number of parameters defined.</p>
<p>Following is the syntax defining a parameterized function.</p>
<pre class="result notranslate">
function func_name( param1,param2 ,…..paramN) {   
   ...... 
   ...... 
}
</pre>
<p></p>
<p><b>Example &minus; Parameterized Function</b></p>
<p>The Example defines a function add that accepts two parameters <b>n1</b> and <b>n2</b> and prints their sum. The parameter values are passed to the function when it is invoked.</p>
<pre class="prettyprint notranslate">
function add( n1,n2) { 
   var sum = n1 + n2 
   console.log("The sum of the values entered "+sum) 
} 
add(12,13) 
</pre>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
The sum of the values entered 25
</pre>
<h3>Default function parameters</h3>
<p>In ES6, a function allows the parameters to be initialized with default values, if no values are passed to it or it is undefined. The same is illustrated in the following code.</p>
<pre class="prettyprint notranslate">
function add(a, b = 1) { 
   return a+b; 
} 
console.log(add(4))
</pre>
<p>The above function, sets the value of b to 1 by default. The function will always consider the parameter b to bear the value 1 unless a value has been explicitly passed. The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
5
</pre>
<p>The parameter’s default value will be overwritten if the function passes a value explicitly.</p>
<pre class="prettyprint notranslate">
function add(a, b = 1) { 
   return a + b; 
} 
console.log(add(4,2))
</pre>
<p>The above code sets the value of the parameter b explicitly to 2, thereby overwriting its default value. The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
6
</pre>
<h2>Rest Parameters</h2>
<p>Rest parameters are similar to variable arguments in Java. Rest parameters doesn’t restrict the number of values that you can pass to a function. However, the values passed must all be of the same type. In other words, rest parameters act as placeholders for multiple arguments of the same type.</p>
<p>To declare a rest parameter, the parameter name is prefixed with three periods, known as the spread operator. The following example illustrates the same.</p>
<pre class="prettyprint notranslate">
function fun1(...params) { 
   console.log(params.length); 
}  
fun1();  
fun1(5); 
fun1(5, 6, 7); 
</pre>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
0 
1 
3
</pre>
<p><b>Note</b> &minus; Rest parameters should be the last in a function’s parameter list.</p>
<h2>Anonymous Function</h2>
<p>Functions that are not bound to an identifier (function name) are called as anonymous functions. These functions are dynamically declared at runtime. Anonymous functions can accept inputs and return outputs, just as standard functions do. An anonymous function is usually not accessible after its initial creation.</p>
<p>Variables can be assigned an anonymous function. Such an expression is called a <b>function expression</b>.</p>
<p>Following is the syntax for anonymous function.</p>
<pre class="result notranslate">
var res = function( [arguments] ) { ... } 
</pre>
<p></p>
<p><b>Example &minus; Anonymous Function</b></p>
<pre class="prettyprint notranslate">
var f = function(){ return "hello"} 
console.log(f()) 
</pre>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
hello 
</pre>
<p></p>
<p><b>Example &minus; Anonymous Parameterized Function</b></p>
<pre class="prettyprint notranslate">
var func = function(x,y){ return x*y }; 
function product() { 
   var result; 
   result = func(10,20); 
   console.log("The product : "+result) 
} 
product()
</pre>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
The product : 200 
</pre>
<h2>The Function Constructor</h2>
<p>The function statement is not the only way to define a new function; you can define your function dynamically using Function() constructor along with the new operator.</p>
<p>Following is the syntax to create a function using Function() constructor along with the new operator.</p>
<pre class="result notranslate">
var variablename = new Function(Arg1, Arg2..., "Function Body"); 
</pre>
<p>The Function() constructor expects any number of string arguments. The last argument is the body of the function – it can contain arbitrary JavaScript statements, separated from each other by semicolons.</p>
<p>The Function() constructor is not passed any argument that specifies a name for the function it creates.</p>
<p></p>
<p><b>Example &minus; Function Constructor</b></p>
<pre class="prettyprint notranslate">
var func = new Function("x", "y", "return x*y;"); 
function product() { 
   var result; 
   result = func(10,20); 
   console.log("The product : "+result)
} 
product()
</pre>
<p>In the above example, the Function() constructor is used to define an anonymous function. The function accepts two parameters and returns their product.</p>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
The product : 200
</pre>
<h2>Recursion and JavaScript Functions</h2>
<p>Recursion is a technique for iterating over an operation by having a function call itself repeatedly until it arrives at a result. Recursion is best applied when you need to call the same function repeatedly with different parameters from within a loop.</p>
<p></p>
<p><b>Example &minus; Recursion</b></p>
<pre class="prettyprint notranslate">
function factorial(num) { 
   if(num&lt;=0) { 
      return 1; 
   } else { 
      return (num * factorial(num-1)  ) 
   } 
} 
console.log(factorial(6)) 
</pre>
<p>In the above example the function calls itself. The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
720 
</pre>
<p></p>
<p><b>Example &minus; Anonymous Recursive Function</b></p>
<pre class="prettyprint notranslate">
(function() { 
   var msg = "Hello World" 
   console.log(msg)
})()
</pre>
<p>The function calls itself using a pair of parentheses (). The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
Hello World 
</pre>
<h2>Lambda Functions</h2>
<p>Lambda refers to anonymous functions in programming. Lambda functions are a concise mechanism to represent anonymous functions. These functions are also called as <b>Arrow functions</b>.</p>
<h3>Lambda Function - Anatomy</h3>
<p>There are 3 parts to a Lambda function &minus;</p>
<ul class="list">
<li><p><b>Parameters</b> &minus; A function may optionally have parameters.</p></li>
<li><p>The <b>fat arrow notation/lambda notation</b> (=&gt;): It is also called as the goes to operator.</p></li>
<li><p><b>Statements</b> &minus; Represents the function’s instruction set.</p></li>
</ul>
<p><b>Tip</b> &minus; By convention, the use of a single letter parameter is encouraged for a compact and precise function declaration.</p>
<h3>Lambda Expression</h3>
<p>It is an anonymous function expression that points to a single line of code. Following is the syntax for the same.</p>
<pre class="result notranslate">
([param1, parma2,…param n] )=&gt;statement;
</pre>
<p></p>
<p><b>Example &minus; Lambda Expression</b></p>
<pre class="prettyprint notranslate">
var foo = (x)=&gt;10+x 
console.log(foo(10)) 
</pre>
<p>The Example declares a lambda expression function. The function returns the sum of 10 and the argument passed.</p>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
20
</pre>
<h3>Lambda Statement</h3>
<p>It is an anonymous function declaration that points to a block of code. This syntax is used when the function body spans multiple lines. Following is the syntax of the same.</p>
<pre class="result notranslate">
( [param1, parma2,…param n] )=&gt; {       
   //code block 
}
</pre>
<p><b>Example &minus; Lambda Statement</b></p>
<pre class="prettyprint notranslate">
var msg = ()=&gt; { 
   console.log("function invoked") 
} 
msg() 
</pre>
<p>The function’s reference is returned and stored in the variable msg. The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
function  invoked 
</pre>
<h3>Syntactic Variations</h3>
<p>Optional parentheses for a single parameter.</p>
<pre class="prettyprint notranslate">
var msg = x=&gt; { 
   console.log(x) 
} 
msg(10)
</pre>
<p>Optional braces for a single statement. Empty parentheses for no parameter.</p>
<pre class="result notranslate">
var disp = ()=&gt;console.log("Hello World") 
disp();
</pre>
<h2>Function Expression and Function Declaration</h2>
<p>Function expression and function declaration are not synonymous. Unlike a function expression, a function declaration is bound by the function name.</p>
<p>The fundamental difference between the two is that, function declarations are parsed before their execution. On the other hand, function expressions are parsed only when the script engine encounters it during an execution.</p>
<p>When the JavaScript parser sees a function in the main code flow, it assumes function declaration. When a function comes as a part of a statement, it is a function expression.</p> 
<h2>Function Hoisting</h2>          
<p>Like variables, functions can also be hoisted. Unlike variables, function declarations when hoisted, hoists the function definition rather than just hoisting the function’s name.</p>  
<p>The following code snippet, illustrates function hoisting in JavaScript.</p> 
<pre class="prettyprint notranslate">
hoist_function();  
function hoist_function() { 
   console.log("foo"); 
} 
</pre>
<p>The following output is displayed on successful execution of the above code.</p>
<pre class="result notranslate">
foo 
</pre>
<p>However, function expressions cannot be hoisted. The following code snippet illustrates the same.</p>
<pre class="prettyprint notranslate">
hoist_function(); // TypeError: hoist_function() is not a function  
var hoist_function() = function() { 
   console.log("bar"); 
};
</pre>
<h2>Immediately Invoked Function Expression</h2>      
<p>Immediately Invoked Function Expressions (IIFEs) can be used to avoid variable hoisting from within blocks. It allows public access to methods while retaining privacy for variables defined within the function. This pattern is called as a self-executing anonymous function. The following two examples better explain this concept.</p> 
<h3>Example 1 : IIFE</h3> 
<pre class="prettyprint notranslate">
var main = function() { 
   var loop = function() { 
      for(var x = 0;x&lt;5;x++) {
         console.log(x); 
      } 
   }(); 
   console.log("x can not be accessed outside the block scope x value is :"+x); 
} 
main();
</pre>
<h3>Example 2 : IIFE</h3> 
<pre class="prettyprint notranslate">
var main = function() { 
   (function() { 
      for(var x = 0;x&lt;5;x++) { 
         console.log(x); 
      } 
   })(); 
   console.log("x can not be accessed outside the block scope x value is :"+x); 
} 
main();
</pre>  
<p>Both the Examples will render the following output.</p> 
<pre class="result notranslate">
0 
1 
2 
3 
4 
Uncaught ReferenceError: x is not define
</pre>
<h2>Generator Functions</h2>
<p>When a normal function is invoked, the control rests with the function called until it returns. With generators in ES6, the caller function can now control the execution of a called function.  A generator is like a regular function except that &minus;</p>
<ul class="list">
<li><p>The function can yield control back to the caller at any point.</p></li>  
<li><p>When you call a generator, it doesn’t run right away. Instead, you get back an iterator. The function runs as you call the iterator’s next method.</p></li>
</ul> 
<p>Generators are denoted by suffixing the function keyword with an asterisk; otherwise, their syntax is identical to regular functions.</p> 
<p>The following example illustrates the same.</p> 
<pre class="prettyprint notranslate">
"use strict" 
function* rainbow() { 
   // the asterisk marks this as a generator 
   yield 'red'; 
   yield 'orange'; 
   yield 'yellow'; 
   yield 'green'; 
   yield 'blue'; 
   yield 'indigo'; 
   yield 'violet'; 
} 
for(let color of rainbow()) { 
   console.log(color); 
} 
</pre>
<p>Generators enable two-way communication between the caller and the called function. This is accomplished by using the <b>yield</b> keyword.</p>  
<p>Consider the following example &minus;</p>
<pre class="prettyprint notranslate">
function* ask() { 
   const name = yield "What is your name?"; 
   const sport = yield "What is your favorite sport?"; 
   return `${name}'s favorite sport is ${sport}`; 
}  
const it = ask(); 
console.log(it.next()); 
console.log(it.next('Ethan'));  
console.log(it.next('Cricket')); 
</pre>
<p>Sequence of the generator function is as follows &minus;</p> 
<ul class="list">
<li><p>Generator started in paused stated; iterator is returned.</p></li>
<li><p>The it.next() yields “What is your name”. The generator is paused. This is done by the yield keyword.</p></li>
<li><p>The call it.next(“Ethan”) assigns the value Ethan to the variable name and yields “What is your favorite sport?” Again the generator is paused.</p></li>
<li><p>The call it.next(“Cricket”) assigns the value Cricket to the variable sport and executes the subsequent return statement.</p></li>
</ul> 
<p>Hence, the output of the above code will be &minus;</p>
<pre class="result notranslate">
{ 
   value: 'What is your name?', done: false 
} 
{ 
   value: 'What is your favorite sport?', done: false 
} 
{ 
   value: 'Ethan\'s favorite sport is Cricket', done: true 
}
</pre>
<p><b>Note</b> &minus; Generator functions cannot be represented using arrow functions.</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/es6/es6_loops.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/es6/es6_events.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
