<!DOCTYPE html>
<html lang="en-US">
<head>
<title>AJAX - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="AJAX - Quick Guide - AJAX stands for Asynchronous JavaScript and XML. AJAX is a new technique for creating better, faster, and more interactive web applications with the help of XML"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/ajax/ajax_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#7244a1;
}
a.demo {
    background:#7244a1;
}
li.heading {
    background:#7244a1;
}
.course-box{background:#7244a1}
.home-intro-sub p{color:#7244a1}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/ajax/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/ajax/images/ajax-mini-logo.jpg" alt="AJAX Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">AJAX Tutorial</li>
<li><a href="/ajax/index.htm">AJAX - Home</a></li>
<li><a href="/ajax/what_is_ajax.htm" >AJAX - What is AJAX?</a></li>
<li><a href="/ajax/ajax_technology.htm" >AJAX - Technologies</a></li>
<li><a href="/ajax/ajax_examples.htm" >AJAX - Examples</a></li>
<li><a href="/ajax/ajax_browser_support.htm" >AJAX - Browser Support</a></li>
<li><a href="/ajax/ajax_in_action.htm" >AJAX - Action</a></li>
<li><a href="/ajax/what_is_xmlhttprequest.htm" >AJAX - XMLHttpRequest</a></li>
<li><a href="/ajax/ajax_database.htm" >AJAX - Database Operations</a></li>
<li><a href="/ajax/ajax_security.htm" >AJAX - Security</a></li>
<li><a href="/ajax/ajax_issues.htm" >AJAX - Issues</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">AJAX Useful Resources</li>
<li><a href="/ajax/ajax_quick_guide.htm">AJAX - Quick Guide</a></li>
<li><a href="/ajax/ajax_useful_resources.htm">AJAX - Useful Resources</a></li>
<li><a href="/ajax/ajax_discussion.htm">AJAX - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>AJAX - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/ajax/ajax_issues.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ajax/ajax_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>What is AJAX?</h1>
<p>AJAX stands for <b>A</b>synchronous <b>Ja</b>vaScript and <b>X</b>ML. AJAX is a new technique for creating better, faster, and more interactive web applications with the help of XML, HTML, CSS, and Java Script.</p>
<ul class="list">
<li><p>Ajax uses XHTML for content, CSS for presentation, along with Document Object Model and JavaScript for dynamic content display.</p></li>
<li><p>Conventional web applications transmit information to and from the sever using synchronous requests. It means you fill out a form, hit submit, and get directed to a new page with new information from the server.</p></li>
<li><p>With AJAX, when you hit submit, JavaScript will make a request to the server, interpret the results, and update the current screen. In the purest sense, the user would never know that anything was even transmitted to the server.</p></li>
<li><p>XML is commonly used as the format for receiving server data, although any format, including plain text, can be used.</p></li>
<li><p>AJAX is a web browser technology independent of web server software.</p></li>
<li><p>A user can continue to use the application while the client program requests information from the server in the background.</p></li>
<li><p>Intuitive and natural user interaction. Clicking is not required, mouse movement is a sufficient event trigger.</p></li>
<li><p>Data-driven as opposed to page-driven.</p></li>
</ul>
<h2>Rich Internet Application Technology</h2>
<p>AJAX is the most viable Rich Internet Application (RIA) technology so far. It is getting tremendous industry momentum and several tool kit and frameworks are emerging. But at the same time, AJAX has browser incompatibility and it is supported by JavaScript, which is hard to maintain and debug.</p>
<h2>AJAX is Based on Open Standards</h2>
<p>AJAX is based on the following open standards &minus;</p>
<ul class="list">
<li>Browser-based presentation using HTML and Cascading Style Sheets (CSS).</li>
<li>Data is stored in XML format and fetched from the server.</li>
<li>Behind-the-scenes data fetches using XMLHttpRequest objects in the browser.</li>
<li>JavaScript to make everything happen.</li>
</ul>
<h1>AJAX - Technologies</h1>
<p>AJAX cannot work independently. It is used in combination with other technologies to create interactive webpages.</p>
<h2>JavaScript</h2>
<ul class="list">
<li>Loosely typed scripting language.</li>
<li>JavaScript function is called when an event occurs in a page.</li>
<li>Glue for the whole AJAX operation.</li>
</ul>
<h2>DOM</h2>
<ul class="list">
<li>API for accessing and manipulating structured documents.</li>
<li>Represents the structure of XML and HTML documents.</li>
</ul>
<h2>CSS</h2>
<ul class="list">
<li>Allows for a clear separation of the presentation style from the content and may be changed programmatically by JavaScript</li>
</ul>
<h2>XMLHttpRequest</h2>
<ul class="list">
<li>JavaScript object that performs asynchronous interaction with the server.</li>
</ul>
<h1>AJAX - Examples</h1>
<p>Here is a list of some famous web applications that make use of AJAX.</p>
<h2>Google Maps</h2>
<p>A user can drag an entire map by using the mouse, rather than clicking on a button.</p>
<ul class="list">
<li><p><a href="https://maps.google.com/" target="blank">https://maps.google.com/</a></p></li>
</ul>
<h2>Google Suggest</h2>
<p>As you type, Google offers suggestions. Use the arrow keys to navigate the results.</p>
<ul class="list">
<li><p><a href="https://www.google.com/webhp?complete=1&hl=en" target="blank">https://www.google.com/webhp?complete=1&hl=en</a></p></li>
</ul>
<h2>Gmail</h2>
<p>Gmail is a webmail built on the idea that emails can be more intuitive, efficient, and useful.</p>
<ul class="list">
<li><p><a href="https://gmail.com/" target="blank">https://gmail.com/</a></p></li>
</ul>
<h2>Yahoo Maps (new)</h2>
<p>Now it's even easier and more fun to get where you're going!</p>
<ul class="list">
<li><p><a href="https://maps.yahoo.com/" target="blank">https://maps.yahoo.com/</a></p></li>
</ul>
<h2>Difference between AJAX and Conventional CGI Program</h2>
<p>Try these two examples one by one and you will feel the difference. While trying AJAX example, there is no discontinuity and you get the response very quickly, but when you try the standard GCI example, you would have to wait for the response and your page also gets refreshed.</p>
<h3>AJAX Example</h3>
<form name="form1" action="" onsubmit="return ajax_call()">
<input type = "text" name="num1" id="num1"></input> *
<input type = "text" name="num2" id="num2"></input> = 
<input type = "text" name="result" id="result"></input>
<input type = "submit" name="semajax" value = "AJAX"></input>
</form>
<!-- -->
<h3>Standard Example</h3>
<form name="form2" action="/ajax/ajaxCGI.php">
<input type = "text" name="num1" id="num1" value = ""></input> *
<input type = "text" name="num2" id="num2" value = ""></input> = 
<input type = "text" name="result" id="result" value = ""></input>
<input type = "submit" name="semajax" value = "Standard"></input>
</form>
<p><b>NOTE</b> &minus; We have given a more complex example in <a href="/ajax/ajax_database.htm">AJAX Database</a>.</p>
<h1>AJAX - Browser Support</h1>
<p>All the available browsers cannot support AJAX. Here is a list of major browsers that support AJAX.</p>
<ul class="list">
<li>Mozilla Firefox 1.0 and above.</li>
<li>Netscape version 7.1 and above.</li>
<li>Apple Safari 1.2 and above.</li>
<li>Microsoft Internet Explorer 5 and above.</li>
<li>Konqueror.</li>
<li>Opera 7.6 and above.</li>
</ul>
<p>When you write your next application, do consider the browsers that do not support AJAX.</p>
<p><b>NOTE</b> &minus; When we say that a browser does not support AJAX, it simply means that the browser does not support the creation of Javascript object – XMLHttpRequest object.</p>
<h2>Writing Browser Specific Code</h2>
<p>The simplest way to make your source code compatible with a browser is to use <i>try...catch</i> blocks in your JavaScript.</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "javascript" type = "text/javascript"&gt;
         &lt;!-- 
         //Browser Support Code
         function ajaxFunction() {
            var ajaxRequest;  // The variable that makes Ajax possible!

            try {
               // Opera 8.0+, Firefox, Safari 
               ajaxRequest = new XMLHttpRequest();
            } catch (e) {

               // Internet Explorer Browsers
               try {
                  ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
               } catch (e) {
                  
                  try {
                     ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
                  } catch (e) {

                     // Something went wrong
                     alert("Your browser broke!");
                     return false;
                  }
               }
            }
         }
         //--&gt;
      &lt;/script&gt;
      
      &lt;form name = 'myForm'&gt;
         Name: &lt;input type = 'text' name = 'username' /&gt; &lt;br /&gt;
         Time: &lt;input type = 'text' name = 'time' /&gt;
      &lt;/form&gt;
      
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p>In the above JavaScript code, we try three times to make our XMLHttpRequest object. Our first attempt &minus;</p>
<ul class="list">
<li>ajaxRequest = new XMLHttpRequest();</li>
</ul>
<p>It is for Opera 8.0+, Firefox, and Safari browsers. If it fails, we try two more times to make the correct object for an Internet Explorer browser with &minus;</p>
<ul class="list">
<li>ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");</li>
<li>ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");</li>
</ul>
<p>If it doesn't work, then we can use a very outdated browser that doesn't support XMLHttpRequest, which also means it doesn't support AJAX.</p>
<p>Most likely though, our variable ajaxRequest will now be set to whatever <i>XMLHttpRequest</i> standard the browser uses and we can start sending data to the server. The step-wise AJAX workflow is explained in the next chapter.</p>
<h1>AJAX - Action</h1>
<p>This chapter gives you a clear picture of the exact steps of AJAX operation.</p>
<h2>Steps of AJAX Operation</h2>
<ul class="list">
<li>A client event occurs.</li>
<li>An XMLHttpRequest object is created.</li>
<li>The XMLHttpRequest object is configured.</li>
<li>The XMLHttpRequest object makes an asynchronous request to the Webserver.</li>
<li>The Webserver returns the result containing XML document.</li>
<li>The XMLHttpRequest object calls the callback() function and processes the result.</li>
<li>The HTML DOM is updated.</li>
</ul>
<p>Let us take these steps one by one.</p>
<h2>A Client Event Occurs</h2>
<ul class="list">
<li><p>A JavaScript function is called as the result of an event.</p></li>
<li><p>Example &minus; <i>validateUserId()</i> JavaScript function is mapped as an event handler to an <i>onkeyup</i> event on input form field whose id is set to <i>"userid"</i></p></li>
<li><p>&lt;input type = "text" size = "20" id = "userid" name = "id" onkeyup = "validateUserId();"&gt;.</p></li>
</ul>
<h2>The XMLHttpRequest Object is Created</h2>
<pre class="prettyprint notranslate">
var ajaxRequest;  // The variable that makes Ajax possible!
function ajaxFunction() {
   try {
      // Opera 8.0+, Firefox, Safari
      ajaxRequest = new XMLHttpRequest();
   } catch (e) {
   
      // Internet Explorer Browsers
      try {
         ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
      } catch (e) {
      
         try {
            ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
         } catch (e) {
      
            // Something went wrong
            alert("Your browser broke!");
            return false;
         }
      }
   }
}
</pre>
<h2>The XMLHttpRequest Object is Configured</h2>
<p>In this step, we will write a function that will be triggered by the client event and a callback function processRequest() will be registered.</p>
<pre class="prettyprint notranslate">
function validateUserId() {
   ajaxFunction();
   
   // Here processRequest() is the callback function.
   ajaxRequest.onreadystatechange = processRequest;
   
   if (!target) target = document.getElementById("userid");
   var url = "validate?id=" + escape(target.value);
   
   ajaxRequest.open("GET", url, true);
   ajaxRequest.send(null);
}
</pre>
<h2>Making Asynchronous Request to the Webserver</h2>
<p>Source code is available in the above piece of code. Code written in bold typeface is responsible to make a request to the webserver. This is all being done using the XMLHttpRequest object <i>ajaxRequest</i>.</p>
<pre class="prettyprint notranslate">
function validateUserId() {
   ajaxFunction();
   
   // Here processRequest() is the callback function.
   ajaxRequest.onreadystatechange = processRequest;
   
   <b>if (!target) target = document.getElementById("userid");
   var url = "validate?id = " + escape(target.value);
   
   ajaxRequest.open("GET", url, true);
   ajaxRequest.send(null);</b>
}
</pre>
<p>Assume you enter Zara in the userid box, then in the above request, the URL is set to "validate?id = Zara".</p>
<h2>Webserver Returns the Result Containing XML Document</h2>
<p>You can implement your server-side script in any language, however its logic should be as follows.</p>
<ul class="list">
<li>Get a request from the client.</li>
<li>Parse the input from the client.</li>
<li>Do required processing.</li>
<li>Send the output to the client.</li>
</ul>
<p>If we assume that you are going to write a servlet, then here is the piece of code.</p>
<pre class="prettyprint notranslate">
public void doGet(HttpServletRequest request,
   HttpServletResponse response) throws IOException, ServletException {
   String targetId = request.getParameter("id");
   
   if ((targetId != null) &amp;&amp; !accounts.containsKey(targetId.trim())) {
      response.setContentType("text/xml");
      response.setHeader("Cache-Control", "no-cache");
      response.getWriter().write("&lt;valid&gt;true&lt;/valid&gt;");
   } else {
      response.setContentType("text/xml");
      response.setHeader("Cache-Control", "no-cache");
      response.getWriter().write("&lt;valid&gt;false&lt;/valid&gt;");
   }
}
</pre>
<h2>Callback Function processRequest() is Called</h2>
<p>The XMLHttpRequest object was configured to call the processRequest() function when there is a state change to the <i>readyState</i> of the <i>XMLHttpRequest</i> object. Now this function will receive the result from the server and will do the required processing. As in the following example, it sets a variable message on true or false based on the returned value from the Webserver.</p>
<pre class="prettyprint notranslate"> 
function processRequest() {
   if (req.readyState == 4) {
      if (req.status == 200) {
         var message = ...;
...
}
</pre>
<h2>The HTML DOM is Updated</h2>
<p>This is the final step and in this step, your HTML page will be updated. It happens in the following way &minus;</p>
<ul class="list">
<li>JavaScript gets a reference to any element in a page using DOM API.</li>
<li>The recommended way to gain a reference to an element is to call.</li>
</ul>
<pre class="prettyprint notranslate">
document.getElementById("userIdMessage"), 
// where "userIdMessage" is the ID attribute 
// of an element appearing in the HTML document
</pre>
<ul class="list">
<li><p>JavaScript may now be used to modify the element's attributes; modify the element's style properties; or add, remove, or modify the child elements. Here is an example &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
&lt;script type = "text/javascript"&gt;
   &lt;!--
   function setMessageUsingDOM(message) {
      var userMessageElement = document.getElementById("userIdMessage");
      var messageText;
      
      if (message == "false") {
         userMessageElement.style.color = "red";
         messageText = "Invalid User Id";
      } else {
         userMessageElement.style.color = "green";
         messageText = "Valid User Id";
      }
      
      var messageBody = document.createTextNode(messageText);
      
      // if the messageBody element has been created simple 
      // replace it otherwise append the new element
      if (userMessageElement.childNodes[0]) {
         userMessageElement.replaceChild(messageBody, userMessageElement.childNodes[0]);
      } else {
         userMessageElement.appendChild(messageBody);
      }
   }
   --&gt;
&lt;/script&gt;

&lt;body&gt;
   &lt;div id = "userIdMessage"&gt;&lt;div&gt;
&lt;/body&gt;
</pre>
<p>If you have understood the above-mentioned seven steps, then you are almost done with AJAX. In the next chapter, we will see <i>XMLHttpRequest</i> object in more detail.</p>
<h1>AJAX - XMLHttpRequest</h1>
<p>The XMLHttpRequest object is the key to AJAX. It has been available ever since Internet Explorer 5.5 was released in July 2000, but was not fully discovered until AJAX and Web 2.0 in 2005 became popular.</p>
<p>XMLHttpRequest (XHR) is an API that can be used by JavaScript, JScript, VBScript, and other web browser scripting languages to transfer and manipulate XML data to and from a webserver using HTTP, establishing an independent connection channel between a webpage's Client-Side and Server-Side.</p>
<p>The data returned from XMLHttpRequest calls will often be provided by back-end databases. Besides XML, XMLHttpRequest can be used to fetch data in other formats, e.g. JSON or even plain text.</p>
<p>You already have seen a couple of examples on how to create an XMLHttpRequest object.</p>
<p>Listed below are some of the methods and properties that you have to get familiar with.</p>
<h2>XMLHttpRequest Methods</h2>
<ul class="list">
<li><p><b>abort()</b></p>
<p>Cancels the current request.</p></li>
<li><p><b>getAllResponseHeaders()</b></p>
<p>Returns the complete set of HTTP headers as a string.</p></li>
<li><p><b>getResponseHeader( headerName )</b></p>
<p>Returns the value of the specified HTTP header.</p></li>
<li><p><b>open( method, URL )</b></p></li>
<li><p><b>open( method, URL, async )</b></p></li>
<li><p><b>open( method, URL, async, userName )</b></p></li>
<li><p><b>open( method, URL, async, userName, password )</b></p>
<p>Specifies the method, URL, and other optional attributes of a request.</p>
<p>The method parameter can have a value of "GET", "POST", or "HEAD". Other HTTP methods such as "PUT" and "DELETE" (primarily used in REST applications) may be possible.</p>
<p>The "async" parameter specifies whether the request should be handled asynchronously or not. "true" means that the script processing carries on after the send() method without waiting for a response, and "false" means that the script waits for a response before continuing script processing.</p>
</li>
<li><p><b>send( content )</b></p>
<p>Sends the request.</p></li>
<li><p><b>setRequestHeader( label, value )</b></p>
<p>Adds a label/value pair to the HTTP header to be sent.</p></li>
</ul>
<h2>XMLHttpRequest Properties</h2>
<ul class="list">
<li><p><b>onreadystatechange</b></p>
<p>An event handler for an event that fires at every state change.</p></li>
<li><p><b>readyState</b></p>
<p>The readyState property defines the current state of the XMLHttpRequest object.</p>
<p>The following table provides a list of the possible values for the readyState property &minus;</p>
</li>
</ul>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;" width="10%">State</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td>0</td>
<td>The request is not initialized.</td>
</tr>
<tr>
<td>1</td>
<td>The request has been set up.</td>
</tr>
<tr>
<td>2</td>
<td>The request has been sent.</td>
</tr>
<tr>
<td>3</td>
<td>The request is in process.</td>
</tr>
<tr>
<td>4</td>
<td>The request is completed.</td>
</tr>
</table>
<p><b>readyState = 0</b> After you have created the XMLHttpRequest object, but before you have called the open() method.</p>
<p><b>readyState = 1</b> After you have called the open() method, but before you have called send().</p>
<p><b>readyState = 2</b> After you have called send().</p>
<p><b>readyState = 3</b> After the browser has established a communication with the server, but before the server has completed the response.</p>
<p><b>readyState = 4</b> After the request has been completed, and the response data has been completely received from the server.</p>
<ul class="list">
<li><p><b>responseText</b></p>
<p>Returns the response as a string.</p></li>
<li><p><b>responseXML</b></p>
<p>Returns the response as XML. This property returns an XML document object, which can be examined and parsed using the W3C DOM node tree methods and properties.</p></li>
<li><p><b>status</b></p>
<p>Returns the status as a number (e.g., 404 for "Not Found" and 200 for "OK").</p></li>
<li><p><b>statusText</b></p>
<p>Returns the status as a string (e.g., "Not Found" or "OK").</p></li>
</ul>
<h1>AJAX - Database Operations</h1>
<p>To clearly illustrate how easy it is to access information from a database using AJAX, we are going to build MySQL queries on the fly and display the results on "ajax.html". But before we proceed, let us do the ground work. Create a table using the following command.</p>
<p><b>NOTE</b> &minus; We are assuming you have sufficient privilege to perform the following MySQL operations.</p>
<pre class="result notranslate">
CREATE TABLE 'ajax_example' (
   'name' varchar(50) NOT NULL,
   'age' int(11) NOT NULL,
   'sex' varchar(1) NOT NULL,
   'wpm' int(11) NOT NULL,
   PRIMARY KEY  ('name')
) 
</pre>
<p>Now dump the following data into this table using the following SQL statements &minus;</p>
<pre class="result notranslate">
INSERT INTO 'ajax_example' VALUES ('Jerry', 120, 'm', 20);
INSERT INTO 'ajax_example' VALUES ('Regis', 75, 'm', 44);
INSERT INTO 'ajax_example' VALUES ('Frank', 45, 'm', 87);
INSERT INTO 'ajax_example' VALUES ('Jill', 22, 'f', 72);
INSERT INTO 'ajax_example' VALUES ('Tracy', 27, 'f', 0);
INSERT INTO 'ajax_example' VALUES ('Julie', 35, 'f', 90);
</pre>
<h2>Client Side HTML File</h2>
<p>Now let us have our client side HTML file, which is ajax.html, and it will have the following code &minus;</p>
<pre class="prettyprint notranslate">
&lt;html&gt;
   &lt;body&gt;
      &lt;script language = "javascript" type = "text/javascript"&gt;
         &lt;!-- 
         //Browser Support Code
         function ajaxFunction() {
            var ajaxRequest;  // The variable that makes Ajax possible!
            
            try {        
               // Opera 8.0+, Firefox, Safari
               ajaxRequest = new XMLHttpRequest();
            } catch (e) {
               
               // Internet Explorer Browsers
               try {
                  ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
               } catch (e) {
                  
                  try {
                     ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
                  } catch (e) {
                     // Something went wrong
                     alert("Your browser broke!");
                     return false;
                  }
               }
            }
            
            // Create a function that will receive data
            // sent from the server and will update
            // div section in the same page.
            ajaxRequest.onreadystatechange = function() {
            
               if(ajaxRequest.readyState == 4) {
                  var ajaxDisplay = document.getElementById('ajaxDiv');
                  ajaxDisplay.innerHTML = ajaxRequest.responseText;
               }
            }
            
            // Now get the value from user and pass it to
            // server script.
            var age = document.getElementById('age').value;
            var wpm = document.getElementById('wpm').value;
            var sex = document.getElementById('sex').value;
            var queryString = "?age = " + age ;
            
            queryString +=  "&amp;wpm = " + wpm + "&amp;sex = " + sex;
            ajaxRequest.open("GET", "ajax-example.php" + queryString, true);
            ajaxRequest.send(null); 
         }
         //--&gt;
      &lt;/script&gt;

      &lt;form name = 'myForm'&gt;
         Max Age: &lt;input type = 'text' id = 'age' /&gt; &lt;br /&gt;
         Max WPM: &lt;input type = 'text' id = 'wpm' /&gt; &lt;br /&gt;
         Sex: 
         
         &lt;select id = 'sex'&gt;
            &lt;option value = "m"&gt;m&lt;/option&gt;
            &lt;option value = "f"&gt;f&lt;/option&gt;
         &lt;/select&gt;
         
         &lt;input type = 'button' onclick = 'ajaxFunction()' value = 'Query MySQL'/&gt;
      &lt;/form&gt;
      
      &lt;div id = 'ajaxDiv'&gt;Your result will display here&lt;/div&gt;
   &lt;/body&gt;
&lt;/html&gt;
</pre>
<p><b>NOTE</b> &minus; The way of passing variables in the Query is according to HTTP standard and have formA.</p>
<pre class="prettyprint notranslate">
URL?variable1 = value1;&amp;variable2 = value2;
</pre>
<p>The above code will give you a screen as given below &minus;</p>
<script language = "javascript" type = "text/javascript">
<!-- 
//Browser Support Code
function ajaxFunction(){
   var ajaxRequest;  // The variable that makes Ajax possible!
   try{
   
      // Opera 8.0+, Firefox, Safari
      ajaxRequest = new XMLHttpRequest();
   }catch (e){
   
      // Internet Explorer Browsers
      try{
         ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
      }catch (e) {
         try{
            ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
         }catch (e){
      
            // Something went wrong
            alert("Your browser broke!");
            return false;
        }
     }
  }

   // Create a function that will receive data 
   // sent from the server and will update
   // div section in the same page.
   ajaxRequest.onreadystatechange = function(){
   
      if(ajaxRequest.readyState == 4){
         var ajaxDisplay = document.getElementById('ajaxDiv');
         ajaxDisplay.innerHTML = ajaxRequest.responseText;
      }
   }
   // Now get the value from user and pass it to
   // server script.
   var age = document.getElementById('age').value;
   var wpm = document.getElementById('wpm').value;
   var sex = document.getElementById('sex').value;
   var queryString = "?age=" + age ;

   queryString +=  "&wpm=" + wpm + "&sex=" + sex;
   ajaxRequest.open("GET", "/ajax/ajax-example.php" + queryString, true);
   ajaxRequest.send(null); 
}
//-->
</script>
<form name = 'myForm0'>
<p>Max Age:&nbsp; <input type = 'text' id = 'age0' /></p>
<p>Max WPM: <input type = 'text' id = 'wpm0' /></p>
<p>Sex: <select id = 'sex0'>
<option value = "m">m</option>
<option value = "f">f</option>
</select></p>
<input type = 'button' onclick='' value='Query MySQL' />
</form>
<p>Your result will display here in this section after you have made your entry.</p>
<p><b>NOTE</b> &minus; This is a dummy screen.</p>
<h2>Server Side PHP File</h2>
<p>Your client-side script is ready. Now, we have to write our server-side script, which will fetch age, wpm, and sex from the database and will send it back to the client. Put the following code into the file "ajax-example.php".</p>
<pre class="prettyprint notranslate">
&lt;?php
$dbhost = "localhost";
$dbuser = "dbusername";
$dbpass = "dbpassword";
$dbname = "dbname";
	
//Connect to MySQL Server
mysql_connect($dbhost, $dbuser, $dbpass);
	
//Select Database
mysql_select_db($dbname) or die(mysql_error());
	
// Retrieve data from Query String
$age = $_GET['age'];
$sex = $_GET['sex'];
$wpm = $_GET['wpm'];
	
// Escape User Input to help prevent SQL Injection
$age = mysql_real_escape_string($age);
$sex = mysql_real_escape_string($sex);
$wpm = mysql_real_escape_string($wpm);
	
//build query
$query = "SELECT * FROM ajax_example WHERE sex = '$sex'";

if(is_numeric($age))
   $query .= " AND age &lt;= $age";

if(is_numeric($wpm))
   $query .= " AND wpm &lt;= $wpm";
	
//Execute query
$qry_result = mysql_query($query) or die(mysql_error());

//Build Result String
$display_string = "&lt;table&gt;";
$display_string .= "&lt;tr&gt;";
$display_string .= "&lt;th&gt;Name&lt;/th&gt;";
$display_string .= "&lt;th&gt;Age&lt;/th&gt;";
$display_string .= "&lt;th&gt;Sex&lt;/th&gt;";
$display_string .= "&lt;th&gt;WPM&lt;/th&gt;";
$display_string .= "&lt;/tr&gt;";

// Insert a new row in the table for each person returned
while($row = mysql_fetch_array($qry_result)) {
   $display_string .= "&lt;tr&gt;";
   $display_string .= "&lt;td&gt;$row[name]&lt;/td&gt;";
   $display_string .= "&lt;td&gt;$row[age]&lt;/td&gt;";
   $display_string .= "&lt;td&gt;$row[sex]&lt;/td&gt;";
   $display_string .= "&lt;td&gt;$row[wpm]&lt;/td&gt;";
   $display_string .= "&lt;/tr&gt;";
}

echo "Query: " . $query . "&lt;br /&gt;";
$display_string .= "&lt;/table&gt;";

echo $display_string;
?&gt;
</pre>
<p>Now try by entering a valid value (e.g., 120) in <i>Max Age</i> or any other box and then click Query MySQL button.</p>
<form name = 'myForm'>
<p>Max Age:&nbsp; <input type = 'text' id = 'age' /></p>
<p>Max WPM: <input type = 'text' id = 'wpm' /></p>
<p>Sex: <select id = 'sex'>
<option value = "m">m</option>
<option value = "f">f</option>
</select></p>
<input type = 'button' onclick='ajaxFunction()' value='Query MySQL' />
</form>
<p>Your result will display here in this section after you have made your entry.</p>
<p>If you have successfully completed this lesson, then you know how to use MySQL, PHP, HTML, and Javascript in tandem to write AJAX applications.</p>
<h1>AJAX - Security</h1>
<h2>AJAX Security: Server Side</h2>
<uL class="list">
<li><p>AJAX-based Web applications use the same server-side security schemes of regular Web applications.</p></li>
<li><p>You specify authentication, authorization, and data protection requirements in your web.xml file (declarative) or in your program (programmatic).</p></li>
<li><p>AJAX-based Web applications are subject to the same security threats as regular Web applications.</p></li>
</ul>
<h2>AJAX Security: Client Side</h2>
<ul class="list">
<li><p>JavaScript code is visible to a user/hacker. Hacker can use JavaScript code for inferring server-side weaknesses.</p></li>
<li><p>JavaScript code is downloaded from the server and executed ("eval") at the client and can compromise the client by mal-intended code.</p></li>
<li><p>Downloaded JavaScript code is constrained by the sand-box security model and can be relaxed for signed JavaScript.</p></li>
</ul>
<h1>AJAX - Current Issues</h1>
<p>AJAX is growing very fast and that is the reason that it contains many issues with it. We hope with the passes of time, they will be resolved and AJAX will become ideal for web applications. We are listing down a few issues that AJAX currently suffers from.</p>
<p><b>Complexity is increased</b></p>
<ul class="list">
<li><p>Server-side developers will need to understand that presentation logic will be required in the HTML client pages as well as in the server-side logic.</p></li>
<li><p>Page developers must have JavaScript technology skills.</p></li>
</ul>
<p><b>AJAX-based applications can be difficult to debug, test, and maintain</b></p>
<ul class="list">
<li>JavaScript is hard to test - automatic testing is hard.</li>
<li>Weak modularity in JavaScript.</li>
<li>Lack of design patterns or best practice guidelines yet.</li>
</ul>
<p><b>Toolkits/Frameworks are not mature yet</b></p>
<ul class="list">
<li>Most of them are in beta phase.</li>
</ul>
<p><b>No standardization of the XMLHttpRequest yet</b></p>
<ul class="list">
<li>Future version of IE will address this.</li>
</ul>
<p><b>No support of XMLHttpRequest in old browsers</b></p>
<ul class="list">
<li>Iframe will help.</li>
</ul>
<p><b>JavaScript technology dependency and incompatibility</b></p>
<ul class="list">
<li>Must be enabled for applications to function.</li>
<li>Still some browser incompatibilities exist.</li>
</ul>
<p><b>JavaScript code is visible to a hacker</b></p>
<ul class="list">
<li>Poorly designed JavaScript code can invite security problems.</li>
</ul>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/ajax/ajax_issues.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/ajax/ajax_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
