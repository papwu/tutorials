<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Unix Socket - Quick Guide - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Unix Socket - Quick Guide - Sockets allow communication between two different processes on the same or different machines. To be more precise, it's a way to talk to other computers using s"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/unix_sockets/socket_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#28aa8a;
}
a.demo {
    background:#28aa8a;
}
li.heading {
    background:#28aa8a;
}
.course-box{background:#28aa8a}
.home-intro-sub p{color:#28aa8a}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/unix_sockets/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/unix_sockets/images/unix-socket-mini-logo.jpg" alt="Unix Sockets Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Unix Socket Tutorial</li>
<li><a href="/unix_sockets/index.htm">Unix Socket - Home</a></li>
<li><a href="/unix_sockets/what_is_socket.htm">Unix Socket - What is a Socket?</a></li>
<li><a href="/unix_sockets/network_addresses.htm">Unix Socket - Network Addresses</a></li> 
<li><a href="/unix_sockets/network_host_names.htm">Unix Socket - Network Host Names</a></li>
<li><a href="/unix_sockets/client_server_model.htm">Unix Socket - Client Server Model</a></li>
<li><a href="/unix_sockets/socket_structures.htm">Unix Socket - Structures</a></li>
<li><a href="/unix_sockets/ports_and_services.htm">Unix Socket - Ports and Services</a></li>
<li><a href="/unix_sockets/network_byte_orders.htm">Unix Socket - Network Byte Orders</a></li>
<li><a href="/unix_sockets/ip_address_functions.htm">Unix Socket - IP Address Functions</a></li>
<li><a href="/unix_sockets/socket_core_functions.htm">Unix Socket - Core Functions</a></li>
<li><a href="/unix_sockets/socket_helper_functions.htm">Unix Socket - Helper Functions</a></li>
<li><a href="/unix_sockets/socket_server_example.htm">Unix Socket - Server Example</a></li>
<li><a href="/unix_sockets/socket_client_example.htm">Unix Socket - Client Example</a></li>
<li><a href="/unix_sockets/socket_summary.htm">Unix Socket - Summary</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Unix Socket Useful Resources</li>
<li><a href="/unix_sockets/socket_quick_guide.htm">Unix Socket - Quick Guide</a></li>
<li><a href="/unix_sockets/socket_useful_resources.htm">Unix Socket - Useful Resources</a></li>
<li><a href="/unix_sockets/unix_sockets_discussion.htm">Unix Socket - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Unix Socket - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/unix_sockets/socket_summary.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/unix_sockets/socket_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>What is a Socket?</h1>
<p>Sockets allow communication between two different processes on the same or different machines. To be more precise, it's a way to talk to other computers using standard Unix file descriptors. In Unix, every I/O action is done by writing or reading a file descriptor. A file descriptor is just an integer associated with an open file and it can be a network connection, a text file, a terminal, or something else.</p>
<p>To a programmer, a socket looks and behaves much like a low-level file descriptor. This is because commands such as read() and write() work with sockets in the same way they do with files and pipes.</p>
<p>Sockets were first introduced in 2.1BSD and subsequently refined into their current form with 4.2BSD. The sockets feature is now available with most current UNIX system releases.</p>
<h2>Where is Socket Used?</h2>
<p>A Unix Socket is used in a client-server application framework. A server is a process that performs some functions on request from a client. Most of the application-level protocols like FTP, SMTP, and POP3 make use of sockets to establish connection between client and server and then for exchanging data.</p>
<h2>Socket Types</h2>
<p>There are four types of sockets available to the users. The first two are most commonly used and the last two are rarely used.</p>
<p>Processes are presumed to communicate only between sockets of the same type but there is no restriction that prevents communication between sockets of different types.</p>
<ul class="list">
<li><p><b>Stream Sockets</b> &minus; Delivery in a networked environment is guaranteed. If you send through the stream socket three items "A, B, C", they will arrive in the same order &minus; "A, B, C". These sockets use TCP (Transmission Control Protocol) for data transmission. If delivery is impossible, the sender receives an error indicator. Data records do not have any boundaries.</p></li>
<li><p><b>Datagram Sockets</b> &minus; Delivery in a networked environment is not guaranteed. They're connectionless because you don't need to have an open connection as in Stream Sockets &minus; you build a packet with the destination information and send it out. They use UDP (User Datagram Protocol).</p></li>
<li><p><b>Raw Sockets</b> &minus; These provide users access to the underlying communication protocols, which support socket abstractions. These sockets are normally datagram oriented, though their exact characteristics are dependent on the interface provided by the protocol. Raw sockets are not intended for the general user; they have been provided mainly for those interested in developing new communication protocols, or for gaining access to some of the more cryptic facilities of an existing protocol.</p></li>
<li><p><b>Sequenced Packet Sockets</b> &minus; They are similar to a stream socket, with the exception that record boundaries are preserved. This interface is provided only as a part of the Network Systems (NS) socket abstraction, and is very important in most serious NS applications. Sequenced-packet sockets allow the user to manipulate the Sequence Packet Protocol (SPP) or Internet Datagram Protocol (IDP) headers on a packet or a group of packets, either by writing a prototype header along with whatever data is to be sent, or by specifying a default header to be used with all outgoing data, and allows the user to receive the headers on incoming packets.</p></li>
</ul>
<h2>What is Next?</h2>
<p>The next few chapters are meant to strengthen your basics and prepare a foundation before you can write Server and Client programs using <i>socket</i>. If you directly want to jump to see how to write a client and server program, then you can do so but it is not recommended. It is strongly recommended that you go step by step and complete these initial few chapters to make your base before moving on to do programming.</p>
<h1>Unix Socket - Network Addresses</h1>
<p>Before we proceed with the actual stuff, let us discuss a bit about the Network Addresses &minus; the IP Address.</p>
<p>The IP host address, or more commonly just IP address, is used to identify hosts connected to the Internet. IP stands for Internet Protocol and refers to the Internet Layer of the overall network architecture of the Internet.</p>
<p>An IP address is a 32-bit quantity interpreted as four 8-bit numbers or octets. Each IP address uniquely identifies the participating user network, the host on the network, and the class of the user network.</p>
<p>An IP address is usually written in a dotted-decimal notation of the form N1.N2.N3.N4, where each Ni is a decimal number between 0 and 255 decimal (00 through FF hexadecimal).</p>
<h2>Address Classes</h2>
<p>IP addresses are managed and created by the <i>Internet Assigned Numbers Authority</i> (IANA). There are five different address classes. You can determine which class an IP address is in by examining the first four bits of the IP address.</p>
<ul class="list">
<li><p><b>Class A</b> addresses begin with <b>0xxx</b>, or <b>1 to 126</b> decimal.</p></li>
<li><p><b>Class B</b> addresses begin with <b>10xx</b>, or <b>128 to 191</b> decimal.</p></li>
<li><p><b>Class C</b> addresses begin with <b>110x</b>, or <b>192 to 223</b> decimal.</p></li>
<li><p><b>Class D</b> addresses begin with <b>1110</b>, or <b>224 to 239</b> decimal.</p></li>
<li><p><b>Class E</b> addresses begin with <b>1111</b>, or <b>240 to 254</b> decimal.</p></li>
</ul>
<p>Addresses beginning with <b>01111111</b>, or <b>127</b> decimal, are reserved for loopback and for internal testing on a local machine [You can test this: you should always be able to ping <b>127.0.0.1</b>, which points to yourself]; Class D addresses are reserved for multicasting; Class E addresses are reserved for future use. They should not be used for host addresses.</p>
<h3>Example</h3>
<table class="table table-bordered">
<tr>
<td><b>Class</b></td>
<td><b>Leftmost bits</b></td>
<td><b>Start address</b></td>
<td><b>Finish address</b></td>
</tr>
<tr>
<td>A</td>
<td>0xxx</td>
<td>0.0.0.0</td>
<td>127.255.255.255</td>
</tr>
<tr>
<td>B</td>
<td>10xx</td>
<td>128.0.0.0</td>
<td>191.255.255.255</td>
</tr>
<tr>
<td>C</td>
<td>110x</td>
<td>192.0.0.0</td>
<td>223.255.255.255</td>
</tr>
<tr>
<td>D</td>
<td>1110</td>
<td>224.0.0.0 </td>
<td>239.255.255.255</td>
</tr>
<tr>
<td>E</td>
<td>1111</td>
<td>240.0.0.0 </td>
<td>255.255.255.255</td>
</tr>
</table>
<h2>Subnetting</h2>
<p>Subnetting or subnetworking basically means to branch off a network. It can be done for a variety of reasons like network in an organization, use of different physical media (such as Ethernet, FDDI, WAN, etc.), preservation of address space, and security. The most common reason is to control network traffic.</p>
<p>The basic idea in subnetting is to partition the host identifier portion of the IP address into two parts &minus;</p>
<ul class="list">
<li>A subnet address within the network address itself; and</li>
<li>A host address on the subnet.</li>
</ul>
<p>For example, a common Class B address format is N1.N2.S.H, where N1.N2 identifies the Class B network, the 8-bit S field identifies the subnet, and the 8-bit H field identifies the host on the subnet.</p>
<h1>Unix Socket - Network Host Names</h1>
<p>Host names in terms of numbers are difficult to remember and hence they are termed by ordinary names such as Takshila or Nalanda. We write software applications to find out the dotted IP address corresponding to a given name.</p>
<p>The process of finding out dotted IP address based on the given alphanumeric host name is known as <b>hostname resolution</b>.</p>
<p>A hostname resolution is done by special software residing on high-capacity systems. These systems are called Domain Name Systems (DNS), which keep the mapping of IP addresses and the corresponding ordinary names.</p>
<h2>The /etc/hosts File</h2>
<p>The correspondence between host names and IP addresses is maintained in a file called <i>hosts</i>. On most of the systems, this file is found in <i><b>/etc</b></i> directory.</p>
<p>Entries in this file look like the following &minus;</p>
<pre class="result notranslate">
# This represents a comments in /etc/hosts file.
127.0.0.1       localhost
192.217.44.207  nalanda metro
153.110.31.18   netserve
153.110.31.19   mainserver centeral
153.110.31.20   samsonite
64.202.167.10   ns3.secureserver.net
64.202.167.97   ns4.secureserver.net
66.249.89.104   www.google.com
68.178.157.132  services.amrood.com
</pre> 
<p>Note that more than one name may be associated with a given IP address. This file is used while converting from IP address to host name and vice versa.</p>
<p>You would not have access to edit this file, so if you want to put any host name along with IP address, then you would need to have root permission.</p>
<h1>Unix Socket - Client Server Model</h1>
<p>Most of the Net Applications use the Client-Server architecture, which refers to two processes or two applications that communicate with each other to exchange some information. One of the two processes acts as a client process, and another process acts as a server.</p>
<h2>Client Process</h2>
<p>This is the process, which typically makes a request for information. After getting the response, this process may terminate or may do some other processing.</p>
<p><b>Example</b>, Internet Browser works as a client application, which sends a request to the Web Server to get one HTML webpage.</p>
<h2>Server Process</h2>
<p>This is the process which takes a request from the clients. After getting a request from the client, this process will perform the required processing, gather the requested information, and send it to the requestor client. Once done, it becomes ready to serve another client. Server processes are always alert and ready to serve incoming requests.</p>
<p><b>Example</b> &minus; Web Server keeps waiting for requests from Internet Browsers and as soon as it gets any request from a browser, it picks up a requested HTML page and sends it back to that Browser.</p>
<p>Note that the client needs to know the address of the server, but the server does not need to know the address or even the existence of the client prior to the connection being established. Once a connection is established, both sides can send and receive information.</p>
<h2>2-tier and 3-tier architectures</h2>
<p>There are two types of client-server architectures &minus;</p>
<ul class="list">
<li><p><b>2-tier architecture</b> &minus; In this architecture, the client directly interacts with the server. This type of architecture may have some security holes and performance problems. Internet Explorer and Web Server work on two-tier architecture. Here security problems are resolved using Secure Socket Layer (SSL).</p></li>
<li><p><b>3-tier architectures</b> &minus; In this architecture, one more software sits in between the client and the server. This middle software is called ‘middleware’. Middleware are used to perform all the security checks and load balancing in case of heavy load. A middleware takes all requests from the client and after performing the required authentication, it passes that request to the server. Then the server does the required processing and sends the response back to the middleware and finally the middleware passes this response back to the client. If you want to implement a 3-tier architecture, then you can keep any middleware like Web Logic or WebSphere software in between your Web Server and Web Browser.</p></li>
</ul>
<h2>Types of Server</h2>
<p>There are two types of servers you can have &minus;</p>
<ul class="list">
<li><p><b>Iterative Server</b> &minus; This is the simplest form of server where a server process serves one client and after completing the first request, it takes request from another client. Meanwhile, another client keeps waiting.</p></li>
<li><p><b>Concurrent Servers</b> &minus; This type of server runs multiple concurrent processes to serve many requests at a time because one process may take longer and another client cannot wait for so long. The simplest way to write a concurrent server under Unix is to <i>fork</i> a child process to handle each client separately.</p></li>
</ul>
<h2>How to Make Client</h2>
<p>The system calls for establishing a connection are somewhat different for the client and the server, but both involve the basic construct of a socket. Both the processes establish their own sockets.</p>
<p>The steps involved in establishing a socket on the client side are as follows &minus;</p>
<ul class="list">
<li><p>Create a socket with the <b>socket()</b> system call.</p></li>
<li><p>Connect the socket to the address of the server using the <b>connect()</b> system call.</p></li>
<li><p>Send and receive data. There are a number of ways to do this, but the simplest  way is to use the <b>read()</b> and <b>write()</b> system calls.</p></li>
</ul>
<h2>How to make a Server</h2>
<p>The steps involved in establishing a socket on the server side are as follows &minus;</p>
<ul class="list">
<li><p>Create a socket with the <b>socket()</b> system call.</p></li>
<li><p>Bind the socket to an address using the <b>bind()</b> system call. For a server socket on the Internet, an address consists of a port number on the host machine.</p></li>
<li><p>Listen for connections with the <b>listen()</b> system call.</p></li>
<li><p>Accept a connection with the <b>accept()</b> system call. This call typically blocks the connection until a client connects with the server.</p></li>
<li><p>Send and receive data using the <b>read()</b> and <b>write()</b> system calls.</p></li>
</ul>
<h2>Client and Server Interaction</h2>
<p>Following is the diagram showing the complete Client and Server interaction &minus;</p>
<img src="/unix_sockets/images/socket_client_server.gif" alt="Socket Client Server" />
<h1>Unix Socket - Structures</h1>
<p>Various structures are used in Unix Socket Programming to hold information about the address and port, and other information. Most socket functions require a pointer to a socket address structure as an argument. Structures defined in this chapter are related to Internet Protocol Family.</p>
<h2>sockaddr</h2>
<p>The first structure is <i>sockaddr</i> that holds the socket information &minus;</p>
<pre class="prettyprint notranslate">
struct sockaddr {
   unsigned short   sa_family;
   char             sa_data[14];
};
</pre> 
<p>This is a generic socket address structure, which will be passed in most of the socket function calls. The following table provides a description of the member fields &minus;</p>
<table class="table table-bordered">
<tr>
<th>Attribute</th>
<th>Values</th>
<th>Description</th>
</tr>
<tr>
<td style="vertical-align:middle;">sa_family</td>
<td>
<p>AF_INET</p>
<p>AF_UNIX</p>
<p>AF_NS</p>
<p>AF_IMPLINK</p>
</td>
<td>It represents an address family. In most of the Internet-based applications, we use AF_INET.</td>
</tr>
<tr>
<td>sa_data</td>
<td>Protocol-specific Address</td>
<td>The content of the 14 bytes of protocol specific address are interpreted according to the type of address. For the Internet family, we will use port number IP address, which is represented by <i>sockaddr_in</i> structure defined below.</td>
</tr>
</table>
<h2>sockaddr in</h2>
<p>The second structure that helps you to reference to the socket's elements is as follows &minus;</p>
<pre class="prettyprint notranslate">
struct sockaddr_in {
   short int            sin_family;
   unsigned short int   sin_port;
   struct in_addr       sin_addr;
   unsigned char        sin_zero[8];
};
</pre> 
<p>Here is the description of the member fields &minus;</p>
<table class="table table-bordered">
<tr>
<th>Attribute</th>
<th>Values</th>
<th>Description</th>
</tr>
<tr>
<td style="vertical-align:middle;">sa_family</td>
<td>
<p>AF_INET</p>
<p>AF_UNIX</p>
<p>AF_NS</p>
<p>AF_IMPLINK</p>
</td>
<td>It represents an address family. In most of the Internet-based applications, we use AF_INET.</td>
</tr>
<tr>
<td>sin_port</td>
<td>Service Port</td>
<td>A 16-bit port number in Network Byte Order.</td>
</tr>
<tr>
<td>sin_addr</td>
<td>IP Address</td>
<td>A 32-bit IP address in Network Byte Order.</td>
</tr>
<tr>
<td>sin_zero</td>
<td>Not Used</td>
<td>You just set this value to NULL as this is not being used.</td>
</tr>
</table>
<h2>in addr</h2>
<p>This structure is used only in the above structure as a structure field and holds 32 bit netid/hostid.</p>
<pre class="prettyprint notranslate">
struct in_addr {
   unsigned long s_addr;
};
</pre> 
<p>Here is the description of the member fields &minus;</p>
<table class="table table-bordered">
<tr>
<th>Attribute</th>
<th>Values</th>
<th>Description</th>
</tr>
<tr>
<td>s_addr</td>
<td>service port</td>
<td>A 32-bit IP address in Network Byte Order.</td>
</tr>
</table>
<h2>hostent</h2>
<p>This structure is used to keep information related to host.</p>
<pre class="prettyprint notranslate">
struct hostent {
   char *h_name; 
   char **h_aliases; 
   int h_addrtype;  
   int h_length;    
   char **h_addr_list
	
#define h_addr  h_addr_list[0]
};
</pre> 
<p>Here is the description of the member fields &minus;</p>
<table class="table table-bordered">
<tr>
<th>Attribute</th>
<th>Values</th>
<th>Description</th>
</tr>
<tr>
<td>h_name</td>
<td>ti.com etc.</td>
<td>It is the official name of the host. For example, tutorialspoint.com, google.com, etc.</td>
</tr>
<tr>
<td>h_aliases</td>
<td>TI</td>
<td>It holds a list of host name aliases.</td>
</tr>
<tr>
<td>h_addrtype</td>
<td>AF_INET</td>
<td>It contains the address family and in case of Internet based application, it will always be AF_INET.</td>
</tr>
<tr>
<td>h_length</td>
<td>4</td>
<td>It holds the length of the IP address, which is 4 for Internet Address.</td>
</tr>
<tr>
<td>h_addr_list</td>
<td>in_addr</td>
<td>For Internet addresses, the array of pointers h_addr_list[0], h_addr_list[1], and so on, are points to structure in_addr.</td>
</tr>
</table>
<p><b>NOTE</b> &minus; h_addr is defined as h_addr_list[0] to keep backward compatibility.</p>
<h2>servent</h2>
<p>This particular structure is used to keep information related to service and associated ports.</p>
<pre class="prettyprint notranslate">
struct servent {
   char  *s_name; 
   char  **s_aliases; 
   int   s_port;  
   char  *s_proto;
};
</pre> 
<p>Here is the description of the member fields &minus;</p>
<table class="table table-bordered">
<tr>
<th>Attribute</th>
<th>Values</th>
<th>Description</th>
</tr>
<tr>
<td>s_name</td>
<td>http</td>
<td>This is the official name of the service. For example, SMTP, FTP POP3, etc.</td>
</tr>
<tr>
<td>s_aliases</td>
<td>ALIAS</td>
<td>It holds the list of service aliases. Most of the time this will be set to NULL.</td>
</tr>
<tr>
<td>s_port</td>
<td>80</td>
<td>It will have associated port number. For example, for HTTP, this will be 80.</td>
</tr>
<tr>
<td>s_proto</td>
<td>
<p>TCP</p>
<p>UDP</p>
</td>
<td>It is set to the protocol used. Internet services are provided using either TCP or UDP.</td>
</tr>
</table>
<h2>Tips on Socket Structures</h2>
<p>Socket address structures are an integral part of every network program. We allocate them, fill them in, and pass pointers to them to various socket functions. Sometimes we pass a pointer to one of these structures to a socket function and it fills in the contents.</p>
<p>We always pass these structures by reference (i.e., we pass a pointer to the structure, not the structure itself), and we always pass the size of the structure as another argument.</p>
<p>When a socket function fills in a structure, the length is also passed by reference, so that its value can be updated by the function. We call these value-result arguments.</p>
<p>Always, set the structure variables to NULL (i.e., '\0') by using memset() for bzero() functions, otherwise it may get unexpected junk values in your structure.</p>
<h1>Unix Socket - Ports and Services</h1>
<p>When a client process wants to a connect a server, the client must have a way of identifying the server that it wants to connect. If the client knows the 32-bit Internet address of the host on which the server resides, it can contact that host. But how does the client identify the particular server process running on that host?</p>
<p>To resolve the problem of identifying a particular server process running on a host, both TCP and UDP have defined a group of well-known ports.</p>
<p>For our purpose, a port will be defined as an integer number between 1024 and 65535. This is because all port numbers smaller than 1024 are considered <i>well-known</i> -- for example, telnet uses port 23, http uses 80, ftp uses 21, and so on.</p>
<p>The port assignments to network services can be found in the file /etc/services. If you are writing your own server then care must be taken to assign a port to your server. You should make sure that this port should not be assigned to any other server.</p>
<p>Normally it is a practice to assign any port number more than 5000. But there are many organizations who have written servers having port numbers more than 5000. For example, Yahoo Messenger runs on 5050, SIP Server runs on 5060, etc.</p>
<h2>Example Ports and Services</h2>
<p>Here is a small list of services and associated ports. You can find the most updated list of internet ports and associated service at <a rel="nofollow" target="_blank" href="http://www.iana.org/assignments/port-numbers">IANA - TCP/IP Port Assignments</a>.</p>
<table class="table table-bordered">
<tr>
<td><b>Service</b></td>
<td><b>Port Number</b></td>
<td><b>Service Description</b></td>
</tr>
<tr>
<td>echo</td>
<td>7</td>
<td>UDP/TCP sends back what it receives.</td>
</tr>
<tr>
<td>discard</td>
<td>9</td>
<td>UDP/TCP throws away input.</td>
</tr>
<tr>
<td>daytime</td>
<td>13</td>
<td>UDP/TCP returns ASCII time.</td>
</tr>
<tr>
<td>chargen</td>
<td>19</td>
<td>UDP/TCP returns characters.</td>
</tr>
<tr>
<td>ftp</td>
<td>21</td>
<td>TCP file transfer.</td>
</tr>
<tr>
<td>telnet</td>
<td>23</td>
<td>TCP remote login.</td>
</tr>
<tr>
<td>smtp</td>
<td>25</td>
<td>TCP email.</td>
</tr>
<tr>
<td>daytime</td>
<td>37</td>
<td>UDP/TCP returns binary time.</td>
</tr>
<tr>
<td>tftp</td>
<td>69</td>
<td>UDP trivial file transfer.</td>
</tr>
<tr>
<td>finger</td>
<td>79</td>
<td>TCP info on users.</td>
</tr>
<tr>
<td>http</td>
<td>80</td>
<td>TCP World Wide Web.</td>
</tr>
<tr>
<td>login</td>
<td>513</td>
<td>TCP remote login.</td>
</tr>
<tr>
<td>who</td>
<td>513</td>
<td>UDP different info on users.</td>
</tr>
<tr>
<td>Xserver</td>
<td>6000</td>
<td>TCP X windows (N.B. &gt;1023).</td>
</tr>
</table>
<h2>Port and Service Functions</h2>
<p>Unix provides the following functions to fetch service name from the /etc/services file.</p>
<ul class="list">
<li><p><b>struct servent *getservbyname(char *name, char *proto)</b> &minus; This call takes service name and protocol name, and returns the corresponding port number for that service.</p></li>
<li><p><b>struct servent *getservbyport(int port, char *proto)</b> &minus; This call takes port number and protocol name, and returns the corresponding service name.</p></li>
</ul>
<p>The return value for each function is a pointer to a structure with the following form &minus;</p>
<pre class="prettyprint notranslate">
struct servent {
   char  *s_name;
   char  **s_aliases;
   int   s_port;
   char  *s_proto;
};
</pre> 
<p>Here is the description of the member fields &minus;</p>
<table class="table table-bordered">
<tr>
<th>Attribute</th>
<th>Values</th>
<th>Description</th>
</tr>
<tr>
<td>s_name</td>
<td>http</td>
<td>It is the official name of the service. For example, SMTP, FTP POP3, etc.</td>
</tr>
<tr>
<td>s_aliases</td>
<td>ALIAS</td>
<td>It holds the list of service aliases. Most of the time, it will be set to NULL.</td>
</tr>
<tr>
<td>s_port</td>
<td>80</td>
<td>It will have the associated port number. For example, for HTTP, it will be 80.</td>
</tr>
<tr>
<td>s_proto</td>
<td>
<p>TCP</p>
<p>UDP</p>
</td>
<td>It is set to the protocol used. Internet services are provided using either TCP or UDP.</td>
</tr>
</table>
<h1>Unix Socket - Network Byte Orders</h1>
<p>Unfortunately, not all computers store the bytes that comprise a multibyte value in the same order. Consider a 16-bit internet that is made up of 2 bytes. There are two ways to store this value.</p>
<ul class="list">
<li><p><b>Little Endian</b> &minus; In this scheme, low-order byte is stored on the starting address (A) and high-order byte is stored on the next address (A &plus; 1).</p></li>
<li><p><b>Big Endian</b> &minus; In this scheme, high-order byte is stored on the starting address (A) and low-order byte is stored on the next address (A &plus; 1).</p></li>
</ul>
<p>To allow machines with different byte order conventions communicate with each other, the Internet protocols specify a canonical byte order convention for data transmitted over the network. This is known as Network Byte Order.</p>
<p>While establishing an Internet socket connection, you must make sure that the data in the sin_port and sin_addr members of the sockaddr_in structure are represented in Network Byte Order.</p>
<h2>Byte Ordering Functions</h2>
<p>Routines for converting data between a host's internal representation and Network Byte Order are as follows &minus;</p>
<table class="table table-bordered">
<tr>
<th>Function</th>
<th>Description</th>
</tr>
<tr>
<td>htons()</td>
<td>Host to Network Short</td>
</tr>
<tr>
<td>htonl()</td>
<td>Host to Network Long</td>
</tr>
<tr>
<td>ntohl()</td>
<td>Network to Host Long</td>
</tr>
<tr>
<td>ntohs()</td>
<td>Network to Host Short</td>
</tr>
</table>
<p>Listed below are some more detail about these functions &minus;</p>
<ul class="list">
<li><p><b>unsigned short htons(unsigned short hostshort)</b> &minus; This function converts 16-bit (2-byte) quantities from host byte order to network byte order.</p></li>
<li><p><b>unsigned long htonl(unsigned long hostlong)</b> &minus; This function converts 32-bit (4-byte) quantities from host byte order to network byte order.</p></li>
<li><p><b>unsigned short ntohs(unsigned short netshort)</b> &minus; This function converts 16-bit (2-byte) quantities from network byte order to host byte order.</p></li>
<li><p><b>unsigned long ntohl(unsigned long netlong)</b> &minus; This function converts 32-bit quantities from network byte order to host byte order.</p></li>
</ul>
<p>These functions are macros and result in the insertion of conversion source code into the calling program. On little-endian machines, the code will change the values around to network byte order. On big-endian machines, no code is inserted since none is needed; the functions are defined as null.</p>
<h2>Program to Determine Host Byte Order</h2>
<p>Keep the following code in a file <i>byteorder.c</i> and then compile it and run it over your machine.</p>
<p>In this example, we store the two-byte value 0x0102 in the short integer and then look at the two consecutive bytes, c[0] (the address A) and c[1] (the address A &plus; 1) to determine the byte order.</p>
<pre class="prettyprint notranslate tryit">
#include &lt;stdio.h&gt;

int main(int argc, char **argv) {

   union {
      short s;
      char c[sizeof(short)];
   }un;
	
   un.s = 0x0102;
   
   if (sizeof(short) == 2) {
      if (un.c[0] == 1 &amp;&amp; un.c[1] == 2)
         printf("big-endian\n");
      
      else if (un.c[0] == 2 &amp;&amp; un.c[1] == 1)
         printf("little-endian\n");
      
      else
         printf("unknown\n");
   }
   else {
      printf("sizeof(short) = %d\n", sizeof(short));
   }
	
   exit(0);
}
</pre> 
<p>An output generated by this program on a Pentium machine is as follows &minus;</p>
<pre class="result notranslate">
$&gt; gcc byteorder.c
$&gt; ./a.out
little-endian
$&gt;
</pre>
<h1>Unix Socket - IP Address Functions</h1>
<p>Unix provides various function calls to help you manipulate IP addresses. These functions convert Internet addresses between ASCII strings (what humans prefer to use) and network byte ordered binary values (values that are stored in socket address structures).</p>
<p>The following three function calls are used for IPv4 addressing &minus;</p>
<ul class="list">
<li>int inet_aton(const char *strptr, struct in_addr *addrptr)</li>
<li>in_addr_t inet_addr(const char *strptr)</li>
<li>char *inet_ntoa(struct in_addr inaddr)</li>
</ul>
<h2>int inet_aton(const char *strptr, struct in_addr *addrptr)</h2>
<p>This function call converts the specified string in the Internet standard dot notation to a network address, and stores the address in the structure provided. The converted address will be in Network Byte Order (bytes ordered from left to right). It returns 1 if the string was valid and 0 on error.</p>
<p>Following is the usage example &minus;</p>
<pre class="prettyprint notranslate">
#include &lt;arpa/inet.h&gt;

(...)

   int retval;
   struct in_addr addrptr
   
   memset(&amp;addrptr, '\0', sizeof(addrptr));
   retval = inet_aton("68.178.157.132", &amp;addrptr);

(...)
</pre> 
<h2>in_addr_t inet_addr(const char *strptr)</h2>
<p>This function call converts the specified string in the Internet standard dot notation to an integer value suitable for use as an Internet address. The converted address will be in Network Byte Order (bytes ordered from left to right). It returns a 32-bit binary network byte ordered IPv4 address and INADDR_NONE on error.</p>
<p>Following is the usage example &minus;</p>
<pre class="prettyprint notranslate">
#include &lt;arpa/inet.h&gt;

(...)

   struct sockaddr_in dest;

   memset(&amp;dest, '\0', sizeof(dest));
   dest.sin_addr.s_addr = inet_addr("68.178.157.132");
   
(...)
</pre> 
<h2>char *inet_ntoa(struct in_addr inaddr)</h2>
<p>This function call converts the specified Internet host address to a string in the Internet standard dot notation.</p>
<p>Following is the usage example &minus;</p>
<pre class="prettyprint notranslate">
#include &lt;arpa/inet.h&gt;

(...)

   char *ip;
   
   ip = inet_ntoa(dest.sin_addr);
   
   printf("IP Address is: %s\n",ip);
   
(...)
</pre>
<h1>Unix Socket - Core Functions</h1>
<p>This chapter describes the core socket functions required to write a complete TCP client and server.</p>
<p>The following diagram shows the complete Client and Server interaction &minus;</p>
<img src="/unix_sockets/images/socket_client_server.gif" alt="Socket Client Server" />
<h2>The socket Function</h2>
<p>To perform network I/O, the first thing a process must do is, call the socket function, specifying the type of communication protocol desired and protocol family, etc.</p>
<pre class="prettyprint notranslate">
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int socket (int family, int type, int protocol);
</pre> 
<p>This call returns a socket descriptor that you can use in later system calls or -1 on error.</p>
<h3>Parameters</h3>
<p><b>family</b> &minus; It specifies the protocol family and is one of the constants shown below &minus;</p>
<table class="table table-bordered">
<tr>
<th>Family</th>
<th>Description</th>
</tr>
<tr>
<td>AF_INET</td>
<td>IPv4 protocols</td>
</tr>
<tr>
<td>AF_INET6</td>
<td>IPv6 protocols</td>
</tr>
<tr>
<td>AF_LOCAL</td>
<td>Unix domain protocols</td>
</tr>
<tr>
<td>AF_ROUTE</td>
<td>Routing Sockets</td>
</tr>
<tr>
<td>AF_KEY</td>
<td>Ket socket</td>
</tr>
</table>
<p>This chapter does not cover other protocols except IPv4.</p>
<p><b>type</b> &minus; It specifies the kind of socket you want. It can take one of the following values &minus;</p>
<table class="table table-bordered">
<tr>
<th>Type</th>
<th>Description</th>
</tr>
<tr>
<td>SOCK_STREAM</td>
<td>Stream socket</td>
</tr>
<tr>
<td>SOCK_DGRAM</td>
<td>Datagram socket</td>
</tr>
<tr>
<td>SOCK_SEQPACKET</td>
<td>Sequenced packet socket</td>
</tr>
<tr>
<td>SOCK_RAW</td>
<td>Raw socket</td>
</tr>
</table>
<p><b>protocol</b> &minus; The argument should be set to the specific protocol type given below, or 0 to select the system's default for the given combination of family and type &minus;</p>
<table class="table table-bordered">
<tr>
<th>Protocol</th>
<th>Description</th>
</tr>
<tr>
<td>IPPROTO_TCP</td>
<td>TCP transport protocol</td>
</tr>
<tr>
<td>IPPROTO_UDP</td>
<td>UDP transport protocol</td>
</tr>
<tr>
<td>IPPROTO_SCTP</td>
<td>SCTP transport protocol</td>
</tr>
</table>
<h2>The <i>connect</i> Function</h2>
<p>The <i>connect</i> function is used by a TCP client to establish a connection with a TCP server.</p>
<pre class="prettyprint notranslate">
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);
</pre> 
<p>This call returns 0 if it successfully connects to the server, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>serv_addr</b> &minus; It is a pointer to struct sockaddr that contains destination IP address and port.</p></li>
<li><p><b>addrlen</b> &minus; Set it to sizeof(struct sockaddr).</p></li>
</ul>
<h2>The <i>bind</i> Function</h2>
<p>The <i>bind</i> function assigns a local protocol address to a socket. With the Internet protocols, the protocol address is the combination of either a 32-bit IPv4 address or a 128-bit IPv6 address, along with a 16-bit TCP or UDP port number. This function is called by TCP server only.</p>
<pre class="prettyprint notranslate">
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int bind(int sockfd, struct sockaddr *my_addr,int addrlen);
</pre> 
<p>This call returns 0 if it successfully binds to the address, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>my_addr</b> &minus; It is a pointer to struct sockaddr that contains the local IP address and port.</p></li>
<li><p><b>addrlen</b> &minus; Set it to sizeof(struct sockaddr).</p></li>
</ul>
<p>You can put your IP address and your port automatically</p>
<p>A 0 value for port number means that the system will choose a random port, and <i>INADDR_ANY</i> value for IP address means the server's IP address will be assigned automatically.</p>
<pre class="result notranslate">
server.sin_port = 0;  		     
server.sin_addr.s_addr = INADDR_ANY;
</pre> 
<p><b>NOTE</b> &minus; All ports below 1024 are reserved. You can set a port above 1024 and below 65535 unless they are the ones being used by other programs.</p>
<h2>The <i>listen</i> Function</h2>
<p>The <i>listen</i> function is called only by a TCP server and it performs two actions &minus;</p>
<ul class="list">
<li><p>The listen function converts an unconnected socket into a passive socket, indicating that the kernel should accept incoming connection requests directed to this socket.</p></li>
<li><p>The second argument to this function specifies the maximum number of connections the kernel should queue for this socket.</p></li>
</ul>
<pre class="prettyprint notranslate">
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int listen(int sockfd,int backlog);
</pre> 
<p>This call returns 0 on success, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>backlog</b> &minus; It is the number of allowed connections.</p></li>
</ul>
<h2>The <i>accept</i> Function</h2>
<p>The <i>accept</i> function is called by a TCP server to return the next completed connection from the front of the completed connection queue. The signature of the call is as follows &minus;</p>
<pre class="prettyprint notranslate">
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;

int accept (int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen);
</pre> 
<p>This call returns a non-negative descriptor on success, otherwise it returns -1 on error. The returned descriptor is assumed to be a client socket descriptor and all read-write operations will be done on this descriptor to communicate with the client.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>cliaddr</b> &minus; It is a pointer to struct sockaddr that contains client IP address and port.</p></li>
<li><p><b>addrlen</b> &minus; Set it to sizeof(struct sockaddr).</p></li>
</ul>
<h2>The <i>send</i> Function</h2>
<p>The <i>send</i> function is used to send data over stream sockets or CONNECTED datagram sockets. If you want to send data over UNCONNECTED datagram sockets, you must use sendto() function.</p>
<p>You can use <i>write()</i> system call to send data. Its signature is as follows &minus;</p>
<pre class="result notranslate">
int send(int sockfd, const void *msg, int len, int flags);
</pre> 
<p>This call returns the number of bytes sent out, otherwise it will return -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>msg</b> &minus; It is a pointer to the data you want to send.</p></li>
<li><p><b>len</b> &minus; It is the length of the data you want to send (in bytes).</p></li>
<li><p><b>flags</b> &minus; It is set to 0.</p></li>
</ul>
<h2>The <i>recv</i> Function</h2>
<p>The <i>recv</i> function is used to receive data over stream sockets or CONNECTED datagram sockets. If you want to receive data over UNCONNECTED datagram sockets you must use recvfrom().</p>
<p>You can use <i>read()</i> system call to read the data. This call is explained in helper functions chapter.</p>
<pre class="result notranslate">
int recv(int sockfd, void *buf, int len, unsigned int flags);
</pre> 
<p>This call returns the number of bytes read into the buffer, otherwise it will return -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>buf</b> &minus; It is the buffer to read the information into.</p></li>
<li><p><b>len</b> &minus; It is the maximum length of the buffer.</p></li>
<li><p><b>flags</b> &minus; It is set to 0.</p></li>
</ul>
<h2>The <i>sendto</i> Function</h2>
<p>The <i>sendto</i> function is used to send data over UNCONNECTED datagram sockets. Its signature is as follows &minus;</p>
<pre class="result notranslate">
int sendto(int sockfd, const void *msg, int len, unsigned int flags, const struct sockaddr *to, int tolen);
</pre> 
<p>This call returns the number of bytes sent, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>msg</b> &minus; It is a pointer to the data you want to send.</p></li>
<li><p><b>len</b> &minus; It is the length of the data you want to send (in bytes).</p></li>
<li><p><b>flags</b> &minus; It is set to 0.</p></li>
<li><p><b>to</b> &minus; It is a pointer to struct sockaddr for the host where data has to be sent.</p></li>
<li><p><b>tolen</b> &minus; It is set it to sizeof(struct sockaddr).</p></li>
</ul>
<h2>The <i>recvfrom</i> Function</h2>
<p>The <i>recvfrom</i> function is used to receive data from UNCONNECTED datagram sockets.</p>
<pre class="result notranslate">
int recvfrom(int sockfd, void *buf, int len, unsigned int flags struct sockaddr *from, int *fromlen);
</pre> 
<p>This call returns the number of bytes read into the buffer, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>buf</b> &minus; It is the buffer to read the information into.</p></li>
<li><p><b>len</b> &minus; It is the maximum length of the buffer.</p></li>
<li><p><b>flags</b> &minus; It is set to 0.</p></li>
<li><p><b>from</b> &minus; It is a pointer to struct sockaddr for the host where data has to be read.</p></li>
<li><p><b>fromlen</b> &minus; It is set it to sizeof(struct sockaddr).</p></li>
</ul>
<h2>The <i>close</i> Function</h2>
<p>The <i>close</i> function is used to close the communication between the client and the server. Its syntax is as follows &minus;</p>
<pre class="result notranslate">
int close( int sockfd );
</pre> 
<p>This call returns 0 on success, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
</ul>
<h2>The <i>shutdown</i> Function</h2>
<p>The <i>shutdown</i> function is used to gracefully close the communication between the client and the server. This function gives more control in comparison to the <i>close</i> function. Given below is the syntax of <i>shutdown</i> &minus;</p>
<pre class="result notranslate">
int shutdown(int sockfd, int how);
</pre> 
<p>This call returns 0 on success, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>sockfd</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>how</b> &minus; Put one of the numbers &minus;</p>
<ul class="list">
<li><p><b>0</b> &minus; indicates that receiving is not allowed,</p></li>
<li><p><b>1</b> &minus; indicates that sending is not allowed, and</p></li>
<li><p><b>2</b> &minus; indicates that both sending and receiving are not allowed. When <i>how</i> is set to 2, it's the same thing as close().</p></li>
</ul>
</li>
</ul>
<h2>The <i>select</i> Function</h2>
<p>The <i>select</i> function indicates which of the specified file descriptors is ready for reading, ready for writing, or has an error condition pending.</p>
<p>When an application calls <i>recv or recvfrom</i>, it is blocked until data arrives for that socket. An application could be doing other useful processing while the incoming data stream is empty. Another situation is when an application receives data from multiple sockets.</p>
<p>Calling <i>recv or recvfrom</i> on a socket that has no data in its input queue prevents immediate reception of data from other sockets. The select function call solves this problem by allowing the program to poll all the socket handles to see if they are available for non-blocking reading and writing operations.</p>
<p>Given below is the syntax of <i>select</i> &minus;</p>
<pre class="result notranslate">
 int select(int  nfds, fd_set  *readfds, fd_set  *writefds, fd_set *errorfds, struct timeval *timeout);
</pre> 
<p>This call returns 0 on success, otherwise it returns -1 on error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>nfds</b> &minus; It specifies the range of file descriptors to be tested. The select() function tests file descriptors in the range of 0 to nfds-1</p></li>
<li><p><b>readfds</b> &minus; It points to an object of type <i>fd_set</i> that on input, specifies the file descriptors to be checked for being ready to read, and on output, indicates which file descriptors are ready to read. It can be NULL to indicate an empty set.</p></li>
<li><p><b>writefds</b> &minus; It points to an object of type <i>fd_set</i> that on input, specifies the file descriptors to be checked for being ready to write, and on output, indicates which file descriptors are ready to write. It can be NULL to indicate an empty set.</p></li>
<li><p><b>exceptfds</b> &minus; It points to an object of type <i>fd_set</i> that on input, specifies the file descriptors to be checked for error conditions pending, and  on output indicates, which file descriptors have error conditions pending. It can be NULL to indicate an empty set.</p></li>
<li><p><b>timeout</b> &minus; It points to a timeval struct that specifies how long the select call should poll the descriptors for an available I/O operation. If the timeout value is 0, then select will return immediately. If the timeout argument is NULL, then select will block until at least one file/socket handle is ready for an available I/O operation. Otherwise <i>select</i> will return after the amount of time in the timeout has elapsed OR when at least one file/socket descriptor is ready for an I/O operation.</p></li>
</ul>
<p>The return value from select is the number of handles specified in the file descriptor sets that are ready for I/O. If the time limit specified by the timeout field is reached, select return 0. The following macros exist for manipulating a file descriptor set &minus;</p>
<ul class="list">
<li><p><b>FD_CLR(fd, &amp;fdset)</b> &minus; Clears the bit for the file descriptor fd in the file descriptor set <i>fdset.</i></p></li>
<li><p><b>FD_ISSET(fd, &amp;fdset)</b> &minus; Returns a non-zero value if the bit for the file descriptor <i>fd</i> is set in the file descriptor set pointed to by <i>fdset</i>, and 0 otherwise.</p></li>
<li><p><b>FD_SET(fd, &amp;fdset)</b> &minus; Sets the bit for the file descriptor fd in the file descriptor set fdset.</p></li>
<li><p><b>FD_ZERO(&amp;fdset)</b> &minus; Initializes the file descriptor set fdset to have zero bits for all file descriptors.</p></li>
</ul>
<p>The behavior of these macros is undefined if the fd argument is less than 0 or greater than or equal to FD_SETSIZE.</p>
<h2>Example</h2>
<pre class="prettyprint notranslate">
fd_set fds;

struct timeval tv;

/* do socket initialization etc.
tv.tv_sec = 1;
tv.tv_usec = 500000;

/* tv now represents 1.5 seconds */
FD_ZERO(&amp;fds);

/* adds sock to the file descriptor set */
FD_SET(sock, &amp;fds); 

/* wait 1.5 seconds for any data to be read from any single socket */
select(sock+1, &amp;fds, NULL, NULL, &amp;tv);

if (FD_ISSET(sock, &amp;fds)) {
   recvfrom(s, buffer, buffer_len, 0, &amp;sa, &amp;sa_len);
   /* do something */
}
else {
   /* do something else */
}
</pre>
<h1>Unix Socket - Helper Functions</h1>
<p>This chapter describes all the helper functions, which are used while doing socket programming. Other helper functions are described in the chapters &minus;<b>Ports and Services</b>, and Network <b>Byte Orders</b>.</p>
<h2>The <i>write</i> Function</h2>
<p>The <i>write</i> function attempts to write nbyte bytes from the buffer pointed by <i>buf</i> to the file associated with the open file descriptor, <i>fildes</i>.</p>
<p>You can also use <i>send()</i> function to send data to another process.</p>
<pre class="prettyprint notranslate">
#include &lt;unistd.h&gt;

int write(int fildes, const void *buf, int nbyte);
</pre> 
<p>Upon successful completion, write() returns the number of  bytes actually written to the file associated with fildes. This number is never greater than nbyte. Otherwise, -1  is returned.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>fildes</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>buf</b> &minus; It is a pointer to the data you want to send.</p></li>
<li><p><b>nbyte</b> &minus; It is the number of bytes to be written. If nbyte is 0, write() will return 0 and have no other results if the file is a regular file; otherwise, the results are unspecified.</p></li>
</ul>
<h2>The <i>read</i> Function</h2>
<p>The <i>read</i> function attempts to read nbyte bytes from the file associated with the buffer, fildes, into the buffer pointed to by buf.</p>
<p>You can also use <i>recv()</i> function to read data to another process.</p>
<pre class="prettyprint notranslate">
#include &lt;unistd.h&gt;

int read(int fildes, const void *buf, int nbyte);
</pre> 
<p>Upon successful completion, write() returns the number of bytes actually written to the file associated with fildes. This number is never greater than nbyte. Otherwise, -1  is returned.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>fildes</b> &minus; It is a socket descriptor returned by the socket function.</p></li>
<li><p><b>buf</b> &minus; It is the buffer to read the information into.</p></li>
<li><p><b>nbyte</b> &minus; It is the number of bytes to read.</p></li>
</ul>
<h2>The <i>fork</i> Function</h2>
<p>The <i>fork</i> function creates a new process. The new process called the child process will be an exact copy of the calling process (parent process). The child process inherits many attributes from the parent process.</p>
<pre class="prettyprint notranslate">
#include &lt;sys/types.h&gt;
#include &lt;unistd.h&gt;

int fork(void);
</pre> 
<p>Upon successful completion, fork() returns 0 to the child  process and the process ID of the child process to the parent process. Otherwise -1  is returned to the parent process, no child process is created and errno is set to indicate the error.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>void</b> &minus; It means no parameter is required.</p></li>
</ul>
<h2>The <i>bzero</i> Function</h2>
<p>The <i>bzero</i> function places <i>nbyte</i> null bytes in the string <i>s</i>. This function is used to set all the socket structures with null values.</p>
<pre class="result notranslate">
void bzero(void *s, int nbyte);
</pre> 
<p>This function does not return anything.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>s</b> &minus; It specifies the string which has to be filled with null bytes. This will be a point to socket structure variable.</p></li>
<li><p><b>nbyte</b> &minus; It specifies the number of bytes to be filled with null values. This will be the size of the socket structure.</p></li>
</ul>
<h2>The <i>bcmp</i> Function</h2>
<p>The <i>bcmp</i> function compares byte string s1 against byte string s2. Both strings are assumed to be nbyte bytes long.</p>
<pre class="prettyprint notranslate">
int bcmp(const void *s1, const void *s2, int nbyte);
</pre> 
<p>This function returns 0 if both strings are identical, 1 otherwise. The  bcmp() function always returns 0 when nbyte is 0.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>s1</b> &minus; It specifies the first string to be compared.</p></li>
<li><p><b>s2</b> &minus; It specifies the second string to be compared.</p></li>
<li><p><b>nbyte</b> &minus; It specifies the number of bytes to be compared.</p></li>
</ul>
<h2>The <i>bcopy</i> Function</h2>
<p>The <i>bcopy</i> function copies nbyte bytes from string s1 to the string s2. Overlapping strings are handled correctly.</p>
<pre class="prettyprint notranslate">
void bcopy(const void *s1, void *s2, int nbyte);
</pre> 
<p>This function does not return anything.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>s1</b> &minus; It specifies the source string.</p></li>
<li><p><b>s2v</b> &minus; It specifies the destination string.</p></li>
<li><p><b>nbyte</b> &minus; It specifies the number of bytes to be copied.</p></li>
</ul>
<h2>The <i>memset</i> Function</h2>
<p>The <i>memset</i> function is also used to set structure variables in the same way as <b>bzero</b>. Take a look at its syntax, given below.</p>
<pre class="result notranslate">
void *memset(void *s, int c, int nbyte);
</pre> 
<p>This function returns a pointer to void; in fact, a pointer to the set memory and you need to caste it accordingly.</p>
<h3>Parameters</h3>
<ul class="list">
<li><p><b>s</b> &minus; It specifies the source to be set.</p></li>
<li><p><b>c</b> &minus; It specifies the character to set on nbyte places.</p></li>
<li><p><b>nbyte</b> &minus; It specifies the number of bytes to be set.</p></li>
</ul>
<h1>Unix Socket - Server Examples</h1>
<p>To make a process a TCP server, you need to follow the steps given below &minus;</p>
<ul class="list">
<li><p>Create a socket with the <i>socket()</i> system call.</p></li>
<li><p>Bind the socket to an address using the <i>bind()</i> system call. For a server socket on the Internet, an address consists of a port number on the host machine.</p></li>
<li><p>Listen for connections with the <i>listen()</i> system call.</p></li>
<li><p>Accept a connection with the <i>accept()</i> system call. This call typically blocks until a client connects with the server.</p></li>
<li><p>Send and receive data using the <i>read()</i> and <i>write()</i> system calls.</p></li>
</ul>
<p>Now let us put these steps in the form of source code. Put this code into the file <i>server.c</i> and compile it with <i>gcc</i> compiler.</p>
<pre class="prettyprint notranslate">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;netdb.h&gt;
#include &lt;netinet/in.h&gt;

#include &lt;string.h&gt;

int main( int argc, char *argv[] ) {
   int sockfd, newsockfd, portno, clilen;
   char buffer[256];
   struct sockaddr_in serv_addr, cli_addr;
   int  n;
   
   /* First call to socket() function */
   sockfd = socket(AF_INET, SOCK_STREAM, 0);
   
   if (sockfd &lt; 0) {
      perror("ERROR opening socket");
      exit(1);
   }
   
   /* Initialize socket structure */
   bzero((char *) &amp;serv_addr, sizeof(serv_addr));
   portno = 5001;
   
   serv_addr.sin_family = AF_INET;
   serv_addr.sin_addr.s_addr = INADDR_ANY;
   serv_addr.sin_port = htons(portno);
   
   /* Now bind the host address using bind() call.*/
   if (bind(sockfd, (struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
      perror("ERROR on binding");
      exit(1);
   }
      
   /* Now start listening for the clients, here process will
      * go in sleep mode and will wait for the incoming connection
   */
   
   listen(sockfd,5);
   clilen = sizeof(cli_addr);
   
   /* Accept actual connection from the client */
   newsockfd = accept(sockfd, (struct sockaddr *)&amp;cli_addr, &amp;clilen);
	
   if (newsockfd &lt; 0) {
      perror("ERROR on accept");
      exit(1);
   }
   
   /* If connection is established then start communicating */
   bzero(buffer,256);
   n = read( newsockfd,buffer,255 );
   
   if (n &lt; 0) {
      perror("ERROR reading from socket");
      exit(1);
   }
   
   printf("Here is the message: %s\n",buffer);
   
   /* Write a response to the client */
   n = write(newsockfd,"I got your message",18);
   
   if (n &lt; 0) {
      perror("ERROR writing to socket");
      exit(1);
   }
      
   return 0;
}
</pre> 
<h2>Handle Multiple Connections</h2>
<p>To allow the server to handle multiple simultaneous connections, we make the following changes in the above code &minus;</p>
<ul class="list">
<li><p>Put the <i>accept</i> statement and the following code in an infinite loop.</p></li>
<li><p>After a connection is established, call <i>fork()</i> to create a new process.</p></li>
<li><p>The child process will close <i>sockfd</i> and call <i>doprocessing</i> function, passing the new socket file descriptor as an argument. When the two processes have completed their conversation, as indicated by <i>doprocessing()</i> returning, this process simply exits.</p></li>
<li><p>The parent process closes <i>newsockfd</i>. As all of this code is in an infinite loop, it will return to the accept statement to wait for the next connection.</p></li>
</ul>
<pre class="prettyprint notranslate">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;netdb.h&gt;
#include &lt;netinet/in.h&gt;

#include &lt;string.h&gt;

void doprocessing (int sock);

int main( int argc, char *argv[] ) {
   int sockfd, newsockfd, portno, clilen;
   char buffer[256];
   struct sockaddr_in serv_addr, cli_addr;
   int n, pid;
   
   /* First call to socket() function */
   sockfd = socket(AF_INET, SOCK_STREAM, 0);
   
   if (sockfd &lt; 0) {
      perror("ERROR opening socket");
      exit(1);
   }
   
   /* Initialize socket structure */
   bzero((char *) &amp;serv_addr, sizeof(serv_addr));
   portno = 5001;
   
   serv_addr.sin_family = AF_INET;
   serv_addr.sin_addr.s_addr = INADDR_ANY;
   serv_addr.sin_port = htons(portno);
   
   /* Now bind the host address using bind() call.*/
   if (bind(sockfd, (struct sockaddr *) &amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
      perror("ERROR on binding");
      exit(1);
   }
   
   /* Now start listening for the clients, here
      * process will go in sleep mode and will wait
      * for the incoming connection
   */
   
   listen(sockfd,5);
   clilen = sizeof(cli_addr);
   
   while (1) {
      newsockfd = accept(sockfd, (struct sockaddr *) &amp;cli_addr, &amp;clilen);
		
      if (newsockfd &lt; 0) {
         perror("ERROR on accept");
         exit(1);
      }
      
      /* Create child process */
      pid = fork();
		
      if (pid &lt; 0) {
         perror("ERROR on fork");
         exit(1);
      }
      
      if (pid == 0) {
         /* This is the client process */
         close(sockfd);
         doprocessing(newsockfd);
         exit(0);
      }
      else {
         close(newsockfd);
      }
		
   } /* end of while */
}
</pre> 
<p>The following code seqment shows a simple implementation of <i>doprocessing</i> function.</p>
<pre class="prettyprint notranslate">
void doprocessing (int sock) {
   int n;
   char buffer[256];
   bzero(buffer,256);
   n = read(sock,buffer,255);
   
   if (n &lt; 0) {
      perror("ERROR reading from socket");
      exit(1);
   }
   
   printf("Here is the message: %s\n",buffer);
   n = write(sock,"I got your message",18);
   
   if (n &lt; 0) {
      perror("ERROR writing to socket");
      exit(1);
   }
	
}
</pre>
<h1>Unix Socket - Client Examples</h1>
<p>To make a process a TCP client, you need to follow the steps given below &minus
;</p>
<ul class="list">
<li><p>Create a socket with the <i>socket()</i> system call.</p></li>
<li><p>Connect the socket to the address of the server using the <i>connect()</i> system call.</p></li>
<li><p>Send and receive data. There are a number of ways to do this, but the simplest way is to use the <i>read()</i> and <i>write()</i> system calls.</p></li>
</ul>
<p>Now let us put these steps in the form of source code. Put this code into the file <b>client.c</b> and compile it with <b>gcc</b> compiler.</p>
<p>Run this program and pass <i>hostname</i> and <i>port number</i> of the server, to connect to the server, which you already must have run in another Unix window.</p>
<pre class="prettyprint notranslate">
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;netdb.h&gt;
#include &lt;netinet/in.h&gt;

#include &lt;string.h&gt;

int main(int argc, char *argv[]) {
   int sockfd, portno, n;
   struct sockaddr_in serv_addr;
   struct hostent *server;
   
   char buffer[256];
   
   if (argc &lt; 3) {
      fprintf(stderr,"usage %s hostname port\n", argv[0]);
      exit(0);
   }
	
   portno = atoi(argv[2]);
   
   /* Create a socket point */
   sockfd = socket(AF_INET, SOCK_STREAM, 0);
   
   if (sockfd &lt; 0) {
      perror("ERROR opening socket");
      exit(1);
   }
	
   server = gethostbyname(argv[1]);
   
   if (server == NULL) {
      fprintf(stderr,"ERROR, no such host\n");
      exit(0);
   }
   
   bzero((char *) &amp;serv_addr, sizeof(serv_addr));
   serv_addr.sin_family = AF_INET;
   bcopy((char *)server-&gt;h_addr, (char *)&amp;serv_addr.sin_addr.s_addr, server-&gt;h_length);
   serv_addr.sin_port = htons(portno);
   
   /* Now connect to the server */
   if (connect(sockfd, (struct sockaddr*)&amp;serv_addr, sizeof(serv_addr)) &lt; 0) {
      perror("ERROR connecting");
      exit(1);
   }
   
   /* Now ask for a message from the user, this message
      * will be read by server
   */
	
   printf("Please enter the message: ");
   bzero(buffer,256);
   fgets(buffer,255,stdin);
   
   /* Send message to the server */
   n = write(sockfd, buffer, strlen(buffer));
   
   if (n &lt; 0) {
      perror("ERROR writing to socket");
      exit(1);
   }
   
   /* Now read server response */
   bzero(buffer,256);
   n = read(sockfd, buffer, 255);
   
   if (n &lt; 0) {
      perror("ERROR reading from socket");
      exit(1);
   }
	
   printf("%s\n",buffer);
   return 0;
}
</pre>
<h1>Unix Socket - Summary</h1>
<p>Here is a list of all the functions related to socket programming.</p>
<h2>Port and Service Functions</h2>
<p>Unix provides the following functions to fetch service name from the /etc/services file.</p>
<ul class="list">
<li><p><b>struct servent *getservbyname(char *name, char *proto)</b> &minus; This call takes a service name and a protocol name and returns the corresponding port number for that service.</p></li>
<li><p><b>struct servent *getservbyport(int port, char *proto)</b> &minus; This call takes a port number and a protocol name and returns the corresponding service name.</p></li>
</ul>
<h2>Byte Ordering Functions</h2>
<ul class="list">
<li><p><b>unsigned short htons (unsigned short hostshort)</b> &minus; This function converts 16-bit (2-byte) quantities from host byte order to network byte order.</p></li>
<li><p><b>unsigned long htonl (unsigned long hostlong)</b> &minus; This function converts 32-bit (4-byte) quantities from host byte order to network byte order.</p></li>
<li><p><b>unsigned short ntohs (unsigned short netshort)</b> &minus; This function converts 16-bit (2-byte) quantities from network byte order to host byte order.</p></li>
<li><p><b>unsigned long ntohl (unsigned long netlong)</b> &minus; This function converts 32-bit quantities from network byte order to host byte order.</p></li>
</ul>
<h2>IP Address Functions</h2>
<ul class="list">
<li><p><b>int inet_aton (const char *strptr, struct in_addr *addrptr)</b> &minus; This function call converts the specified string, in the Internet standard dot notation, to a network address, and stores the address in the structure provided. The converted address will be in Network Byte Order (bytes ordered from left to right). It returns 1 if the string is valid and 0 on error.</p></li>
<li><p><b>in_addr_t inet_addr (const char *strptr)</b> &minus; This function call converts the specified string, in the Internet standard dot notation, to an integer value suitable for use as an Internet address. The converted address will be in Network Byte Order (bytes ordered from left to right). It returns a 32-bit binary network byte ordered IPv4 address and INADDR_NONE on error.</p></li>
<li><p><b>char *inet_ntoa (struct in_addr inaddr)</b> &minus; This function call converts the specified Internet host address to a string in the Internet standard dot notation.</p></li>
</ul>
<h2>Socket Core Functions</h2>
<ul class="list">
<li><p><b>int socket (int family, int type, int protocol)</b> &minus; This call returns a socket descriptor that you can use in later system calls or it gives you -1 on error.</p></li>
<li><p><b>int connect (int sockfd, struct sockaddr *serv_addr, int addrlen)</b> &minus; The connect function is used by a TCP client to establish a connection with a TCP server. This call returns 0 if it successfully connects to the server, otherwise it returns -1.</p></li>
<li><p><b>int bind(int sockfd, struct sockaddr *my_addr,int addrlen)</b> &minus; The bind function assigns a local protocol address to a socket. This call returns 0 if it successfully binds to the address, otherwise it returns -1.</p></li>
<li><p><b>int listen(int sockfd, int backlog)</b> &minus; The listen function is called only by a TCP server to listen for the client request. This call returns 0 on success, otherwise it returns -1.</p></li>
<li><p><b>int accept (int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen)</b> &minus; The accept function is called by a TCP server to accept client requests and to establish actual connection. This call returns a non-negative descriptor on success, otherwise it returns -1.</p></li>
<li><p><b>int send(int sockfd, const void *msg, int len, int flags)</b> &minus; The send function is used to send data over stream sockets or CONNECTED datagram sockets. This call returns the number of bytes sent out, otherwise it returns -1.</p></li>
<li><p><b>int recv (int sockfd, void *buf, int len, unsigned int flags)</b> &minus; The recv function is used to receive data over stream sockets or CONNECTED datagram sockets. This call returns the number of bytes read into the buffer, otherwise it returns -1 on error.</p></li>
<li><p><b>int sendto (int sockfd, const void *msg, int len, unsigned int flags, const struct sockaddr *to, int tolen)</b> &minus; The sendto function is used to send data over UNCONNECTED datagram sockets. This call returns the number of bytes sent, otherwise it returns -1 on error.</p></li>
<li><p><b>int recvfrom (int sockfd, void *buf, int len, unsigned int flags struct sockaddr *from, int *fromlen)</b> &minus; The recvfrom function is used to receive data from UNCONNECTED datagram sockets. This call returns the number of bytes read into the buffer, otherwise it returns -1 on error.</p></li>
<li><p><b>int close (int sockfd)</b> &minus; The close function is used to close a communication between the client and the server. This call returns 0 on success, otherwise it returns -1.</p></li>
<li><p><b>int shutdown (int sockfd, int how)</b> &minus; The shutdown function is used to gracefully close a communication between the client and the server. This function gives more control in comparison to close function. It returns 0 on success, -1 otherwise.</p></li>
<li><p><b>int select (int nfds, fd_set *readfds, fd_set *writefds, fd_set *errorfds, struct timeval *timeout)</b> &minus; This function is used to read or write multiple sockets.</p></li>
</ul>
<h2>Socket Helper Functions</h2>
<ul class="list">
<li><p><b>int write (int fildes, const void *buf, int nbyte)</b> &minus; The write function attempts to write nbyte bytes from the buffer pointed to by buf to the file associated with the open file descriptor, fildes. Upon successful completion, write() returns the number of bytes actually written to the file associated with fildes. This number is never greater than nbyte. Otherwise, -1 is returned.</p></li>
<li><p><b>int read (int fildes, const void *buf, int nbyte)</b> &minus; The read function attempts to read nbyte bytes from the file associated with the open file descriptor, fildes, into the buffer pointed to by buf. Upon successful completion, write() returns the number of bytes actually written to the file associated with fildes. This number is never greater than nbyte. Otherwise, -1 is returned.</p></li>
<li><p><b>int fork (void)</b> &minus; The fork function creates a new process. The new process, called the child process, will be an exact copy of the calling process (parent process).</p></li>
<li><p><b>void bzero (void *s, int nbyte)</b> &minus; The bzero function places nbyte null bytes in the string s. This function will be used to set all the socket structures with null values.</p></li>
<li><p><b>int bcmp (const void *s1, const void *s2, int nbyte)</b> &minus; The bcmp function compares the byte string s1 against the byte string s2. Both the strings are assumed to be nbyte bytes long.</p></li>
<li><p><b>void bcopy (const void *s1, void *s2, int nbyte)</b> &minus; The bcopy function copies nbyte bytes from the string s1 to the string s2. Overlapping strings are handled correctly.</p></li>
<li><p><b>void *memset(void *s, int c, int nbyte)</b> &minus; The memset function is also used to set structure variables in the same way as bzero.</p></li>
</ul>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/unix_sockets/socket_summary.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/unix_sockets/socket_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
