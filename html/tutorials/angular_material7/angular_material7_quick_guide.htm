<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Angular Material 7 - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Angular Material 7 - Quick Guide - Angular Material 7 is a UI component library for Angular developers. Angular Material's reusable UI components help in constructing attractive, consistent, and "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/angular_material7/angular_material7_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#af2b2d;
}
a.demo {
    background:#af2b2d;
}
li.heading {
    background:#af2b2d;
}
.course-box{background:#af2b2d}
.home-intro-sub p{color:#af2b2d}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/angular_material7/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/angular_material7/images/angular-material-7-mini-logo.jpg" alt="Angular Material 7 Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Angular Material 7 Tutorial</li>
<li><a href="/angular_material7/index.htm">Angular Material 7 - Home</a></li>
<li><a href="/angular_material7/angular_material7_overview.htm">Angular Material 7 - Overview</a></li>
<li><a href="/angular_material7/angular_material7_environment_setup.htm">Environment Setup</a></li>
<li class="heading">Form Controls</li>
<li><a href="/angular_material7/angular_material7_autocomplete.htm">Angular Material 7 - Auto-Complete</a></li>
<li><a href="/angular_material7/angular_material7_checkbox.htm">Angular Material 7 - Check Box</a></li>
<li><a href="/angular_material7/angular_material7_date_picker.htm">Angular Material 7 - Date Picker</a></li>
<li><a href="/angular_material7/angular_material7_form_field.htm">Angular Material 7 - Form Field</a></li>
<li><a href="/angular_material7/angular_material7_input.htm">Angular Material 7 - Input</a></li>
<li><a href="/angular_material7/angular_material7_radio_button.htm">Angular Material 7 - Radio Button</a></li>
<li><a href="/angular_material7/angular_material7_select.htm">Angular Material 7 - Select</a></li>
<li><a href="/angular_material7/angular_material7_slider.htm">Angular Material 7 - Slider</a></li>
<li><a href="/angular_material7/angular_material7_slider_toggle.htm">Angular Material 7 - Toggle Slider</a></li>
<li class="heading">Navigation</li>
<li><a href="/angular_material7/angular_material7_menu.htm">Angular Material 7 - Menu</a></li>
<li><a href="/angular_material7/angular_material7_sidenav.htm">Angular Material 7 - Side Nav</a></li>
<li><a href="/angular_material7/angular_material7_toolbar.htm">Angular Material 7 - Tool Bar</a></li>
<li class="heading">Layout</li>
<li><a href="/angular_material7/angular_material7_card.htm">Angular Material 7 - Card</a></li>
<li><a href="/angular_material7/angular_material7_divider.htm">Angular Material 7 - Divider</a></li>
<li><a href="/angular_material7/angular_material7_expansion_panel.htm">Angular Material 7 - Expansion Panel</a></li>
<li><a href="/angular_material7/angular_material7_grid_list.htm">Angular Material 7 - Grid List</a></li>
<li><a href="/angular_material7/angular_material7_list.htm">Angular Material 7 - List</a></li>
<li><a href="/angular_material7/angular_material7_stepper.htm">Angular Material 7 - Stepper</a></li>
<li><a href="/angular_material7/angular_material7_tabs.htm">Angular Material 7 - Tabs</a></li>
<li><a href="/angular_material7/angular_material7_tree.htm">Angular Material 7 - Tree</a></li>
<li class="heading">Buttons &amp; Indicators</li>
<li><a href="/angular_material7/angular_material7_button.htm">Angular Material 7 - Button</a></li>
<li><a href="/angular_material7/angular_material7_button_toggle.htm">Angular Material 7 - Button Toggle</a></li>
<li><a href="/angular_material7/angular_material7_badge.htm">Angular Material 7 - Badge</a></li>
<li><a href="/angular_material7/angular_material7_chips.htm">Angular Material 7 - Chips</a></li>
<li><a href="/angular_material7/angular_material7_icons.htm">Angular Material 7 - Icons</a></li>
<li><a href="/angular_material7/angular_material7_progress_spinner.htm">Angular Material 7 - Progress Spinner</a></li>
<li><a href="/angular_material7/angular_material7_progress_bar.htm">Angular Material 7 - Progress Bar</a></li>
<li><a href="/angular_material7/angular_material7_ripples.htm">Angular Material 7 - Ripples</a></li>
<li class="heading">Popups &amp; Modals</li>
<li><a href="/angular_material7/angular_material7_snackbar.htm">Angular Material 7 - SnackBar</a></li>
<li><a href="/angular_material7/angular_material7_tooltip.htm">Angular Material 7 - Tooltip</a></li>
<li class="heading">Data table</li>
<li><a href="/angular_material7/angular_material7_paginator.htm">Angular Material 7 - Paginator</a></li>
<li><a href="/angular_material7/angular_material7_sort_header.htm">Angular Material 7 - Sort Header</a></li>
<li><a href="/angular_material7/angular_material7_table.htm">Angular Material 7 - Table</a></li>
<li class="heading">Angular Material 7 Resources</li>
<li><a href="/angular_material7/angular_material7_quick_guide.htm">Angular Material 7 - Quick Guide</a></li>
<li><a href="/angular_material7/angular_material7_useful_resources.htm">Angular Material 7 - Resources</a></li>
<li><a href="/angular_material7/angular_material7_discussion.htm">Angular Material 7 - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Angular Material 7 - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/angular_material7/angular_material7_table.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/angular_material7/angular_material7_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Angular Material 7 - Overview</h1>
<p>Angular Material 7 is a UI component library for Angular developers. Angular Material's reusable UI components help in constructing attractive, consistent, and functional web pages and web applications while adhering to modern web design principles like browser portability, device independence, and graceful degradation.</p>
<p>Following are a few salient features of Angular Material &minus;</p>
<ul class="list">
<li><p>In-built responsive designing.</p></li>
<li><p>Standard CSS with minimal footprint.</p></li>
<li><p>Includes new versions of common user interface controls such as buttons, check boxes, and text fields which are adapted to follow Material Design concepts.</p></li>
<li><p>Includes enhanced and specialized features like cards, toolbar, speed dial, side nav, swipe, and so on.</p></li>
<li><p>Cross-browser, and can be used to create reusable web components.</p></li>
</ul>
<h2>Responsive Design</h2>
<ul class="list">
<li><p>Angular Material has in-built responsive designing so that the website created using Angular Material will redesign itself as per the device size.</p></li>
<li><p>Angular Material classes are created in such a way that the website can fit any screen size.</p></li>
<li><p>The websites created using Angular Material are fully compatible with PC, tablets, and mobile devices.</p></li>
</ul>
<h2>Extensible</h2>
<ul class="list">
<li><p>Angular Material is by design very minimal and flat.</p></li>
<li><p>It is designed considering the fact that it is much easier to add new CSS rules than to overwrite existing CSS rules.</p></li>
<li><p>It supports shadows and bold colors.</p></li>
<li><p>The colors and shades remain uniform across various platforms and devices.</p></li>
</ul>
<p>And most important of all, Angular Material is absolutely free to use.</p>
<h1>Angular Material 7 - Environment Setup</h1>
<p>This tutorial will guide you on how to prepare a development environment to start your work with Angular Framework and Angular Material. In this chapter, we will discuss the Environment Setup required for Angular 6. To install Angular 6, we require the following &minus;</p>
<ul class="list">
<li>Nodejs</li>
<li>Npm</li>
<li>Angular CLI</li>
<li>IDE for writing your code</li>
</ul>
<p>Nodejs has to be greater than 8.11 and npm has to be greater than 5.6.</p>
<h3>Nodejs</h3>
<p>To check if nodejs is installed on your system, type <b>node -v</b> in the terminal. This will help you see the version of nodejs currently installed on your system.</p>
<pre class="result notranslate">
C:\&gt;node -v
v8.11.3
</pre>
<p>If it does not print anything, install nodejs on your system. To install nodejs, go the homepage <a href="https://nodejs.org/en/download/" rel="nofollow" target="_blank">https://nodejs.org/en/download/</a> of nodejs and install the package based on your OS.</p>
<p>The homepage of nodejs will look like the following &minus;</p>
<img src="/angular6/images/nodejs_homepage.jpg" alt="NodeJS Homepage"/>
<p>Based on your OS, install the required package. Once nodejs is installed, npm will also get installed along with it. To check if npm is installed or not, type npm -v in the terminal. It should display the version of the npm.</p>
<pre class="result notranslate">
C:\&gt;npm -v
5.6.0
</pre>
<p>Angular 6 installations are very simple with the help of angular CLI. Visit the homepage <a href="https://cli.angular.io/" rel="nofollow" target="_blank">https://cli.angular.io/</a> of angular to get the reference of the command.</p>
<img src="/angular4/images/angular_cli.jpg" alt="Angular CLI"/>
<p>Type <b>npm install -g @angular/cli</b>, to install angular cli on your system.</p>
<img src="/angular4/images/install_angular_cli.jpg" alt="Install Angular CLI"/>
<p>You will get the above installation in your terminal, once Angular CLI is installed. You can use any IDE of your choice, i.e., WebStorm, Atom, Visual Studio Code, etc.</p>
<h2>Install Angular Material </h2>
<p>Run the following command to install Angular Material module and its related components in the project created.</p>
<pre class="result" >
materialApp>npm install --save @angular/material @angular/cdk @angular/animations hammerjs

+ @angular/animations@6.1.10
+ @angular/cdk@7.0.3
+ @angular/material@7.0.3
+ hammerjs@2.0.8
added 4 packages and updated 1 package in 39.699s
</pre>
<p>Add the following entry in app.module.ts file</p>
<pre class="prettyprint notranslate">
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {FormsModule, ReactiveFormsModule} from '@angular/forms';

imports: [
    ...
	FormsModule,
	ReactiveFormsModule,
    BrowserAnimationsModule
],
</pre>
<p>Add the following entry in styles.css file to get a theme.</p>
<pre class="prettyprint notranslate">
@import "~@angular/material/prebuilt-themes/indigo-pink.css";
</pre>
<p>Add the following entry in index.htm file to get a material icons support.</p>
<pre class="prettyprint notranslate">
&lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"&gt;
</pre>
<h1>Angular Material 7 - Auto-Complete</h1>
<p>The <b>&lt;mat-autocomplete&gt;</b>, an Angular Directive, is used as a special input control with an inbuilt dropdown to show all possible matches to a custom query. This control acts as a real-time suggestion box as soon as the user types in the input area. <b>&lt;mat-autocomplete&gt;</b> can be used to provide search results from local or remote data sources.</p>
<p>In this chapter, we will showcase the configuration required to draw a autocomplete control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatAutocompleteModule,MatInputModule} from '@angular/material';
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatAutocompleteModule,
      MatInputModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;form class="tp-form"&gt;
   &lt;mat-form-field class="tp-full-width"&gt;
      &lt;input type="text" 
         placeholder="US State" 
         aria-label="Number" 
         matInput 
         [formControl]="myControl" 
         [matAutocomplete]="auto"&gt;
         &lt;mat-autocomplete #auto="matAutocomplete"&gt;
            &lt;mat-option *ngFor="let state of states" [value]="state.value"&gt;
            {{state.display}}
         &lt;/mat-option&gt;
      &lt;/mat-autocomplete&gt;
   &lt;/mat-form-field&gt;
&lt;/form&gt;
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-form {
   min-width: 150px;
   max-width: 500px;
   width: 100%;
}
.tp-full-width {
   width: 100%;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
import { FormControl } from "@angular/forms";
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp';
   myControl = new FormControl();
   states;
   constructor(){
      this.loadStates();
   }
   //build list of states as map of key-value pairs
   loadStates() {
      var allStates = 'Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware,\
         Florida, Georgia, Hawaii, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana,\
         Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\
         Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina,\
         North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina,\
         South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia,\
         Wisconsin, Wyoming';
      this.states =  allStates.split(/, +/g).map( function (state) {
         return {
            value: state.toUpperCase(),
            display: state
         };
      });
   }
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_autocomplete.jpg" alt="Autocomplete" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created an input box and bind an autocomplete named <b>auto</b> using [matAutocomplete] attribute.</p></li>
<li><p>Then, we've created an autocomplete named <b>auto</b> using mat-autocomplete tag.</p></li>
<li><p>As next, using *ngFor loop, options are created.</p></li>
</ul>
<h1>Angular Material 7 - CheckBox</h1>
<p>The <b>&lt;mat-checkbox&gt;</b>, an Angular Directive, is used as a enhanced checkbox with material design styling and animation capabilities.</p>
<p>In this chapter, we will showcase the configuration required to draw a checkbox control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatCheckboxModule} from '@angular/material';
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatCheckboxModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;h2 class="tp-h2"&gt;Checkbox configuration&lt;/h2&gt;
&lt;section class="tp-section"&gt;
   &lt;mat-checkbox class="tp-margin" [(ngModel)]="checked"&gt;Checked&lt;/mat-checkbox&gt;
   &lt;mat-checkbox class="tp-margin" [(ngModel)]="indeterminate"&gt;Indeterminate&lt;/mat-checkbox&gt;
&lt;/section&gt; 
&lt;section class="tp-section"&gt;
   &lt;mat-checkbox class="tp-margin" [(ngModel)]="disabled"&gt;Disabled&lt;/mat-checkbox&gt;
&lt;/section&gt;
&lt;h2 class="tp-h2"&gt;Result&lt;/h2&gt;
&lt;section class="tp-section"&gt;
   &lt;mat-checkbox
      class="tp-margin"
      [(ngModel)]="checked"
      [(indeterminate)]="indeterminate"
      [labelPosition]="labelPosition"
      [disabled]="disabled"&gt;
      Sample Checkbox
   &lt;/mat-checkbox&gt;
&lt;/section&gt
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-h2 {
   margin: 10px;
}
.tp-section {
   display: flex;
   align-content: center;
   align-items: center;
   height: 60px;
}
.tp-margin {
   margin: 0 10px;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
import { FormControl } from "@angular/forms";
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp';
   checked = false;
   indeterminate = false;
   labelPosition = 'after';
   disabled = false;
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_checkbox.jpg" alt="Checkbox" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created three check boxes using mat-checkbox and bind them using ngModel with variables.</p></li>
<li><p>Then, we've created another checkbox and showcased its various attributes bound with variables in .ts file.</p></li>
</ul>
<h1>Angular Material 7 - DatePicker</h1>
<p>The <b>&lt;mat-datepicker&gt;</b>, an Angular Directive, is used to create a datepicker control using which date can be selected from a calendar or can be input directly using input box.</p>
<p>In this chapter, we will showcase the configuration required to draw a datepicker control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatDatepickerModule, MatInputModule,MatNativeDateModule} from '@angular/material';
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatDatepickerModule, MatInputModule,MatNativeDateModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-form-field&gt;
   &lt;input matInput [matDatepicker]="picker" placeholder="Choose a date"&gt;
   &lt;mat-datepicker-toggle matSuffix [for]="picker"&gt;&lt;/mat-datepicker-toggle&gt;
   &lt;mat-datepicker #picker&gt;&lt;/mat-datepicker&gt;
&lt;/mat-form-field&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_date_picker.jpg" alt="Date Picker" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created an input box and bind an datepicker named <b>picker</b> using [matDatepicker] attribute.</p></li>
<li><p>Then, we've created an datepicker named <b>picker</b> using mat-datepicker tag.</p></li>
</ul>
<h1>Angular Material 7 - Form Field</h1>
<p>The <b>&lt;mat-form-field&gt;</b>, an Angular Directive, is used to create a wrapper over angular components and is used to apply text styles like underline, bold, hints etc. </p>
<p>Following angular component can be used within <b>&lt;mat-form-field&gt;</b>.
<ul class="list">
<li><p>&lt;input matNativeControl&gt;</p></li>
<li><p>&lt;textarea matNativeControl&gt;</p></li>
<li><p>&lt;select matNativeControl&gt;</p></li>
<li><p>&lt;mat-select&gt;</p></li>
<li><p>&lt;mat-chip-list&gt;</p></li>
</ul>
<p>In this chapter, we will showcase the configuration required to use a mat-form-field control in Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatInputModule,MatOptionModule, MatSelectModule, MatIconModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatInputModule,MatOptionModule, MatSelectModule, MatIconModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-container {
   display: flex;
   flex-direction: column;
}
.tp-container &gt; * {
   width: 100%;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;div class="tp-container"&gt;
   &lt;mat-form-field appearance="standard"&gt;
      &lt;input matInput placeholder="Input"&gt;
      &lt;mat-icon matSuffix&gt;sentiment_very_satisfied&lt;/mat-icon&gt;
      &lt;mat-hint&gt;Sample Hint&lt;/mat-hint&gt;
   &lt;/mat-form-field&gt;
   &lt;mat-form-field appearance="fill"&gt;
      &lt;textarea matInput placeholder="Textarea"&gt;&lt;/textarea&gt;
   &lt;/mat-form-field&gt;
   &lt;mat-form-field appearance="outline"&gt;
      &lt;mat-select placeholder="Select"&gt;
         &lt;mat-option value="A"&gt;A&lt;/mat-option&gt;
         &lt;mat-option value="B"&gt;B&lt;/mat-option&gt;
         &lt;mat-option value="C"&gt;C&lt;/mat-option&gt;      
      &lt;/mat-select&gt;
   &lt;/mat-form-field&gt;
&lt;/div&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_form_field.jpg" alt="Form Field" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created an form field using mat-form-field wrapper. We've changed the appearance of form field using appearance attribute.</p></li>
<li><p>Then, a form control is added to the form field.</p></li>
</ul>
<h1>Angular Material 7 - Input</h1>
<p>The <b>&lt;mat-input&gt;</b>, an Angular Directive, is used for &lt;input&gt; and &lt;textarea&gt; elements to work under <b>&lt;mat-form-field&gt;</b>. </p>
<p>Following input types can be used within <b>&lt;mat-input&gt;</b>.
<ul class="list">
<li>color</li>
<li>date</li>
<li>datetime-local</li>
<li>email</li>
<li>month</li>
<li>number</li>
<li>password</li>
<li>search</li>
<li>tel</li>
<li>text</li>
<li>time</li>
<li>url</li>
<li>week</li>
</ul>
<p>In this chapter, we will showcase the configuration required to use a mat-input control in Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatInputModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatInputModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-form {
   min-width: 150px;
   max-width: 500px;
   width: 100%;
}
.tp-full-width {
   width: 100%;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
import { FormControl } from "@angular/forms";
import {Validators} from '@angular/forms';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp';
   emailFormControl = new FormControl('', [
      Validators.required,
      Validators.email,
  ]);
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;form class="tp-form"&gt;
   &lt;mat-form-field class="tp-full-width"&gt;
      &lt;input matInput placeholder="Favorite Food" value="Pasta"&gt;
   &lt;/mat-form-field&gt;
   &lt;mat-form-field class="tp-full-width"&gt;
      &lt;textarea matInput placeholder="Enter your comment"&gt;&lt;/textarea&gt;
   &lt;/mat-form-field&gt;
   &lt;mat-form-field class="tp-full-width"&gt;
      &lt;input matInput placeholder="Email" [formControl]="emailFormControl"&gt;
      &lt;mat-error *ngIf="emailFormControl.hasError('email') 
         && !emailFormControl.hasError('required')"&gt;
         Please enter a valid email address
      &lt;/mat-error&gt;
      &lt;mat-error *ngIf="emailFormControl.hasError('required')"&gt;
         Email is &lt;strong&gt;required&lt;/strong&gt;
      &lt;/mat-error&gt;
   &lt;/mat-form-field&gt;
&lt;/form&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_input.jpg" alt="Input" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created an form field using mat-form-field wrapper.</p></li>
<li><p>Then, a form control is added to the form field using input and matInput attribute.</p></li>
</ul>
<h1>Angular Material 7 - Radio Button</h1>
<p>The <b>&lt;mat-radiobutton&gt;</b>, an Angular Directive, is used for &lt;input type="radio"&gt; for enhance material design based styling.</b>.
<p>In this chapter, we will showcase the configuration required to draw a radio button control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatRadioModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatRadioModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-radio-group {
   display: inline-flex;
   flex-direction: column;
}
.tp-radio-button {
   margin: 5px;
}
.tp-selected-value {
   margin: 15px 0;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
import { FormControl } from "@angular/forms";
import { Validators } from "@angular/forms";
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   favoriteSeason: string;
   seasons: string[] = ['Winter', 'Spring', 'Summer', 'Autumn'];
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-radio-group class="tp-radio-group" [(ngModel)]="favoriteSeason"&gt;
   &lt;mat-radio-button class="tp-radio-button"
      *ngFor="let season of seasons" [value]="season"&gt;
      {{season}}
   &lt;/mat-radio-button&gt;
&lt;/mat-radio-group&gt;
&lt;div class="tp-selected-value"&gt;
  Selected Season: {{favoriteSeason}}
&lt;/div&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_radio_button.jpg" alt="Radio button" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created an radio button group using mat-radio-group bound with ngModel.</p></li>
<li><p>Then, we've added radio buttons using mat-radio-button.</p></li>
</ul>
<h1>Angular Material 7 - Select</h1>
<p>The <b>&lt;mat-select&gt;</b>, an Angular Directive, is used for &lt;select&gt; for enhance material design based styling.</b>.
<p>In this chapter, we will showcase the configuration required to draw a select control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th>Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td style="text-align:center;vertical-align:middle;">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatSelectModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatSelectModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
import { FormControl } from "@angular/forms";
export interface Food {
  value: string;
  display: string;
}
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   selectedValue: string; 
   foods: Food[] = [
      {value: 'steak', display: 'Steak'},
      {value: 'pizza', display: 'Pizza'},
      {value: 'tacos', display: 'Tacos'}
   ];
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;form&gt;
   &lt;h4&gt;mat-select&lt;/h4&gt;
   &lt;mat-form-field&gt;
      &lt;mat-select placeholder="Favorite food" 
         [(ngModel)]="selectedValue" name="food"&gt;
         &lt;mat-option *ngFor="let food of foods" 
            [value]="food.value"&gt;
            {{food.display}}
         &lt;/mat-option&gt;
      &lt;/mat-select&gt;
   &lt;/mat-form-field&gt;
   &lt;p&gt; Selected food: {{selectedValue}} &lt;/p&gt; 
&lt;/form&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_select.jpg" alt="Select" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created a select using mat-select bound with ngModel.</p></li>
<li><p>Then, we've added options using mat-option.</p></li>
</ul>
<h1>Angular Material 7 - Slider</h1>
<p>The <b>&lt;mat-slider&gt;</b>, an Angular Directive, is used as a enhanced range selector with material design styling and animation capabilities.</p>
<p>In this chapter, we will showcase the configuration required to draw a slider control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatSliderModule, MatCheckboxModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatSliderModule, MatCheckboxModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-slider
   class = "tp-margin"
   [disabled] = "disabled"
   [invert] = "invert"      
   [thumbLabel] = "thumbLabel"     
   [(ngModel)] = "value"
   [vertical] = "vertical"&gt;
&lt;/mat-slider&gt;
&lt;section class = "tp-section"&gt;
   &lt;mat-checkbox class = "tp-margin" [(ngModel)] = "thumbLabel"&gt;Show thumb label&lt;/mat-checkbox&gt;
&lt;/section&gt;
&lt;section class = "tp-section"&gt;
   &lt;mat-checkbox class = "tp-margin" [(ngModel)] = "vertical"&gt;Vertical&lt;/mat-checkbox&gt;
   &lt;mat-checkbox class = "tp-margin" [(ngModel)] = "invert"&gt;Inverted&lt;/mat-checkbox&gt;
&lt;/section&gt;
&lt;section class = "tp-section"&gt;
   &lt;mat-checkbox class = "tp-margin" [(ngModel)] = "disabled"&gt;Disabled&lt;/mat-checkbox&gt;
&lt;/section&gt;
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-section {
   display: flex;
   align-content: center;
   align-items: center;
   height: 60px;
}
.tp-margin {
   margin: 30px;
}

.mat-slider-horizontal {
   width: 300px;
}
.mat-slider-vertical {
   height: 300px;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   disabled = false;
   invert = false;
   thumbLabel = false;
   value = 0;
   vertical = false;
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_slider.jpg" alt="Slider" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created four check boxes using mat-checkbox and bind them using ngModel with variables. These properties will be used to customize the slider.</p></li>
<li><p>Then, we've created the slider and showcased its various attributes bound with variables in .ts file.</p></li>
</ul>
<h1>Angular Material 7 - Slide Toggle</h1>
<p>The <b>&lt;mat-slide-toggle&gt;</b>, an Angular Directive, is used as a on/off switch with material design styling and animation capabilities.</p>
<p>In this chapter, we will showcase the configuration required to draw a slide toggle control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatSlideToggleModule, MatCheckboxModule} from '@angular/material'
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatSlideToggleModule, MatCheckboxModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-slide-toggle
   class = "tp-margin"         
   [checked] = "checked"
   [disabled] = "disabled"&gt;
   Slide!
&lt;/mat-slide-toggle&gt;
&lt;section class = "tp-section"&gt;
   &lt;mat-checkbox class = "tp-margin" [(ngModel)] = "checked"&gt;Checked&lt;/mat-checkbox&gt;
   &lt;mat-checkbox class = "tp-margin" [(ngModel)] = "disabled"&gt;Disabled&lt;/mat-checkbox&gt;
&lt;/section&gt;
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-section {
   display: flex;
   align-content: center;
   align-items: center;
   height: 60px;
}
.tp-margin {
   margin: 30px;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   disabled = false;
   checked = false; 
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_slider_toggle.jpg" alt="Slide Toggle" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created two check boxes using mat-checkbox and bind them using ngModel with variables. These properties will be used to handle the slide toggle.</p></li>
<li><p>Then, we've created the slide toggle and showcased its various attributes bound with variables in .ts file.</p></li>
</ul>
<h1>Angular Material 7 - Menu</h1>
<p>The <b>&lt;mat-menu&gt;</b>, an Angular Directive, is used to create a menu and attach it with a control with material design styling and animation capabilities.</p>
<p>In this chapter, we will showcase the configuration required to draw a menu control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatMenuModule, MatButtonModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatMenuModule, MatButtonModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;button mat-button [matMenuTriggerFor] = "menu"&gt;File&lt;/button&gt;
&lt;mat-menu #menu = "matMenu"&gt;
   &lt;button mat-menu-item&gt;New&lt;/button&gt;
   &lt;button mat-menu-item&gt;Open&lt;/button&gt;
   &lt;button mat-menu-item [matMenuTriggerFor] = "recent"&gt;Recent&lt;/button&gt;
&lt;/mat-menu&gt;
&lt;mat-menu #recent = "matMenu"&gt;
   &lt;button mat-menu-item&gt;File 1&lt;/button&gt;
   &lt;button mat-menu-item&gt;File 2&lt;/button&gt;
&lt;/mat-menu&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_menu.jpg" alt="Menu" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created two menus using mat-menu and bind them to buttons using matMenuTriggerFor.</p></li>
<li><p>matMenuTriggerFor is passed the menu identifier to attach the menus.</p></li>
</ul>
<h1>Angular Material 7 - SideNav</h1>
<p>The <b>&lt;mat-sidenav&gt;</b>, an Angular Directive, is used to create a side navigation bar and main content panel with material design styling and animation capabilities.</p>
<ul class="list">
<li><p><b>&lt;mat-sidenav-container&gt;</b> - Represents the main container.</p></li>
<li><p><b>&lt;mat-sidenav-content&gt;</b> - Represents the content panel.</p></li>
<li><p><b>&lt;mat-sidenav&gt;</b> - Represents the side panel.</p></li>
</ul>
<p>In this chapter, we will showcase the configuration required to draw a sidenav control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatSidenavModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatSidenavModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-container {
   position: absolute;
   top: 0;
   bottom: 0;
   left: 0;
   right: 0;
   background: #eee;
}
.tp-section {
   display: flex;
   align-content: center;
   align-items: center;
   height: 60px;
   width:100px;   
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-sidenav-container class = "tp-container"&gt;
   &lt;mat-sidenav mode = "side" opened&gt;
      &lt;section class = "tp-section"&gt;
         &lt;span&gt;File&lt;/span&gt;
      &lt;/section&gt;
      &lt;section class = "tp-section"&gt;
         &lt;span&gt;Edit&lt;/span&gt;
      &lt;/section&gt;
   &lt;/mat-sidenav&gt;
   &lt;mat-sidenav-content&gt;Main content&lt;/mat-sidenav-content&gt;
&lt;/mat-sidenav-container&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_sidenav.jpg" alt="SideNav" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created a main container spanning the complete page.</p></li>
<li><p>Then side nav is created using mat-sidenav and content panel using mat-sidenav-content.</p></li>
</ul>
<h1>Angular Material 7 - Toolbar</h1>
<p>The <b>&lt;mat-toolbar&gt;</b>, an Angular Directive, is used to create a toolbar to show title, header or any action button.</p>
<ul class="list">
<li><p><b>&lt;mat-toolbar&gt;</b> - Represents the main container.</p></li>
<li><p><b>&lt;mat-toolbar-row&gt;</b> - Add a new row.</p></li>
</ul>
<p>In this chapter, we will showcase the configuration required to draw a toolbar control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatToolbarModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatToolbarModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.filler {
   flex: 1 1 auto;
}
.gap {
   margin-right: 10px;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-toolbar color = "primary"&gt;
   &lt;span class = "gap"&gt;File&lt;/span&gt;
   &lt;span&gt;Edit&lt;/span&gt;
   &lt;span class = "filler"&gt;&lt;/span&gt;
   &lt;span&gt;About&lt;/span&gt;
&lt;/mat-toolbar&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_toolbar.jpg" alt="Toolbar" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created a toolbar spanning the complete page.</li>
<li>Then labels are added.</li>
</ul>
<h1>Angular Material 7 - Card</h1>
<p>The <b>&lt;mat-card&gt;</b>, an Angular Directive, is used to create a card with material design styling and animation capabilities. It provides preset styles for the common card sections.</p>
<ul class="list">
<li><p><b>&lt;mat-card-title&gt;</b> &minus; Represents the section for title.</p></li>
<li><p><b>&lt;mat-card-subtitle&gt;</b> &minus; Represents the section for subtitle.</p></li>
<li><p><b>&lt;mat-card-content&gt;</b> &minus; Represents the section for content.</p></li>
<li><p><b>&lt;mat-card-actions&gt;</b> &minus; Represents the section for actions.</p></li>
<li><p><b>&lt;mat-card-footer&gt;</b> &minus; Represents the section for footer.</p></li>
</ul>
<p>In this chapter, we will showcase the configuration required to draw a card control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatCardModule, MatButtonModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatCardModule, MatButtonModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-card {
   max-width: 400px;
}
.tp-header-image {
   background-image: url('https://www.tutorialspoint.com/materialize/src/html5-mini-logo.jpg');
   background-size: cover;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-card class = "tp-card"&gt;
   &lt;mat-card-header&gt;
      &lt;div mat-card-avatar class = "tp-header-image"&gt;&lt;/div&gt;
      &lt;mat-card-title&gt;HTML5&lt;/mat-card-title&gt;
      &lt;mat-card-subtitle&gt;HTML Basics&lt;/mat-card-subtitle&gt;
   &lt;/mat-card-header&gt;
   &lt;img mat-card-image src = "https://www.tutorialspoint.com/materialize/src/html5-mini-logo.jpg" alt = "Learn HTML5"&gt;
   &lt;mat-card-content&gt;
      &lt;p&gt;
         HTML5 is the next major revision of the HTML standard superseding
         HTML 4.01, XHTML 1.0, and XHTML 1.1. HTML5 is a standard for
         structuring and presenting content on the World Wide Web.
      &lt;/p&gt;
   &lt;/mat-card-content&gt;
   &lt;mat-card-actions&gt;
      &lt;button mat-button&gt;LIKE&lt;/button&gt;
      &lt;button mat-button&gt;SHARE&lt;/button&gt;
   &lt;/mat-card-actions&gt;
&lt;/mat-card&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_card.jpg" alt="Card" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created a card using mat-card.</li>
</ul>
<h1>Angular Material 7 - Divider</h1>
<p>The <b>&lt;mat-divider&gt;</b>, an Angular Directive, is used to create a divider with material design styling and animation capabilities. It provide a separator between two items.</p>
<p>In this chapter, we will showcase the configuration required to draw a divider control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatDividerModule, MatListModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatDividerModule, MatListModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-list&gt;
   &lt;mat-list-item&gt;Apple&lt;/mat-list-item&gt;
   &lt;mat-divider&gt;&lt;/mat-divider&gt;
   &lt;mat-list-item&gt;Orange&lt;/mat-list-item&gt;
   &lt;mat-divider&gt;&lt;/mat-divider&gt;
   &lt;mat-list-item&gt;Banana&lt;/mat-list-item&gt;
&lt;/mat-list&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_divider.jpg" alt="Divider" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created a list using mat-list.</li>
<li>Then, we've added dividers between list items using mat-divider.</li>
</ul>
<h1>Angular Material 7 - Expansion Panel</h1>
<p>The <b>&lt;mat-expansion-panel&gt;</b>, an Angular Directive, is used to create an expandable detail v/s summary view.</p>
<ul class="list">
<li><p><b>&lt;mat-expansion-panel-header&gt;</b> &minus; Represents the header section. Contains summary of panel and acts as control to expand or collapse the panel.</p></li>
<li><p><b>&lt;mat-panel-title&gt;</b> &minus; Represents the panel title.</p></li>
<li><p><b>&lt;mat-panel-description&gt;</b> &minus; Represents the panel summary.</p></li>
<li><p><b>&lt;mat-action-row&gt;</b> &minus; Represents the actions panel at the bottom.</p></li>
</ul>
<p>In this chapter, we will showcase the configuration required to draw a expansion control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatExpansionModule, MatInputModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatExpansionModule, MatInputModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-expansion-panel&gt;
   &lt;mat-expansion-panel-header&gt;
      &lt;mat-panel-title&gt;
         Personal data
      &lt;/mat-panel-title&gt;
      &lt;mat-panel-description&gt;
         Type name and age
      &lt;/mat-panel-description&gt;
   &lt;/mat-expansion-panel-header&gt;
   &lt;mat-form-field&gt;
      &lt;input matInput placeholder="Name"&gt;
   &lt;/mat-form-field&gt;
   &lt;mat-form-field&gt;
      &lt;input matInput placeholder="Age"&gt;
   &lt;/mat-form-field&gt;
&lt;/mat-expansion-panel&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_expansion_panel.jpg" alt="Expansion Panel" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created expansion panel using mat-expansion-panel.</li>
<li>Then, we've added title, subtitle and content to it.</li>
</ul>
<h1>Angular Material 7 - Grid List</h1>
<p>The <b>&lt;mat-grid-list&gt;</b>, an Angular Directive, is used to create a two dimensional view arranging cells into grid based layout.</p>
<p>In this chapter, we will showcase the configuration required to draw a grid list control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatGridListModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatGridListModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
mat-grid-tile {
   background: lightblue;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-grid-list cols = "4" rowHeight = "100px"&gt;
   &lt;mat-grid-tile 
   [colspan] = "3"
   [rowspan] = "1"&gt;1
   &lt;/mat-grid-tile&gt;
   &lt;mat-grid-tile 
   [colspan] = "1"
   [rowspan] = "2"&gt;2
   &lt;/mat-grid-tile&gt;
   &lt;mat-grid-tile 
   [colspan] = "1"
   [rowspan] = "1"&gt;3
   &lt;/mat-grid-tile&gt;
   &lt;mat-grid-tile 
   [colspan] = "2"
   [rowspan] = "1"&gt;4
   &lt;/mat-grid-tile&gt;
&lt;/mat-grid-list&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_grid_list.jpg" alt="Grid List" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created grid list using mat-grid-list.</li>
<li>Then, we've added content using mat-grid-tile.</li>
</ul>
<h1>Angular Material 7 - List</h1>
<p>The <b>&lt;mat-list&gt;</b>, an Angular Directive, is used to create a container to carry and format a series of items.</p>
<p>In this chapter, we will showcase the configuration required to draw a list control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatListModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatListModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-list role = "list"&gt;
   &lt;mat-list-item role = "listitem"&gt;One&lt;/mat-list-item&gt;
   &lt;mat-list-item role = "listitem"&gt;Two&lt;/mat-list-item&gt;
   &lt;mat-list-item role = "listitem"&gt;Three&lt;/mat-list-item&gt;
&lt;/mat-list&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_list.jpg" alt="List" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created list using mat-list.</li>
<li>Then, we've added content using mat-list-item.</li>
</ul>
<h1>Angular Material 7 - Stepper</h1>
<p>The <b>&lt;mat-stepper&gt;</b>, an Angular Directive, is used to create a wizard like work-flow steps.</p>
<p>In this chapter, we will showcase the configuration required to draw a stepper control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatStepperModule, MatInputModule, MatButtonModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatStepperModule, MatInputModule, MatButtonModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-horizontal-stepper [linear] = "isLinear" #stepper&gt;
   &lt;mat-step [stepControl] = "firstFormGroup"&gt;
      &lt;form [formGroup] = "firstFormGroup"&gt;
         &lt;ng-template matStepLabel&gt;Enter your name&lt;/ng-template&gt;
         &lt;mat-form-field&gt;
            &lt;input matInput placeholder = "Last name, First name" formControlName = "firstCtrl" required&gt;
         &lt;/mat-form-field&gt;
         &lt;div&gt;
           &lt;button mat-button matStepperNext&gt;Next&lt;/button&gt;
         &lt;/div&gt;
      &lt;/form&gt;
   &lt;/mat-step&gt;
   &lt;mat-step [stepControl] = "secondFormGroup"&gt;
      &lt;form [formGroup] = "secondFormGroup"&gt;
         &lt;ng-template matStepLabel&gt;Enter your address&lt;/ng-template&gt;
         &lt;mat-form-field&gt;
           &lt;input matInput placeholder = "Address" formControlName = "secondCtrl" required&gt;
         &lt;/mat-form-field&gt;
         &lt;div&gt;
           &lt;button mat-button matStepperPrevious&gt;Back&lt;/button&gt;
           &lt;button mat-button matStepperNext&gt;Next&lt;/button&gt;
         &lt;/div&gt;
      &lt;/form&gt;
   &lt;/mat-step&gt;
   &lt;mat-step&gt;
      &lt;ng-template matStepLabel&gt;Done&lt;/ng-template&gt;
         Details taken.
      &lt;div&gt;
         &lt;button mat-button matStepperPrevious&gt;Back&lt;/button&gt;
         &lt;button mat-button (click) = "stepper.reset()"&gt;Reset&lt;/button&gt;
      &lt;/div&gt;
   &lt;/mat-step&gt;
&lt;/mat-horizontal-stepper&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
import { FormControl } from "@angular/forms";
import { FormGroup } from "@angular/forms";
import { FormBuilder } from "@angular/forms";
import { Validators } from "@angular/forms";
export interface Food {
   value: string;
   display: string;
}
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp';   
   firstFormGroup: FormGroup;
   secondFormGroup: FormGroup;
   constructor(private _formBuilder: FormBuilder) {}
   ngOnInit() {
      this.firstFormGroup = this._formBuilder.group({
         firstCtrl: ['', Validators.required]
      });
      this.secondFormGroup = this._formBuilder.group({
         secondCtrl: ['', Validators.required]
      });
   }
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_stepper.jpg" alt="Stepper" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created stepper using mat-stepper.</li>
<li>Then, we've added content using mat-step.</li>
</ul>
<h1>Angular Material 7 - Tabs</h1>
<p>The <b>&lt;mat-tab-group&gt;</b>, an Angular Directive, is used to create a tabbed layout.</p>
<p>In this chapter, we will showcase the configuration required to draw a tab control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatTabsModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatTabsModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-tab-group&gt;
   &lt;mat-tab label = "A"&gt; Apple &lt;/mat-tab&gt;
   &lt;mat-tab label = "B"&gt; Banana &lt;/mat-tab&gt;
   &lt;mat-tab label = "C"&gt; Carrot &lt;/mat-tab&gt;
&lt;/mat-tab-group&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_tabs.jpg" alt="Tabs" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created tabs using mat-tab-group.</li>
<li>Then, we've added content using mat-tab where each mat-tab represents a different tab.</li>
</ul>
<h1>Angular Material 7 - Tree</h1>
<p>The <b>&lt;mat-tree&gt;</b>, an Angular Directive, is used to create a tree with material styling to display hierachical data.</p>
<p>In this chapter, we will showcase the configuration required to draw a tree using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatTreeModule, MatIconModule, MatButtonModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatTreeModule, MatIconModule, MatButtonModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-tree [dataSource] = "dataSource" [treeControl] = "treeControl"&gt;
   &lt;mat-tree-node *matTreeNodeDef = "let node" matTreeNodeToggle matTreeNodePadding&gt;
      &lt;button mat-icon-button disabled&gt;&lt;/button&gt;
      {{node.filename}} : {{node.type}}
   &lt;/mat-tree-node&gt;
   &lt;mat-tree-node *matTreeNodeDef = "let node;when: hasChild" matTreeNodePadding&gt;
      &lt;button mat-icon-button matTreeNodeToggle [attr.aria-label] = "'toggle ' + node.filename"&gt;
         &lt;mat-icon class = "mat-icon-rtl-mirror"&gt;
            {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}
         &lt;/mat-icon&gt;
      &lt;/button&gt;
      {{node.filename}}
   &lt;/mat-tree-node&gt;
&lt;/mat-tree&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import {FlatTreeControl} from '@angular/cdk/tree';
import {Component, Injectable} from '@angular/core';
import {MatTreeFlatDataSource, MatTreeFlattener} from '@angular/material/tree';
import {BehaviorSubject, Observable, of as observableOf} from 'rxjs';
export class FileNode {
   children: FileNode[];
   filename: string;
   type: any;
}
export class FileFlatNode {
   constructor(
      public expandable: boolean, public filename: string, public level: number, public type: any) {}
}
const TREE_DATA = JSON.stringify({
   Documents: {
      angular: {
         src: {
            compiler: 'ts',
            core: 'ts'
         }
      },
      material2: {
         src: {
            button: 'ts',
            checkbox: 'ts',
            input: 'ts'
         }
      }
   }
});
@Injectable()
export class FileDatabase {
   dataChange = new BehaviorSubject&lt;FileNode[]&gt;([]);
   get data(): FileNode[] { return this.dataChange.value; }
   constructor() {
      this.initialize();
   }
   initialize() {
      const dataObject = JSON.parse(TREE_DATA);   
      const data = this.buildFileTree(dataObject, 0);
      this.dataChange.next(data);
   } 
   buildFileTree(obj: {[key: string]: any}, level: number): FileNode[] {
      return Object.keys(obj).reduce&lt;FileNode[]&gt;((accumulator, key) =&gt; {
         const value = obj[key];
         const node = new FileNode();
         node.filename = key;
         if (value != null) {
            if (typeof value === 'object') {
               node.children = this.buildFileTree(value, level + 1);
            } else {
               node.type = value;
            }
         }
         return accumulator.concat(node);
      }, []);
   }
}
@Component({
   selector: 'app-root',
   templateUrl: 'app.component.html',
   styleUrls: ['app.component.css'],
   providers: [FileDatabase]
})
export class AppComponent {
   treeControl: FlatTreeControl&lt;FileFlatNode&gt;;
   treeFlattener: MatTreeFlattener&lt;FileNode, FileFlatNode&gt;;
   dataSource: MatTreeFlatDataSource&lt;FileNode, FileFlatNode&gt;;
   constructor(database: FileDatabase) {
      this.treeFlattener = new MatTreeFlattener(this.transformer, this._getLevel,
      this._isExpandable, this._getChildren);
      this.treeControl = new FlatTreeControl&lt;FileFlatNode&gt;(this._getLevel, this._isExpandable);
      this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);
      database.dataChange.subscribe(data =&gt; this.dataSource.data = data);
   }
   transformer = (node: FileNode, level: number) =&gt; {
      return new FileFlatNode(!!node.children, node.filename, level, node.type);
   }
   private _getLevel = (node: FileFlatNode) =&gt; node.level;
   private _isExpandable = (node: FileFlatNode) =&gt; node.expandable;
   private _getChildren = (node: FileNode): Observable&lt;FileNode[]&gt; =&gt; observableOf(node.children);
   hasChild = (_: number, _nodeData: FileFlatNode) =&gt; _nodeData.expandable;
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_tree.jpg" alt="Tree" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created tree using mat-tree and mat-tree-node.</li>
<li>Then, we've created the data source in ts file and bind it with mat-tree.</li>
</ul>
<h1>Angular Material 7 - Button</h1>
<p>The <b>&lt;mat-button&gt;</b>, an Angular Directive, is used to create a button with material styling and animations.</p>
<p>In this chapter, we will showcase the configuration required to draw a button control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatButtonModule,MatIconModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatButtonModule,MatIconModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-button-row button,
.tp-button-row a {
   margin-right: 8px;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;div class = "example-button-row"&gt;
   &lt;button mat-button&gt;Basic&lt;/button&gt;
   &lt;button mat-raised-button&gt;Raised&lt;/button&gt;
   &lt;button mat-stroked-button&gt;Stroked&lt;/button&gt;
   &lt;button mat-flat-button&gt;Flat&lt;/button&gt;
   &lt;button mat-icon-button&gt;
      &lt;mat-icon aria-label="Heart"&gt;favorite&lt;/mat-icon&gt;
   &lt;/button&gt;
   &lt;button mat-fab&gt;Fab&lt;/button&gt;
   &lt;button mat-mini-fab&gt;Mini&lt;/button&gt;
   &lt;a mat-button routerLink = "."&gt;Link&lt;/a&gt;
&lt;/div&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_button.jpg" alt="Buttons" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created buttons using various variants of mat-buttons.</li>
</ul>
<h1>Angular Material 7 - Toggle Button</h1>
<p>The <b>&lt;mat-button-toggle&gt;</b>, an Angular Directive, is used to create a toggle or on/off button with material styling and animations. mat-button-toggle buttons can be configured to behave as radio buttons or checkboxes. Typically they are part of <b>&lt;mat-button-toggle-group&gt;</b>.</p>
<p>In this chapter, we will showcase the configuration required to draw a button toggle control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatButtonToggleModule, MatIconModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatButtonToggleModule, MatIconModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-selected-value {
   margin: 15px 0;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-button-toggle-group #group = "matButtonToggleGroup"&gt;
   &lt;mat-button-toggle value = "left"&gt;
      &lt;mat-icon&gt;format_align_left&lt;/mat-icon&gt;
   &lt;/mat-button-toggle&gt;
   &lt;mat-button-toggle value = "center"&gt;
      &lt;mat-icon&gt;format_align_center&lt;/mat-icon&gt;
   &lt;/mat-button-toggle&gt;
   &lt;mat-button-toggle value = "right"&gt;
      &lt;mat-icon&gt;format_align_right&lt;/mat-icon&gt;
   &lt;/mat-button-toggle&gt;
   &lt;mat-button-toggle value = "justify" disabled&gt;
      &lt;mat-icon&gt;format_align_justify&lt;/mat-icon&gt;
   &lt;/mat-button-toggle&gt;
&lt;/mat-button-toggle-group&gt;
&lt;div class = "tp-selected-value"&gt;Selected value: {{group.value}}&lt;/div&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_button_toggle.jpg" alt="Button Toggle" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created a toggle button group using mat-button-toggle-group.</li>
<li>Then, we've added toggle buttons to the group using mat-button-toggle.</li>
</ul>
<h1>Angular Material 7 - Badge</h1>
<p>The <b>&lt;mat-badge&gt;</b>, an Angular Directive, is used to create a badges which is a small status descriptor for UI elements. A badge typically carries a number or other short set of characters, that appears in proximity to another UI element.</p>
<p>In this chapter, we will showcase the configuration required to draw a badge control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatBadgeModule, MatButtonModule, MatIconModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatBadgeModule, MatButtonModule, MatIconModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;p&gt;&lt;span matBadge = "4" matBadgeOverlap = "false"&gt;Mail&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
   &lt;button mat-raised-button color = "primary"
      matBadge = "8" matBadgePosition = "before" matBadgeColor = "accent"&gt;
      Action
   &lt;/button&gt;
&lt;/p&gt;
&lt;p&gt;&lt;mat-icon matBadge = "15" matBadgeColor = "warn"&gt;home&lt;/mat-icon&gt;&lt;/p&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_badge.jpg" alt="Badge" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created a span, a button and a icon.</li>
<li>Then, we've added badges to each element using mat-badge attribute.</li>
</ul>
<h1>Angular Material 7 - Chips</h1>
<p>The <b>&lt;mat-chip-list&gt;</b>, an Angular Directive, is used to a list of values as chips.</p>
<p>In this chapter, we will showcase the configuration required to draw a chip control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatChipsModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatChipsModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-chip-list&gt;
   &lt;mat-chip&gt;One&lt;/mat-chip&gt;
   &lt;mat-chip&gt;Two&lt;/mat-chip&gt;
   &lt;mat-chip color = "primary" selected&gt;Tree&lt;/mat-chip&gt;
   &lt;mat-chip color = "accent" selected&gt;Four&lt;/mat-chip&gt;
&lt;/mat-chip-list&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_chips.jpg" alt="Chips" />
<h2>Details</h2>
<ul class="list">
<li>As first, we've created chip list using mat-chip-list.</li>
<li>Then, we've added chips to each chip list using mat-chip.</li>
</ul>
<h1>Angular Material 7 - Icons</h1>
<p>The <b>&lt;mat-icon&gt;</b>, an Angular Directive, is used to add a vector/svg based icon with material styling.</p>
<p>In this chapter, we will showcase the configuration required to draw a icon control using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatIconModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatIconModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-icon&gt;home&lt;/mat-icon&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_icons.jpg" alt="Icon" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created home icon using mat-icon. We're using google material icons.</li>
</ul>
<h1>Angular Material 7 - Progress Spinner</h1>
<p>The <b>&lt;mat-progress-spinner&gt;</b>, an Angular Directive, is used to show a progress spinner with material styling.</p>
<p>In this chapter, we will showcase the configuration required to draw a deterministic as well as indeterministic progress spinner using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatProgressSpinnerModule, MatRadioModule, MatSliderModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatProgressSpinnerModule, MatRadioModule, MatSliderModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified ts file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-section {
   display: flex;
   align-content: center;
   align-items: center;
   height: 60px;
}
.tp-margin {
   margin: 0 10px;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;section class = "tp-section"&gt;
   &lt;label class = "tp-margin"&gt;Color:&lt;/label&gt;
   &lt;mat-radio-group [(ngModel)] = "color"&gt;
      &lt;mat-radio-button class = "tp-margin" value = "primary"&gt;
         Primary
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "accent"&gt;
         Accent
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "warn"&gt;
         Warn
      &lt;/mat-radio-button&gt;
   &lt;/mat-radio-group&gt;
&lt;/section&gt;
&lt;section class = "tp-section"&gt;
   &lt;label class = "tp-margin"&gt;Mode:&lt;/label&gt;
   &lt;mat-radio-group [(ngModel)] = "mode"&gt;
      &lt;mat-radio-button class = "tp-margin" value = "determinate"&gt;
         Determinate
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "indeterminate"&gt;
         Indeterminate
      &lt;/mat-radio-button&gt;
   &lt;/mat-radio-group&gt;
&lt;/section&gt;
&lt;section class = "tp-section" *ngIf = "mode === 'determinate'"&gt;
   &lt;label class = "tp-margin"&gt;Progress:&lt;/label&gt;
   &lt;mat-slider class = "tp-margin" [(ngModel)] = "value"&gt;&lt;/mat-slider&gt;
&lt;/section&gt;
&lt;section class = "tp-section"&gt;
   &lt;label class = "tp-margin"&gt;Mode: {{mode}}&lt;/label&gt;
   &lt;mat-progress-spinner
      class = "tp-margin"
      [color] = "color"
      [mode] = "mode"
      [value] = "value"&gt;
   &lt;/mat-progress-spinner&gt;
&lt;/section&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   color = 'primary';
   mode = 'determinate';
   value = 50;
   
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_progress_spinner.jpg" alt="Progress Spinner" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created progress spinner using mat-progress-spinner.</li>
</ul>
<h1>Angular Material 7 - Progress Bar</h1>
<p>The <b>&lt;mat-progress-bar&gt;</b>, an Angular Directive, is used to show a progress bar with material styling.</p>
<p>In this chapter, we will showcase the configuration required to draw a deterministic as well as indeterministic progress bar using Angular Material.</p>
<h2>Create Angular Application</h2>
<p>Follow the following steps to update the Angular application we created in <i>Angular 6 - Project Setup</i> chapter &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Step</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>Create a project with a name <i>materialApp</i> as explained in the <i>Angular 6 - Project Setup</i> chapter.</td>
</tr>
<tr>
<td class="ts">2</td>
<td>Modify <i>app.module.ts</i>, <i>app.component.ts</i>, <i>app.component.css</i> and <i>app.component.html</i> as explained below. Keep rest of the files unchanged.</td>
</tr>
<tr>
<td class="ts">3</td>
<td>Compile and run the application to verify the result of the implemented logic.</td>
</tr>
</table>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatProgressBarModule, MatRadioModule, MatSliderModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatProgressBarModule, MatRadioModule, MatSliderModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified ts file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-section {
   display: flex;
   align-content: center;
   align-items: center;
   height: 60px;
}
.tp-margin {
   margin: 0 10px;
}
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;section class = "tp-section"&gt;
   &lt;label class = "tp-margin"&gt;Color:&lt;/label&gt;
   &lt;mat-radio-group [(ngModel)] = "color"&gt;
      &lt;mat-radio-button class = "tp-margin" value = "primary"&gt;
         Primary
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "accent"&gt;
         Accent
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "warn"&gt;
         Warn
      &lt;/mat-radio-button&gt;
   &lt;/mat-radio-group&gt;
&lt;/section&gt;
&lt;section class = "tp-section"&gt;
   &lt;label class = "tp-margin"&gt;Mode:&lt;/label&gt;
   &lt;mat-radio-group [(ngModel)] = "mode"&gt;
      &lt;mat-radio-button class = "tp-margin" value = "determinate"&gt;
         Determinate
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "indeterminate"&gt;
         Indeterminate
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "buffer"&gt;
         Buffer
      &lt;/mat-radio-button&gt;
      &lt;mat-radio-button class = "tp-margin" value = "query"&gt;
         Query
      &lt;/mat-radio-button&gt;
   &lt;/mat-radio-group&gt;
&lt;/section&gt;
&lt;section class = "tp-section" *ngIf = "mode === 'determinate' || mode === 'buffer'"&gt;
   &lt;label class = "tp-margin"&gt;Progress:&lt;/label&gt;
   &lt;mat-slider class = "tp-margin" [(ngModel)] = "value"&gt;&lt;/mat-slider&gt;
&lt;/section&gt;
&lt;section class = "tp-section" *ngIf = "mode === 'buffer'"&gt;
   &lt;label class = "tp-margin"&gt;Buffer:&lt;/label&gt;
   &lt;mat-slider class = "tp-margin" [(ngModel)] = "bufferValue"&gt;&lt;/mat-slider&gt;
&lt;/section&gt;
&lt;section class = "tp-section"&gt;
   &lt;label class = "tp-margin"&gt;Mode: {{mode}}&lt;/label&gt;
   &lt;mat-progress-bar
      class = "tp-margin"
      [color] = "color"
      [mode] = "mode"
      [value] = "value"
      [bufferValue] = "bufferValue"
      &gt;
   &lt;/mat-progress-bar&gt;
&lt;/section&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   color = 'primary';
   mode = 'determinate';
   value = 50;
   bufferValue = 75;
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_progress_bar.jpg" alt="Progress Bar" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created progress bar using mat-progress-bar.</li>
</ul>
<h1>Angular Material 7 - Ripples</h1>
<p>The <b>&lt;mat-ripple&gt;</b>, an Angular Directive, is used to define an area depicting the user interaction.</p>
<p>In this chapter, we will showcase the configuration required to draw a ripple effect using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatRippleModule, MatCheckboxModule, MatInputModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatRippleModule, MatCheckboxModule, MatInputModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-checkbox [(ngModel)] = "centered" class = "tp-ripple-checkbox"&gt;Centered&lt;/mat-checkbox&gt;
&lt;mat-checkbox [(ngModel)] = "disabled" class = "tp-ripple-checkbox"&gt;Disabled&lt;/mat-checkbox&gt;
&lt;mat-checkbox [(ngModel)] = "unbounded" class = "tp-ripple-checkbox"&gt;Unbounded&lt;/mat-checkbox&gt;
&lt;section&gt;
   &lt;mat-form-field class = "tp-ripple-form-field"&gt;
      &lt;input matInput [(ngModel)] = "radius" type = "number" placeholder = "Radius"&gt;
   &lt;/mat-form-field&gt;
   &lt;mat-form-field class = "tp-ripple-form-field"&gt;
      &lt;input matInput [(ngModel)] = "color" type = "text" placeholder = "Color"&gt;
   &lt;/mat-form-field&gt;
&lt;/section&gt;
&lt;div class = "tp-ripple-container mat-elevation-z4"
   matRipple
   [matRippleCentered] = "centered"
   [matRippleDisabled] = "disabled"
   [matRippleUnbounded] = "unbounded"
   [matRippleRadius] = "radius"
   [matRippleColor] = "color"&gt;
   Click me
&lt;/div&gt;
</pre>
<p>Following is the content of the modified CSS file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
.tp-ripple-container {
   cursor: pointer;
   text-align: center;
   width: 300px;
   height: 300px;
   line-height: 300px;
   user-select: none;
   -webkit-user-select: none;
   -moz-user-select: none;
   -ms-user-select: none;
   -webkit-user-drag: none;
   -webkit-tap-highlight-color: transparent;
}
.tp-ripple-checkbox {
   margin: 6px 12px 6px 0;
}
.tp-ripple-form-field {
   margin: 0 12px 0 0;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import { Component } from '@angular/core';
@Component({
   selector: 'app-root',
   templateUrl: './app.component.html',
   styleUrls: ['./app.component.css']
})
export class AppComponent {
   title = 'materialApp'; 
   centered = false;
   disabled = false;
   unbounded = false;
   radius: number;
   color: string;
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_ripples.jpg" alt="Ripples" />
<h2>Details</h2>
<ul class="list">
<li><p>As first, we've created check boxes using mat-checkbox and bind them using ngModel with variables. These properties will be used to customize the ripple.</p></li>
<li><p>Then, we've created the ripple and showcased its various attributes bound with variables in .ts file.</p></li>
</ul>
<h1>Angular Material 7 - SnackBar</h1>
<p>The <b>&lt;MatSnackBar&gt;</b>, an Angular Directive, is used to show a notification bar to show on mobile devices as an alternative of dialogs/popups.</p>
<p>In this chapter, we will showcase the configuration required to show a snack bar using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatButtonModule,MatSnackBarModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatButtonModule,MatSnackBarModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;button mat-button (click)="openSnackBar('Party', 'act')"&gt;Show snack-bar&lt;/button&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import {Component, Injectable} from '@angular/core';
import { MatSnackBar } from "@angular/material";
@Component({
   selector: 'app-root',
   templateUrl: 'app.component.html',
   styleUrls: ['app.component.css']
})
export class AppComponent {
   constructor(public snackBar: MatSnackBar) {}
   openSnackBar(message: string, action: string) {
      this.snackBar.open(message, action, {
         duration: 2000,
      });
   } 
}   
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_snackbar.jpg" alt="SnackBar" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created a button using mat-button on whose click we shows the snack bar.</li>
</ul>
<h1>Angular Material 7 - Tooltip</h1>
<p>The <b>&lt;MatTooltip&gt;</b>, an Angular Directive, is used to show a material styled tooltip.</p>
<p>In this chapter, we will showcase the configuration required to show a tooltip using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatButtonModule,MatTooltipModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatButtonModule,MatTooltipModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;button mat-raised-button
   matTooltip = "Sample Tooltip"
   aria-label = "Sample Tooltip"&gt;
   Click Me!
&lt;/button&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_tooltip.jpg" alt="Tooltip" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created a button using mat-button on hover, we'll show a tooltip.</li>
</ul>
<h1>Angular Material 7 - Paginator</h1>
<p>The <b>&lt;mat-paginator&gt;</b>, an Angular Directive, is used to show a navigator with paged information.</p>
<p>In this chapter, we will showcase the configuration required to show a paginator using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatPaginatorModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatPaginatorModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;mat-paginator [length] = "100"
   [pageSize] = "10"
   [pageSizeOptions] = "[5, 10, 25, 100]"
   (page) = "pageEvent = $event"&gt;
&lt;/mat-paginator&gt;
&lt;div *ngIf = "pageEvent"&gt;
   &lt;h5&gt;Page Change Event&lt;/h5&gt;
   &lt;div&gt;List length: {{pageEvent.length}}&lt;/div&gt;
   &lt;div&gt;Page size: {{pageEvent.pageSize}}&lt;/div&gt;
   &lt;div&gt;Page index: {{pageEvent.pageIndex}}&lt;/div&gt;
&lt;/div&gt;
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_paginator.jpg" alt="Paginator" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created a paginator using mat-paginator and handles its change event.</li>
</ul>
<h1>Angular Material 7 - Sort Header</h1>
<p>The <b>&lt;mat-sort-header&gt;</b> and  <b>matSort</b>, an Angular Directives, are used to add sorting capability to a table header.</p>
<p>In this chapter, we will showcase the configuration required to show a Sort Header using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatSortModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatSortModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;table matSort (matSortChange) = "sortFood($event)"&gt;
   &lt;tr&gt;
      &lt;th mat-sort-header = "name"&gt;Dessert (100g)&lt;/th&gt;
      &lt;th mat-sort-header = "calories"&gt;Calories&lt;/th&gt;
      &lt;th mat-sort-header = "fat"&gt;Fat (g)&lt;/th&gt;
      &lt;th mat-sort-header = "carbs"&gt;Carbs (g)&lt;/th&gt;
      &lt;th mat-sort-header = "protein"&gt;Protein (g)&lt;/th&gt;
   &lt;/tr&gt;
   &lt;tr *ngFor = "let food of sortedFood"&gt;
      &lt;td&gt;{{food.name}}&lt;/td&gt;
      &lt;td&gt;{{food.calories}}&lt;/td&gt;
      &lt;td&gt;{{food.fat}}&lt;/td&gt;
      &lt;td&gt;{{food.carbs}}&lt;/td&gt;
      &lt;td&gt;{{food.protein}}&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import {Component, Injectable} from '@angular/core';
import {Sort} from '@angular/material';
export interface Food {
   calories: number;
   carbs: number;
   fat: number;
   name: string;
   protein: number;
}
@Component({
   selector: 'app-root',
   templateUrl: 'app.component.html',
   styleUrls: ['app.component.css']
})
export class AppComponent { 
   foods: Food[] = [
      {name: 'Yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},
      {name: 'Sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},
      {name: 'Eclairs', calories: 262, fat: 16, carbs: 24, protein: 6},
      {name: 'Cupcakes', calories: 305, fat: 4, carbs: 67, protein: 4},
      {name: 'Gingerbreads', calories: 356, fat: 16, carbs: 49, protein: 4},
   ];
   sortedFood: Food[];
   constructor() {
      this.sortedFood = this.foods.slice();
   }
   sortFood(sort: Sort) {
      const data = this.foods.slice();
      if (!sort.active || sort.direction === '') {
         this.sortedFood = data;
         return;
      }
      this.sortedFood = data.sort((a, b) =&gt; {
         const isAsc = sort.direction === 'asc';
         switch (sort.active) {
            case 'name': return compare(a.name, b.name, isAsc);
            case 'calories': return compare(a.calories, b.calories, isAsc);
            case 'fat': return compare(a.fat, b.fat, isAsc);
            case 'carbs': return compare(a.carbs, b.carbs, isAsc);
            case 'protein': return compare(a.protein, b.protein, isAsc);
            default: return 0;
         } 
      });
   }
}
function compare(a: number | string, b: number | string, isAsc: boolean) {
   return (a &lt; b ? -1 : 1) * (isAsc ? 1 : -1);
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_sort_header.jpg" alt="Sort Header" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created a table. Added matSort and handles its matSortChange event.</li>
</ul>
<h1>Angular Material 7 - Table</h1>
<p>The <b>&lt;mat-table&gt;</b>, an Angular Directives, is used to create table with material design and styling.</p>
<p>In this chapter, we will showcase the configuration required to show a Table using Angular Material.</p>
<p>Following is the content of the modified module descriptor <b>app.module.ts</b>.</p>
<pre class="prettyprint notranslate">
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppComponent } from './app.component';
import {BrowserAnimationsModule} from '@angular/platform-browser/animations';
import {MatTableModule} from '@angular/material'
import {FormsModule, ReactiveFormsModule} from '@angular/forms';
@NgModule({
   declarations: [
      AppComponent
   ],
   imports: [
      BrowserModule,
      BrowserAnimationsModule,
      MatTableModule,
      FormsModule,
      ReactiveFormsModule
   ],
   providers: [],
   bootstrap: [AppComponent]
})
export class AppModule { }
</pre>
<p>Following is the content of the modified HTML host file <b>app.component.html</b>.</p>
<pre class="prettyprint notranslate">
&lt;table mat-table [dataSource] = "dataSource" class = "mat-elevation-z8"&gt; 
   &lt;ng-container matColumnDef = "name"&gt;
      &lt;th mat-header-cell *matHeaderCellDef&gt; Dessert (100g)&lt;/th&gt;
      &lt;td mat-cell *matCellDef = "let element"&gt; {{element.name}} &lt;/td&gt;
   &lt;/ng-container&gt;
   &lt;ng-container matColumnDef = "calories"&gt;
      &lt;th mat-header-cell *matHeaderCellDef&gt;Calories&lt;/th&gt;
      &lt;td mat-cell *matCellDef = "let element"&gt; {{element.calories}} &lt;/td&gt;
   &lt;/ng-container&gt;
   &lt;ng-container matColumnDef = "fat"&gt;
      &lt;th mat-header-cell *matHeaderCellDef&gt;Fat (g)&lt;/th&gt;
      &lt;td mat-cell *matCellDef = "let element"&gt; {{element.fat}} &lt;/td&gt;
   &lt;/ng-container&gt;
   &lt;ng-container matColumnDef = "carbs"&gt;
      &lt;th mat-header-cell *matHeaderCellDef&gt;Carbs (g)&lt;/th&gt;
      &lt;td mat-cell *matCellDef = "let element"&gt; {{element.carbs}} &lt;/td&gt;
   &lt;/ng-container&gt;
   &lt;ng-container matColumnDef = "protein"&gt;
      &lt;th mat-header-cell *matHeaderCellDef&gt;Protein (g)&lt;/th&gt;
     &lt;td mat-cell *matCellDef = "let element"&gt; {{element.protein}} &lt;/td&gt;
   &lt;/ng-container&gt; 
   &lt;tr mat-header-row *matHeaderRowDef = "displayedColumns"&gt;&lt;/tr&gt;
   &lt;tr mat-row *matRowDef = "let row; columns: displayedColumns;"&gt;&lt;/tr&gt;
&lt;/table&gt;
</pre>
<p>Following is the content of the modified ts file <b>app.component.css</b>.</p>
<pre class="prettyprint notranslate">
table {
   width: 100%;
}
</pre>
<p>Following is the content of the modified ts file <b>app.component.ts</b>.</p>
<pre class="prettyprint notranslate">
import {Component, Injectable} from '@angular/core';
import {Sort} from '@angular/material';
export interface Food {
   calories: number;
   carbs: number;
   fat: number;
   name: string;
   protein: number;
}
@Component({
   selector: 'app-root',
   templateUrl: 'app.component.html',
   styleUrls: ['app.component.css']
})
export class AppComponent { 
   dataSource: Food[] = [
      {name: 'Yogurt', calories: 159, fat: 6, carbs: 24, protein: 4},
      {name: 'Sandwich', calories: 237, fat: 9, carbs: 37, protein: 4},
      {name: 'Eclairs', calories: 262, fat: 16, carbs: 24, protein: 6},
      {name: 'Cupcakes', calories: 305, fat: 4, carbs: 67, protein: 4},
      {name: 'Gingerbreads', calories: 356, fat: 16, carbs: 49, protein: 4},
   ];
   displayedColumns: string[] = ['name', 'calories', 'fat', 'carbs','protein'];
}
</pre>
<h2>Result</h2>
<p>Verify the result.</p>
<img src="/angular_material7/images/angular_material7_table.jpg" alt="Table" />
<h2>Details</h2>
<ul class="list">
<li>Here, we've created a table. Added mat-Table and handles tr and th using mat-row and mat-header-row.</li>
</ul>
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/angular_material7/angular_material7_table.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/angular_material7/angular_material7_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
