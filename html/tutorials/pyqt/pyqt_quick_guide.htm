<!DOCTYPE html>
<html lang="en-US">
<head>
<title>PyQt - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="PyQt - Quick Guide - PyQt is a GUI widgets toolkit. It is a Python interface for Qt, one of the most powerful, and popular cross-platform GUI library. PyQt was developed by RiverBan"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/pyqt/pyqt_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#519B0C;
}
a.demo {
    background:#519B0C;
}
li.heading {
    background:#519B0C;
}
.course-box{background:#519B0C}
.home-intro-sub p{color:#519B0C}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/pyqt/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/pyqt/images/pyqt-mini-logo.jpg" alt="PyQt Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">PyQt Tutorial</li>
<li><a href="/pyqt/index.htm">PyQt - Home</a></li>
<li><a href="/pyqt/pyqt_introduction.htm">PyQt - Introduction</a></li>
<li><a href="/pyqt/pyqt_hello_world.htm">PyQt - Hello World</a></li>
<li><a href="/pyqt/pyqt_major_classes.htm">PyQt - Major Classes</a></li>
<li><a href="/pyqt/pyqt_using_qt_designer.htm">PyQt - Using Qt Designer</a></li>
<li><a href="/pyqt/pyqt_signals_and_slots.htm">PyQt - Signals and Slots</a></li>
<li><a href="/pyqt/pyqt_layout_management.htm">PyQt - Layout Management</a></li>
<li><a href="/pyqt/pyqt_basic_widgets.htm">PyQt - Basic Widgets</a></li>
<li><a href="/pyqt/pyqt_qdialog_class.htm">PyQt - QDialog Class</a></li>
<li><a href="/pyqt/pyqt_qmessagebox.htm">PyQt - QMessageBox</a></li>
<li><a href="/pyqt/pyqt_multiple_document_interface.htm">PyQt - Multiple Document Interface</a></li>
<li><a href="/pyqt/pyqt_drag_and_drop.htm">PyQt - Drag and Drop</a></li>
<li><a href="/pyqt/pyqt_database_handling.htm">PyQt - Database Handling</a></li>
<li><a href="/pyqt/pyqt_drawing_api.htm">PyQt - Drawing API</a></li>
<li><a href="/pyqt/pyqt_brushstyle_constants.htm">PyQt - BrushStyle Constants</a></li>
<li><a href="/pyqt/pyqt_qclipboard.htm">PyQt - QClipboard</a></li>
<li><a href="/pyqt/pyqt_qpixmap_class.htm">PyQt - QPixmap Class</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">PyQt Useful Resources</li>
<li><a href="/pyqt/pyqt_quick_guide.htm">PyQt - Quick Guide</a></li>
<li><a href="/pyqt/pyqt_useful_resources.htm">PyQt - Useful Resources</a></li>
<li><a href="/pyqt/pyqt_discussion.htm">PyQt - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>PyQt - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/pyqt/pyqt_qpixmap_class.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/pyqt/pyqt_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>PyQt - Introduction</h1>
<p>PyQt is a GUI widgets toolkit. It is a Python interface for <b>Qt</b>, one of the most powerful, and popular cross-platform GUI library. PyQt was developed by RiverBank Computing Ltd. The latest version of PyQt can be downloaded from its official website &minus; <a target="_blank" rel="nofollow" href="https://riverbankcomputing.com/software/pyqt/download">riverbankcomputing.com</a></p>
<p>PyQt API is a set of modules containing a large number of classes and functions. While <b>QtCore</b> module contains non-GUI functionality for working with file and directory etc., <b>QtGui</b> module contains all the graphical controls. In addition, there are modules for working with XML <b>(QtXml)</b>, SVG <b>(QtSvg)</b>, and SQL <b>(QtSql)</b>, etc.</p>
<h2>Supporting Environments</h2>
<p>PyQt is compatible with all the popular operating systems including Windows, Linux, and Mac OS. It is dual licensed, available under GPL as well as commercial license.</p>
<h3>Windows</h3>
<p>You can download and install an appropriate installer from the above download link corresponding to Python version (2.7 or 3.4) and hardware architecture (32 bit or 64 bit). Note that there are two versions of PyQt that are available namely, <b>PyQt 4.8</b> and <b>PyQt 5.5</b>.</p>
<p>While PyQt4 is available for Python 2 as well as Python 3, PyQt5 can be used along with Python 3.* only.</p>
<p style="text-align:center"><b>PyQt4 Windows Binaries</b></p>
<table class="table table-bordered">
<tr>
<td>PyQt4-4.11.4-gpl-Py3.4-Qt4.8.7-x64.exe</td>
<td>Windows 64 bit installer</td>
</tr>
<tr>
<td>PyQt4-4.11.4-gpl-Py3.4-Qt4.8.7-x32.exe</td>
<td>Windows 32 bit installer</td>
</tr>
<tr>
<td>PyQt4-4.11.4-gpl-Py3.4-Qt5.5.0-x64.exe</td>
<td>Windows 64 bit installer</td>
</tr>
<tr>
<td>PyQt4-4.11.4-gpl-Py3.4-Qt5.5.0-x32.exe</td>
<td>Windows 32 bit installer</td>
</tr>
<tr>
<td>PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7-x64.exe</td>
<td>Windows 64 bit installer</td>
</tr>
<tr>
<td>PyQt4-4.11.4-gpl-Py2.7-Qt4.8.7-x32.exe</td>
<td>Windows 32 bit installer</td>
</tr>
</table>
<p style="text-align:center"><b>PyQt5 Windows Binaries</b></p>
<table class="table table-bordered">
<tr>
<td>PyQt5-5.5-gpl-Py3.4-Qt5.5.0-x64.exe</td>
<td>Windows 64 bit installer</td>
</tr>
<tr>
<td>PyQt5-5.5-gpl-Py3.4-Qt5.5.0-x32.exe</td>
<td>Windows 32 bit installer</td>
</tr>
</table>
<h3>Linux</h3>
<p>For Ubuntu or any other debian Linux distribution, use the following command to install PyQt &minus;</p>
<pre class="result notranslate">
sudo apt-get install python-qt4
<b>or </b>
sudo apt-get install pyqt5-dev-tools
</pre>
<p>You can also build from the source code available on the ‘download’ page.</p>
<table class="table table-bordered">
<tr>
<td>PyQt-x11-gpl-4.11.4.tar.gz</td>
<td>Linux, UNIX source for PyQt4</td>
</tr>
<tr>
<td>PyQt-gpl-5.5.tar.gz</td>
<td>Linux, UNIX, MacOS/X source for PyQt5</td>
</tr>
</table>
<h3>Mac OS</h3>
<p>PyQtX project (<!--<a target="_blank" rel="nofollow" href="http://sourceforge.net/projects/pyqtx/">--><b>http://sourceforge.net/projects/pyqtx/</b><!--</a>-->) hosts binaries of PyQt for Mac. Use Homebrew installer as per the following command &minus;</p>
<pre class="result notranslate">
brew install pyqt
</pre>
<h1>PyQt - Hello World</h1>
<p>Creating a simple GUI application using PyQt involves the following steps &minus;</p>
<ul class="list">
<li><p>Import QtGui module.</p></li>
<li><p>Create an application object.</p></li>
<li><p>A QWidget object creates top level window. Add QLabel object in it.</p></li>
<li><p>Set the caption of label as “hello world”.</p></li>
<li><p>Define the size and position of window by setGeometry() method.</p></li>
<li><p>Enter the mainloop of application by <b>app.exec_()</b> method.</p></li>
</ul>
<pre class="prettyprint notranslate">
import sys
from PyQt4 import QtGui

def window():
   app = QtGui.QApplication(sys.argv)
   w = QtGui.QWidget()
   b = QtGui.QLabel(w)
   b.setText("Hello World!")
   w.setGeometry(100,100,200,50)
   b.move(50,20)
   w.setWindowTitle(“PyQt”)
   w.show()
   sys.exit(app.exec_())
	
if __name__ == '__main__':
   window()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/hello_world.jpg" alt="Hello World" />
<h1>PyQt - Major Classes</h1>
<p><b>PyQt API</b> is a large collection of classes and methods. These classes are defined in more than 20 modules. Following are some of the frequently used modules &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:10%;">Sr.No.</th>
<th style="text-align:center;">Modules &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>QtCore</b></p>
<p>Core non-GUI classes used by other modules</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>QtGui</b></p>
<p>Graphical user interface components</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>QtMultimedia</b></p>
<p>Classes for low-level multimedia programming</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>QtNetwork</b></p>
<p>Classes for network programming</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>QtOpenGL</b></p>
<p>OpenGL support classes</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>QtScript</b></p>
<p>Classes for evaluating Qt Scripts</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>QtSql</b></p>
<p>Classes for database integration using SQL</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>QtSvg</b></p>
<p>Classes for displaying the contents of SVG files</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>QtWebKit</b></p>
<p>Classes for rendering and editing HTML</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>QtXml</b></p>
<p>Classes for handling XML</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>QtAssistant</b></p>
<p>Support for online help</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>QtDesigner</b></p>
<p>Classes for extending Qt Designer</p></td>
</tr>
</table>
<p>PyQt API contains more than 400 classes. The <b>QObject</b> class is at the top of class hierarchy. It is the base class of all Qt objects. Additionally, <b>QPaintDevice</b> class is the base class for all objects that can be painted.</p>
<p><b>QApplication</b> class manages the main settings and control flow of a GUI application. It contains main event loop inside which events generated by window elements and other sources are processed and dispatched. It also handles system-wide and application-wide settings.</p>
<p><b>QWidget</b> class, derived from QObject and QPaintDevice classes is the base class for all user interface objects. <b>QDialog</b> and <b>QFrame</b> classes are also derived from QWidget class. They have their own sub-class system.</p>
<p>Following diagrams depict some important classes in their hierarchy.</p>
<img src="/pyqt/images/hierarchy.jpg" alt="Hierarchy" />
<img src="/pyqt/images/qwidget.jpg" alt="QWidget" />
<img src="/pyqt/images/qdialog.jpg" alt="QDialog" />
<img src="/pyqt/images/qiodevice.jpg" alt="QIODevice" />
<img src="/pyqt/images/qpaintdevice.jpg" alt="QPaintDevice" />
<p>Here is a select list of frequently used widgets &minus;</p>
<section class="toggle">
<label>Given below are the commonly used Widgets.</label>
<div class="toggle-content">
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Widgets &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>QLabel</b></p>
<p>Used to display text or image</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>QLineEdit</b></p>
<p>Allows the user to enter one line of text</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>QTextEdit</b></p>
<p>Allows the user to enter multi-line text</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>QPushButton</b></p>
<p>A command button to invoke action</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>QRadioButton</b></p>
<p>Enables to choose one from multiple options</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>QCheckBox</b></p>
<p>Enables choice of more than one options</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>QSpinBox</b></p>
<p>Enables to increase/decrease an integer value</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>QScrollBar</b></p>
<p>Enables to access contents of a widget beyond display aperture</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>QSlider</b></p>
<p>Enables to change the bound value linearly.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>QComboBox</b></p>
<p>Provides a dropdown list of items to select from</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>QMenuBar</b></p>
<p>Horizontal bar holding QMenu objects</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td>
<p><b>QStatusBar</b></p>
<p>Usually at bottom of QMainWindow, provides status information.</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td>
<p><b>QToolBar</b></p>
<p>Usually at top of QMainWindow or floating. Contains action buttons</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td>
<p><b>QListView</b></p>
<p>Provides a selectable list of items in ListMode or IconMode</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td>
<p><b>QPixmap</b></p>
<p>Off-screen image representation for display on QLabel or QPushButton object</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td>
<p><b>QDialog</b></p>
<p>Modal or modeless window which can return information to parent window</p></td>
</tr>
</table>
</div>
</section>
<p>A typical GUI based application’s top level window is created by <b>QMainWindow</b> widget object. Some widgets as listed above take their appointed place in this main window, while others are placed in the central widget area using various layout managers.</p>
<p>The following diagram shows the QMainWindow framework &minus;</p>
<img src="/pyqt/images/qmainwindow.jpg" alt="QMainWindow" />
<h1>PyQt - Using Qt Designer</h1>
<p>The PyQt installer comes with a GUI builder tool called <b>Qt Designer</b>. Using its simple drag and drop interface, a GUI interface can be quickly built without having to write the code. It is however, not an IDE such as Visual Studio. Hence, Qt Designer does not have the facility to debug and build the application.</p>
<p>Creation of a GUI interface using Qt Designer starts with choosing a top level window for the application.</p>
<img src="/pyqt/images/qt_designer1.jpg" alt="Qt Designer1" />
<p>You can then drag and drop required widgets from the widget box on the left pane. You can also assign value to properties of widget laid on the form.</p>
<img src="/pyqt/images/qt_designer2.jpg" alt="Qt Designer2" />
<p>The designed form is saved as demo.ui. This ui file contains XML representation of widgets and their properties in the design. This design is translated into Python equivalent by using pyuic4 command line utility. This utility is a wrapper for uic module. The usage of pyuic4 is as follows &minus;</p>
<pre class="result notranslate">
pyuic4 –x demo.ui –o demo.py
</pre>
<p>In the above command, -x switch adds a small amount of additional code to the generated XML so that it becomes a self-executable standalone application.</p>
<pre class="prettyprint notranslate">
if __name__ == "__main__":
   import sys
   app = QtGui.QApplication(sys.argv)
   Dialog = QtGui.QDialog()
   ui = Ui_Dialog()
   ui.setupUi(Dialog)
   Dialog.show()
   sys.exit(app.exec_())
</pre>
<p>The resultant python script is executed to show the following dialog box &minus;</p>
<img src="/pyqt/images/dialog_box.jpg" alt="Dialog Box" />
<p>The user can input data in input fields but clicking on Add button will not generate any action as it is not associated with any function. Reacting to user-generated response is called as <b>event handling</b>.</p>
<h1>PyQt - Signals &amp; Slots</h1>
<p>Unlike a console mode application, which is executed in a sequential manner, a GUI based application is event driven. Functions or methods are executed in response to user’s actions like clicking on a button, selecting an item from a collection or a mouse click etc., called <b>events</b>.</p>
<p>Widgets used to build the GUI interface act as the source of such events. Each PyQt widget, which is derived from QObject class, is designed to emit ‘<b>signal</b>’ in response to one or more events. The signal on its own does not perform any action. Instead, it is ‘connected’ to a ‘<b>slot</b>’. The slot can be any <b>callable Python function</b>.</p>
<p>In PyQt, connection between a signal and a slot can be achieved in different ways. Following are most commonly used techniques &minus;</p>
<pre class="result notranslate">
QtCore.QObject.connect(widget, QtCore.SIGNAL(‘signalname’), slot_function)
</pre>
<p>A more convenient way to call a slot_function, when a signal is emitted by a widget is as follows &minus;</p>
<pre class="result notranslate">
widget.signal.connect(slot_function)
</pre>
<p>Suppose if a function is to be called when a button is clicked. Here, the clicked signal is to be connected to a callable function. It can be achieved in any of the following two techniques &minus;</p>
<pre class="result notranslate">
QtCore.QObject.connect(button, QtCore.SIGNAL(“clicked()”), slot_function)
</pre>
<p>or</p>
<pre class="result notranslate">
button.clicked.connect(slot_function)
</pre>
<h2>Example</h2>
<p>In the following example, two QPushButton objects (b1 and b2) are added in QDialog window. We want to call functions b1_clicked() and b2_clicked() on clicking b1 and b2 respectively.</p>
<p>When b1 is clicked, the clicked() signal is connected to b1_clicked() function</p>
<pre class="result notranslate">
b1.clicked.connect(b1_clicked())
</pre>
<p>When b2 is clicked, the clicked() signal is connected to b2_clicked() function</p>
<pre class="result notranslate">
QObject.connect(b2, SIGNAL("clicked()"), b2_clicked)
</pre>
<h2>Example</h2>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *

def window():
   app = QApplication(sys.argv)
   win = QDialog()
   b1 = QPushButton(win)
   b1.setText("Button1")
   b1.move(50,20)
   b1.clicked.connect(b1_clicked)

   b2 = QPushButton(win)
   b2.setText("Button2")
   b2.move(50,50)
   QObject.connect(b2,SIGNAL("clicked()"),b2_clicked)

   win.setGeometry(100,100,200,100)
   win.setWindowTitle("PyQt")
   win.show()
   sys.exit(app.exec_())

def b1_clicked():
   print "Button 1 clicked"

def b2_clicked():
   print "Button 2 clicked"

if __name__ == '__main__':
   window()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/signals_and_slots_output.jpg" alt="Signals and Slots Output" />
<h3>Output</h3>
<pre class="result notranslate">
Button 1 clicked
Button 2 clicked
</pre>
<h1>PyQt - Layout Management</h1>
<p>A GUI widget can be placed inside the container window by specifying its absolute coordinates measured in pixels. The coordinates are relative to the dimensions of the window defined by setGeometry() method.</p>
<h2>setGeometry() syntax</h2>
<pre class="result notranslate">
QWidget.setGeometry(xpos, ypos, width, height)
</pre>
<p>In the following code snippet, the top level window of 300 by 200 pixels dimensions is displayed at position (10, 10) on the monitor.</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4 import QtGui

def window():
   app = QtGui.QApplication(sys.argv)
   w = QtGui.QWidget()
	
   b = QtGui.QPushButton(w)
   b.setText("Hello World!")
   b.move(50,20)
	
   w.setGeometry(10,10,300,200)
   w.setWindowTitle(“PyQt”)
   w.show()
   sys.exit(app.exec_())
	
if __name__ == '__main__':
   window()
</pre>
<p>A <b>PushButton</b> widget is added in the window and placed at a position 50 pixels towards right and 20 pixels below the top left position of the window.</p>
<p>This <b>Absolute Positioning</b>, however, is not suitable because of following reasons &minus;</p>
<ul class="list">
<li><p>The position of the widget does not change even if the window is resized.</p></li>
<li><p>The appearance may not be uniform on different display devices with different resolutions.</p></li>
<li><p>Modification in the layout is difficult as it may need redesigning the entire form.</p></li>
</ul>
<img src="/pyqt/images/original_resized_window.jpg" alt="Original and Resized Window" />
<p>PyQt API provides layout classes for more elegant management of positioning of widgets inside the container. The advantages of Layout managers over absolute positioning are &minus;</p>
<ul class="list">
<li><p>Widgets inside the window are automatically resized.</p></li>
<li><p>Ensures uniform appearance on display devices with different resolutions.</p></li>
<li><p>Adding or removing widget dynamically is possible without having to redesign.</p></li>
</ul>
<p>Here is the list of Classes which we will discuss one by one in this chapter.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:10%">Sr.No.</th>
<th style="text-align:center;">Classes &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/pyqt/pyqt_qboxlayout_class.htm">QBoxLayout</a>
<p>QBoxLayout class lines up the widgets vertically or horizontally. Its derived classes are QVBoxLayout (for arranging widgets vertically) and QHBoxLayout (for arranging widgets horizontally).</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/pyqt/pyqt_qgridlayout_class.htm">QGridLayout</a>
<p>A GridLayout class object presents with a grid of cells arranged in rows and columns. The class contains addWidget() method. Any widget can be added by specifying the number of rows and columns of the cell.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/pyqt/pyqt_qformlayout_class.htm">QFormLayout</a>
<p>QFormLayout is a convenient way to create two column form, where each row consists of an input field associated with a label. As a convention, the left column contains the label and the right column contains an input field.</p></td>
</tr>
</table>
<h1>PyQt - Basic Widgets</h1>
<p>Here is the list of Widgets which we will discuss one by one in this chapter.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No</th>
<th style="text-align:center;">Widgets &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><a href="/pyqt/pyqt_qlabel_widget.htm">QLabel</a>
<p>A QLabel object acts as a placeholder to display non-editable text or image, or a movie of animated GIF. It can also be used as a mnemonic key for other widgets.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><a href="/pyqt/pyqt_qlineedit_widget.htm">QLineEdit</a>
<p>QLineEdit object is the most commonly used input field. It provides a box in which one line of text can be entered. In order to enter multi-line text, QTextEdit object is required.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><a href="/pyqt/pyqt_qpushbutton_widget.htm">QPushButton</a>
<p>In PyQt API, the QPushButton class object presents a button which when clicked can be programmed to invoke a certain function.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><a href="/pyqt/pyqt_qradiobutton_widget.htm">QRadioButton</a>
<p>A QRadioButton class object presents a selectable button with a text label. The user can select one of many options presented on the form. This class is derived from QAbstractButton class.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><a href="/pyqt/pyqt_qcheckbox_widget.htm">QCheckBox</a>
<p>A rectangular box before the text label appears when a QCheckBox object is added to the parent window. Just as QRadioButton, it is also a selectable button.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><a href="/pyqt/pyqt_qcombobox_widget.htm">QComboBox</a>
<p>A QComboBox object presents a dropdown list of items to select from. It takes minimum screen space on the form required to display only the currently selected item.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><a href="/pyqt/pyqt_qspinbox_widget.htm">QSpinBox</a>
<p>A QSpinBox object presents the user with a textbox which displays an integer with up/down button on its right.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><a href="/pyqt/pyqt_qslider_widget_signal.htm">QSlider Widget &amp; Signal</a>
<p>QSlider class object presents the user with a groove over which a handle can be moved. It is a classic widget to control a bounded value.</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td><a href="/pyqt/qmenubar_qmenu_qaction_widgets.htm">QMenuBar, QMenu &amp; QAction</a>
<p>A horizontal QMenuBar just below the title bar of a QMainWindow object is reserved for displaying QMenu objects.</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td><a href="/pyqt/pyqt_qtoolbar_widget.htm">QToolBar</a>
<p>A QToolBar widget is a movable panel consisting of text buttons, buttons with icons or other widgets.</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td><a href="/pyqt/pyqt_qinputdialog_widget.htm">QInputDialog</a>
<p>This is a preconfigured dialog with a text field and two buttons, OK and Cancel. The parent window collects the input in the text box after the user clicks on Ok button or presses Enter.</p></td>
</tr>
<tr>
<td class="ts">12</td>
<td><a href="/pyqt/pyqt_qfontdialog_widget.htm">QFontDialog</a>
<p>Another commonly used dialog, a font selector widget is the visual appearance of QDialog class. Result of this dialog is a Qfont object, which can be consumed by the parent window.</p></td>
</tr>
<tr>
<td class="ts">13</td>
<td><a href="/pyqt/pyqt_qfiledialog_widget.htm">QFileDialog</a>
<p>This widget is a file selector dialog. It enables the user to navigate through the file system and select a file to open or save. The dialog is invoked either through static functions or by calling exec_() function on the dialog object.</p></td>
</tr>
<tr>
<td class="ts">14</td>
<td><a href="/pyqt/pyqt_qtabwidget.htm">QTab</a>
<p>If a form has too many fields to be displayed simultaneously, they can be arranged in different pages placed under each tab of a Tabbed Widget. The QTabWidget provides a tab bar and a page area.</p></td>
</tr>
<tr>
<td class="ts">15</td>
<td><a href="/pyqt/pyqt_qstackedwidget.htm">QStacked</a>
<p>Functioning of QStackedWidget is similar to QTabWidget. It also helps in the efficient use of window’s client area.</p></td>
</tr>
<tr>
<td class="ts">16</td>
<td><a href="/pyqt/pyqt_qsplitter_widget.htm">QSplitter</a>
<p>This is another advanced layout manager which allows the size of child widgets to be changed dynamically by dragging the boundaries between them. The Splitter control provides a handle that can be dragged to resize the controls.</p></td>
</tr>
<tr>
<td class="ts">17</td>
<td><a href="/pyqt/pyqt_qdockwidget.htm">QDock</a>
<p>A dockable window is a subwindow that can remain in floating state or can be attached to the main window at a specified position. Main window object of QMainWindow class has an area reserved for dockable windows.</p></td>
</tr>
<tr>
<td class="ts">18</td>
<td><a href="/pyqt/pyqt_qstatusbar_widget.htm">QStatusBar</a>
<p>QMainWindow object reserves a horizontal bar at the bottom as the status bar. It is used to display either permanent or contextual status information.</p></td>
</tr>
<tr>
<td class="ts">19</td>
<td><a href="/pyqt/pyqt_qlistwidget.htm">QList</a>
<p>QListWidget class is an item-based interface to add or remove items from a list. Each item in the list is a QListWidgetItem object. ListWidget can be set to be multiselectable.</p></td>
</tr>
<tr>
<td class="ts">20</td>
<td><a href="/pyqt/pyqt_qscrollbar_widget.htm">QScrollBar</a>
<p>A scrollbar control enables the user to access parts of the document that is outside the viewable area. It provides visual indicator to the current position.</p></td>
</tr>
<tr>
<td class="ts">21</td>
<td><a href="/pyqt/pyqt_qcalender_widget.htm">QCalendar</a>
<p>QCalendar widget is a useful date picker control. It provides a month-based view. The user can select the date by the use of the mouse or the keyboard, the default being today’s date.</p></td>
</tr>
</table>
<h1>PyQt - QDialog Class</h1>
<p>A <b>QDialog</b> widget presents a top level window mostly used to collect response from the user. It can be configured to be <b>Modal</b> (where it blocks its parent window) or <b>Modeless</b> (the dialog window can be bypassed).</p>
<p>PyQt API has a number of preconfigured Dialog widgets such as InputDialog, FileDialog, FontDialog, etc.</p>
<h2>Example</h2>
<p>In the following example, WindowModality attribute of Dialog window decides whether it is modal or modeless. Any one button on the dialog can be set to be default. The dialog is discarded by QDialog.reject() method when the user presses the Escape key.</p>
<p>A PushButton on a top level QWidget window, when clicked, produces a Dialog window. A Dialog box doesn’t have minimize and maximize controls on its title bar.</p>
<p>The user cannot relegate this dialog box in the background because its WindowModality is set to ApplicationModal.</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

def window():
   app = QApplication(sys.argv)
   w = QWidget()
   b = QPushButton(w)
   b.setText("Hello World!")
   b.move(50,50)
   b.clicked.connect(showdialog)
   w.setWindowTitle("PyQt Dialog demo")
   w.show()
   sys.exit(app.exec_())
	
def showdialog():
   d = QDialog()
   b1 = QPushButton("ok",d)
   b1.move(50,50)
   d.setWindowTitle("Dialog")
   d.setWindowModality(Qt.ApplicationModal)
   d.exec_()
	
if __name__ == '__main__':
   window()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/qdialog_class_output.jpg" alt="QDialog Class Output" />
<h1>PyQt - QMessageBox</h1>
<p><b>QMessageBox</b> is a commonly used modal dialog to display some informational message and optionally ask the user to respond by clicking any one of the standard buttons on it. Each standard button has a predefined caption, a role and returns a predefined hexadecimal number.</p>
<p>Important methods and enumerations associated with QMessageBox class are given in the following table &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>setIcon()</b></p>
<p>Displays predefined icon corresponding to severity of the message</p>
<p><img class="inline" src="/pyqt/images/question.jpg" alt="Question" /> Question</p>
<p><img class="inline" src="/pyqt/images/information.jpg" alt="Information" /> Information</p>
<p><img class="inline" src="/pyqt/images/warning.jpg" alt="Warning" /> Warning</p>
<p><img class="inline" src="/pyqt/images/critical.jpg" alt="Critical" /> Critical</p>
</td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>setText()</b></p>
<p>Sets the text of the main message to be displayed</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>setInformativeText()</b></p>
<p>Displays additional information</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>setDetailText()</b></p>
<p>Dialog shows a Details button. This text appears on clicking it</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>setTitle()</b></p>
<p>Displays the custom title of dialog</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>setStandardButtons()</b></p>
<p>List of standard buttons to be displayed. Each button is associated with</p>
<p>QMessageBox.Ok 0x00000400</p>
<p>QMessageBox.Open 0x00002000</p>
<p>QMessageBox.Save 0x00000800</p>
<p>QMessageBox.Cancel 0x00400000</p>
<p>QMessageBox.Close 0x00200000</p>
<p>QMessageBox.Yes 0x00004000</p>
<p>QMessageBox.No 0x00010000</p>
<p>QMessageBox.Abort 0x00040000</p>
<p>QMessageBox.Retry 0x00080000</p>
<p>QMessageBox.Ignore 0x00100000</p>
</td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>setDefaultButton()</b></p>
<p>Sets the button as default. It emits the clicked signal if Enter is pressed</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>setEscapeButton()</b></p>
<p>Sets the button to be treated as clicked if the escape key is pressed</p></td>
</tr>
</table>
<h2>Example</h2>
<p>In the following example, click signal of the button on the top level window, the connected function displays the messagebox dialog.</p>
<pre class="result notranslate">
msg = QMessageBox()
msg.setIcon(QMessageBox.Information)
msg.setText("This is a message box")
msg.setInformativeText("This is additional information")
msg.setWindowTitle("MessageBox demo")
msg.setDetailedText("The details are as follows:")
</pre>
<p>setStandardButton() function displays desired buttons.</p>
<pre class="result notranslate">
msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
</pre>
<p>buttonClicked() signal is connected to a slot function, which identifies the caption of source of the signal.</p>
<pre class="result notranslate">
msg.buttonClicked.connect(msgbtn)
</pre>
<p>The complete code for the example is as follows &minus;</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

def window():
   app = QApplication(sys.argv)
   w = QWidget()
   b = QPushButton(w)
   b.setText("Show message!")

   b.move(50,50)
   b.clicked.connect(showdialog)
   w.setWindowTitle("PyQt Dialog demo")
   w.show()
   sys.exit(app.exec_())
	
def showdialog():
   msg = QMessageBox()
   msg.setIcon(QMessageBox.Information)

   msg.setText("This is a message box")
   msg.setInformativeText("This is additional information")
   msg.setWindowTitle("MessageBox demo")
   msg.setDetailedText("The details are as follows:")
   msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
   msg.buttonClicked.connect(msgbtn)
	
   retval = msg.exec_()
   print "value of pressed message box button:", retval
	
def msgbtn(i):
   print "Button pressed is:",i.text()
	
if __name__ == '__main__': 
   window()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/qmessagebox_output1.jpg" alt="QMessageBox Output1" />
<img src="/pyqt/images/qmessagebox_output2.jpg" alt="QMessageBox Output2" />
<h1>PyQt - Multiple Document Interface</h1>
<p>A typical GUI application may have multiple windows. Tabbed and stacked widgets allow to activate one such window at a time. However, many a times this approach may not be useful as view of other windows is hidden.</p>
<p>One way to display multiple windows simultaneously is to create them as independent windows. This is called as SDI (single Document Interface). This requires more memory resources as each window may have its own menu system, toolbar, etc.</p>
<p>MDI (Multiple Document Interface) applications consume lesser memory resources. The sub windows are laid down inside main container with relation to each other. The container widget is called <b>QMdiArea</b>.</p>
<p>QMdiArea widget generally occupies the central widget of QMainWondow object. Child windows in this area are instances of QMdiSubWindow class. It is possible to set any QWidget as the internal widget of subWindow object. Sub-windows in the MDI area can be arranged in cascaded or tile fashion.</p>
<p>The following table lists important methods of QMdiArea class and QMdiSubWindow class &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>addSubWindow()</b></p>
<p>Adds a widget as a new subwindow in MDI area</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>removeSubWindow()</b></p>
<p>Removes a widget that is internal widget of a subwindow</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>setActiveSubWindow()</b></p>
<p>Activates a subwindow</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>cascadeSubWindows()</b></p>
<p>Arranges subwindows in MDiArea in a cascaded fashion</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>tileSubWindows()</b></p>
<p>Arranges subwindows in MDiArea in a tiled fashion</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>closeActiveSubWindow()</b></p>
<p>Closes the active subwindow</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>subWindowList()</b></p>
<p>Returns the list of subwindows in MDI Area</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>setWidget()</b></p>
<p>Sets a QWidget as an internal widget of a QMdiSubwindow instance</p></td>
</tr>
</table>
<p>QMdiArea object emits subWindowActivated() signal whereas windowStateChanged() signal is emitted by QMdisubWindow object.</p>
<h2>Example</h2>
<p>In the following example, top level window comprising of QMainWindow has a menu and MdiArea.</p>
<pre class="prettyprint notranslate">
self.mdi = QMdiArea()
self.setCentralWidget(self.mdi)
bar = self.menuBar()
file = bar.addMenu("File")

file.addAction("New")
file.addAction("cascade")
file.addAction("Tiled")
</pre>
<p>Triggered() signal of the menu is connected to windowaction() function.</p>
<pre class="result notranslate">
file.triggered[QAction].connect(self.windowaction)
</pre>
<p>The new action of menu adds a subwindow in MDI area with a title having an incremental number to it.</p>
<pre class="prettyprint notranslate">
MainWindow.count = MainWindow.count+1
sub = QMdiSubWindow()
sub.setWidget(QTextEdit())
sub.setWindowTitle("subwindow"+str(MainWindow.count))
self.mdi.addSubWindow(sub)
sub.show()
</pre>
<p>Cascaded and tiled buttons of the menu arrange currently displayed subwindows in cascaded and tiled fashion respectively.</p>
<p>The complete code is as follows &minus;</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *

class MainWindow(QMainWindow):
   count = 0
	
   def __init__(self, parent = None):
      super(MainWindow, self).__init__(parent)
      self.mdi = QMdiArea()
      self.setCentralWidget(self.mdi)
      bar = self.menuBar()
		
      file = bar.addMenu("File")
      file.addAction("New")
      file.addAction("cascade")
      file.addAction("Tiled")
      file.triggered[QAction].connect(self.windowaction)
      self.setWindowTitle("MDI demo")
		
   def windowaction(self, q):
      print "triggered"
		
   if q.text() == "New":
      MainWindow.count = MainWindow.count+1
      sub = QMdiSubWindow()
      sub.setWidget(QTextEdit())
      sub.setWindowTitle("subwindow"+str(MainWindow.count))
      self.mdi.addSubWindow(sub)
      sub.show()
		
   if q.text() == "cascade":
      self.mdi.cascadeSubWindows()
		
   if q.text() == "Tiled":
      self.mdi.tileSubWindows()
		
   def main():
      app = QApplication(sys.argv)
      ex = MainWindow()
      ex.show()
      sys.exit(app.exec_())
	
   if __name__ == '__main__':
      main()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/multiple_document_interface_output1.jpg" alt="Multiple Document Interface Output1" />
<img src="/pyqt/images/multiple_document_interface_output2.jpg" alt="Multiple Document Interface Output2" />
<img src="/pyqt/images/multiple_document_interface_output3.jpg" alt="Multiple Document Interface Output3" />
<h1>PyQt - Drag &amp; Drop</h1>
<p>The provision of <b>drag and drop</b> is very intuitive for the user. It is found in many desktop applications where the user can copy or move objects from one window to another.</p>
<p>MIME based drag and drop data transfer is based on QDrag class. <b>QMimeData</b> objects associate the data with their corresponding MIME type. It is stored on clipboard and then used in the drag and drop process.</p>
<p>The following QMimeData class functions allow the MIME type to be detected and used conveniently.</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<th style="text-align:center;">Tester</th>
<th style="text-align:center;">Getter</th>
<th style="text-align:center;">Setter</th>
<th style="text-align:center;">MIME Types</th>
</tr>
<tr>
<td>hasText()</td>
<td>text()</td>
<td>setText()</td>
<td>text/plain</td>
</tr>
<tr>
<td>hasHtml()</td>
<td>html()</td>
<td>setHtml()</td>
<td>text/html</td>
</tr>
<tr>
<td>hasUrls()</td>
<td>urls()</td>
<td>setUrls()</td>
<td>text/uri-list</td>
</tr>
<tr>
<td>hasImage()</td>
<td>imageData()</td>
<td>setImageData()</td>
<td>image/ *</td>
</tr>
<tr>
<td>hasColor()</td>
<td>colorData()</td>
<td>setColorData()</td>
<td>application/x-color</td>
</tr>
</table>
<p>Many QWidget objects support the drag and drop activity. Those that allow their data to be dragged have setDragEnabled() which must be set to true. On the other hand, the widgets should respond to the drag and drop events in order to store the data dragged into them.</p>
<ul class="list">
<li><p><b>DragEnterEvent</b> provides an event which is sent to the target widget as dragging action enters it.</p></li>
<li><p><b>DragMoveEvent</b> is used when the drag and drop action is in progress.</p></li>
<li><p><b>DragLeaveEvent</b> is generated as the drag and drop action leaves the widget.</p></li>
<li><p><b>DropEvent</b>, on the other hand, occurs when the drop is completed. The event’s proposed action can be accepted or rejected conditionally.</p></li>
</ul>
<h2>Example</h2>
<p>In the following code, the DragEnterEvent verifies whether the MIME data of the event contains text. If yes, the event’s proposed action is accepted and the text is added as a new item in the ComboBox.</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

class combo(QComboBox):

   def __init__(self, title, parent):
      super(combo, self).__init__( parent)
	
      self.setAcceptDrops(True)
		
   def dragEnterEvent(self, e):
      print e
		
      if e.mimeData().hasText():
         e.accept()
      else:
         e.ignore()
			
   def dropEvent(self, e):
      self.addItem(e.mimeData().text())
		
class Example(QWidget):

   def __init__(self):
      super(Example, self).__init__()
		
      self.initUI()
		
   def initUI(self):
      lo = QFormLayout()
      lo.addRow(QLabel("Type some text in textbox and drag it into combo box"))
		
      edit = QLineEdit()
      edit.setDragEnabled(True)
      com = combo("Button", self)
      lo.addRow(edit,com)
      self.setLayout(lo)
      self.setWindowTitle('Simple drag &amp; drop')
		
def main():
   app = QApplication(sys.argv)
   ex = Example()
   ex.show()
   app.exec_()
	
if __name__ == '__main__':
   main()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/drag_and_drop_output.jpg" alt="Drag and Drop Output" />
<h1>PyQt - Database Handling</h1>
<p>PyQt API contains an elaborate class system to communicate with many SQL based databases. Its QSqlDatabase provides access through a Connection object. Following is the list of currently available SQL drivers &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:10%">Sr.No.</th>
<th style="text-align:center;">Driver Type &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>QDB2</b></p>
<p>IBM DB2</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>QIBASE</b></p>
<p>Borland InterBase Driver</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>QMYSQL</b></p>
<p>MySQL Driver</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>QOCI</b></p>
<p>Oracle Call Interface Driver</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>QODBC</b></p>
<p>ODBC Driver (includes Microsoft SQL Server)</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>QPSQL</b></p>
<p>PostgreSQL Driver</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>QSQLITE</b></p>
<p>SQLite version 3 or above</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>QSQLITE2</b></p>
<p>SQLite version 2</p></td>
</tr>
</table>
<h2>Example</h2>
<p>A connection with a SQLite database is established using the static method &minus;</p>
<pre class="result notranslate">
db = QtSql.QSqlDatabase.addDatabase('QSQLITE')
db.setDatabaseName('sports.db')
</pre>
<p>Other methods of QSqlDatabase class are as follows &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>setDatabaseName()</b></p>
<p>Sets the name of the database with which connection is sought</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>setHostName()</b></p>
<p>Sets the name of the host on which the database is installed</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>setUserName()</b></p>
<p>Specifies the user name for connection</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>setPassword()</b></p>
<p>Sets the connection object’s password if any</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>commit()</b></p>
<p>Commits the transactions and returns true if successful</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>rollback()</b></p>
<p>Rolls back the database transaction</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>close()</b></p>
<p>Closes the connection</p></td>
</tr>
</table>
<p>QSqlQuery class has the functionality to execute and manipulate SQL commands. Both DDL and DML type of SQL queries can be executed. The most important method in the class is exec_(), which takes as an argument a string containing SQL statement to be executed.</p>
<pre class="result notranslate">
query = QtSql.QSqlQuery()
query.exec_("create table sportsmen(id int primary key, 
   " "firstname varchar(20), lastname varchar(20))")
</pre>
<p>The following script creates a SQLite database sports.db with a table of sportsperson populated with five records.</p>
<pre class="prettyprint notranslate">
from PyQt4 import QtSql, QtGui

def createDB():
   db = QtSql.QSqlDatabase.addDatabase('QSQLITE')
   db.setDatabaseName('sports.db')
	
   if not db.open():
      QtGui.QMessageBox.critical(None, QtGui.qApp.tr("Cannot open database"),
         QtGui.qApp.tr("Unable to establish a database connection.\n"
            "This example needs SQLite support. Please read "
            "the Qt SQL driver documentation for information "
            "how to build it.\n\n" "Click Cancel to exit."),
         QtGui.QMessageBox.Cancel)
			
      return False
		
   query = QtSql.QSqlQuery()
	
   query.exec_("create table sportsmen(id int primary key, "
      "firstname varchar(20), lastname varchar(20))")
		
   query.exec_("insert into sportsmen values(101, 'Roger', 'Federer')")
   query.exec_("insert into sportsmen values(102, 'Christiano', 'Ronaldo')")
   query.exec_("insert into sportsmen values(103, 'Ussain', 'Bolt')")
   query.exec_("insert into sportsmen values(104, 'Sachin', 'Tendulkar')")
   query.exec_("insert into sportsmen values(105, 'Saina', 'Nehwal')")
   return True
	
if __name__ == '__main__':
   import sys
	
   app = QtGui.QApplication(sys.argv)
   createDB()
</pre>
<p>QSqlTableModel class in PyQt is a high-level interface that provides editable data model for reading and writing records in a single table. This model is used to populate a QTableView object. It presents to the user a scrollable and editable view that can be put on any top level window.</p>
<p>A QTableModel object is declared in the following manner &minus;</p>
<pre class="result notranslate">
model = QtSql.QSqlTableModel()
</pre>
<p>Its editing strategy can be set to any of the following &minus;</p>
<table class="table table-bordered">
<tr>
<td class="ts">QSqlTableModel.OnFieldChange</td>
<td>All changes will be applied immediately</td>
</tr>
<tr>
<td class="ts">QSqlTableModel.OnRowChange</td>
<td>Changes will be applied when the user selects a different row</td>
</tr>
<tr>
<td class="ts">QSqlTableModel.OnManualSubmit</td>
<td>All changes will be cached until either submitAll() or revertAll() is called</td>
</tr>
</table>
<h2>Example</h2>
<p>In the following example, sportsperson table is used as a model and the strategy is set as &minus;</p>
<pre class="prettyprint notranslate">
model.setTable('sportsmen') 
model.setEditStrategy(QtSql.QSqlTableModel.OnFieldChange)

   model.select()
</pre>
<p>QTableView class is part of Model/View framework in PyQt. The QTableView object is created as follows &minus;</p>
<pre class="prettyprint notranslate">
view = QtGui.QTableView()
view.setModel(model)
view.setWindowTitle(title)
return view
</pre>
<p>This QTableView object and two QPushButton widgets are added to the top level QDialog window. Clicked() signal of add button is connected to addrow() which performs insertRow() on the model table.</p>
<pre class="prettyprint notranslate">
button.clicked.connect(addrow)
def addrow():
   print model.rowCount()
   ret = model.insertRows(model.rowCount(), 1)
   print ret
</pre>
<p>The Slot associated with the delete button executes a lambda function that deletes a row, which is selected by the user.</p>
<pre class="result notranslate">
btn1.clicked.connect(lambda: model.removeRow(view1.currentIndex().row()))
</pre>
<p>The complete code is as follows &minus;</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4 import QtCore, QtGui, QtSql
import sportsconnection

def initializeModel(model):
   model.setTable('sportsmen')
   model.setEditStrategy(QtSql.QSqlTableModel.OnFieldChange)
   model.select()
   model.setHeaderData(0, QtCore.Qt.Horizontal, "ID")
   model.setHeaderData(1, QtCore.Qt.Horizontal, "First name")
   model.setHeaderData(2, QtCore.Qt.Horizontal, "Last name")
	
def createView(title, model):
   view = QtGui.QTableView()
   view.setModel(model)
   view.setWindowTitle(title)
   return view
	
def addrow():
   print model.rowCount()
   ret = model.insertRows(model.rowCount(), 1)
   print ret
	
def findrow(i):
   delrow = i.row()
	
if __name__ == '__main__':

   app = QtGui.QApplication(sys.argv)
   db = QtSql.QSqlDatabase.addDatabase('QSQLITE')
   db.setDatabaseName('sports.db')
   model = QtSql.QSqlTableModel()
   delrow = -1
   initializeModel(model)
	
   view1 = createView("Table Model (View 1)", model)
   view1.clicked.connect(findrow)
	
   dlg = QtGui.QDialog()
   layout = QtGui.QVBoxLayout()
   layout.addWidget(view1)
	
   button = QtGui.QPushButton("Add a row")
   button.clicked.connect(addrow)
   layout.addWidget(button)
	
   btn1 = QtGui.QPushButton("del a row")
   btn1.clicked.connect(lambda: model.removeRow(view1.currentIndex().row()))
   layout.addWidget(btn1)
	
   dlg.setLayout(layout)
   dlg.setWindowTitle("Database Demo")
   dlg.show()
   sys.exit(app.exec_())
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/database_handling_output.jpg" alt="Database Handling Output" />
<h1>PyQt - Drawing API</h1>
<p>All the <b>QWidget</b> classes in PyQt are sub classed from QPaintDevice class. A <b>QPaintDevice</b> is an abstraction of two dimensional space that can be drawn upon using a QPainter. Dimensions of paint device are measured in pixels starting from the top-left corner.</p>
<p>QPainter class performs low level painting on widgets and other paintable devices such as printer. Normally, it is used in widget’s paint event. The <b>QPaintEvent</b> occurs whenever the widget’s appearance is updated.</p>
<p>The painter is activated by calling the begin() method, while the end() method deactivates it. In between, the desired pattern is painted by suitable methods as listed in the following table.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Sr.No.</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>begin()</b></p>
<p>Starts painting on the target device</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>drawArc()</b></p>
<p>Draws an arc between the starting and the end angle</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>drawEllipse()</b></p>
<p>Draws an ellipse inside a rectangle</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>drawLine()</b></p>
<p>Draws a line with endpoint coordinates specified</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>drawPixmap()</b></p>
<p>Extracts pixmap from the image file and displays it at the specified position</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>drwaPolygon()</b></p>
<p>Draws a polygon using an array of coordinates</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>drawRect()</b></p>
<p>Draws a rectangle starting at the top-left coordinate with the given width and height</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td>
<p><b>drawText()</b></p>
<p>Displays the text at given coordinates</p></td>
</tr>
<tr>
<td class="ts">9</td>
<td>
<p><b>fillRect()</b></p>
<p>Fills the rectangle with the QColor parameter</p></td>
</tr>
<tr>
<td class="ts">10</td>
<td>
<p><b>setBrush()</b></p>
<p>Sets a brush style for painting</p></td>
</tr>
<tr>
<td class="ts">11</td>
<td>
<p><b>setPen()</b></p>
<p>Sets the color, size and style of pen to be used for drawing</p></td>
</tr>
</table>
<h1>PyQt - BrushStyle Constants</h1>
<h2>Predefined QColor Styles</h2>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>Qt.NoBrush</td>
<td>No brush pattern</td>
</tr>
<tr>
<td>Qt.SolidPattern</td>
<td>Uniform color</td>
</tr>
<tr>
<td>Qt.Dense1Pattern</td>
<td>Extremely dense brush pattern</td>
</tr>
<tr>
<td>Qt.HorPattern</td>
<td>Horizontal lines</td>
</tr>
<tr>
<td>Qt.VerPattern</td>
<td>Vertical lines</td>
</tr>
<tr>
<td>Qt.CrossPattern</td>
<td>Crossing horizontal and vertical lines</td>
</tr>
<tr>
<td>Qt.BDiagPattern</td>
<td>Backward diagonal lines</td>
</tr>
<tr>
<td>Qt.FDiagPattern</td>
<td>Forward diagonal lines</td>
</tr>
<tr>
<td>Qt.DiagCrossPattern</td>
<td>Crossing diagonal lines</td>
</tr>
</table>
<h2>Predefined QColor Objects</h2>
<table style="width:25%" align="center" class="table table-bordered">
<tr>
<td>Qt.white</td>
</tr>
<tr>
<td>Qt.black</td>
</tr>
<tr>
<td>Qt.red</td>
</tr>
<tr>
<td>Qt.darkRed</td>
</tr>
<tr>
<td>Qt.green</td>
</tr>
<tr>
<td>Qt.darkGreen</td>
</tr>
<tr>
<td>Qt.blue</td>
</tr>
<tr>
<td>Qt.cyan</td>
</tr>
<tr>
<td>Qt.magenta</td>
</tr>
<tr>
<td>Qt.yellow</td>
</tr>
<tr>
<td>Qt.darkYellow</td>
</tr>
<tr>
<td>Qt.gray</td>
</tr>
</table>
<p>Custom color can be chosen by specifying RGB or CMYK or HSV values.</p>
<h2>Example</h2>
<p>The following example implements some of these methods.</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *

class Example(QWidget):

   def __init__(self):
      super(Example, self).__init__()
      self.initUI()
		
   def initUI(self):
      self.text = "hello world"
      self.setGeometry(100,100, 400,300)
      self.setWindowTitle('Draw Demo')
      self.show()
		
   def paintEvent(self, event):
      qp = QPainter()
      qp.begin(self)
      qp.setPen(QColor(Qt.red))
      qp.setFont(QFont('Arial', 20))
		
      qp.drawText(10,50, "hello Pyth
		on")
      qp.setPen(QColor(Qt.blue))
      qp.drawLine(10,100,100,100)
      qp.drawRect(10,150,150,100)
		
      qp.setPen(QColor(Qt.yellow))
      qp.drawEllipse(100,50,100,50)
      qp.drawPixmap(220,10,QPixmap("python.jpg"))
      qp.fillRect(200,175,150,100,QBrush(Qt.SolidPattern))
      qp.end()
		
def main():
   app = QApplication(sys.argv)
   ex = Example()
   sys.exit(app.exec_())
	
if __name__ == '__main__':
   main()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/brushstyle_constants_output.jpg" alt="BrushStyle Constants Output" />
<h1>PyQt - QClipboard</h1>
<p>The <b>QClipboard</b> class provides access to system-wide clipboard that offers a simple mechanism to copy and paste data between applications. Its action is similar to QDrag class and uses similar data types.</p>
<p>QApplication class has a static method clipboard() which returns reference to clipboard object. Any type of MimeData can be copied to or pasted from the clipboard.</p>
<p>Following are the clipboard class methods that are commonly used &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:10%;">Sr.No.</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>clear()</b></p>
<p>Clears clipboard contents</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>setImage()</b></p>
<p>Copies QImage into clipboard</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>setMimeData()</b></p>
<p>Sets MIME data into clipboard</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>setPixmap()</b></p>
<p>Copies Pixmap object in clipboard</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>setText()</b></p>
<p>Copies QString in clipboard</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>text()</b></p>
<p>Retrieves text from clipboard</p></td>
</tr>
</table>
<p>Signal associated with clipboard object is &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:10%;">Sr.No.</th>
<th style="text-align:center;">Method &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>dataChanged()</b></p>
<p>Whenever clipboard data changes</p></td>
</tr>
</table>
<h2>Example</h2>
<p>In the following example, two TextEdit objects and two Pushbuttons are added to a top level window.</p>
<p>To begin with the clipboard object is instantiated. Copy() method of textedit object copies the data onto the system clipboard. When the Paste button is clicked, it fetches the clipboard data and pastes it in other textedit object.</p>
<img src="/pyqt/images/qclipboard_output1.jpg" alt="QClipboard Output1" />
<img src="/pyqt/images/qclipboard_output2.jpg" alt="QClipboard Output2" />
<img src="/pyqt/images/qclipboard_output3.jpg" alt="QClipboard Output3" />
<h1>PyQt - QPixmap Class</h1>
<p><b>QPixmap</b> class provides an off-screen representation of an image. It can be used as a QPaintDevice object or can be loaded into another widget, typically a label or button.</p>
<p>Qt API has another similar class QImage, which is optimized for I/O and other pixel manipulations. Pixmap, on the other hand, is optimized for showing it on screen. Both formats are interconvertible.</p>
<p>The types of image files that can be read into a QPixmap object are as follows &minus;</p>
<table class="table table-bordered" style="text-align:center;">
<tr>
<td>BMP</td>
<td>Windows Bitmap</td>
</tr>
<tr>
<td>GIF</td>
<td>Graphic Interchange Format (optional)</td>
</tr>
<tr>
<td>JPG</td>
<td>Joint Photographic Experts Group</td>
</tr>
<tr>
<td>JPEG</td>
<td>Joint Photographic Experts Group</td>
</tr>
<tr>
<td>PNG</td>
<td>Portable Network Graphics</td>
</tr>
<tr>
<td>PBM</td>
<td>Portable Bitmap</td>
</tr>
<tr>
<td>PGM</td>
<td>Portable Graymap</td>
</tr>
<tr>
<td>PPM</td>
<td>Portable Pixmap</td>
</tr>
<tr>
<td>XBM</td>
<td>X11 Bitmap</td>
</tr>
<tr>
<td>XPM</td>
<td>X11 Pixmap</td>
</tr>
</table>
<p>Following methods are useful in handling QPixmap object &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;width:10%;">Sr.No.</th>
<th style="text-align:center;">Methods &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>copy()</b></p>
<p>Copies pixmap data from a QRect object</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>fromImage()</b></p>
<p>Converts QImage object into QPixmap</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>grabWidget()</b></p>
<p>Creates a pixmap from the given widget</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>grabWindow()</b></p>
<p>Create pixmap of data in a window</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Load()</b></p>
<p>Loads an image file as pixmap</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>save()</b></p>
<p>Saves the QPixmap object as a file</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>toImage</b></p>
<p>Converts a QPixmap to QImage</p></td>
</tr>
</table>
<p>The most common use of QPixmap is to display image on a label/button.</p>
<h2>Example</h2>
<p>The following example shows an image displayed on a QLabel by using the setPixmap() method. The complete code is as follows &minus;</p>
<pre class="prettyprint notranslate">
import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *

def window():
   app = QApplication(sys.argv)
   win = QWidget()
   l1 = QLabel()
   l1.setPixmap(QPixmap("python.jpg"))
	
   vbox = QVBoxLayout()
   vbox.addWidget(l1)
   win.setLayout(vbox)
   win.setWindowTitle("QPixmap Demo")
   win.show()
   sys.exit(app.exec_())
	
if __name__ == '__main__':
   window()
</pre>
<p>The above code produces the following output &minus;</p>
<img src="/pyqt/images/qpixmap_class_output.jpg" alt="QPixmap Class Output" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/pyqt/pyqt_qpixmap_class.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/pyqt/pyqt_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
