<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="Quick Guide - The architecture of a system describes its major components, their relationships (structures), and how they interact with each other. Software architecture and "/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/software_architecture_design/quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#693e07;
}
a.demo {
    background:#693e07;
}
li.heading {
    background:#693e07;
}
.course-box{background:#693e07}
.home-intro-sub p{color:#693e07}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/software_architecture_design/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/software_architecture_design/images/software-architecture-and-design-mini-logo.jpg" alt="Software Architecture & Design Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Software Architecture &amp; Design</li>
<li><a href="/software_architecture_design/index.htm">Home</a></li>
<li><a href="/software_architecture_design/introduction.htm">Introduction</a></li>
<li><a href="/software_architecture_design/key_principles.htm">Key Principles</a></li>
<li><a href="/software_architecture_design/architecture_models.htm">Architecture Models</a></li>
<li><a href="/software_architecture_design/object_oriented_paradigm.htm">Object-Oriented Paradigm</a></li>
<li><a href="/software_architecture_design/data_flow_architecture.htm">Data Flow Architecture</a></li>
<li><a href="/software_architecture_design/data_centered_architecture.htm">Data-Centered Architecture</a></li>
<li><a href="/software_architecture_design/hierarchical_architecture.htm">Hierarchical Architecture</a></li>
<li><a href="/software_architecture_design/interaction_oriented_architecture.htm">Interaction-Oriented Architecture</a></li>
<li><a href="/software_architecture_design/distributed_architecture.htm">Distributed Architecture</a></li>
<li><a href="/software_architecture_design/component_based_architecture.htm">Component-Based Architecture</a></li>
<li><a href="/software_architecture_design/user_interface.htm">User Interface</a></li>
<li><a href="/software_architecture_design/architecture_techniques.htm">Architecture Techniques</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Useful Resources</li>
<li><a href="/software_architecture_design/quick_guide.htm">Quick Guide</a></li>
<li><a href="/software_architecture_design/useful_resources.htm">Useful Resources</a></li>
<li><a href="/software_architecture_design/software_architecture_design_discussion.htm">Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/software_architecture_design/architecture_techniques.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/software_architecture_design/useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>Software Architecture &amp; Design Introduction</h1>
<p>The architecture of a system describes its major components, their relationships (structures), and how they interact with each other. Software architecture and design includes several contributory factors such as Business strategy, quality attributes, human dynamics, design, and IT environment.</p>
<img src="/software_architecture_design/images/software_architecture_types.jpg" alt="Software Architecture Types" />
<p>We can segregate Software Architecture and Design into two distinct phases: Software Architecture and Software Design. In <b>Architecture</b>, nonfunctional decisions are cast and separated by the functional requirements. In Design, functional requirements are accomplished.</p>
<h2>Software Architecture</h2>
<p>Architecture serves as a <b>blueprint for a system</b>. It provides an abstraction to manage the system complexity and establish a communication and coordination mechanism among components.</p>
<ul class="list">
<li><p>It defines a <b>structured solution</b> to meet all the technical and operational requirements, while optimizing the common quality attributes like performance and security.</p></li>
<li><p>Further, it involves a set of significant decisions about the organization related to software development and each of these decisions can have a considerable impact on quality, maintainability, performance, and the overall success of the final product. These decisions comprise of &minus;</p>
<ul class="list">
<li><p>Selection of structural elements and their interfaces by which the system is composed.</p></li>
<li><p>Behavior as specified in collaborations among those elements.</p></li>
<li><p>Composition of these structural and behavioral elements into large subsystem.</p></li>
<li><p>Architectural decisions align with business objectives.</p></li>
<li><p>Architectural styles guide the organization.</p></li>
</ul>
</li>
</ul>
<h2>Software Design</h2>
<p>Software design provides a <b>design plan</b> that describes the elements of a system, how they fit, and work together to fulfill the requirement of the system. The objectives of having a design plan are as follows &minus;</p>
<ul class="list">
<li><p>To negotiate system requirements, and to set expectations with customers, marketing, and management personnel.</p></li>
<li><p>Act as a blueprint during the development process.</p></li>
<li><p>Guide the implementation tasks, including detailed design, coding, integration, and testing.</p></li>
</ul>
<p>It comes before the detailed design, coding, integration, and testing and after the domain analysis, requirements analysis, and risk analysis.</p>
<img src="/software_architecture_design/images/software_design.jpg" alt="Software Design"/>
<h2>Goals of Architecture</h2>
<p>The primary goal of the architecture is to identify requirements that affect the structure of the application. A well-laid architecture reduces the business risks associated with building a technical solution and builds a bridge between business and technical requirements.</p>
<p>Some of the other goals are as follows &minus;</p>
<ul class="list">
<li><p>Expose the structure of the system, but hide its implementation details.</p></li>
<li><p>Realize all the use-cases and scenarios.</p></li>
<li><p>Try to address the requirements of various stakeholders.</p></li>
<li><p>Handle both functional and quality requirements.</p></li>
<li><p>Reduce the goal of ownership and improve the organization’s market position.</p></li>
<li><p>Improve quality and functionality offered by the system.</p></li>
<li><p>Improve external confidence in either the organization or system.</p></li>
</ul>
<h3>Limitations</h3>
<p>Software architecture is still an emerging discipline within software engineering. It has the following limitations &minus;</p>
<ul class="list">
<li><p>Lack of tools and standardized ways to represent architecture.</p></li>
<li><p>Lack of analysis methods to predict whether architecture will result in an implementation that meets the requirements.</p></li>
<li><p>Lack of awareness of the importance of architectural design to software development.</p></li>
<li><p>Lack of understanding of the role of software architect and poor communication among stakeholders.</p></li>
<li><p>Lack of understanding of the design process, design experience and evaluation of design.</p></li>
</ul>
<h2>Role of Software Architect</h2>
<p>A Software Architect provides a solution that the technical team can create and design for the entire application. A software architect should have expertise in the following areas &minus;</p>
<h3>Design Expertise</h3>
<ul class="list">
<li><p>Expert in software design, including diverse methods and approaches such as object-oriented design, event-driven design, etc.</p></li>
<li><p>Lead the development team and coordinate the development efforts for the integrity of the design.</p></li>
<li><p>Should be able to review design proposals and tradeoff among themselves.</p></li>
</ul>
<h3>Domain Expertise</h3>
<ul class="list">
<li><p>Expert on the system being developed and plan for software evolution.</p></li>
<li><p>Assist in the requirement investigation process, assuring completeness and consistency.</p></li>
<li><p>Coordinate the definition of domain model for the system being developed.</p></li>
</ul>
<h3>Technology Expertise</h3>
<ul class="list">
<li><p>Expert on available technologies that helps in the implementation of the system.</p></li>
<li><p>Coordinate the selection of programming language, framework, platforms, databases, etc.</p></li>
</ul>
<h3>Methodological Expertise</h3>
<ul class="list">
<li><p>Expert on software development methodologies that may be adopted during SDLC (Software Development Life Cycle).</p></li>
<li><p>Choose the appropriate approaches for development that helps the entire team.</p></li>
</ul>
<h3>Hidden Role of Software Architect</h3>
<ul class="list">
<li><p>Facilitates the technical work among team members and reinforcing the trust relationship in the team.</p></li>
<li><p>Information specialist who shares knowledge and has vast experience.</p></li>
<li><p>Protect the team members from external forces that would distract them and bring less value to the project.</p></li>
</ul>
<h3>Deliverables of the Architect</h3>
<ul class="list">
<li><p>A clear, complete, consistent, and achievable set of functional goals</p></li>
<li><p>A functional description of the system, with at least two layers of decomposition</p></li>
<li><p>A concept for the system</p></li>
<li><p>A design in the form of the system, with at least two layers of decomposition</p></li>
<li><p>A notion of the timing, operator attributes, and the implementation and operation plans</p></li>
<li><p>A document or process which ensures functional decomposition is followed, and the form of interfaces is controlled</p></li>
</ul>
<h2>Quality Attributes</h2>
<p>Quality is a measure of excellence or the state of being free from deficiencies or defects. Quality attributes are the system properties that are separate from the functionality of the system.</p>
<p>Implementing quality attributes makes it easier to differentiate a good system from a bad one. Attributes are overall factors that affect runtime behavior, system design, and user experience.</p>
<p>They can be classified as &minus;</p>
<h3>Static Quality Attributes</h3>
<p>Reflect the structure of a system and organization, directly related to architecture, design, and source code. They are invisible to end-user, but affect the development and maintenance cost, e.g.: modularity, testability, maintainability, etc.</p>
<h3>Dynamic Quality Attributes</h3>
<p>Reflect the behavior of the system during its execution. They are directly related to system’s architecture, design, source code, configuration, deployment parameters, environment, and platform.</p>
<p>They are visible to the end-user and exist at runtime, e.g. throughput, robustness, scalability, etc.</p>
<h2>Quality Scenarios</h2>
<p>Quality scenarios specify how to prevent a fault from becoming a failure. They can be divided into six parts based on their attribute specifications &minus;</p>
<ul class="list">
<li><p><b>Source</b> &minus; An internal or external entity such as people, hardware, software, or physical infrastructure that generate the stimulus.</p></li>
<li><p><b>Stimulus</b> &minus; A condition that needs to be considered when it arrives on a system.</p></li>
<li><p><b>Environment</b> &minus; The stimulus occurs within certain conditions.</p></li>
<li><p><b>Artifact</b> &minus; A whole system or some part of it such as processors, communication channels, persistent storage, processes etc.</p></li>
<li><p><b>Response</b> &minus; An activity undertaken after the arrival of stimulus such as detect faults, recover from fault, disable event source etc.</p></li>
<li><p><b>Response measure</b> &minus; Should measure the occurred responses so that the requirements can be tested.</p></li>
</ul>
<h3>Common Quality Attributes</h3>
<p>The following table lists the common quality attributes a software architecture must have &minus;</p>
<table class="table table-bordered">
<tr>
<th style="width:28%; text-align:center;">Category</th>
<th style="width:25%;">Quality Attribute</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td rowspan="3" class="ts">Design Qualities</td>
<td class="ts">Conceptual Integrity</td>
<td>Defines the consistency and coherence of the overall design. This includes the way components or modules are designed.</td>
</tr>
<tr>
<td class="ts">Maintainability</td>
<td>Ability of the system to undergo changes with a degree of ease.</td>
</tr>
<tr>
<td class="ts">Reusability</td>
<td>Defines the capability for components and subsystems to be suitable for use in other applications.</td>
</tr>
<tr>
<td rowspan="7" class="ts">Run-time Qualities</td>
<td class="ts">Interoperability</td>
<td>Ability of a system or different systems to operate successfully by communicating and exchanging information with other external systems written and run by external parties.</td>
</tr>
<tr>
<td class="ts">Manageability</td>
<td>Defines how easy it is for system administrators to manage the application.</td>
</tr>
<tr>
<td class="ts">Reliability</td>
<td>Ability of a system to remain operational over time.</td>
</tr>
<tr>
<td class="ts">Scalability</td>
<td>Ability of a system to either handle the load increase without impacting the performance of the system or the ability to be readily enlarged.</td>
</tr>
<tr>
<td class="ts">Security</td>
<td>Capability of a system to prevent malicious or accidental actions outside of the designed usages.</td>
</tr>
<tr>
<td class="ts">Performance</td>
<td>Indication of the responsiveness of a system to execute any action within a given time interval.</td>
</tr>
<tr>
<td class="ts">Availability</td>
<td>Defines the proportion of time that the system is functional and working. It can be measured as a percentage of the total system downtime over a predefined period.</td>
</tr>
<tr>
<td rowspan="2" class="ts">System Qualities</td>
<td class="ts">Supportability</td>
<td>Ability of the system to provide information helpful for identifying and resolving issues when it fails to work correctly.</td>
</tr>
<tr>
<td class="ts">Testability</td>
<td>Measure of how easy it is to create test criteria for the system and its components.</td>
</tr>
<tr>
<td class="ts">User Qualities</td>
<td class="ts">Usability</td>
<td>Defines how well the application meets the requirements of the user and consumer by being intuitive.</td>
</tr>
<tr>
<td class="ts">Architecture Quality</td>
<td class="ts">Correctness</td>
<td>Accountability for satisfying all the requirements of the system.</td>
</tr>
<tr>
<td rowspan="3" style="vertical-align:middle;">Non-runtime Quality</td>
<td class="ts">Portability</td>
<td>Ability of the system to run under different computing environment.</td>
</tr>
<tr>
<td class="ts">Integrality</td>
<td>Ability to make separately developed components of the system work correctly together.</td>
</tr>
<tr>
<td class="ts">Modifiability</td>
<td>Ease with which each software system can accommodate changes to its software.</td>
</tr>
<tr>
<td rowspan="2" class="ts">Business quality attributes</td>
<td class="ts">Cost and schedule</td>
<td>Cost of the system with respect to time to market, expected project lifetime &amp; utilization of legacy.</td>
</tr>
<tr>
<td class="ts">Marketability</td>
<td>Use of system with respect to market competition.</td>
</tr>
</table>
<h1>Key Principles</h1>
<p>Software architecture is described as the organization of a system, where the system represents a set of components that accomplish the defined functions.</p>
<h2>Architectural Style</h2>
<p>The <b>architectural style</b>, also called as <b>architectural pattern</b>, is a set of principles which shapes an application. It defines an abstract framework for a family of system in terms of the pattern of structural organization.</p>
<p>The architectural style is responsible to &minus;</p>
<ul class="list">
<li><p>Provide a lexicon of components and connectors with rules on how they can be combined.</p></li>
<li><p>Improve partitioning and allow the reuse of design by giving solutions to frequently occurring problems.</p></li>
<li><p>Describe a particular way to configure a collection of components (a module with well-defined interfaces, reusable, and replaceable) and connectors (communication link between modules).</p></li>
</ul>
<p>The software that is built for computer-based systems exhibit one of many architectural styles. Each style describes a system category that encompasses &minus;</p>
<ul class="list">
<li><p>A set of component types which perform a required function by the system.</p></li>
<li><p>A set of connectors (subroutine call, remote procedure call, data stream, and socket) that enable communication, coordination, and cooperation among different components.</p></li>
<li><p>Semantic constraints which define how components can be integrated to form the system.</p></li>
<li><p>A topological layout of the components indicating their runtime interrelationships.</p></li>
</ul>
<h2>Common Architectural Design</h2>
<p>The following table lists architectural styles that can be organized by their key focus area &minus;</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center; width:15%;">Category</th>
<th style="text-align:center; width:30%;">Architectural Design</th>
<th style="text-align:center;">Description</th>
</tr>
<tr>
<td rowspan="2" class="ts">Communication</td>
<td class="ts">Message bus</td>
<td>Prescribes use of a software system that can receive and send messages using one or more communication channels.</td>
</tr>
<tr>
<td class="ts">Service–Oriented Architecture (SOA)</td>
<td>Defines the applications that expose and consume functionality as a service using contracts and messages.</td>
</tr>
<tr>
<td rowspan="2" class="ts">Deployment</td>
<td class="ts">Client/server</td>
<td>Separate the system into two applications, where the client makes requests to the server.</td>
</tr>
<tr>
<td class="ts">3-tier or N-tier</td>
<td>Separates the functionality into separate segments with each segment being a tier located on a physically separate computer.</td>
</tr>
<tr>
<td class="ts">Domain</td>
<td class="ts">Domain Driven Design</td>
<td>Focused on modeling a business domain and defining business objects based on entities within the business domain.</td>
</tr>
<tr>
<td rowspan="3" class="ts">Structure</td>
<td class="ts">Component Based</td>
<td>Breakdown the application design into reusable functional or logical components that expose well-defined communication interfaces.</td>
</tr>
<tr>
<td class="ts">Layered</td>
<td>Divide the concerns of the application into stacked groups (layers).</td>
</tr>
<tr>
<td class="ts">Object oriented</td>
<td>Based on the division of responsibilities of an application or system into objects, each containing the data and the behavior relevant to the object.</td>
</tr>
</table>
<h2>Types of Architecture</h2>
<p>There are four types of architecture from the viewpoint of an enterprise and collectively, these architectures are referred to as <b>enterprise architecture</b>.</p>
<ul class="list">
<li><p><b>Business architecture</b> &minus; Defines the strategy of business, governance, organization, and key business processes within an enterprise and focuses on the analysis and design of business processes.</p></li>
<li><p><b>Application (software) architecture</b> &minus; Serves as the blueprint for individual application systems, their interactions, and their relationships to the business processes of the organization.</p></li>
<li><p><b>Information architecture</b> &minus; Defines the logical and physical data assets and data management resources.</p></li>
<li><p><b>Information technology (IT) architecture</b> &minus; Defines the hardware and software building blocks that make up the overall information system of the organization.</p></li>
</ul>
<h2>Architecture Design Process</h2>
<p>The architecture design process focuses on the decomposition of a system into different components and their interactions to satisfy functional and nonfunctional requirements. The key inputs to software architecture design are &minus;</p>
<ul class="list">
<li><p>The requirements produced by the analysis tasks.</p></li>
<li><p>The hardware architecture (the software architect in turn provides requirements to the system architect, who configures the hardware architecture).</p></li>
</ul>
<p>The result or output of the architecture design process is an <b>architectural description</b>. The basic architecture design process is composed of the following steps &minus;</p>
<h3>Understand the Problem</h3>
<ul class="list">
<li><p>This is the most crucial step because it affects the quality of the design that follows.</p></li>
<li><p>Without a clear understanding of the problem, it is not possible to create an
effective solution.</p></li>
<li><p>Many software projects and products are considered failures because they did not actually solve a valid business problem or have a recognizable return on investment (ROI).</p></li>
</ul>
<h3>Identify Design Elements and their Relationships</h3>
<ul class="list">
<li><p>In this phase, build a baseline for defining the boundaries and context of the system.</p></li>
<li><p>Decomposition of the system into its main components based on functional requirements. The decomposition can be modeled using a design structure matrix (DSM), which shows the dependencies between design elements without specifying the granularity of the elements.</p></li>
<li><p>In this step, the first validation of the architecture is done by describing a number of system instances and this step is referred as functionality based architectural design.</p></li>
</ul>
<h3>Evaluate the Architecture Design</h3>
<ul class="list">
<li><p>Each quality attribute is given an estimate so in order to gather qualitative measures or quantitative data, the design is evaluated.</p></li>
<li><p>It involves evaluating the architecture for conformance to architectural quality attributes requirements.</p></li>
<li><p>If all estimated quality attributes are as per the required standard, the architectural design process is finished.</p></li>
<li><p>If not, the third phase of software architecture design is entered: architecture transformation. If the observed quality attribute does not meet its requirements, then a new design must be created.</p></li>
</ul>
<h3>Transform the Architecture Design</h3>
<ul class="list">
<li><p>This step is performed after an evaluation of the architectural design. The architectural design must be changed until it completely satisfies the quality attribute requirements.</p></li>
<li><p>It is concerned with selecting design solutions to improve the quality attributes while preserving the domain functionality.</p></li>
<li><p>A design is transformed by applying design operators, styles, or patterns. For transformation, take the existing design and apply design operator such as decomposition, replication, compression, abstraction, and resource sharing.</p></li>
<li><p>The design is again evaluated and the same process is repeated multiple times if necessary and even performed recursively.</p></li>
<li><p>The transformations (i.e. quality attribute optimizing solutions) generally improve one or some quality attributes while they affect others negatively</p></li>
</ul>
<h2>Key Architecture Principles</h2>
<p>Following are the key principles to be considered while designing an architecture &minus;</p>
<h3>Build to Change Instead of Building to Last</h3>
<p>Consider how the application may need to change over time to address new requirements and challenges, and build in the flexibility to support this.</p>
<h3>Reduce Risk and Model to Analyze</h3>
<p>Use design tools, visualizations, modeling systems such as UML to capture requirements and design decisions. The impacts can also be analyzed. Do not formalize the model to the extent that it suppresses the capability to iterate and adapt the design easily.</p>
<h3>Use Models and Visualizations as a Communication and Collaboration Tool</h3>
<p>Efficient communication of the design, the decisions, and ongoing changes to the design is critical to good architecture. Use models, views, and other visualizations of the architecture to communicate and share the design efficiently with all the stakeholders. This enables rapid communication of changes to the design.</p>
<p>Identify and understand key engineering decisions and areas where mistakes are most often made. Invest in getting key decisions right the first time to make the design more flexible and less likely to be broken by changes.</p>
<h3>Use an Incremental and Iterative Approach</h3>
<p>Start with baseline architecture and then evolve candidate architectures by iterative testing to improve the architecture. Iteratively add details to the design over multiple passes to get the big or right picture and then focus on the details.</p>
<h2>Key Design Principles</h2>
<p>Following are the design principles to be considered for minimizing cost, maintenance requirements, and maximizing extendibility, usability of architecture &minus;</p>
<h3>Separation of Concerns</h3>
<p>Divide the components of system into specific features so that there is no overlapping among the components functionality. This will provide high cohesion and low coupling. This approach avoids the interdependency among components of system which helps in maintaining the system easy.</p>
<h3>Single Responsibility Principle</h3>
<p>Each and every module of a system should have one specific responsibility, which helps the user to clearly understand the system. It should also help with integration of the component with other components.</p>
<h3>Principle of Least Knowledge</h3>
<p>Any component or object should not have the knowledge about internal details of other components. This approach avoids interdependency and helps maintainability.</p>
<h3>Minimize Large Design Upfront</h3>
<p>Minimize large design upfront if the requirements of an application are unclear. If there is a possibility of modifying requirements, then avoid making a large design for whole system.</p>
<h3>Do not Repeat the Functionality</h3>
<p>Do not repeat functionality specifies that functionality of components should not to be repeated and hence a piece of code should be implemented in one component only. Duplication of functionality within an application can make it difficult to implement changes, decrease clarity, and introduce potential inconsistencies.</p>
<h3>Prefer Composition over Inheritance while Reusing the Functionality</h3>
<p>Inheritance creates dependency between children and parent classes and hence it blocks the free use of the child classes. In contrast, the composition provides a great level of freedom and reduces the inheritance hierarchies.</p>
<h3>Identify Components and Group them in Logical Layers</h3>
<p>Identity components and the area of concern that are needed in system to satisfy the requirements. Then group these related components in a logical layer, which will help the user to understand the structure of the system at a high level. Avoid mixing components of different type of concerns in same layer.</p>
<h3>Define the Communication Protocol between Layers</h3>
<p>Understand how components will communicate with each other which requires a complete knowledge of deployment scenarios and the production environment.</p>
<h3>Define Data Format for a Layer</h3>
<p>Various components will interact with each other through data format. Do not mix the data formats so that applications are easy to implement, extend, and maintain. Try to keep data format same for a layer, so that various components need not code/decode the data while communicating with each other. It reduces a processing overhead.</p>
<h3>System Service Components should be Abstract</h3>
<p>Code related to security, communications, or system services like logging, profiling, and configuration should be abstracted in the separate components. Do not mix this code with business logic, as it is easy to extend design and maintain it.</p>
<h3>Design Exceptions and Exception Handling Mechanism</h3>
<p>Defining exceptions in advance, helps the components to manage errors or unwanted situation in an elegant manner. The exception management will be same throughout the system.</p>
<h3>Naming Conventions</h3>
<p>Naming conventions should be defined in advance. They provide a consistent model that helps the users to understand the system easily. It is easier for team members to validate code written by others, and hence will increase the maintainability.</p>
<h1>Architecture Models</h1>
<p>Software architecture involves the high level structure of software system abstraction, by using decomposition and composition, with architectural style and quality attributes. A software architecture design must conform to the major functionality and performance requirements of the system, as well as satisfy the non-functional requirements such as reliability, scalability, portability, and availability.</p>
<p>A software architecture must describe its group of components, their connections, interactions among them and deployment configuration of all components.</p>
<p>A software architecture can be defined in many ways &minus;</p>
<ul class="list">
<li><p><b>UML (Unified Modeling Language)</b> &minus; UML is one of object-oriented solutions used in software modeling and design.</p></li>
<li><p><b>Architecture View Model (4+1 view model)</b> &minus; Architecture view model represents the functional and non-functional requirements of software application.</p></li>
<li><p><b>ADL (Architecture Description Language)</b> &minus; ADL defines the software architecture formally and semantically.</p></li>
</ul>
<h2>UML</h2>
<p>UML stands for Unified Modeling Language. It is a pictorial language used to make software blueprints. UML was created by Object Management Group (OMG). The UML 1.0 specification draft was proposed to the OMG in January 1997. It serves as a standard for software requirement analysis and design documents which are the basis for developing a software.</p>
<p>UML can be described as a general purpose visual modeling language to visualize, specify, construct, and document a software system. Although UML is generally used to model software system, it is not limited within this boundary. It is also used to model non software systems such as process flows in a manufacturing unit.</p>
<p>The elements are like components which can be associated in different ways to make a complete UML picture, which is known as a <b>diagram</b>. So, it is very important to understand the different diagrams to implement the knowledge in real-life systems. We have two broad categories of diagrams and they are further divided into sub-categories i.e. <b>Structural Diagrams</b> and <b>Behavioral Diagrams</b>.</p>
<h3>Structural Diagrams</h3>
<p>Structural diagrams represent the static aspects of a system. These static aspects represent those parts of a diagram which forms the main structure and is therefore stable.</p> 
<p>These static parts are represented by classes, interfaces, objects, components and nodes. Structural diagrams can be sub-divided as follows &minus;</p>
<ul class="list">
<li>Class diagram</li>
<li>Object diagram</li>
<li>Component diagram</li>
<li>Deployment diagram</li>
<li>Package diagram</li>
<li>Composite structure</li>
</ul>
<p>The following table provides a brief description of these diagrams &minus;</p>
<table class="table table-bordered">
<tr>
<th>Sr.No.</th>
<th style="text-align:center;">Diagram &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Class</b></p>
<p>Represents the object orientation of a system. Shows how classes are statically related.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Object</b></p>
<p>Represents a set of objects and their relationships at runtime and also represent the static view of the system.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>Component</b></p>
<p>Describes all the components, their interrelationship, interactions and interface of the system.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Composite structure</b></p>
<p>Describes inner structure of component including all classes, interfaces of the component, etc.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Package</b></p>
<p>Describes the package structure and organization. Covers classes in the package and packages within another package.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Deployment</b></p>
<p>Deployment diagrams are a set of nodes and their relationships. These nodes are physical entities where the components are deployed.</p></td>
</tr>
</table>
<h3>Behavioral Diagrams</h3>
<p>Behavioral diagrams basically capture the dynamic aspect of a system. Dynamic aspects are basically the changing/moving parts of a system. UML has the following types of behavioral diagrams &minus;</p>
<ul class="list">
<li>Use case diagram</li>
<li>Sequence diagram</li>
<li>Communication diagram</li>
<li>State chart diagram</li>
<li>Activity diagram</li>
<li>Interaction overview</li>
<li>Time sequence diagram</li>
</ul>
<p>The following table provides a brief description of these diagram &minus;</p>
<table class="table table-bordered">
<tr>
<th>Sr.No.</th>
<th style="text-align:center;">Diagram &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td>
<p><b>Use case</b></p>
<p>Describes the relationships among the functionalities and their internal/external controllers. These controllers are known as actors.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td>
<p><b>Activity</b></p>
<p>Describes the flow of control in a system. It consists of activities and links. The flow can be sequential, concurrent, or branched.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td>
<p><b>State Machine/state chart</b></p>
<p>Represents the event driven state change of a system. It basically describes the state change of a class, interface, etc. Used to visualize the reaction of a system by internal/external factors.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td>
<p><b>Sequence</b></p>
<p>Visualizes the sequence of calls in a system to perform a specific functionality.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td>
<p><b>Interaction Overview</b></p>
<p>Combines activity and sequence diagrams to provide a control flow overview of system and business process.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td>
<p><b>Communication</b></p>
<p>Same as sequence diagram, except that it focuses on the object’s role. Each communication is associated with a sequence order, number plus the past messages.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td>
<p><b>Time Sequenced</b></p>
<p>Describes the changes by messages in state, condition and events.</p></td>
</tr>
</table>
<h2>Architecture View Model</h2>
<p>A model is a complete, basic, and simplified description of software architecture which is composed of multiple views from a particular perspective or viewpoint.</p>
<p>A view is a representation of an entire system from the perspective of a related set of concerns. It is used to describe the system from the viewpoint of different stakeholders such as end-users, developers, project managers, and testers.</p>
<h3>4+1 View Model</h3>
<p>The 4+1 View Model was designed by Philippe Kruchten to describe the architecture of a software–intensive system based on the use of multiple and concurrent views. It is a <b>multiple view</b> model that addresses different features and concerns of the system. It standardizes the software design documents and makes the design easy to understand by all stakeholders.</p>
<p>It is an architecture verification method for studying and documenting software architecture design and covers all the aspects of software architecture for all stakeholders. It provides four essential views &minus;</p>
<ul class="list">
<li><p><b>The logical view or conceptual view</b> &minus; It describes the object model of the design.</p></li>
<li><p><b>The process view</b> &minus; It describes the activities of the system, captures the concurrency and synchronization aspects of the design.</p></li>
<li><p><b>The physical view</b> &minus; It describes the mapping of software onto hardware and reflects its distributed aspect.</p></li>
<li><p><b>The development view</b> &minus; It describes the static organization or structure of the software in its development of environment.</p></li>
</ul>
<p>This view model can be extended by adding one more view called <b>scenario view</b> or <b>use case view</b> for end-users or customers of software systems. It is coherent with other four views and are utilized to illustrate the architecture serving as “plus one” view, (4+1) view model. The following figure describes the software architecture using five concurrent views (4+1) model.</p>
<img src="/software_architecture_design/images/four_plus_one_view_model.jpg" alt="4+1 View Model" />
<h3>Why is it called 4+1 instead of 5?</h3>
<p>The <b>use case view</b> has a special significance as it details the high level requirement of a system while other views details — how those requirements are realized. When all other four views are completed, it’s effectively redundant. However, all other views would not be possible without it. The following image and table shows the 4+1 view in detail &minus;</p>
<table style="font-size:11px;" class="table table-bordered">
<tr>
<th></th>
<th style="text-align:center;">Logical</th>
<th style="text-align:center;">Process</th>
<th style="text-align:center;">Development</th>
<th style="text-align:center;">Physical</th>
<th style="text-align:center;">Scenario</th>
</tr>
<tr>
<td class="ts">Description</td>
<td class="ts">Shows the component (Object) of system as well as their interaction</td>
<td class="ts">Shows the processes / Workflow rules of system and how those processes communicate, focuses on dynamic view of system</td>
<td class="ts">Gives building block views of system and describe static organization of the system modules</td>
<td class="ts">Shows the installation, configuration and deployment of software application</td>
<td class="ts">Shows the design is complete by performing validation and illustration</td>
</tr>
<tr>
<td class="ts">Viewer / Stake holder</td>
<td class="ts">End-User, Analysts and Designer</td>
<td class="ts">Integrators &amp; developers</td>
<td class="ts">Programmer and software project managers</td>
<td class="ts">System engineer, operators, system administrators and system installers</td>
<td class="ts">All the views of their views and evaluators</td>
</tr>
<tr>
<td class="ts">Consider</td>
<td class="ts">Functional requirements</td>
<td class="ts">Non Functional Requirements</td>
<td class="ts">Software Module organization (Software management reuse, constraint of tools)</td>
<td class="ts">Nonfunctional requirement regarding to underlying hardware</td>
<td class="ts">System Consistency and validity</td>
</tr>
<tr>
<td class="ts">UML – Diagram</td>
<td class="ts">Class, State, Object, sequence, Communication Diagram</td>
<td class="ts">Activity Diagram</td>
<td class="ts">Component, Package diagram</td>
<td class="ts">Deployment diagram</td>
<td class="ts">Use case diagram</td>
</tr>
</table>
<h2>Architecture Description Languages (ADLs)</h2>
<p>An ADL is a language that provides syntax and semantics for defining a software architecture. It is a notation specification which provides features for modeling a software system’s conceptual architecture, distinguished from the system’s implementation.</p>
<p>ADLs must support the architecture components, their connections, interfaces, and configurations which are the building block of architecture description. It is a form of expression for use in architecture descriptions and provides the ability to decompose components, combine the components, and define the interfaces of components.</p>
<p>An architecture description language is a formal specification language, which describes the software features such as processes, threads, data, and sub-programs as well as hardware component such as processors, devices, buses, and memory.</p>
<p>It is hard to classify or differentiate an ADL and a programming language or a modeling language. However, there are following requirements for a language to be classified as an ADL &minus;</p>
<ul class="list">
<li><p>It should be appropriate for communicating the architecture to all concerned parties.</p></li>
<li><p>It should be suitable for tasks of architecture creation, refinement, and validation.</p></li>
<li><p>It should provide a basis for further implementation, so it must be able to add information to the ADL specification to enable the final system specification to be derived from the ADL.</p></li>
<li><p>It should have the ability to represent most of the common architectural styles.</p></li>
<li><p>It should support analytical capabilities or provide quick generating prototype implementations.</p></li>
</ul>
<h1>Object-Oriented Paradigm</h1>
<p>The object-oriented (OO) paradigm took its shape from the initial concept of a new programming approach, while the interest in design and analysis methods came much later. OO analysis and design paradigm is the logical result of the wide adoption of OO programming languages.</p>
<ul class="list">
<li><p>The first object–oriented language was <b>Simula</b> (Simulation of real systems) that was developed in 1960 by researchers at the Norwegian Computing Center.</p></li>
<li><p>In 1970, <b>Alan Kay</b> and his research group at Xerox PARC created a personal computer named <b>Dynabook</b> and the first pure object-oriented programming language (OOPL) - Smalltalk, for programming the Dynabook.</p></li>
<li><p>In the 1980s, <b>Grady Booch</b> published a paper titled Object Oriented Design that mainly presented a design for the programming language, Ada. In the ensuing editions, he extended his ideas to a complete object–oriented design method.</p></li>
<li><p>In the 1990s, <b>Coad</b> incorporated behavioral ideas to object-oriented methods.</p></li>
</ul>
<p>The other significant innovations were Object Modeling Techniques (OMT) by <b>James Rum Baugh</b> and Object-Oriented Software Engineering (OOSE) by <b>Ivar Jacobson</b>.</p>
<h2>Introduction to OO Paradigm</h2>
<p>OO paradigm is a significant methodology for the development of any software. Most of the architecture styles or patterns such as pipe and filter, data repository, and component-based can be implemented by using this paradigm.</p>
<p>Basic concepts and terminologies of object–oriented systems &minus;</p>
<h3>Object</h3>
<p>An object is a real-world element in an object–oriented environment that may have a physical or a conceptual existence. Each object has &minus;</p>
<ul class="list">
<li><p>Identity that distinguishes it from other objects in the system.</p></li>
<li><p>State that determines characteristic properties of an object as well as values of properties that the object holds.</p></li>
<li><p>Behavior that represents externally visible activities performed by an object in terms of changes in its state.</p></li>
</ul>
<p>Objects can be modeled according to the needs of the application. An object may have a physical existence, like a customer, a car, etc.; or an intangible conceptual existence, like a project, a process, etc.</p>
<h3>Class</h3>
<p>A class represents a collection of objects having same characteristic properties that exhibit common behavior. It gives the blueprint or the description of the objects that can be created from it. Creation of an object as a member of a class is called instantiation. Thus, an object is an <b>instance</b> of a class.</p>
<p>The constituents of a class are &minus;</p>
<ul class="list">
<li><p>A set of attributes for the objects that are to be instantiated from the class. Generally, different objects of a class have some difference in the values of the attributes. Attributes are often referred as class data.</p></li>
<li><p>A set of operations that portray the behavior of the objects of the class. Operations are also referred as functions or methods.</p></li>
</ul>
<p><b>Example</b></p>
<p>Let us consider a simple class, Circle, that represents the geometrical figure circle in a two–dimensional space. The attributes of this class can be identified as follows &minus;</p>
<ul class="list">
<li>x–coord, to denote x–coordinate of the center</li>
<li>y–coord, to denote y–coordinate of the center</li>
<li>a, to denote the radius of the circle</li>
</ul>
<p>Some of its operations can be defined as follows &minus;</p>
<ul class="list">
<li>findArea(), a method to calculate area</li>
<li>findCircumference(), a method to calculate circumference</li>
<li>scale(), a method to increase or decrease the radius</li>
</ul>
<h3>Encapsulation</h3>
<p>Encapsulation is the process of binding both attributes and methods together within a class. Through encapsulation, the internal details of a class can be hidden from outside. It permits the elements of the class to be accessed from outside only through the interface provided by the class.</p>
<h3>Polymorphism</h3>
<p>Polymorphism is originally a Greek word that means the ability to take multiple forms. In object-oriented paradigm, polymorphism implies using operations in different ways, depending upon the instances they are operating upon. Polymorphism allows objects with different internal structures to have a common external interface. Polymorphism is particularly effective while implementing inheritance.</p>
<p><b>Example</b></p>
<p>Let us consider two classes, Circle and Square, each with a method findArea(). Though the name and purpose of the methods in the classes are same, the internal implementation, i.e., the procedure of calculating an area is different for each class. When an object of class Circle invokes its findArea() method, the operation finds the area of the circle without any conflict with the findArea() method of the Square class.</p>
<p><b>Relationships</b></p>
<p>In order to describe a system, both dynamic (behavioral) and static (logical) specification of a system must be provided. The dynamic specification describes the relationships among objects e.g. message passing. And static specification describe the relationships among classes, e.g. aggregation, association, and inheritance.</p>
<h3>Message Passing</h3>
<p>Any application requires a number of objects interacting in a harmonious manner. Objects in a system may communicate with each other by using message passing. Suppose a system has two objects &minus; obj1 and obj2. The object obj1 sends a message to object obj2, if obj1 wants obj2 to execute one of its methods.</p>
<h3>Composition or Aggregation</h3>
<p>Aggregation or composition is a relationship among classes by which a class can be made up of any combination of objects of other classes. It allows objects to be placed directly within the body of other classes. Aggregation is referred as a “part–of” or “has–a” relationship, with the ability to navigate from the whole to its parts. An aggregate object is an object that is composed of one or more other objects.</p>
<h3>Association</h3>
<p>Association is a group of links having common structure and common behavior. Association depicts the relationship between objects of one or more classes. A link can be defined as an instance of an association. The Degree of an association denotes the number of classes involved in a connection. The degree may be unary, binary, or ternary.</p>
<ul class="list">
<li>A unary relationship connects objects of the same class.</li>
<li>A binary relationship connects objects of two classes.</li>
<li>A ternary relationship connects objects of three or more classes.</li>
</ul>
<h3>Inheritance</h3>
<p>It is a mechanism that permits new classes to be created out of existing classes by extending and refining its capabilities. The existing classes are called the base classes/parent classes/super-classes, and the new classes are called the derived classes/child classes/subclasses.</p>
<p>The subclass can inherit or derive the attributes and methods of the super-class (es) provided that the super-class allows so. Besides, the subclass may add its own attributes and methods and may modify any of the super-class methods. Inheritance defines a “is – a” relationship.</p>
<p><b>Example</b></p>
<p>From a class Mammal, a number of classes can be derived such as Human, Cat, Dog, Cow, etc. Humans, cats, dogs, and cows all have the distinct characteristics of mammals. In addition, each has its own particular characteristics. It can be said that a cow “is – a” mammal.</p>
<h2>OO Analysis</h2>
<p>In object-oriented analysis phase of software development, the system requirements are determined, the classes are identified, and the relationships among classes are acknowledged. The aim of OO analysis is to understand the application domain and specific requirements of the system. The result of this phase is requirement specification and initial analysis of logical structure and feasibility of a system.</p>
<p>The three analysis techniques that are used in conjunction with each other for object-oriented analysis are object modeling, dynamic modeling, and functional modeling.</p>
<h3>Object Modeling</h3>
<p>Object modeling develops the static structure of the software system in terms of objects. It identifies the objects, the classes into which the objects can be grouped into and the relationships between the objects. It also identifies the main attributes and operations that characterize each class.</p>
<p>The process of object modeling can be visualized in the following steps &minus;</p>
<ul class="list">
<li>Identify objects and group into classes</li>
<li>Identify the relationships among classes</li>
<li>Create a user object model diagram</li>
<li>Define a user object attributes</li>
<li>Define the operations that should be performed on the classes</li>
</ul>
<h3>Dynamic Modeling</h3>
<p>After the static behavior of the system is analyzed, its behavior with respect to time and external changes needs to be examined. This is the purpose of dynamic modeling.</p>
<p>Dynamic Modeling can be defined as “a way of describing how an individual object responds to events, either internal events triggered by other objects, or external events triggered by the outside world.”</p>
<p>The process of dynamic modeling can be visualized in the following steps &minus;</p>
<ul class="list">
<li>Identify states of each object</li>
<li>Identify events and analyze the applicability of actions</li>
<li>Construct a dynamic model diagram, comprising of state transition diagrams</li>
<li>Express each state in terms of object attributes</li>
<li>Validate the state–transition diagrams drawn</li>
</ul>
<h3>Functional Modeling</h3>
<p>Functional Modeling is the final component of object-oriented analysis. The functional model shows the processes that are performed within an object and how the data changes, as it moves between methods. It specifies the meaning of the operations of an object modeling and the actions of a dynamic modeling. The functional model corresponds to the data flow diagram of traditional structured analysis.</p>
<p>The process of functional modeling can be visualized in the following steps &minus;</p>
<ul class="list">
<li>Identify all the inputs and outputs</li>
<li>Construct data flow diagrams showing functional dependencies</li>
<li>State the purpose of each function</li>
<li>Identify the constraints</li>
<li>Specify optimization criteria</li>
</ul>
<h2>Object-Oriented Design</h2>
<p>After the analysis phase, the conceptual model is developed further into an object-oriented model using object-oriented design (OOD). In OOD, the technology-independent concepts in the analysis model are mapped onto implementing classes, constraints are identified, and interfaces are designed, resulting in a model for the solution domain. The main aim of OO design is to develop the structural architecture of a system.</p>
<p>The stages for object–oriented design can be identified as &minus;</p>
<ul class="list">
<li>Defining the context of the system</li>
<li>Designing the system architecture</li>
<li>Identification of the objects in the system</li>
<li>Construction of design models</li>
<li>Specification of object interfaces</li>
</ul>
<p>OO Design can be divided into two stages &minus; Conceptual design and Detailed design.</p>
<p><b>Conceptual design</b></p>
<p>In this stage, all the classes are identified that are needed for building the system. Further, specific responsibilities are assigned to each class. Class diagram is used to clarify the relationships among classes, and interaction diagram are used to show the flow of events. It is also known as <b>high-level design</b>.</p>
<p><b>Detailed design</b></p>
<p>In this stage, attributes and operations are assigned to each class based on their interaction diagram. State machine diagram are developed to describe the further details of design. It is also known as <b>low-level design</b>.</p>
<h3>Design Principles</h3>
<p>Following are the major design principles &minus;</p>
<p><b><i>Principle of Decoupling</i></b></p>
<p>It is difficult to maintain a system with a set of highly interdependent classes, as modification in one class may result in cascading updates of other classes. In an OO design, tight coupling can be eliminated by introducing new classes or inheritance.</p>
<p><b><i>Ensuring Cohesion</i></b></p>
<p>A cohesive class performs a set of closely related functions. A lack of cohesion means — a class performs unrelated functions, although it does not affect the operation of the whole system. It makes the entire structure of software hard to manage, expand, maintain, and change.</p>
<p><b><i>Open-closed Principle</i></b></p>
<p>According to this principle, a system should be able to extend to meet the new requirements. The existing implementation and the code of the system should not be modified as a result of a system expansion. In addition, the following guidelines have to be followed in open-closed principle &minus;</p>
<ul class="list">
<li><p>For each concrete class, separate interface and implementations have to be maintained.</p></li>
<li><p>In a multithreaded environment, keep the attributes private.</p></li>
<li><p>Minimize the use of global variables and class variables.</p></li>
</ul>
<h1>Data Flow Architecture</h1>
<p>In data flow architecture, the whole software system is seen as a series of transformations on consecutive pieces or set of input data, where data and operations are independent of each other. In this approach, the data enters into the system and then flows through the modules one at a time until they are assigned to some final destination (output or a data store).</p>
<p>The connections between the components or modules may be implemented as I/O stream, I/O buffers, piped, or other types of connections. The data can be flown in the graph topology with cycles, in a linear structure without cycles, or in a tree type structure.</p>
<p>The main objective of this approach is to achieve the qualities of reuse and modifiability. It is suitable for applications that involve a well-defined series of independent data transformations or computations on orderly defined input and output such as compilers and business data processing applications. There are three types of execution sequences between modules&minus;</p>
<ul class="list">
<li>Batch sequential</li>
<li>Pipe and filter or non-sequential pipeline mode</li>
<li>Process control</li>
</ul>
<h2>Batch Sequential</h2>
<p>Batch sequential is a classical data processing model, in which a data transformation subsystem can initiate its process only after its previous subsystem is completely through &minus;</p>
<ul class="list">
<li><p>The flow of data carries a batch of data as a whole from one subsystem to another.</p></li>
<li><p>The communications between the modules are conducted through temporary intermediate files which can be removed by successive subsystems.</p></li>
<li><p>It is applicable for those applications where data is batched, and each subsystem reads related input files and writes output files.</p></li>
<li><p>Typical application of this architecture includes business data processing such as banking and utility billing.</p></li>
</ul>
<img src="/software_architecture_design/images/batch_sequential.jpg" alt="Batch Sequential" />
<h3>Advantages</h3>
<ul class="list">
<li><p>Provides simpler divisions on subsystems.</p></li>
<li><p>Each subsystem can be an independent program working on input data and producing output data.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Provides high latency and low throughput.</p></li>
<li><p>Does not provide concurrency and interactive interface.</p></li>
<li><p>External control is required for implementation.</p></li>
</ul>
<h2>Pipe and Filter Architecture</h2>
<p>This approach lays emphasis on the incremental transformation of data by successive component. In this approach, the flow of data is driven by data and the whole system is decomposed into components of data source, filters, pipes, and data sinks.</p>
<p>The connections between modules are data stream which is first-in/first-out buffer that can be stream of bytes, characters, or any other type of such kind. The main feature of this architecture is its concurrent and incremented execution.</p>
<h3>Filter</h3>
<p>A filter is an independent data stream transformer or stream transducers. It transforms the data of the input data stream, processes it, and writes the transformed data stream over a pipe for the next filter to process. It works in an incremental mode, in which it starts working as soon as data arrives through connected pipe. There are two types of filters &minus; <b>active filter</b> and <b>passive filter</b>.</p>
<p><b>Active filter</b></p>
<p>Active filter lets connected pipes to pull data in and push out the transformed data. It operates with passive pipe, which provides read/write mechanisms for pulling and pushing. This mode is used in UNIX pipe and filter mechanism.</p>
<p><b>Passive filter</b></p>
<p>Passive filter lets connected pipes to push data in and pull data out. It operates with active pipe, which pulls data from a filter and pushes data into the next filter. It must provide read/write mechanism.</p>
<img src="/software_architecture_design/images/passive_filter.jpg" alt="Passive Filter" />
<h3>Advantages</h3>
<ul class="list">
<li><p>Provides concurrency and high throughput for excessive data processing.</p></li>
<li><p>Provides reusability and simplifies system maintenance.</p></li>
<li><p>Provides modifiability and low coupling between filters.</p></li>
<li><p>Provides simplicity by offering clear divisions between any two filters connected by pipe.</p></li>
<li><p>Provides flexibility by supporting both sequential and parallel execution.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Not suitable for dynamic interactions.</p></li>
<li><p>A low common denominator is needed for transmission of data in ASCII formats.</p></li>
<li><p>Overhead of data transformation between filters.</p></li>
<li><p>Does not provide a way for filters to cooperatively interact to solve a problem.</p></li>
<li><p>Difficult to configure this architecture dynamically.</p></li>
</ul>
<h3>Pipe</h3>
<p>Pipes are stateless and they carry binary or character stream which exist between two filters. It can move a data stream from one filter to another. Pipes use a little contextual information and retain no state information between instantiations.</p>
<h2>Process Control Architecture</h2>
<p>It is a type of data flow architecture where data is neither batched sequential nor pipelined stream. The flow of data comes from a set of variables, which controls the execution of process. It decomposes the entire system into subsystems or modules and connects them.</p>
<h3>Types of Subsystems</h3>
<p>A process control architecture would have a <b>processing unit</b> for changing the process control variables and a <b>controller unit</b> for calculating the amount of changes.</p>
<p>A controller unit must have the following elements &minus;</p>
<ul class="list">
<li><p><b>Controlled Variable</b> &minus; Controlled Variable provides values for the underlying system and should be measured by sensors. For example, speed in cruise control system.</p></li>
<li><p><b>Input Variable</b> &minus; Measures an input to the process. For example, temperature of return air in temperature control system</p></li>
<li><p><b>Manipulated Variable</b> &minus; Manipulated Variable value is adjusted or changed by the controller.</p></li>
<li><p><b>Process Definition</b> &minus; It includes mechanisms for manipulating some process variables.</p></li>
<li><p><b>Sensor</b> &minus; Obtains values of process variables pertinent to control and can be used as a feedback reference to recalculate manipulated variables.</p></li>
<li><p><b>Set Point</b> &minus; It is the desired value for a controlled variable.</p></li>
<li><p><b>Control Algorithm</b> &minus; It is used for deciding how to manipulate process variables.</p></li>
</ul>
<h3>Application Areas</h3>
<p>Process control architecture is suitable in the following domains &minus;</p>
<ul class="list">
<li><p>Embedded system software design, where the system is manipulated by process control variable data.</p></li>
<li><p>Applications, which aim is to maintain specified properties of the outputs of the process at given reference values.</p></li>
<li><p>Applicable for car-cruise control and building temperature control systems.</p></li>
<li><p>Real-time system software to control automobile anti-lock brakes, nuclear power plants, etc.</p></li>
</ul>
<h1>Data-Centered Architecture</h1>
<p>In data-centered architecture, the data is centralized and accessed frequently by other components, which modify data. The main purpose of this style is to achieve integrality of data. Data-centered architecture consists of different components that communicate through shared data repositories. The components access a shared data structure and are relatively independent, in that, they interact only through the data store.</p>
<p>The most well-known examples of the data-centered architecture is a database architecture, in which the common database schema is created with data definition protocol – for example, a set of related tables with fields and data types in an RDBMS.</p>
<p>Another example of data-centered architectures is the web architecture which has a common data schema (i.e. meta-structure of the Web) and follows hypermedia data model and processes communicate through the use of shared web-based data services.</p>
<img src="/software_architecture_design/images/data_centered_architecture.jpg" alt="Data-Centered Architecture" />
<h2>Types of Components</h2>
<p>There are two types of components &minus;</p>
<ul class="list">
<li><p>A <b>central data</b> structure or data store or data repository, which is responsible for providing permanent data storage. It represents the current state.</p></li>
<li><p>A <b>data accessor</b> or a collection of independent components that operate on the central data store, perform computations, and might put back the results.</p></li>
</ul>
<p>Interactions or communication between the data accessors is only through the data store. The data is the only means of communication among clients. The flow of control differentiates the architecture into two categories &minus;</p>
<ul class="list">
<li>Repository Architecture Style</li>
<li>Blackboard Architecture Style</li>
</ul>
<h2>Repository Architecture Style</h2>
<p>In Repository Architecture Style, the data store is passive and the clients (software components or agents) of the data store are active, which control the logic flow. The participating components check the data-store for changes.</p>
<ul class="list">
<li><p>The client sends a request to the system to perform actions (e.g. insert data).</p></li>
<li><p>The computational processes are independent and triggered by incoming requests.</p></li>
<li><p>If the types of transactions in an input stream of transactions trigger selection of processes to execute, then it is traditional database or repository architecture, or passive repository.</p></li>
<li><p>This approach is widely used in DBMS, library information system, the interface repository in CORBA, compilers and CASE (computer aided software engineering) environments.</p></li>
</ul>
<img src="/software_architecture_design/images/repository_architecture_style.jpg" alt="Repository Architecture Style" />
<h3>Advantages</h3>
<ul class="list">
<li><p>Provides data integrity, backup and restore features.</p></li>
<li><p>Provides scalability and reusability of agents as they do not have direct communication with each other.</p></li>
<li><p>Reduces overhead of transient data between software components.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>It is more vulnerable to failure and data replication or duplication is possible.</p></li>
<li><p>High dependency between data structure of data store and its agents.</p></li>
<li><p>Changes in data structure highly affect the clients.</p></li>
<li><p>Evolution of data is difficult and expensive.</p></li>
<li><p>Cost of moving data on network for distributed data.</p></li>
</ul>
<h2>Blackboard Architecture Style</h2>
<p>In Blackboard Architecture Style, the data store is active and its clients are passive. Therefore the logical flow is determined by the current data status in data store. It has a blackboard component, acting as a central data repository, and an internal representation is built and acted upon by different computational elements.</p>
<ul class="list">
<li><p>A number of components that act independently on the common data structure are stored in the blackboard.</p></li>
<li><p>In this style, the components interact only through the blackboard. The data-store alerts the clients whenever there is a data-store change.</p></li>
<li><p>The current state of the solution is stored in the blackboard and processing is triggered by the state of the blackboard.</p></li>
<li><p>The system sends notifications known as <b>trigger</b> and data to the clients when changes occur in the data.</p></li>
<li><p>This approach is found in certain AI applications and complex applications, such as speech recognition, image recognition, security system, and business resource management systems etc.</p></li>
<li><p>If the current state of the central data structure is the main trigger of selecting processes to execute, the repository can be a blackboard and this shared data source is an active agent.</p></li>
<li><p>A major difference with traditional database systems is that the invocation of computational elements in a blackboard architecture is triggered by the current state of the blackboard, and not by external inputs.</p></li>
</ul>
<h3>Parts of Blackboard Model</h3>
<p>The blackboard model is usually presented with three major parts &minus;</p>
<p><b>Knowledge Sources (KS)</b></p>
<p>Knowledge Sources, also known as <b>Listeners</b> or <b>Subscribers</b> are distinct and independent units. They solve parts of a problem and aggregate partial results. Interaction among knowledge sources takes place uniquely through the blackboard.</p>
<p><b>Blackboard Data Structure</b></p>
<p>The problem-solving state data is organized into an application-dependent hierarchy. Knowledge sources make changes to the blackboard that lead incrementally to a solution to the problem.</p>
<p><b>Control</b></p>
<p>Control manages tasks and checks the work state.</p>
<img src="/software_architecture_design/images/blackboard_data_structure.jpg" alt="Blackboard Data Structure" />
<h3>Advantages</h3>
<ul class="list">
<li><p>Provides scalability which provides easy to add or update knowledge source.</p></li>
<li><p>Provides concurrency that allows all knowledge sources to work in parallel as they are independent of each other.</p></li>
<li><p>Supports experimentation for hypotheses.</p></li>
<li><p>Supports reusability of knowledge source agents.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>The structure change of blackboard may have a significant impact on all of its agents as close dependency exists between blackboard and knowledge source.</p></li>
<li><p>It can be difficult to decide when to terminate the reasoning as only approximate solution is expected.</p></li>
<li><p>Problems in synchronization of multiple agents.</p></li>
<li><p>Major challenges in designing and testing of system.</p></li>
</ul>
<h1>Hierarchical Architecture</h1>
<p>Hierarchical architecture views the whole system as a hierarchy structure, in which the software system is decomposed into logical modules or subsystems at different levels in the hierarchy. This approach is typically used in designing system software such as network protocols and operating systems.</p>
<p>In system software hierarchy design, a low-level subsystem gives services to its adjacent upper level subsystems, which invoke the methods in the lower level. The lower layer provides more specific functionality such as I/O services, transaction, scheduling, security services, etc. The middle layer provides more domain dependent functions such as business logic and core processing services. And, the upper layer provides more abstract functionality in the form of user interface such as GUIs, shell programming facilities, etc.</p>
<p>It is also used in organization of the class libraries such as .NET class library in namespace hierarchy. All the design types can implement this hierarchical architecture and often combine with other architecture styles.</p>
<p>Hierarchical architectural styles is divided as &minus;</p>
<ul class="list">
<li>Main-subroutine</li>
<li>Master-slave</li>
<li>Virtual machine</li>
</ul>
<h2>Main-subroutine</h2>
<p>The aim of this style is to reuse the modules and freely develop individual modules or subroutine. In this style, a software system is divided into subroutines by using top-down refinement according to desired functionality of the system.</p>
<p>These refinements lead vertically until the decomposed modules is simple enough to have its exclusive independent responsibility. Functionality may be reused and shared by multiple callers in the upper layers.</p>
<p>There are two ways by which data is passed as parameters to subroutines, namely &minus;</p>
<ul class="list">
<li><p><b>Pass by Value</b> &minus; Subroutines only use the past data, but can’t modify it.</p></li>
<li><p><b>Pass by Reference</b> &minus; Subroutines use as well as change the value of the data referenced by the parameter.</p></li>
</ul>
<img src="/software_architecture_design/images/main_subroutine.jpg" alt="Main-subroutine" />
<h3>Advantages</h3>
<ul class="list">
<li><p>Easy to decompose the system based on hierarchy refinement.</p></li>
<li><p>Can be used in a subsystem of object oriented design.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Vulnerable as it contains globally shared data.</p></li>
<li><p>Tight coupling may cause more ripple effects of changes.</p></li>
</ul>
<h2>Master-Slave</h2>
<p>This approach applies the 'divide and conquer' principle and supports fault computation and computational accuracy. It is a modification of the main-subroutine architecture that provides reliability of system and fault tolerance.</p>
<p>In this architecture, slaves provide duplicate services to the master, and the master chooses a particular result among slaves by a certain selection strategy. The slaves may perform the same functional task by different algorithms and methods or totally different functionality. It includes parallel computing in which all the slaves can be executed in parallel.</p>
<img src="/software_architecture_design/images/master_slave.jpg" alt="Master-Slave" />
<p>The implementation of the Master-Slave pattern follows five steps &minus;</p>
<ul class="list">
<li><p>Specify how the computation of the task can be divided into a set of equal sub-tasks and identify the sub-services that are needed to process a sub-task.</p></li>
<li><p>Specify how the final result of the whole service can be computed with the help of the results obtained from processing individual sub-tasks.</p></li>
<li><p>Define an interface for the sub-service identified in step 1. It will be implemented by the slave and used by the master to delegate the processing of individual sub-tasks.</p></li>
<li><p>Implement the slave components according to the specifications developed in the previous step.</p></li>
<li><p>Implement the master according to the specifications developed in step 1 to 3.</p></li>
</ul>
<h3>Applications</h3>
<ul class="list">
<li><p>Suitable for applications where reliability of software is critical issue.</p></li>
<li><p>Widely applied in the areas of parallel and distributed computing.</p></li>
</ul>
<h3>Advantages</h3>
<ul class="list">
<li><p>Faster computation and easy scalability.</p></li>
<li><p>Provides robustness as slaves can be duplicated.</p></li>
<li><p>Slave can be implemented differently to minimize semantic errors.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Communication overhead.</p></li>
<li><p>Not all problems can be divided.</p></li>
<li><p>Hard to implement and portability issue.</p></li>
</ul>
<h2>Virtual Machine Architecture</h2>
<p>Virtual Machine architecture pretends some functionality, which is not native to the hardware and/or software on which it is implemented. A virtual machine is built upon an existing system and provides a virtual abstraction, a set of attributes, and operations.</p>
<p>In virtual machine architecture, the master uses the ‘same’ subservice’ from the slave and performs functions such as split work, call slaves, and combine results. It allows developers to simulate and test platforms, which have not yet been built, and simulate "disaster'' modes that would be too complex, costly, or dangerous to test with the real system.</p>
<p>In most cases, a virtual machine splits a programming language or application environment from an execution platform. The main objective is to provide <b>portability</b>. Interpretation of a particular module via a Virtual Machine may be perceived as &minus;</p>
<ul class="list">
<li><p>The interpretation engine chooses an instruction from the module being interpreted.</p></li>
<li><p>Based on the instruction, the engine updates the virtual machine’s internal state and the above process is repeated.</p></li>
</ul>
<p>The following figure shows the architecture of a standard VM infrastructure on a single physical machine.</p>
<img src="/software_architecture_design/images/virtual_machine_architecture.jpg" alt="Virtual Machine Architecture" />
<p>The <b>hypervisor,</b> also called the <b>virtual machine monitor</b>, runs on the host OS and allocates matched resources to each guest OS. When the guest makes a system-call, the hypervisor intercepts and translates it into the corresponding system-call supported by the host OS. The hypervisor controls each virtual machine access to the CPU, memory, persistent storage, I/O devices, and the network.</p>
<h3>Applications</h3>
<p>Virtual machine architecture is suitable in the following domains &minus;</p>
<ul class="list">
<li><p>Suitable for solving a problem by simulation or translation if there is no direct solution.</p></li>
<li><p>Sample applications include interpreters of microprogramming, XML processing, script command language execution, rule-based system execution, Smalltalk and Java interpreter typed programming language.</p></li>
<li><p>Common examples of virtual machines are interpreters, rule-based systems, syntactic shells, and command language processors.</p></li>
</ul>
<h3>Advantages</h3>
<ul class="list">
<li><p>Portability and machine platform independency.</p></li>
<li><p>Simplicity of software development.</p></li>
<li><p>Provides flexibility through the ability to interrupt and query the program.</p></li>
<li><p>Simulation for disaster working model.</p></li>
<li><p>Introduce modifications at runtime.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Slow execution of the interpreter due to the interpreter nature.</p></li>
<li><p>There is a performance cost because of the additional computation involved in execution.</p></li>
</ul>
<h2>Layered Style</h2>
<p>In this approach, the system is decomposed into a number of higher and lower layers in a hierarchy, and each layer has its own sole responsibility in the system.</p>
<ul class="list">
<li><p>Each layer consists of a group of related classes that are encapsulated in a package, in a deployed component, or as a group of subroutines in the format of method library or header file.</p></li>
<li><p>Each layer provides service to the layer above it and serves as a client to the layer below i.e. request to layer i +1 invokes the services provided by the layer i via the interface of layer i. The response may go back to the layer i +1 if the task is completed; otherwise layer i continually invokes services from layer i -1 below.</p></li>
</ul>
<h3>Applications</h3>
<p>Layered style is suitable in the following areas &minus;</p>
<ul class="list">
<li><p>Applications that involve distinct classes of services that can be organized hierarchically.</p></li>
<li><p>Any application that can be decomposed into application-specific and platform-specific portions.</p></li>
<li><p>Applications that have clear divisions between core services, critical services, and user interface services, etc.</p></li>
</ul>
<h3>Advantages</h3>
<ul class="list">
<li><p>Design based on incremental levels of abstraction.</p></li>
<li><p>Provides enhancement independence as changes to the function of one layer affects at most two other layers.</p></li>
<li><p>Separation of the standard interface and its implementation.</p></li>
<li><p>Implemented by using component-based technology which makes the system much easier to allow for plug-and-play of new components.</p></li>
<li><p>Each layer can be an abstract machine deployed independently which support portability.</p></li>
<li><p>Easy to decompose the system based on the definition of the tasks in a top-down refinement manner</p></li>
<li><p>Different implementations (with identical interfaces) of the same layer can be used interchangeably</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Many applications or systems are not easily structured in a layered fashion.</p></li>
<li><p>Lower runtime performance since a client’s request or a response to client must go through potentially several layers.</p></li>
<li><p>There are also performance concerns on overhead on the data marshaling and buffering by each layer.</p></li>
<li><p>Opening of interlayer communication may cause deadlocks and “bridging” may cause tight coupling.</p></li>
<li><p>Exceptions and error handling is an issue in the layered architecture, since faults in one layer must spread upwards to all calling layers</p></li>
</ul>
<h1>Interaction-Oriented Architecture</h1>
<p>The primary objective of interaction-oriented architecture is to separate the interaction of user from data abstraction and business data processing. The interaction-oriented software architecture decomposes the system into three major partitions &minus;</p>
<ul class="list">
<li><p><b>Data module</b> &minus; Data module provides the data abstraction and all business logic.</p></li>
<li><p><b>Control module</b> &minus; Control module identifies the flow of control and system configuration actions.</p></li>
<li><p><b>View presentation module</b> &minus; View presentation module is responsible for visual or audio presentation of data output and it also provides an interface for user input.</p></li>
</ul>
<p>Interaction-oriented architecture has two major styles &minus; <b>Model-View-Controller</b> (MVC) and <b>Presentation-Abstraction-Control</b> (PAC). Both MVC and PAC propose three components decomposition and are used for interactive applications such as web applications with multiple talks and user interactions. They are different in their flow of control and organization. PAC is an agent-based hierarchical architecture but MVC does not have a clear hierarchical structure.</p>
<h2>Model-View-Controller (MVC)</h2>
<p>MVC decomposes a given software application into three interconnected parts that help in separating the internal representations of information from the information presented to or accepted from the user.</p>
<table class="table table-bordered">
<tr>
<th style="text-align:center;">Module</th>
<th style="text-align:center;">Function</th>
</tr>
<tr>
<td style="text-align:center;">Model</td>
<td>Encapsulation the underlying data and business logic</td>
</tr>
<tr>
<td style="text-align:center;">Controller</td>
<td>Respond to user action and direct the application flow</td>
</tr>
<tr>
<td style="text-align:center;">View</td>
<td>Formats and present the data from model to user.</td>
</tr>
</table>
<h3>Model</h3>
<p>Model is a central component of MVC that directly manages the data, logic, and constraints of an application. It consists of data components, which maintain the raw application data and application logic for interface.</p>
<ul class="list">
<li><p>It is an independent user interface and captures the behavior of application problem domain.</p></li>
<li><p>It is the domain-specific software simulation or implementation of the application's central structure.</p></li>
<li><p>When there has been change in its state, it gives notification to its associated view to produce updated output and the controller to change the available set of commands.</p></li>
</ul>
<h3>View</h3>
<p>View can be used to represent any output of information in graphical form such as diagram or chart. It consists of presentation components which provide the visual representations of data</p>
<ul class="list">
<li><p>Views request information from their model and generate an output representation to the user.</p></li>
<li><p>Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants.</p></li>
</ul>
<h3>Controller</h3>
<p>A controller accepts an input and converts it to commands for the model or view. It consists of input processing components which handle input from the user by modifying the model.</p>
<ul class="list">
<li><p>It acts as an interface between the associated models and views and the input devices.</p></li>
<li><p>It can send commands to the model to update the model’s state and to its associated view to change the view’s presentation of the model.</p></li>
</ul>
<img src="/software_architecture_design/images/mvc_component.jpg" alt="MVC Component" />
<h3>MVC - I</h3>
<p>It is a simple version of MVC architecture where the system is divided into two sub-systems &minus;</p>
<ul class="list">
<li><p><b>The Controller-View</b> &minus; The controller-view acts as input /output interface and processing is done.</p></li>
<li><p><b>The Model</b> &minus; The model provides all the data and domain services.</p></li>
</ul>
<p><b>MVC-I Architecture</b></p>
<p>The model module notifies controller-view module of any data changes so that any graphics data display will be changed accordingly. The controller also takes appropriate action upon the changes.</p>
<img src="/software_architecture_design/images/mvc_1_architecture.jpg" alt="MVC-I Architecture" />
<p>The connection between controller-view and model can be designed in a pattern (as shown in the above picture) of subscribe-notify whereby the controller-view subscribes to model and model notifies controller-view of any changes.</p>
<h3>MVC - II</h3>
<p>MVC–II is an enhancement of MVC-I architecture in which the view module and the controller module are separate. The model module plays an active role as in MVC-I by providing all the core functionality and data supported by database.</p>
<p>The view module presents data while controller module accepts input request, validates input data, initiates the model, the view, their connection, and also dispatches the task.</p>
<p><b>MVC-II Architecture</b></p>
<img src="/software_architecture_design/images/mvc_2_architecture.jpg" alt="MVC-II Architecture" />
<h3>MVC Applications</h3>
<p>MVC applications are effective for interactive applications where multiple views are needed for a single data model and easy to plug-in a new or change interface view.</p>
<p>MVC applications are suitable for applications where there are clear divisions between the modules so that different professionals can be assigned to work on different aspects of such applications concurrently.</p>
<p><b>Advantages</b></p>
<ul class="list">
<li><p>There are many MVC vendor framework toolkits available.</p></li>
<li><p>Multiple views synchronized with same data model.</p></li>
<li><p>Easy to plug-in new or replace interface views.</p></li>
<li><p>Used for application development where graphics expertise professionals, programming professionals, and data base development professionals are working in a designed project team.</p></li>
</ul>
<p><b>Disadvantages</b></p>
<ul class="list">
<li><p>Not suitable for agent-oriented applications such as interactive mobile and robotics applications.</p></li>
<li><p>Multiple pairs of controllers and views based on the same data model make any data model change expensive.</p></li>
<li><p>The division between the View and the Controller is not clear in some cases.</p></li>
</ul>
<h2>Presentation-Abstraction-Control (PAC)</h2>
<p>In PAC, the system is arranged into a hierarchy of many cooperating agents (triads). It was developed from MVC to support the application requirement of multiple agents in addition to interactive requirements.</p>
<p>Each agent has three components &minus;</p>
<ul class="list">
<li><p><b>The presentation component</b> &minus; Formats the visual and audio presentation of data.</p></li>
<li><p><b>The abstraction component</b> &minus; Retrieves and processes the data.</p></li>
<li><p><b>The control component</b> &minus; Handles the task such as the flow of control and communication between the other two components.</p></li>
</ul>
<p>The PAC architecture is similar to MVC, in the sense that presentation module is like view module of MVC. The abstraction module looks like model module of MVC and the control module is like the controller module of MVC, but they differ in their flow of control and organization.</p>
<p>There are no direct connections between abstraction component and presentation component in each agent. The control component in each agent is in charge of communications with other agents.</p>
<p>The following figure shows a block diagram for a single agent in PAC design.</p>
<img src="/software_architecture_design/images/pac_design.jpg" alt="PAC Design" />
<h3>PAC with Multiple Agents</h3>
<p>In PACs consisting of multiple agents, the top-level agent provides core data and business logics. The bottom level agents define detailed specific data and presentations. The intermediate level or middle level agent acts as coordinator of low-level agents.</p>
<ul class="list">
<li><p>Each agent has its own specific assigned job.</p></li>
<li><p>For some middle level agents the interactive presentations are not required, so they do not have a presentation component.</p></li>
<li><p>The control component is required for all agents through which all the agents communicate with each other.</p></li>
</ul>
<p>The following figure shows the Multiple Agents that take part in PAC.</p>
<img src="/software_architecture_design/images/multiple_agent_in_pac.jpg" alt="Multiple Agent in PAC" />
<p><b>Applications</b></p>
<ul class="list">
<li><p>Effective for an interactive system where the system can be decomposed into many cooperating agents in a hierarchical manner.</p></li>
<li><p>Effective when the coupling among the agents is expected to be loose so that changes on an agent does not affect others.</p></li>
<li><p>Effective for distributed system where all the agents are distantly distributed and each of them has its own functionalities with data and interactive interface.</p></li>
<li><p>Suitable for applications with rich GUI components where each of them keeps its own current data and interactive interface and needs to communicate with other components.</p></li>
</ul>
<h3>Advantages</h3>
<ul class="list">
<li><p>Support for multi-tasking and multi-viewing</p></li>
<li><p>Support for agent reusability and extensibility</p></li>
<li><p>Easy to plug-in new agent or change an existing one</p></li>
<li><p>Support for concurrency where multiple agents are running in parallel in different threads or different devices or computers</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Overhead due to the control bridge between presentation and abstraction and the communication of controls among agents.</p></li>
<li><p>Difficult to determine the right number of agents because of loose coupling and high independence among agents.</p></li>
<li><p>Complete separation of presentation and abstraction by control in each agent generate development complexity since communications between agents only take place between the controls of agents</p></li>
</ul>
<h1>Distributed Architecture</h1>
<p>In distributed architecture, components are presented on different platforms and several components can cooperate with one another over a communication network in order to achieve a specific objective or goal.</p>
<ul class="list">
<li><p>In this architecture, information processing is not confined to a single machine rather it is distributed over several independent computers.</p></li>
<li><p>A distributed system can be demonstrated by the client-server architecture which forms the base for multi-tier architectures; alternatives are the broker architecture such as CORBA, and the Service-Oriented Architecture (SOA).</p></li>
<li><p>There are several technology frameworks to support distributed architectures, including .NET, J2EE, CORBA, .NET Web services, AXIS Java Web services, and Globus Grid services.</p></li>
<li><p>Middleware is an infrastructure that appropriately supports the development and execution of distributed applications. It provides a buffer between the applications and the network.</p></li>
<li><p>It sits in the middle of system and manages or supports the different components of a distributed system. Examples are transaction processing monitors, data convertors and communication controllers etc.</p></li>
</ul>
<p>Middleware as an infrastructure for distributed system</p>
<img src="/software_architecture_design/images/concepts_distributed_architecture.jpg" alt="Concepts Distributed Architecture" />
<p>The basis of a distributed architecture is its transparency, reliability, and availability.</p>
<p>The following table lists the different forms of transparency in a distributed system &minus;</p>
<table class="table table-bordered">
<tr>
<th>Sr.No.</th>
<th style="text-align:center;">Transparency &amp; Description</th>
</tr>
<tr>
<td class="ts">1</td>
<td><p><b>Access</b></p>
<p>Hides the way in which resources are accessed and the differences in data platform.</p></td>
</tr>
<tr>
<td class="ts">2</td>
<td><p><b>Location</b></p>
<p>Hides where resources are located.</p></td>
</tr>
<tr>
<td class="ts">3</td>
<td><p><b>Technology</b></p>
<p>Hides different technologies such as programming language and OS from user.</p></td>
</tr>
<tr>
<td class="ts">4</td>
<td><p><b>Migration / Relocation</b></p>
<p>Hide resources that may be moved to another location which are in use.</p></td>
</tr>
<tr>
<td class="ts">5</td>
<td><p><b>Replication</b></p>
<p>Hide resources that may be copied at several location.</p></td>
</tr>
<tr>
<td class="ts">6</td>
<td><p><b>Concurrency</b></p>
<p>Hide resources that may be shared with other users.</p></td>
</tr>
<tr>
<td class="ts">7</td>
<td><p><b>Failure</b></p>
<p>Hides failure and recovery of resources from user.</p></td>
</tr>
<tr>
<td class="ts">8</td>
<td><p><b>Persistence</b></p>
<p>Hides whether a resource ( software ) is in memory or disk.</p></td>
</tr>
</table>
<h3>Advantages</h3>
<ul class="list">
<li><p><b>Resource sharing</b> &minus; Sharing of hardware and software resources.</p></li>
<li><p><b>Openness</b> &minus; Flexibility of using hardware and software of different vendors.</p></li>
<li><p><b>Concurrency</b> &minus; Concurrent processing to enhance performance.</p></li>
<li><p><b>Scalability</b> &minus; Increased throughput by adding new resources.</p></li>
<li><p><b>Fault tolerance</b> &minus; The ability to continue in operation after a fault has occurred.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p><b>Complexity</b> &minus; They are more complex than centralized systems.</p></li>
<li><p><b>Security</b> &minus; More susceptible to external attack.</p></li>
<li><p><b>Manageability</b> &minus; More effort required for system management.</p></li>
<li><p><b>Unpredictability</b> &minus; Unpredictable responses depending on the system organization and network load.</p></li>
</ul>
<h3>Centralized System vs. Distributed System</h3>
<table class="table table-bordered ts" >
<tr>
<th style="text-align:center;">Criteria</th>
<th style="text-align:center;">Centralized system</th>
<th style="text-align:center;">Distributed System</th>
</tr>
<tr>
<td>Economics</td>
<td>Low</td>
<td>High</td>
</tr>
<tr>
<td>Availability</td>
<td>Low</td>
<td>High</td>
</tr>
<tr>
<td>Complexity</td>
<td>Low</td>
<td>High</td>
</tr>
<tr>
<td>Consistency</td>
<td>Simple</td>
<td>High</td>
</tr>
<tr>
<td>Scalability</td>
<td>Poor</td>
<td>Good</td>
</tr>
<tr>
<td>Technology</td>
<td>Homogeneous</td>
<td>Heterogeneous</td>
</tr>
<tr>
<td>Security</td>
<td>High</td>
<td>Low</td>
</tr>
</table>
<h2>Client-Server Architecture</h2>
<p>The client-server architecture is the most common distributed system architecture which decomposes the system into two major subsystems or logical processes &minus;</p>
<ul class="list">
<li><p><b>Client</b> &minus; This is the first process that issues a request to the second process i.e. the server.</p></li>
<li><p><b>Server</b> &minus; This is the second process that receives the request, carries it out, and sends a reply to the client.</p></li>
</ul>
<p>In this architecture, the application is modelled as a set of services that are provided by servers and a set of clients that use these services. The servers need not know about clients, but the clients must know the identity of servers, and the mapping of processors to processes is not necessarily 1 : 1</p>
<img src="/software_architecture_design/images/two_tier_client_server_architecture.jpg" alt="Two Tier Client Server Architecture" />
<p>Client-server Architecture can be classified into two models based on the functionality of the client &minus;</p>
<h3>Thin-client model</h3>
<p>In thin-client model, all the application processing and data management is carried by the server. The client is simply responsible for running the presentation software.</p>
<ul class="list">
<li><p>Used when legacy systems are migrated to client server architectures in which legacy system acts as a server in its own right with a graphical interface implemented on a client</p></li>
<li><p>A major disadvantage is that it places a heavy processing load on both the server and the network.</p></li>
</ul>
<h3>Thick/Fat-client model</h3>
<p>In thick-client model, the server is only in charge for data management. The software on the client implements the application logic and the interactions with the system user.</p>
<ul class="list">
<li><p>Most appropriate for new C/S systems where the capabilities of the client system are known in advance</p></li>
<li><p>More complex than a thin client model especially for management. New versions of the application have to be installed on all clients.</p></li>
</ul>
<img src="/software_architecture_design/images/thick_fat_client_model.jpg" alt="Thick/Fat-client Model" />
<h3>Advantages</h3>
<ul class="list">
<li><p>Separation of responsibilities such as user interface presentation and business logic processing.</p></li>
<li><p>Reusability of server components and potential for concurrency</p></li>
<li><p>Simplifies the design and the development of distributed applications</p></li>
<li><p>It makes it easy to migrate or integrate existing applications into a distributed environment.</p></li>
<li><p>It also makes effective use of resources when a large number of clients are accessing a high-performance server.</p></li>
</ul>
<h3>Disadvantages</h3>
<ul class="list">
<li><p>Lack of heterogeneous infrastructure to deal with the requirement changes.</p></li>
<li><p>Security complications.</p></li>
<li><p>Limited server availability and reliability.</p></li>
<li><p>Limited testability and scalability.</p></li>
<li><p>Fat clients with presentation and business logic together.</p></li>
</ul>
<h2>Multi-Tier Architecture (n-tier Architecture)</h2>
<p>Multi-tier architecture is a client–server architecture in which the functions such as presentation, application processing, and data management are physically separated. By separating an application into tiers, developers obtain the option of changing or adding a specific layer, instead of reworking the entire application. It provides a model by which developers can create flexible and reusable applications.</p>
<img src="/software_architecture_design/images/n_tier_architecture.jpg" alt="N-Tier Architecture" />
<p>The most general use of multi-tier architecture is the three-tier architecture. A three-tier architecture is typically composed of a presentation tier, an application tier, and a data storage tier and may execute on a separate processor.</p>
<h3>Presentation Tier</h3>
<p>Presentation layer is the topmost level of the application by which users can access directly such as webpage or Operating System GUI (Graphical User interface). The primary function of this layer is to translate the tasks and results to something that user can understand. It communicates with other tiers so that it places the results to the browser/client tier and all other tiers in the network.</p>
<h3>Application Tier (Business Logic, Logic Tier, or Middle Tier)</h3>
<p>Application tier coordinates the application, processes the commands, makes logical decisions, evaluation, and performs calculations. It controls an application’s functionality by performing detailed processing. It also moves and processes data between the two surrounding layers.</p>
<h3>Data Tier</h3>
<p>In this layer, information is stored and retrieved from the database or file system. The information is then passed back for processing and then back to the user. It includes the data persistence mechanisms (database servers, file shares, etc.) and provides API (Application Programming Interface) to the application tier which provides methods of managing the stored data.</p> 
<img src="/software_architecture_design/images/data_tier.jpg" alt="Data Tier" />
<p><b>Advantages</b></p>
<ul class="list">
<li><p>Better performance than a thin-client approach and is simpler to manage than a thick-client approach.</p></li>
<li><p>Enhances the reusability and scalability &minus; as demands increase, extra servers can be added.</p></li>
<li><p>Provides multi-threading support and also reduces network traffic.</p></li>
<li><p>Provides maintainability and flexibility</p></li>
</ul>
<p><b>Disadvantages</b></p>
<ul class="list">
<li><p>Unsatisfactory Testability due to lack of testing tools.</p></li>
<li><p>More critical server reliability and availability.</p></li>
</ul>
<h2>Broker Architectural Style</h2>
<p>Broker Architectural Style is a middleware architecture used in distributed computing to coordinate and enable the communication between registered servers and clients. Here, object communication takes place through a middleware system called an object request broker (software bus).</p>
<ul class="list">
<li><p>Client and the server do not interact with each other directly. Client and server have a direct connection to its proxy which communicates with the mediator-broker.</p></li>
<li><p>A server provides services by registering and publishing their interfaces with the broker and clients can request the services from the broker statically or dynamically by look-up.</p></li>
<li><p>CORBA (Common Object Request Broker Architecture) is a good implementation example of the broker architecture.</p></li>
</ul>
<h3>Components of Broker Architectural Style</h3>
<p>The components of broker architectural style are discussed through following heads &minus;</p>
<p><b>Broker</b></p>
<p>Broker is responsible for coordinating communication, such as forwarding and dispatching the results and exceptions. It can be either an invocation-oriented service, a document or message - oriented broker to which clients send a message.</p>
<ul class="list">
<li><p>It is responsible for brokering the service requests, locating a proper server, transmitting requests, and sending responses back to clients.</p></li>
<li><p>It retains the servers’ registration information including their functionality and services as well as location information.</p></li>
<li><p>It provides APIs for clients to request, servers to respond, registering or unregistering server components, transferring messages, and locating servers.</p></li>
</ul>
<p><b>Stub</b></p>
<p>Stubs are generated at the static compilation time and then deployed to the client side which is used as a proxy for the client. Client-side proxy acts as a mediator between the client and the broker and provides additional transparency between them and the client; a remote object appears like a local one.</p>
<p>The proxy hides the IPC (inter-process communication) at protocol level and performs marshaling of parameter values and un-marshaling of results from the server.</p>
<p><b>Skeleton</b></p>
<p>Skeleton is generated by the service interface compilation and then deployed to the server side, which is used as a proxy for the server. Server-side proxy encapsulates low-level system-specific networking functions and provides high-level APIs to mediate between the server and the broker.</p>
<p>It receives the requests, unpacks the requests, unmarshals the method arguments, calls the suitable service, and also marshals the result before sending it back to the client.</p>
<p><b>Bridge</b></p>
<p>A bridge can connect two different networks based on different communication protocols. It mediates different brokers including DCOM, .NET remote, and Java CORBA brokers.</p>
<p>Bridges are optional component, which hides the implementation details when two brokers interoperate and take requests and parameters in one format and translate them to another format.</p>
<img src="/software_architecture_design/images/broker_model.jpg" alt="Broker Model" />
<p><b>Broker implementation in CORBA</b></p>
<p>CORBA is an international standard for an Object Request Broker – a middleware to manage communications among distributed objects defined by OMG (object management group).</p>
<img src="/software_architecture_design/images/corba_architecture.jpg" alt="CORBA Architecture" />
<h2>Service-Oriented Architecture (SOA)</h2>
<p>A service is a component of business functionality that is well-defined, self-contained, independent, published, and available to be used via a standard programming interface. The connections between services are conducted by common and universal message-oriented protocols such as the SOAP Web service protocol, which can deliver requests and responses between services loosely.</p>
<p>Service-oriented architecture is a client/server design which support business-driven IT approach in which an application consists of software services and software service consumers (also known as clients or service requesters).</p>
<img src="/software_architecture_design/images/soa.jpg" alt="SOA" />
<h3>Features of SOA</h3>
<p>A service-oriented architecture provides the following features &minus;</p>
<ul class="list">
<li><p><b>Distributed Deployment</b> &minus; Expose enterprise data and business logic as loosely, coupled, discoverable, structured, standard-based, coarse-grained, stateless units of functionality called services.</p></li>
<li><p><b>Composability</b> &minus; Assemble new processes from existing services that are exposed at a desired granularity through well defined, published, and standard complaint interfaces.</p></li>
<li><p><b>Interoperability</b> &minus; Share capabilities and reuse shared services across a network irrespective of underlying protocols or implementation technology.</p></li>
<li><p><b>Reusability</b> &minus; Choose a service provider and access to existing resources exposed as services.</p></li>
</ul>
<h3>SOA Operation</h3>
<p>The following figure illustrates how does SOA operate &minus;</p>
<img src="/software_architecture_design/images/soa_operations.jpg" alt="SOA Operations" />
<p><b>Advantages</b></p>
<ul class="list">
<li><p>Loose coupling of service–orientation provides great flexibility for enterprises to make use of all available service recourses irrespective of platform and technology restrictions.</p></li>
<li><p>Each service component is independent from other services due to the stateless service feature.</p></li>
<li><p>The implementation of a service will not affect the application of the service as long as the exposed interface is not changed.</p></li>
<li><p>A client or any service can access other services regardless of their platform, technology, vendors, or language implementations.</p></li>
<li><p>Reusability of assets and services since clients of a service only need to know its public interfaces, service composition.</p></li>
<li><p>SOA based business application development are much more efficient in terms of time and cost.</p></li>
<li><p>Enhances the scalability and provide standard connection between systems.</p></li>
<li><p>Efficient and effective usage of ‘Business Services’.</p></li>
<li><p>Integration becomes much easier and improved intrinsic interoperability.</p></li>
<li><p>Abstract complexity for developers and energize business processes closer to end users.</p></li>
</ul>
<h1>Component-Based Architecture</h1>
<p>Component-based architecture focuses on the decomposition of the design into individual functional or logical components that represent well-defined communication interfaces containing methods, events, and properties. It provides a higher level of abstraction and divides the problem into sub-problems, each associated with component partitions.</p>
<p>The primary objective of component-based architecture is to ensure <b>component reusability</b>. A component encapsulates functionality and behaviors of a software element into a reusable and self-deployable binary unit. There are many standard component frameworks such as COM/DCOM, JavaBean, EJB, CORBA, .NET, web services, and grid services. These technologies are widely used in local desktop GUI application design such as graphic JavaBean components, MS ActiveX components, and COM components which can be reused by simply drag and drop operation.</p>
<p>Component-oriented software design has many advantages over the traditional object-oriented approaches such as &minus;</p>
<ul class="list">
<li><p>Reduced time in market and the development cost by reusing existing components.</p></li>
<li><p>Increased reliability with the reuse of the existing components.</p></li>
</ul>
<h2>What is a Component?</h2>
<p>A component is a modular, portable, replaceable, and reusable set of well-defined functionality that encapsulates its implementation and exporting it as a higher-level interface.</p>
<p>A component is a software object, intended to interact with other components, encapsulating certain functionality or a set of functionalities. It has an obviously defined interface and conforms to a recommended behavior common to all components within an architecture.</p>
<p>A software component can be defined as a unit of composition with a contractually specified interface and explicit context dependencies only. That is, a software component can be deployed independently and is subject to composition by third parties.</p>
<h3>Views of a Component</h3>
<p>A component can have three different views &minus; object-oriented view, conventional view, and process-related view.</p>
<p><b>Object-oriented view</b></p>
<p>A component is viewed as a set of one or more cooperating classes. Each problem domain class (analysis) and infrastructure class (design) are explained to identify all attributes and operations that apply to its implementation. It also involves defining the interfaces that enable classes to communicate and cooperate.</p>
<p><b>Conventional view</b></p>
<p>It is viewed as a functional element or a module of a program that integrates the processing logic, the internal data structures that are required to implement the processing logic and an interface that enables the component to be invoked and data to be passed to it.</p>
<p><b>Process-related view</b></p>
<p>In this view, instead of creating each component from scratch, the system is building from existing components maintained in a library. As the software architecture is formulated, components are selected from the library and used to populate the architecture.</p>
<ul class="list">
<li><p>A user interface (UI) component includes grids, buttons referred as controls, and utility components expose a specific subset of functions used in other components.</p></li>
<li><p>Other common types of components are those that are resource intensive, not frequently accessed, and must be activated using the just-in-time (JIT) approach.</p></li>
<li><p>Many components are invisible which are distributed in enterprise business applications and internet web applications such as Enterprise JavaBean (EJB), .NET components, and CORBA components.</p></li>
</ul>
<h3>Characteristics of Components</h3>
<ul class="list">
<li><p><b>Reusability</b> &minus; Components are usually designed to be reused in different situations in different applications. However, some components may be designed for a specific task.</p></li>
<li><p><b>Replaceable</b> &minus; Components may be freely substituted with other similar components.</p></li>
<li><p><b>Not context specific</b> &minus; Components are designed to operate in different environments and contexts.</p></li>
<li><p><b>Extensible</b> &minus; A component can be extended from existing components to provide new behavior.</p></li>
<li><p><b>Encapsulated</b> &minus; A A component depicts the interfaces, which allow the caller to use its functionality, and do not expose details of the internal processes or any internal variables or state.</p></li>
<li><p><b>Independent</b> &minus; Components are designed to have minimal dependencies on other components.</p></li>
</ul>
<h2>Principles of Component−Based Design</h2>
<p>A component-level design can be represented by using some intermediary representation (e.g. graphical, tabular, or text-based) that can be translated into source code. The design of data structures, interfaces, and algorithms should conform to well-established guidelines to help us avoid the introduction of errors.</p>
<ul class="list">
<li><p>The software system is decomposed into reusable, cohesive, and encapsulated component units.</p></li>
<li><p>Each component has its own interface that specifies required ports and provided ports; each component hides its detailed implementation.</p></li>
<li><p>A component should be extended without the need to make internal code or design modifications to the existing parts of the component.</p></li>
<li><p>Depend on abstractions component do not depend on other concrete components, which increase difficulty in expendability.</p></li>
<li><p>Connectors connected components, specifying and ruling the interaction among components. The interaction type is specified by the interfaces of the components.</p></li>
<li><p>Components interaction can take the form of method invocations, asynchronous invocations, broadcasting, message driven interactions, data stream communications, and other protocol specific interactions.</p></li>
<li><p>For a server class, specialized interfaces should be created to serve major categories of clients. Only those operations that are relevant to a particular category of clients should be specified in the interface.</p></li>
<li><p>A component can extend to other components and still offer its own extension points. It is the concept of plug-in based architecture. This allows a plugin to offer another plugin API.</p></li>
</ul>
<img src="/software_architecture_design/images/principles_of_component_based_design.jpg" alt="Principles of Component Based Design" />
<h2>Component-Level Design Guidelines</h2>
<p>Creates a naming conventions for components that are specified as part of the architectural model and then refines or elaborates as part of the component-level model.</p>
<ul class="list">
<li><p>Attains architectural component names from the problem domain and ensures that they have meaning to all stakeholders who view the architectural model.</p></li>
<li><p>Extracts the business process entities that can exist independently without any associated dependency on other entities.</p></li>
<li><p>Recognizes and discover these independent entities as new components.</p></li>
<li><p>Uses infrastructure component names that reflect their implementation-specific meaning.</p></li>
<li><p>Models any dependencies from left to right and inheritance from top (base class) to bottom (derived classes).</p></li>
<li><p>Model any component dependencies as interfaces rather than representing them as a direct component-to-component dependency.</p></li>
</ul>
<h2>Conducting Component-Level Design</h2>
<p>Recognizes all design classes that correspond to the problem domain as defined in the analysis model and architectural model.</p>
<ul class="list">
<li><p>Recognizes all design classes that correspond to the infrastructure domain.</p></li>
<li><p>Describes all design classes that are not acquired as reusable components, and specifies message details.</p></li>
<li><p>Identifies appropriate interfaces for each component and elaborates attributes and defines data types and data structures required to implement them.</p></li>
<li><p>Describes processing flow within each operation in detail by means of pseudo code or UML activity diagrams.</p></li>
<li><p>Describes persistent data sources (databases and files) and identifies the classes required to manage them.</p></li>
<li><p>Develop and elaborates behavioral representations for a class or component. This can be done by elaborating the UML state diagrams created for the analysis model and by examining all use cases that are relevant to the design class.</p></li>
<li><p>Elaborates deployment diagrams to provide additional implementation detail.</p></li>
<li><p>Demonstrates the location of key packages or classes of components in a system by using class instances and designating specific hardware and operating system environment.</p></li>
<li><p>The final decision can be made by using established design principles and guidelines. Experienced designers consider all (or most) of the alternative design solutions before settling on the final design model.</p></li>
</ul>
<h3>Advantages</h3>
<ul class="list">
<li><p><b>Ease of deployment</b> &minus; As new compatible versions become available, it is easier to replace existing versions with no impact on the other components or the system as a whole.</p></li>
<li><p><b>Reduced cost</b> &minus; The use of third-party components allows you to spread the cost of development and maintenance.</p></li>
<li><p><b>Ease of development</b> &minus; Components implement well-known interfaces to provide defined functionality, allowing development without impacting other parts of the system.</p></li>
<li><p><b>Reusable</b> &minus; The use of reusable components means that they can be used to spread the development and maintenance cost across several applications or systems.</p></li>
<li><p><b>Modification of technical complexity</b> &minus; A component modifies the complexity through the use of a component container and its services.</p></li>
<li><p><b>Reliability</b> &minus; The overall system reliability increases since the reliability of each individual component enhances the reliability of the whole system via reuse.</p></li>
<li><p><b>System maintenance and evolution</b> &minus; Easy to change and update the implementation without affecting the rest of the system.</p></li>
<li><p><b>Independent</b> &minus; Independency and flexible connectivity of components. Independent development of components by different group in parallel. Productivity for the software development and future software development.</p></li>
</ul>
<h1>User Interface</h1>
<p>User interface is the first impression of a software system from the user’s point of view. Therefore any software system must satisfy the requirement of user. UI mainly performs two functions &minus;</p>
<ul class="list">
<li><p>Accepting the user’s input</p></li>
<li><p>Displaying the output</p></li>
</ul>
<p>User interface plays a crucial role in any software system. It is possibly the only visible aspect of a software system as &minus;</p>
<ul class="list">
<li><p>Users will initially see the architecture of software system’s external user interface without considering its internal architecture.</p></li>
<li><p>A good user interface must attract the user to use the software system without mistakes. It should help the user to understand the software system easily without misleading information. A bad UI may cause market failure against the competition of software system.</p></li>
<li><p>UI has its syntax and semantics. The syntax comprises component types such as textual, icon, button etc. and usability summarizes the semantics of UI. The quality of UI is characterized by its look and feel (syntax) and its usability (semantics).</p></li>
<li><p>There are basically two major kinds of user interface &minus; a) Textual b) Graphical.</p></li>
<li><p>Software in different domains may require different style of its user interface for e.g. calculator need only a small area for displaying numeric numbers, but a big area for commands, A web page needs forms, links, tabs, etc.</p></li>
</ul>
<h2>Graphical User Interface</h2>
<p>A graphical user interface is the most common type of user interface available today. It is a very user friendly because it makes use of pictures, graphics, and icons - hence why it is called 'graphical'.</p>
<p>It is also known as a <b><u>WIMP</u> interface</b> because it makes use of &minus;</p>
<ul class="list">
<li><p><b><u>W</u>indows</b> &minus; A rectangular area on the screen where the commonly used applications run.</p></li>
<li><p><b><u>I</u>cons</b> &minus; A picture or symbol which is used to represent a software application or hardware device.</p></li>
<li><p><b><u>M</u>enus</b> &minus; A list of options from which the user can choose what they require.</p></li>
<li><p><b><u>P</u>ointers</b> &minus; A symbol such as an arrow which moves around the screen as user moves the mouse. It helps user to select objects.</p></li>
</ul>
<h2>Design of User Interface</h2>
<p>It starts with task analysis which understands the user’s primary tasks and problem domain. It should be designed in terms of User’s terminology and outset of user’s job rather than programmer’s.</p>
<ul class="list">
<li><p>To perform user interface analysis, the practitioner needs to study and understand four elements &minus;</p>
<ul class="list">
<li><p>The <b>users</b> who will interact with the system through the interface</p></li>
<li><p>The <b>tasks</b> that end users must perform to do their work</p></li>
<li><p>The <b>content</b> that is presented as part of the interface</p></li>
<li><p>The <b>work environment</b> in which these tasks will be conducted</p></li>
</ul>
</li>
<li><p>Proper or good UI design works from the user’s capabilities and limitations not the machines. While designing the UI, knowledge of the nature of the user's work and environment is also critical.</p></li>
<li><p>The task to be performed can then be divided which are assigned to the user or machine, based on knowledge of the capabilities and limitations of each. The design of a user interface is often divided into four different levels &minus;</p>
<ul class="list">
<li><p><b>The conceptual level</b> &minus; It describes the basic entities considering the user's view of the system and the actions possible upon them.</p></li>
<li><p><b>The semantic level</b> &minus; It describes the functions performed by the system i.e. description of the functional requirements of the system, but does not address how the user will invoke the functions.</p></li>
<li><p><b>The syntactic level</b> &minus; It describes the sequences of inputs and outputs required to invoke the functions described.</p></li>
<li><p><b>The lexical level</b> &minus; It determines how the inputs and outputs are actually formed from primitive hardware operations.</p></li>
</li>
</ul>
<li><p>User interface design is an iterative process, where all the iteration explains and refines the information developed in the preceding steps. General steps for user interface design</p></li>
<ul class="list">
<li><p>Defines user interface objects and actions (operations).</p></li>
<li><p>Defines events (user actions) that will cause the state of the user interface to change.</p></li>
<li><p>Indicates how the user interprets the state of the system from information provided through the interface.</p></li>
<li><p>Describe each interface state as it will actually look to the end user.</p></li>
</ul>
</ul>
<h2>User Interface Development Process</h2>
<p>It follows a spiral process as shown in the following diagram &minus;</p>
<img src="/software_architecture_design/images/spiral_process.jpg" alt="Spiral Process" />
<p><b>Interface analysis</b></p>
<p>It concentrates or focuses on users, tasks, content, and work environment who will interact with the system. Defines the human - and computer-oriented tasks that are required to achieve system function.</p>
<p><b>Interface design</b></p>
<p>It defines a set of interface objects, actions, and their screen representations that enable a user to perform all defined tasks in a manner that meets every usability objective defined for the system.</p>
<p><b>Interface construction</b></p>
<p>It starts with a prototype that enables usage scenarios to be evaluated and continues with development tools to complete the construction.</p>
<p><b>Interface validation</b></p>
<p>It focuses on the ability of the interface to implement every user task correctly, accommodate all task variations, to achieve all general user requirements, and the degree to which the interface is easy to use and easy to learn.</p>
<p><b>User Interface Models</b></p>
<p>When a user interface is analyzed and designed following four models are used &minus;</p>
<p><b>User profile model</b></p>
<ul class="list">
<li><p>Created by a user or software engineer, which establishes the profile of the end-users of the system based on age, gender, physical abilities, education, motivation, goals, and personality.</p></li>
<li><p>Considers syntactic and semantic knowledge of the user and classifies users as novices, knowledgeable intermittent, and knowledgeable frequent users.</p></li>
</ul>
<p><b>Design model</b></p>
<ul class="list">
<li><p>Created by a software engineer which incorporates data, architectural, interface, and procedural representations of the software.</p></li>
<li><p>Derived from the analysis model of the requirements and controlled by the information in the requirements specification which helps in defining the user of the system.</p></li>
</ul>
<p><b>Implementation model</b></p>
<ul class="list">
<li><p>Created by the software implementers who work on look and feel of the interface combined with all supporting information (books, videos, help files) that describes system syntax and semantics.</p></li>
<li><p>Serves as a translation of the design model and attempts to agree with the user's mental model so that users then feel comfortable with the software and use it effectively.</p></li>
</ul>
<p><b>User's mental model</b></p>
<ul class="list">
<li><p>Created by the user when interacting with the application. It contains the image of the system that users carry in their heads.</p></li>
<li><p>Often called the user's system perception and correctness of the description depends upon the user’s profile and overall familiarity with the software in the application domain.</p></li>
</ul>
<h2>Design Considerations of User Interface</h2>
<h3>User centered</h3>
<p>A user interface must be a user-centered product which involves users throughout a product’s development lifecycle. The prototype of a user interface should be available to users and feedback from users, should be incorporated into the final product.</p>
<h3>Simple and Intuitive</h3>
<p>UI provides simplicity and intuitiveness so that it can be used quickly and effectively without instructions. GUI are better than textual UI, as GUI consists of menus, windows, and buttons and is operated by simply using mouse.</p>
<h3>Place Users in Control</h3>
<p>Do not force users to complete predefined sequences. Give them options—to cancel or to save and return to where they left off. Use terms throughout the interface that users can understand, rather than system or developer terms.</p>
<p>Provide users with some indication that an action has been performed, either by showing them the results of the action, or acknowledging that the action has taken place successfully.</p>
<h3>Transparency</h3>
<p>UI must be transparent that helps users to feel like they are reaching right through computer and directly manipulating the objects they are working with. The interface can be made transparent by giving users work objects rather than system objects. For example, users should understand that their system password must be at least 6 characters, not how many bytes of storage a password must be.</p>
<h3>Use progressive disclosure</h3>
<p>Always provide easy access to common features and frequently used actions. Hide less common features and actions and allow users to navigate them. Do not try to put every piece of information in one main window. Use secondary window for information that is not key information.</p>
<h3>Consistency</h3>
<p>UI maintains the consistency within and across product, keep interaction results the same, UI commands and menus should have the same format, command punctuations should be similar and parameters should be passed to all commands in the same way. UI should not have behavior’s that can surprise the users and should include the mechanisms that allows users to recover from their mistakes.</p>
<h3>Integration</h3>
<p>The software system should integrate smoothly with other applications such as MS notepad and MS-Office. It can use Clipboard commands directly to perform data interchange.</p>
<h3>Component Oriented</h3>
<p>UI design must be modular and incorporate component oriented architecture so that the design of UI will have the same requirements as the design of the main body of the software system. The modules can easily be modified and replaced without affecting of other parts of the system.</p>
<h3>Customizable</h3>
<p>The architecture of whole software system incorporates plug-in modules, which allow many different people independently extend the software. It allows individual users to select from various available forms in order to suit personal preferences and needs.</p>
<h3>Reduce Users’ Memory Load</h3>
<p>Do not force users to have to remember and repeat what the computer should be doing for them. For example, when filling in online forms, customer names, addresses, and telephone numbers should be remembered by the system once a user has entered them, or once a customer record has been opened.</p>
<p>User interfaces support long-term memory retrieval by providing users with items for them to recognize rather than having to recall information.</p>
<h3>Separation</h3>
<p>UI must be separated from the logic of the system through its implementation for increasing reusability and maintainability.</p>
<h1>Architecture Techniques</h1>
<h2>Iterative and Incremental Approach</h2>
<p>It is an iterative and incremental approach consisting of five main steps that helps to generate candidate solutions. This candidate solution can further be refined by repeating these steps and finally create an architecture design that best fits our application. At the end of the process, we can review and communicate our architecture to all interested parties.</p>
<p>It is just one possible approach. There are many other more formal approaches that defining, reviewing, and communicating your architecture.</p>
<h3>Identify Architecture Goal</h3>
<p>Identify the architecture goal that forms the architecture and design process. Flawless and defined objectives emphasize on the architecture, solve the right problems in the design and helps to determine when the current phase has completed, and ready to move to the next phase.</p>
<p>This step includes the following activities &minus;</p>
<ul class="list">
<li>Identify your architecture goals at the start.</li>
<li>Identify the consumer of our architecture.</li>
<li>Identify the constraints.</li>
</ul>
<p>Examples of architecture activities include building a prototype to get feedback on the order-processing UI for a Web application, building a customer order-tracking application, and designing the authentication, and authorization architecture for an application in order to perform a security review.</p>
<h3>Key Scenarios</h3>
<p>This step puts emphasis on the design that matters the most. A scenario is an extensive and covering description of a user's interaction with the system.</p>
<p>Key scenarios are those that are considered the most important scenarios for the success of your application. It helps to make decisions about the architecture. The goal is to achieve a balance among the user, business, and system objectives. For example, user authentication is a key scenario because they are an intersection of a quality attribute (security) with important functionality (how a user logs into your system).</p>
<h3>Application Overview</h3>
<p>Build an overview of application, which makes the architecture more touchable, connecting it to real-world constraints and decisions. It consists of the following activities &minus;</p>
<h3>Identify Application Type</h3>
<p>Identify application type whether it is a mobile application, a rich client, a rich internet application, a service, a web application, or some combination of these types.</p>
<h3>Identify Deployment Constraints</h3>
<p>Choose an appropriate deployment topology and resolve conflicts between the application and the target infrastructure.</p>
<h3>Identify Important Architecture Design Styles</h3>
<p>Identify important architecture design styles such as client/server, layered, message-bus, domain-driven design, etc. to improve partitioning and promotes design reuse by providing solutions to frequently recurring problems. Applications will often use a combination of styles.</p>
<h3>Identify the Relevant Technologies</h3>
<p>Identify the relevant technologies by considering the type of application we are developing, our preferred options for application deployment topology and architectural styles. The choice of technologies will also be directed by organization policies, infrastructure limitations, resource skills, and so on.</p>
<h3>Key Issues or Key Hotspots</h3>
<p>While designing an application, hot spots are the zones where mistakes are most often made. Identify key issues based on quality attributes and crosscutting concerns. Potential issues include the appearance of new technologies and critical business requirements.</p>
<p>Quality attributes are the overall features of your architecture that affect run-time behavior, system design, and user experience. Crosscutting concerns are the features of our design that may apply across all layers, components, and tiers.</p>
<p>These are also the areas in which high-impact design mistakes are most often made. Examples of crosscutting concerns are authentication and authorization, communication, configuration management, exception management and validation, etc.</p>
<h3>Candidate Solutions</h3>
<p>After defining the key hotspots, build the initial baseline architecture or first high level design and then start to fill in the details to generate candidate architecture.</p>
<p>Candidate architecture includes the application type, the deployment architecture, the architectural style, technology choices, quality attributes, and crosscutting concerns. If the candidate architecture is an improvement, it can become the baseline from which new candidate architectures can be created and tested.</p>
<p>Validate the candidate solution design against the key scenarios and requirements that have already defined, before iteratively following the cycle and improving the design.</p>
<p>We may use architectural spikes to discover the specific areas of the design or to validate new concepts. Architectural spikes are a design prototype, which determine the feasibility of a specific design path, reduce the risk, and quickly determine the viability of different approaches. Test architectural spikes against key scenarios and hotspots.</p>
<h2>Architecture Review</h2>
<p>Architecture review is the most important task in order to reduce the cost of mistakes and to find and fix architectural problems as early as possible. It is a well-established, cost-effective way of reducing project costs and the chances of project failure.</p>
<ul class="list">
<li><p>Review the architecture frequently at major project milestones, and in response to other significant architectural changes.</p></li>
<li><p>The main objective of an architecture review is to determine the feasibility of baseline and candidate architectures, which verify the architecture correctly.</p></li>
<li><p>Links the functional requirements and the quality attributes with the proposed technical solution. It also helps to identify issues and recognize areas for improvement</p></li>
</ul>
<p>Scenario-based evaluations are a dominant method for reviewing an architecture design which focuses on the scenarios that are most important from the business perspective, and which have the greatest impact on the architecture.Following are common review methodologies &minus;</p>
<h3>Software Architecture Analysis Method (SAAM)</h3>
<p>It is originally designed for assessing modifiability, but later was extended for reviewing architecture with respect to quality attributes.</p>
<h3>Architecture Tradeoff Analysis Method (ATAM)</h3>
<p>It is a polished and improved version of SAAM, which reviews architectural decisions with respect to the quality attributes requirements, and how well they satisfy particular quality goals.</p>
<h3>Active Design Review (ADR)</h3> 
<p>It is best suited for incomplete or in-progress architectures, which more focus on a set of issues or individual sections of the architecture at a time, rather than performing a general review.</p>
<h3>Active Reviews of Intermediate Designs (ARID)</h3>
<p>It combines the ADR aspect of reviewing in-progress architecture with a focus on a set of issues, and the ATAM and SAAM approach of scenario-based review focused on quality attributes.</p>
<h3>Cost Benefit Analysis Method (CBAM)</h3>
<p>It focuses on analyzing the costs, benefits, and schedule implications of architectural decisions.</p>
<h3>Architecture Level Modifiability Analysis (ALMA)</h3>
<p>It estimates the modifiability of architecture for business information systems (BIS).</p>
<h3>Family Architecture Assessment Method (FAAM)</h3>
<p>It estimates information system family architectures for interoperability and extensibility.</p>
<h2>Communicating the Architecture Design</h2>
<p>After completing the architecture design, we must communicate the design to the other stakeholders, which include development team, system administrators, operators, business owners, and other interested parties.</p>
<p>There are several following well-known methods for describing architecture to others: &minus;</p>
<h3>4 + 1 Model</h3>
<p>This approach uses five views of the complete architecture. Among them, four views (the <b>logical view,</b> the <b>process view,</b> the <b>physical view,</b> and the <b>development view</b>) describe the architecture from different approaches. A fifth view shows the scenarios and use cases for the software. It allows stakeholders to see the features of the architecture that specifically interest them.</p>
<h3>Architecture Description Language (ADL)</h3>
<p>This approach is used to describe software architecture prior to the system implementation. It addresses the following concerns &minus; behavior, protocol, and connector.</p>
<p>The main advantage of ADL is that we can analyze the architecture for completeness, consistency, ambiguity, and performance before formally beginning use of the design.</p>
<h3>Agile Modeling</h3>
<p>This approach follows the concept that “content is more important than representation.” It ensures that the models created are simple and easy to understand, sufficiently accurate, detailed, and consistent.</p>
<p>Agile model documents target specific customer(s) and fulfill the work efforts of that customer. The simplicity of the document ensures that there is active participation of stakeholders in the modeling of the artifact.</p>
<h3>IEEE 1471</h3>
<p>IEEE 1471 is the short name for a standard formally known as ANSI/IEEE 1471-2000, “Recommended Practice for Architecture Description of Software-Intensive Systems.” IEEE 1471 enhances the content of an architectural description, in particular, giving specific meaning to context, views, and viewpoints.</p>
<h3>Unified Modeling Language (UML)</h3>
<p>This approach represents three views of a system model. The <b>functional requirements view</b> (functional requirements of the system from the point of view of the user, including use cases); <b>the static structural view</b> (objects, attributes, relationships, and operations including class diagrams); and the <b>dynamic behavior view</b> (collaboration among objects and changes to the internal state of objects, including sequence, activity, and state diagrams).</p>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/software_architecture_design/architecture_techniques.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/software_architecture_design/useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
