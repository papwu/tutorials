<!DOCTYPE html>
<html lang="en-US">
<head>
<title>RichFaces - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="RichFaces - Quick Guide - RichFaces is an open source component library for JSF technology. It is developed and designed by JBoss. RichFaces provides reusable markups and AJAX capabiliti"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/richfaces/richfaces_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#fb9b21;
}
a.demo {
    background:#fb9b21;
}
li.heading {
    background:#fb9b21;
}
.course-box{background:#fb9b21}
.home-intro-sub p{color:#fb9b21}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/richfaces/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/richfaces/images/richfaces-mini-logo.jpg" alt="RichFaces Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">RichFaces Tutorial</li>
<li><a href="/richfaces/index.htm">RichFaces - Home</a></li>
<li><a href="/richfaces/richfaces_overview.htm">RichFaces - Overview</a></li>
<li><a href="/richfaces/richfaces_environment_setup.htm">RichFaces - Environment Setup</a></li>
<li><a href="/richfaces/richfaces_architecture.htm">RichFaces - Architecture</a></li>
<li><a href="/richfaces/richfaces_basic_concepts.htm">RichFaces - Basic Concepts</a></li>
<li><a href="/richfaces/richfaces_rich_skin.htm">RichFaces - Rich Skin</a></li>
<li><a href="/richfaces/richfaces_input_components.htm">RichFaces - Input Components</a></li>
<li><a href="/richfaces/richfaces_output_components.htm">RichFaces - Output Components</a></li>
<li><a href="/richfaces/richfaces_iteration_component.htm">RichFaces - Iteration Component</a></li>
<li><a href="/richfaces/richfaces_selection_component.htm">RichFaces - Selection Components</a></li>
<li><a href="/richfaces/richfaces_menu_components.htm">RichFaces - Menu Components</a></li>
<li><a href="/richfaces/richfaces_rich_tree.htm">RichFaces - Rich Tree</a></li>
<li><a href="/richfaces/richfaces_error_handling.htm">RichFaces - Error Handling</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">RichFaces Useful Resources</li>
<li><a href="/richfaces/richfaces_quick_guide.htm" >RichFaces - Quick Guide</a></li>
<li><a href="/richfaces/richfaces_useful_resources.htm" >RichFaces - Useful Resources</a></li>
<li><a href="/richfaces/richfaces_discussion.htm" >RichFaces - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>RichFaces - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/richfaces/richfaces_error_handling.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/richfaces/richfaces_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>RichFaces - Overview</h1>
<p>RichFaces is an open source component library for JSF technology. It is developed and designed by JBoss. RichFaces provides reusable markups and AJAX capabilities to a JSF developer without having any prior knowledge of front end. RichFaces was developed over JSF 2, hence it follows the same life cycle of JSF. The in-built AJAX support and customizable look and feel features has enabled a new horizon for Enterprise Java application.</p>
<h2>Advantages and Disadvantages</h2>
<p>Following are a few <b>advantages</b> of using RichFaces.</p>
<p><b>AJAX support</b> &minus; RichFaces eliminates the old boilerplate AJAX, JavaScript codes to include markups in the webpages. Using RichFaces, a developer can include markups on-the-fly without having any prior knowledge of AJAX.</p>
<p><b>Component Development Kit (CDK)</b> &minus; As described earlier, the developer need not concentrate on the markups used in the application, all they need to include is RichFaces tags to use those functionalities. This automatic creation of markups will be done by a runtime environment called CDK.</p>
<p><b>Resource handling</b> &minus; RichFaces provides additional support to create different binary files such as image, excel, spreadsheet, etc.</p>
<p><b>Skinning</b> &minus; Skinning is a modern approach that has been introduced in JSF, which makes it very easy to control the look and feel of the application. Specially-centralized color management using different other customizable parameters make it very handy for a developer.</p>
<p>Following are a few <b>disadvantages</b> of using RichFaces.</p>
<p><b>Resource</b> &minus; This being a fairly new technology, getting good quality resource is a huge problem for rich face developer.</p>
<p><b>Complex</b> &minus; Transition through different phases and creation of dynamic markups is the entire responsibility of CDK. Understanding internal processing of CDK is a bit complex and confusing for a traditional front-end developer.</p>
<h1>RichFaces - Environment Setup</h1>
<p>In this chapter, you will set up our development environment and configure your system such that you can proceed with RichFaces development.</p>
<h2>Technical Requirements</h2>
<p>As per the technical requirement you will learn how to configure JDK, Application server, or any IDE of your choice.</p>
<h3>System Requirements</h3>
<p>You can use any running system, there is no any restriction on memory, RAM and operating system.</p>
<h3>JDK Installation</h3>
<p>Before proceeding further, you must have JDK configured on your system. Please refer to the official website of <a target="_blank" rel="nofollow" href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">oracle</a> to download and install JDK 7 or an above version. You might have to set the environment variable for Java such that it can work properly. To verify your installation in Windows operating system, hit “java –version” in the command prompt and as an output it will show you the Java version installed in your system.</p>
<h3>IDE Installation</h3>
<p>There are numbers of IDE available on the Internet. You can use any as you choose. For this tutorial, let us use NetBeans 8.2. You can find the download link of different IDE in the following table.</p>
<table style="text-align:center" class="table table-bordered">
<tr>
<th class="ts">IDE Name</th>
<th class="ts">Installation Link</th>
</tr>
<tr>
<td>NetBeans</td>
<td><a target="_blank" rel="nofollow" href="https://netbeans.org/downloads/">https://netbeans.org/downloads/</a></td>
</tr>
<tr>
<td>Eclipse</td>
<td><a target="_blank" rel="nofollow" href="https://www.eclipse.org/downloads/">www.eclipse.org/downloads/</a></td>
</tr>
<tr>
<td>Intellij</td>
<td><a target="_blank" rel="nofollow" href="https://www.jetbrains.com/idea/download/#section=windows">www.jetbrains.com/idea/download/#section=windows</a></td>
</tr>
</table>
<p>It is always recommended to use a recent software version to drag out maximum facility from it. For this tutorial, we will be using NetBeans IDE 8.2 along with JDK 8.</p>
<h3>Server Requirements</h3>
<p>As an application server, you will be using Tomcat. In this chapter, you will configure the tomcat server in the system. If you are installing the latest version of NetBeans, then you can directly install Apache Tomcat along with NetBeans IDE. If you are not doing so, please download the latest version of Tomcat from the official website of the <a target="_blank" rel="nofollow" href="https://tomcat.apache.org">TOMCAT</a>. Keep the extracted Tomcat files in your C drive or program files. These files will be used in the next phase.</p>
<h3>Client Requirements</h3>
<p>RichFaces is a UI component. Thus, like every UI component, the internet browser will act as a client for your application. You can use any modern internet browser such as IE, Safari, Chrome, etc.</p>
<h3>Development Requirements</h3>
<p>Downloading required jars: Please visit the official website of <a target="_blank" rel="nofollow" href="https://richfaces.jboss.org/download/stable.html">JBOSS</a> and download the latest stable release of the JBoss jar files. Extract the files. You will need the following jars in order to develop RichFaces Application.</p>
<ul class="list">
<li>richfaces-a4j-4.5.17.Final.jar</li>
<li>richfaces-core-4.5.17.Final.jar</li>
<li>richfaces-rich-4.5.17.Final.jar</li>
<li>cssparser-0.9.18.jar</li>
<li>guava-19.0.jar</li>
<li>sac-1.3.jar</li>
</ul>
<h2>Creating a Project</h2>
<p>In this section, let us create a demo application that will be used later to learn more about RichFaces. Before proceeding further, it is highly recommended that you download and install all required software and jar files mentioned earlier.</p>
<p><b>Step 1</b> &minus; Open NetBeans IDE. Go to File &rarr; New Project. You will be redirected to the following screenshot.</p>
<p><b>Step 2</b> &minus; Select “Java Web” and “Web Application” in “Categories” and “Projects” tab respectively and hit “Next”.</p>
<img src="/richfaces/images/choose_project.jpg" alt="Choose Project" />
<p><b>Step 3</b> &minus; In the next tab, you have to provide a project name. Here, let us name it as “RichFaceTutorial”. Then, hit “Next”. You will be redirected to the following screenshot. where you will be setting up server details.</p>
<img src="/richfaces/images/server_settings.jpg" alt="Server Settings" />
<p><b>Step 4</b> &minus; Select “Apache Tomcat” from the dropdown and hit “Add”. Once you hit “Add”, you will be redirected to a separate screen, where you need to configure your server. To configure the server, you will need the server files downloaded in the previous section.</p>
<img src="/richfaces/images/server_apache_tomcat_or_tomee.jpg" alt="Server Apache Tomcat or TomEE" />
<p><b>Step 5</b> &minus; Select “Apache Tomcat or TomEE” from the list as shown in the above screenshot and hit “Next”. You will be redirected to the following screen.</p>
<img src="/richfaces/images/server_location.jpg" alt="Server Location" />
<p><b>Step 6</b> &minus; In the Server location, you need to provide the downloaded Tomcat files location. Hit “Browse” and navigate to the required folder path and hit “Finish”. Once your server is added successfully, you will be redirected to the first screen. Hit “Next” and you will get a chance to select the different frameworks to add into the application as shown in the following screenshot.</p>
<img src="/richfaces/images/frameworks.jpg" alt="Frameworks" />
<p><b>Step 7</b> &minus; Select “JavaServer Faces” and in “JavaServer Faces Configuration” you have to select “RichFaces” and hit “Finish”.</p>
<p>If you do not get “RichFaces” as an option, you can add the required jars file from the build path. After this step, your application is ready to deploy on the application server. Following is the project directory structure of the application after completing all the above-mentioned steps.</p>
<img src="/richfaces/images/libraries.jpg" alt="Libraries" />
<p><b>Step 8</b> &minus; Go ahead and left-click the “index.xhtml ” file and run the file. You will see the following output in the browser.</p>
<img src="/richfaces/images/output.jpg" alt="Output" />
<p>In real-life application, you might have to generate the required war file and deploy in the application server, as all the pages will be interlinked.</p>
<p>However, for this tutorial we will be running the application page wise as we need to show different features of different tags.</p>
<h1>RichFaces - Architecture</h1>
<p>According to Red Hat official document, there are a total five components that work internally to provide rich user experience. Following are the five components.</p>
<ul class="list">
<li><p><b>AJAX Filter</b> &minus; AJAX filter is used to differentiate between different types of request coming from the client browser. To include this component into the application, you need to register RichFaces Filter in your application’s web.xml file. AJAX Filter acts differently in different phases of JSF applications.</p></li>
<li><p><b>AJAX Action Components</b> &minus; Action components are responsible to send the client requests from the browser to the AJAX Engine, from where it will process the request and render the required view as a response.</p></li>
<li><p><b>AJAX Containers</b> &minus; AJAX container is conceptually similar to the spring container. It is basically recognizing a specific area of the client browser to process the AJAX request.</p></li>
<li><p><b>Skinnability</b> &minus; Skin and theme together is referred to as Skinnability. This module acts independently to provide extensive support to the look and feel of the entire.</p></li>
<li><p><b>RichFaces JavaScript Engine</b> &minus; JavaScript Engine runs on the client side that sends updates to the AJAX engine in order to prepare the response. This engine works automatically, hence we need not write any extra line of code to control it.</p></li>
</ul>
<p>Following is the architectural diagram of the RichFaces application in MVC paradigm.</p>
<img src="/richfaces/images/architecture.jpg" alt="Architecture" />
<p>In the above image, the user’s activity will be processed as a “JS Event”. Later, the “JS Event” will be transmitted to the “XML Filter”, which is nothing but a component of AJAX Filter. “XML Filter” is responsible for generating and processing user requests. All other components are internal to the different jar files. We need to use appropriate tags library in order to use those functionalities.</p>
<h1>RichFaces - Basic Concepts</h1>
<p>In this chapter, we will see some basic concepts of RichFaces and we will learn how RichFaces deal with the processing of AJAX requests and many other functionalities.</p>
<h2>Processing AJAX Request</h2>
<p>As mentioned earlier, RichFaces provides rich UI components that enables AJAX functionalities in the web application even without implementing any AJAX codes. All these AJAX capabilities are introduced via <b>a4:j</b> tag library. <b>&lt;a4j:commandLink&gt; , &lt;a4j:commandButton&gt;, &lt;a4j:support&gt;</b>, and <b>&lt;a4j:poll&gt;</b> are the four tags that help the developer include AJAX functionalities into the web application. We will learn more about tag libraries in a subsequent chapter.</p>
<h2>Partial Tree Processing</h2>
<p>In a conventional AJAX application, all the input fields will be processed as different nodes of a tree, however, in RichFaces we have an option of partially submitting the tree nodes and validating the required fields.</p>
<p>Let us consider an example to understand more about this. Suppose, there are a total of five elements in HTML - “Name”, ”Employee Id”, ”Employee salary”, ”Employee Address”, and “Employee Department”. Now you want to validate or process only Employee id, which can be possible using RichFaces but not possible using AJAX. You need to submit the entire form to the server. RichFaces provides an execute attribute that can identify a specific component and process the same. Following are the different levels of execute attributes available.</p>
<ul class="list">
<li><p><b>@all</b> &minus; This attribute will process all your data.</p></li>
<li><p><b>@none</b> &minus; This can be used when you don’t want to process any of the data.</p></li>
<li><p><b>@this</b> &minus; This will process the requesting component only.</p></li>
<li><p><b>@form</b> &minus; This will process the entire form that contains the requesting component.</p></li>
<li><p><b>@region</b> &minus; This will process a specific region of a webpage.</p></li>
</ul>
<h2>Partial View Updates</h2>
<p>Like input fields, RichFaces provides similar options to update different views. Developers can customize the view according to their choice. Like the execute attribute, there is a render attribute that works similar to the execute attribute. All these attributes work based on the ID identifier of a webpage.</p>
<p>Following are the different levels of render attributes available.</p>
<ul class="list">
<li><p><b>@all</b> &minus; This will update the entire component.</p></li>
<li><p><b>@none</b> &minus; This will not update any of your components.</p></li>
<li><p><b>@this</b> &minus; This will update only the requesting component.</p></li>
<li><p><b>@from</b> &minus; This will update the form that contains the requesting data.</p></li>
<li><p><b>@region</b> &minus; This will update a specific region of the webpage.</p></li>
</ul>
<h2>Other a4j Tags</h2>
<p>Till now, we have discussed the conceptual properties about RichFaces application. In this section, we will learn about them in detail with hands-on examples.</p>
<h3>&lt;a4j:AJAX&gt;</h3>
<p>This is one of the core components that RichFaces offers. This is nothing but an extending part of JSF2.0 f:AJAX tag. This tag triggers an AJAX request whenever a JS event occurs in the webpages. Following example describes more about this tag. Create a “xhtml ”page under the webpage folder and name it as “a4jAJAXExample.xhtml”. Then, paste the following piece of code.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://xmlns.jcp.org/jsf/html"   
   xmlns:a4j = "http://richfaces.org/a4j"&gt;   
   
   &lt;h:head&gt;   
      &lt;title&gt;a4j:AJAX Tag Example&lt;/title&gt;   
   &lt;/h:head&gt;   

   &lt;h:body&gt;  
      &lt;h:form id = "form"&gt; 
         &lt;h:inputText value = "#{managedBean.message}"&gt; 
            &lt;a4j:AJAX render = "ShowMessage" /&gt; 
         &lt;/h:inputText&gt; 
         
         &lt;h:outputText value = "#{managedBean.message}" id = "ShowMessage" 
            style = "animation-duration"/&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt; 
   
&lt;/html&gt; 
</pre>
<p>We also need to create a managed bean in order to hold the inputs from the webpage. Go ahead and create a java class under the source package directory. Following is the <b>managedbean.java</b> class code.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean;   
import javax.faces.bean.RequestScoped;   

@ManagedBean   
@RequestScoped   

public class managedBean {   
   String message;   
   public String getMessage() {   
      return message;   
   }   
   public void setMessage(String message) {   
      this.message = message;   
   }   
} 
</pre>
<p>Save both the files and run, which will yield the following output in the browser.</p>
<img src="/richfaces/images/hello_buddy.jpg" alt="Hello Buddy" />
<h3>&lt;a4j:param&gt;</h3>
<p>a4j:param is an extension of f:param tag. It is used to assign a value to a property or an instance variable. This tag is capable of assigning the value to the instance variable permanently. Following is the “a4jparamExample.html” code.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://xmlns.jcp.org/jsf/html"   
   xmlns:a4j = "http://richfaces.org/a4j"&gt;  
   
   &lt;h:head&gt; 
      &lt;title&gt;Param tag example&lt;/title&gt; 
      &lt;meta name = "viewport" content = "width = device-width, initial-scale = 1.0"/&gt; 
   &lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;h:panelGrid columns = "2"&gt; 
            &lt;a4j:commandButton value = "TutorialsPoint" render = "rep"&gt; 
               &lt;a4j:param value = "Tutorials point" assignTo = "#{managedBean.message}" /&gt; 
            &lt;/a4j:commandButton&gt; 
  
            &lt;a4j:commandButton value = "RichFace Tutorials" render = "rep"&gt; 
               &lt;a4j:param value = "RichFace Tutorials" assignTo = "#{managedBean.message}" /&gt; 
            &lt;/a4j:commandButton&gt; 
         &lt;/h:panelGrid&gt; 
         &lt;br /&gt; 
         
         &lt;h:outputText id = "rep" value = "Selected Name:#{managedBean.message}" /&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt; 
   
&lt;/html&gt;
</pre>
<p>Following is the corresponding managed bean class code.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean;   
import javax.faces.bean.RequestScoped;   

@ManagedBean   
@RequestScoped   

public class managedBean {   
   String message;   
   public String getMessage() {   
      return message;   
   }   
   public void setMessage(String message) {   
      System.out.println("This method is getting called with"+message); 
      
      // we have added this line in order to check how the AJAX call 
      // happens to the class methods without any direct communication  
      this.message = message;   
   }   
} 
</pre>
<p>Go ahead and run the file. Following is the output in the browser.</p>
<img src="/richfaces/images/richface_tutorials.jpg" alt="Richface Tutorials" />
<p>Now, in the server console you will see the following output, which proves that xhtml file is communicating with the managed bean in order to set the instance variable at run time.</p>
<img src="/richfaces/images/apache_tomcat.jpg" alt="Apache Tomcat" />
<h3>&lt;a4j:commandButton&gt;</h3>
<p>We have already used the command button tag in our previous example. It is used to create a button inside a xhtml page, which will generate and communicate with the AJAX engine to process the specific request. It takes an input and processes the same and renders an output in the web browser.</p>
<p>In the previous example, we have created two buttons - “TutorialsPoint” and “RichFace Tutorials”. Our command button tag internally communicates with the managed bean and sets the required instance variables. It is also responsible for rendering the value.</p>
<h3>&lt;a4j:commandLink&gt;</h3>
<p>Command link works like &lt;h:commandlink&gt; component of JSF 2.0. The command button generates submit-based AJAX request, whenever the command link works on the JS click event. This is the only difference we have in the command button and the command link. Following example will help you understand the tag lib better. Create “a4jCommandLink.xhtml” file and paste the following code in it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://xmlns.jcp.org/jsf/html"   
   xmlns:a4j = "http://richfaces.org/a4j"&gt;  
   
   &lt;h:head&gt; 
      &lt;title&gt;Example of command Link&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt;
         &lt;h:panelGrid columns = "3"&gt; 
            &lt;h:outputText value = "Name:" /&gt; 
            &lt;h:inputText value = "#{managedBean.message}" /&gt; 
             &lt;a4j:commandLink value = "Click Me" render = "out" execute = "@form" /&gt; 
         &lt;/h:panelGrid&gt; 
      &lt;/h:form&gt; 
      &lt;br /&gt; 
      
      &lt;a4j:outputPanel id = "out"&gt; 
         &lt;h:outputText value = "Welcome to #{managedBean.message} !" /&gt; 
      &lt;/a4j:outputPanel&gt; 
   &lt;/h:body&gt; 
   
&lt;/html&gt;    
</pre>
<p>No need to change anything in the managed bean class. Run this file and following will be the output in the browser.</p>
<img src="/richfaces/images/click_me.jpg" alt="Click Me" />
<h3>&lt;a4j:outputPanel&gt;</h3>
<p>The output panel works as a span of the HTML page. It is used to group different components of a webpage rather than specify them individually. In the previous example, we have used the output panel in order to display the message provided in the input text box. Following is the syntax of the output panel.</p>
<pre class="result notranslate">
&lt;a4j:outputPanel id = "out"&gt; 
   &lt;h:outputText value = "Welcome to #{managedBean.message} !" /&gt; 
&lt;/a4j:outputPanel&gt;
</pre>
<h3>&lt;a4j:region&gt;</h3>
<p>This is the key feature of RichFaces, that allows to process some parts of the webpage from. Using this tag, partial tree processing happens in RichFaces. It is mainly used to increase the rendering process. Following example will help you understand this in detail. Please create a “a4jregionExample.xhtml” file using the following code.</p>
<pre class="prettyprint notrnalste">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:a4j = "http://richfaces.org/a4j" &gt;  
   
   &lt;h:head&gt; 
      &lt;title&gt;Region Example&lt;/title&gt;       
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt; 
         &lt;h:inputText value = "#{managedBean.message}"/&gt; 
         &lt;h:inputText value = "#{managedBean.job}"/&gt; 
         &lt;a4j:commandLink id = "one" value = "one"/&gt; 
         
         &lt;a4j:region&gt; 
            &lt;h:inputText value = "#{managedBean.message}"/&gt; 
            &lt;a4j:commandLink id = "two" value = "two"/&gt; 
         &lt;/a4j:region&gt;
      &lt;/h:form&gt;  
   &lt;/h:body&gt; 
   
&lt;/html&gt;               
</pre>
<p>Along with this xhtml page, please update our managedBean accordingly.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean;   
import javax.faces.bean.RequestScoped;   

@ManagedBean   
@RequestScoped   

public class managedBean {   
   String message;  
   String job; 
      public String getMessage() {   
      return message;   
   }   
   public void setMessage(String message) {   
      System.out.println("setMessage method is getting called with--"+message); 
      this.message = message;   
   } 
   public String getJob() { 
      return job; 
   } 
   public void setJob(String job) { 
      System.out.println("setJob method is getting called with--"+job); 
      this.job = job; 
   } 
}  
</pre>
<p>The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/one_two.jpg" alt="One Two" />
<p>Whenever the command link “one” is clicked, it will process the entire form, however, when we click the command link “two”, only the message instance will be processed as it is enclosed within a region tag. Similarly, if we enclose the command link ‘one’ in another region tag, then it will process only the first two input parameters. Following is the screenshot of the server console, whenever the command link “two” is clicked.</p>
<img src="/richfaces/images/link_two.jpg" alt="Link Two" />
<p>Whenever the command link “one” is clicked, following will be the output.</p>
<img src="/richfaces/images/link_one.jpg" alt="Link Two" />
<h3>&lt;a4j:repeat&gt;</h3>
<p>Repeat tag works exactly similar to &lt;ui:repeat&gt; tag of JSF. It helps to iterate over a list in the webpage. In the following example of “a4jRepeat.xhtml” file, we are iterating through a list from our managed bean class.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:a4j = "http://richfaces.org/a4j"&gt; 
   
   &lt;h:head&gt;&lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;h:panelGrid columns = "1" style = "width: 640px"&gt; 
            &lt;a4j:outputPanel id = "panel" layout = "block"&gt; 
               &lt;a4j:repeat       value = "#{managedBean.subjectList}" var = "sub"&gt; 
                  &lt;li&gt; 
                     &lt;h:outputText value = "#{sub}"/&gt; 
                  &lt;/li&gt; 
               &lt;/a4j:repeat&gt; 
            &lt;/a4j:outputPanel&gt; 
         &lt;/h:panelGrid&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt; 
   
&lt;/html&gt;
</pre>
<p>Once you run this specific file in the browser, you will get the following output.</p>
<img src="/richfaces/images/a4_repeat.jpg" alt="A4 Repeat" />
<h3>&lt;a4j:status&gt;</h3>
<p>As the name suggests, this tag is useful whenever you want to display the status of your AJAX request in the front-end. You can include a normal text message or gif or image-based status as per your choice. For a small application such as the following, you will get a glimpse of the status in the front-end, however, whenever you are running a complex AJAX request, this status is very much visible. Please modify the “a4jregionExample.xhtml” as shown below.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:a4j = "http://richfaces.org/a4j"&gt;  
   
   &lt;h:head&gt; 
      &lt;title&gt;Region Example&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt; 
         &lt;a4j:status startText = "Working..." /&gt; 
            &lt;h:inputText value = "#{managedBean.message}"/&gt; 
            &lt;h:inputText value = "#{managedBean.job}"/&gt; 
            &lt;a4j:commandLink id = "one" value = "one"/&gt;
            
            &lt;a4j:region&gt; 
               &lt;h:inputText value = "#{managedBean.message}"/&gt; 
               &lt;a4j:commandLink id = "two" value = "two"/&gt; 
            &lt;/a4j:region&gt; 
            
         &lt;a4j:status startText = "Done" /&gt; 
      &lt;/h:form&gt;  
   &lt;/h:body&gt; 
   
&lt;/html&gt;            
</pre>
<p>Whenever you are running this application, you can see a glimpse of two statuses “working...” and “Done”. These statuses will automatically disappear whenever the request is completed.</p>
<h3>&lt;a4j:include&gt;/&lt;a4j:keepAlive&gt;</h3>
<p>Include and keepAlive, both tags were introduced in RichFaces 3.0 but in RichFaces 4 these tags were depreciated as these functionalities can be easily achievable using different other tags used in Facelets such as &lt;ui:include&gt; and &lt;ui:insert&gt;. As the name suggests, include was introduced to include one page into another and keepAlive was introduced to control the scope of the managed bean associate with a JSF page. It is recommended to use the updated version of any software APIs and use &lt;UI&gt; component and “annotation” implementation to achieve the business goals.</p>
<h3>&lt;a4j:log&gt;</h3>
<p>As the name suggests, this a4j component helps to generate the logging info into the web browser. The following example explains more about this tag. Edit the “a4jregionExample.xhtml”  file in the following way.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml" 
   xmlns:ui = "http://java.sun.com/jsf/facelets" 
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:a4j = "http://richfaces.org/a4j"&gt;  
   
   &lt;h:head&gt; 
      &lt;title&gt;Region Example&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt;
      &lt;h:form&gt; 
         &lt;a4j:status startText = "Working..." /&gt; 
            &lt;h:inputText value = "#{managedBean.message}"/&gt; 
            &lt;h:inputText value = "#{managedBean.job}"/&gt; 
            &lt;a4j:commandLink id = "one" value = "one"/&gt; 
            
            &lt;a4j:region&gt; 
               &lt;h:inputText value = "#{managedBean.message}"/&gt; 
               &lt;a4j:commandLink id = "two" value = "two"/&gt; 
            &lt;/a4j:region&gt; 
            
            &lt;a4j:log&gt;&lt;/a4j:log&gt; 
         &lt;a4j:status startText = "Done" /&gt; 
      &lt;/h:form&gt;  
   &lt;/h:body&gt;
   
&lt;/html&gt;     
</pre>
<p>Now run the above code in the browser and following will be the output. a4j:log will generate the required logs of all levels whenever required.</p>
<img src="/richfaces/images/a4jlog.jpg" alt="A4:log" />
<h3>&lt;a4j:jsFunction&gt;</h3>
<p>This is the most advanced feature of RichFaces, where an automatic JS function can be created without any JavaScript code. The CDK will generate an automatic JavaScript code based on any JS event.</p>
<p>In the following example, we are creating a JavaScript function that will be called whenever we hover on a specified value.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml" 
   xmlns:ui = "http://java.sun.com/jsf/facelets" 
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:a4j = "http://richfaces.org/a4j"&gt;  
   
   &lt;h:head&gt; 
      &lt;title&gt;Example of JS Function&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;table width = "500" border = "1"&gt; 
         &lt;tbody&gt; 
            &lt;tr&gt; 
               &lt;td&gt;
                  &lt;span onmouseover = "showMySkill('core java,J2EE')" 
                     onmouseout = "showMySkill('')"&gt;BackEnd developer&lt;/span&gt;
               &lt;/td&gt; 
               &lt;td&gt;
                  &lt;span onmouseover = "showMySkill('DB,RDBMS,unix')" 
                     onmouseout = "showMySkill('')"&gt;Database Admin&lt;/span&gt;
               &lt;/td&gt; 
               &lt;td&gt;
                  &lt;span onmouseover = "showMySkill(
                     'JS frameworks,html,java scripts')" 
                     onmouseout = "showMySkill('')"&gt;Front End Developer&lt;/span&gt;
               &lt;/td&gt; 
            &lt;/tr&gt; 
            &lt;tr&gt; 
               &lt;td colspan = "3"&gt;You need to know: 
                  &lt;b&gt;&lt;h:outputText id = "showSkillset" value = "#{managedBean.message}"/&gt;&lt;/b&gt;
               &lt;/td&gt; 
            &lt;/tr&gt; 
         &lt;/tbody&gt; 
      &lt;/table&gt; 
      
      &lt;h:form id = "form"&gt; 
         &lt;a4j:jsFunction name = "showMySkill" render = "showSkillset"&gt; 
            &lt;a4j:param name = "name" assignTo = "#{managedBean.message}" /&gt; 
         &lt;/a4j:jsFunction&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt; 
&lt;/html&gt;
</pre>
<p>The above code will generate the following output in the browser. Depending on the JS event, CDK will override the method named “showMySkill()” and the required values will be printed in the browser.</p>
<img src="/richfaces/images/js_event.jpg" alt="JS Event" />
<h3>&lt;a4j:AJAXListener&gt;</h3>
<p>This tag is used when you want to execute a particular listener just before rendering the result to the browser. This tag is not available in RichFaces 4 because the same functionality is available in <a4j:param>, where you can create an AJAX request on any JS event occurrence. Although it is advisable to use the updated software version, if you are still using RichFaces 3, then you can use this tag in the following manner.</p>
<pre class="result notranslate">
&lt;rich:panel&gt; 
   &lt;f:facet name = "header"&gt;Using a4j:actionListener&lt;/f:facet&gt; 
   &lt;a4j:commandButton value="Submit" reRender = "#{AJAXBean.areas}"&gt; 
      &lt;a4j:AJAXListener binding = "#{AJAXBean.renderAreasListener}"/&gt; 
   &lt;/a4j:commandButton&gt; 
&lt;/rich:panel&gt; 
</pre>
<p>In the above example, on the click of the “Submit” button, a JS event will be created, which will call the “areas” method implemented inside the bean class and the corresponding result will be rendered as a result.</p>
<h1>RichFaces - Rich Skin</h1>
<p>RichFaces comes with a new feature to control the look and feel of your website in a centralized manner, called Rich Skin. Skin is a high level implementation of old CSS files, which is more convenient for the back-end developer to control the look and feel of the website. There are some built-in skins available, which can be customized according to your choice.</p>
<h2>Built-in Skin</h2>
<p>There are a number of built-in skins available in the RichFaces component jar file. Following are some built-in rich skin available.</p>
<ul class="list">
<li>Default</li>
<li>Plain</li>
<li>emeraldTown</li>
<li>blueSky</li>
<li>wine</li>
<li>japanCherry</li>
<li>ruby</li>
<li>classic</li>
<li>deepMarine</li>
<li>NULL</li>
</ul>
<p>In the following example, we will implement ”classic” skin. It is very easy to implement any of the above-mentioned skins. Before proceeding further, please add the skin in the “web.xml” file using the line of code given below. We can add any skin of our choice from the above list. We just need to modify the &lt;param-value&gt; tag with the appropriate skin name.</p>
<pre class="result notranslate">
&lt;context-param&gt;   
   &lt;param-name&gt;org.richfaces.skin&lt;/param-name&gt;
   &lt;param-value&gt;classic&lt;/param-value&gt;   
&lt;/context-param&gt; 
</pre>
<p>After adding this, please create a “SkinExample.xhtml” file and add the following line of code into it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = '1.0' encoding = 'UTF-8' ?&gt;    
&lt;ui:composition xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt;   
   
   &lt;f:view&gt;   
      &lt;h:head&gt;   
         &lt;title&gt;Rich Faces Built in Skin&lt;/title&gt;   
      &lt;/h:head&gt;   
      
      &lt;h:body&gt;   
         &lt;h:form&gt;   
            &lt;rich:panel style = "width:60%"&gt; 
               &lt;rich:tabPanel switchType = "AJAX"&gt; 
                  &lt;rich:tab header = "Name"&gt; 
                     Tutorials Point 
                  &lt;/rich:tab&gt; 
                  
                  &lt;rich:tab header = "Features"&gt; 
                     Best Place to learn 
                  &lt;/rich:tab&gt; 
               &lt;/rich:tabPanel&gt; 
            &lt;/rich:panel&gt;           
         &lt;/h:form&gt;   
      &lt;/h:body&gt;
      
   &lt;/f:view&gt;   
&lt;/ui:composition&gt;  
</pre>
<p>Once we run this page, following will be the output in the browser, where each tab dynamically propagates to generate a different output. Once you hit the next tab, it will show a different output.</p>
<img src="/richfaces/images/next_tab.jpg" alt="Next Tab" />
<p>In the above example, &lt;rich:panel&gt; creates a panel where we are creating different tabs using &lt;rich:tab&gt;. The &lt;rich:tabPanel switchType = "AJAX"&gt; provides AJAX transition of the used tab.</p>
<h2>Creating/Modifying the Skin</h2>
<p>Skin is nothing but an extended version of CSS design, which will be applied to the webpage at runtime. In the previous section, we learned some basic in-built functionality of the skin. In this section, we will create our own skin or modify the existing skin. Skin in the RichFaces can be customized at the following three levels.</p>
<p><b>Skin property file</b> &minus; All the skins are generated through different property files mentioned under “rechfaces-a4j-4.5.17.Final” jar file. All we need to do is create a same property file and keep it under our source folder and edit its property. We need to change our “web.xml” accordingly to reflect on our new skin property in the website.</p>
<p><b>Component style sheet</b> &minus; Implement new CSS file of choice and use it in the application.</p>
<p><b>Overwrite style class</b> &minus; One can overwrite the style by directly mentioning the style properties in the xhtml file.</p>
<p>Let us consider an example. We will customize our previous ”classic” skin. Create a property file inside the “source” package and name it “custom.skin.properties”. Following are the entries of this property file that were copied from other property files available in the jar file mention above.</p>
<pre class="prettyprint notranslate">
#Colors 
headerBackgroundColor = #black 
headerGradientColor = #DF5858 
headerTextColor = #FFFFFF 
headerWeightFont = bold 

generalBackgroundColor = #f1f1f1 
generalTextColor = #000000 
generalSizeFont = 10px 
generalFamilyFont = Arial, Verdana, sans-serif 

controlTextColor = #000000 
controlBackgroundColor = #ffffff 
additionalBackgroundColor = #F9E4E4 

shadowBackgroundColor = #000000 
shadowOpacity = 1 
panelBorderColor = #C0C0C0 
subBorderColor = #ffffff 

tabBackgroundColor = #EDAEAE 
tabDisabledTextColor = #C47979 
trimColor = #F7C4C4 
tipBackgroundColor = #FAE6B0 
tipBorderColor = #E5973E 

selectControlColor = #FF9409 
generalLinkColor = #CF0000 
hoverLinkColor = #FF0000 
visitedLinkColor = #CF0000 

# Fonts
headerSizeFont = 11px 
headerFamilyFont = Arial, Verdana, sans-serif 
tabSizeFont = 11 
tabFamilyFont = Arial, Verdana, sans-serif 
buttonSizeFont = 11 
CHAPTER 11 ■ SKINS 223 
buttonFamilyFont = Arial, Verdana, sans-serif 

tableBackgroundColor = #FFFFFF 
tableFooterBackgroundColor = #cccccc 
tableSubfooterBackgroundColor = #f1f1f1 
tableBorderColor = #C0C0C0 
tableBorderWidth = 1px 

#Calendar colors 
calendarWeekBackgroundColor = #f5f5f5 
calendarHolidaysBackgroundColor = #FFF1F1 
calendarHolidaysTextColor = #980808 
calendarCurrentBackgroundColor = #808080 
calendarCurrentTextColor = #ffffff 
calendarSpecBackgroundColor = #f1f1f1 
calendarSpecTextColor = #000000 

warningColor = #FFE6E6 
warningBackgroundColor = #FF0000 
editorBackgroundColor = #F1F1F1 
editBackgroundColor = #FEFFDA 

#Gradients 
Gradient Type = plain 
</pre>
<p>Depending the skill level, we can change any attribute in this property file. We can add new Style class or edit the existing one. Once we are done with the creation of the new property file, it is time to add the same in the “web.xml ” file. Following is the entry of the “web.xml”, which should point to our skin.</p>
<pre class="result notranslate">
&lt;context-param&gt; 
   &lt;param-name&gt;org.richfaces.skin&lt;/param-name&gt; 
   &lt;param-value&gt;custom&lt;/param-value&gt; 
&lt;/context-param&gt;
</pre>
<p><b>Note</b> &minus; Make sure the new property file is present inside the source directory, otherwise it will throw a runtime error saying “NoClassFound Exception”.</p>
<p>Go ahead and run the previous file named” SkinExample.xhtml”. Following will be the output in the browser, where we will able to see that the entire look and feel of the website has changed to “Ruby” as a new property file was copied from ruby.properties file.</p>
<img src="/richfaces/images/creating_modifying_skin.jpg" alt="Creating Modifying Skin" />
<h2>Changing the Skin at Runtime</h2>
<p>In this example, we will change the skin at run time. Create a skin class like the following.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.RequestScoped;  

@ManagedBean   
@RequestScoped 

public class skinBean {  
   private String skin;  
   public skinBean() { 
      this.skin="plane"; 
   }
   public String getSkin() { 
      return skin; 
   } 
   public void setSkin(String skin) { 
      this.skin = skin; 
   } 
}
</pre>
<p>Then change the “web.xml” file as follows, to populate the skin name at runtime.</p>
<pre class="result notranslate">
&lt;context-param&gt;   
   &lt;param-name&gt;org.richfaces.skin&lt;/param-name&gt;
   &lt;param-value&gt;#{skinBean.skin}&lt;/param-value&gt;
&lt;/context-param&gt;
</pre>
<p>After doing so, we need to change the configuration files of the JSF application. The files can be located under web-INF folder. Add the following bean property to it.</p>
<pre class="result notranslate">
&lt;managed-bean&gt; 
   &lt;managed-bean-name&gt;skinBean&lt;/managed-bean-name&gt; 
   &lt;managed-bean-class&gt;SkinBean&lt;/managed-bean-class&gt;&gt; 
   &lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt; 
   
   &lt;managed-property&gt; 
      &lt;property-name&gt;skin&lt;/property-name&gt; 
      &lt;value&gt;plain&lt;/value&gt; 
   &lt;/managed-property&gt; 
&lt;/managed-bean&gt;
</pre>
<p>Following is the xhtml file code.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:a4j = "http://richfaces.org/a4j" 
   xmlns:f = "http://java.sun.com/jsf/core" 
   xmlns:rich = "http://richfaces.org/rich"&gt;
   
   &lt;h:head&gt; 
      &lt;title&gt;TODO supply a title&lt;/title&gt; 
   &lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form&gt; 
         &lt;div style = "display: block; float: left"&gt; 
            &lt;h:selectOneRadio value = "#{skinBean.skin}" border = "0" 
               layout = "pageDirection" title = "Changing skin" style = "font-size: 8; 
               font-family: comic" onchange = "submit()"&gt; 
               &lt;f:selectItem itemLabel = "plain" itemValue = "plain" /&gt; 
               &lt;f:selectItem itemLabel = "emeraldTown" itemValue = "emeraldTown" /&gt; 
               &lt;f:selectItem itemLabel = "blueSky" itemValue = "blueSky" /&gt; 
               &lt;f:selectItem itemLabel = "wine" itemValue = "wine" /&gt; 
               &lt;f:selectItem itemLabel = "japanCherry" itemValue = "japanCherry" /&gt; 
               &lt;f:selectItem itemLabel = "ruby" itemValue = "ruby" /&gt; 
               &lt;f:selectItem itemLabel = "deepMarine" itemValue = "deepMarine" /&gt; 
            &lt;/h:selectOneRadio&gt; 
         &lt;/div&gt; 
         
         &lt;div style = "display: block; float: left"&gt; 
            &lt;rich:panel &gt; 
               &lt;rich:panelMenu style = "font-family: monospace; font-size: 12;"&gt; 
                  Changing skin in runtime 
               &lt;/rich:panelMenu&gt; 
  
               &lt;rich:panelMenu  style = "font-family: monospace; font-size: 12;"&gt; 
                  This is a result of the modification "blueSky" skin 
               &lt;/rich:panelMenu&gt; 
            &lt;/rich:panel&gt; 
         &lt;/div&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt; 
   
&lt;/html&gt;      
</pre>
<p>The above piece of code will produce the following output in the browser.</p>
<img src="/richfaces/images/plain.jpg" alt="Plain" />
<p>In the above example, initially we are selecting “plain”, hence it is pointing to plain. Once you propagate through the radio button, it will change the color accordingly.</p>
<h1>RichFaces - Input Components</h1>
<p>Till now we have learned a lot about different AJAX components of RichFaces along with a new functionality called “Skin”. In this chapter, we will learn different “Rich” components that RichFaces offers in order to develop a modern web application. Following are the different input components provided by “RichFaces”.</p>
<h2>&lt;rich:inplaceInput&gt;</h2>
<p>Rich inplaceInput provides an opportunity to create an editable text box instead of a normal input text box. In the following example, we will create an editable text box using this component. Create an xhtml file and name it as “richinplaceInput.xhtml”. Write the following code in that file.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;TODO supply a title&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;f:view&gt;&lt;/f:view&gt;   
      &lt;h:form&gt;   
         &lt;rich:inplaceInput  value = "#{managedBean.message}"   
            defaultLabel = "Enter Your Name"/&gt; 
      &lt;/h:form&gt;  
   &lt;/h:body&gt;
   
&lt;/html&gt;
</pre>
<p>Save this file and run it. Following will be the output in the browser.</p>
<img src="/richfaces/images/enter_your_name.jpg" alt="Enter Your Name" />
<p>Go ahead and type anything of your choice in that text box and hit enter. This tag also provides inline edit option. Following will be output after editing.</p>
<img src="/richfaces/images/inline_edit_option.jpg" alt="Inline Edit Option" />
<h2>&lt;rich: inplaceSelect&gt;</h2>
<p>This is another input markup provide by RichFaces, where the user can select an input value from the dropdown list, which is also inline and editable in nature. We need to populate the dropdown from the internal bean class. Please create a “xhtml” file and name it as “richinplaceSelectExample.xhtml”. Place the following piece of code in that file.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;TODO supply a title&lt;/title&gt;
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt; 
         &lt;rich:inplaceSelect value = "#{subject.subjectName}" defaultLabel = "Click to Select Country"&gt;
            &lt;f:selectItems value = "#{subject.SubJectList()}"&gt;&lt;/f:selectItems&gt;   
         &lt;/rich:inplaceSelect&gt; 
      &lt;/h:form&gt;     
   &lt;/h:body&gt;
   
&lt;/html&gt;        
</pre>
<p>In the above example, we will populate the dropdown options from the backend. Here is the bean class named ” subject.java”.</p>
<pre class="prettyprint notranslate">
import java.util.ArrayList; 
import java.util.List; 
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.ManagedProperty; 
import javax.faces.bean.RequestScoped;   

@ManagedBean 
@RequestScoped 

public class Subject { 
   String SubjectName;  
   public Subject() { 
   }  
   public Subject(String SubjectName) { 
      this.SubjectName = SubjectName; 
   } 
   public List&lt;String&gt; SubJectList() {  
      //this list to be rendered
      ArrayList&lt;String&gt; list = new ArrayList<>();   
      
      list.add("JAVA");   
      list.add("DOTNET");   
      list.add("COBOL");   
      list.add("AJAX");   
      list.add("JAVA SCRIPT");   
      return list;   
   }    
   public String getSubjectName() { 
      return SubjectName; 
   } 
   public void setSubjectName(String SubjectName) { 
      this.SubjectName = SubjectName; 
   } 
}     
</pre>
<p>All the subject name that we are passing through the list will be shown inside the dropdown menu. Following will be the output after running this application.</p>
<img src="/richfaces/images/dropdown_menu.jpg" alt="Dropdown Menu" />
<h2>&lt;rich:SuggestionBox&gt;</h2>
<p>&lt;rich:SuggestionBox&gt; is used to provide suggestions to the user depending on the input provided in the input text box. This tag creates a JS event internally and invokes the required istener class to provide the suggestion from the backend. Unfortunately, this suggestionBox and ComboBox both are combined into a separate tag called “&lt;rich:autocomplete&gt;” in RichFaces 4, however, if you are using RichFaces 3, you can use this tag as shown below.</p>
<pre class="result notranslate">
&lt;h:inputText id = "city" value = "#{capitalsBean.capital}" /&gt; 
&lt;rich:suggestionbox for = "city" var = "result" 
   suggestionAction = "#{capitalsBean.autocomplete}"&gt; 
   
   &lt;h:column&gt; 
      &lt;h:outputText value = "#{result.name}" /&gt; 
   &lt;/h:column&gt; 
&lt;/rich:suggestionbox&gt;  
</pre>
<p>Where “capitalsBean” will be a Java class with different parameters and listener class named “autocomplete” will set the value of the “capital” instance variable at the runtime and provide the required output of choice. It is highly recommended to use RichFaces 4 “autocomplete” instead of using this tag as designers are not supporting this tag any more.</p>
<h2>&lt;rich:comboBox&gt;</h2>
<p>&lt;rich:comboBox&gt; works exactly similar to &lt;rich:suggestionBox&gt;, however, instead of calling the listener class, this tag pre-renders some suggestions into the client browser that interacts with each other and provides the desired output. Like &lt;rich:sugegstionBox&gt;, this feature is also depreciated in the new version with another tag called as “&lt;rich:autocomplete&gt;” described in the following code.</p>
<p>Create a separate file and name it as “richAutoComplete.xhtml”. Place the following code in that file.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt;&lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;h:form id = "form"&gt; 
            &lt;rich:autocomplete mode = "cachedAJAX" minChars = "2" 
            autocompleteMethod = "#{autoComplete.SubJectList()}" /&gt; 
         &lt;/h:form&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt;
</pre>
<p>In the above example, we are populating the subject list through the autocomplete feature of RichFaces. Create another Java class and name it is as “autoComplete.java”.</p>
<pre class="prettyprint notranslate">
import java.util.ArrayList; 
import java.util.List; 
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.RequestScoped;  

@ManagedBean 
@RequestScoped 

public class autoComplete { 
   public autoComplete(){} 
   private List&lt;String&gt; autoCompleteList=new ArrayList&lt;&gt;(); 
   
   public List&lt;String&gt; SubJectList() {   
      //ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();   
      autoCompleteList.add("JAVA");   
      autoCompleteList.add("DOTNET");   
      autoCompleteList.add("COBOL");   
      autoCompleteList.add("AJAX");   
      autoCompleteList.add("JAVA SCRIPT");   
      return autoCompleteList;   
   }   
   public List&lt;String&gt; getAutoCompleteList() {
      return autoCompleteList; 
   }  
   public void setAutoCompleteList(List&lt;String&gt; autoCompleteList) { 
      this.autoCompleteList = autoCompleteList; 
   } 
}     
</pre>
<p>The above file is acting as the bean class and SubjectList() is the method, which is actually rendering the response to the browser. In the &lt;SuggestionBox&gt;,&lt;ComboBox&gt; tag we need to implement the listener class, however, in case of &lt;autocomplete&gt; tag this creation of listener class has been automated, which is easier for the developer. The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/subject_list.jpg" alt="Subject List" />
<h2>&lt;rich:inputNumberSlider&gt;</h2>
<p>This is a very straightforward tag that helps the developer create a numeric slider bar depending on the numeric interval. Create “inputNumberSlider.xhtml” file and  place the following code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt;&lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form&gt;   
         &lt;h:outputText value = "Slide Bar example"&gt;&lt;/h:outputText&gt;   
         &lt;rich:inputNumberSlider    
            minValue = "1"   
            maxValue = "10"   
            showArrows = "false"   
            showTooltip = "false"   
            step = "1"&gt;   
         &lt;/rich:inputNumberSlider&gt;   
      &lt;/h:form&gt;  
   &lt;/h:body&gt;
   
&lt;/html&gt;  
</pre>
<p>In the above example, the attributes are pretty much descriptive. The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/slide_bar_example.jpg" alt="Slide Bar Example" />
<h2>&lt;rich:Calendar&gt;</h2>
<p>As the name suggests this tag will help create a calendar in the browser. Create a separate file and name it as “richCalendar.xhtml”. Place the following code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt;&lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form&gt;   
         &lt;h1&gt;Calendar&lt;/h1&gt;   
         &lt;rich:calendar value = "#{calendarBean.selectedDate}"   
            locale = "#{calendarBean.locale}"   
            popup = "#{calendarBean.popup}"   
            datePattern = "#{calendar.pattern}"   
            style = "width:200px"&gt;
         &lt;/rich:calendar&gt;   
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt;              
</pre>
<p>We need to create another class called “calendarBean.java” in order to hold all the calendar values such as Date, Locale, Date Pattern, etc. Following is the code for “calendarBean.java”.</p>
<pre class="prettyprint notranslate">
import java.text.DateFormat; 
import java.util.Date; 
import java.util.Locale; 
  
import javax.faces.event.ValueChangeEvent; 
  
public class CalendarBean { 
   private static final String[] WEEK_DAY_LABELS = new String[] { 
      "Sun *", "Mon +", "Tue +", "Wed +", "Thu +", "Fri +", "Sat *" }; 
   
   private Locale locale; 
   private boolean popup; 
   private boolean readonly; 
   private boolean showInput; 
   private boolean enableManualInput;     
   private String pattern; 
   private Date currentDate; 
   private Date selectedDate; 
   private String jointPoint; 
   private String direction; 
   private String boundary; 
   private boolean useCustomDayLabels; 
  
   public Locale getLocale() { 
      return locale; 
   }
   public void setLocale(Locale locale) { 
      this.locale = locale; 
   } 
   public boolean isPopup() { 
      return popup; 
   } 
   public void setPopup(boolean popup) { 
      this.popup = popup; 
   } 
   public String getPattern() { 
      return pattern; 
   } 
   public void setPattern(String pattern) { 
      this.pattern = pattern; 
   } 
   public CalendarBean() { 
      locale = Locale.US; 
      popup = true; 
      pattern = "MMM d, yyyy"; 
      jointPoint = "bottomleft"; 
      direction = "bottomright"; 
      readonly = true; 
      enableManualInput = false; 
      showInput = true; 
      boundary = "inactive"; 
   } 
   public boolean isShowInput() { 
      return showInput;
   } 
   public void setShowInput(boolean showInput) { 
      this.showInput = showInput; 
   } 
   public boolean isEnableManualInput() { 
      return enableManualInput; 
   } 
   public void setEnableManualInput(boolean enableManualInput) { 
      this.enableManualInput = enableManualInput; 
   } 
   public boolean isReadonly() { 
      return readonly; 
   } 
   public void setReadonly(boolean readonly) { 
      this.readonly = readonly; 
   } 
   public void selectLocale(ValueChangeEvent event) { 
      String tLocale = (String) event.getNewValue(); 
      if (tLocale != null) { 
         String lang = tLocale.substring(0, 2); 
         String country = tLocale.substring(3); 
         locale = new Locale(lang, country, ""); 
      } 
   } 
   public boolean isUseCustomDayLabels() { 
      return useCustomDayLabels; 
   } 
   public void setUseCustomDayLabels(boolean useCustomDayLabels) { 
      this.useCustomDayLabels = useCustomDayLabels; 
   } 
   public Object getWeekDayLabelsShort() { 
      if (isUseCustomDayLabels()) { 
         return WEEK_DAY_LABELS; 
      } else { 
         return null; 
      } 
   } 
   public String getCurrentDateAsText() { 
      Date currentDate = getCurrentDate(); 
      if (currentDate ! =  null) { 
         return DateFormat.getDateInstance(DateFormat.FULL).format(currentDate); 
      } 
      return null; 
   } 
   public Date getCurrentDate() { 
      return currentDate; 
   } 
   public void setCurrentDate(Date currentDate) { 
      this.currentDate = currentDate; 
   } 
   public Date getSelectedDate() { 
      return selectedDate; 
   } 
   public void setSelectedDate(Date selectedDate) { 
      this.selectedDate = selectedDate; 
   } 
   public String getJointPoint() { 
      return jointPoint; 
   } 
   public void setJointPoint(String jointPoint) { 
      this.jointPoint = jointPoint; 
   } 
   public void selectJointPoint(ValueChangeEvent event) { 
      jointPoint = (String) event.getNewValue(); 
   } 
   public String getDirection() { 
      return direction; 
   } 
   public void setDirection(String direction) { 
      this.direction = direction; 
   } 
   public void selectDirection(ValueChangeEvent event) { 
      direction = (String) event.getNewValue(); 
   } 
   public String getBoundary() { 
      return boundary; 
   } 
   public void setBoundary(String boundary) { 
      this.boundary = boundary; 
   } 
} 
</pre>
<p>The above piece of code will generate the following output in the browser.</p>
<img src="/richfaces/images/calendar_example.jpg" alt="Calender Example" />
<h2>&lt;rich:InputNumberSpinner&gt;</h2>
<p>This tag helps the developer to create a spinner to populate an instance of a bean. Following is an example that will help you understand the Spinner tag in detail. Please create a separate xhtml file and named it as “InputNumberSpinner.xhtml” and place the following code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;Number Slider Example&lt;/title&gt; 
   &lt;/h:head&gt;
   
   &lt;h:body&gt; 
      &lt;h:form&gt;   
         &lt;h:outputText value = "Select a Date"&gt;&lt;/h:outputText&gt;
         &lt;br/&gt;
         &lt;br/&gt;   
         
         &lt;rich:inputNumberSpinner   
            minValue = "1"   
            maxValue = "31"   
            step = "1"&gt;   
         &lt;/rich:inputNumberSpinner&gt;  
      &lt;/h:form&gt;   
   &lt;/h:body&gt;
   
&lt;/html&gt;     
</pre>
<p>The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/rich_input_number_spinner.jpg" alt="Rich Input Number Spinner" />
<h1>RichFaces - Output Components</h1>
<p>In the previous chapter, we have learned about different input fields or tags that help the user provide the inputs through the browser. In this chapter, we will learn about different output components provided by RichFaces.</p>
<h2>&lt;rich:Panel&gt;</h2>
<p>In some of our previous examples, we have already come across the panel tag. &lt;rich:panel&gt; creates a rectangular area inside the webpage, which may contain any information. You can include other panels, images, and any other rich components inside one panel.</p>
<p>In the following example, we will create a custom panel according to choice and we will provide a header to our panel using the “header” attribute. Please create a xhtml file and name it as “richPanelExamlple.xhtml”. Place the following code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;Panel Example&lt;/title&gt; 
   &lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;rich:panel header = "RichFace Tutorials " style = "font-size: 500px; 
         align-items:center; background-color: activecaption"&gt; 
         
         RichFace Tutorials Presented by TutorialsPoint.com.      
      &lt;/rich:panel&gt; 
   &lt;/h:body&gt;
&lt;/html&gt;    
</pre>
<p>The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/rich_panel.jpg" alt="Rich Panel" />
<h2>&lt;rich:simpleTogglePanel&gt;</h2>
<p>The simpleTogglePanel provides an opportunity to the developers to change the contains of the panel in a dynamic way. However, in RichFaces 4, this tag has been suppressed. JBoss has introduced advanced tags such as &lt;rich:togglePanel&gt;, &lt;rich:tab&gt;, and &lt;rich:tabPanel&gt;. It is recommended to use the updated version of RichFaces tags for more features and functionalities. If you are still using RichFaces 3, then you can use the following tag.</p>
<pre class="prettyprint notranslate">
&lt;ui:composition xmlns = "http://www.w3.org/1999/xhtml" 
   xmlns:ui = "http://java.sun.com/jsf/facelets" 
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:f = "http://java.sun.com/jsf/core" 
   xmlns:a4j = "http://richfaces.org/a4j" 
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;rich:simpleTogglePanel switchType = "client" label = "SimpleToggle"&gt; 
      The simple example of SimpleToggle tag 
   &lt;/rich:simpleTogglePanel&gt;    
&lt;/ui:composition&gt; 
</pre>
<h2>&lt;rich:tabPanel&gt;</h2>
<p>This tag helps the developers create different tabs inside a panel. We have used this tag in our skin chapter, where we have created two separate tags inside another panel. Following code will describe how we use &lt;rich:tabPanel&gt;.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = '1.0' encoding = 'UTF-8' ?&gt;    
&lt;ui:composition xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt;   
   
   &lt;f:view&gt;   
      &lt;h:head&gt;   
         &lt;title&gt;Rich Faces Tab Example&lt;/title&gt;   
      &lt;/h:head&gt;   
      
      &lt;h:body&gt;   
         &lt;h:form&gt;   
            &lt;rich:panel style = "width:60%"&gt; 
               
               &lt;rich:tabPanel switchType = "AJAX"&gt; 
                  &lt;rich:tab header = "Name"&gt; 
                     Tutorials Point----This is Tab Number 1 
                  &lt;/rich:tab&gt; 
                  
                  &lt;rich:tab header = "Features"&gt; 
                     Best Place to learn -------This is Tab Number 2 
                  &lt;/rich:tab&gt; 
               &lt;/rich:tabPanel&gt; 
            &lt;/rich:panel&gt;  
            
         &lt;/h:form&gt;   
      &lt;/h:body&gt; 
      
   &lt;/f:view&gt;   
&lt;/ui:composition&gt;
</pre>
<p>In this example, we have created two tabs with different headers called “Name” and “Features”. These two tags will be created inside the &lt;rich:panel&gt;. The above code will yield the following output.</p>
<img src="/richfaces/images/rich_tab_panel.jpg" alt="Rich Tab Panel" />
<h2>&lt;rich:panelBar&gt;</h2>
<p>Like simpleToggleBar, it allows the developers to implement vertical toggling depending on some JS event. This tag is also suppressed in RichFaces 4. However, you can use it as shown below if you are using RichFaces 3.0. .</p>
<pre class="prettyprint notranslate">
&lt;ui:composition xmlns = "http://www.w3.org/1999/xhtml" 
   xmlns:ui = "http://java.sun.com/jsf/facelets" 
   xmlns:h = "http://java.sun.com/jsf/html" 
   xmlns:f = "http://java.sun.com/jsf/core" 
   xmlns:a4j = "http://richfaces.org/a4j" 
   xmlns:rich = "http://richfaces.org/rich"&gt;  
   
   &lt;rich:panelBar height = "400" width = "500"&gt; 
      &lt;rich:panelBarItem   label = "Toggle1”&gt; 
         First vertical toggle 
      &lt;/rich:panelBarItem&gt; 
      
      &lt;rich:panelBarItem  label = ”Toggle2”&gt; 
         Second Vertical Toggle 
      &lt;/rich:panelBarItem&gt; 
   &lt;/rich:panelBar &gt;
   
&lt;/ ui:composition &gt;
</pre>
<p>In RichFaces 4, the same functionality has been implemented using &lt;rich:PanelMenu&gt; tag.</p>
<h2>&lt;rich:tab&gt;</h2>
<p>We are already familiar with this tag. In the example of &lt;rich:tabPanel&gt;, we have created different tabs with this tag. In the following example, we have created two tags.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = '1.0' encoding = 'UTF-8' ?&gt;    
&lt;ui:composition xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt;   
   
   &lt;f:view&gt;   
      &lt;h:head&gt;   
         &lt;title&gt;Rich Faces Tab Example&lt;/title&gt;   
      &lt;/h:head&gt;   
      
      &lt;h:body&gt;   
         &lt;h:form&gt;   
            
            &lt;rich:panel style = "width:60%"&gt; 
               &lt;rich:tabPanel switchType = "AJAX"&gt; 
                  &lt;rich:tab header = "Name"&gt; 
                     Tutorials Point----This is Tab Number 1 
                  &lt;/rich:tab&gt; 
                  
                  &lt;rich:tab header = "Features"&gt; 
                     Best Place to learn -------This is Tab Number 2 
                  &lt;/rich:tab&gt; 
               &lt;/rich:tabPanel&gt; 
            &lt;/rich:panel&gt; 
            
         &lt;/h:form&gt;   
      &lt;/h:body&gt; 
      
   &lt;/f:view&gt;   
&lt;/ui:composition&gt; 
</pre>
<p>The above piece of code will generate the following output in the browser.</p>
<img src="/richfaces/images/rich_tab.jpg" alt="Rich Tab" />
<h2>&lt;rich:panelMenu&gt;</h2>
<p>Panel Menu helps the developers create a vertical dropdown toggle inside a panel area. The following example will help us understand this tag better. Create the “richPanelMenu.xhtml” file and place the following piece of code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;Panel Menu example&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;h:panelGrid columns = "2" columnClasses = "cols,cols" width = "400"&gt; 
            &lt;rich:panelMenu style = "width:200px"&gt; 
               
               &lt;rich:panelMenuGroup label = "Group 1"&gt; 
                  &lt;rich:panelMenuItem label = "Database" action = "#{managedBean.subjectList}"&gt; 
                     &lt;f:param name = "current" value = "DB"/&gt; 
                  &lt;/rich:panelMenuItem&gt; 
                  
                  &lt;rich:panelMenuItem label = "Oracle" action = "#{managedBean.subjectList}"&gt; 
                     &lt;f:param name = "current" value = "Oracle"/&gt;  
                  &lt;/rich:panelMenuItem&gt; 
                  
                  &lt;rich:panelMenuItem label = "JAVA" action = "#{managedBean.subjectList}"&gt; 
                     &lt;f:param name = "current" value = "JAVA"/&gt; 
                  &lt;/rich:panelMenuItem&gt; 
               &lt;/rich:panelMenuGroup&gt;
               
            &lt;/rich:panelMenu&gt; 
         &lt;/h:panelGrid&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt;
</pre>
<p>As seen in the above example, panelMenu comes with some other associated tags which helps in a different manner. &lt;panelGrid&gt; helps create a grid inside the panel. &lt;panelMenuGroup&gt; helps group the different components that we are going to populate .&lt;panelMenuItem&gt; is the actual item that will be rendered to the browser. Using the “action” attribute, you can call different action methods depending on the item selected. The “label” attribute is used to populate the value in the front-end and the rendered value will be processed to the back-end once the specified action class is called.</p>
<p>The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/rich_panel_menu.jpg" alt="Rich Panel Menu" />
<h2>&lt;rich:TogglePanel&gt;</h2>
<p>This tag is used to render different outputs that can be switched or toggled using the Toggle control method. This toggle control method can be implemented or customized. In the following example, we will implement this method.</p>
<p>Create an xhtml file and name it as “richTogglePanel.xhtml”. Place the following code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;Rich Toggle Panel Example&lt;/title&gt; 
      &lt;meta name = "viewport" content = "width = device-width, initial-scale = 1.0"/&gt; 
   &lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;rich:togglePanel id = "panel1" activeItem = "item1" 
            itemChangeListener = "#{panelMenuBean.updateCurrent}"&gt; 
            
            &lt;rich:togglePanelItem name = "item1"&gt; 
               &lt;p&gt;Content of the toggle 1&lt;/p&gt; 
            &lt;/rich0:togglePanelItem&gt; 
            
            &lt;rich:togglePanelItem name = "item2"&gt; 
                &lt;p&gt;Content of the toggle 2&lt;/p&gt; 
            &lt;/rich:togglePanelItem&gt; 
         &lt;/rich:togglePanel&gt; 
            
         &lt;a4j:outputPanel id = "tabs" layout = "block"&gt; 
            &lt;a4j:outputPanel layout = "block" styleClass = "tabDiv"&gt; 
               &lt;rich:toggleControl event = "click" targetPanel = "panel1" targetItem = "item1" /&gt; 
               &lt;a4j:commandButton value = "Toggle1"/&gt; 
            &lt;/a4j:outputPanel&gt; 
            
            &lt;a4j:outputPanel layout = "block" styleClass = "tabDiv"&gt; 
               &lt;rich:toggleControl event = "click" targetPanel = "panel1" targetItem = "item2" /&gt; 
               &lt;a4j:commandButton value = "Toggle2"/&gt; 
            &lt;/a4j:outputPanel&gt; 
         &lt;/a4j:outputPanel&gt;
         
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt; 
</pre>
<p>We also need to create a bean class to control the transition of the website. Create “MenuBean.java” class like the following.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.ViewScoped; 
import org.richfaces.event.ItemChangeEvent; 
  
@ManagedBean 
@ViewScoped 

public class MenuBean { 
   private String current; 
   private boolean singleMode; 
  
   public boolean isSingleMode() { 
      return singleMode; 
   } 
   public void setSingleMode(boolean singleMode) { 
      this.singleMode = singleMode; 
   } 
   public String getCurrent() { 
      return this.current; 
   } 
   public void setCurrent(String current) { 
      this.current = current; 
   } 
   public void updateCurrent(ItemChangeEvent event) { 
      setCurrent(event.getNewItemName()); 
   }
}    
</pre>
<p>The above code will yield the following output in the browser.</p>
<img src="/richfaces/images/rich_toggle_panel.jpg" alt="Rich Toggle Panel" />
<p>In the above example, the content of the webpage will be changed depending on the button clicked by the user. “updateCurrent()” is the method which handles the JS event content and sets the website content on the go.</p>
<h2>&lt;rich:toolBar&gt;</h2>
<p>toolBar is used to create a horizontal bar in the panel. It is used to create top level menu in the webpage. In the following example, we will learn how to use this tag in the webpage. Create a “xhtml” file and name it as “toolbar.xhml”. Place the following code in it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;ToolBar Example&lt;/title&gt; 
   &lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;rich:panel&gt; 
         &lt;rich:toolbar height = "26" itemSeparator = "grid"&gt; 
            &lt;rich:toolbarGroup location = "left"&gt; 
               &lt;h:commandButton styleClass = "barsearchbutton" 
                  onclick = "return false;" value = "TAB" /&gt; 
            &lt;/rich:toolbarGroup&gt; 
            
            &lt;rich:toolbarGroup location = "left"&gt; 
               &lt;h:commandButton styleClass = "barsearchbutton" 
                  onclick = "return false;" value = "TAB2" /&gt; 
            &lt;/rich:toolbarGroup&gt; 
            
            &lt;rich:toolbarGroup location = "left"&gt; 
               &lt;h:commandButton styleClass = "barsearchbutton" 
                  onclick = "return false;" value = "TAB3" /&gt; 
            &lt;/rich:toolbarGroup&gt; 
         &lt;/rich:toolbar&gt;
 
      &lt;/rich:panel&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt; 
</pre>
<p>The above code will yield the following output in the browser.</p>
<img src="/richfaces/images/rich_tool_bar.jpg" alt="Rich Tool Bar"/>
<p>In the above example, &lt;toolbarGroup&gt; tag is used to group different same types of tool. Any number of groups can be created. Location provides the position of the webpage, where the button will be placed.</p>
<h2>&lt;rich:separator&gt;</h2>
<p>As the name suggests, it is used to separate different components on the webpage. This tag has been suppressed in RichFaces 4, however, if you are still using RichFaces 3, then you can use the following tag.</p>
<pre class="prettyprint notranslate">
&lt;rich:separator lineType = "beveled" height = "8" width = "75%" align = "center"/&gt;
&lt;p&gt;Here is more examples of different line types:&lt;/p&gt; 

&lt;rich:separator height = "2" lineType = "dotted"/&gt;&lt;br/&gt; 
&lt;rich:separator height = "2" lineType = "dashed"/&gt;&lt;br/&gt; 
&lt;rich:separator height = "4" lineType = "double"/&gt;&lt;br/&gt;
&lt;rich:separator height = "2" lineType = "solid"/&gt;&lt;br/&gt;     
</pre>
<p>In the above example, LineType is the attribute that helps us determine the type of separator we want to use. All of these separator names are pretty much self-descriptive in nature.</p>
<h2>&lt;rich:Spacer&gt;</h2>
<p>Spacer is a self-described tag that helps the developer provide a space between two components. This tag is also suppressed in RichFaces4 along with other tags, however, you can use the following code if you are using RichFaces 3.</p>
<pre class="result notranslate">
&lt;rich:spacer width = "1" height = "5" title = "Here is a spacer..."/&gt;
</pre>
<h2>&lt;rich:modalPanel&gt;</h2>
<p>Modal Panel is used to show a pop-up on the go. In RichFaces 4, the modal panel tag has been changed to <b>popupPanel</b>. In the following example, we will see how it works. Create a xhtml file and name it as “PopingUp.xhtml”. Place the following code into it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;ModalPanel and popupPanel&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt; 
         &lt;h:commandButton value = "Click ME"&gt;  
            &lt;rich:componentControl target = "popup" operation = "show" /&gt; 
         &lt;/h:commandButton&gt; 
         
         &lt;rich:popupPanel id = "popup" modal = "true" autosized = "false" 
            resizeable = "false"&gt; 
            
            Hey !!!
            How are you? 
         &lt;/rich:popupPanel&gt; 
      &lt;/h:form&gt;   
   &lt;/h:body&gt;
   
&lt;/html&gt; 
</pre>
<p>The above example will generate the following output when the “ClickMe” button is clicked.</p>
<img src="/richfaces/images/rich_modal_panel.jpg" alt="Rich Modal Panel" />
<h1>RichFaces - Iteration Component</h1>
<p>In the previous chapters, we have learned about the different input and output components. In this chapter, we will learn how to iterate through different data structures in the website.</p>
<h2>&lt;rich:dataTable&gt;</h2>
<p>This tag is used to render a table as a result in the website. In the following example, we will render a subject table along with the pro-efficiency level.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = '1.0' encoding = 'UTF-8' ?&gt;    
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt;   
   
   &lt;h:head&gt;   
      &lt;title&gt;Rich Data Table&lt;/title&gt;   
   &lt;/h:head&gt;   
    
   &lt;h:body&gt;   
      &lt;h:form&gt;   
         &lt;rich:dataTable value = "#{subject.subjectListObj}" var = "record" &gt;   
            &lt;f:facet name = "header"&gt;   
               &lt;h:outputText value = "My Profile" /&gt;   
            &lt;/f:facet&gt;   
            
            &lt;rich:column&gt;   
               &lt;f:facet name = "header"&gt;Subject Name&lt;/f:facet&gt;   
               &lt;h:outputText value = "#{record.subjectName}"/&gt; 
            &lt;/rich:column&gt; 
            
            &lt;rich:column&gt;    
               &lt;f:facet name = "header"&gt;efficiency Level&lt;/f:facet&gt;   
               &lt;h:outputText value = "#{record.efficiency}"/&gt; 
            &lt;/rich:column&gt;   
         &lt;/rich:dataTable&gt;
      &lt;/h:form&gt;   
   &lt;/h:body&gt;
   
&lt;/html&gt;
</pre>
<p>We need to change our subject.java accordingly to render the list. Following is an example of subject.java.</p>
<pre class="prettyprint notranslate">
import java.util.ArrayList; 
import java.util.List; 
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.ManagedProperty; 
import javax.faces.bean.RequestScoped;   

@ManagedBean 
@RequestScoped 

public class Subject { 
   String SubjectName; 
   private String efficiency; 
   
   private List&lt;Subject&gt; subjectListObj=new ArrayList&lt;&gt;(); 
      public Subject() { 
   }  
   public Subject(String SubjectName,String efficiency ) { 
      this.SubjectName = SubjectName; 
      this.efficiency= efficiency; 
   } 
   public String getSubjectName() { 
      return SubjectName; 
   } 
   public void setSubjectName(String SubjectName) { 
      this.SubjectName = SubjectName; 
   } 
   public List&lt;Subject&gt; getSubjectListObj() {
      subjectListObj.add(new Subject("JAVA","Expert"));   
      subjectListObj.add(new Subject("DOTNET","NA"));   
      subjectListObj.add(new Subject("JAVA Script","Expert"));   
      subjectListObj.add(new Subject("Web Service","Expert"));   
      subjectListObj.add(new Subject("Consulting","Expert"));   
      return subjectListObj; 
   } 
   public void setSubjectListObj(List&lt;Subject&gt; subjectListObj) { 
      this.subjectListObj = subjectListObj; 
   } 
   public String getEfficiency() { 
      return efficiency; 
   } 
   public void setEfficiency(String efficiency) { 
      this.efficiency = efficiency; 
   } 
}    
</pre>
<p>The above example will generate the following output in the browser.</p>
<img src="/richfaces/images/rich_data_table.jpg" alt="Rich Data Table" />
<h2>&lt;rich: dataDefinitionList&gt;</h2>
<p>This is the tag used to generate the data definition from a model. This tag is not supported by JBoss since the invention of RichFaces 4. If you are still using RichFaces 3, then you can use this tag in the following manner.</p>
<pre class="prettyprint notranslate">
&lt;rich:dataDefinitionList var = "car" value = "#{dataTableScrollerBean.allCars}" 
   rows = "5" first = "4" title = "Cars"&gt;  
   
   &lt;f:facet name = "term"&gt;  
      &lt;h:outputText value = "#{car.make} #{car.model}"&gt;&lt;/h:outputText&gt;  
   &lt;/f:facet&gt;  
   
   &lt;h:outputText value = "Price:" styleClass = "label"&gt;&lt;/h:outputText&gt;  
   &lt;h:outputText value = "#{car.price}" /&gt;&lt;br/&gt;  
   &lt;h:outputText value = "Mileage:" styleClass = "label"&gt;&lt;/h:outputText&gt;  
   &lt;h:outputText value = "#{car.mileage}" /&gt;&lt;br/&gt;  
&lt;/rich:dataDefinitionList&gt; 
</pre>
<p>In the above example, “dataTableScrollerBean” is a Java class that is used to generate different values of the car. This is similar to the previous tag where we populated a bunch of object value using the &lt;datatable&gt; tag.</p>
<h2>&lt;rich:dataOrderedList&gt;</h2>
<p>RichFaces 4 came up with a wide moderation from RichFaces 3. &lt;dataOrderedList&gt; is a tag used to render a list in an ordered manner. This too is suppressed in RichFaces 4 because the ordering of an object or a list is much more easier and less time consuming, if done in Java. If your application uses RichFaces 3, then you can use this tag in the following manner.</p>
<pre class="result notranslate">
&lt;rich:panel style = "width:500px"&gt; 
   &lt;f:facet name = "header"&gt; 
      Using rich:dataOrderedList 
   &lt;/f:facet&gt; 
   
   &lt;rich:dataOrderedList value = "#{airlinesBean.airlines}" var = "air"&gt; 
      #{air.name}, #{air.code} 
   &lt;/rich:dataOrderedList&gt; 
&lt;/rich:panel&gt;
</pre>
<p>In the above example, “airlinesBean” is a Java bean class with a method named “airlinesBean()”. This method returns an object of type “air”. Later, we can use this air object to populate different properties in a table format.</p>
<h2>&lt;rich:dataList&gt;</h2>
<p>As the tag name suggests, this tag will be used to render an unordered list into the browser. However, like &lt;orderedList&gt; this tag is also suppressed in the latest version of RichFaces. We can easily render a list into the browser using &lt;a4j:Repeat&gt; and &lt;rich:dataTable&gt; tag in the following way.</p>
<pre class="result notranslate">
&lt;a4j:repeat value = "#{managedBean.subjectList}" var = "sub"&gt; 
   &lt;h:outputText value = "#{sub}"/&gt;   
&lt;/a4j:repeat&gt; 
</pre>
<p>In the above example, we are rendering a list which is an output of the method called “subjectList()”. If your application is built in RichFaces 3, then you can use this tag as follows.</p>
<pre class="result notranslate">
&lt;rich:panel style = "width:500px"&gt; 
   &lt;f:facet name = "header"&gt; 
      Using rich:dataList 
   &lt;/f:facet&gt; 
   
   &lt;rich:dataList value = "#{airlinesBean.airlines}" var = "air"&gt; 
      #{air.name}, #{air.code} 
   &lt;/rich:dataList&gt;
&lt;/rich:panel&gt;   
</pre>
<h2>&lt;rich:dataGrid&gt;</h2>
<p>Using the &lt;datatable&gt; tag you will be able to render a list as a table, however, &lt;dataGrid&gt; will help you render an object or a list. In the previous example of &lt;rich:datatable&gt;, just change the xhtml page as follows and see what is the output of the same.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = '1.0' encoding = 'UTF-8' ?&gt;    
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt;   
   
   &lt;h:head&gt;   
      &lt;title&gt;Rich Data Table&lt;/title&gt;   
   &lt;/h:head&gt;   
    
   &lt;h:body&gt;   
      &lt;h:form&gt;   
         &lt;rich:panel&gt; 
            &lt;rich:dataGrid value = "#{subject.subjectListObj}" var = "record" 
               columns = "2" elements = "4" first = "1" &gt;   
               
               &lt;f:facet name = "header"&gt;   
                  &lt;h:outputText value = "My Profile" /&gt;   
               &lt;/f:facet&gt;   
               
               &lt;rich:panel&gt; 
                  &lt;rich:column&gt;   
                     &lt;f:facet name = "header"&gt;Subject Name&lt;/f:facet&gt;   
                     &lt;h:outputText value = "#{record.subjectName}"/&gt; 
                  &lt;/rich:column&gt;  
                  
                  &lt;rich:column&gt;    
                     &lt;f:facet name = "header"&gt;efficiency Level&lt;/f:facet&gt;   
                     &lt;h:outputText value = "#{record.efficiency}"/&gt; 
                  &lt;/rich:column&gt; 
               &lt;/rich:panel&gt; 
               
            &lt;/rich:dataGrid&gt;  
         &lt;/rich:panel&gt; 
      &lt;/h:form&gt;   
   &lt;/h:body&gt; 
   
&lt;/html&gt;             
</pre>
<p>The above piece of code will yield the following output in the browser.</p>
<img src="/richfaces/images/rich_datagrid.jpg" alt="Rich Datagrid" />
<h2>&lt;rich:datascroller&gt;</h2>
<p>This tag helps to create a scroll bar while populating the table data. It is pretty similar to the pagination functionality of the JSF. Modify the previous dataTable example in the following manner.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = '1.0' encoding = 'UTF-8' ?&gt;    
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt;   
   
   &lt;h:head&gt;
      &lt;title&gt;Rich Data Table&lt;/title&gt;   
   &lt;/h:head&gt;   
    
   &lt;h:body&gt;   
      &lt;h:form&gt;   
         &lt;rich:dataTable value = "#{subject.subjectListObj}" var = "record" 
            rows = "3" id = "MyTable"&gt;   
            
            &lt;f:facet name = "header"&gt;   
               &lt;h:outputText value = "My Profile"/&gt;   
            &lt;/f:facet&gt;   
            
            &lt;rich:column&gt;   
               &lt;f:facet name = "header"&gt;Subject Name&lt;/f:facet&gt;   
               &lt;h:outputText value = "#{record.subjectName}"/&gt; 
            &lt;/rich:column&gt; 
            
            &lt;rich:column&gt;    
               &lt;f:facet name = "header"&gt;efficiency Level&lt;/f:facet&gt;   
               &lt;h:outputText value = "#{record.efficiency}"/&gt; 
            &lt;/rich:column&gt;   
         &lt;/rich:dataTable&gt; 
         
         &lt;rich:dataScroller for = "MyTable" maxPages = "3"&gt;   
            &lt;f:facet name = "first"&gt;   
               &lt;h:outputText value = "1" /&gt;   
            &lt;/f:facet&gt;   
            
            &lt;f:facet name = "last"&gt;   
               &lt;h:outputText value = "eof" /&gt;   
            &lt;/f:facet&gt;   
         &lt;/rich:dataScroller&gt; 
      &lt;/h:form&gt;   
   &lt;/h:body&gt;
   
&lt;/html&gt;  
</pre>
<p>In the above example, you can add your style for a good look and feel. We have implemented separate &lt;dataScroller&gt; tags with different facet value. Following will be the output of the above file. Update the style sheer attribute in order to synchronize the table and the data scroller.</p>
<img src="/richfaces/images/rich_datascroller.jpg" alt="Rich Datascroller" />
<h1>RichFaces - Selection Components</h1>
<p>In this chapter, we will learn about different selection components provided by RichFaces Technology.</p>
<h2>&lt;rich:pickList&gt;</h2>
<p>Using this tag, we can select one value from the populated list. It also allows us to add and remove a list component to another List. Following example demonstrates how this works. Go ahead and create one xhtml file and name it as “pickListExample.xhtml” and place the following code in it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns  =  "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;PickList Example&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt;   
         &lt;h:outputText value  =  "Pick List Example"/&gt;
         &lt;br/&gt;
         &lt;br/&gt;      
         
         &lt;rich:pickList value = "#{managedBean.subjectList}"   
            sourceCaption = "SubjectList"   
            targetCaption = "Selected Subject"   
            listWidth = "170px"   
            listHeight = "120px"       
            orderable = "true"&gt;   
            
            &lt;f:selectItems value = "#{managedBean.subjectList}" 
               itemValue = "#{subject}" itemLabel = "#{subject.subjectName}"/&gt;   
         &lt;/rich:pickList&gt;  
      &lt;/h:form&gt;
   &lt;/h:body&gt; 
   
&lt;/html&gt;
</pre>
<p>We need to modify our managedBean.java file to populate the list components in the xhtml file. Following is the snapshot of our modified Java file.</p>
<pre class="prettyprint notranslate">
import java.util.Arrays; 
import java.util.List; 
import javax.faces.bean.ManagedBean;   
import javax.faces.bean.RequestScoped;   

@ManagedBean   
@RequestScoped   

public class managedBean {   
   String message;  
   String job; 
   private List&lt;String&gt; SubjectList = Arrays.asList(
      "Richface","AJAX","JAVA","JSF","DOTNET","python"); 
   
   public String getMessage() {   
      return message;   
   }   
   public void setMessage(String message) {   
      System.out.println("setMessage method is getting called with--"+message); 
      this.message = message;   
   } 
   public String getJob() { 
      return job; 
   } 
   public void setJob(String job) { 
      System.out.println("setJob method is getting called with--"+job); 
      this.job = job; 
   } 
   public List&lt;String&gt; getSubjectList() { 
      return SubjectList;
   }  
   public void setSubjectList(List&lt;String&gt; SubjectList) { 
      this.SubjectList = SubjectList; 
   } 
}  
</pre>
<p>The above piece of code will yield the following output in the browser. The “value” attribute of the pickList tag is nothing but the “getSubjectList()” of the bean class. “itemValue” is the abbreviation of the object class and the corresponding “itemLabel” is the instance value name. In this example, our pickList tag automatically creates two separate lists named “sourceCaption” and “targetCaption”. Attribute orderable is used to maintain the selection order in the target List.</p>
<img src="/richfaces/images/rich_picklist.jpg" alt="Rich Picklist" />
<h2>&lt;rich:orderingList&gt;</h2>
<p>This tag is used to render a list as a whole. &lt;orderingList&gt; will automatically provide some button like function to propagate through the list and it helps order a selected item. In the following example, we will create one orderingList using the following code for “OrderingListExample.xhtml”.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;OrderingList Example&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt;   
         &lt;h:outputText value = "ordering List Example"/&gt;&lt;br/&gt;&lt;br/&gt;
         &lt;rich:orderingList value = "#{managedBean.subjectList}"  
            itemValue = "#{subject}" 
            itemLabel = "#{subject.subjectName}" &gt;   
         &lt;/rich:orderingList&gt;  
      &lt;/h:form&gt;    
   &lt;/h:body&gt; 
   
&lt;/html&gt;  
</pre>
<p>We need not to change our bean class as we are populating the same list again using different tag for different representation. Like the previous example, even here the value attributes hold the entire list coming from “getSubjectList()”. “itemValue” and “itemLabel” holds the value of the object class and corresponding instance variable respectively.</p>
<p>The above piece of code will produce the following output in the browser.</p>
<img src="/richfaces/images/rich_ordering_list.jpg" alt="Rich OrderingList" />
<h2>&lt;rich:ListShuttle&gt;</h2>
<p>ListShuttle tag is available in RichFaces 3. It helps propagate through one list and puts the same value into another. In RichFaces 4, this tag has been suppressed because the same functionality can be achieved by another new tag named &lt;rich:pickList&gt; as described above. If you are using RichFaces 3.0, then you can use this tag in the following manner.</p>
<pre class="prettyprint notranslate">
&lt;rich:listShuttle sourceValue = "#{toolBar.freeItems}" 
   targetValue = "#{toolBar.items}" var = "items" listsHeight = "150" 
   sourceListWidth = "130" targetListWidth = "130" 
   sourceCaptionLabel = "Available Items" 
   targetCaptionLabel = "Currently Active Items" 
   converter = "listShuttleconverter"&gt;  
   
   &lt;rich:column width = "18"&gt;  
      &lt;h:graphicImage value = "#{items.iconURI}"&gt;&lt;/h:graphicImage&gt; 
   &lt;/rich:column&gt; 
   
   &lt;rich:column&gt; 
      &lt;h:outputText value = "#{items.label}"&gt;&lt;/h:outputText&gt; 
   &lt;/rich:column&gt; 
   
   &lt;a4j:support event = "onlistchanged" reRender = "toolBar" /&gt; 
   &lt;a4j:support event = "onorderchanged" reRender = "toolBar" /&gt; 
&lt;/rich:listShuttle&gt; 
</pre>
<p>It is very convenient to use pickList rather than using this tag, as the same functionality can be achieved using pickList by writing only two lines of code.</p>
<h1>RichFaces - Menu Components</h1>
<p>RichFaces provides a wide version of tags to be used for creating a menu type markup. In this chapter, we will learn some new features along with the old ones using which we can easily render a menu in the browser.</p>
<h2>&lt;rich:dropDownMenu&gt;</h2>
<p>Using this tag, the developer can create a dropdown menu. This tag is useful for creating the header of a website. In the following example, we will learn how to use this tag in practical life. Create one file and name it as “DropDownList.xhtml”. Place the following code inside it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt;&lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form&gt; 
         &lt;rich:toolbar&gt;   
            &lt;rich:dropDownMenu&gt;   
               &lt;f:facet name = "label"&gt;   
                  &lt;h:outputText value = "File" /&gt;   
               &lt;/f:facet&gt;       
                  
               &lt;rich:menuItem label = "New" /&gt;   
               &lt;rich:menuItem label = "Open File..." /&gt;   
               &lt;rich:menuItem label = "Close" /&gt;   
               &lt;rich:menuItem label = "Close All" /&gt;
            &lt;/rich:dropDownMenu&gt;   
         &lt;/rich:toolbar&gt;   
      &lt;/h:form&gt; 
   &lt;/h:body&gt; 
   
&lt;/html&gt; 
</pre>
<p>In the above example, we are creating one toolbar and inside that toolbar we are creating one dropdown menu. Any number of dropdown menus can be created. If you want to insert any action-based JS function, then you can implement that inside &lt;menuItem&gt; tag with the attribute as “action”. The above piece of code will generate the following output in the browser.</p>
<img src="/richfaces/images/file.jpg" alt="File" />
<h2>&lt;rich:contextMenu&gt;</h2>
<p>This tag is useful to generate event-based dropdown on the client side. It will not work automatically. Users need to create the JS event and then it works accordingly. In the following example, we will create the render image and then create the JS events based on the users response. Following is the xhtml file.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;ContextMenu Example&lt;/title&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;h:outputScript&gt; 
            //&lt;![CDATA[ 
               function resize(pic, coeff) { 
                  var w  =  Math.round(pic.width * coeff); 
                  var h  =  Math.round(pic.height * coeff); 
                  
                  if (w &gt; 1 &amp;&amp; h &gt; 1 &amp;&amp; h&lt;1000 &amp;&amp; w&lt;1000) { 
                     pic.width  =  w; 
                     pic.heigth  =  h; 
                  } 
               } 
               function enlarge(element){ 
                  resize(element, 1.1); 
               } 
               function decrease(element){ 
                  resize(element, 0.9); 
               } 
            //]]&gt; 
         &lt;/h:outputScript&gt; 
         &lt;h:graphicImage value = "http://www.tutorialspoint.com/images/jsf-minilogo.png" 
            id = "pic" style = "border : 5px solid #E4EAEF"/&gt; 
         
         &lt;rich:contextMenu target = "pic" mode = "client" showEvent = "click"&gt; 
            &lt;rich:menuItem label = "Zoom In" onclick = 
               "enlarge(#{rich:element('pic')});" id = "zin"/&gt; 
            &lt;rich:menuItem label = "Zoom Out" 
               onclick = "decrease(#{rich:element('pic')});" id = "zout"/&gt; 
               
        &lt;/rich:contextMenu&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt;
</pre>
<p>Run the above example and select the rendered image. Following options “Zoom In” and “Zoom out” will be presented. Click the appropriate option and the required functionality will be applied to the image. The above piece of code will generate the following output in the browser.</p>
<img src="/richfaces/images/zoom_in_out.jpg" alt="Zoom In Out" />
<h2>&lt;rich:Component Control&gt;</h2>
<p>This component is user-friendly whenever we want to call any other function from the RichFaces environment. This tag is used to call JavaScript-based action classes. Following example demonstrates how this tag can be used. Create a file and name it as “componentContent.xhtml” file. Place the following piece of code in it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt; 
&lt;!-- 
   To change this license header, choose License Headers in Project Properties. 
   To change this template file, choose Tools | Templates 
   and open the template in the editor. 
--&gt; 
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;Component Control Example&lt;/title&gt;
      &lt;meta name = "viewport" content = "width = device-width, initial-scale = 1.0"/&gt; 
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:commandButton value = "Call the popup"&gt; 
         &lt;rich:componentControl target = "popup" operation = "show" /&gt; 
      &lt;/h:commandButton&gt; 
      &lt;rich:popupPanel id = "popup" modal = "false" autosized = "true" resizeable = "false"&gt;
         &lt;f:facet name = "header"&gt; 
            &lt;h:outputText value = "Welcome mesage" /&gt; 
         &lt;/f:facet&gt; 
         
         &lt;f:facet name = "controls"&gt; 
            &lt;h:outputLink value = "#" 
               onclick = "#{rich:component('popup')}.hide(); return false;" 
               style = "color: inherit"&gt; 
               
               X 
            &lt;/h:outputLink&gt; 
         &lt;/f:facet&gt; 
         &lt;p&gt;Welcome to RICH FACE tutorial at tutorialspoint.com&lt;/p&gt; 
      &lt;/rich:popupPanel&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt;        
</pre>
<p>In the above code, we are calling “onclick()” function using a id “popup”. Once we run it, it shows  a button with “Call the popup”. Once we click the button, RichFaces internally calls the JS function and provides the following output in the browser.</p>
<img src="/richfaces/images/call_popup.jpg" alt="Call Popup" />
<h1>RichFaces - Rich Tree</h1>
<p>In this chapter, we will learn about tree processing in RichFaces. RichFaces provide all the required components to create and manipulate a tree.</p>
<h2>&lt;rich:treeNode&gt;</h2>
<p>This tag is used to create a hierarchical tree. Each node provided inside the &lt;treeNode&gt; will be a child node of the tree. This tag will be used with another tag called &lt;rich:tree&gt;. All the instance variables we are using to create a tree must implement any of these three interfaces - <b>org.richfaces.model.TreeNode, org.richfaces.model.TreeDataModel,</b> and <b>javax.swing.tree.TreeNode</b>.</p>
<p>In the following example, we will populate a tree using &lt;rich:treeNode&gt; tag from the backend.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;TreeNode Example&lt;/title&gt; 
      &lt;meta name = "viewport" content = "width = device-width, initial-scale = 1.0"/&gt;
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form&gt;   
         &lt;rich:tree value = "#{tree.populateNode}" var = "tree"&gt;   
            &lt;rich:treeNode&gt;   
               &lt;rich:treeModelRecursiveAdaptor&gt; 
               &lt;/rich:treeModelRecursiveAdaptor&gt;  
               &lt;h:outputText value = "#{tree.data}" /&gt;   
            &lt;/rich:treeNode&gt;
         &lt;/rich:tree&gt;   
      &lt;/h:form&gt;   
   &lt;/h:body&gt; 

&lt;/html&gt;          
</pre>
<p>Following is the related java class that implements <b>“TreeNodeImpl”</b> interface.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean;   
import javax.faces.bean.RequestScoped;   
import org.richfaces.model.TreeNodeImpl;    

@ManagedBean   
@RequestScoped   

public class Tree extends TreeNodeImpl {   
   private Tree stationRoot;   
   private Tree populateNode;   
   private Object data;   
   
   public Tree() {   
      super();   
   }   
   public Tree(boolean leaf, Object data) {   
      super(leaf);   
      this.data = data;   
   }   
   public Object getData() {   
      return data;   
   }   
   public Tree getPopulateNode() {   
      if (populateNode == null) {   
         String[] List_OF_Node = {
            "Frist Node", "Second Node", "Third Node", "Fourth Node", "Fifth Node"};
         stationRoot = new Tree(false, "Example Of Tree");
         
         for (int i = 0; i &lt; List_OF_Node.length; i++) {   
            Tree child = new Tree(true, List_OF_Node[i]);   
            stationRoot.addChild(i, child);   
         }   
         populateNode = new Tree();   
         populateNode.addChild(0, stationRoot);   
      }   
      return populateNode;   
   }
}
</pre>
<p>The above piece of code will produce the following output in the browser.</p>
<img src="/richfaces/images/rich_tree.jpg" alt="Rich Tree" />
<h2>&lt;rich:treeModelAdaptor&gt;</h2>
<p>This component takes a Map as an input, iterates through it, and produces the required output in the browser. Whenever we need to populate a recursive map, we can use another tag called <b>&lt;rich:recursiveTreeModelAdaptor&gt;</b>.</p>
<p>The following example shows how to render the project structure in the browser. In RichFaces 3, these two tags are used &lt;rich:treeNodeAdaptor&gt; and &lt;rich:recursiveTreeNodeAdaptor&gt;.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt;
      &lt;title&gt;Tree Model and Recursive Model Example&lt;/title&gt; 
   &lt;/h:head&gt; 
   
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;rich:tree toggleType = "AJAX" var = "item" style = "max-width: 400px"&gt; 
            &lt;rich:treeModelRecursiveAdaptor roots = "#{fileSystemBean.sourceRoots}" 
               nodes = "#{item.directories}"&gt; 
               
               &lt;rich:treeNode&gt; 
                  #{item.shortPath} 
               &lt;/rich:treeNode&gt; 
               
               &lt;rich:treeModelAdaptor nodes = "#{item.files}"&gt; 
                  &lt;rich:treeNode&gt;#{item}&lt;/rich:treeNode&gt; 
               &lt;/rich:treeModelAdaptor&gt; 
            &lt;/rich:treeModelRecursiveAdaptor&gt; 
            
         &lt;/rich:tree&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt;    
</pre>
<p>We need to create two new java beans for this example. Following is the code snippet for bean class ”FileSystemBean.java”, which holds the required folder name.</p>
<pre class="prettyprint notranslate">
import java.util.List; 
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.RequestScoped; 
  
@ManagedBean 
@RequestScoped 

public class FileSystemBean { 
   private static final String SRC_PATH = "/WEB-INF"; 
   private List&lt;FileSystemNode&gt; srcRoots; 
  
   public synchronized List&lt;FileSystemNode&gt; getSourceRoots() { 
      if (srcRoots == null) {
         srcRoots = new FileSystemNode(SRC_PATH).getDirectories(); 
      } 
      return srcRoots; 
   } 
} 
</pre>
<p>Following is the code snippet for bean class “FileSystemNode.java”, which holds the required the leaf node of the project.</p>
<pre class="prettyprint notranslate">
import static com.google.common.base.Predicates.containsPattern; 
import static com.google.common.base.Predicates.not; 
import static com.google.common.collect.Iterables.filter; 
import static com.google.common.collect.Iterables.transform; 
  
import java.util.ArrayList; 
import java.util.Collections; 
import java.util.List; 
import java.util.Set; 
  
import javax.faces.context.ExternalContext; 
import javax.faces.context.FacesContext; 
  
import com.google.common.base.Function; 
import com.google.common.collect.Iterables; 
import com.google.common.collect.Lists; 
  
public class FileSystemNode { 
   private static final Function&lt;String, FileSystemNode&gt; 
      FACTORY = new Function&lt;String, FileSystemNode&gt;() { 
      
      public FileSystemNode apply(String from) { 
         return new FileSystemNode(from.substring(0, from.length() - 1)); 
      }; 
   }; 
   private static final Function&lt;String, String&gt; 
      TO_SHORT_PATH = new Function&lt;String, String&gt;() {
      
      public String apply(String from) { 
         int idx = from.lastIndexOf('/'); 
         if (idx &lt; 0) { 
            return from; 
         } 
         return from.substring(idx + 1); 
      }; 
   }; 
   private String path; 
   private List&lt;FileSystemNode&gt; directories; 
   private List&lt;String&gt; files; 
   private String shortPath; 
  
   public FileSystemNode(String path) { 
      this.path = path; 
      int idx = path.lastIndexOf('/'); 
      
      if (idx != -1) { 
         shortPath = path.substring(idx + 1); 
      } else { 
         shortPath = path; 
      } 
   } 
   public synchronized List&lt;FileSystemNode&gt; getDirectories() { 
      if (directories == null) { 
         directories = Lists.newArrayList(); 
  
         Iterables.addAll(directories, transform(filter(
            getResourcePaths(), containsPattern("/$")), FACTORY)); 
      } 
      return directories; 
   }
   public synchronized List&lt;String&gt; getFiles() { 
      if (files == null) { 
         files = new ArrayList&lt;String&gt;(); 
         
         Iterables.addAll(files, transform(filter(
            getResourcePaths(), not(containsPattern("/$"))), TO_SHORT_PATH)); 
      } 
      return files; 
   } 
   private Iterable&lt;String&gt; getResourcePaths() { 
      FacesContext facesContext = FacesContext.getCurrentInstance(); 
      ExternalContext externalContext = facesContext.getExternalContext(); 
      Set&lt;String&gt; resourcePaths = externalContext.getResourcePaths(this.path); 
      
      if (resourcePaths == null) { 
         resourcePaths = Collections.emptySet(); 
      } 
      return resourcePaths; 
   } 
   public String getShortPath() { 
      return shortPath; 
   } 
}     
</pre>
<p>The above example will produce the following output in the browser.</p>
<img src="/richfaces/images/rich_tree_model_adaptor.jpg" alt="Rich Tree Model Adapter" />
<h1>RichFaces - Error Handling</h1>
<p>In this chapter, we will learn about different error handling methods that can be implemented in RichFaces.</p>
<h2>Server Side &amp; Client Side Error Handling</h2>
<p>We need to go through the pretty old Java technique (try/Catch) to handle the action class based exceptions. For client side, we can add one extra file, which will show the error message whenever an error has occurred on the client side.</p>
<p>Following code snippet can be added in web.xml in order to handle errors on the client side.</p>
<pre class="result notranslate">
&lt;error-page&gt; 
   &lt;exception-type&gt;java.lang.Throwable&lt;/exception-type&gt; 
   &lt;location&gt;/error.xhtml&lt;/location&gt; 
&lt;/error-page&gt; 
</pre>
<p>Note, the above exception will provide only static exception messages and we might have to use JSF “ExceptionHandler” class in order to use dynamic exception property. At runtime, RichFaces provides some features to validate the input fields, which can be used as a primary building block of the exception in the application.</p>
<p>Create a new file and place the following code in it.</p>
<pre class="prettyprint notranslate">
&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;  
&lt;!DOCTYPE html&gt; 
&lt;html xmlns = "http://www.w3.org/1999/xhtml"   
   xmlns:h = "http://java.sun.com/jsf/html"   
   xmlns:f = "http://java.sun.com/jsf/core"   
   xmlns:ui = "http://java.sun.com/jsf/facelets"   
   xmlns:a4j = "http://richfaces.org/a4j"   
   xmlns:rich = "http://richfaces.org/rich"&gt; 
   
   &lt;h:head&gt; 
      &lt;title&gt;Error handling&lt;/title&gt; 
      &lt;meta name = "viewport" content = "width = device-width, initial-scale = 1.0"/&gt;
   &lt;/h:head&gt; 
    
   &lt;h:body&gt; 
      &lt;h:form id = "form"&gt; 
         &lt;rich:panel&gt; 
            &lt;f:facet name = "header"&gt; 
               &lt;h:panelGroup&gt; 
                  &lt;h:outputText value = "Student Registration" /&gt; 
                  &lt;a4j:status&gt; 
                     &lt;f:facet name = "start"&gt; 
                        &lt;h:graphicImage value = "/images/ai.gif" style = "height:12px;width:12px;" alt = "ai" /&gt; 
                     &lt;/f:facet&gt; 
                  &lt;/a4j:status&gt; 
               &lt;/h:panelGroup&gt; 
            &lt;/f:facet&gt; 
            
            &lt;h:panelGrid columns = "3"&gt; 
               &lt;h:outputText value = "Name:" /&gt; 
               &lt;h:inputText value = "#{student.name}" id = "name" label = "name"&gt; 
                  &lt;f:validateLength minimum = "3" maximum = "8" /&gt; 
                  &lt;f:validateRequired /&gt; 
                  &lt;rich:validator /&gt; 
               &lt;/h:inputText&gt; 
               &lt;rich:message for = "name" /&gt; 
               &lt;h:outputText value = "Email" /&gt; 
               
               &lt;h:inputText value = "#{student.email}" id = "email" 
                  validatorMessage = "Ivalid email address"&gt; 
                  
                  &lt;f:validateRegex 
                     pattern = 
						   "^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)
						   \.([a-zAZ]{2,5}){1,25})+([;.](([a-zA-Z0-9_\-\.]+)
						   @([a-zA-Z0-9_\-\.]+)\.([a-zAZ]{2,5}){1,25})+)*$" /&gt; 
                  &lt;rich:validator /&gt; 
               &lt;/h:inputText&gt; 
               
               &lt;rich:message for = "email" /&gt; 
               &lt;h:outputText value = "Age" /&gt; 
               
               &lt;h:inputText value = "#{student.age}" id = "age" label = "age"&gt; 
                  &lt;f:validateLongRange minimum = "18" maximum = "99" /&gt; 
                  &lt;rich:validator /&gt; 
               &lt;/h:inputText&gt; 
               &lt;rich:message for = "age" /&gt; 
            &lt;/h:panelGrid&gt;
            
         &lt;/rich:panel&gt; 
      &lt;/h:form&gt; 
   &lt;/h:body&gt;
   
&lt;/html&gt; 
</pre>
<p>Corresponding java class should be a normal bean class like the following.</p>
<pre class="prettyprint notranslate">
import javax.faces.bean.ManagedBean; 
import javax.faces.bean.RequestScoped;  

@ManagedBean 
@RequestScoped 

public class Student { 
   private String name; 
   private String email; 
   private int age;  
   
   public String getName() { 
      return name; 
   }  
   public void setName(String name) { 
      this.name = name; 
   }  
   public String getEmail() { 
      return email; 
   }  
   public void setEmail(String email) { 
      this.email = email; 
   }
   public int getAge() { 
      return age; 
   }  
   public void setAge(int age) { 
      this.age = age; 
   } 
}    
</pre>
<p>The above example will yield the following output in the browser, whenever there will be an error in the &lt;h:form&gt;.</p>
<img src="/richfaces/images/error_handling.jpg" alt="Error Handling" />
<h2>Resource Loading</h2>
<p>RichFaces improves standard resource handling procedure in JSF application. This can be implemented either by configuring ResourceServlet or by Resource optimization. To configure ResourceServlet, we need to add the following piece of code in web.xml.</p>
<pre class="result notranslate">
&lt;servlet&gt; 
   &lt;servlet-name&gt;Resource Servlet&lt;/servlet-name&gt; 
   &lt;servlet-class&gt;org.richfaces.webapp.ResourceServlet&lt;/servlet-class&gt; 
   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; 
&lt;/servlet&gt; 

&lt;servlet-mapping&gt; 
   &lt;servlet-name&gt;Resource Servlet&lt;/servlet-name&gt; 
   &lt;url-pattern&gt;/org.richfaces.resources/*&lt;/url-pattern&gt; 
&lt;/servlet-mapping&gt;
</pre>
<p>We can also enable the optimization in the JSF application, which will optimize different JavaScript and CSS files. We need to add the following code in order to achieve the optimization in the application.</p>
<pre class="result notranslate">
&lt;context-param&gt; 
   &lt;param-name&gt;org.richfaces.resourceOptimization.enabled&lt;/param-name&gt; 
   &lt;param-value&gt;true&lt;/param-value&gt; 
&lt;/context-param&gt; 
</pre>
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/richfaces/richfaces_error_handling.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/richfaces/richfaces_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
