<!DOCTYPE html>
<html lang="en-US">
<head>
<title>JasmineJS - Quick Guide</title>
<meta charset="utf-8">
<meta name="description" content="JasmineJS - Quick Guide - Jasmine is an open-source JavaScript framework, capable of testing any kind of JavaScript application. Jasmine follows Behavior Driven Development (BDD) procedu"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/jasminejs/jasminejs_quick_guide.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<script src="/theme/js/script-min-v2.js?v=3"></script>
<link rel="stylesheet" href="/theme/css/style-min-v2.css?v=6">
<script src="//services.bilsyndication.com/adv1/?d=901" defer="" async=""></script>
<script> var vitag = vitag || {};</script>
<script> vitag.outStreamConfig = { enablePC: false, enableMobile: false };</script>  
<style>
.right-menu .mui-btn {
    background-color:#772a70;
}
a.demo {
    background:#772a70;
}
li.heading {
    background:#772a70;
}
.course-box{background:#772a70}
.home-intro-sub p{color:#772a70}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/jasminejs/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language Tutorials</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.htm"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/jasminejs/images/jasmine-js-mini-logo.jpg" alt="JasmineJS Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">JasmineJS Tutorial</li>
<li><a href="/jasminejs/index.htm">JasmineJS - Home</a></li>
<li><a href="/jasminejs/jasminejs_overview.htm">JasmineJS - Overview</a></li>
<li><a href="/jasminejs/jasminejs_environment_setup.htm">JasmineJS - Environment Setup</a></li>
<li><a href="/jasminejs/jasminejs_writing_text_and_execution.htm">JasmineJS - Writing Text &amp; Execution</a></li>
<li><a href="/jasminejs/jasminejs_bdd_architecture.htm">JasmineJS - BDD Architecture</a></li>
<li><a href="/jasminejs/jasminejs_building_blocks_of_test.htm">JasmineJS - Building Blocks of Test</a></li>
<li><a href="/jasminejs/jasminejs_matchers.htm">JasmineJS - Matchers</a></li>
<li><a href="/jasminejs/jasminejs_skip_block.htm">JasmineJS - Skip Block</a></li>
<li><a href="/jasminejs/jasminejs_equality_check.htm">JasmineJS - Equality Check</a></li>
<li><a href="/jasminejs/jasminejs_boolean_check.htm">JasmineJS - Boolean Check</a></li>
<li><a href="/jasminejs/jasminejs_sequential_check.htm">JasmineJS - Sequential Check</a></li>
<li><a href="/jasminejs/jasminejs_null_check.htm">JasmineJS - Null Check</a></li>
<li><a href="/jasminejs/jasminejs_inequality_check.htm">JasmineJS - Inequality Check</a></li>
<li><a href="/jasminejs/jasminejs_not_number_check.htm">JasmineJS - Not a Number Check</a></li>
<li><a href="/jasminejs/jasminejs_exception_check.htm">JasmineJS - Exception Check</a></li>
<li><a href="/jasminejs/jasminejs_beforeeach.htm">JasmineJS - beforeEach()</a></li>
<li><a href="/jasminejs/jasminejs_aftereach.htm">JasmineJS - afterEach()</a></li>
<li><a href="/jasminejs/jasminejs_spies.htm">JasmineJS - Spies</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">JasmineJS Useful Resources</li>
<li><a href="/jasminejs/jasminejs_quick_guide.htm">JasmineJS - Quick Guide</a></li>
<li><a href="/jasminejs/jasminejs_useful_resources.htm">JasmineJS - Useful Resources</a></li>
<li><a href="/jasminejs/jasminejs_discussion.htm">JasmineJS - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>JasmineJS - Quick Guide</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align: center;">
<script><!--
google_ad_client = "pub-7133395778201029";
var width = document.getElementsByClassName("tutorial-content")[0].clientWidth - 40;
google_ad_width = width;
google_ad_height = 150;
google_ad_format = width + "x150_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="/jasminejs/jasminejs_spies.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/jasminejs/jasminejs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<h1>JasmineJS - Overview</h1>
<p>Jasmine is an open-source JavaScript framework, capable of testing any kind of JavaScript application. Jasmine follows Behavior Driven Development (BDD) procedure to ensure that each line of JavaScript statement is properly unit tested. By following BDD procedure, Jasmine provides a small syntax to test the smallest unit of the entire application instead of testing it as a whole.</p>
<h2>Why Use Jasmine?</h2>
<p>Following are the advantages of using Jasmine over other available JavaScript testing frameworks &minus;</p>
<ul class="list">
<li><p>Jasmine does not depend on any other JavaScript framework.</p></li>
<li><p>Jasmine does not require any DOM.</p></li>
<li><p>All the syntax used in Jasmine framework is clean and obvious.</p></li>
<li><p>Jasmine is heavily influenced by Rspec, JS Spec, and Jspec.</p></li>
<li><p>Jasmine is an open-source framework and easily available in different versions like stand-alone, ruby gem, Node.js, etc.</p></li>
</ul>
<h2>How to Use Jasmine?</h2>
<p>Jasmine is very easy to implement in any kind of development methodology. All you need to download is the standalone library files from the official website <a target="_blank" rel="nofollow" href="https://jasmine.github.io/">https://jasmine.github.io/</a> and implement the same in your application.</p>
<p>The detailed environment setup will be described in the next chapter named “Environment setup”. Once you successfully download and unzip the zip file, then you will find the following sub-folders inside that zip file.</p>
<img src="/jasminejs/images/zip_file.jpg" alt="Zip File" />
<h1>JasmineJS - Environment Setup</h1>
<p>In this chapter, we will discuss the step-by-step procedure of how to set up a Jasmine based BDD testing application.</p>
<p><b>Step 1</b> &minus; Go to the official website of jasmine <a target="_blank" rel="nofollow" href="https://jasmine.github.io/">https://jasmine.github.io/</a></p>
<img src="/jasminejs/images/official_site.jpg" alt="Official Site" />
<p><b>Step 2</b> &minus; Click on any of the version link. It is preferable to use the most recent version that is “Edge”. You will be redirected to the homepage of the selected version.</p>
<img src="/jasminejs/images/homepage.jpg" alt="Home Page" />
<p><b>Step 3</b> &minus; Go to the Download section of the homepage and click on the standalone release page.</p>
<img src="/jasminejs/images/download_section.jpg" alt="Download Section" />
<p><b>Step 4</b> &minus; Once you are redirected to github release page, download the Zip file from there.</p>
<img src="/jasminejs/images/release_page.jpg" alt="Release Page" />
<p><b>Step 5</b> &minus; Unzip the downloaded jasmine-standalone-2.4.1 folder. You will see the following folder structure.</p>
<img src="/jasminejs/images/standalone.jpg" alt="Standalone" />
<p><b>Step 6</b> &minus; Now Create a web application project in your favorite IDE and add this downloaded library files into the application. Here, we have used netbeans IDE. Following is the Directory structure of our application after adding Jasmine framework.</p>
<img src="/jasminejs/images/project.jpg" alt="Project"/>
<p>Our environment setup is done. Now our application is ready to be tested by Jasmine framework.</p>
<h1>JasmineJS - Writing Text &amp; Execution</h1>
<p>In this chapter, we will create a <b>hello world app</b> which will test our <b>“helloworld.js”</b> file. Before developing the hello world app, go back to the previous chapter and make sure that your environment is ready to be tested using Jasmine.</p>
<p><b>Step 1 &minus; Create a Web application in your IDE</b></p>
<p>Here we are using NetBeans 8.1 to develop our hello world app in Jasmine. In NetBeans, go to File &rarr; New Project &rarr; Html5/JS application and create a project. After creating the project, the project directory should look like the following screenshot. We named our project as <b>Jasmine_Demo</b>.</p>
<img src="/jasminejs/images/demo.jpg" alt="Demo" />
<p><b>Step 2 &minus; Include the Jasmine lib file into the application</b></p>
<p>After creating the demo project all you need to do is include the unzip folder of Jasmine library in the Unit Tests folder of the created application. After adding all the library files to our application folder, the structure of our project will look like as shown in the following screenshot.</p>
<img src="/jasminejs/images/project_structure.jpg" alt="Project Structure" />
<p>Files given under <b>spec</b> and <b>src</b> folders are demo files provided by the Jasmine team. Delete these files as we are going to create our own test file and test case. While deleting those JavaScript file, we need to delete the reference of those files inside our output html file that is <b>SpecRunner.html</b>.</p>
<p>Following is the screenshot of SpecRunner.html file where the reference of different JavaScript files inside <b>spec</b> and <b>src</b> will be deleted.</p>
<img src="/jasminejs/images/specrunner_html_file.jpg" alt="SpecRunner Html File" />
<p><b>Step 3 &minus; Create a JavaScript file</b></p>
<p>In this step, we will create a JavaScript file named <b>helloworld.js</b> under <b>src</b> folder. This is the file which we will test through Jasmine. After creating a JavaScript file append the following set of code inside the file.</p>
<pre class="prettyprint notranslate">
/*         
* This is the JavaScript file that need to be tested through jasmine   
* Below is the helloworld function that will return 'Hello World' 
*            
*/    

var helloworld = function() {   
   return 'Hello World'; 
}; 
</pre>
<p><b>Step 4 &minus; Create a test case</b></p>
<p>In this step, we will create another JavaScript file which will contain the test case for the above-mentioned JavaScript file. Go ahead and create a JavaScript file under “Spec” folder and name it as <b>“HelloWorldsSpec.js”</b>. Add the following line of code into this <b>js</b> file.</p>
<pre class="prettyprint notranslate">
/*            
* This is the file which will call our java script file that need to be tested. 
* Each describe block is equivalent to one test case    
*     
*/    

describe("Hello World", function() { 
   
   it("should Return Hello world",function() { 
      expect(helloworld()).toEqual('Hello World'); 
   }); 

});
</pre>
<p><b>Step 5 &minus; Add reference to the output file</b></p>
<p>We successfully created our own file to be tested and the corresponding test case. We kept it under two different folders. In this step, we will modify <b>“SpecRunner.html”</b> to include the reference of these two newly created file.</p>
<pre class="prettyprint notranslate">
&lt;!DOCTYPE html&gt; 
    
&lt;html&gt;    
   &lt;head&gt;    
      &lt;meta charset = "utf-8"&gt; 
    
      &lt;title&gt;Jasmine Spec Runner v2.4.1&lt;/title&gt;  
		
      &lt;link rel = "shortcut icon" type = "image/png" href = 
      "lib/jasmine2.4.1/jasmine_favicon.png"&gt;  
      &lt;link rel = "stylesheet" href = "lib/jasmine-2.4.1/jasmine.css"&gt; 
		
      &lt;script src = "lib/jasmine-2.4.1/jasmine.js"&gt;&lt;/script&gt;
      &lt;script src = "lib/jasmine-2.4.1/jasmine-html.js"&gt;&lt;/script&gt;
      &lt;script src = "lib/jasmine-2.4.1/boot.js"&gt;&lt;/script&gt; 

      &lt;!--Lines to be deleted  
      &lt;script src = "src/Player.js"&gt;&lt;/script&gt; 
      &lt;script src = "src/Song.js"&gt;&lt;/script&gt; 
      &lt;script src = "spec/SpecHelper.js"&gt;&lt;/script&gt;    
      &lt;script src = "spec/PlayerSpec.js"&gt;&lt;/script&gt; --&gt; 

      &lt;!--adding the reference of our newly created file ---&gt; 

      &lt;script src = "src/helloworld.js"&gt;&lt;/script&gt; 
      &lt;script src = "spec/HelloWorldsSpec.js"&gt;&lt;/script&gt; 
   &lt;/head&gt;   

   &lt;body&gt;   
   &lt;/body&gt;   

&lt;/html&gt;
</pre>
<p><b>Step 6 &minus; Execute by running SpecRunner.html</b></p>
<p>This is the final step of our application development. Run SpecRunner.html in any of your favorite browser. The following screenshot will appear as a result. The green screen indicates success, whereas red indicates failure in test case.</p>
<img src="/jasminejs/images/result.jpg" alt="Result" />
<p><b>Step 7 &minus; Understand the failure case</b></p>
<p>Till now we have seen the <b>success</b> test case of the hello world application. Now let us see what if something goes wrong and the test fails. To implement a failure case we need to write a failure test case. To do the same, we are going to modify the <b>helloworld.js</b> file using the following code.</p>
<pre class="prettyprint notranslate">
var helloworld = function () { 
   return ''; 
};  

// we are not returning any string whereas in the spec file 
//we are expecting a // string as “Hello World” 
</pre>
<p>The above code is definitely going to fail because our spec file is not getting the expected string as an output of the <b>helloworld()</b>. The following screenshot of the <b>specRunner.html</b> file depicts that there is an error with its red indicator.</p>
<img src="/jasminejs/images/error.jpg" alt="Error" />
<h1>JasmineJS - BDD Architecture</h1>
<p>Jasmine follows the Behavioral Driven Development (BDD) framework. Before learning the working principle of Jasmine, let us know what is the BDD framework.</p>
<p>The following flowchart depicts the different phases of BDD framework.</p>
<img src="/jasminejs/images/bdd_framework.jpg" alt="BDD Framework" />
<p><b>Step 1 &minus; Start</b></p>
<p>In this phase, we will make our environment ready for Jasmine application.</p>
<p><b>Step 2 &minus; Write a failing test</b></p>
<p>In this step, we will write our first ever test case. It is obvious that this test is going to fail because there is no such file or function to be tested.</p>
<p><b>Step 3 &minus; Write a code to make it pass</b></p>
<p>In this phase, we will prepare our JavaScript file or function that needs to be tested. This phase is crucial as we need to make sure that all the test cases we had prepared in the early stage will be successful.</p>
<p><b>Step 4 &minus; Refactor</b></p>
<p>Refactor is a very important phase of BDD model where we need to prepare as many test cases as we can for that particular application or function.</p>
<p><b>Step 5 &minus; Stop</b></p>
<p>If everything is going well then your application must be ready and up. So we can consider this step as an end of our BDD application.</p>
<h2>Example</h2>
<p>We have now gathered some knowledge about the working principle of BDD framework. Let us see how Jasmine follows this BDD framework in the line of JavaScript testing.</p>
<p>As the screenshot depicts we need to test Abc.js using Jasmine framework. <b>SpecRunner.html</b> is the output file that will take <b>Spec.js(Test case file ), Abc.js(file to be tested)</b>, LIB as an input and run all the test cases present in the spec file and render the result into the browser.</p>
<img src="/jasminejs/images/working_principle.jpg" alt="Working Principle" />
<p><b>Lib</b> &minus; These are the inbuilt JavaScript files that will be helpful to test different functions and other JavaScript files used in our project.</p>
<p><b>Spec.js(Test case file)</b> &minus; This is the JavaScript file that contains all the test cases which is required to test any JavaScript function or file. In the BDD methodology, we are going to write the test first, hence this is the file that needs to be updated first. Definitely this is going to be fail as there is no such file or function present in our project that can be tested. This file can be refactored unlimited times until all the functionalities are tested.</p>
<p><b>Abc.js(File to be tested)</b> &minus; This is the file that contains your functionalities which will be unit tested using Spec.js and Lib file.</p>
<p><b>SpecRunner.html</b> &minus; SpecRunner.html is a normal html file which will render the output of the unit test with the help of embedded JavaScript codes in it.</p>
<h1>JasmineJS - Building Blocks of Test</h1>
<p>In this chapter, we will discuss the building blocks of test by Jasmine.</p>
<h2>Suite Block</h2>
<p>Jasmine is a testing framework for JavaScript. <b>Suite</b> is the basic building block of Jasmine framework. The collection of similar type test cases written for a specific file or function is known as one suite. It contains two other blocks, one is <b>“Describe()”</b> and another one is <b>“It()”</b>.</p>
<p>One Suite block can have only two parameters, one <b>“name of that suite”</b> and another <b>“Function declaration”</b> that actually makes a call to our unit functionality that is to be tested.</p>
<p>In the following example, we will create a suite that will unit test add function in <b>add.js</b> file. In this example, we have our JS file named <b>“calculator.js”</b> which will be tested through Jasmine, and the corresponding Jasmine spec file is <b>“CalCulatorSpec.js”</b>.</p>
<h3>Calculator.js</h3>
<pre class="prettyprint notranslate">
window.Calculator = { 
   
   currentVal:0,  
   varAfterEachExmaple:0, 
   
   add:function (num1) { 
      this.currentVal += num1; 
      return this.currentVal;    
   },     
   
   addAny:function () {    
      var sum = this.currentVal; 
		
      for(var i = 0; i &lt; arguments.length; i++) { 
         sum += arguments[i]; 
      } 
      
      this.currentVal = sum; 
      Return  this.currentVal; 
   }, 
};
</pre>
<h3>CalCulatorSpec.js</h3>
<pre class="prettyprint notranslate">
describe("calculator",function() { 
   
   //test case: 1  
   it("Should retain the current value of all time", function () {
      expect(Calculator.currentVal).toBeDefined();
      expect(Calculator.currentVal).toEqual(0);  
   }); 
   
   //test case: 2  
   it("should add numbers",function() {
      expect(Calculator.add(5)).toEqual(5); 
      expect(Calculator.add(5)).toEqual(10);  
   });         
    
   //test case :3   
   it("Should add any number of numbers",function () {
      expect(Calculator.addAny(1,2,3)).toEqual(6); 
   }); 
}); 
</pre>
<p>In the above function, we have declared two functions. Function <b>add</b> will add two numbers given as an argument to that function and another function <b>addAny</b> should add any numbers given as an argument.</p>
<p>After creating this file, we need to add this file in <b>“SpecRunner.html”</b> inside the head section. On successful compilation, this will generate the following output as a result.</p>
<img src="/jasminejs/images/calculatorspec.jpg" alt="Calculatorspec" />
<h2>Nested Suites Block</h2>
<p>Suite block can have many suite blocks inside another suite block. The following example will show you how we can create a different suite block inside another suite block. We will create two JavaScript files, one named as <b>“NestedSpec.js”</b> and another named as <b>“nested.js”</b>.</p>
<h3>NestedSpec.js</h3>
<pre class="prettyprint notranslate">
describe("nested",function() { 
   
   // Starting of first suite block  
   // First block    
	
   describe("Retaining values ",function () {
   
      //test case:1    
      it ("Should retain the current value of all time", function () { 
         expect(nested.currentVal).toBeDefined();   
         expect(nested.currentVal).toEqual(0);   
      });    
   }); //end of the suite block   

   //second suite block 
   describe("Adding single number ",function () {     
   
      //test case:2 
      it("should add numbers",function() { 
         expect(nested.add(5)).toEqual(5); 
         expect(nested.add(5)).toEqual(10); 
      });         
   }); //end of the suite block  

   //third suite block 
   describe("Adding Different Numbers",function () {  
   
      //test case:3 
      it("Should add any number of numbers",function() {  
         expect(nested.addAny(1,2,3)).toEqual(6);  
      });    
   }); //end of the suite block 
});
</pre>
<h3>Nested.js</h3>
<pre class="prettyprint notranslate">
window.nested = { 
   
   currentVal: 0,
	
   add:function (num1) {  
      this.currentVal += num1;     
      return this.currentVal;    
   },
   
   addAny:function () { 
      Var sum = this.currentVal; 
		
      for(var i = 0;i &lt; arguments.length; i++) { 
         sum += arguments[i]; 
      } 
		
      this.currentVal = sum; 
      return this.currentVal;    
   }  
};
</pre>
<p>The above piece of code will generate the following output as a result of running <b>specRunner.html</b> file after adding this file inside the head section.</p>
<img src="/jasminejs/images/specrunner_result.jpg" alt="SpecRunner Result" />
<h2>Describe Block</h2>
<p>As discussed earlier describe block is a part of Suite block. Like Suite block, it contains two parameters, one <b>“the name of the describe block”</b> and another <b>“function declaration”</b>. In our upcoming examples, we will go through many describe blocks to understand the working flow of Jasmine suite block. Following is an example of a complete describe block.</p>
<pre class="prettyprint notranslate">
describe("Adding single number ",function () { 
   
   it("should add numbers",function() { 
      expect(nested.add(5)).toEqual(5); 
      expect(nested.add(5)).toEqual(10); 
   });     
}
</pre>
<h2>IT Block</h2>
<p>Like describe block we have been introduced to IT block too. It goes within a describe block. This is the block which actually contains each unit test case. In the following code, there are pieces of <b>IT</b> block inside one <b>describe</b> block.</p>
<pre class="prettyprint notranslate">
describe("Adding single number ",function () { 
   
   // test case : 1   
   it("should add numbers",function() {  
      expect(nested.add(5)).toEqual(5); 
      expect(nested.add(5)).toEqual(10); 
   });         
    
   //test case : 2 
   it("should add numbers",function() { 
      expect(nested.addAny(1,2,3)).toEqual(6); 
   });     
}
</pre>
<h2>Expect Block</h2>
<p>Jasmine <b>Expect</b> allows you to write your expectation from the required function or JavaScript file. It comes under <b>IT</b> block. One IT block can have more than one Expect block.</p>
<p>Following is an example of Expect block. This expect block provides a wide variety of methods to unit test your JavaScript function or JavaScript file. Each of the Expect block is also known as a <b>matcher</b>. There are two different types of matchers, one <b>inbuilt matcher</b> and another <b>user defined matchers</b>.</p>
<pre class="prettyprint notranslate">
describe("Adding single number ",function () {   
   
   // test case : 1 
   it("should add numbers",function() {
      expect(nested.add(5)).toEqual(5); 
      expect(nested.add(5)).toEqual(10);
   });          
   
   //test case : 2 
   it("should add numbers",function() {
      expect(nested.addAny(1,2,3)).toEqual(6); 
   });     
}
</pre>
<p>In the upcoming chapters, we will discuss various uses of different inbuilt methods of the Expect block.</p>
<h1>JasmineJS - Matchers</h1>
<p>Jasmine is a testing framework, hence it always aims to compare the result of the JavaScript file or function with the expected result. Matcher works similarly in Jasmine framework.</p>
<p><b>Matchers</b> are the JavaScript function that does a Boolean comparison between an actual output and an expected output. There are two type of matchers <b>Inbuilt matcher</b> and <b>Custom matchers</b>.</p>
<h2>Inbuilt Matcher</h2>
<p>The matchers which are inbuilt in the Jasmine framework are called <b>inbuilt matcher</b>. The user can easily use it <b>implicitly</b>.</p>
<p>The following example shows how Inbuilt Matcher works in Jasmine framework. We have already used some matchers in the previous chapter.</p>
<pre class="prettyprint notranslate">
describe("Adding single number ", function () {  

   //example of toEqual() matcher    
   it("should add numbers",function() { 
      expect(nested.add(5)).toEqual(5); 
      expect(nested.add(5)).toEqual(10); 
   });   
   
   it("should add numbers",function() { 
      expect(nested.addAny(1,2,3)).toEqual(6); 
   });
}
</pre>
<p>In the example toEqual() is the inbuilt matcher which will compare the result of the <b>add()</b> and <b>addAny()</b> methods with the arguments passed to <b>toEqual()</b> matchers.</p>
<h2>Custom Matchers</h2>
<p>The matchers which are not present in the inbuilt system library of Jasmine is called as <b>custom matcher</b>. Custom matcher needs to be defined <b>explicitly()</b>. In the following example, we will see how the custom matcher works.</p>
<pre class="prettyprint notranslate">
describe('This custom matcher example', function() {
   
   beforeEach(function() { 
      // We should add custom matched in beforeEach() function. 
      jasmine.addMatchers ({ 
         validateAge: function() { 
            Return {    
               compare: function(actual,expected) {
                  var result = {}; 
                  result.pass = (actual &gt; = 13 && actual &lt; = 19);
                  result.message = 'sorry u are not a teen ';
                  return result; 
               }   
            };   
         }    
      });    
   }); 
    
   it('Lets see whether u are teen or not', function() { 
      var myAge = 14; 
      expect(myAge).validateAge();         
   });   
    
   it('Lets see whether u are teen or not ', function() { 
      var yourAge = 18;
      expect(yourAge).validateAge();  
   });
});
</pre>
<p>In the above example, <b>validateAge()</b> works as a matcher which is actually validating your age with some range. In this example, validateAge() works as a custom matcher. Add this JS file into <b>SpecRunner.html</b> and run the same. It will generate the following output.</p>
<img src="/jasminejs/images/validateage.jpg" alt="ValidateAge" />
<h1>JasmineJS - Skip Block</h1>
<p>Jasmine also allows the developers to skip one or more than one test cases. These techniques can be applied at the <b>Spec level</b> or the <b>Suite level</b>. Depending on the level of application, this block can be called as a <b>Skipping Spec</b> and <b>Skipping Suite</b> respectively.</p>
<p>In the following example, we will learn how to skip a specific <b>Spec</b> or <b>Suite</b> using <b>“x”</b> character.</p>
<h2>Skipping Spec</h2>
<p>We will modify the previous example using <b>“x”</b> just before <b>it</b> statement.</p>
<pre class="prettyprint notranslate">
describe('This custom matcher example ', function() { 
   
   beforeEach(function() { 
      // We should add custom matched in beforeEach() function. 
      
      jasmine.addMatchers({ 
         validateAge: function() { 
            return { 
               compare: function(actual,expected) { 
                 var result = {}; 
                 result.pass = (actual &gt; = 13 && actual &lt; = 19); 
                 result.message = 'sorry u are not a teen ';  
                 return result; 
               }  
            };   
         }    
      });    
   });  
    
   it('Lets see whether u are teen or not', function() { 
      var myAge = 14; 
      expect(myAge).validateAge();  
   });
   
   xit('Lets see whether u are teen or not ', function() {  
      //Skipping this Spec 
      var yourAge = 18; 
   });
});
</pre>
<p>If we run this JavaScript code, we will receive the following output as a result in the browser. Jasmine itself will notify the user that the specific <b>it</b> block is <b>disabled</b> temporarily using <b>“xit”</b>.</p>
<img src="/jasminejs/images/xit_block_result.jpg" alt="XIT Block Result" />
<h2>Skipping Suite</h2>
<p>In the same way, we can disable the describe block in order to implement the technique of <b>Skipping Suite</b>. In the following example, we will learn about the process of skipping suite block.</p>
<pre class="prettyprint notranslate">
xdescribe('This custom matcher example ', function() {  
   
   //Skipping the entire describe  block  
   beforeEach(function() {  
   
      // We should add custom matched in beforeEach() function.  
      jasmine.addMatchers({  
         validateAge: function() {  
            return {   
               compare: function(actual,expected) {  
                 var result = {}; 
                 result.pass = (actual &gt;=13 && actual&lt;=19); 
                 result.message ='sorry u are not a teen '; 
                 return result;  
               }   
            };   
         }   
      });   
   });

   it('Lets see whether u are teen or not', function() {  
      var myAge = 14; 
      expect(myAge).validateAge(); 
   });  

   it('Lets see whether u are teen or not ', function() {  
      var yourAge = 18; 
      expect(yourAge).validateAge(); 
   });
});
</pre>
<p>The above code will generate the following screenshot as an output.</p>
<img src="/jasminejs/images/skipping_suite.jpg" alt="Skipping Suite" />
<p>As we can see in the message bar, it shows two spec blocks in pending status, which means these two Spec blocks is disabled using <b>“x”</b> character. In the upcoming chapter, we will discuss different types of Jasmine test scenarios.</p>
<h1>JasmineJS - Equality Check</h1>
<p>Jasmine provides plenty of methods which help us check the equality of any JavaScript function and file. Following are some examples to check equality conditions.</p>
<h2>ToEqual()</h2>
<p><b>ToEqual()</b> is the simplest matcher present in the inbuilt library of Jasmine. It just matches whether the result of the operation given as an argument to this method matches with the result of it or not.</p>
<p>The following example will help you understand how this matcher works. We have two files to be tested named as <b>“expectexam.js”</b> and another one through which we need to test is <b>“expectSpec.js”</b>.</p>
<h3>Expectexam.js</h3>
<pre class="prettyprint notranslate">
window.expectexam = {    
   currentVal: 0,   
};
</pre>
<h3>ExpectSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   
   it("The Example of toEqual() method",function () {   
      //this will check whether the value of the variable  
      // currentVal is equal to 0 or not.  
      expect(expectexam.currentVal).toEqual(0);  
   });
});
</pre>
<p>On successful execution, these pieces of code will yield the following output. Remember you need to add these files into the header section of <b>specRunner.html</b> file as directed in the earlier example.</p>
<img src="/jasminejs/images/toequals_method.jpg" alt="toEquals Method" />
<h2>not.toEqual()</h2>
<p><b>not.toEqual()</b> works exactly opposite to toEqual(). <b>not.toEqual()</b> is used when we need to check if the value does not match with the output of any function.</p>
<p>We will modify the above example to show how this works.</p>
<h3>ExpectSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 

   it("The Example of toEqual() method",function () {
      expect(expectexam.currentVal).toEqual(0);  
   });   
   
   it("The Example of not.toEqual() method",function () {  
      //negation  testing expect(expectexam.currentVal).not.toEqual(5); 
   }); 
});
</pre>
<h3>Expectexam.js</h3>
<pre class="prettyprint notranslate">
window.expectexam = { 
   currentVal: 0,  
}; 
</pre>
<p>In the second expect block, we are checking whether the value of the <b>currentVal</b> is equal to 5 as the value of currentVal is zero hence our test passes and provides us with a green output.</p>
<img src="/jasminejs/images/not_equals_method.jpg" alt="notEquals Method" />
<h2>ToBe()</h2>
<p><b>toBe()</b> matcher works in a similar way as toEqual(), however they are technically different from each other. toBe() matcher matches with the type of the object whereas <b>toEqual()</b> matches with the equivalency of the result.</p>
<p>The following example will help you understand the working principle of the toBe() matcher. This matcher is exactly equivalent to the “===” operator of JavaScript whereas toEqual() is similar to the “==” operator of JavaScript.</p>
<h3>ExpectSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () {  

   it("The Example of toBe() method",function () { 
      expect(expectexam.name).toBe(expectexam.name1);     
   });
});
</pre>
<h3>Expectexam.js</h3>
<pre class="prettyprint notranslate">
window.expectexam = {
   currentVal: 0, 
   name:"tutorialspoint", 
   name1:tutorialspoint  
};
</pre>
<p>We will slightly modify our <b>expectexam</b> JavaScript file. We added two new variables, <b>name</b> and <b>name1</b>. Please find the difference between these two added variables - one is of string type and another one is not a string type.</p>
<p>Following screenshot is our test result where the red cross depicts that these two values are not equal, whereas it is expected to be equal. Hence our test fails.</p>
<img src="/jasminejs/images/expect_exam_error.jpg" alt="expectExam Error" />
<p>Let us turn both the variables, <b>name</b> and <b>name1</b> as String type variables and run the same <b>SpecRunner.html</b> again. Now check the output. It will prove that toBe() not only matches with the equivalency of the variable, but it also matches with the data type or object type of the variable.</p>
<h2>not.toBe()</h2>
<p>As seen earlier, not is nothing but a negation of the toBe() method. It fails when the expected result matches with the actual output of the function or JavaScript file.</p>
<p>Following is a simple example that will help you understand how not.toBe() matcher works.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   it("The Example of not.toBe() method",function () { 
      expect(true).not.toBe(false);    
   });
});
</pre>
<p>Here Jasmine will try to match up true with false. As true cannot be same as false, this test case will be valid and pass through.</p>
<img src="/jasminejs/images/tobe_method.jpg" alt="toBe Method" />
<h1>JasmineJS - Boolean Check</h1>
<p>Apart from equality check, Jasmine provides some methods to check Boolean conditions too. Following are the methods that help us check Boolean conditions.</p>
<h2>ToBeTruthy()</h2>
<p>This Boolean matcher is used in Jasmine to check whether the result is equal to true or false.</p>
<p>The following example will help us understand the working principle of the toBeTruthy() function.</p>
<h3>ExpectSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () {
   it("The Example of toBeTruthy() method",function () {   
      expect(expectexam.exampleoftrueFalse(5)).toBeTruthy();    
   });
}); 
</pre>
<h3>Expectexam.js</h3>
<pre class="prettyprint notranslate">
window.expectexam = {  
   exampleoftrueFalse: function (num) {  
      if(num &lt; 10)    
         return true;  
      else   
         return false;  
   },  
};
</pre>
<p>As we are passing number 5, which is smaller than 10, this test case will pass and give us the following output.</p>
<img src="/jasminejs/images/tobetruthy_method.jpg" alt="toBeTruthy Method" />
<p>If we pass a number which is larger than 10, then this green test will change to red. In the second screenshot, you can see that on passing some value which is greater than 10, the expected test case fails and generates red output stating that “Expected false to be truthy”.</p>
<img src="/jasminejs/images/tobetruthy_error.jpg" alt="toBeTruthy Error" />
<h2>toBeFalsy()</h2>
<p>toBeFalsy() also works the same way as toBeTruthy() method. It matches the output to be false whereas toBeTruthy matches the output to be true. The following example will help you understand the basic working principles of toBeFalsy().</p>
<h3>ExpectSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function() { 
   it("The Example of toBeTruthy() method",function () {
      expect(expectexam.exampleoftrueFalse(15)).toBeFalsy();   
   });
});
</pre>
<h3>Expectexam.js</h3>
<pre class="prettyprint notranslate">
window.expectexam = {  
   exampleoftrueFalse: function (num) {  
      if(num &lt; 10)    
         Return true;  
      else   
         return false; 
   },
}; 
</pre>
<p>The above code will pass the Jasmine test case as we are passing value more than 10 and expected the output to be false. Hence, the browser will show us a green sign which means it has passed.</p>
<img src="/jasminejs/images/tobetruthy_method.jpg" alt="toBeTruthy Method" />
<h1>JasmineJS - Sequential Check</h1>
<p>Jasmine also provides different methods to provide sequentiality of the JS output. Following examples show how to implement sequential check using Jasmine.</p>
<h2>ToContain()</h2>
<p><b>toContain()</b> matchers provide us the facility to check whether any element is a part of the same array or some other sequential objects. The following example will help us understand the working methodology of Jasmine toContain() method. Let's add the following piece of code in previously created <b>customerMatcherSpec.js</b> file.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () {  
   it("The  Example of toContain() method",function () { 
      expect([1,2, 3, 4]).toContain(3);
   });
}); 
</pre>
<p>In the above example, we are checking whether 3 is present in that array or not. We get a green output as 3 is present in the array.</p>
<img src="/jasminejs/images/tocontain_method.jpg" alt="toContain Method" />
<p>In the above example, let's change the value of 3 with 15 and run the spec again. We will get the following red screen as 15 does not belong to that array we are passing as a parameter of that function.</p>
<img src="/jasminejs/images/tocontain_error.jpg" alt="toContain Error" />
<h2>ToBeCloseTo()</h2>
<p><b>toBeCloseTo()</b> matcher matches whether the actual value is close to the expected value. In the following example, we will modify our <b>customerMatcherSpec.js</b> file and see how this actually works.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block", function () {  
   it("Example of toBeCloseTo()", function () { 
      expect(12.34).toBeCloseTo(12.3, 1);    
   });
});
</pre>
<p>In the above Describe block, we are checking whether the actual result “12.3” is closer to the expected output “12.34” or not. As this satisfies our requirement, we will have the following green screenshot as our output. The second parameter of this method is the count of the decimal place to be compared with.</p>
<img src="/jasminejs/images/tobecloseto_method.jpg" alt="toBeCloseTo Method" />
<p>In the above code, let's modify the expected value to 15 and run <b>SpecRunner.html</b>.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   it("Example of  toBeCloseTo()", function () { 
      expect(12.34).toBeCloseTo(15, 1);
   });
}); 
</pre>
<p>In this scenario, 15 is nowhere close to 15, hence it will generate an error and present a red screenshot as an error.</p>
<img src="/jasminejs/images/tobecloseto_error.jpg" alt="toBeCloseTo Error" />
<h2>ToMatch()</h2>
<p><b>ToMatch()</b> matcher works on String type variable. It is helpful to find whether a specific String is present in the expected output or not. Following is what our <b>customerMatcherSpec.js</b> looks like.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   it("Example of toMatch()", function () { 
      expect("Jasmine tutorial in tutorials.com").toMatch(/com/);   
   });
});
</pre>
<p>This piece of code will test whether <b>“com”</b> is present in the expected String given. As <b>com</b> exists in the string, it will generate a green screenshot and pass the test condition.</p>
<img src="/jasminejs/images/tomatch_method.jpg" alt="toMatch Method" />
<p>Now let us change the output to some other string, which is not present in the expected value. Then our <b>customerMatcherSpec.js</b> will look like the following.</p>
<pre class="prettyprint notranslate">
describe("Different Methods  of Expect Block",function () { 
   it("Example of toMatch()", function () { 
      expect("Jasmine tutorial in tutorials.com").toMatch(/XYZ/);
   });
}); 
</pre>
<p>The above code will find “XYZ” string in the expected value. As it does not exist in the expected string, it will throw an error and the output screen will be red accordingly.</p>
<img src="/jasminejs/images/tomatch_error.jpg" alt="toMatch Error" />
<h1>JasmineJS - Null Check</h1>
<p>Jasmine provides a different variety of method to check whether the actual output is Null, defined or undefined. In this chapter, we will learn how to implement different Jasmine methods to check the above-mentioned scenarios.</p>
<h2>ToBedefined()</h2>
<p>This matcher is used to check whether any variable in the code is predefined or not. Let us modify our <b>customerMatcherSpec.js</b> file according to this example.</p>
<pre class="prettyprint notranslate">
currentVal = 0;  

describe("Different Methods  of Expect Block",function () { 
   it("Example of  toBeDefined", function () {
      expect(currentVal).toBeDefined();
   });
});
</pre>
<p>In the above code, toBeDefined() will check whether the variable <b>currentVal </b> is defined in the system or not. As currentVal is defined to 0 in the beginning, this test will pass and generate a green screenshot as an output.</p>
<img src="/jasminejs/images/tobedefined_method.jpg" alt="toBeDefined Method" />
<p>Again in the above example, let us remove the first line, where we actually define “currentVal” and run again. Then we will get a red screen, which means the test actually fails because we are expecting an undefined value to be defined. The following screenshot will be the output file.</p>
<img src="/jasminejs/images/tobedefined_error.jpg" alt="toBeDefined Error" />
<h2>ToBeUndefined()</h2>
<p>This matcher helps to check whether any variable is previously undefined or not, basically it works simply opposite to the previous matcher that is toBeDefined. In the following example, we will learn how to use this matcher. Let us modify our Spec file, i.e. <b>customerMatcher.js</b> file with the following entry.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   it("Example of toBeUndefine()", function () { 
      var undefineValue; 
      expect(undefineValue).toBeUndefined(); 
   });
}); 
</pre>
<p>In the above section, we will verify whether our variable <b>“undefineValue”</b> is actually undefined or not. After adding this file into the SpecRunner, we will receive a green color screenshot as an output, which tells us that this value is actually not defined previously.</p>
<img src="/jasminejs/images/tobeundefine_method.jpg" alt="toBeUndefine Method" />
<p>Again let us define the variable with some predefined value and see whether it will throw an error or not. The new <b>customerMatcher.js</b> looks like the following.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () {
   it("Example oftoBeUndefine()", function () { 
      var undefineValue = 0;
      expect(undefineValue).toBeUndefined();
   });
});
</pre>
<p>The above piece of code will throw an error and generate a red color screenshot because we have already defined the <b>“undefineValue”</b> value to <b>“0”</b> and expecting it to be not defined. The following screenshot will be generated on run <b>SpecRunner.html</b> file.</p>
<img src="/jasminejs/images/tobeundefine_error.jpg" alt="toBeUndefine Error" />
<h2>toBeNull()</h2>
<p>As the name signifies this matcher helps to check null values. Let us again modify our <b>customerMatcherSpec.js</b> file with the following piece of code.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   var value = null; 
	
   it("Example of toBeNull()", function () { 
      expect(value).toBeNull();
   });
}); 
</pre>
<p>In the above code, we have mentioned one variable <b>”value”</b> and we have explicitly mentioned this value as null. In the expect block, the toBeNull() matcher will check this value and give us the result accordingly. Following is the output of the above-mentioned code when it is run through the help of the SpecRunner.html file.</p>
<img src="/jasminejs/images/tobenull_method.jpg" alt="toBeNull Method" />
<p>Now let us test by providing some defined value other than null. Please modify the <b>customerMatcher.js</b> file accordingly.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () {
   var value = "TutorialsPoint"; 
	
   it("Example of  toBeNull()", function () { 
      expect(value).toBeNull();
   });
}); 
</pre>
<p>In the above example, we have modified the variable value with “TutorialsPoint” which is not a null value. Hence, this test will fail and produce a red screenshot as an output.</p>
<img src="/jasminejs/images/tobenull_error.jpg" alt="toBeNull Error" />
<h1>JasmineJS - Inequality Check</h1>
<p>Till now, we have discussed different methods in Jasmine which help us test different scenarios based on our requirements. In this chapter, we will learn about different matchers that will help us check the inequality condition in JS file. Following are the matchers used for this purpose.</p>
<h2>ToBeGreaterThan()</h2>
<p>As the name suggests this matcher helps to check greater than condition. Let us modify our <b>customerMatcher.js</b> using the following piece of code.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   var exp = 8;  
	
   it("Example of  toBeGreaterThan()", function () {
      expect(exp).toBeGreaterThan(5);
   });
}); 
</pre>
<p>In the above piece of code, we are expecting that the value of the variable <b>“exp”</b> will be greater than 5. Now as the value of the variable “exp” is “8” which is greater than “5”, this piece of code will generate a green screenshot.</p>
<img src="/jasminejs/images/greaterthan_method.jpg" alt="Greaterthan Method" />
<p>Now again let us modify the value of the variable to “4” and make this test fail. To do that we need to modify the <b>js</b> file using the following piece of code.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () {  
   var exp = 4;  
	
   it ("Example of toBeGreaterThan()", function () {
      expect(exp).toBeGreaterThan(5); 
   });
});
</pre>
<p>This code will fail because value 4 cannot be greater than 5. Hence it will produce the following output.</p>
<img src="/jasminejs/images/greaterthan_error.jpg" alt="Greaterthan Error" />
<h2>ToBeLessThan()</h2>
<p>This matcher helps to check the less than condition of the test scenario. It behaves exactly opposite to that of toBeGreaterThan() matcher. Now let us see how this matcher works. Let us modify the <b>customerMatcher.js</b> file accordingly.</p>
<pre class="prettyprint notranslate">
describe("Different Methodsof Expect Block",function () { 
   var exp = 4;  
	
   it("Example of toBeLessThan()", function() { 
      expect(exp).toBeLessThan(5);    
   });
}); 
</pre>
<p>Like the previous example, we have one variable having value as “4”. In this piece of code, we are checking whether the value of this variable is less than 5 or not. This piece of code will generate the following output.</p>
<img src="/jasminejs/images/lessthan_method.jpg" alt="Lessthan Method" />
<p>Now to make this fail, we need to assign some bigger number to the variable exp. Let us do that and test the application. We will assign 25 as the value to the <b>exp</b>, which will definitely throw an error and yield the following screenshot in red.</p>
<img src="/jasminejs/images/lessthan_error.jpg" alt="Lessthan Error" />
<h1>JasmineJS - Not a Number Check</h1>
<p>Jasmine provides a special matcher to check this special type of testing scenario that is <b>toBeNaN()</b>.</p>
<p>Let us modify our <b>customerMatcher.js</b> with the following code.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   it("Example of toBeNaN()", function () { 
      expect(0 / 0).toBeNaN(); 
   });
});
</pre>
<p>Here we want to test what is the value of “0/0” which cannot be determined. Hence, this piece of code will generate the following green screenshot.</p>
<img src="/jasminejs/images/tobenan.jpg" alt="toBeNan" />
<p>Now let us again modify the code with the following logic, where we will assign one variable <b>exp</b> to 25 and expect the result is not a number one dividing it with 5.</p>
<pre class="prettyprint notranslate">
describe("Different Methods of Expect Block",function () { 
   var exp = 25; 
	
   it("Example of toBeNaN()", function () { 
      expect(exp/5).toBeNaN(); 
   });
});
</pre>
<p>This piece of code will yield the following output.</p>
<img src="/jasminejs/images/tobenan_output.jpg" alt="toBeNan Output" />
<h1>JasmineJS - Exception Check</h1>
<p>Apart from different computational matchers, Jasmine provides some useful matchers to check exception of the program. Let us modify our JavaScript with the following set of code.</p>
<pre class="prettyprint notranslate">
var throwMeAnError = function() {   
   throw new Error(); 
};  

describe("Different Methods of Expect Block", function() {  
   var exp = 25; 

   it ("Hey this will throw an Error ", function() { 
      expect(throwMeAnError).toThrow(); 
   }); 
});
</pre>
<p>In the above example, we have created one method which deliberately throws an exception from that method and in the expect block we expect to catch the error. If everything goes well then this piece of code will yield the following output.</p>
<img src="/jasminejs/images/exception_block.jpg" alt="Exception Block" />
<p>Now, for this test case to fail, we need to omit that throw statement in the function <b>throwMeAnError</b>. Following is the code which will yield a red screenshot as an output since the code does not satisfy our requirement.</p>
<pre class="prettyprint notranslate">
var throwMeAnError = function() {   
   //throw new Error(); 
};   

describe("Different Methods of Expect Block",function() {  
   var exp = 25; 
   
   it("Hey this will throw an Error ", function() {  
      expect(throwMeAnError).toThrow();    
   }); 
});
</pre>
<p>As can be seen, we have commented that line from where our method was throwing the exception. Following is the output of the above code on successful execution of the SpecRunner.html.</p>
<img src="/jasminejs/images/exception_error.jpg" alt="Exception Error" />
<h2>Jasmine.Any()</h2>
<p><b>Any</b> is the special matcher that is used when we are not sure about the output. In the following example, we will learn how this works. Let us modify the <b>customerMatcher.js</b> with the following piece of code.</p>
<pre class="prettyprint notranslate">
var addAny = function() {
   var sum = this.currentVal; 
	
   for (var i = 0; i &lt; arguments.length; i++) { 
      sum += arguments[i]; 
   } 
	
   this.currentVal = sum;  
   return this.currentVal; 
} 

describe("Different Methods of Expect Block",function () { 
   
   it("Example of any()", function() { 
      expect(addAny(9,9)).toEqual(jasmine.any(Number)); 
   });
});
</pre>
<p>Here we have declared one function that will give us the summation of the numbers provided as arguments. In the expect block, we are expecting that the result can be anything but it should be a Number.</p>
<p>As both 9 and 9 after sum yield 18 is a number, this test will pass and it will generate the following green screenshot as an output.</p>
<img src="/jasminejs/images/any_method.jpg" alt="Any Method" />
<p>Now let us change the code according to the following piece of code, where we are expecting a string type variable as an output of the function <b>AddAny()</b>.</p>
<pre class="prettyprint notranslate">
var addAny = function() { 
   var sum = this.currentVal; 
	
   for(var i = 0; i &lt; arguments.length; i++) { 
      sum += arguments[i]; 
   } 
	
   this.currentVal = sum; 
   return this.currentVal; 
}  

describe("Different Methodsof Expect Block",function () { 
   it("Example of any()", function () { 
      expect(addAny(9,9)).toEqual(jasmine.any(String));    
   });
});
</pre>
<p>Following is the output of the above code.</p>
<img src="/jasminejs/images/any_error.jpg" alt="Any Error" />
<h1>JasmineJS - beforeEach()</h1>
<p>Another notable feature of Jasmine is before and after each function. Using these two functionalities, we can execute some pieces of code before and after execution of each spec. This functionality is very useful for running the common code in the application. Let us create one spec file like the following.</p>
<pre class="prettyprint notranslate">
var currentVal = 0; 

beforeEach(function() { 
   currentVal = 5; 
});  

describe("Different Methods of Expect Block",function() { 
   it("after each function ", function() {
      expect(currentVal).toEqual(5);     
   });
});
</pre>
<p>Here although we have declared one variable as “0” in the beginning, we are expecting this value should be equal to 5 in the expectation block. The above code will generate the following output.</p>
<img src="/jasminejs/images/beforeeach.jpg" alt="BeforeEach"/>
<p>In the above code, 5 will be assigned to a variable <b>currentVal</b> before the execution of the expect block. Hence, it generates a green screenshot with no error.</p>
<h1>JasmineJS - afterEach()</h1>
<p>Like beforeEach(), afterEach() works exactly the same way. It executes after the execution of the spec block. Let us modify the previous example using the following code.</p>
<pre class="prettyprint notranslate">
var currentVal = 0; 

afterEach(function() { 
   currentVal = 5;  
});  

describe("Different Methods of Expect Block",function() { 
   it("first call ", function() { 
      expect(currentVal).toEqual(0);     
   });     
   
   it("second call ",  function() { 
      expect(currentVal).toEqual(5);     
   });
});
</pre>
<p>In the above example, while running the first spec block the value of the <b>currentVal</b> is 0. Hence, it will pass the test case but after running the first it block, Jasmine compile ran the afterEach() block, which makes the value of the currentVal to 5. Hence it also satisfies the second case and yields a green screenshot as an output.</p>
<img src="/jasminejs/images/aftereach.jpg" alt="AfterEach" />
<h1>JasmineJS - Spies</h1>
<p>Jasmine spy is another functionality which does the exact same as its name specifies. It will allow you to spy on your application function calls. There are two types of spying technology available in Jasmine. The first methodology can be implemented by using <b>spyOn()</b> and the second methodology can be implemented using <b>createSpy()</b>. In this chapter, we will learn more about these two methodologies.</p>
<h2>spyOn()</h2>
<p>spyOn() is inbuilt into the Jasmine library which allows you to spy on a definite piece of code. Let us create a new spec file “spyJasmineSpec.js” and another <b>js</b> file named as “spyJasmine.js”. Following is the entry of these two files.</p>
<h3>SpyJasmine.js</h3>
<pre class="prettyprint notranslate">
var Person = function() {}; 

Person.prototype.sayHelloWorld = function(dict) { 
   return dict.hello() + " " + dict.world(); 
}; 

var Dictionary = function() {}; 

Dictionary.prototype.hello = function() { 
   return "hello"; 
}; 

Dictionary.prototype.world = function() { 
   return "world"; 
}; 
</pre>
<h3>SpyJasmineSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Example Of jasmine Spy using spyOn()", function() { 
  
   it('uses the dictionary to say "hello world"', function() { 
      var dictionary = new Dictionary; 
      var person = new Person; 
		
      spyOn(dictionary, "hello");  // replace hello function with a spy 
      spyOn(dictionary, "world");  // replace world function with another spy 
		
      person.sayHelloWorld(dictionary);
      expect(dictionary.hello).toHaveBeenCalled();  
      // not possible without first spy 
  
      expect(dictionary.world).toHaveBeenCalled();  
      // not possible withoutsecond spy 
   }); 
});
</pre>
<p>In the above piece of code, we want person object to say “Hello world” but we also want that person object should consult with dictionary object to give us the output literal “Hello world”.</p>
<p>Take a look at the Spec file where you can see that we have used spyOn() function, which actually mimics the functionality of the <b>hello</b> and <b>world</b> function. Hence, we are not actually calling the function but mimicking the function call. That is the specialty of Spies. The above piece of code will yield the following output.</p>
<img src="/jasminejs/images/spyon_method.jpg" alt="spyOn Method" />
<h2>createSpy()</h2>
<p>Another method of obtaining the spying functionality is using createSpy(). Let us modify our two <b>js</b> files using the following code.</p>
<h3>SpyJasmine.js</h3>
<pre class="prettyprint notranslate">
var Person = function() {};    

Person.prototype.sayHelloWorld = function(dict) { 
   return dict.hello() + " " + dict.world(); 
}; 

var Dictionary = function() {}; 

Dictionary.prototype.hello = function() { 
   return "hello"; 
}; 

Dictionary.prototype.world = function() { 
   return "world"; 
}; 
</pre>
<h3>SpyJasmineSpec.js</h3>
<pre class="prettyprint notranslate">
describe("Example Of jasmine Spy using Create Spy", function() { 
   
   it("can have a spy function", function() { 
      var person = new Person(); 
      person.getName11 = jasmine.createSpy("Name spy"); 
      person.getName11(); 
      expect(person.getName11).toHaveBeenCalled(); 
   }); 
}); 
</pre>
<p>Take a look at the spec file, we are calling the <b>getName11()</b> of the <b>Person</b> object. Although this function is not present in the person object in <b>spy Jasmine.js</b>, we are not getting any error and hence the output is green and positive. In this example, createSpy() method actually mimics the functionality of the getName11().</p>
<p>The above code will generate the following output.</p>
<img src="/jasminejs/images/createspy.jpg" alt="CreateSpy" />
<div class="mui-container-fluid button-borders show">
<div class="pre-btn">
<a href="/jasminejs/jasminejs_spies.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/jasminejs/jasminejs_useful_resources.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<script><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" style="margin: 0px auto !important;margin-top:5px;">
<script><!--
google_ad_client = "pub-2537027957187252";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script src="https://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9012177"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9012177")})</script>
</div>
<div class="space-bottom"></div>
<div class="google-right-ad">
<div class="adsbyvli" data-ad-slot="vi_9013289"></div>
<script>(vitag.Init = window.vitag.Init || []).push(function(){viAPItag.display("vi_9013289")})</script>
</div>
<div class="space-bottom" style="margin-bottom:15px;"></div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm#cookies"> <i class="fal fa-shield-check"></i> Cookies Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2019. All Rights Reserved.</div>
</div>
<div id="privacy-banner">
  <div>
    <p>
      We use cookies to provide and improve our services. By using our site, you consent to our Cookies Policy.
      <a id="banner-accept" href="#">Accept</a>
      <a id="banner-learn" href="/about/about_cookies.htm" target="_blank">Learn more</a>
    </p>
  </div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>
